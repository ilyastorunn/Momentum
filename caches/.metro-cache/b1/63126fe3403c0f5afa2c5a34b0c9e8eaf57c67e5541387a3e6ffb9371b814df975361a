{"dependencies":[{"name":"./is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"C6fLnEQPNIdj7xXbougAJ0zoinA=","exportNames":["*"]}},{"name":"./misc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":73,"index":160}}],"key":"ocS4dJ7z/lK/03gbfX2PRZ4zS40=","exportNames":["*"]}},{"name":"./normalize.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":161},"end":{"line":3,"column":49,"index":210}}],"key":"QsDZX1nhDolhUZoDvec3s9Hp/ME=","exportNames":["*"]}},{"name":"./object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":211},"end":{"line":4,"column":61,"index":272}}],"key":"c+4yuYP7E2Xh9QIfj2WEKgywjI4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.eventFromMessage = eventFromMessage;\n  exports.eventFromUnknownInput = eventFromUnknownInput;\n  exports.exceptionFromError = exceptionFromError;\n  exports.parseStackFrames = parseStackFrames;\n  var _is = require(_dependencyMap[0], \"./is.js\");\n  var _misc = require(_dependencyMap[1], \"./misc.js\");\n  var _normalize = require(_dependencyMap[2], \"./normalize.js\");\n  var _object = require(_dependencyMap[3], \"./object.js\");\n  /**\n   * Extracts stack frames from the error.stack string\n   */\n  function parseStackFrames(stackParser, error) {\n    return stackParser(error.stack || '', 1);\n  }\n\n  /**\n   * Extracts stack frames from the error and builds a Sentry Exception\n   */\n  function exceptionFromError(stackParser, error) {\n    const exception = {\n      type: error.name || error.constructor.name,\n      value: error.message\n    };\n    const frames = parseStackFrames(stackParser, error);\n    if (frames.length) {\n      exception.stacktrace = {\n        frames\n      };\n    }\n    return exception;\n  }\n\n  /** If a plain object has a property that is an `Error`, return this error. */\n  function getErrorPropertyFromObject(obj) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        const value = obj[prop];\n        if (value instanceof Error) {\n          return value;\n        }\n      }\n    }\n    return undefined;\n  }\n  function getMessageForObject(exception) {\n    if ('name' in exception && typeof exception.name === 'string') {\n      let message = `'${exception.name}' captured as exception`;\n      if ('message' in exception && typeof exception.message === 'string') {\n        message += ` with message '${exception.message}'`;\n      }\n      return message;\n    } else if ('message' in exception && typeof exception.message === 'string') {\n      return exception.message;\n    }\n    const keys = (0, _object.extractExceptionKeysForMessage)(exception);\n\n    // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n    // We still want to try to get a decent message for these cases\n    if ((0, _is.isErrorEvent)(exception)) {\n      return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n    }\n    const className = getObjectClassName(exception);\n    return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;\n  }\n  function getObjectClassName(obj) {\n    try {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype ? prototype.constructor.name : undefined;\n    } catch (e) {\n      // ignore errors here\n    }\n  }\n  function getException(client, mechanism, exception, hint) {\n    if ((0, _is.isError)(exception)) {\n      return [exception, undefined];\n    }\n\n    // Mutate this!\n    mechanism.synthetic = true;\n    if ((0, _is.isPlainObject)(exception)) {\n      const normalizeDepth = client && client.getOptions().normalizeDepth;\n      const extras = {\n        ['__serialized__']: (0, _normalize.normalizeToSize)(exception, normalizeDepth)\n      };\n      const errorFromProp = getErrorPropertyFromObject(exception);\n      if (errorFromProp) {\n        return [errorFromProp, extras];\n      }\n      const message = getMessageForObject(exception);\n      const ex = hint && hint.syntheticException || new Error(message);\n      ex.message = message;\n      return [ex, extras];\n    }\n\n    // This handles when someone does: `throw \"something awesome\";`\n    // We use synthesized Error here so we can extract a (rough) stack trace.\n    const ex = hint && hint.syntheticException || new Error(exception);\n    ex.message = `${exception}`;\n    return [ex, undefined];\n  }\n\n  /**\n   * Builds and Event from a Exception\n   * @hidden\n   */\n  function eventFromUnknownInput(client, stackParser, exception, hint) {\n    const providedMechanism = hint && hint.data && hint.data.mechanism;\n    const mechanism = providedMechanism || {\n      handled: true,\n      type: 'generic'\n    };\n    const [ex, extras] = getException(client, mechanism, exception, hint);\n    const event = {\n      exception: {\n        values: [exceptionFromError(stackParser, ex)]\n      }\n    };\n    if (extras) {\n      event.extra = extras;\n    }\n    (0, _misc.addExceptionTypeValue)(event, undefined, undefined);\n    (0, _misc.addExceptionMechanism)(event, mechanism);\n    return {\n      ...event,\n      event_id: hint && hint.event_id\n    };\n  }\n\n  /**\n   * Builds and Event from a Message\n   * @hidden\n   */\n  function eventFromMessage(stackParser, message, level = 'info', hint, attachStacktrace) {\n    const event = {\n      event_id: hint && hint.event_id,\n      level\n    };\n    if (attachStacktrace && hint && hint.syntheticException) {\n      const frames = parseStackFrames(stackParser, hint.syntheticException);\n      if (frames.length) {\n        event.exception = {\n          values: [{\n            value: message,\n            stacktrace: {\n              frames\n            }\n          }]\n        };\n        (0, _misc.addExceptionMechanism)(event, {\n          synthetic: true\n        });\n      }\n    }\n    if ((0, _is.isParameterizedString)(message)) {\n      const {\n        __sentry_template_string__,\n        __sentry_template_values__\n      } = message;\n      event.logentry = {\n        message: __sentry_template_string__,\n        params: __sentry_template_values__\n      };\n      return event;\n    }\n    event.message = message;\n    return event;\n  }\n});","lineCount":172,"map":[[9,2,1,0],[9,6,1,0,"_is"],[9,9,1,0],[9,12,1,0,"require"],[9,19,1,0],[9,20,1,0,"_dependencyMap"],[9,34,1,0],[10,2,2,0],[10,6,2,0,"_misc"],[10,11,2,0],[10,14,2,0,"require"],[10,21,2,0],[10,22,2,0,"_dependencyMap"],[10,36,2,0],[11,2,3,0],[11,6,3,0,"_normalize"],[11,16,3,0],[11,19,3,0,"require"],[11,26,3,0],[11,27,3,0,"_dependencyMap"],[11,41,3,0],[12,2,4,0],[12,6,4,0,"_object"],[12,13,4,0],[12,16,4,0,"require"],[12,23,4,0],[12,24,4,0,"_dependencyMap"],[12,38,4,0],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,2,9,0],[16,11,9,9,"parseStackFrames"],[16,27,9,25,"parseStackFrames"],[16,28,9,26,"stackParser"],[16,39,9,37],[16,41,9,39,"error"],[16,46,9,44],[16,48,9,46],[17,4,10,2],[17,11,10,9,"stackParser"],[17,22,10,20],[17,23,10,21,"error"],[17,28,10,26],[17,29,10,27,"stack"],[17,34,10,32],[17,38,10,36],[17,40,10,38],[17,42,10,40],[17,43,10,41],[17,44,10,42],[18,2,11,0],[20,2,13,0],[21,0,14,0],[22,0,15,0],[23,2,16,0],[23,11,16,9,"exceptionFromError"],[23,29,16,27,"exceptionFromError"],[23,30,16,28,"stackParser"],[23,41,16,39],[23,43,16,41,"error"],[23,48,16,46],[23,50,16,48],[24,4,17,2],[24,10,17,8,"exception"],[24,19,17,17],[24,22,17,20],[25,6,18,4,"type"],[25,10,18,8],[25,12,18,10,"error"],[25,17,18,15],[25,18,18,16,"name"],[25,22,18,20],[25,26,18,24,"error"],[25,31,18,29],[25,32,18,30,"constructor"],[25,43,18,41],[25,44,18,42,"name"],[25,48,18,46],[26,6,19,4,"value"],[26,11,19,9],[26,13,19,11,"error"],[26,18,19,16],[26,19,19,17,"message"],[27,4,20,2],[27,5,20,3],[28,4,22,2],[28,10,22,8,"frames"],[28,16,22,14],[28,19,22,17,"parseStackFrames"],[28,35,22,33],[28,36,22,34,"stackParser"],[28,47,22,45],[28,49,22,47,"error"],[28,54,22,52],[28,55,22,53],[29,4,23,2],[29,8,23,6,"frames"],[29,14,23,12],[29,15,23,13,"length"],[29,21,23,19],[29,23,23,21],[30,6,24,4,"exception"],[30,15,24,13],[30,16,24,14,"stacktrace"],[30,26,24,24],[30,29,24,27],[31,8,24,29,"frames"],[32,6,24,36],[32,7,24,37],[33,4,25,2],[34,4,27,2],[34,11,27,9,"exception"],[34,20,27,18],[35,2,28,0],[37,2,30,0],[38,2,31,0],[38,11,31,9,"getErrorPropertyFromObject"],[38,37,31,35,"getErrorPropertyFromObject"],[38,38,31,36,"obj"],[38,41,31,39],[38,43,31,41],[39,4,32,2],[39,9,32,7],[39,15,32,13,"prop"],[39,19,32,17],[39,23,32,21,"obj"],[39,26,32,24],[39,28,32,26],[40,6,33,4],[40,10,33,8,"Object"],[40,16,33,14],[40,17,33,15,"prototype"],[40,26,33,24],[40,27,33,25,"hasOwnProperty"],[40,41,33,39],[40,42,33,40,"call"],[40,46,33,44],[40,47,33,45,"obj"],[40,50,33,48],[40,52,33,50,"prop"],[40,56,33,54],[40,57,33,55],[40,59,33,57],[41,8,34,6],[41,14,34,12,"value"],[41,19,34,17],[41,22,34,20,"obj"],[41,25,34,23],[41,26,34,24,"prop"],[41,30,34,28],[41,31,34,29],[42,8,35,6],[42,12,35,10,"value"],[42,17,35,15],[42,29,35,27,"Error"],[42,34,35,32],[42,36,35,34],[43,10,36,8],[43,17,36,15,"value"],[43,22,36,20],[44,8,37,6],[45,6,38,4],[46,4,39,2],[47,4,41,2],[47,11,41,9,"undefined"],[47,20,41,18],[48,2,42,0],[49,2,44,0],[49,11,44,9,"getMessageForObject"],[49,30,44,28,"getMessageForObject"],[49,31,44,29,"exception"],[49,40,44,38],[49,42,44,40],[50,4,45,2],[50,8,45,6],[50,14,45,12],[50,18,45,16,"exception"],[50,27,45,25],[50,31,45,29],[50,38,45,36,"exception"],[50,47,45,45],[50,48,45,46,"name"],[50,52,45,50],[50,57,45,55],[50,65,45,63],[50,67,45,65],[51,6,46,4],[51,10,46,8,"message"],[51,17,46,15],[51,20,46,18],[51,24,46,22,"exception"],[51,33,46,31],[51,34,46,32,"name"],[51,38,46,36],[51,63,46,61],[52,6,48,4],[52,10,48,8],[52,19,48,17],[52,23,48,21,"exception"],[52,32,48,30],[52,36,48,34],[52,43,48,41,"exception"],[52,52,48,50],[52,53,48,51,"message"],[52,60,48,58],[52,65,48,63],[52,73,48,71],[52,75,48,73],[53,8,49,6,"message"],[53,15,49,13],[53,19,49,17],[53,37,49,35,"exception"],[53,46,49,44],[53,47,49,45,"message"],[53,54,49,52],[53,57,49,55],[54,6,50,4],[55,6,52,4],[55,13,52,11,"message"],[55,20,52,18],[56,4,53,2],[56,5,53,3],[56,11,53,9],[56,15,53,13],[56,24,53,22],[56,28,53,26,"exception"],[56,37,53,35],[56,41,53,39],[56,48,53,46,"exception"],[56,57,53,55],[56,58,53,56,"message"],[56,65,53,63],[56,70,53,68],[56,78,53,76],[56,80,53,78],[57,6,54,4],[57,13,54,11,"exception"],[57,22,54,20],[57,23,54,21,"message"],[57,30,54,28],[58,4,55,2],[59,4,57,2],[59,10,57,8,"keys"],[59,14,57,12],[59,17,57,15],[59,21,57,15,"extractExceptionKeysForMessage"],[59,59,57,45],[59,61,57,46,"exception"],[59,70,57,55],[59,71,57,56],[61,4,59,2],[62,4,60,2],[63,4,61,2],[63,8,61,6],[63,12,61,6,"isErrorEvent"],[63,28,61,18],[63,30,61,19,"exception"],[63,39,61,28],[63,40,61,29],[63,42,61,31],[64,6,62,4],[64,13,62,11],[64,74,62,72,"exception"],[64,83,62,81],[64,84,62,82,"message"],[64,91,62,89],[64,95,62,93],[65,4,63,2],[66,4,65,2],[66,10,65,8,"className"],[66,19,65,17],[66,22,65,20,"getObjectClassName"],[66,40,65,38],[66,41,65,39,"exception"],[66,50,65,48],[66,51,65,49],[67,4,67,2],[67,11,67,9],[67,14,68,4,"className"],[67,23,68,13],[67,27,68,17,"className"],[67,36,68,26],[67,41,68,31],[67,49,68,39],[67,52,68,42],[67,56,68,46,"className"],[67,65,68,55],[67,68,68,58],[67,71,68,61],[67,79,68,69],[67,116,69,39,"keys"],[67,120,69,43],[67,122,69,45],[68,2,70,0],[69,2,72,0],[69,11,72,9,"getObjectClassName"],[69,29,72,27,"getObjectClassName"],[69,30,72,28,"obj"],[69,33,72,31],[69,35,72,33],[70,4,73,2],[70,8,73,6],[71,6,74,4],[71,12,74,10,"prototype"],[71,21,74,19],[71,24,74,22,"Object"],[71,30,74,28],[71,31,74,29,"getPrototypeOf"],[71,45,74,43],[71,46,74,44,"obj"],[71,49,74,47],[71,50,74,48],[72,6,75,4],[72,13,75,11,"prototype"],[72,22,75,20],[72,25,75,23,"prototype"],[72,34,75,32],[72,35,75,33,"constructor"],[72,46,75,44],[72,47,75,45,"name"],[72,51,75,49],[72,54,75,52,"undefined"],[72,63,75,61],[73,4,76,2],[73,5,76,3],[73,6,76,4],[73,13,76,11,"e"],[73,14,76,12],[73,16,76,14],[74,6,77,4],[75,4,77,4],[76,2,79,0],[77,2,81,0],[77,11,81,9,"getException"],[77,23,81,21,"getException"],[77,24,82,2,"client"],[77,30,82,8],[77,32,83,2,"mechanism"],[77,41,83,11],[77,43,84,2,"exception"],[77,52,84,11],[77,54,85,2,"hint"],[77,58,85,6],[77,60,86,2],[78,4,87,2],[78,8,87,6],[78,12,87,6,"isError"],[78,23,87,13],[78,25,87,14,"exception"],[78,34,87,23],[78,35,87,24],[78,37,87,26],[79,6,88,4],[79,13,88,11],[79,14,88,12,"exception"],[79,23,88,21],[79,25,88,23,"undefined"],[79,34,88,32],[79,35,88,33],[80,4,89,2],[82,4,91,2],[83,4,92,2,"mechanism"],[83,13,92,11],[83,14,92,12,"synthetic"],[83,23,92,21],[83,26,92,24],[83,30,92,28],[84,4,94,2],[84,8,94,6],[84,12,94,6,"isPlainObject"],[84,29,94,19],[84,31,94,20,"exception"],[84,40,94,29],[84,41,94,30],[84,43,94,32],[85,6,95,4],[85,12,95,10,"normalizeDepth"],[85,26,95,24],[85,29,95,27,"client"],[85,35,95,33],[85,39,95,37,"client"],[85,45,95,43],[85,46,95,44,"getOptions"],[85,56,95,54],[85,57,95,55],[85,58,95,56],[85,59,95,57,"normalizeDepth"],[85,73,95,71],[86,6,96,4],[86,12,96,10,"extras"],[86,18,96,16],[86,21,96,19],[87,8,96,21],[87,9,96,22],[87,25,96,38],[87,28,96,41],[87,32,96,41,"normalizeToSize"],[87,58,96,56],[87,60,96,57,"exception"],[87,69,96,66],[87,71,96,69,"normalizeDepth"],[87,85,96,83],[88,6,96,85],[88,7,96,86],[89,6,98,4],[89,12,98,10,"errorFromProp"],[89,25,98,23],[89,28,98,26,"getErrorPropertyFromObject"],[89,54,98,52],[89,55,98,53,"exception"],[89,64,98,62],[89,65,98,63],[90,6,99,4],[90,10,99,8,"errorFromProp"],[90,23,99,21],[90,25,99,23],[91,8,100,6],[91,15,100,13],[91,16,100,14,"errorFromProp"],[91,29,100,27],[91,31,100,29,"extras"],[91,37,100,35],[91,38,100,36],[92,6,101,4],[93,6,103,4],[93,12,103,10,"message"],[93,19,103,17],[93,22,103,20,"getMessageForObject"],[93,41,103,39],[93,42,103,40,"exception"],[93,51,103,49],[93,52,103,50],[94,6,104,4],[94,12,104,10,"ex"],[94,14,104,12],[94,17,104,16,"hint"],[94,21,104,20],[94,25,104,24,"hint"],[94,29,104,28],[94,30,104,29,"syntheticException"],[94,48,104,47],[94,52,104,52],[94,56,104,56,"Error"],[94,61,104,61],[94,62,104,62,"message"],[94,69,104,69],[94,70,104,70],[95,6,105,4,"ex"],[95,8,105,6],[95,9,105,7,"message"],[95,16,105,14],[95,19,105,17,"message"],[95,26,105,24],[96,6,107,4],[96,13,107,11],[96,14,107,12,"ex"],[96,16,107,14],[96,18,107,16,"extras"],[96,24,107,22],[96,25,107,23],[97,4,108,2],[99,4,110,2],[100,4,111,2],[101,4,112,2],[101,10,112,8,"ex"],[101,12,112,10],[101,15,112,14,"hint"],[101,19,112,18],[101,23,112,22,"hint"],[101,27,112,26],[101,28,112,27,"syntheticException"],[101,46,112,45],[101,50,112,50],[101,54,112,54,"Error"],[101,59,112,59],[101,60,112,60,"exception"],[101,69,112,70],[101,70,112,71],[102,4,113,2,"ex"],[102,6,113,4],[102,7,113,5,"message"],[102,14,113,12],[102,17,113,15],[102,20,113,18,"exception"],[102,29,113,27],[102,31,113,29],[103,4,115,2],[103,11,115,9],[103,12,115,10,"ex"],[103,14,115,12],[103,16,115,14,"undefined"],[103,25,115,23],[103,26,115,24],[104,2,116,0],[106,2,118,0],[107,0,119,0],[108,0,120,0],[109,0,121,0],[110,2,122,0],[110,11,122,9,"eventFromUnknownInput"],[110,32,122,30,"eventFromUnknownInput"],[110,33,123,2,"client"],[110,39,123,8],[110,41,124,2,"stackParser"],[110,52,124,13],[110,54,125,2,"exception"],[110,63,125,11],[110,65,126,2,"hint"],[110,69,126,6],[110,71,127,2],[111,4,128,2],[111,10,128,8,"providedMechanism"],[111,27,128,25],[111,30,129,4,"hint"],[111,34,129,8],[111,38,129,12,"hint"],[111,42,129,16],[111,43,129,17,"data"],[111,47,129,21],[111,51,129,26,"hint"],[111,55,129,30],[111,56,129,31,"data"],[111,60,129,35],[111,61,129,38,"mechanism"],[111,70,129,47],[112,4,130,2],[112,10,130,8,"mechanism"],[112,19,130,17],[112,22,130,20,"providedMechanism"],[112,39,130,37],[112,43,130,41],[113,6,131,4,"handled"],[113,13,131,11],[113,15,131,13],[113,19,131,17],[114,6,132,4,"type"],[114,10,132,8],[114,12,132,10],[115,4,133,2],[115,5,133,3],[116,4,135,2],[116,10,135,8],[116,11,135,9,"ex"],[116,13,135,11],[116,15,135,13,"extras"],[116,21,135,19],[116,22,135,20],[116,25,135,23,"getException"],[116,37,135,35],[116,38,135,36,"client"],[116,44,135,42],[116,46,135,44,"mechanism"],[116,55,135,53],[116,57,135,55,"exception"],[116,66,135,64],[116,68,135,66,"hint"],[116,72,135,70],[116,73,135,71],[117,4,137,2],[117,10,137,8,"event"],[117,15,137,13],[117,18,137,16],[118,6,138,4,"exception"],[118,15,138,13],[118,17,138,15],[119,8,139,6,"values"],[119,14,139,12],[119,16,139,14],[119,17,139,15,"exceptionFromError"],[119,35,139,33],[119,36,139,34,"stackParser"],[119,47,139,45],[119,49,139,47,"ex"],[119,51,139,49],[119,52,139,50],[120,6,140,4],[121,4,141,2],[121,5,141,3],[122,4,143,2],[122,8,143,6,"extras"],[122,14,143,12],[122,16,143,14],[123,6,144,4,"event"],[123,11,144,9],[123,12,144,10,"extra"],[123,17,144,15],[123,20,144,18,"extras"],[123,26,144,24],[124,4,145,2],[125,4,147,2],[125,8,147,2,"addExceptionTypeValue"],[125,35,147,23],[125,37,147,24,"event"],[125,42,147,29],[125,44,147,31,"undefined"],[125,53,147,40],[125,55,147,42,"undefined"],[125,64,147,51],[125,65,147,52],[126,4,148,2],[126,8,148,2,"addExceptionMechanism"],[126,35,148,23],[126,37,148,24,"event"],[126,42,148,29],[126,44,148,31,"mechanism"],[126,53,148,40],[126,54,148,41],[127,4,150,2],[127,11,150,9],[128,6,151,4],[128,9,151,7,"event"],[128,14,151,12],[129,6,152,4,"event_id"],[129,14,152,12],[129,16,152,14,"hint"],[129,20,152,18],[129,24,152,22,"hint"],[129,28,152,26],[129,29,152,27,"event_id"],[130,4,153,2],[130,5,153,3],[131,2,154,0],[133,2,156,0],[134,0,157,0],[135,0,158,0],[136,0,159,0],[137,2,160,0],[137,11,160,9,"eventFromMessage"],[137,27,160,25,"eventFromMessage"],[137,28,161,2,"stackParser"],[137,39,161,13],[137,41,162,2,"message"],[137,48,162,9],[137,50,163,2,"level"],[137,55,163,7],[137,58,163,10],[137,64,163,16],[137,66,164,2,"hint"],[137,70,164,6],[137,72,165,2,"attachStacktrace"],[137,88,165,18],[137,90,166,2],[138,4,167,2],[138,10,167,8,"event"],[138,15,167,13],[138,18,167,16],[139,6,168,4,"event_id"],[139,14,168,12],[139,16,168,14,"hint"],[139,20,168,18],[139,24,168,22,"hint"],[139,28,168,26],[139,29,168,27,"event_id"],[139,37,168,35],[140,6,169,4,"level"],[141,4,170,2],[141,5,170,3],[142,4,172,2],[142,8,172,6,"attachStacktrace"],[142,24,172,22],[142,28,172,26,"hint"],[142,32,172,30],[142,36,172,34,"hint"],[142,40,172,38],[142,41,172,39,"syntheticException"],[142,59,172,57],[142,61,172,59],[143,6,173,4],[143,12,173,10,"frames"],[143,18,173,16],[143,21,173,19,"parseStackFrames"],[143,37,173,35],[143,38,173,36,"stackParser"],[143,49,173,47],[143,51,173,49,"hint"],[143,55,173,53],[143,56,173,54,"syntheticException"],[143,74,173,72],[143,75,173,73],[144,6,174,4],[144,10,174,8,"frames"],[144,16,174,14],[144,17,174,15,"length"],[144,23,174,21],[144,25,174,23],[145,8,175,6,"event"],[145,13,175,11],[145,14,175,12,"exception"],[145,23,175,21],[145,26,175,24],[146,10,176,8,"values"],[146,16,176,14],[146,18,176,16],[146,19,177,10],[147,12,178,12,"value"],[147,17,178,17],[147,19,178,19,"message"],[147,26,178,26],[148,12,179,12,"stacktrace"],[148,22,179,22],[148,24,179,24],[149,14,179,26,"frames"],[150,12,179,33],[151,10,180,10],[151,11,180,11],[152,8,182,6],[152,9,182,7],[153,8,183,6],[153,12,183,6,"addExceptionMechanism"],[153,39,183,27],[153,41,183,28,"event"],[153,46,183,33],[153,48,183,35],[154,10,183,37,"synthetic"],[154,19,183,46],[154,21,183,48],[155,8,183,53],[155,9,183,54],[155,10,183,55],[156,6,184,4],[157,4,185,2],[158,4,187,2],[158,8,187,6],[158,12,187,6,"isParameterizedString"],[158,37,187,27],[158,39,187,28,"message"],[158,46,187,35],[158,47,187,36],[158,49,187,38],[159,6,188,4],[159,12,188,10],[160,8,188,12,"__sentry_template_string__"],[160,34,188,38],[161,8,188,40,"__sentry_template_values__"],[162,6,188,67],[162,7,188,68],[162,10,188,71,"message"],[162,17,188,78],[163,6,190,4,"event"],[163,11,190,9],[163,12,190,10,"logentry"],[163,20,190,18],[163,23,190,21],[164,8,191,6,"message"],[164,15,191,13],[164,17,191,15,"__sentry_template_string__"],[164,43,191,41],[165,8,192,6,"params"],[165,14,192,12],[165,16,192,14,"__sentry_template_values__"],[166,6,193,4],[166,7,193,5],[167,6,194,4],[167,13,194,11,"event"],[167,18,194,16],[168,4,195,2],[169,4,197,2,"event"],[169,9,197,7],[169,10,197,8,"message"],[169,17,197,15],[169,20,197,18,"message"],[169,27,197,25],[170,4,198,2],[170,11,198,9,"event"],[170,16,198,14],[171,2,199,0],[172,0,199,1],[172,3]],"functionMap":{"names":["<global>","parseStackFrames","exceptionFromError","getErrorPropertyFromObject","getMessageForObject","getObjectClassName","getException","eventFromUnknownInput","eventFromMessage"],"mappings":"AAA;ACQ;CDE;AEK;CFY;AGG;CHW;AIE;CJ0B;AKE;CLO;AME;CNmC;AOM;CPgC;AQM;CRuC"}},"type":"js/module"}]}