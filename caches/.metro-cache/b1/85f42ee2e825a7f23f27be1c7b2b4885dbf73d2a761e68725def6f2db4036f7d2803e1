{"dependencies":[{"name":"@sentry/browser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":136,"index":136}}],"key":"v/L5aEun9KHJcPUBAUY+UgyCfuU=","exportNames":["*"]}},{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":137},"end":{"line":2,"column":128,"index":265}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.tanstackRouterBrowserTracingIntegration = tanstackRouterBrowserTracingIntegration;\n  var _browser = require(_dependencyMap[0], \"@sentry/browser\");\n  var _core = require(_dependencyMap[1], \"@sentry/core\");\n  /**\n   * A custom browser tracing integration for TanStack Router.\n   *\n   * The minimum compatible version of `@tanstack/router` is `1.34.5`.\n   *\n   * @param router A TanStack Router `Router` instance that should be used for routing instrumentation.\n   * @param options Sentry browser tracing configuration.\n   */\n  function tanstackRouterBrowserTracingIntegration(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  router,\n  // This is `any` because we don't want any type mismatches if TanStack Router changes their types\n  options = {}) {\n    const castRouterInstance = router;\n    const browserTracingIntegrationInstance = (0, _browser.browserTracingIntegration)({\n      ...options,\n      instrumentNavigation: false,\n      instrumentPageLoad: false\n    });\n    const {\n      instrumentPageLoad = true,\n      instrumentNavigation = true\n    } = options;\n    return {\n      ...browserTracingIntegrationInstance,\n      afterAllSetup(client) {\n        browserTracingIntegrationInstance.afterAllSetup(client);\n        const initialWindowLocation = _browser.WINDOW.location;\n        if (instrumentPageLoad && initialWindowLocation) {\n          const matchedRoutes = castRouterInstance.matchRoutes(initialWindowLocation.pathname, castRouterInstance.options.parseSearch(initialWindowLocation.search), {\n            preload: false,\n            throwOnError: false\n          });\n          const lastMatch = matchedRoutes[matchedRoutes.length - 1];\n          (0, _browser.startBrowserTracingPageLoadSpan)(client, {\n            name: lastMatch ? lastMatch.routeId : initialWindowLocation.pathname,\n            attributes: {\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.react.tanstack_router',\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: lastMatch ? 'route' : 'url',\n              ...routeMatchToParamSpanAttributes(lastMatch)\n            }\n          });\n        }\n        if (instrumentNavigation) {\n          // The onBeforeNavigate hook is called at the very beginning of a navigation and is only called once per navigation, even when the user is redirected\n          castRouterInstance.subscribe('onBeforeNavigate', onBeforeNavigateArgs => {\n            const fromLocationState = onBeforeNavigateArgs.fromLocation && onBeforeNavigateArgs.fromLocation.state;\n            // onBeforeNavigate is called during pageloads. We can avoid creating navigation spans by comparing the states of the to and from arguments.\n            if (onBeforeNavigateArgs.toLocation.state === fromLocationState) {\n              return;\n            }\n            const onResolvedMatchedRoutes = castRouterInstance.matchRoutes(onBeforeNavigateArgs.toLocation.pathname, onBeforeNavigateArgs.toLocation.search, {\n              preload: false,\n              throwOnError: false\n            });\n            const onBeforeNavigateLastMatch = onResolvedMatchedRoutes[onResolvedMatchedRoutes.length - 1];\n            const navigationLocation = _browser.WINDOW.location;\n            const navigationSpan = (0, _browser.startBrowserTracingNavigationSpan)(client, {\n              name: onBeforeNavigateLastMatch ? onBeforeNavigateLastMatch.routeId : navigationLocation.pathname,\n              attributes: {\n                [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n                [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.react.tanstack_router',\n                [_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: onBeforeNavigateLastMatch ? 'route' : 'url'\n              }\n            });\n\n            // In case the user is redirected during navigation we want to update the span with the right value.\n            const unsubscribeOnResolved = castRouterInstance.subscribe('onResolved', onResolvedArgs => {\n              unsubscribeOnResolved();\n              if (navigationSpan) {\n                const onResolvedMatchedRoutes = castRouterInstance.matchRoutes(onResolvedArgs.toLocation.pathname, onResolvedArgs.toLocation.search, {\n                  preload: false,\n                  throwOnError: false\n                });\n                const onResolvedLastMatch = onResolvedMatchedRoutes[onResolvedMatchedRoutes.length - 1];\n                if (onResolvedLastMatch) {\n                  navigationSpan.updateName(onResolvedLastMatch.routeId);\n                  navigationSpan.setAttribute(_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n                  navigationSpan.setAttributes(routeMatchToParamSpanAttributes(onResolvedLastMatch));\n                }\n              }\n            });\n          });\n        }\n      }\n    };\n  }\n  function routeMatchToParamSpanAttributes(match) {\n    if (!match) {\n      return {};\n    }\n    const paramAttributes = {};\n    Object.entries(match.params).forEach(([key, value]) => {\n      paramAttributes[`url.path.params.${key}`] = value;\n    });\n    return paramAttributes;\n  }\n});","lineCount":106,"map":[[6,2,1,0],[6,6,1,0,"_browser"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,2,0],[7,6,2,0,"_core"],[7,11,2,0],[7,14,2,0,"require"],[7,21,2,0],[7,22,2,0,"_dependencyMap"],[7,36,2,0],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,2,12,0],[16,11,12,9,"tanstackRouterBrowserTracingIntegration"],[16,50,12,48,"tanstackRouterBrowserTracingIntegration"],[17,2,13,2],[18,2,14,2,"router"],[18,8,14,8],[19,2,14,10],[20,2,15,2,"options"],[20,9,15,9],[20,12,15,12],[20,13,15,13],[20,14,15,14],[20,16,16,2],[21,4,17,2],[21,10,17,8,"castRouterInstance"],[21,28,17,26],[21,31,17,29,"router"],[21,37,17,35],[22,4,19,2],[22,10,19,8,"browserTracingIntegrationInstance"],[22,43,19,41],[22,46,19,44],[22,50,19,44,"browserTracingIntegration"],[22,84,19,69],[22,86,19,70],[23,6,20,4],[23,9,20,7,"options"],[23,16,20,14],[24,6,21,4,"instrumentNavigation"],[24,26,21,24],[24,28,21,26],[24,33,21,31],[25,6,22,4,"instrumentPageLoad"],[25,24,22,22],[25,26,22,24],[26,4,23,2],[26,5,23,3],[26,6,23,4],[27,4,25,2],[27,10,25,8],[28,6,25,10,"instrumentPageLoad"],[28,24,25,28],[28,27,25,31],[28,31,25,35],[29,6,25,37,"instrumentNavigation"],[29,26,25,57],[29,29,25,60],[30,4,25,65],[30,5,25,66],[30,8,25,69,"options"],[30,15,25,76],[31,4,27,2],[31,11,27,9],[32,6,28,4],[32,9,28,7,"browserTracingIntegrationInstance"],[32,42,28,40],[33,6,29,4,"afterAllSetup"],[33,19,29,17,"afterAllSetup"],[33,20,29,18,"client"],[33,26,29,24],[33,28,29,26],[34,8,30,6,"browserTracingIntegrationInstance"],[34,41,30,39],[34,42,30,40,"afterAllSetup"],[34,55,30,53],[34,56,30,54,"client"],[34,62,30,60],[34,63,30,61],[35,8,32,6],[35,14,32,12,"initialWindowLocation"],[35,35,32,33],[35,38,32,36,"WINDOW"],[35,53,32,42],[35,54,32,43,"location"],[35,62,32,51],[36,8,33,6],[36,12,33,10,"instrumentPageLoad"],[36,30,33,28],[36,34,33,32,"initialWindowLocation"],[36,55,33,53],[36,57,33,55],[37,10,34,8],[37,16,34,14,"matchedRoutes"],[37,29,34,27],[37,32,34,30,"castRouterInstance"],[37,50,34,48],[37,51,34,49,"matchRoutes"],[37,62,34,60],[37,63,35,10,"initialWindowLocation"],[37,84,35,31],[37,85,35,32,"pathname"],[37,93,35,40],[37,95,36,10,"castRouterInstance"],[37,113,36,28],[37,114,36,29,"options"],[37,121,36,36],[37,122,36,37,"parseSearch"],[37,133,36,48],[37,134,36,49,"initialWindowLocation"],[37,155,36,70],[37,156,36,71,"search"],[37,162,36,77],[37,163,36,78],[37,165,37,10],[38,12,37,12,"preload"],[38,19,37,19],[38,21,37,21],[38,26,37,26],[39,12,37,28,"throwOnError"],[39,24,37,40],[39,26,37,42],[40,10,37,48],[40,11,38,8],[40,12,38,9],[41,10,40,8],[41,16,40,14,"lastMatch"],[41,25,40,23],[41,28,40,26,"matchedRoutes"],[41,41,40,39],[41,42,40,40,"matchedRoutes"],[41,55,40,53],[41,56,40,54,"length"],[41,62,40,60],[41,65,40,63],[41,66,40,64],[41,67,40,65],[42,10,42,8],[42,14,42,8,"startBrowserTracingPageLoadSpan"],[42,54,42,39],[42,56,42,40,"client"],[42,62,42,46],[42,64,42,48],[43,12,43,10,"name"],[43,16,43,14],[43,18,43,16,"lastMatch"],[43,27,43,25],[43,30,43,28,"lastMatch"],[43,39,43,37],[43,40,43,38,"routeId"],[43,47,43,45],[43,50,43,48,"initialWindowLocation"],[43,71,43,69],[43,72,43,70,"pathname"],[43,80,43,78],[44,12,44,10,"attributes"],[44,22,44,20],[44,24,44,22],[45,14,45,12],[45,15,45,13,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[45,49,45,41],[45,52,45,44],[45,62,45,54],[46,14,46,12],[46,15,46,13,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[46,53,46,45],[46,56,46,48],[46,93,46,85],[47,14,47,12],[47,15,47,13,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[47,53,47,45],[47,56,47,48,"lastMatch"],[47,65,47,57],[47,68,47,60],[47,75,47,67],[47,78,47,70],[47,83,47,75],[48,14,48,12],[48,17,48,15,"routeMatchToParamSpanAttributes"],[48,48,48,46],[48,49,48,47,"lastMatch"],[48,58,48,56],[49,12,49,10],[50,10,50,8],[50,11,50,9],[50,12,50,10],[51,8,51,6],[52,8,53,6],[52,12,53,10,"instrumentNavigation"],[52,32,53,30],[52,34,53,32],[53,10,54,8],[54,10,55,8,"castRouterInstance"],[54,28,55,26],[54,29,55,27,"subscribe"],[54,38,55,36],[54,39,55,37],[54,57,55,55],[54,59,55,57,"onBeforeNavigateArgs"],[54,79,55,77],[54,83,55,81],[55,12,56,10],[55,18,56,16,"fromLocationState"],[55,35,56,33],[55,38,56,36,"onBeforeNavigateArgs"],[55,58,56,56],[55,59,56,57,"fromLocation"],[55,71,56,69],[55,75,56,73,"onBeforeNavigateArgs"],[55,95,56,93],[55,96,56,94,"fromLocation"],[55,108,56,106],[55,109,56,107,"state"],[55,114,56,112],[56,12,57,10],[57,12,58,10],[57,16,58,14,"onBeforeNavigateArgs"],[57,36,58,34],[57,37,58,35,"toLocation"],[57,47,58,45],[57,48,58,46,"state"],[57,53,58,51],[57,58,58,56,"fromLocationState"],[57,75,58,73],[57,77,58,75],[58,14,59,12],[59,12,60,10],[60,12,62,10],[60,18,62,16,"onResolvedMatchedRoutes"],[60,41,62,39],[60,44,62,42,"castRouterInstance"],[60,62,62,60],[60,63,62,61,"matchRoutes"],[60,74,62,72],[60,75,63,12,"onBeforeNavigateArgs"],[60,95,63,32],[60,96,63,33,"toLocation"],[60,106,63,43],[60,107,63,44,"pathname"],[60,115,63,52],[60,117,64,12,"onBeforeNavigateArgs"],[60,137,64,32],[60,138,64,33,"toLocation"],[60,148,64,43],[60,149,64,44,"search"],[60,155,64,50],[60,157,65,12],[61,14,65,14,"preload"],[61,21,65,21],[61,23,65,23],[61,28,65,28],[62,14,65,30,"throwOnError"],[62,26,65,42],[62,28,65,44],[63,12,65,50],[63,13,66,10],[63,14,66,11],[64,12,68,10],[64,18,68,16,"onBeforeNavigateLastMatch"],[64,43,68,41],[64,46,68,44,"onResolvedMatchedRoutes"],[64,69,68,67],[64,70,68,68,"onResolvedMatchedRoutes"],[64,93,68,91],[64,94,68,92,"length"],[64,100,68,98],[64,103,68,101],[64,104,68,102],[64,105,68,103],[65,12,70,10],[65,18,70,16,"navigationLocation"],[65,36,70,34],[65,39,70,37,"WINDOW"],[65,54,70,43],[65,55,70,44,"location"],[65,63,70,52],[66,12,71,10],[66,18,71,16,"navigationSpan"],[66,32,71,30],[66,35,71,33],[66,39,71,33,"startBrowserTracingNavigationSpan"],[66,81,71,66],[66,83,71,67,"client"],[66,89,71,73],[66,91,71,75],[67,14,72,12,"name"],[67,18,72,16],[67,20,72,18,"onBeforeNavigateLastMatch"],[67,45,72,43],[67,48,72,46,"onBeforeNavigateLastMatch"],[67,73,72,71],[67,74,72,72,"routeId"],[67,81,72,79],[67,84,72,82,"navigationLocation"],[67,102,72,100],[67,103,72,101,"pathname"],[67,111,72,109],[68,14,73,12,"attributes"],[68,24,73,22],[68,26,73,24],[69,16,74,14],[69,17,74,15,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[69,51,74,43],[69,54,74,46],[69,66,74,58],[70,16,75,14],[70,17,75,15,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[70,55,75,47],[70,58,75,50],[70,97,75,89],[71,16,76,14],[71,17,76,15,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[71,55,76,47],[71,58,76,50,"onBeforeNavigateLastMatch"],[71,83,76,75],[71,86,76,78],[71,93,76,85],[71,96,76,88],[72,14,77,12],[73,12,78,10],[73,13,78,11],[73,14,78,12],[75,12,80,10],[76,12,81,10],[76,18,81,16,"unsubscribeOnResolved"],[76,39,81,37],[76,42,81,40,"castRouterInstance"],[76,60,81,58],[76,61,81,59,"subscribe"],[76,70,81,68],[76,71,81,69],[76,83,81,81],[76,85,81,83,"onResolvedArgs"],[76,99,81,97],[76,103,81,101],[77,14,82,12,"unsubscribeOnResolved"],[77,35,82,33],[77,36,82,34],[77,37,82,35],[78,14,83,12],[78,18,83,16,"navigationSpan"],[78,32,83,30],[78,34,83,32],[79,16,84,14],[79,22,84,20,"onResolvedMatchedRoutes"],[79,45,84,43],[79,48,84,46,"castRouterInstance"],[79,66,84,64],[79,67,84,65,"matchRoutes"],[79,78,84,76],[79,79,85,16,"onResolvedArgs"],[79,93,85,30],[79,94,85,31,"toLocation"],[79,104,85,41],[79,105,85,42,"pathname"],[79,113,85,50],[79,115,86,16,"onResolvedArgs"],[79,129,86,30],[79,130,86,31,"toLocation"],[79,140,86,41],[79,141,86,42,"search"],[79,147,86,48],[79,149,87,16],[80,18,87,18,"preload"],[80,25,87,25],[80,27,87,27],[80,32,87,32],[81,18,87,34,"throwOnError"],[81,30,87,46],[81,32,87,48],[82,16,87,54],[82,17,88,14],[82,18,88,15],[83,16,90,14],[83,22,90,20,"onResolvedLastMatch"],[83,41,90,39],[83,44,90,42,"onResolvedMatchedRoutes"],[83,67,90,65],[83,68,90,66,"onResolvedMatchedRoutes"],[83,91,90,89],[83,92,90,90,"length"],[83,98,90,96],[83,101,90,99],[83,102,90,100],[83,103,90,101],[84,16,92,14],[84,20,92,18,"onResolvedLastMatch"],[84,39,92,37],[84,41,92,39],[85,18,93,16,"navigationSpan"],[85,32,93,30],[85,33,93,31,"updateName"],[85,43,93,41],[85,44,93,42,"onResolvedLastMatch"],[85,63,93,61],[85,64,93,62,"routeId"],[85,71,93,69],[85,72,93,70],[86,18,94,16,"navigationSpan"],[86,32,94,30],[86,33,94,31,"setAttribute"],[86,45,94,43],[86,46,94,44,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[86,84,94,76],[86,86,94,78],[86,93,94,85],[86,94,94,86],[87,18,95,16,"navigationSpan"],[87,32,95,30],[87,33,95,31,"setAttributes"],[87,46,95,44],[87,47,95,45,"routeMatchToParamSpanAttributes"],[87,78,95,76],[87,79,95,77,"onResolvedLastMatch"],[87,98,95,96],[87,99,95,97],[87,100,95,98],[88,16,96,14],[89,14,97,12],[90,12,98,10],[90,13,98,11],[90,14,98,12],[91,10,99,8],[91,11,99,9],[91,12,99,10],[92,8,100,6],[93,6,101,4],[94,4,102,2],[94,5,102,3],[95,2,103,0],[96,2,105,0],[96,11,105,9,"routeMatchToParamSpanAttributes"],[96,42,105,40,"routeMatchToParamSpanAttributes"],[96,43,105,41,"match"],[96,48,105,46],[96,50,105,48],[97,4,106,2],[97,8,106,6],[97,9,106,7,"match"],[97,14,106,12],[97,16,106,14],[98,6,107,4],[98,13,107,11],[98,14,107,12],[98,15,107,13],[99,4,108,2],[100,4,110,2],[100,10,110,8,"paramAttributes"],[100,25,110,23],[100,28,110,26],[100,29,110,27],[100,30,110,28],[101,4,111,2,"Object"],[101,10,111,8],[101,11,111,9,"entries"],[101,18,111,16],[101,19,111,17,"match"],[101,24,111,22],[101,25,111,23,"params"],[101,31,111,29],[101,32,111,30],[101,33,111,31,"forEach"],[101,40,111,38],[101,41,111,39],[101,42,111,40],[101,43,111,41,"key"],[101,46,111,44],[101,48,111,46,"value"],[101,53,111,51],[101,54,111,52],[101,59,111,57],[102,6,112,4,"paramAttributes"],[102,21,112,19],[102,22,112,20],[102,41,112,39,"key"],[102,44,112,42],[102,46,112,44],[102,47,112,45],[102,50,112,48,"value"],[102,55,112,53],[103,4,113,2],[103,5,113,3],[103,6,113,4],[104,4,115,2],[104,11,115,9,"paramAttributes"],[104,26,115,24],[105,2,116,0],[106,0,116,1],[106,3]],"functionMap":{"names":["<global>","tanstackRouterBrowserTracingIntegration","afterAllSetup","castRouterInstance.subscribe$argument_1","routeMatchToParamSpanAttributes","Object.entries.forEach$argument_0"],"mappings":"AAA;ACW;ICiB;yDC0B;SD4C;KDE;CDE;AIE;uCCM;GDE;CJG"}},"type":"js/module"}]}