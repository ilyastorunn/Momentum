{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.metrics = void 0;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  /**\n   * Adds a value to a counter metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function increment(name, value = 1, data) {\n    // eslint-disable-next-line deprecation/deprecation\n    _core.metrics.increment(_core.BrowserMetricsAggregator, name, value, data);\n  }\n\n  /**\n   * Adds a value to a distribution metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function distribution(name, value, data) {\n    // eslint-disable-next-line deprecation/deprecation\n    _core.metrics.distribution(_core.BrowserMetricsAggregator, name, value, data);\n  }\n\n  /**\n   * Adds a value to a set metric. Value must be a string or integer.\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function set(name, value, data) {\n    // eslint-disable-next-line deprecation/deprecation\n    _core.metrics.set(_core.BrowserMetricsAggregator, name, value, data);\n  }\n\n  /**\n   * Adds a value to a gauge metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function gauge(name, value, data) {\n    // eslint-disable-next-line deprecation/deprecation\n    _core.metrics.gauge(_core.BrowserMetricsAggregator, name, value, data);\n  }\n\n  /**\n   * Adds a timing metric.\n   * The metric is added as a distribution metric.\n   *\n   * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n   * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n\n  function timing(name, value, unit = 'second', data) {\n    // eslint-disable-next-line deprecation/deprecation\n    return _core.metrics.timing(_core.BrowserMetricsAggregator, name, value, unit, data);\n  }\n\n  /**\n   * The metrics API is used to capture custom metrics in Sentry.\n   *\n   * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n   */\n  const metrics = exports.metrics = {\n    increment,\n    distribution,\n    set,\n    gauge,\n    timing\n  };\n});","lineCount":74,"map":[[6,2,1,0],[6,6,1,0,"_core"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,2,8,0],[12,11,8,9,"increment"],[12,20,8,18,"increment"],[12,21,8,19,"name"],[12,25,8,23],[12,27,8,25,"value"],[12,32,8,30],[12,35,8,33],[12,36,8,34],[12,38,8,36,"data"],[12,42,8,40],[12,44,8,42],[13,4,9,2],[14,4,10,2,"metrics$1"],[14,17,10,11],[14,18,10,12,"increment"],[14,27,10,21],[14,28,10,22,"BrowserMetricsAggregator"],[14,58,10,46],[14,60,10,48,"name"],[14,64,10,52],[14,66,10,54,"value"],[14,71,10,59],[14,73,10,61,"data"],[14,77,10,65],[14,78,10,66],[15,2,11,0],[17,2,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,2,18,0],[22,11,18,9,"distribution"],[22,23,18,21,"distribution"],[22,24,18,22,"name"],[22,28,18,26],[22,30,18,28,"value"],[22,35,18,33],[22,37,18,35,"data"],[22,41,18,39],[22,43,18,41],[23,4,19,2],[24,4,20,2,"metrics$1"],[24,17,20,11],[24,18,20,12,"distribution"],[24,30,20,24],[24,31,20,25,"BrowserMetricsAggregator"],[24,61,20,49],[24,63,20,51,"name"],[24,67,20,55],[24,69,20,57,"value"],[24,74,20,62],[24,76,20,64,"data"],[24,80,20,68],[24,81,20,69],[25,2,21,0],[27,2,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,2,28,0],[32,11,28,9,"set"],[32,14,28,12,"set"],[32,15,28,13,"name"],[32,19,28,17],[32,21,28,19,"value"],[32,26,28,24],[32,28,28,26,"data"],[32,32,28,30],[32,34,28,32],[33,4,29,2],[34,4,30,2,"metrics$1"],[34,17,30,11],[34,18,30,12,"set"],[34,21,30,15],[34,22,30,16,"BrowserMetricsAggregator"],[34,52,30,40],[34,54,30,42,"name"],[34,58,30,46],[34,60,30,48,"value"],[34,65,30,53],[34,67,30,55,"data"],[34,71,30,59],[34,72,30,60],[35,2,31,0],[37,2,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,2,38,0],[42,11,38,9,"gauge"],[42,16,38,14,"gauge"],[42,17,38,15,"name"],[42,21,38,19],[42,23,38,21,"value"],[42,28,38,26],[42,30,38,28,"data"],[42,34,38,32],[42,36,38,34],[43,4,39,2],[44,4,40,2,"metrics$1"],[44,17,40,11],[44,18,40,12,"gauge"],[44,23,40,17],[44,24,40,18,"BrowserMetricsAggregator"],[44,54,40,42],[44,56,40,44,"name"],[44,60,40,48],[44,62,40,50,"value"],[44,67,40,55],[44,69,40,57,"data"],[44,73,40,61],[44,74,40,62],[45,2,41,0],[47,2,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[57,2,53,0],[57,11,53,9,"timing"],[57,17,53,15,"timing"],[57,18,54,2,"name"],[57,22,54,6],[57,24,55,2,"value"],[57,29,55,7],[57,31,56,2,"unit"],[57,35,56,6],[57,38,56,9],[57,46,56,17],[57,48,57,2,"data"],[57,52,57,6],[57,54,58,2],[58,4,59,2],[59,4,60,2],[59,11,60,9,"metrics$1"],[59,24,60,18],[59,25,60,19,"timing"],[59,31,60,25],[59,32,60,26,"BrowserMetricsAggregator"],[59,62,60,50],[59,64,60,52,"name"],[59,68,60,56],[59,70,60,58,"value"],[59,75,60,63],[59,77,60,65,"unit"],[59,81,60,69],[59,83,60,71,"data"],[59,87,60,75],[59,88,60,76],[60,2,61,0],[62,2,63,0],[63,0,64,0],[64,0,65,0],[65,0,66,0],[66,0,67,0],[67,2,68,0],[67,8,68,6,"metrics"],[67,15,68,13],[67,18,68,13,"exports"],[67,25,68,13],[67,26,68,13,"metrics"],[67,33,68,13],[67,36,68,16],[68,4,69,2,"increment"],[68,13,69,11],[69,4,70,2,"distribution"],[69,16,70,14],[70,4,71,2,"set"],[70,7,71,5],[71,4,72,2,"gauge"],[71,9,72,7],[72,4,73,2,"timing"],[73,2,74,0],[73,3,74,1],[74,0,74,2],[74,3]],"functionMap":{"names":["<global>","increment","distribution","set","gauge","timing"],"mappings":"AAA;ACO;CDG;AEO;CFG;AGO;CHG;AIO;CJG;AKY;CLQ"}},"type":"js/module"}]}