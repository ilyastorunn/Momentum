{"dependencies":[{"name":"./stacktrace.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"aMpe18tuIEoMpnkxgMUgt39EQuk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.filenameIsInApp = filenameIsInApp;\n  exports.node = node;\n  exports.nodeStackLineParser = nodeStackLineParser;\n  var _stacktrace = require(_dependencyMap[0], \"./stacktrace.js\");\n  /**\n   * Does this filename look like it's part of the app code?\n   */\n  function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename &&\n    // It's not internal if it's an absolute linux path\n    !filename.startsWith('/') &&\n    // It's not internal if it's an absolute windows path\n    !filename.match(/^[A-Z]:/) &&\n    // It's not internal if the path is starting with a dot\n    !filename.startsWith('.') &&\n    // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n\n    return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n  }\n\n  /** Node Stack line parser */\n  function node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n    // eslint-disable-next-line complexity\n    return line => {\n      const lineMatch = line.match(FULL_MATCH);\n      if (lineMatch) {\n        let object;\n        let method;\n        let functionName;\n        let typeName;\n        let methodName;\n        if (lineMatch[1]) {\n          functionName = lineMatch[1];\n          let methodStart = functionName.lastIndexOf('.');\n          if (functionName[methodStart - 1] === '.') {\n            methodStart--;\n          }\n          if (methodStart > 0) {\n            object = functionName.slice(0, methodStart);\n            method = functionName.slice(methodStart + 1);\n            const objectEnd = object.indexOf('.Module');\n            if (objectEnd > 0) {\n              functionName = functionName.slice(objectEnd + 1);\n              object = object.slice(0, objectEnd);\n            }\n          }\n          typeName = undefined;\n        }\n        if (method) {\n          typeName = object;\n          methodName = method;\n        }\n        if (method === '<anonymous>') {\n          methodName = undefined;\n          functionName = undefined;\n        }\n        if (functionName === undefined) {\n          methodName = methodName || _stacktrace.UNKNOWN_FUNCTION;\n          functionName = typeName ? `${typeName}.${methodName}` : methodName;\n        }\n        let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n        const isNative = lineMatch[5] === 'native';\n\n        // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n        if (filename && filename.match(/\\/[A-Z]:/)) {\n          filename = filename.slice(1);\n        }\n        if (!filename && lineMatch[5] && !isNative) {\n          filename = lineMatch[5];\n        }\n        return {\n          filename: filename ? decodeURI(filename) : undefined,\n          module: getModule ? getModule(filename) : undefined,\n          function: functionName,\n          lineno: _parseIntOrUndefined(lineMatch[3]),\n          colno: _parseIntOrUndefined(lineMatch[4]),\n          in_app: filenameIsInApp(filename || '', isNative)\n        };\n      }\n      if (line.match(FILENAME_MATCH)) {\n        return {\n          filename: line\n        };\n      }\n      return undefined;\n    };\n  }\n\n  /**\n   * Node.js stack line parser\n   *\n   * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n   * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n   */\n  function nodeStackLineParser(getModule) {\n    return [90, node(getModule)];\n  }\n  function _parseIntOrUndefined(input) {\n    return parseInt(input || '', 10) || undefined;\n  }\n});","lineCount":113,"map":[[8,2,1,0],[8,6,1,0,"_stacktrace"],[8,17,1,0],[8,20,1,0,"require"],[8,27,1,0],[8,28,1,0,"_dependencyMap"],[8,42,1,0],[9,2,3,0],[10,0,4,0],[11,0,5,0],[12,2,6,0],[12,11,6,9,"filenameIsInApp"],[12,26,6,24,"filenameIsInApp"],[12,27,6,25,"filename"],[12,35,6,33],[12,37,6,35,"isNative"],[12,45,6,43],[12,48,6,46],[12,53,6,51],[12,55,6,53],[13,4,7,2],[13,10,7,8,"isInternal"],[13,20,7,18],[13,23,8,4,"isNative"],[13,31,8,12],[13,35,9,5,"filename"],[13,43,9,13],[14,4,10,6],[15,4,11,6],[15,5,11,7,"filename"],[15,13,11,15],[15,14,11,16,"startsWith"],[15,24,11,26],[15,25,11,27],[15,28,11,30],[15,29,11,31],[16,4,12,6],[17,4,13,6],[17,5,13,7,"filename"],[17,13,13,15],[17,14,13,16,"match"],[17,19,13,21],[17,20,13,22],[17,29,13,31],[17,30,13,32],[18,4,14,6],[19,4,15,6],[19,5,15,7,"filename"],[19,13,15,15],[19,14,15,16,"startsWith"],[19,24,15,26],[19,25,15,27],[19,28,15,30],[19,29,15,31],[20,4,16,6],[21,4,17,6],[21,5,17,7,"filename"],[21,13,17,15],[21,14,17,16,"match"],[21,19,17,21],[21,20,17,22],[21,54,17,56],[21,55,17,58],[21,56,17,59],[21,57,17,60],[23,4,19,2],[24,4,20,2],[25,4,21,2],[27,4,23,2],[27,11,23,9],[27,12,23,10,"isInternal"],[27,22,23,20],[27,26,23,24,"filename"],[27,34,23,32],[27,39,23,37,"undefined"],[27,48,23,46],[27,52,23,50],[27,53,23,51,"filename"],[27,61,23,59],[27,62,23,60,"includes"],[27,70,23,68],[27,71,23,69],[27,86,23,84],[27,87,23,85],[28,2,24,0],[30,2,26,0],[31,2,27,0],[31,11,27,9,"node"],[31,15,27,13,"node"],[31,16,27,14,"getModule"],[31,25,27,23],[31,27,27,25],[32,4,28,2],[32,10,28,8,"FILENAME_MATCH"],[32,24,28,22],[32,27,28,25],[32,41,28,39],[33,4,29,2],[33,10,29,8,"FULL_MATCH"],[33,20,29,18],[33,23,29,21],[33,86,29,84],[35,4,31,2],[36,4,32,2],[36,11,32,10,"line"],[36,15,32,14],[36,19,32,19],[37,6,33,4],[37,12,33,10,"lineMatch"],[37,21,33,19],[37,24,33,22,"line"],[37,28,33,26],[37,29,33,27,"match"],[37,34,33,32],[37,35,33,33,"FULL_MATCH"],[37,45,33,43],[37,46,33,44],[38,6,35,4],[38,10,35,8,"lineMatch"],[38,19,35,17],[38,21,35,19],[39,8,36,6],[39,12,36,10,"object"],[39,18,36,16],[40,8,37,6],[40,12,37,10,"method"],[40,18,37,16],[41,8,38,6],[41,12,38,10,"functionName"],[41,24,38,22],[42,8,39,6],[42,12,39,10,"typeName"],[42,20,39,18],[43,8,40,6],[43,12,40,10,"methodName"],[43,22,40,20],[44,8,42,6],[44,12,42,10,"lineMatch"],[44,21,42,19],[44,22,42,20],[44,23,42,21],[44,24,42,22],[44,26,42,24],[45,10,43,8,"functionName"],[45,22,43,20],[45,25,43,23,"lineMatch"],[45,34,43,32],[45,35,43,33],[45,36,43,34],[45,37,43,35],[46,10,45,8],[46,14,45,12,"methodStart"],[46,25,45,23],[46,28,45,26,"functionName"],[46,40,45,38],[46,41,45,39,"lastIndexOf"],[46,52,45,50],[46,53,45,51],[46,56,45,54],[46,57,45,55],[47,10,46,8],[47,14,46,12,"functionName"],[47,26,46,24],[47,27,46,25,"methodStart"],[47,38,46,36],[47,41,46,39],[47,42,46,40],[47,43,46,41],[47,48,46,46],[47,51,46,49],[47,53,46,51],[48,12,47,10,"methodStart"],[48,23,47,21],[48,25,47,23],[49,10,48,8],[50,10,50,8],[50,14,50,12,"methodStart"],[50,25,50,23],[50,28,50,26],[50,29,50,27],[50,31,50,29],[51,12,51,10,"object"],[51,18,51,16],[51,21,51,19,"functionName"],[51,33,51,31],[51,34,51,32,"slice"],[51,39,51,37],[51,40,51,38],[51,41,51,39],[51,43,51,41,"methodStart"],[51,54,51,52],[51,55,51,53],[52,12,52,10,"method"],[52,18,52,16],[52,21,52,19,"functionName"],[52,33,52,31],[52,34,52,32,"slice"],[52,39,52,37],[52,40,52,38,"methodStart"],[52,51,52,49],[52,54,52,52],[52,55,52,53],[52,56,52,54],[53,12,53,10],[53,18,53,16,"objectEnd"],[53,27,53,25],[53,30,53,28,"object"],[53,36,53,34],[53,37,53,35,"indexOf"],[53,44,53,42],[53,45,53,43],[53,54,53,52],[53,55,53,53],[54,12,54,10],[54,16,54,14,"objectEnd"],[54,25,54,23],[54,28,54,26],[54,29,54,27],[54,31,54,29],[55,14,55,12,"functionName"],[55,26,55,24],[55,29,55,27,"functionName"],[55,41,55,39],[55,42,55,40,"slice"],[55,47,55,45],[55,48,55,46,"objectEnd"],[55,57,55,55],[55,60,55,58],[55,61,55,59],[55,62,55,60],[56,14,56,12,"object"],[56,20,56,18],[56,23,56,21,"object"],[56,29,56,27],[56,30,56,28,"slice"],[56,35,56,33],[56,36,56,34],[56,37,56,35],[56,39,56,37,"objectEnd"],[56,48,56,46],[56,49,56,47],[57,12,57,10],[58,10,58,8],[59,10,59,8,"typeName"],[59,18,59,16],[59,21,59,19,"undefined"],[59,30,59,28],[60,8,60,6],[61,8,62,6],[61,12,62,10,"method"],[61,18,62,16],[61,20,62,18],[62,10,63,8,"typeName"],[62,18,63,16],[62,21,63,19,"object"],[62,27,63,25],[63,10,64,8,"methodName"],[63,20,64,18],[63,23,64,21,"method"],[63,29,64,27],[64,8,65,6],[65,8,67,6],[65,12,67,10,"method"],[65,18,67,16],[65,23,67,21],[65,36,67,34],[65,38,67,36],[66,10,68,8,"methodName"],[66,20,68,18],[66,23,68,21,"undefined"],[66,32,68,30],[67,10,69,8,"functionName"],[67,22,69,20],[67,25,69,23,"undefined"],[67,34,69,32],[68,8,70,6],[69,8,72,6],[69,12,72,10,"functionName"],[69,24,72,22],[69,29,72,27,"undefined"],[69,38,72,36],[69,40,72,38],[70,10,73,8,"methodName"],[70,20,73,18],[70,23,73,21,"methodName"],[70,33,73,31],[70,37,73,35,"UNKNOWN_FUNCTION"],[70,65,73,51],[71,10,74,8,"functionName"],[71,22,74,20],[71,25,74,23,"typeName"],[71,33,74,31],[71,36,74,34],[71,39,74,37,"typeName"],[71,47,74,45],[71,51,74,49,"methodName"],[71,61,74,59],[71,63,74,61],[71,66,74,64,"methodName"],[71,76,74,74],[72,8,75,6],[73,8,77,6],[73,12,77,10,"filename"],[73,20,77,18],[73,23,77,21,"lineMatch"],[73,32,77,30],[73,33,77,31],[73,34,77,32],[73,35,77,33],[73,39,77,37,"lineMatch"],[73,48,77,46],[73,49,77,47],[73,50,77,48],[73,51,77,49],[73,52,77,50,"startsWith"],[73,62,77,60],[73,63,77,61],[73,72,77,70],[73,73,77,71],[73,76,77,74,"lineMatch"],[73,85,77,83],[73,86,77,84],[73,87,77,85],[73,88,77,86],[73,89,77,87,"slice"],[73,94,77,92],[73,95,77,93],[73,96,77,94],[73,97,77,95],[73,100,77,98,"lineMatch"],[73,109,77,107],[73,110,77,108],[73,111,77,109],[73,112,77,110],[74,8,78,6],[74,14,78,12,"isNative"],[74,22,78,20],[74,25,78,23,"lineMatch"],[74,34,78,32],[74,35,78,33],[74,36,78,34],[74,37,78,35],[74,42,78,40],[74,50,78,48],[76,8,80,6],[77,8,81,6],[77,12,81,10,"filename"],[77,20,81,18],[77,24,81,22,"filename"],[77,32,81,30],[77,33,81,31,"match"],[77,38,81,36],[77,39,81,37],[77,49,81,47],[77,50,81,48],[77,52,81,50],[78,10,82,8,"filename"],[78,18,82,16],[78,21,82,19,"filename"],[78,29,82,27],[78,30,82,28,"slice"],[78,35,82,33],[78,36,82,34],[78,37,82,35],[78,38,82,36],[79,8,83,6],[80,8,85,6],[80,12,85,10],[80,13,85,11,"filename"],[80,21,85,19],[80,25,85,23,"lineMatch"],[80,34,85,32],[80,35,85,33],[80,36,85,34],[80,37,85,35],[80,41,85,39],[80,42,85,40,"isNative"],[80,50,85,48],[80,52,85,50],[81,10,86,8,"filename"],[81,18,86,16],[81,21,86,19,"lineMatch"],[81,30,86,28],[81,31,86,29],[81,32,86,30],[81,33,86,31],[82,8,87,6],[83,8,89,6],[83,15,89,13],[84,10,90,8,"filename"],[84,18,90,16],[84,20,90,18,"filename"],[84,28,90,26],[84,31,90,29,"decodeURI"],[84,40,90,38],[84,41,90,39,"filename"],[84,49,90,47],[84,50,90,48],[84,53,90,51,"undefined"],[84,62,90,60],[85,10,91,8,"module"],[85,16,91,14],[85,18,91,16,"getModule"],[85,27,91,25],[85,30,91,28,"getModule"],[85,39,91,37],[85,40,91,38,"filename"],[85,48,91,46],[85,49,91,47],[85,52,91,50,"undefined"],[85,61,91,59],[86,10,92,8,"function"],[86,18,92,16],[86,20,92,18,"functionName"],[86,32,92,30],[87,10,93,8,"lineno"],[87,16,93,14],[87,18,93,16,"_parseIntOrUndefined"],[87,38,93,36],[87,39,93,37,"lineMatch"],[87,48,93,46],[87,49,93,47],[87,50,93,48],[87,51,93,49],[87,52,93,50],[88,10,94,8,"colno"],[88,15,94,13],[88,17,94,15,"_parseIntOrUndefined"],[88,37,94,35],[88,38,94,36,"lineMatch"],[88,47,94,45],[88,48,94,46],[88,49,94,47],[88,50,94,48],[88,51,94,49],[89,10,95,8,"in_app"],[89,16,95,14],[89,18,95,16,"filenameIsInApp"],[89,33,95,31],[89,34,95,32,"filename"],[89,42,95,40],[89,46,95,44],[89,48,95,46],[89,50,95,48,"isNative"],[89,58,95,56],[90,8,96,6],[90,9,96,7],[91,6,97,4],[92,6,99,4],[92,10,99,8,"line"],[92,14,99,12],[92,15,99,13,"match"],[92,20,99,18],[92,21,99,19,"FILENAME_MATCH"],[92,35,99,33],[92,36,99,34],[92,38,99,36],[93,8,100,6],[93,15,100,13],[94,10,101,8,"filename"],[94,18,101,16],[94,20,101,18,"line"],[95,8,102,6],[95,9,102,7],[96,6,103,4],[97,6,105,4],[97,13,105,11,"undefined"],[97,22,105,20],[98,4,106,2],[98,5,106,3],[99,2,107,0],[101,2,109,0],[102,0,110,0],[103,0,111,0],[104,0,112,0],[105,0,113,0],[106,0,114,0],[107,2,115,0],[107,11,115,9,"nodeStackLineParser"],[107,30,115,28,"nodeStackLineParser"],[107,31,115,29,"getModule"],[107,40,115,38],[107,42,115,40],[108,4,116,2],[108,11,116,9],[108,12,116,10],[108,14,116,12],[108,16,116,14,"node"],[108,20,116,18],[108,21,116,19,"getModule"],[108,30,116,28],[108,31,116,29],[108,32,116,30],[109,2,117,0],[110,2,119,0],[110,11,119,9,"_parseIntOrUndefined"],[110,31,119,29,"_parseIntOrUndefined"],[110,32,119,30,"input"],[110,37,119,35],[110,39,119,37],[111,4,120,2],[111,11,120,9,"parseInt"],[111,19,120,17],[111,20,120,18,"input"],[111,25,120,23],[111,29,120,27],[111,31,120,29],[111,33,120,31],[111,35,120,33],[111,36,120,34],[111,40,120,38,"undefined"],[111,49,120,47],[112,2,121,0],[113,0,121,1],[113,3]],"functionMap":{"names":["<global>","filenameIsInApp","node","<anonymous>","nodeStackLineParser","_parseIntOrUndefined"],"mappings":"AAA;ACK;CDkB;AEG;SCK;GD0E;CFC;AIQ;CJE;AKE;CLE"}},"type":"js/module"}]}