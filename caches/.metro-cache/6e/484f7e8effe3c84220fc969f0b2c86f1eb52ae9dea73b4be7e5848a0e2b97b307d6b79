{"dependencies":[{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":50,"index":99}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":100},"end":{"line":3,"column":79,"index":179}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.logSpanEnd = logSpanEnd;\n  exports.logSpanStart = logSpanStart;\n  var _debugBuild = require(_dependencyMap[0], \"../debug-build.js\");\n  var _logger = require(_dependencyMap[1], \"../utils-hoist/logger.js\");\n  var _spanUtils = require(_dependencyMap[2], \"../utils/spanUtils.js\");\n  /**\n   * Print a log message for a started span.\n   */\n  function logSpanStart(span) {\n    if (!_debugBuild.DEBUG_BUILD) return;\n    const {\n      description = '< unknown name >',\n      op = '< unknown op >',\n      parent_span_id: parentSpanId\n    } = (0, _spanUtils.spanToJSON)(span);\n    const {\n      spanId\n    } = span.spanContext();\n    const sampled = (0, _spanUtils.spanIsSampled)(span);\n    const rootSpan = (0, _spanUtils.getRootSpan)(span);\n    const isRootSpan = rootSpan === span;\n    const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n    const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n    if (parentSpanId) {\n      infoParts.push(`parent ID: ${parentSpanId}`);\n    }\n    if (!isRootSpan) {\n      const {\n        op,\n        description\n      } = (0, _spanUtils.spanToJSON)(rootSpan);\n      infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n      if (op) {\n        infoParts.push(`root op: ${op}`);\n      }\n      if (description) {\n        infoParts.push(`root description: ${description}`);\n      }\n    }\n    _logger.logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n  }\n\n  /**\n   * Print a log message for an ended span.\n   */\n  function logSpanEnd(span) {\n    if (!_debugBuild.DEBUG_BUILD) return;\n    const {\n      description = '< unknown name >',\n      op = '< unknown op >'\n    } = (0, _spanUtils.spanToJSON)(span);\n    const {\n      spanId\n    } = span.spanContext();\n    const rootSpan = (0, _spanUtils.getRootSpan)(span);\n    const isRootSpan = rootSpan === span;\n    const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n    _logger.logger.log(msg);\n  }\n});","lineCount":65,"map":[[7,2,1,0],[7,6,1,0,"_debugBuild"],[7,17,1,0],[7,20,1,0,"require"],[7,27,1,0],[7,28,1,0,"_dependencyMap"],[7,42,1,0],[8,2,2,0],[8,6,2,0,"_logger"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,3,0],[9,6,3,0,"_spanUtils"],[9,16,3,0],[9,19,3,0,"require"],[9,26,3,0],[9,27,3,0,"_dependencyMap"],[9,41,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[13,2,8,0],[13,11,8,9,"logSpanStart"],[13,23,8,21,"logSpanStart"],[13,24,8,22,"span"],[13,28,8,26],[13,30,8,28],[14,4,9,2],[14,8,9,6],[14,9,9,7,"DEBUG_BUILD"],[14,32,9,18],[14,34,9,20],[15,4,11,2],[15,10,11,8],[16,6,11,10,"description"],[16,17,11,21],[16,20,11,24],[16,38,11,42],[17,6,11,44,"op"],[17,8,11,46],[17,11,11,49],[17,27,11,65],[18,6,11,67,"parent_span_id"],[18,20,11,81],[18,22,11,83,"parentSpanId"],[19,4,11,96],[19,5,11,97],[19,8,11,100],[19,12,11,100,"spanToJSON"],[19,33,11,110],[19,35,11,111,"span"],[19,39,11,115],[19,40,11,116],[20,4,12,2],[20,10,12,8],[21,6,12,10,"spanId"],[22,4,12,17],[22,5,12,18],[22,8,12,21,"span"],[22,12,12,25],[22,13,12,26,"spanContext"],[22,24,12,37],[22,25,12,38],[22,26,12,39],[23,4,14,2],[23,10,14,8,"sampled"],[23,17,14,15],[23,20,14,18],[23,24,14,18,"spanIsSampled"],[23,48,14,31],[23,50,14,32,"span"],[23,54,14,36],[23,55,14,37],[24,4,15,2],[24,10,15,8,"rootSpan"],[24,18,15,16],[24,21,15,19],[24,25,15,19,"getRootSpan"],[24,47,15,30],[24,49,15,31,"span"],[24,53,15,35],[24,54,15,36],[25,4,16,2],[25,10,16,8,"isRootSpan"],[25,20,16,18],[25,23,16,21,"rootSpan"],[25,31,16,29],[25,36,16,34,"span"],[25,40,16,38],[26,4,18,2],[26,10,18,8,"header"],[26,16,18,14],[26,19,18,17],[26,41,18,39,"sampled"],[26,48,18,46],[26,51,18,49],[26,60,18,58],[26,63,18,61],[26,74,18,72],[26,78,18,76,"isRootSpan"],[26,88,18,86],[26,91,18,89],[26,98,18,96],[26,101,18,99],[26,103,18,101],[26,109,18,107],[27,4,20,2],[27,10,20,8,"infoParts"],[27,19,20,17],[27,22,20,20],[27,23,20,21],[27,30,20,28,"op"],[27,32,20,30],[27,34,20,32],[27,36,20,34],[27,45,20,43,"description"],[27,56,20,54],[27,58,20,56],[27,60,20,58],[27,67,20,65,"spanId"],[27,73,20,71],[27,75,20,73],[27,76,20,74],[28,4,22,2],[28,8,22,6,"parentSpanId"],[28,20,22,18],[28,22,22,20],[29,6,23,4,"infoParts"],[29,15,23,13],[29,16,23,14,"push"],[29,20,23,18],[29,21,23,19],[29,35,23,33,"parentSpanId"],[29,47,23,45],[29,49,23,47],[29,50,23,48],[30,4,24,2],[31,4,26,2],[31,8,26,6],[31,9,26,7,"isRootSpan"],[31,19,26,17],[31,21,26,19],[32,6,27,4],[32,12,27,10],[33,8,27,12,"op"],[33,10,27,14],[34,8,27,16,"description"],[35,6,27,28],[35,7,27,29],[35,10,27,32],[35,14,27,32,"spanToJSON"],[35,35,27,42],[35,37,27,43,"rootSpan"],[35,45,27,51],[35,46,27,52],[36,6,28,4,"infoParts"],[36,15,28,13],[36,16,28,14,"push"],[36,20,28,18],[36,21,28,19],[36,33,28,31,"rootSpan"],[36,41,28,39],[36,42,28,40,"spanContext"],[36,53,28,51],[36,54,28,52],[36,55,28,53],[36,56,28,54,"spanId"],[36,62,28,60],[36,64,28,62],[36,65,28,63],[37,6,29,4],[37,10,29,8,"op"],[37,12,29,10],[37,14,29,12],[38,8,30,6,"infoParts"],[38,17,30,15],[38,18,30,16,"push"],[38,22,30,20],[38,23,30,21],[38,35,30,33,"op"],[38,37,30,35],[38,39,30,37],[38,40,30,38],[39,6,31,4],[40,6,32,4],[40,10,32,8,"description"],[40,21,32,19],[40,23,32,21],[41,8,33,6,"infoParts"],[41,17,33,15],[41,18,33,16,"push"],[41,22,33,20],[41,23,33,21],[41,44,33,42,"description"],[41,55,33,53],[41,57,33,55],[41,58,33,56],[42,6,34,4],[43,4,35,2],[44,4,37,2,"logger"],[44,18,37,8],[44,19,37,9,"log"],[44,22,37,12],[44,23,37,13],[44,26,37,16,"header"],[44,32,37,22],[45,0,38,0],[45,4,38,4,"infoParts"],[45,13,38,13],[45,14,38,14,"join"],[45,18,38,18],[45,19,38,19],[45,25,38,25],[45,26,38,26],[45,28,38,28],[45,29,38,29],[46,2,39,0],[48,2,41,0],[49,0,42,0],[50,0,43,0],[51,2,44,0],[51,11,44,9,"logSpanEnd"],[51,21,44,19,"logSpanEnd"],[51,22,44,20,"span"],[51,26,44,24],[51,28,44,26],[52,4,45,2],[52,8,45,6],[52,9,45,7,"DEBUG_BUILD"],[52,32,45,18],[52,34,45,20],[53,4,47,2],[53,10,47,8],[54,6,47,10,"description"],[54,17,47,21],[54,20,47,24],[54,38,47,42],[55,6,47,44,"op"],[55,8,47,46],[55,11,47,49],[56,4,47,66],[56,5,47,67],[56,8,47,70],[56,12,47,70,"spanToJSON"],[56,33,47,80],[56,35,47,81,"span"],[56,39,47,85],[56,40,47,86],[57,4,48,2],[57,10,48,8],[58,6,48,10,"spanId"],[59,4,48,17],[59,5,48,18],[59,8,48,21,"span"],[59,12,48,25],[59,13,48,26,"spanContext"],[59,24,48,37],[59,25,48,38],[59,26,48,39],[60,4,49,2],[60,10,49,8,"rootSpan"],[60,18,49,16],[60,21,49,19],[60,25,49,19,"getRootSpan"],[60,47,49,30],[60,49,49,31,"span"],[60,53,49,35],[60,54,49,36],[61,4,50,2],[61,10,50,8,"isRootSpan"],[61,20,50,18],[61,23,50,21,"rootSpan"],[61,31,50,29],[61,36,50,34,"span"],[61,40,50,38],[62,4,52,2],[62,10,52,8,"msg"],[62,13,52,11],[62,16,52,14],[62,40,52,38,"op"],[62,42,52,40],[62,47,52,45,"isRootSpan"],[62,57,52,55],[62,60,52,58],[62,67,52,65],[62,70,52,68],[62,72,52,70],[62,81,52,79,"description"],[62,92,52,90],[62,105,52,103,"spanId"],[62,111,52,109],[62,113,52,111],[63,4,53,2,"logger"],[63,18,53,8],[63,19,53,9,"log"],[63,22,53,12],[63,23,53,13,"msg"],[63,26,53,16],[63,27,53,17],[64,2,54,0],[65,0,54,1],[65,3]],"functionMap":{"names":["<global>","logSpanStart","logSpanEnd"],"mappings":"AAA;ACO;CD+B;AEK;CFU"}},"type":"js/module"}]}