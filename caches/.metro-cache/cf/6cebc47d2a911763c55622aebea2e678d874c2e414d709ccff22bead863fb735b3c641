{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNumberOfUrlSegments = getNumberOfUrlSegments;\n  exports.getSanitizedUrlString = getSanitizedUrlString;\n  exports.parseUrl = parseUrl;\n  exports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;\n  /**\n   * Parses string form of URL into an object\n   * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n   * // intentionally using regex and not <a/> href parsing trick because React Native and other\n   * // environments where DOM might not be available\n   * @returns parsed URL object\n   */\n  function parseUrl(url) {\n    if (!url) {\n      return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n      return {};\n    }\n\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || '';\n    const fragment = match[8] || '';\n    return {\n      host: match[4],\n      path: match[5],\n      protocol: match[2],\n      search: query,\n      hash: fragment,\n      relative: match[5] + query + fragment // everything minus origin\n    };\n  }\n\n  /**\n   * Strip the query string and fragment off of a given URL or path (if present)\n   *\n   * @param urlPath Full URL or path, including possible query string and/or fragment\n   * @returns URL or path without query string or fragment\n   */\n  function stripUrlQueryAndFragment(urlPath) {\n    return urlPath.split(/[?#]/, 1)[0];\n  }\n\n  /**\n   * Returns number of URL segments of a passed string URL.\n   *\n   * @deprecated This function will be removed in the next major version.\n   */\n  // TODO(v9): Hoist this function into the places where we use it. (as it stands only react router v6 instrumentation)\n  function getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n  }\n\n  /**\n   * Takes a URL object and returns a sanitized string which is safe to use as span name\n   * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n   */\n  function getSanitizedUrlString(url) {\n    const {\n      protocol,\n      host,\n      path\n    } = url;\n    const filteredHost = host && host\n    // Always filter out authority\n    .replace(/^.*@/, '[filtered]:[filtered]@')\n    // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';\n    return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n  }\n});","lineCount":77,"map":[[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,2,8,0],[16,11,8,9,"parseUrl"],[16,19,8,17,"parseUrl"],[16,20,8,18,"url"],[16,23,8,21],[16,25,8,23],[17,4,9,2],[17,8,9,6],[17,9,9,7,"url"],[17,12,9,10],[17,14,9,12],[18,6,10,4],[18,13,10,11],[18,14,10,12],[18,15,10,13],[19,4,11,2],[20,4,13,2],[20,10,13,8,"match"],[20,15,13,13],[20,18,13,16,"url"],[20,21,13,19],[20,22,13,20,"match"],[20,27,13,25],[20,28,13,26],[20,90,13,88],[20,91,13,89],[21,4,15,2],[21,8,15,6],[21,9,15,7,"match"],[21,14,15,12],[21,16,15,14],[22,6,16,4],[22,13,16,11],[22,14,16,12],[22,15,16,13],[23,4,17,2],[25,4,19,2],[26,4,20,2],[26,10,20,8,"query"],[26,15,20,13],[26,18,20,16,"match"],[26,23,20,21],[26,24,20,22],[26,25,20,23],[26,26,20,24],[26,30,20,28],[26,32,20,30],[27,4,21,2],[27,10,21,8,"fragment"],[27,18,21,16],[27,21,21,19,"match"],[27,26,21,24],[27,27,21,25],[27,28,21,26],[27,29,21,27],[27,33,21,31],[27,35,21,33],[28,4,22,2],[28,11,22,9],[29,6,23,4,"host"],[29,10,23,8],[29,12,23,10,"match"],[29,17,23,15],[29,18,23,16],[29,19,23,17],[29,20,23,18],[30,6,24,4,"path"],[30,10,24,8],[30,12,24,10,"match"],[30,17,24,15],[30,18,24,16],[30,19,24,17],[30,20,24,18],[31,6,25,4,"protocol"],[31,14,25,12],[31,16,25,14,"match"],[31,21,25,19],[31,22,25,20],[31,23,25,21],[31,24,25,22],[32,6,26,4,"search"],[32,12,26,10],[32,14,26,12,"query"],[32,19,26,17],[33,6,27,4,"hash"],[33,10,27,8],[33,12,27,10,"fragment"],[33,20,27,18],[34,6,28,4,"relative"],[34,14,28,12],[34,16,28,14,"match"],[34,21,28,19],[34,22,28,20],[34,23,28,21],[34,24,28,22],[34,27,28,25,"query"],[34,32,28,30],[34,35,28,33,"fragment"],[34,43,28,41],[34,44,28,43],[35,4,29,2],[35,5,29,3],[36,2,30,0],[38,2,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,2,38,0],[44,11,38,9,"stripUrlQueryAndFragment"],[44,35,38,33,"stripUrlQueryAndFragment"],[44,36,38,34,"urlPath"],[44,43,38,41],[44,45,38,43],[45,4,39,2],[45,11,39,10,"urlPath"],[45,18,39,17],[45,19,39,18,"split"],[45,24,39,23],[45,25,39,24],[45,31,39,30],[45,33,39,32],[45,34,39,33],[45,35,39,34],[45,36,39,37],[45,37,39,38],[45,38,39,39],[46,2,40,0],[48,2,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,0,46,0],[53,2,47,0],[54,2,48,0],[54,11,48,9,"getNumberOfUrlSegments"],[54,33,48,31,"getNumberOfUrlSegments"],[54,34,48,32,"url"],[54,37,48,35],[54,39,48,37],[55,4,49,2],[56,4,50,2],[56,11,50,9,"url"],[56,14,50,12],[56,15,50,13,"split"],[56,20,50,18],[56,21,50,19],[56,28,50,26],[56,29,50,27],[56,30,50,28,"filter"],[56,36,50,34],[56,37,50,35,"s"],[56,38,50,36],[56,42,50,40,"s"],[56,43,50,41],[56,44,50,42,"length"],[56,50,50,48],[56,53,50,51],[56,54,50,52],[56,58,50,56,"s"],[56,59,50,57],[56,64,50,62],[56,67,50,65],[56,68,50,66],[56,69,50,67,"length"],[56,75,50,73],[57,2,51,0],[59,2,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,2,57,0],[63,11,57,9,"getSanitizedUrlString"],[63,32,57,30,"getSanitizedUrlString"],[63,33,57,31,"url"],[63,36,57,34],[63,38,57,36],[64,4,58,2],[64,10,58,8],[65,6,58,10,"protocol"],[65,14,58,18],[66,6,58,20,"host"],[66,10,58,24],[67,6,58,26,"path"],[68,4,58,31],[68,5,58,32],[68,8,58,35,"url"],[68,11,58,38],[69,4,60,2],[69,10,60,8,"filteredHost"],[69,22,60,20],[69,25,61,5,"host"],[69,29,61,9],[69,33,62,6,"host"],[70,4,63,8],[71,4,63,8],[71,5,64,9,"replace"],[71,12,64,16],[71,13,64,17],[71,19,64,23],[71,21,64,25],[71,45,64,49],[72,4,65,8],[73,4,66,8],[74,4,66,8],[74,5,67,9,"replace"],[74,12,67,16],[74,13,67,17],[74,21,67,25],[74,23,67,27],[74,25,67,29],[74,26,67,30],[74,27,68,9,"replace"],[74,34,68,16],[74,35,68,17],[74,44,68,26],[74,46,68,28],[74,48,68,30],[74,49,68,31],[74,53,69,4],[74,55,69,6],[75,4,71,2],[75,11,71,9],[75,14,71,12,"protocol"],[75,22,71,20],[75,25,71,23],[75,28,71,26,"protocol"],[75,36,71,34],[75,41,71,39],[75,44,71,42],[75,46,71,44],[75,49,71,47,"filteredHost"],[75,61,71,59],[75,64,71,62,"path"],[75,68,71,66],[75,70,71,68],[76,2,72,0],[77,0,72,1],[77,3]],"functionMap":{"names":["<global>","parseUrl","stripUrlQueryAndFragment","getNumberOfUrlSegments","split.filter$argument_0","getSanitizedUrlString"],"mappings":"AAA;ACO;CDsB;AEQ;CFE;AGQ;mCCE,8BD;CHC;AKM;CLe"}},"type":"js/module"}]}