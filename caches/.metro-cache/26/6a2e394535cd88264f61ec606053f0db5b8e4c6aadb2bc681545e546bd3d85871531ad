{"dependencies":[{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":70,"index":119}}],"key":"/wcaZSbu8ehBqhp+Lmxp451SsSA=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":120},"end":{"line":3,"column":50,"index":170}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/ratelimit.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":171},"end":{"line":4,"column":68,"index":239}}],"key":"QKl3AY+Byd/ne5UTXVfoXbCF3Uo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.START_DELAY = exports.MIN_DELAY = void 0;\n  exports.makeOfflineTransport = makeOfflineTransport;\n  var _debugBuild = require(_dependencyMap[0], \"../debug-build.js\");\n  var _envelope = require(_dependencyMap[1], \"../utils-hoist/envelope.js\");\n  var _logger = require(_dependencyMap[2], \"../utils-hoist/logger.js\");\n  var _ratelimit = require(_dependencyMap[3], \"../utils-hoist/ratelimit.js\");\n  const MIN_DELAY = exports.MIN_DELAY = 100; // 100 ms\n  const START_DELAY = exports.START_DELAY = 5000; // 5 seconds\n  const MAX_DELAY = 3.6e6; // 1 hour\n\n  /**\n   * Wraps a transport and stores and retries events when they fail to send.\n   *\n   * @param createTransport The transport to wrap.\n   */\n  function makeOfflineTransport(createTransport) {\n    function log(...args) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.info('[Offline]:', ...args);\n    }\n    return options => {\n      const transport = createTransport(options);\n      if (!options.createStore) {\n        throw new Error('No `createStore` function was provided');\n      }\n      const store = options.createStore(options);\n      let retryDelay = START_DELAY;\n      let flushTimer;\n      function shouldQueue(env, error, retryDelay) {\n        // We want to drop client reports because they can be generated when we retry sending events while offline.\n        if ((0, _envelope.envelopeContainsItemType)(env, ['client_report'])) {\n          return false;\n        }\n        if (options.shouldStore) {\n          return options.shouldStore(env, error, retryDelay);\n        }\n        return true;\n      }\n      function flushIn(delay) {\n        if (flushTimer) {\n          clearTimeout(flushTimer);\n        }\n        flushTimer = setTimeout(async () => {\n          flushTimer = undefined;\n          const found = await store.shift();\n          if (found) {\n            log('Attempting to send previously queued event');\n\n            // We should to update the sent_at timestamp to the current time.\n            found[0].sent_at = new Date().toISOString();\n            void send(found, true).catch(e => {\n              log('Failed to retry sending', e);\n            });\n          }\n        }, delay);\n\n        // We need to unref the timer in node.js, otherwise the node process never exit.\n        if (typeof flushTimer !== 'number' && flushTimer.unref) {\n          flushTimer.unref();\n        }\n      }\n      function flushWithBackOff() {\n        if (flushTimer) {\n          return;\n        }\n        flushIn(retryDelay);\n        retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n      }\n      async function send(envelope, isRetry = false) {\n        // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we\n        // need to retry them in order.\n        if (!isRetry && (0, _envelope.envelopeContainsItemType)(envelope, ['replay_event', 'replay_recording'])) {\n          await store.push(envelope);\n          flushIn(MIN_DELAY);\n          return {};\n        }\n        try {\n          const result = await transport.send(envelope);\n          let delay = MIN_DELAY;\n          if (result) {\n            // If there's a retry-after header, use that as the next delay.\n            if (result.headers && result.headers['retry-after']) {\n              delay = (0, _ratelimit.parseRetryAfterHeader)(result.headers['retry-after']);\n            } else if (result.headers && result.headers['x-sentry-rate-limits']) {\n              delay = 60000; // 60 seconds\n            } // If we have a server error, return now so we don't flush the queue.\n            else if ((result.statusCode || 0) >= 400) {\n              return result;\n            }\n          }\n          flushIn(delay);\n          retryDelay = START_DELAY;\n          return result;\n        } catch (e) {\n          if (await shouldQueue(envelope, e, retryDelay)) {\n            // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.\n            if (isRetry) {\n              await store.unshift(envelope);\n            } else {\n              await store.push(envelope);\n            }\n            flushWithBackOff();\n            log('Error sending. Event queued.', e);\n            return {};\n          } else {\n            throw e;\n          }\n        }\n      }\n      if (options.flushAtStartup) {\n        flushWithBackOff();\n      }\n      return {\n        send,\n        flush: timeout => {\n          // If there's no timeout, we should attempt to flush the offline queue.\n          if (timeout === undefined) {\n            retryDelay = START_DELAY;\n            flushIn(MIN_DELAY);\n          }\n          return transport.flush(timeout);\n        }\n      };\n    };\n  }\n});","lineCount":129,"map":[[7,2,1,0],[7,6,1,0,"_debugBuild"],[7,17,1,0],[7,20,1,0,"require"],[7,27,1,0],[7,28,1,0,"_dependencyMap"],[7,42,1,0],[8,2,2,0],[8,6,2,0,"_envelope"],[8,15,2,0],[8,18,2,0,"require"],[8,25,2,0],[8,26,2,0,"_dependencyMap"],[8,40,2,0],[9,2,3,0],[9,6,3,0,"_logger"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,4,0],[10,6,4,0,"_ratelimit"],[10,16,4,0],[10,19,4,0,"require"],[10,26,4,0],[10,27,4,0,"_dependencyMap"],[10,41,4,0],[11,2,6,0],[11,8,6,6,"MIN_DELAY"],[11,17,6,15],[11,20,6,15,"exports"],[11,27,6,15],[11,28,6,15,"MIN_DELAY"],[11,37,6,15],[11,40,6,18],[11,43,6,21],[11,44,6,22],[11,45,6,23],[12,2,7,0],[12,8,7,6,"START_DELAY"],[12,19,7,17],[12,22,7,17,"exports"],[12,29,7,17],[12,30,7,17,"START_DELAY"],[12,41,7,17],[12,44,7,20],[12,48,7,24],[12,49,7,25],[12,50,7,26],[13,2,8,0],[13,8,8,6,"MAX_DELAY"],[13,17,8,15],[13,20,8,18],[13,25,8,23],[13,26,8,24],[13,27,8,25],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,2,15,0],[20,11,15,9,"makeOfflineTransport"],[20,31,15,29,"makeOfflineTransport"],[20,32,16,2,"createTransport"],[20,47,16,17],[20,49,17,2],[21,4,18,2],[21,13,18,11,"log"],[21,16,18,14,"log"],[21,17,18,15],[21,20,18,18,"args"],[21,24,18,22],[21,26,18,24],[22,6,19,4,"DEBUG_BUILD"],[22,29,19,15],[22,33,19,19,"logger"],[22,47,19,25],[22,48,19,26,"info"],[22,52,19,30],[22,53,19,31],[22,65,19,43],[22,67,19,45],[22,70,19,48,"args"],[22,74,19,52],[22,75,19,53],[23,4,20,2],[24,4,22,2],[24,11,22,9,"options"],[24,18,22,16],[24,22,22,20],[25,6,23,4],[25,12,23,10,"transport"],[25,21,23,19],[25,24,23,22,"createTransport"],[25,39,23,37],[25,40,23,38,"options"],[25,47,23,45],[25,48,23,46],[26,6,25,4],[26,10,25,8],[26,11,25,9,"options"],[26,18,25,16],[26,19,25,17,"createStore"],[26,30,25,28],[26,32,25,30],[27,8,26,6],[27,14,26,12],[27,18,26,16,"Error"],[27,23,26,21],[27,24,26,22],[27,64,26,62],[27,65,26,63],[28,6,27,4],[29,6,29,4],[29,12,29,10,"store"],[29,17,29,15],[29,20,29,18,"options"],[29,27,29,25],[29,28,29,26,"createStore"],[29,39,29,37],[29,40,29,38,"options"],[29,47,29,45],[29,48,29,46],[30,6,31,4],[30,10,31,8,"retryDelay"],[30,20,31,18],[30,23,31,21,"START_DELAY"],[30,34,31,32],[31,6,32,4],[31,10,32,8,"flushTimer"],[31,20,32,18],[32,6,34,4],[32,15,34,13,"shouldQueue"],[32,26,34,24,"shouldQueue"],[32,27,34,25,"env"],[32,30,34,28],[32,32,34,30,"error"],[32,37,34,35],[32,39,34,37,"retryDelay"],[32,49,34,47],[32,51,34,49],[33,8,35,6],[34,8,36,6],[34,12,36,10],[34,16,36,10,"envelopeContainsItemType"],[34,50,36,34],[34,52,36,35,"env"],[34,55,36,38],[34,57,36,40],[34,58,36,41],[34,73,36,56],[34,74,36,57],[34,75,36,58],[34,77,36,60],[35,10,37,8],[35,17,37,15],[35,22,37,20],[36,8,38,6],[37,8,40,6],[37,12,40,10,"options"],[37,19,40,17],[37,20,40,18,"shouldStore"],[37,31,40,29],[37,33,40,31],[38,10,41,8],[38,17,41,15,"options"],[38,24,41,22],[38,25,41,23,"shouldStore"],[38,36,41,34],[38,37,41,35,"env"],[38,40,41,38],[38,42,41,40,"error"],[38,47,41,45],[38,49,41,47,"retryDelay"],[38,59,41,57],[38,60,41,58],[39,8,42,6],[40,8,44,6],[40,15,44,13],[40,19,44,17],[41,6,45,4],[42,6,47,4],[42,15,47,13,"flushIn"],[42,22,47,20,"flushIn"],[42,23,47,21,"delay"],[42,28,47,26],[42,30,47,28],[43,8,48,6],[43,12,48,10,"flushTimer"],[43,22,48,20],[43,24,48,22],[44,10,49,8,"clearTimeout"],[44,22,49,20],[44,23,49,21,"flushTimer"],[44,33,49,32],[44,34,49,33],[45,8,50,6],[46,8,52,6,"flushTimer"],[46,18,52,16],[46,21,52,19,"setTimeout"],[46,31,52,29],[46,32,52,30],[46,44,52,42],[47,10,53,8,"flushTimer"],[47,20,53,18],[47,23,53,21,"undefined"],[47,32,53,30],[48,10,55,8],[48,16,55,14,"found"],[48,21,55,19],[48,24,55,22],[48,30,55,28,"store"],[48,35,55,33],[48,36,55,34,"shift"],[48,41,55,39],[48,42,55,40],[48,43,55,41],[49,10,56,8],[49,14,56,12,"found"],[49,19,56,17],[49,21,56,19],[50,12,57,10,"log"],[50,15,57,13],[50,16,57,14],[50,60,57,58],[50,61,57,59],[52,12,59,10],[53,12,60,10,"found"],[53,17,60,15],[53,18,60,16],[53,19,60,17],[53,20,60,18],[53,21,60,19,"sent_at"],[53,28,60,26],[53,31,60,29],[53,35,60,33,"Date"],[53,39,60,37],[53,40,60,38],[53,41,60,39],[53,42,60,40,"toISOString"],[53,53,60,51],[53,54,60,52],[53,55,60,53],[54,12,62,10],[54,17,62,15,"send"],[54,21,62,19],[54,22,62,20,"found"],[54,27,62,25],[54,29,62,27],[54,33,62,31],[54,34,62,32],[54,35,62,33,"catch"],[54,40,62,38],[54,41,62,39,"e"],[54,42,62,40],[54,46,62,44],[55,14,63,12,"log"],[55,17,63,15],[55,18,63,16],[55,43,63,41],[55,45,63,43,"e"],[55,46,63,44],[55,47,63,45],[56,12,64,10],[56,13,64,11],[56,14,64,12],[57,10,65,8],[58,8,66,6],[58,9,66,7],[58,11,66,9,"delay"],[58,16,66,14],[58,17,66,15],[60,8,68,6],[61,8,69,6],[61,12,69,10],[61,19,69,17,"flushTimer"],[61,29,69,27],[61,34,69,32],[61,42,69,40],[61,46,69,44,"flushTimer"],[61,56,69,54],[61,57,69,55,"unref"],[61,62,69,60],[61,64,69,62],[62,10,70,8,"flushTimer"],[62,20,70,18],[62,21,70,19,"unref"],[62,26,70,24],[62,27,70,25],[62,28,70,26],[63,8,71,6],[64,6,72,4],[65,6,74,4],[65,15,74,13,"flushWithBackOff"],[65,31,74,29,"flushWithBackOff"],[65,32,74,29],[65,34,74,32],[66,8,75,6],[66,12,75,10,"flushTimer"],[66,22,75,20],[66,24,75,22],[67,10,76,8],[68,8,77,6],[69,8,79,6,"flushIn"],[69,15,79,13],[69,16,79,14,"retryDelay"],[69,26,79,24],[69,27,79,25],[70,8,81,6,"retryDelay"],[70,18,81,16],[70,21,81,19,"Math"],[70,25,81,23],[70,26,81,24,"min"],[70,29,81,27],[70,30,81,28,"retryDelay"],[70,40,81,38],[70,43,81,41],[70,44,81,42],[70,46,81,44,"MAX_DELAY"],[70,55,81,53],[70,56,81,54],[71,6,82,4],[72,6,84,4],[72,21,84,19,"send"],[72,25,84,23,"send"],[72,26,84,24,"envelope"],[72,34,84,32],[72,36,84,34,"isRetry"],[72,43,84,41],[72,46,84,44],[72,51,84,49],[72,53,84,51],[73,8,85,6],[74,8,86,6],[75,8,87,6],[75,12,87,10],[75,13,87,11,"isRetry"],[75,20,87,18],[75,24,87,22],[75,28,87,22,"envelopeContainsItemType"],[75,62,87,46],[75,64,87,47,"envelope"],[75,72,87,55],[75,74,87,57],[75,75,87,58],[75,89,87,72],[75,91,87,74],[75,109,87,92],[75,110,87,93],[75,111,87,94],[75,113,87,96],[76,10,88,8],[76,16,88,14,"store"],[76,21,88,19],[76,22,88,20,"push"],[76,26,88,24],[76,27,88,25,"envelope"],[76,35,88,33],[76,36,88,34],[77,10,89,8,"flushIn"],[77,17,89,15],[77,18,89,16,"MIN_DELAY"],[77,27,89,25],[77,28,89,26],[78,10,90,8],[78,17,90,15],[78,18,90,16],[78,19,90,17],[79,8,91,6],[80,8,93,6],[80,12,93,10],[81,10,94,8],[81,16,94,14,"result"],[81,22,94,20],[81,25,94,23],[81,31,94,29,"transport"],[81,40,94,38],[81,41,94,39,"send"],[81,45,94,43],[81,46,94,44,"envelope"],[81,54,94,52],[81,55,94,53],[82,10,96,8],[82,14,96,12,"delay"],[82,19,96,17],[82,22,96,20,"MIN_DELAY"],[82,31,96,29],[83,10,98,8],[83,14,98,12,"result"],[83,20,98,18],[83,22,98,20],[84,12,99,10],[85,12,100,10],[85,16,100,14,"result"],[85,22,100,20],[85,23,100,21,"headers"],[85,30,100,28],[85,34,100,32,"result"],[85,40,100,38],[85,41,100,39,"headers"],[85,48,100,46],[85,49,100,47],[85,62,100,60],[85,63,100,61],[85,65,100,63],[86,14,101,12,"delay"],[86,19,101,17],[86,22,101,20],[86,26,101,20,"parseRetryAfterHeader"],[86,58,101,41],[86,60,101,42,"result"],[86,66,101,48],[86,67,101,49,"headers"],[86,74,101,56],[86,75,101,57],[86,88,101,70],[86,89,101,71],[86,90,101,72],[87,12,102,10],[87,13,102,11],[87,19,102,17],[87,23,102,21,"result"],[87,29,102,27],[87,30,102,28,"headers"],[87,37,102,35],[87,41,102,39,"result"],[87,47,102,45],[87,48,102,46,"headers"],[87,55,102,53],[87,56,102,54],[87,78,102,76],[87,79,102,77],[87,81,102,79],[88,14,103,12,"delay"],[88,19,103,17],[88,22,103,20],[88,27,103,25],[88,28,103,26],[88,29,103,27],[89,12,104,10],[89,13,104,11],[89,14,104,12],[90,12,104,12],[90,17,105,15],[90,21,105,19],[90,22,105,20,"result"],[90,28,105,26],[90,29,105,27,"statusCode"],[90,39,105,37],[90,43,105,41],[90,44,105,42],[90,49,105,47],[90,52,105,50],[90,54,105,52],[91,14,106,12],[91,21,106,19,"result"],[91,27,106,25],[92,12,107,10],[93,10,108,8],[94,10,110,8,"flushIn"],[94,17,110,15],[94,18,110,16,"delay"],[94,23,110,21],[94,24,110,22],[95,10,111,8,"retryDelay"],[95,20,111,18],[95,23,111,21,"START_DELAY"],[95,34,111,32],[96,10,112,8],[96,17,112,15,"result"],[96,23,112,21],[97,8,113,6],[97,9,113,7],[97,10,113,8],[97,17,113,15,"e"],[97,18,113,16],[97,20,113,18],[98,10,114,8],[98,14,114,12],[98,20,114,18,"shouldQueue"],[98,31,114,29],[98,32,114,30,"envelope"],[98,40,114,38],[98,42,114,40,"e"],[98,43,114,41],[98,45,114,44,"retryDelay"],[98,55,114,54],[98,56,114,55],[98,58,114,57],[99,12,115,10],[100,12,116,10],[100,16,116,14,"isRetry"],[100,23,116,21],[100,25,116,23],[101,14,117,12],[101,20,117,18,"store"],[101,25,117,23],[101,26,117,24,"unshift"],[101,33,117,31],[101,34,117,32,"envelope"],[101,42,117,40],[101,43,117,41],[102,12,118,10],[102,13,118,11],[102,19,118,17],[103,14,119,12],[103,20,119,18,"store"],[103,25,119,23],[103,26,119,24,"push"],[103,30,119,28],[103,31,119,29,"envelope"],[103,39,119,37],[103,40,119,38],[104,12,120,10],[105,12,121,10,"flushWithBackOff"],[105,28,121,26],[105,29,121,27],[105,30,121,28],[106,12,122,10,"log"],[106,15,122,13],[106,16,122,14],[106,46,122,44],[106,48,122,46,"e"],[106,49,122,48],[106,50,122,49],[107,12,123,10],[107,19,123,17],[107,20,123,18],[107,21,123,19],[108,10,124,8],[108,11,124,9],[108,17,124,15],[109,12,125,10],[109,18,125,16,"e"],[109,19,125,17],[110,10,126,8],[111,8,127,6],[112,6,128,4],[113,6,130,4],[113,10,130,8,"options"],[113,17,130,15],[113,18,130,16,"flushAtStartup"],[113,32,130,30],[113,34,130,32],[114,8,131,6,"flushWithBackOff"],[114,24,131,22],[114,25,131,23],[114,26,131,24],[115,6,132,4],[116,6,134,4],[116,13,134,11],[117,8,135,6,"send"],[117,12,135,10],[118,8,136,6,"flush"],[118,13,136,11],[118,15,136,13,"timeout"],[118,22,136,20],[118,26,136,24],[119,10,137,8],[120,10,138,8],[120,14,138,12,"timeout"],[120,21,138,19],[120,26,138,24,"undefined"],[120,35,138,33],[120,37,138,35],[121,12,139,10,"retryDelay"],[121,22,139,20],[121,25,139,23,"START_DELAY"],[121,36,139,34],[122,12,140,10,"flushIn"],[122,19,140,17],[122,20,140,18,"MIN_DELAY"],[122,29,140,27],[122,30,140,28],[123,10,141,8],[124,10,143,8],[124,17,143,15,"transport"],[124,26,143,24],[124,27,143,25,"flush"],[124,32,143,30],[124,33,143,31,"timeout"],[124,40,143,38],[124,41,143,39],[125,8,144,6],[126,6,145,4],[126,7,145,5],[127,4,146,2],[127,5,146,3],[128,2,147,0],[129,0,147,1],[129,3]],"functionMap":{"names":["<global>","makeOfflineTransport","log","<anonymous>","shouldQueue","flushIn","setTimeout$argument_0","send._catch$argument_0","flushWithBackOff","send","flush"],"mappings":"AAA;ACc;ECG;GDE;SEE;ICY;KDW;IEE;8BCK;uCCU;WDE;ODE;KFM;IKE;KLQ;IME;KN4C;aOQ;OPQ;GFE;CDC"}},"type":"js/module"}]}