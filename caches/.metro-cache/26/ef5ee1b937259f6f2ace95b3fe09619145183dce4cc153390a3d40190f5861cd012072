{"dependencies":[{"name":"./asyncContext/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"UuQ32QVz1TZHuuFfjsuiZDUPZlQ=","exportNames":["*"]}},{"name":"./carrier.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":46,"index":113}}],"key":"6pp/3IpieqS3/vnZmp/pHWp2vlc=","exportNames":["*"]}},{"name":"./scope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":114},"end":{"line":3,"column":35,"index":149}}],"key":"asFjrgTIWdvglBac91WvmgCtKdM=","exportNames":["*"]}},{"name":"./utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":150},"end":{"line":4,"column":60,"index":210}}],"key":"RfsNMlgLcOaD/y3311U8j2nQAiE=","exportNames":["*"]}},{"name":"./utils-hoist/worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":211},"end":{"line":5,"column":64,"index":275}}],"key":"/lA1quQlpOoALnJUBGcie/ONj5k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getClient = getClient;\n  exports.getCurrentScope = getCurrentScope;\n  exports.getGlobalScope = getGlobalScope;\n  exports.getIsolationScope = getIsolationScope;\n  exports.getTraceContextFromScope = getTraceContextFromScope;\n  exports.withIsolationScope = withIsolationScope;\n  exports.withScope = withScope;\n  var _index = require(_dependencyMap[0], \"./asyncContext/index.js\");\n  var _carrier = require(_dependencyMap[1], \"./carrier.js\");\n  var _scope = require(_dependencyMap[2], \"./scope.js\");\n  var _object = require(_dependencyMap[3], \"./utils-hoist/object.js\");\n  var _worldwide = require(_dependencyMap[4], \"./utils-hoist/worldwide.js\");\n  /**\n   * Get the currently active scope.\n   */\n  function getCurrentScope() {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n    return acs.getCurrentScope();\n  }\n\n  /**\n   * Get the currently active isolation scope.\n   * The isolation scope is active for the current execution context.\n   */\n  function getIsolationScope() {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n    return acs.getIsolationScope();\n  }\n\n  /**\n   * Get the global scope.\n   * This scope is applied to _all_ events.\n   */\n  function getGlobalScope() {\n    return (0, _worldwide.getGlobalSingleton)('globalScope', () => new _scope.Scope());\n  }\n\n  /**\n   * Creates a new scope with and executes the given operation within.\n   * The scope is automatically removed once the operation\n   * finishes or throws.\n   */\n\n  /**\n   * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n   */\n  function withScope(...rest) {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n\n    // If a scope is defined, we want to make this the active scope instead of the default one\n    if (rest.length === 2) {\n      const [scope, callback] = rest;\n      if (!scope) {\n        return acs.withScope(callback);\n      }\n      return acs.withSetScope(scope, callback);\n    }\n    return acs.withScope(rest[0]);\n  }\n\n  /**\n   * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n   * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n   * case, for example, in the browser).\n   *\n   * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n   *\n   * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n   * applications directly because it comes with pitfalls. Use at your own risk!\n   */\n\n  /**\n   * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n   */\n  function withIsolationScope(...rest) {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n\n    // If a scope is defined, we want to make this the active scope instead of the default one\n    if (rest.length === 2) {\n      const [isolationScope, callback] = rest;\n      if (!isolationScope) {\n        return acs.withIsolationScope(callback);\n      }\n      return acs.withSetIsolationScope(isolationScope, callback);\n    }\n    return acs.withIsolationScope(rest[0]);\n  }\n\n  /**\n   * Get the currently active client.\n   */\n  function getClient() {\n    return getCurrentScope().getClient();\n  }\n\n  /**\n   * Get a trace context for the given scope.\n   */\n  function getTraceContextFromScope(scope) {\n    const propagationContext = scope.getPropagationContext();\n\n    // TODO(v9): Use generateSpanId() instead of spanId\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      traceId,\n      spanId,\n      parentSpanId\n    } = propagationContext;\n    const traceContext = (0, _object.dropUndefinedKeys)({\n      trace_id: traceId,\n      span_id: spanId,\n      parent_span_id: parentSpanId\n    });\n    return traceContext;\n  }\n});","lineCount":124,"map":[[12,2,1,0],[12,6,1,0,"_index"],[12,12,1,0],[12,15,1,0,"require"],[12,22,1,0],[12,23,1,0,"_dependencyMap"],[12,37,1,0],[13,2,2,0],[13,6,2,0,"_carrier"],[13,14,2,0],[13,17,2,0,"require"],[13,24,2,0],[13,25,2,0,"_dependencyMap"],[13,39,2,0],[14,2,3,0],[14,6,3,0,"_scope"],[14,12,3,0],[14,15,3,0,"require"],[14,22,3,0],[14,23,3,0,"_dependencyMap"],[14,37,3,0],[15,2,4,0],[15,6,4,0,"_object"],[15,13,4,0],[15,16,4,0,"require"],[15,23,4,0],[15,24,4,0,"_dependencyMap"],[15,38,4,0],[16,2,5,0],[16,6,5,0,"_worldwide"],[16,16,5,0],[16,19,5,0,"require"],[16,26,5,0],[16,27,5,0,"_dependencyMap"],[16,41,5,0],[17,2,7,0],[18,0,8,0],[19,0,9,0],[20,2,10,0],[20,11,10,9,"getCurrentScope"],[20,26,10,24,"getCurrentScope"],[20,27,10,24],[20,29,10,27],[21,4,11,2],[21,10,11,8,"carrier"],[21,17,11,15],[21,20,11,18],[21,24,11,18,"getMainCarrier"],[21,47,11,32],[21,49,11,33],[21,50,11,34],[22,4,12,2],[22,10,12,8,"acs"],[22,13,12,11],[22,16,12,14],[22,20,12,14,"getAsyncContextStrategy"],[22,50,12,37],[22,52,12,38,"carrier"],[22,59,12,45],[22,60,12,46],[23,4,13,2],[23,11,13,9,"acs"],[23,14,13,12],[23,15,13,13,"getCurrentScope"],[23,30,13,28],[23,31,13,29],[23,32,13,30],[24,2,14,0],[26,2,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,2,20,0],[30,11,20,9,"getIsolationScope"],[30,28,20,26,"getIsolationScope"],[30,29,20,26],[30,31,20,29],[31,4,21,2],[31,10,21,8,"carrier"],[31,17,21,15],[31,20,21,18],[31,24,21,18,"getMainCarrier"],[31,47,21,32],[31,49,21,33],[31,50,21,34],[32,4,22,2],[32,10,22,8,"acs"],[32,13,22,11],[32,16,22,14],[32,20,22,14,"getAsyncContextStrategy"],[32,50,22,37],[32,52,22,38,"carrier"],[32,59,22,45],[32,60,22,46],[33,4,23,2],[33,11,23,9,"acs"],[33,14,23,12],[33,15,23,13,"getIsolationScope"],[33,32,23,30],[33,33,23,31],[33,34,23,32],[34,2,24,0],[36,2,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,2,30,0],[40,11,30,9,"getGlobalScope"],[40,25,30,23,"getGlobalScope"],[40,26,30,23],[40,28,30,26],[41,4,31,2],[41,11,31,9],[41,15,31,9,"getGlobalSingleton"],[41,44,31,27],[41,46,31,28],[41,59,31,41],[41,61,31,43],[41,67,31,49],[41,71,31,53,"Scope"],[41,83,31,58],[41,84,31,59],[41,85,31,60],[41,86,31,61],[42,2,32,0],[44,2,34,0],[45,0,35,0],[46,0,36,0],[47,0,37,0],[48,0,38,0],[50,2,40,0],[51,0,41,0],[52,0,42,0],[53,2,43,0],[53,11,43,9,"withScope"],[53,20,43,18,"withScope"],[53,21,44,2],[53,24,44,5,"rest"],[53,28,44,9],[53,30,45,2],[54,4,46,2],[54,10,46,8,"carrier"],[54,17,46,15],[54,20,46,18],[54,24,46,18,"getMainCarrier"],[54,47,46,32],[54,49,46,33],[54,50,46,34],[55,4,47,2],[55,10,47,8,"acs"],[55,13,47,11],[55,16,47,14],[55,20,47,14,"getAsyncContextStrategy"],[55,50,47,37],[55,52,47,38,"carrier"],[55,59,47,45],[55,60,47,46],[57,4,49,2],[58,4,50,2],[58,8,50,6,"rest"],[58,12,50,10],[58,13,50,11,"length"],[58,19,50,17],[58,24,50,22],[58,25,50,23],[58,27,50,25],[59,6,51,4],[59,12,51,10],[59,13,51,11,"scope"],[59,18,51,16],[59,20,51,18,"callback"],[59,28,51,26],[59,29,51,27],[59,32,51,30,"rest"],[59,36,51,34],[60,6,53,4],[60,10,53,8],[60,11,53,9,"scope"],[60,16,53,14],[60,18,53,16],[61,8,54,6],[61,15,54,13,"acs"],[61,18,54,16],[61,19,54,17,"withScope"],[61,28,54,26],[61,29,54,27,"callback"],[61,37,54,35],[61,38,54,36],[62,6,55,4],[63,6,57,4],[63,13,57,11,"acs"],[63,16,57,14],[63,17,57,15,"withSetScope"],[63,29,57,27],[63,30,57,28,"scope"],[63,35,57,33],[63,37,57,35,"callback"],[63,45,57,43],[63,46,57,44],[64,4,58,2],[65,4,60,2],[65,11,60,9,"acs"],[65,14,60,12],[65,15,60,13,"withScope"],[65,24,60,22],[65,25,60,23,"rest"],[65,29,60,27],[65,30,60,28],[65,31,60,29],[65,32,60,30],[65,33,60,31],[66,2,61,0],[68,2,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,0,71,0],[77,0,72,0],[79,2,74,0],[80,0,75,0],[81,0,76,0],[82,2,77,0],[82,11,77,9,"withIsolationScope"],[82,29,77,27,"withIsolationScope"],[82,30,78,2],[82,33,78,5,"rest"],[82,37,78,9],[82,39,80,2],[83,4,81,2],[83,10,81,8,"carrier"],[83,17,81,15],[83,20,81,18],[83,24,81,18,"getMainCarrier"],[83,47,81,32],[83,49,81,33],[83,50,81,34],[84,4,82,2],[84,10,82,8,"acs"],[84,13,82,11],[84,16,82,14],[84,20,82,14,"getAsyncContextStrategy"],[84,50,82,37],[84,52,82,38,"carrier"],[84,59,82,45],[84,60,82,46],[86,4,84,2],[87,4,85,2],[87,8,85,6,"rest"],[87,12,85,10],[87,13,85,11,"length"],[87,19,85,17],[87,24,85,22],[87,25,85,23],[87,27,85,25],[88,6,86,4],[88,12,86,10],[88,13,86,11,"isolationScope"],[88,27,86,25],[88,29,86,27,"callback"],[88,37,86,35],[88,38,86,36],[88,41,86,39,"rest"],[88,45,86,43],[89,6,88,4],[89,10,88,8],[89,11,88,9,"isolationScope"],[89,25,88,23],[89,27,88,25],[90,8,89,6],[90,15,89,13,"acs"],[90,18,89,16],[90,19,89,17,"withIsolationScope"],[90,37,89,35],[90,38,89,36,"callback"],[90,46,89,44],[90,47,89,45],[91,6,90,4],[92,6,92,4],[92,13,92,11,"acs"],[92,16,92,14],[92,17,92,15,"withSetIsolationScope"],[92,38,92,36],[92,39,92,37,"isolationScope"],[92,53,92,51],[92,55,92,53,"callback"],[92,63,92,61],[92,64,92,62],[93,4,93,2],[94,4,95,2],[94,11,95,9,"acs"],[94,14,95,12],[94,15,95,13,"withIsolationScope"],[94,33,95,31],[94,34,95,32,"rest"],[94,38,95,36],[94,39,95,37],[94,40,95,38],[94,41,95,39],[94,42,95,40],[95,2,96,0],[97,2,98,0],[98,0,99,0],[99,0,100,0],[100,2,101,0],[100,11,101,9,"getClient"],[100,20,101,18,"getClient"],[100,21,101,18],[100,23,101,21],[101,4,102,2],[101,11,102,9,"getCurrentScope"],[101,26,102,24],[101,27,102,25],[101,28,102,26],[101,29,102,27,"getClient"],[101,38,102,36],[101,39,102,37],[101,40,102,38],[102,2,103,0],[104,2,105,0],[105,0,106,0],[106,0,107,0],[107,2,108,0],[107,11,108,9,"getTraceContextFromScope"],[107,35,108,33,"getTraceContextFromScope"],[107,36,108,34,"scope"],[107,41,108,39],[107,43,108,41],[108,4,109,2],[108,10,109,8,"propagationContext"],[108,28,109,26],[108,31,109,29,"scope"],[108,36,109,34],[108,37,109,35,"getPropagationContext"],[108,58,109,56],[108,59,109,57],[108,60,109,58],[110,4,111,2],[111,4,112,2],[112,4,113,2],[112,10,113,8],[113,6,113,10,"traceId"],[113,13,113,17],[114,6,113,19,"spanId"],[114,12,113,25],[115,6,113,27,"parentSpanId"],[116,4,113,40],[116,5,113,41],[116,8,113,44,"propagationContext"],[116,26,113,62],[117,4,115,2],[117,10,115,8,"traceContext"],[117,22,115,20],[117,25,115,23],[117,29,115,23,"dropUndefinedKeys"],[117,54,115,40],[117,56,115,41],[118,6,116,4,"trace_id"],[118,14,116,12],[118,16,116,14,"traceId"],[118,23,116,21],[119,6,117,4,"span_id"],[119,13,117,11],[119,15,117,13,"spanId"],[119,21,117,19],[120,6,118,4,"parent_span_id"],[120,20,118,18],[120,22,118,20,"parentSpanId"],[121,4,119,2],[121,5,119,3],[121,6,119,4],[122,4,121,2],[122,11,121,9,"traceContext"],[122,23,121,21],[123,2,122,0],[124,0,122,1],[124,3]],"functionMap":{"names":["<global>","getCurrentScope","getIsolationScope","getGlobalScope","getGlobalSingleton$argument_1","withScope","withIsolationScope","getClient","getTraceContextFromScope"],"mappings":"AAA;ACS;CDI;AEM;CFI;AGM;2CCC,iBD;CHC;AKW;CLkB;AMgB;CNmB;AOK;CPE;AQK;CRc"}},"type":"js/module"}]}