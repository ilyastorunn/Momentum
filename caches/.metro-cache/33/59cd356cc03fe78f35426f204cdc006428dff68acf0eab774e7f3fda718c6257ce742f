{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../../utils/featureFlags.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":50},"end":{"line":2,"column":91,"index":141}}],"key":"2NgHqWJ5eXWIDKJoq0bR6DcXkT0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.featureFlagsIntegration = void 0;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _featureFlags = require(_dependencyMap[1], \"../../utils/featureFlags.js\");\n  /**\n   * Sentry integration for buffering feature flags manually with an API, and\n   * capturing them on error events. We recommend you do this on each flag\n   * evaluation. Flags are buffered per Sentry scope and limited to 100 per event.\n   *\n   * See the [feature flag documentation](https://develop.sentry.dev/sdk/expected-features/#feature-flags) for more information.\n   *\n   * @example\n   * ```\n   * import * as Sentry from '@sentry/browser';\n   * import { type FeatureFlagsIntegration } from '@sentry/browser';\n   *\n   * // Setup\n   * Sentry.init(..., integrations: [Sentry.featureFlagsIntegration()])\n   *\n   * // Verify\n   * const flagsIntegration = Sentry.getClient()?.getIntegrationByName<FeatureFlagsIntegration>('FeatureFlags');\n   * if (flagsIntegration) {\n   *   flagsIntegration.addFeatureFlag('my-flag', true);\n   * } else {\n   *   // check your setup\n   * }\n   * Sentry.captureException(Exception('broke')); // 'my-flag' should be captured to this Sentry event.\n   * ```\n   */\n  const featureFlagsIntegration = exports.featureFlagsIntegration = (0, _core.defineIntegration)(() => {\n    return {\n      name: 'FeatureFlags',\n      processEvent(event, _hint, _client) {\n        return (0, _featureFlags.copyFlagsFromScopeToEvent)(event);\n      },\n      addFeatureFlag(name, value) {\n        (0, _featureFlags.insertFlagToScope)(name, value);\n      }\n    };\n  });\n});","lineCount":44,"map":[[6,2,1,0],[6,6,1,0,"_core"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,2,0],[7,6,2,0,"_featureFlags"],[7,19,2,0],[7,22,2,0,"require"],[7,29,2,0],[7,30,2,0,"_dependencyMap"],[7,44,2,0],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,2,29,0],[33,8,29,6,"featureFlagsIntegration"],[33,31,29,29],[33,34,29,29,"exports"],[33,41,29,29],[33,42,29,29,"featureFlagsIntegration"],[33,65,29,29],[33,68,29,32],[33,72,29,32,"defineIntegration"],[33,95,29,49],[33,97,29,50],[33,103,29,56],[34,4,30,2],[34,11,30,9],[35,6,31,4,"name"],[35,10,31,8],[35,12,31,10],[35,26,31,24],[36,6,33,4,"processEvent"],[36,18,33,16,"processEvent"],[36,19,33,17,"event"],[36,24,33,22],[36,26,33,24,"_hint"],[36,31,33,29],[36,33,33,31,"_client"],[36,40,33,38],[36,42,33,40],[37,8,34,6],[37,15,34,13],[37,19,34,13,"copyFlagsFromScopeToEvent"],[37,58,34,38],[37,60,34,39,"event"],[37,65,34,44],[37,66,34,45],[38,6,35,4],[38,7,35,5],[39,6,37,4,"addFeatureFlag"],[39,20,37,18,"addFeatureFlag"],[39,21,37,19,"name"],[39,25,37,23],[39,27,37,25,"value"],[39,32,37,30],[39,34,37,32],[40,8,38,6],[40,12,38,6,"insertFlagToScope"],[40,43,38,23],[40,45,38,24,"name"],[40,49,38,28],[40,51,38,30,"value"],[40,56,38,35],[40,57,38,36],[41,6,39,4],[42,4,40,2],[42,5,40,3],[43,2,41,0],[43,3,41,1],[43,4,41,2],[44,0,41,4],[44,3]],"functionMap":{"names":["<global>","defineIntegration$argument_0","processEvent","addFeatureFlag"],"mappings":"AAA;kDC4B;ICI;KDE;IEE;KFE;CDE"}},"type":"js/module"}]}