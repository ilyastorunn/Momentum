{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":94,"index":94}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":95},"end":{"line":2,"column":48,"index":143}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../helpers.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":144},"end":{"line":3,"column":39,"index":183}}],"key":"xGB1RU1bemGAHq3E44EIR7oSA2c=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":123,"index":307}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.startProfileForSpan = startProfileForSpan;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  var _helpers = require(_dependencyMap[2], \"../helpers.js\");\n  var _utils = require(_dependencyMap[3], \"./utils.js\");\n  /**\n   * Wraps startTransaction and stopTransaction with profiling related logic.\n   * startProfileForTransaction is called after the call to startTransaction in order to avoid our own code from\n   * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.\n   */\n  function startProfileForSpan(span) {\n    // Start the profiler and get the profiler instance.\n    let startTimestamp;\n    if ((0, _utils.isAutomatedPageLoadSpan)(span)) {\n      startTimestamp = (0, _core.timestampInSeconds)() * 1000;\n    }\n    const profiler = (0, _utils.startJSSelfProfile)();\n\n    // We failed to construct the profiler, so we skip.\n    // No need to log anything as this has already been logged in startProfile.\n    if (!profiler) {\n      return;\n    }\n    if (_debugBuild.DEBUG_BUILD) {\n      _core.logger.log(`[Profiling] started profiling span: ${(0, _core.spanToJSON)(span).description}`);\n    }\n\n    // We create \"unique\" span names to avoid concurrent spans with same names\n    // from being ignored by the profiler. From here on, only this span name should be used when\n    // calling the profiler methods. Note: we log the original name to the user to avoid confusion.\n    const profileId = (0, _core.uuid4)();\n    (0, _core.getCurrentScope)().setContext('profile', {\n      profile_id: profileId,\n      start_timestamp: startTimestamp\n    });\n\n    /**\n     * Idempotent handler for profile stop\n     */\n    async function onProfileHandler() {\n      // Check if the profile exists and return it the behavior has to be idempotent as users may call span.finish multiple times.\n      if (!span) {\n        return;\n      }\n      // Satisfy the type checker, but profiler will always be defined here.\n      if (!profiler) {\n        return;\n      }\n      return profiler.stop().then(profile => {\n        if (maxDurationTimeoutID) {\n          _helpers.WINDOW.clearTimeout(maxDurationTimeoutID);\n          maxDurationTimeoutID = undefined;\n        }\n        if (_debugBuild.DEBUG_BUILD) {\n          _core.logger.log(`[Profiling] stopped profiling of span: ${(0, _core.spanToJSON)(span).description}`);\n        }\n\n        // In case of an overlapping span, stopProfiling may return null and silently ignore the overlapping profile.\n        if (!profile) {\n          if (_debugBuild.DEBUG_BUILD) {\n            _core.logger.log(`[Profiling] profiler returned null profile for: ${(0, _core.spanToJSON)(span).description}`, 'this may indicate an overlapping span or a call to stopProfiling with a profile title that was never started');\n          }\n          return;\n        }\n        (0, _utils.addProfileToGlobalCache)(profileId, profile);\n      }).catch(error => {\n        if (_debugBuild.DEBUG_BUILD) {\n          _core.logger.log('[Profiling] error while stopping profiler:', error);\n        }\n      });\n    }\n\n    // Enqueue a timeout to prevent profiles from running over max duration.\n    let maxDurationTimeoutID = _helpers.WINDOW.setTimeout(() => {\n      if (_debugBuild.DEBUG_BUILD) {\n        _core.logger.log('[Profiling] max profile duration elapsed, stopping profiling for:', (0, _core.spanToJSON)(span).description);\n      }\n      // If the timeout exceeds, we want to stop profiling, but not finish the span\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      onProfileHandler();\n    }, _utils.MAX_PROFILE_DURATION_MS);\n\n    // We need to reference the original end call to avoid creating an infinite loop\n    const originalEnd = span.end.bind(span);\n\n    /**\n     * Wraps span `end()` with profiling related logic.\n     * startProfiling is called after the call to spanStart in order to avoid our own code from\n     * being profiled. Because of that same reason, stopProfiling is called before the call to spanEnd.\n     */\n    function profilingWrappedSpanEnd() {\n      if (!span) {\n        return originalEnd();\n      }\n      // onProfileHandler should always return the same profile even if this is called multiple times.\n      // Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.\n      void onProfileHandler().then(() => {\n        originalEnd();\n      }, () => {\n        // If onProfileHandler fails, we still want to call the original finish method.\n        originalEnd();\n      });\n      return span;\n    }\n    span.end = profilingWrappedSpanEnd;\n  }\n});","lineCount":111,"map":[[6,2,1,0],[6,6,1,0,"_core"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,2,0],[7,6,2,0,"_debugBuild"],[7,17,2,0],[7,20,2,0,"require"],[7,27,2,0],[7,28,2,0,"_dependencyMap"],[7,42,2,0],[8,2,3,0],[8,6,3,0,"_helpers"],[8,14,3,0],[8,17,3,0,"require"],[8,24,3,0],[8,25,3,0,"_dependencyMap"],[8,39,3,0],[9,2,4,0],[9,6,4,0,"_utils"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,2,11,0],[15,11,11,9,"startProfileForSpan"],[15,30,11,28,"startProfileForSpan"],[15,31,11,29,"span"],[15,35,11,33],[15,37,11,35],[16,4,12,2],[17,4,13,2],[17,8,13,6,"startTimestamp"],[17,22,13,20],[18,4,14,2],[18,8,14,6],[18,12,14,6,"isAutomatedPageLoadSpan"],[18,42,14,29],[18,44,14,30,"span"],[18,48,14,34],[18,49,14,35],[18,51,14,37],[19,6,15,4,"startTimestamp"],[19,20,15,18],[19,23,15,21],[19,27,15,21,"timestampInSeconds"],[19,51,15,39],[19,53,15,40],[19,54,15,41],[19,57,15,44],[19,61,15,48],[20,4,16,2],[21,4,18,2],[21,10,18,8,"profiler"],[21,18,18,16],[21,21,18,19],[21,25,18,19,"startJSSelfProfile"],[21,50,18,37],[21,52,18,38],[21,53,18,39],[23,4,20,2],[24,4,21,2],[25,4,22,2],[25,8,22,6],[25,9,22,7,"profiler"],[25,17,22,15],[25,19,22,17],[26,6,23,4],[27,4,24,2],[28,4,26,2],[28,8,26,6,"DEBUG_BUILD"],[28,31,26,17],[28,33,26,19],[29,6,27,4,"logger"],[29,18,27,10],[29,19,27,11,"log"],[29,22,27,14],[29,23,27,15],[29,62,27,54],[29,66,27,54,"spanToJSON"],[29,82,27,64],[29,84,27,65,"span"],[29,88,27,69],[29,89,27,70],[29,90,27,71,"description"],[29,101,27,82],[29,103,27,84],[29,104,27,85],[30,4,28,2],[32,4,30,2],[33,4,31,2],[34,4,32,2],[35,4,33,2],[35,10,33,8,"profileId"],[35,19,33,17],[35,22,33,20],[35,26,33,20,"uuid4"],[35,37,33,25],[35,39,33,26],[35,40,33,27],[36,4,35,2],[36,8,35,2,"getCurrentScope"],[36,29,35,17],[36,31,35,18],[36,32,35,19],[36,33,35,20,"setContext"],[36,43,35,30],[36,44,35,31],[36,53,35,40],[36,55,35,42],[37,6,36,4,"profile_id"],[37,16,36,14],[37,18,36,16,"profileId"],[37,27,36,25],[38,6,37,4,"start_timestamp"],[38,21,37,19],[38,23,37,21,"startTimestamp"],[39,4,38,2],[39,5,38,3],[39,6,38,4],[41,4,40,2],[42,0,41,0],[43,0,42,0],[44,4,43,2],[44,19,43,17,"onProfileHandler"],[44,35,43,33,"onProfileHandler"],[44,36,43,33],[44,38,43,36],[45,6,44,4],[46,6,45,4],[46,10,45,8],[46,11,45,9,"span"],[46,15,45,13],[46,17,45,15],[47,8,46,6],[48,6,47,4],[49,6,48,4],[50,6,49,4],[50,10,49,8],[50,11,49,9,"profiler"],[50,19,49,17],[50,21,49,19],[51,8,50,6],[52,6,51,4],[53,6,53,4],[53,13,53,11,"profiler"],[53,21,53,19],[53,22,54,7,"stop"],[53,26,54,11],[53,27,54,12],[53,28,54,13],[53,29,55,7,"then"],[53,33,55,11],[53,34,55,13,"profile"],[53,41,55,20],[53,45,55,25],[54,8,56,8],[54,12,56,12,"maxDurationTimeoutID"],[54,32,56,32],[54,34,56,34],[55,10,57,10,"WINDOW"],[55,25,57,16],[55,26,57,17,"clearTimeout"],[55,38,57,29],[55,39,57,30,"maxDurationTimeoutID"],[55,59,57,50],[55,60,57,51],[56,10,58,10,"maxDurationTimeoutID"],[56,30,58,30],[56,33,58,33,"undefined"],[56,42,58,42],[57,8,59,8],[58,8,61,8],[58,12,61,12,"DEBUG_BUILD"],[58,35,61,23],[58,37,61,25],[59,10,62,10,"logger"],[59,22,62,16],[59,23,62,17,"log"],[59,26,62,20],[59,27,62,21],[59,69,62,63],[59,73,62,63,"spanToJSON"],[59,89,62,73],[59,91,62,74,"span"],[59,95,62,78],[59,96,62,79],[59,97,62,80,"description"],[59,108,62,91],[59,110,62,93],[59,111,62,94],[60,8,63,8],[62,8,65,8],[63,8,66,8],[63,12,66,12],[63,13,66,13,"profile"],[63,20,66,20],[63,22,66,22],[64,10,67,10],[64,14,67,14,"DEBUG_BUILD"],[64,37,67,25],[64,39,67,27],[65,12,68,12,"logger"],[65,24,68,18],[65,25,68,19,"log"],[65,28,68,22],[65,29,69,14],[65,80,69,65],[65,84,69,65,"spanToJSON"],[65,100,69,75],[65,102,69,76,"span"],[65,106,69,80],[65,107,69,81],[65,108,69,82,"description"],[65,119,69,93],[65,121,69,95],[65,123,70,14],[65,233,71,12],[65,234,71,13],[66,10,72,10],[67,10,73,10],[68,8,74,8],[69,8,76,8],[69,12,76,8,"addProfileToGlobalCache"],[69,42,76,31],[69,44,76,32,"profileId"],[69,53,76,41],[69,55,76,43,"profile"],[69,62,76,50],[69,63,76,51],[70,6,77,6],[70,7,77,7],[70,8,77,8],[70,9,78,7,"catch"],[70,14,78,12],[70,15,78,13,"error"],[70,20,78,18],[70,24,78,22],[71,8,79,8],[71,12,79,12,"DEBUG_BUILD"],[71,35,79,23],[71,37,79,25],[72,10,80,10,"logger"],[72,22,80,16],[72,23,80,17,"log"],[72,26,80,20],[72,27,80,21],[72,71,80,65],[72,73,80,67,"error"],[72,78,80,72],[72,79,80,73],[73,8,81,8],[74,6,82,6],[74,7,82,7],[74,8,82,8],[75,4,83,2],[77,4,85,2],[78,4,86,2],[78,8,86,6,"maxDurationTimeoutID"],[78,28,86,26],[78,31,86,29,"WINDOW"],[78,46,86,35],[78,47,86,36,"setTimeout"],[78,57,86,46],[78,58,86,47],[78,64,86,53],[79,6,87,4],[79,10,87,8,"DEBUG_BUILD"],[79,33,87,19],[79,35,87,21],[80,8,88,6,"logger"],[80,20,88,12],[80,21,88,13,"log"],[80,24,88,16],[80,25,88,17],[80,92,88,84],[80,94,88,86],[80,98,88,86,"spanToJSON"],[80,114,88,96],[80,116,88,97,"span"],[80,120,88,101],[80,121,88,102],[80,122,88,103,"description"],[80,133,88,114],[80,134,88,115],[81,6,89,4],[82,6,90,4],[83,6,91,4],[84,6,92,4,"onProfileHandler"],[84,22,92,20],[84,23,92,21],[84,24,92,22],[85,4,93,2],[85,5,93,3],[85,7,93,5,"MAX_PROFILE_DURATION_MS"],[85,37,93,28],[85,38,93,29],[87,4,95,2],[88,4,96,2],[88,10,96,8,"originalEnd"],[88,21,96,19],[88,24,96,22,"span"],[88,28,96,26],[88,29,96,27,"end"],[88,32,96,30],[88,33,96,31,"bind"],[88,37,96,35],[88,38,96,36,"span"],[88,42,96,40],[88,43,96,41],[90,4,98,2],[91,0,99,0],[92,0,100,0],[93,0,101,0],[94,0,102,0],[95,4,103,2],[95,13,103,11,"profilingWrappedSpanEnd"],[95,36,103,34,"profilingWrappedSpanEnd"],[95,37,103,34],[95,39,103,37],[96,6,104,4],[96,10,104,8],[96,11,104,9,"span"],[96,15,104,13],[96,17,104,15],[97,8,105,6],[97,15,105,13,"originalEnd"],[97,26,105,24],[97,27,105,25],[97,28,105,26],[98,6,106,4],[99,6,107,4],[100,6,108,4],[101,6,109,4],[101,11,109,9,"onProfileHandler"],[101,27,109,25],[101,28,109,26],[101,29,109,27],[101,30,109,28,"then"],[101,34,109,32],[101,35,110,6],[101,41,110,12],[102,8,111,8,"originalEnd"],[102,19,111,19],[102,20,111,20],[102,21,111,21],[103,6,112,6],[103,7,112,7],[103,9,113,6],[103,15,113,12],[104,8,114,8],[105,8,115,8,"originalEnd"],[105,19,115,19],[105,20,115,20],[105,21,115,21],[106,6,116,6],[106,7,117,4],[106,8,117,5],[107,6,119,4],[107,13,119,11,"span"],[107,17,119,15],[108,4,120,2],[109,4,122,2,"span"],[109,8,122,6],[109,9,122,7,"end"],[109,12,122,10],[109,15,122,13,"profilingWrappedSpanEnd"],[109,38,122,36],[110,2,123,0],[111,0,123,1],[111,3]],"functionMap":{"names":["<global>","startProfileForSpan","onProfileHandler","profiler.stop.then$argument_0","profiler.stop.then._catch$argument_0","WINDOW.setTimeout$argument_0","profilingWrappedSpanEnd","onProfileHandler.then$argument_0","onProfileHandler.then$argument_1"],"mappings":"AAA;ACU;ECgC;YCY;ODsB;aEC;OFI;GDC;+CIG;GJO;EKU;MCO;ODE;MEC;OFG;GLI;CDG"}},"type":"js/module"}]}