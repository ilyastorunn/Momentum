{"dependencies":[{"name":"../utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"IWRGqGXR51VGNaoabCqwsNvBzK0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getBucketKey = getBucketKey;\n  exports.sanitizeMetricKey = sanitizeMetricKey;\n  exports.sanitizeTags = sanitizeTags;\n  exports.sanitizeUnit = sanitizeUnit;\n  exports.serializeMetricBuckets = serializeMetricBuckets;\n  exports.simpleHash = simpleHash;\n  var _object = require(_dependencyMap[0], \"../utils-hoist/object.js\");\n  /**\n   * Generate bucket key from metric properties.\n   */\n  function getBucketKey(metricType, name, unit, tags) {\n    const stringifiedTags = Object.entries((0, _object.dropUndefinedKeys)(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n    return `${metricType}${name}${unit}${stringifiedTags}`;\n  }\n\n  /* eslint-disable no-bitwise */\n  /**\n   * Simple hash function for strings.\n   */\n  function simpleHash(s) {\n    let rv = 0;\n    for (let i = 0; i < s.length; i++) {\n      const c = s.charCodeAt(i);\n      rv = (rv << 5) - rv + c;\n      rv &= rv;\n    }\n    return rv >>> 0;\n  }\n  /* eslint-enable no-bitwise */\n\n  /**\n   * Serialize metrics buckets into a string based on statsd format.\n   *\n   * Example of format:\n   * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n   * Segments:\n   * name: metric.name\n   * unit: second\n   * value: [1, 1.2]\n   * type of metric: d (distribution)\n   * tags: { a: value, b: anothervalue }\n   * timestamp: 12345677\n   */\n  function serializeMetricBuckets(metricBucketItems) {\n    let out = '';\n    for (const item of metricBucketItems) {\n      const tagEntries = Object.entries(item.tags);\n      const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n      out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n    }\n    return out;\n  }\n\n  /**\n   * Sanitizes units\n   *\n   * These Regex's are straight from the normalisation docs:\n   * https://develop.sentry.dev/sdk/metrics/#normalization\n   */\n  function sanitizeUnit(unit) {\n    return unit.replace(/[^\\w]+/gi, '_');\n  }\n\n  /**\n   * Sanitizes metric keys\n   *\n   * These Regex's are straight from the normalisation docs:\n   * https://develop.sentry.dev/sdk/metrics/#normalization\n   */\n  function sanitizeMetricKey(key) {\n    return key.replace(/[^\\w\\-.]+/gi, '_');\n  }\n\n  /**\n   * Sanitizes metric keys\n   *\n   * These Regex's are straight from the normalisation docs:\n   * https://develop.sentry.dev/sdk/metrics/#normalization\n   */\n  function sanitizeTagKey(key) {\n    return key.replace(/[^\\w\\-./]+/gi, '');\n  }\n\n  /**\n   * These Regex's are straight from the normalisation docs:\n   * https://develop.sentry.dev/sdk/metrics/#normalization\n   */\n  const tagValueReplacements = [['\\n', '\\\\n'], ['\\r', '\\\\r'], ['\\t', '\\\\t'], ['\\\\', '\\\\\\\\'], ['|', '\\\\u{7c}'], [',', '\\\\u{2c}']];\n  function getCharOrReplacement(input) {\n    for (const [search, replacement] of tagValueReplacements) {\n      if (input === search) {\n        return replacement;\n      }\n    }\n    return input;\n  }\n  function sanitizeTagValue(value) {\n    return [...value].reduce((acc, char) => acc + getCharOrReplacement(char), '');\n  }\n\n  /**\n   * Sanitizes tags.\n   */\n  function sanitizeTags(unsanitizedTags) {\n    const tags = {};\n    for (const key in unsanitizedTags) {\n      if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n        const sanitizedKey = sanitizeTagKey(key);\n        tags[sanitizedKey] = sanitizeTagValue(String(unsanitizedTags[key]));\n      }\n    }\n    return tags;\n  }\n});","lineCount":118,"map":[[11,2,1,0],[11,6,1,0,"_object"],[11,13,1,0],[11,16,1,0,"require"],[11,23,1,0],[11,24,1,0,"_dependencyMap"],[11,38,1,0],[12,2,3,0],[13,0,4,0],[14,0,5,0],[15,2,6,0],[15,11,6,9,"getBucketKey"],[15,23,6,21,"getBucketKey"],[15,24,7,2,"metricType"],[15,34,7,12],[15,36,8,2,"name"],[15,40,8,6],[15,42,9,2,"unit"],[15,46,9,6],[15,48,10,2,"tags"],[15,52,10,6],[15,54,11,2],[16,4,12,2],[16,10,12,8,"stringifiedTags"],[16,25,12,23],[16,28,12,26,"Object"],[16,34,12,32],[16,35,12,33,"entries"],[16,42,12,40],[16,43,12,41],[16,47,12,41,"dropUndefinedKeys"],[16,72,12,58],[16,74,12,59,"tags"],[16,78,12,63],[16,79,12,64],[16,80,12,65],[16,81,12,66,"sort"],[16,85,12,70],[16,86,12,71],[16,87,12,72,"a"],[16,88,12,73],[16,90,12,75,"b"],[16,91,12,76],[16,96,12,81,"a"],[16,97,12,82],[16,98,12,83],[16,99,12,84],[16,100,12,85],[16,101,12,86,"localeCompare"],[16,114,12,99],[16,115,12,100,"b"],[16,116,12,101],[16,117,12,102],[16,118,12,103],[16,119,12,104],[16,120,12,105],[16,121,12,106],[17,4,13,2],[17,11,13,9],[17,14,13,12,"metricType"],[17,24,13,22],[17,27,13,25,"name"],[17,31,13,29],[17,34,13,32,"unit"],[17,38,13,36],[17,41,13,39,"stringifiedTags"],[17,56,13,54],[17,58,13,56],[18,2,14,0],[20,2,16,0],[21,2,17,0],[22,0,18,0],[23,0,19,0],[24,2,20,0],[24,11,20,9,"simpleHash"],[24,21,20,19,"simpleHash"],[24,22,20,20,"s"],[24,23,20,21],[24,25,20,23],[25,4,21,2],[25,8,21,6,"rv"],[25,10,21,8],[25,13,21,11],[25,14,21,12],[26,4,22,2],[26,9,22,7],[26,13,22,11,"i"],[26,14,22,12],[26,17,22,15],[26,18,22,16],[26,20,22,18,"i"],[26,21,22,19],[26,24,22,22,"s"],[26,25,22,23],[26,26,22,24,"length"],[26,32,22,30],[26,34,22,32,"i"],[26,35,22,33],[26,37,22,35],[26,39,22,37],[27,6,23,4],[27,12,23,10,"c"],[27,13,23,11],[27,16,23,14,"s"],[27,17,23,15],[27,18,23,16,"charCodeAt"],[27,28,23,26],[27,29,23,27,"i"],[27,30,23,28],[27,31,23,29],[28,6,24,4,"rv"],[28,8,24,6],[28,11,24,9],[28,12,24,10,"rv"],[28,14,24,12],[28,18,24,16],[28,19,24,17],[28,23,24,21,"rv"],[28,25,24,23],[28,28,24,26,"c"],[28,29,24,27],[29,6,25,4,"rv"],[29,8,25,6],[29,12,25,10,"rv"],[29,14,25,12],[30,4,26,2],[31,4,27,2],[31,11,27,9,"rv"],[31,13,27,11],[31,18,27,16],[31,19,27,17],[32,2,28,0],[33,2,29,0],[35,2,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,2,44,0],[48,11,44,9,"serializeMetricBuckets"],[48,33,44,31,"serializeMetricBuckets"],[48,34,44,32,"metricBucketItems"],[48,51,44,49],[48,53,44,51],[49,4,45,2],[49,8,45,6,"out"],[49,11,45,9],[49,14,45,12],[49,16,45,14],[50,4,46,2],[50,9,46,7],[50,15,46,13,"item"],[50,19,46,17],[50,23,46,21,"metricBucketItems"],[50,40,46,38],[50,42,46,40],[51,6,47,4],[51,12,47,10,"tagEntries"],[51,22,47,20],[51,25,47,23,"Object"],[51,31,47,29],[51,32,47,30,"entries"],[51,39,47,37],[51,40,47,38,"item"],[51,44,47,42],[51,45,47,43,"tags"],[51,49,47,47],[51,50,47,48],[52,6,48,4],[52,12,48,10,"maybeTags"],[52,21,48,19],[52,24,48,22,"tagEntries"],[52,34,48,32],[52,35,48,33,"length"],[52,41,48,39],[52,44,48,42],[52,45,48,43],[52,48,48,46],[52,53,48,51,"tagEntries"],[52,63,48,61],[52,64,48,62,"map"],[52,67,48,65],[52,68,48,66],[52,69,48,67],[52,70,48,68,"key"],[52,73,48,71],[52,75,48,73,"value"],[52,80,48,78],[52,81,48,79],[52,86,48,84],[52,89,48,87,"key"],[52,92,48,90],[52,96,48,94,"value"],[52,101,48,99],[52,103,48,101],[52,104,48,102],[52,105,48,103,"join"],[52,109,48,107],[52,110,48,108],[52,113,48,111],[52,114,48,112],[52,116,48,114],[52,119,48,117],[52,121,48,119],[53,6,49,4,"out"],[53,9,49,7],[53,13,49,11],[53,16,49,14,"item"],[53,20,49,18],[53,21,49,19,"name"],[53,25,49,23],[53,29,49,27,"item"],[53,33,49,31],[53,34,49,32,"unit"],[53,38,49,36],[53,42,49,40,"item"],[53,46,49,44],[53,47,49,45,"metric"],[53,53,49,51],[53,57,49,55,"item"],[53,61,49,59],[53,62,49,60,"metricType"],[53,72,49,70],[53,75,49,73,"maybeTags"],[53,84,49,82],[53,89,49,87,"item"],[53,93,49,91],[53,94,49,92,"timestamp"],[53,103,49,101],[53,107,49,105],[54,4,50,2],[55,4,51,2],[55,11,51,9,"out"],[55,14,51,12],[56,2,52,0],[58,2,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,2,60,0],[64,11,60,9,"sanitizeUnit"],[64,23,60,21,"sanitizeUnit"],[64,24,60,22,"unit"],[64,28,60,26],[64,30,60,28],[65,4,61,2],[65,11,61,9,"unit"],[65,15,61,13],[65,16,61,14,"replace"],[65,23,61,21],[65,24,61,22],[65,34,61,32],[65,36,61,34],[65,39,61,37],[65,40,61,38],[66,2,62,0],[68,2,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,2,70,0],[74,11,70,9,"sanitizeMetricKey"],[74,28,70,26,"sanitizeMetricKey"],[74,29,70,27,"key"],[74,32,70,30],[74,34,70,32],[75,4,71,2],[75,11,71,9,"key"],[75,14,71,12],[75,15,71,13,"replace"],[75,22,71,20],[75,23,71,21],[75,36,71,34],[75,38,71,36],[75,41,71,39],[75,42,71,40],[76,2,72,0],[78,2,74,0],[79,0,75,0],[80,0,76,0],[81,0,77,0],[82,0,78,0],[83,0,79,0],[84,2,80,0],[84,11,80,9,"sanitizeTagKey"],[84,25,80,23,"sanitizeTagKey"],[84,26,80,24,"key"],[84,29,80,27],[84,31,80,29],[85,4,81,2],[85,11,81,9,"key"],[85,14,81,12],[85,15,81,13,"replace"],[85,22,81,20],[85,23,81,21],[85,37,81,35],[85,39,81,37],[85,41,81,39],[85,42,81,40],[86,2,82,0],[88,2,84,0],[89,0,85,0],[90,0,86,0],[91,0,87,0],[92,2,88,0],[92,8,88,6,"tagValueReplacements"],[92,28,88,26],[92,31,88,29],[92,32,89,2],[92,33,89,3],[92,37,89,7],[92,39,89,9],[92,44,89,14],[92,45,89,15],[92,47,90,2],[92,48,90,3],[92,52,90,7],[92,54,90,9],[92,59,90,14],[92,60,90,15],[92,62,91,2],[92,63,91,3],[92,67,91,7],[92,69,91,9],[92,74,91,14],[92,75,91,15],[92,77,92,2],[92,78,92,3],[92,82,92,7],[92,84,92,9],[92,90,92,15],[92,91,92,16],[92,93,93,2],[92,94,93,3],[92,97,93,6],[92,99,93,8],[92,108,93,17],[92,109,93,18],[92,111,94,2],[92,112,94,3],[92,115,94,6],[92,117,94,8],[92,126,94,17],[92,127,94,18],[92,128,95,1],[93,2,97,0],[93,11,97,9,"getCharOrReplacement"],[93,31,97,29,"getCharOrReplacement"],[93,32,97,30,"input"],[93,37,97,35],[93,39,97,37],[94,4,98,2],[94,9,98,7],[94,15,98,13],[94,16,98,14,"search"],[94,22,98,20],[94,24,98,22,"replacement"],[94,35,98,33],[94,36,98,34],[94,40,98,38,"tagValueReplacements"],[94,60,98,58],[94,62,98,60],[95,6,99,4],[95,10,99,8,"input"],[95,15,99,13],[95,20,99,18,"search"],[95,26,99,24],[95,28,99,26],[96,8,100,6],[96,15,100,13,"replacement"],[96,26,100,24],[97,6,101,4],[98,4,102,2],[99,4,104,2],[99,11,104,9,"input"],[99,16,104,14],[100,2,105,0],[101,2,107,0],[101,11,107,9,"sanitizeTagValue"],[101,27,107,25,"sanitizeTagValue"],[101,28,107,26,"value"],[101,33,107,31],[101,35,107,33],[102,4,108,2],[102,11,108,9],[102,12,108,10],[102,15,108,13,"value"],[102,20,108,18],[102,21,108,19],[102,22,108,20,"reduce"],[102,28,108,26],[102,29,108,27],[102,30,108,28,"acc"],[102,33,108,31],[102,35,108,33,"char"],[102,39,108,37],[102,44,108,42,"acc"],[102,47,108,45],[102,50,108,48,"getCharOrReplacement"],[102,70,108,68],[102,71,108,69,"char"],[102,75,108,73],[102,76,108,74],[102,78,108,76],[102,80,108,78],[102,81,108,79],[103,2,109,0],[105,2,111,0],[106,0,112,0],[107,0,113,0],[108,2,114,0],[108,11,114,9,"sanitizeTags"],[108,23,114,21,"sanitizeTags"],[108,24,114,22,"unsanitizedTags"],[108,39,114,37],[108,41,114,39],[109,4,115,2],[109,10,115,8,"tags"],[109,14,115,12],[109,17,115,15],[109,18,115,16],[109,19,115,17],[110,4,116,2],[110,9,116,7],[110,15,116,13,"key"],[110,18,116,16],[110,22,116,20,"unsanitizedTags"],[110,37,116,35],[110,39,116,37],[111,6,117,4],[111,10,117,8,"Object"],[111,16,117,14],[111,17,117,15,"prototype"],[111,26,117,24],[111,27,117,25,"hasOwnProperty"],[111,41,117,39],[111,42,117,40,"call"],[111,46,117,44],[111,47,117,45,"unsanitizedTags"],[111,62,117,60],[111,64,117,62,"key"],[111,67,117,65],[111,68,117,66],[111,70,117,68],[112,8,118,6],[112,14,118,12,"sanitizedKey"],[112,26,118,24],[112,29,118,27,"sanitizeTagKey"],[112,43,118,41],[112,44,118,42,"key"],[112,47,118,45],[112,48,118,46],[113,8,119,6,"tags"],[113,12,119,10],[113,13,119,11,"sanitizedKey"],[113,25,119,23],[113,26,119,24],[113,29,119,27,"sanitizeTagValue"],[113,45,119,43],[113,46,119,44,"String"],[113,52,119,50],[113,53,119,51,"unsanitizedTags"],[113,68,119,66],[113,69,119,67,"key"],[113,72,119,70],[113,73,119,71],[113,74,119,72],[113,75,119,73],[114,6,120,4],[115,4,121,2],[116,4,122,2],[116,11,122,9,"tags"],[116,15,122,13],[117,2,123,0],[118,0,123,1],[118,3]],"functionMap":{"names":["<global>","getBucketKey","Object.entries.sort$argument_0","simpleHash","serializeMetricBuckets","tagEntries.map$argument_0","sanitizeUnit","sanitizeMetricKey","sanitizeTagKey","getCharOrReplacement","sanitizeTagValue","reduce$argument_0","sanitizeTags"],"mappings":"AAA;ACK;uECM,kCD;CDE;AGM;CHQ;AIgB;kECI,mCD;CJI;AMQ;CNE;AOQ;CPE;AQQ;CRE;ASe;CTQ;AUE;2BCC,+CD;CVC;AYK;CZS"}},"type":"js/module"}]}