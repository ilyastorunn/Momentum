{"dependencies":[{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/instrument/globalError.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":96,"index":145}}],"key":"gvWqMDn30rBOvINFXNGXgwmDWaA=","exportNames":["*"]}},{"name":"../utils-hoist/instrument/globalUnhandledRejection.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":146},"end":{"line":3,"column":122,"index":268}}],"key":"Yfpbd1sTqonB76qIaaoMSsQ6M9U=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":269},"end":{"line":4,"column":50,"index":319}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":320},"end":{"line":5,"column":67,"index":387}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./spanstatus.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":388},"end":{"line":6,"column":52,"index":440}}],"key":"Y3Jz0fXFV1VA2c+eEGi4NJg5MfQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.registerSpanErrorInstrumentation = registerSpanErrorInstrumentation;\n  var _debugBuild = require(_dependencyMap[0], \"../debug-build.js\");\n  var _globalError = require(_dependencyMap[1], \"../utils-hoist/instrument/globalError.js\");\n  var _globalUnhandledRejection = require(_dependencyMap[2], \"../utils-hoist/instrument/globalUnhandledRejection.js\");\n  var _logger = require(_dependencyMap[3], \"../utils-hoist/logger.js\");\n  var _spanUtils = require(_dependencyMap[4], \"../utils/spanUtils.js\");\n  var _spanstatus = require(_dependencyMap[5], \"./spanstatus.js\");\n  let errorsInstrumented = false;\n\n  /**\n   * Ensure that global errors automatically set the active span status.\n   */\n  function registerSpanErrorInstrumentation() {\n    if (errorsInstrumented) {\n      return;\n    }\n    errorsInstrumented = true;\n    (0, _globalError.addGlobalErrorInstrumentationHandler)(errorCallback);\n    (0, _globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler)(errorCallback);\n  }\n\n  /**\n   * If an error or unhandled promise occurs, we mark the active root span as failed\n   */\n  function errorCallback() {\n    const activeSpan = (0, _spanUtils.getActiveSpan)();\n    const rootSpan = activeSpan && (0, _spanUtils.getRootSpan)(activeSpan);\n    if (rootSpan) {\n      const message = 'internal_error';\n      _debugBuild.DEBUG_BUILD && _logger.logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n      rootSpan.setStatus({\n        code: _spanstatus.SPAN_STATUS_ERROR,\n        message\n      });\n    }\n  }\n\n  // The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n  // node.js default exit behaviour\n  errorCallback.tag = 'sentry_tracingErrorCallback';\n});","lineCount":45,"map":[[6,2,1,0],[6,6,1,0,"_debugBuild"],[6,17,1,0],[6,20,1,0,"require"],[6,27,1,0],[6,28,1,0,"_dependencyMap"],[6,42,1,0],[7,2,2,0],[7,6,2,0,"_globalError"],[7,18,2,0],[7,21,2,0,"require"],[7,28,2,0],[7,29,2,0,"_dependencyMap"],[7,43,2,0],[8,2,3,0],[8,6,3,0,"_globalUnhandledRejection"],[8,31,3,0],[8,34,3,0,"require"],[8,41,3,0],[8,42,3,0,"_dependencyMap"],[8,56,3,0],[9,2,4,0],[9,6,4,0,"_logger"],[9,13,4,0],[9,16,4,0,"require"],[9,23,4,0],[9,24,4,0,"_dependencyMap"],[9,38,4,0],[10,2,5,0],[10,6,5,0,"_spanUtils"],[10,16,5,0],[10,19,5,0,"require"],[10,26,5,0],[10,27,5,0,"_dependencyMap"],[10,41,5,0],[11,2,6,0],[11,6,6,0,"_spanstatus"],[11,17,6,0],[11,20,6,0,"require"],[11,27,6,0],[11,28,6,0,"_dependencyMap"],[11,42,6,0],[12,2,8,0],[12,6,8,4,"errorsInstrumented"],[12,24,8,22],[12,27,8,25],[12,32,8,30],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,2,13,0],[17,11,13,9,"registerSpanErrorInstrumentation"],[17,43,13,41,"registerSpanErrorInstrumentation"],[17,44,13,41],[17,46,13,44],[18,4,14,2],[18,8,14,6,"errorsInstrumented"],[18,26,14,24],[18,28,14,26],[19,6,15,4],[20,4,16,2],[21,4,18,2,"errorsInstrumented"],[21,22,18,20],[21,25,18,23],[21,29,18,27],[22,4,19,2],[22,8,19,2,"addGlobalErrorInstrumentationHandler"],[22,57,19,38],[22,59,19,39,"errorCallback"],[22,72,19,52],[22,73,19,53],[23,4,20,2],[23,8,20,2,"addGlobalUnhandledRejectionInstrumentationHandler"],[23,83,20,51],[23,85,20,52,"errorCallback"],[23,98,20,65],[23,99,20,66],[24,2,21,0],[26,2,23,0],[27,0,24,0],[28,0,25,0],[29,2,26,0],[29,11,26,9,"errorCallback"],[29,24,26,22,"errorCallback"],[29,25,26,22],[29,27,26,25],[30,4,27,2],[30,10,27,8,"activeSpan"],[30,20,27,18],[30,23,27,21],[30,27,27,21,"getActiveSpan"],[30,51,27,34],[30,53,27,35],[30,54,27,36],[31,4,28,2],[31,10,28,8,"rootSpan"],[31,18,28,16],[31,21,28,19,"activeSpan"],[31,31,28,29],[31,35,28,33],[31,39,28,33,"getRootSpan"],[31,61,28,44],[31,63,28,45,"activeSpan"],[31,73,28,55],[31,74,28,56],[32,4,29,2],[32,8,29,6,"rootSpan"],[32,16,29,14],[32,18,29,16],[33,6,30,4],[33,12,30,10,"message"],[33,19,30,17],[33,22,30,20],[33,38,30,36],[34,6,31,4,"DEBUG_BUILD"],[34,29,31,15],[34,33,31,19,"logger"],[34,47,31,25],[34,48,31,26,"log"],[34,51,31,29],[34,52,31,30],[34,76,31,54,"message"],[34,83,31,61],[34,110,31,88],[34,111,31,89],[35,6,32,4,"rootSpan"],[35,14,32,12],[35,15,32,13,"setStatus"],[35,24,32,22],[35,25,32,23],[36,8,32,25,"code"],[36,12,32,29],[36,14,32,31,"SPAN_STATUS_ERROR"],[36,43,32,48],[37,8,32,50,"message"],[38,6,32,58],[38,7,32,59],[38,8,32,60],[39,4,33,2],[40,2,34,0],[42,2,36,0],[43,2,37,0],[44,2,38,0,"errorCallback"],[44,15,38,13],[44,16,38,14,"tag"],[44,19,38,17],[44,22,38,20],[44,51,38,49],[45,0,38,50],[45,3]],"functionMap":{"names":["<global>","registerSpanErrorInstrumentation","errorCallback"],"mappings":"AAA;ACY;CDQ;AEK;CFQ"}},"type":"js/module"}]}