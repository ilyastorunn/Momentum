{"dependencies":[{"name":"./worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"LZlrQCVO4H3zUFIdbw1eEy4GKGE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.browserPerformanceTimeOrigin = exports._browserPerformanceTimeOriginMode = void 0;\n  exports.dateTimestampInSeconds = dateTimestampInSeconds;\n  exports.timestampInSeconds = void 0;\n  var _worldwide = require(_dependencyMap[0], \"./worldwide.js\");\n  const ONE_SECOND_IN_MS = 1000;\n\n  /**\n   * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n   * for accessing a high-resolution monotonic clock.\n   */\n\n  /**\n   * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n   *\n   * TODO(v8): Return type should be rounded.\n   */\n  function dateTimestampInSeconds() {\n    return Date.now() / ONE_SECOND_IN_MS;\n  }\n\n  /**\n   * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n   * support the API.\n   *\n   * Wrapping the native API works around differences in behavior from different browsers.\n   */\n  function createUnixTimestampInSecondsFunc() {\n    const {\n      performance\n    } = _worldwide.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n      return dateTimestampInSeconds;\n    }\n\n    // Some browser and environments don't have a timeOrigin, so we fallback to\n    // using Date.now() to compute the starting time.\n    const approxStartingTimeOrigin = Date.now() - performance.now();\n    const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n    // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n    // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n    //\n    // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n    // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n    // correct for this.\n    // See: https://github.com/getsentry/sentry-javascript/issues/2590\n    // See: https://github.com/mdn/content/issues/4713\n    // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n    return () => {\n      return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n    };\n  }\n\n  /**\n   * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n   * availability of the Performance API.\n   *\n   * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n   * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n   * skew can grow to arbitrary amounts like days, weeks or months.\n   * See https://github.com/getsentry/sentry-javascript/issues/2590.\n   */\n  const timestampInSeconds = exports.timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n  /**\n   * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n   *\n   * @deprecated This variable will be removed in the next major version.\n   */\n  let _browserPerformanceTimeOriginMode = exports._browserPerformanceTimeOriginMode = void 0;\n\n  /**\n   * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n   * performance API is available.\n   */\n  const browserPerformanceTimeOrigin = exports.browserPerformanceTimeOrigin = (() => {\n    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n    // data as reliable if they are within a reasonable threshold of the current time.\n\n    const {\n      performance\n    } = _worldwide.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n      // eslint-disable-next-line deprecation/deprecation\n      exports._browserPerformanceTimeOriginMode = _browserPerformanceTimeOriginMode = 'none';\n      return undefined;\n    }\n    const threshold = 3600 * 1000;\n    const performanceNow = performance.now();\n    const dateNow = Date.now();\n\n    // if timeOrigin isn't available set delta to threshold so it isn't used\n    const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n    const timeOriginIsReliable = timeOriginDelta < threshold;\n\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    const navigationStart = performance.timing && performance.timing.navigationStart;\n    const hasNavigationStart = typeof navigationStart === 'number';\n    // if navigationStart isn't available set delta to threshold so it isn't used\n    const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n    const navigationStartIsReliable = navigationStartDelta < threshold;\n    if (timeOriginIsReliable || navigationStartIsReliable) {\n      // Use the more reliable time origin\n      if (timeOriginDelta <= navigationStartDelta) {\n        // eslint-disable-next-line deprecation/deprecation\n        exports._browserPerformanceTimeOriginMode = _browserPerformanceTimeOriginMode = 'timeOrigin';\n        return performance.timeOrigin;\n      } else {\n        // eslint-disable-next-line deprecation/deprecation\n        exports._browserPerformanceTimeOriginMode = _browserPerformanceTimeOriginMode = 'navigationStart';\n        return navigationStart;\n      }\n    }\n\n    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n    // eslint-disable-next-line deprecation/deprecation\n    exports._browserPerformanceTimeOriginMode = _browserPerformanceTimeOriginMode = 'dateNow';\n    return dateNow;\n  })();\n});","lineCount":130,"map":[[8,2,1,0],[8,6,1,0,"_worldwide"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,3,0],[9,8,3,6,"ONE_SECOND_IN_MS"],[9,24,3,22],[9,27,3,25],[9,31,3,29],[11,2,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[16,2,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,2,15,0],[21,11,15,9,"dateTimestampInSeconds"],[21,33,15,31,"dateTimestampInSeconds"],[21,34,15,31],[21,36,15,34],[22,4,16,2],[22,11,16,9,"Date"],[22,15,16,13],[22,16,16,14,"now"],[22,19,16,17],[22,20,16,18],[22,21,16,19],[22,24,16,22,"ONE_SECOND_IN_MS"],[22,40,16,38],[23,2,17,0],[25,2,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,2,25,0],[31,11,25,9,"createUnixTimestampInSecondsFunc"],[31,43,25,41,"createUnixTimestampInSecondsFunc"],[31,44,25,41],[31,46,25,44],[32,4,26,2],[32,10,26,8],[33,6,26,10,"performance"],[34,4,26,22],[34,5,26,23],[34,8,26,26,"GLOBAL_OBJ"],[34,29,26,36],[35,4,27,2],[35,8,27,6],[35,9,27,7,"performance"],[35,20,27,18],[35,24,27,22],[35,25,27,23,"performance"],[35,36,27,34],[35,37,27,35,"now"],[35,40,27,38],[35,42,27,40],[36,6,28,4],[36,13,28,11,"dateTimestampInSeconds"],[36,35,28,33],[37,4,29,2],[39,4,31,2],[40,4,32,2],[41,4,33,2],[41,10,33,8,"approxStartingTimeOrigin"],[41,34,33,32],[41,37,33,35,"Date"],[41,41,33,39],[41,42,33,40,"now"],[41,45,33,43],[41,46,33,44],[41,47,33,45],[41,50,33,48,"performance"],[41,61,33,59],[41,62,33,60,"now"],[41,65,33,63],[41,66,33,64],[41,67,33,65],[42,4,34,2],[42,10,34,8,"timeOrigin"],[42,20,34,18],[42,23,34,21,"performance"],[42,34,34,32],[42,35,34,33,"timeOrigin"],[42,45,34,43],[42,49,34,47,"undefined"],[42,58,34,56],[42,61,34,59,"approxStartingTimeOrigin"],[42,85,34,83],[42,88,34,86,"performance"],[42,99,34,97],[42,100,34,98,"timeOrigin"],[42,110,34,108],[44,4,36,2],[45,4,37,2],[46,4,38,2],[47,4,39,2],[48,4,40,2],[49,4,41,2],[50,4,42,2],[51,4,43,2],[52,4,44,2],[53,4,45,2],[53,11,45,9],[53,17,45,15],[54,6,46,4],[54,13,46,11],[54,14,46,12,"timeOrigin"],[54,24,46,22],[54,27,46,25,"performance"],[54,38,46,36],[54,39,46,37,"now"],[54,42,46,40],[54,43,46,41],[54,44,46,42],[54,48,46,46,"ONE_SECOND_IN_MS"],[54,64,46,62],[55,4,47,2],[55,5,47,3],[56,2,48,0],[58,2,50,0],[59,0,51,0],[60,0,52,0],[61,0,53,0],[62,0,54,0],[63,0,55,0],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,2,59,0],[67,8,59,6,"timestampInSeconds"],[67,26,59,24],[67,29,59,24,"exports"],[67,36,59,24],[67,37,59,24,"timestampInSeconds"],[67,55,59,24],[67,58,59,27,"createUnixTimestampInSecondsFunc"],[67,90,59,59],[67,91,59,60],[67,92,59,61],[69,2,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,2,66,0],[74,6,66,4,"_browserPerformanceTimeOriginMode"],[74,39,66,37],[74,42,66,37,"exports"],[74,49,66,37],[74,50,66,37,"_browserPerformanceTimeOriginMode"],[74,83,66,37],[76,2,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,2,72,0],[80,8,72,6,"browserPerformanceTimeOrigin"],[80,36,72,34],[80,39,72,34,"exports"],[80,46,72,34],[80,47,72,34,"browserPerformanceTimeOrigin"],[80,75,72,34],[80,78,72,37],[80,79,72,38],[80,85,72,44],[81,4,73,2],[82,4,74,2],[83,4,75,2],[85,4,77,2],[85,10,77,8],[86,6,77,10,"performance"],[87,4,77,22],[87,5,77,23],[87,8,77,26,"GLOBAL_OBJ"],[87,29,77,36],[88,4,78,2],[88,8,78,6],[88,9,78,7,"performance"],[88,20,78,18],[88,24,78,22],[88,25,78,23,"performance"],[88,36,78,34],[88,37,78,35,"now"],[88,40,78,38],[88,42,78,40],[89,6,79,4],[90,6,80,4,"exports"],[90,13,80,4],[90,14,80,4,"_browserPerformanceTimeOriginMode"],[90,47,80,4],[90,50,80,4,"_browserPerformanceTimeOriginMode"],[90,83,80,37],[90,86,80,40],[90,92,80,46],[91,6,81,4],[91,13,81,11,"undefined"],[91,22,81,20],[92,4,82,2],[93,4,84,2],[93,10,84,8,"threshold"],[93,19,84,17],[93,22,84,20],[93,26,84,24],[93,29,84,27],[93,33,84,31],[94,4,85,2],[94,10,85,8,"performanceNow"],[94,24,85,22],[94,27,85,25,"performance"],[94,38,85,36],[94,39,85,37,"now"],[94,42,85,40],[94,43,85,41],[94,44,85,42],[95,4,86,2],[95,10,86,8,"dateNow"],[95,17,86,15],[95,20,86,18,"Date"],[95,24,86,22],[95,25,86,23,"now"],[95,28,86,26],[95,29,86,27],[95,30,86,28],[97,4,88,2],[98,4,89,2],[98,10,89,8,"timeOriginDelta"],[98,25,89,23],[98,28,89,26,"performance"],[98,39,89,37],[98,40,89,38,"timeOrigin"],[98,50,89,48],[98,53,90,6,"Math"],[98,57,90,10],[98,58,90,11,"abs"],[98,61,90,14],[98,62,90,15,"performance"],[98,73,90,26],[98,74,90,27,"timeOrigin"],[98,84,90,37],[98,87,90,40,"performanceNow"],[98,101,90,54],[98,104,90,57,"dateNow"],[98,111,90,64],[98,112,90,65],[98,115,91,6,"threshold"],[98,124,91,15],[99,4,92,2],[99,10,92,8,"timeOriginIsReliable"],[99,30,92,28],[99,33,92,31,"timeOriginDelta"],[99,48,92,46],[99,51,92,49,"threshold"],[99,60,92,58],[101,4,94,2],[102,4,95,2],[103,4,96,2],[104,4,97,2],[105,4,98,2],[106,4,99,2],[107,4,100,2],[107,10,100,8,"navigationStart"],[107,25,100,23],[107,28,100,26,"performance"],[107,39,100,37],[107,40,100,38,"timing"],[107,46,100,44],[107,50,100,48,"performance"],[107,61,100,59],[107,62,100,60,"timing"],[107,68,100,66],[107,69,100,67,"navigationStart"],[107,84,100,82],[108,4,101,2],[108,10,101,8,"hasNavigationStart"],[108,28,101,26],[108,31,101,29],[108,38,101,36,"navigationStart"],[108,53,101,51],[108,58,101,56],[108,66,101,64],[109,4,102,2],[110,4,103,2],[110,10,103,8,"navigationStartDelta"],[110,30,103,28],[110,33,103,31,"hasNavigationStart"],[110,51,103,49],[110,54,103,52,"Math"],[110,58,103,56],[110,59,103,57,"abs"],[110,62,103,60],[110,63,103,61,"navigationStart"],[110,78,103,76],[110,81,103,79,"performanceNow"],[110,95,103,93],[110,98,103,96,"dateNow"],[110,105,103,103],[110,106,103,104],[110,109,103,107,"threshold"],[110,118,103,116],[111,4,104,2],[111,10,104,8,"navigationStartIsReliable"],[111,35,104,33],[111,38,104,36,"navigationStartDelta"],[111,58,104,56],[111,61,104,59,"threshold"],[111,70,104,68],[112,4,106,2],[112,8,106,6,"timeOriginIsReliable"],[112,28,106,26],[112,32,106,30,"navigationStartIsReliable"],[112,57,106,55],[112,59,106,57],[113,6,107,4],[114,6,108,4],[114,10,108,8,"timeOriginDelta"],[114,25,108,23],[114,29,108,27,"navigationStartDelta"],[114,49,108,47],[114,51,108,49],[115,8,109,6],[116,8,110,6,"exports"],[116,15,110,6],[116,16,110,6,"_browserPerformanceTimeOriginMode"],[116,49,110,6],[116,52,110,6,"_browserPerformanceTimeOriginMode"],[116,85,110,39],[116,88,110,42],[116,100,110,54],[117,8,111,6],[117,15,111,13,"performance"],[117,26,111,24],[117,27,111,25,"timeOrigin"],[117,37,111,35],[118,6,112,4],[118,7,112,5],[118,13,112,11],[119,8,113,6],[120,8,114,6,"exports"],[120,15,114,6],[120,16,114,6,"_browserPerformanceTimeOriginMode"],[120,49,114,6],[120,52,114,6,"_browserPerformanceTimeOriginMode"],[120,85,114,39],[120,88,114,42],[120,105,114,59],[121,8,115,6],[121,15,115,13,"navigationStart"],[121,30,115,28],[122,6,116,4],[123,4,117,2],[125,4,119,2],[126,4,120,2],[127,4,121,2,"exports"],[127,11,121,2],[127,12,121,2,"_browserPerformanceTimeOriginMode"],[127,45,121,2],[127,48,121,2,"_browserPerformanceTimeOriginMode"],[127,81,121,35],[127,84,121,38],[127,93,121,47],[128,4,122,2],[128,11,122,9,"dateNow"],[128,18,122,16],[129,2,123,0],[129,3,123,1],[129,5,123,3],[129,6,123,4],[130,0,123,5],[130,3]],"functionMap":{"names":["<global>","dateTimestampInSeconds","createUnixTimestampInSecondsFunc","<anonymous>"],"mappings":"AAA;ACc;CDE;AEQ;SCoB;GDE;CFC;sCGwB;CHmD"}},"type":"js/module"}]}