{"dependencies":[{"name":"./object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"c+4yuYP7E2Xh9QIfj2WEKgywjI4=","exportNames":["*"]}},{"name":"./string.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":39,"index":95}}],"key":"4SgKKWBRWk0zxI3arZcISee7pnU=","exportNames":["*"]}},{"name":"./worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":96},"end":{"line":3,"column":44,"index":140}}],"key":"LZlrQCVO4H3zUFIdbw1eEy4GKGE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addContextToFrame = addContextToFrame;\n  exports.addExceptionMechanism = addExceptionMechanism;\n  exports.addExceptionTypeValue = addExceptionTypeValue;\n  exports.arrayify = arrayify;\n  exports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;\n  exports.getEventDescription = getEventDescription;\n  exports.parseSemver = parseSemver;\n  exports.uuid4 = uuid4;\n  var _object = require(_dependencyMap[0], \"./object.js\");\n  var _string = require(_dependencyMap[1], \"./string.js\");\n  var _worldwide = require(_dependencyMap[2], \"./worldwide.js\");\n  /**\n   * UUID4 generator\n   *\n   * @returns string Generated UUID4.\n   */\n  function uuid4() {\n    const gbl = _worldwide.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = () => Math.random() * 16;\n    try {\n      if (crypto && crypto.randomUUID) {\n        return crypto.randomUUID().replace(/-/g, '');\n      }\n      if (crypto && crypto.getRandomValues) {\n        getRandomByte = () => {\n          // crypto.getRandomValues might return undefined instead of the typed array\n          // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n          // However, `typedArray` is still filled in-place.\n          // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n          const typedArray = new Uint8Array(1);\n          crypto.getRandomValues(typedArray);\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return typedArray[0];\n        };\n      }\n    } catch (_) {\n      // some runtimes can crash invoking crypto\n      // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n  }\n  function getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n  }\n\n  /**\n   * Extracts either message or type+value from an event that can be used for user-facing logs\n   * @returns event's description\n   */\n  function getEventDescription(event) {\n    const {\n      message,\n      event_id: eventId\n    } = event;\n    if (message) {\n      return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n      if (firstException.type && firstException.value) {\n        return `${firstException.type}: ${firstException.value}`;\n      }\n      return firstException.type || firstException.value || eventId || '<unknown>';\n    }\n    return eventId || '<unknown>';\n  }\n\n  /**\n   * Adds exception values, type and value to an synthetic Exception.\n   * @param event The event to modify.\n   * @param value Value of the exception.\n   * @param type Type of the exception.\n   * @hidden\n   */\n  function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n      firstException.value = value || '';\n    }\n    if (!firstException.type) {\n      firstException.type = type || 'Error';\n    }\n  }\n\n  /**\n   * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n   *\n   * @param event The event to modify.\n   * @param newMechanism Mechanism data to add to the event.\n   * @hidden\n   */\n  function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n      return;\n    }\n    const defaultMechanism = {\n      type: 'generic',\n      handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n      ...defaultMechanism,\n      ...currentMechanism,\n      ...newMechanism\n    };\n    if (newMechanism && 'data' in newMechanism) {\n      const mergedData = {\n        ...(currentMechanism && currentMechanism.data),\n        ...newMechanism.data\n      };\n      firstException.mechanism.data = mergedData;\n    }\n  }\n\n  // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n  const SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n  /**\n   * Represents Semantic Versioning object\n   */\n\n  function _parseInt(input) {\n    return parseInt(input || '', 10);\n  }\n\n  /**\n   * Parses input into a SemVer interface\n   * @param input string representation of a semver version\n   */\n  function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = _parseInt(match[1]);\n    const minor = _parseInt(match[2]);\n    const patch = _parseInt(match[3]);\n    return {\n      buildmetadata: match[5],\n      major: isNaN(major) ? undefined : major,\n      minor: isNaN(minor) ? undefined : minor,\n      patch: isNaN(patch) ? undefined : patch,\n      prerelease: match[4]\n    };\n  }\n\n  /**\n   * This function adds context (pre/post/line) lines to the provided frame\n   *\n   * @param lines string[] containing all lines\n   * @param frame StackFrame that will be mutated\n   * @param linesOfContext number of context lines we want to add pre/post\n   */\n  function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n      return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(line => (0, _string.snipLine)(line, 0));\n\n    // We guard here to ensure this is not larger than the existing number of lines\n    const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    frame.context_line = (0, _string.snipLine)(lines[lineIndex], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(line => (0, _string.snipLine)(line, 0));\n  }\n\n  /**\n   * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n   * in question), and marks it captured if not.\n   *\n   * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n   * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n   * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n   * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n   * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n   * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n   * see it.\n   *\n   * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n   * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n   * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n   * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n   * must be done before the exception captured.\n   *\n   * @param A thrown exception to check or flag as having been seen\n   * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n   */\n  function checkOrSetAlreadyCaught(exception) {\n    if (isAlreadyCaptured(exception)) {\n      return true;\n    }\n    try {\n      // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n      // `ExtraErrorData` integration\n      (0, _object.addNonEnumerableProperty)(exception, '__sentry_captured__', true);\n    } catch (err) {\n      // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n  }\n  function isAlreadyCaptured(exception) {\n    try {\n      return exception.__sentry_captured__;\n    } catch (e) {} // eslint-disable-line no-empty\n  }\n\n  /**\n   * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n   *\n   * @param maybeArray Input to turn into an array, if necessary\n   * @returns The input, if already an array, or an array with the input as the only element, if not\n   *\n   * @deprecated This function has been deprecated and will not be replaced.\n   */\n  function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n  }\n});","lineCount":232,"map":[[13,2,1,0],[13,6,1,0,"_object"],[13,13,1,0],[13,16,1,0,"require"],[13,23,1,0],[13,24,1,0,"_dependencyMap"],[13,38,1,0],[14,2,2,0],[14,6,2,0,"_string"],[14,13,2,0],[14,16,2,0,"require"],[14,23,2,0],[14,24,2,0,"_dependencyMap"],[14,38,2,0],[15,2,3,0],[15,6,3,0,"_worldwide"],[15,16,3,0],[15,19,3,0,"require"],[15,26,3,0],[15,27,3,0,"_dependencyMap"],[15,41,3,0],[16,2,5,0],[17,0,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[21,2,10,0],[21,11,10,9,"uuid4"],[21,16,10,14,"uuid4"],[21,17,10,14],[21,19,10,17],[22,4,11,2],[22,10,11,8,"gbl"],[22,13,11,11],[22,16,11,14,"GLOBAL_OBJ"],[22,37,11,24],[23,4,12,2],[23,10,12,8,"crypto"],[23,16,12,14],[23,19,12,17,"gbl"],[23,22,12,20],[23,23,12,21,"crypto"],[23,29,12,27],[23,33,12,31,"gbl"],[23,36,12,34],[23,37,12,35,"msCrypto"],[23,45,12,43],[24,4,14,2],[24,8,14,6,"getRandomByte"],[24,21,14,19],[24,24,14,22,"getRandomByte"],[24,25,14,22],[24,30,14,28,"Math"],[24,34,14,32],[24,35,14,33,"random"],[24,41,14,39],[24,42,14,40],[24,43,14,41],[24,46,14,44],[24,48,14,46],[25,4,15,2],[25,8,15,6],[26,6,16,4],[26,10,16,8,"crypto"],[26,16,16,14],[26,20,16,18,"crypto"],[26,26,16,24],[26,27,16,25,"randomUUID"],[26,37,16,35],[26,39,16,37],[27,8,17,6],[27,15,17,13,"crypto"],[27,21,17,19],[27,22,17,20,"randomUUID"],[27,32,17,30],[27,33,17,31],[27,34,17,32],[27,35,17,33,"replace"],[27,42,17,40],[27,43,17,41],[27,47,17,45],[27,49,17,47],[27,51,17,49],[27,52,17,50],[28,6,18,4],[29,6,19,4],[29,10,19,8,"crypto"],[29,16,19,14],[29,20,19,18,"crypto"],[29,26,19,24],[29,27,19,25,"getRandomValues"],[29,42,19,40],[29,44,19,42],[30,8,20,6,"getRandomByte"],[30,21,20,19],[30,24,20,22,"getRandomByte"],[30,25,20,22],[30,30,20,28],[31,10,21,8],[32,10,22,8],[33,10,23,8],[34,10,24,8],[35,10,25,8],[35,16,25,14,"typedArray"],[35,26,25,24],[35,29,25,27],[35,33,25,31,"Uint8Array"],[35,43,25,41],[35,44,25,42],[35,45,25,43],[35,46,25,44],[36,10,26,8,"crypto"],[36,16,26,14],[36,17,26,15,"getRandomValues"],[36,32,26,30],[36,33,26,31,"typedArray"],[36,43,26,41],[36,44,26,42],[37,10,27,8],[38,10,28,8],[38,17,28,15,"typedArray"],[38,27,28,25],[38,28,28,26],[38,29,28,27],[38,30,28,28],[39,8,29,6],[39,9,29,7],[40,6,30,4],[41,4,31,2],[41,5,31,3],[41,6,31,4],[41,13,31,11,"_"],[41,14,31,12],[41,16,31,14],[42,6,32,4],[43,6,33,4],[44,4,33,4],[46,4,36,2],[47,4,37,2],[48,4,38,2],[48,11,38,9],[48,12,38,11],[48,13,38,12],[48,16,38,15],[48,17,38,16],[48,20,38,21],[48,23,38,24],[48,26,38,27],[48,29,38,30],[48,32,38,33],[48,35,38,36],[48,38,38,39],[48,42,38,43],[48,44,38,45,"replace"],[48,51,38,52],[48,52,38,53],[48,60,38,61],[48,62,38,63,"c"],[48,63,38,64],[49,4,39,4],[50,4,40,4],[50,5,40,6,"c"],[50,6,40,7],[50,9,40,13],[50,10,40,14,"getRandomByte"],[50,23,40,27],[50,24,40,28],[50,25,40,29],[50,28,40,32],[50,30,40,34],[50,35,40,41,"c"],[50,36,40,42],[50,39,40,47],[50,40,40,50],[50,42,40,52,"toString"],[50,50,40,60],[50,51,40,61],[50,53,40,63],[50,54,41,2],[50,55,41,3],[51,2,42,0],[52,2,44,0],[52,11,44,9,"getFirstException"],[52,28,44,26,"getFirstException"],[52,29,44,27,"event"],[52,34,44,32],[52,36,44,34],[53,4,45,2],[53,11,45,9,"event"],[53,16,45,14],[53,17,45,15,"exception"],[53,26,45,24],[53,30,45,28,"event"],[53,35,45,33],[53,36,45,34,"exception"],[53,45,45,43],[53,46,45,44,"values"],[53,52,45,50],[53,55,45,53,"event"],[53,60,45,58],[53,61,45,59,"exception"],[53,70,45,68],[53,71,45,69,"values"],[53,77,45,75],[53,78,45,76],[53,79,45,77],[53,80,45,78],[53,83,45,81,"undefined"],[53,92,45,90],[54,2,46,0],[56,2,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,2,52,0],[60,11,52,9,"getEventDescription"],[60,30,52,28,"getEventDescription"],[60,31,52,29,"event"],[60,36,52,34],[60,38,52,36],[61,4,53,2],[61,10,53,8],[62,6,53,10,"message"],[62,13,53,17],[63,6,53,19,"event_id"],[63,14,53,27],[63,16,53,29,"eventId"],[64,4,53,37],[64,5,53,38],[64,8,53,41,"event"],[64,13,53,46],[65,4,54,2],[65,8,54,6,"message"],[65,15,54,13],[65,17,54,15],[66,6,55,4],[66,13,55,11,"message"],[66,20,55,18],[67,4,56,2],[68,4,58,2],[68,10,58,8,"firstException"],[68,24,58,22],[68,27,58,25,"getFirstException"],[68,44,58,42],[68,45,58,43,"event"],[68,50,58,48],[68,51,58,49],[69,4,59,2],[69,8,59,6,"firstException"],[69,22,59,20],[69,24,59,22],[70,6,60,4],[70,10,60,8,"firstException"],[70,24,60,22],[70,25,60,23,"type"],[70,29,60,27],[70,33,60,31,"firstException"],[70,47,60,45],[70,48,60,46,"value"],[70,53,60,51],[70,55,60,53],[71,8,61,6],[71,15,61,13],[71,18,61,16,"firstException"],[71,32,61,30],[71,33,61,31,"type"],[71,37,61,35],[71,42,61,40,"firstException"],[71,56,61,54],[71,57,61,55,"value"],[71,62,61,60],[71,64,61,62],[72,6,62,4],[73,6,63,4],[73,13,63,11,"firstException"],[73,27,63,25],[73,28,63,26,"type"],[73,32,63,30],[73,36,63,34,"firstException"],[73,50,63,48],[73,51,63,49,"value"],[73,56,63,54],[73,60,63,58,"eventId"],[73,67,63,65],[73,71,63,69],[73,82,63,80],[74,4,64,2],[75,4,65,2],[75,11,65,9,"eventId"],[75,18,65,16],[75,22,65,20],[75,33,65,31],[76,2,66,0],[78,2,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,0,72,0],[83,0,73,0],[84,0,74,0],[85,2,75,0],[85,11,75,9,"addExceptionTypeValue"],[85,32,75,30,"addExceptionTypeValue"],[85,33,75,31,"event"],[85,38,75,36],[85,40,75,38,"value"],[85,45,75,43],[85,47,75,45,"type"],[85,51,75,49],[85,53,75,51],[86,4,76,2],[86,10,76,8,"exception"],[86,19,76,17],[86,22,76,21,"event"],[86,27,76,26],[86,28,76,27,"exception"],[86,37,76,36],[86,40,76,39,"event"],[86,45,76,44],[86,46,76,45,"exception"],[86,55,76,54],[86,59,76,58],[86,60,76,59],[86,61,76,61],[87,4,77,2],[87,10,77,8,"values"],[87,16,77,14],[87,19,77,18,"exception"],[87,28,77,27],[87,29,77,28,"values"],[87,35,77,34],[87,38,77,37,"exception"],[87,47,77,46],[87,48,77,47,"values"],[87,54,77,53],[87,58,77,57],[87,60,77,60],[88,4,78,2],[88,10,78,8,"firstException"],[88,24,78,22],[88,27,78,26,"values"],[88,33,78,32],[88,34,78,33],[88,35,78,34],[88,36,78,35],[88,39,78,38,"values"],[88,45,78,44],[88,46,78,45],[88,47,78,46],[88,48,78,47],[88,52,78,51],[88,53,78,52],[88,54,78,54],[89,4,79,2],[89,8,79,6],[89,9,79,7,"firstException"],[89,23,79,21],[89,24,79,22,"value"],[89,29,79,27],[89,31,79,29],[90,6,80,4,"firstException"],[90,20,80,18],[90,21,80,19,"value"],[90,26,80,24],[90,29,80,27,"value"],[90,34,80,32],[90,38,80,36],[90,40,80,38],[91,4,81,2],[92,4,82,2],[92,8,82,6],[92,9,82,7,"firstException"],[92,23,82,21],[92,24,82,22,"type"],[92,28,82,26],[92,30,82,28],[93,6,83,4,"firstException"],[93,20,83,18],[93,21,83,19,"type"],[93,25,83,23],[93,28,83,26,"type"],[93,32,83,30],[93,36,83,34],[93,43,83,41],[94,4,84,2],[95,2,85,0],[97,2,87,0],[98,0,88,0],[99,0,89,0],[100,0,90,0],[101,0,91,0],[102,0,92,0],[103,0,93,0],[104,2,94,0],[104,11,94,9,"addExceptionMechanism"],[104,32,94,30,"addExceptionMechanism"],[104,33,94,31,"event"],[104,38,94,36],[104,40,94,38,"newMechanism"],[104,52,94,50],[104,54,94,52],[105,4,95,2],[105,10,95,8,"firstException"],[105,24,95,22],[105,27,95,25,"getFirstException"],[105,44,95,42],[105,45,95,43,"event"],[105,50,95,48],[105,51,95,49],[106,4,96,2],[106,8,96,6],[106,9,96,7,"firstException"],[106,23,96,21],[106,25,96,23],[107,6,97,4],[108,4,98,2],[109,4,100,2],[109,10,100,8,"defaultMechanism"],[109,26,100,24],[109,29,100,27],[110,6,100,29,"type"],[110,10,100,33],[110,12,100,35],[110,21,100,44],[111,6,100,46,"handled"],[111,13,100,53],[111,15,100,55],[112,4,100,60],[112,5,100,61],[113,4,101,2],[113,10,101,8,"currentMechanism"],[113,26,101,24],[113,29,101,27,"firstException"],[113,43,101,41],[113,44,101,42,"mechanism"],[113,53,101,51],[114,4,102,2,"firstException"],[114,18,102,16],[114,19,102,17,"mechanism"],[114,28,102,26],[114,31,102,29],[115,6,102,31],[115,9,102,34,"defaultMechanism"],[115,25,102,50],[116,6,102,52],[116,9,102,55,"currentMechanism"],[116,25,102,71],[117,6,102,73],[117,9,102,76,"newMechanism"],[118,4,102,89],[118,5,102,90],[119,4,104,2],[119,8,104,6,"newMechanism"],[119,20,104,18],[119,24,104,22],[119,30,104,28],[119,34,104,32,"newMechanism"],[119,46,104,44],[119,48,104,46],[120,6,105,4],[120,12,105,10,"mergedData"],[120,22,105,20],[120,25,105,23],[121,8,105,25],[121,12,105,29,"currentMechanism"],[121,28,105,45],[121,32,105,49,"currentMechanism"],[121,48,105,65],[121,49,105,66,"data"],[121,53,105,70],[121,54,105,71],[122,8,105,73],[122,11,105,76,"newMechanism"],[122,23,105,88],[122,24,105,89,"data"],[123,6,105,94],[123,7,105,95],[124,6,106,4,"firstException"],[124,20,106,18],[124,21,106,19,"mechanism"],[124,30,106,28],[124,31,106,29,"data"],[124,35,106,33],[124,38,106,36,"mergedData"],[124,48,106,46],[125,4,107,2],[126,2,108,0],[128,2,110,0],[129,2,111,0],[129,8,111,6,"SEMVER_REGEXP"],[129,21,111,19],[129,24,112,2],[129,205,112,183],[131,2,114,0],[132,0,115,0],[133,0,116,0],[135,2,118,0],[135,11,118,9,"_parseInt"],[135,20,118,18,"_parseInt"],[135,21,118,19,"input"],[135,26,118,24],[135,28,118,26],[136,4,119,2],[136,11,119,9,"parseInt"],[136,19,119,17],[136,20,119,18,"input"],[136,25,119,23],[136,29,119,27],[136,31,119,29],[136,33,119,31],[136,35,119,33],[136,36,119,34],[137,2,120,0],[139,2,122,0],[140,0,123,0],[141,0,124,0],[142,0,125,0],[143,2,126,0],[143,11,126,9,"parseSemver"],[143,22,126,20,"parseSemver"],[143,23,126,21,"input"],[143,28,126,26],[143,30,126,28],[144,4,127,2],[144,10,127,8,"match"],[144,15,127,13],[144,18,127,16,"input"],[144,23,127,21],[144,24,127,22,"match"],[144,29,127,27],[144,30,127,28,"SEMVER_REGEXP"],[144,43,127,41],[144,44,127,42],[144,48,127,46],[144,50,127,48],[145,4,128,2],[145,10,128,8,"major"],[145,15,128,13],[145,18,128,16,"_parseInt"],[145,27,128,25],[145,28,128,26,"match"],[145,33,128,31],[145,34,128,32],[145,35,128,33],[145,36,128,34],[145,37,128,35],[146,4,129,2],[146,10,129,8,"minor"],[146,15,129,13],[146,18,129,16,"_parseInt"],[146,27,129,25],[146,28,129,26,"match"],[146,33,129,31],[146,34,129,32],[146,35,129,33],[146,36,129,34],[146,37,129,35],[147,4,130,2],[147,10,130,8,"patch"],[147,15,130,13],[147,18,130,16,"_parseInt"],[147,27,130,25],[147,28,130,26,"match"],[147,33,130,31],[147,34,130,32],[147,35,130,33],[147,36,130,34],[147,37,130,35],[148,4,131,2],[148,11,131,9],[149,6,132,4,"buildmetadata"],[149,19,132,17],[149,21,132,19,"match"],[149,26,132,24],[149,27,132,25],[149,28,132,26],[149,29,132,27],[150,6,133,4,"major"],[150,11,133,9],[150,13,133,11,"isNaN"],[150,18,133,16],[150,19,133,17,"major"],[150,24,133,22],[150,25,133,23],[150,28,133,26,"undefined"],[150,37,133,35],[150,40,133,38,"major"],[150,45,133,43],[151,6,134,4,"minor"],[151,11,134,9],[151,13,134,11,"isNaN"],[151,18,134,16],[151,19,134,17,"minor"],[151,24,134,22],[151,25,134,23],[151,28,134,26,"undefined"],[151,37,134,35],[151,40,134,38,"minor"],[151,45,134,43],[152,6,135,4,"patch"],[152,11,135,9],[152,13,135,11,"isNaN"],[152,18,135,16],[152,19,135,17,"patch"],[152,24,135,22],[152,25,135,23],[152,28,135,26,"undefined"],[152,37,135,35],[152,40,135,38,"patch"],[152,45,135,43],[153,6,136,4,"prerelease"],[153,16,136,14],[153,18,136,16,"match"],[153,23,136,21],[153,24,136,22],[153,25,136,23],[154,4,137,2],[154,5,137,3],[155,2,138,0],[157,2,140,0],[158,0,141,0],[159,0,142,0],[160,0,143,0],[161,0,144,0],[162,0,145,0],[163,0,146,0],[164,2,147,0],[164,11,147,9,"addContextToFrame"],[164,28,147,26,"addContextToFrame"],[164,29,147,27,"lines"],[164,34,147,32],[164,36,147,34,"frame"],[164,41,147,39],[164,43,147,41,"linesOfContext"],[164,57,147,55],[164,60,147,58],[164,61,147,59],[164,63,147,61],[165,4,148,2],[166,4,149,2],[166,8,149,6,"frame"],[166,13,149,11],[166,14,149,12,"lineno"],[166,20,149,18],[166,25,149,23,"undefined"],[166,34,149,32],[166,36,149,34],[167,6,150,4],[168,4,151,2],[169,4,153,2],[169,10,153,8,"maxLines"],[169,18,153,16],[169,21,153,19,"lines"],[169,26,153,24],[169,27,153,25,"length"],[169,33,153,31],[170,4,154,2],[170,10,154,8,"sourceLine"],[170,20,154,18],[170,23,154,21,"Math"],[170,27,154,25],[170,28,154,26,"max"],[170,31,154,29],[170,32,154,30,"Math"],[170,36,154,34],[170,37,154,35,"min"],[170,40,154,38],[170,41,154,39,"maxLines"],[170,49,154,47],[170,52,154,50],[170,53,154,51],[170,55,154,53,"frame"],[170,60,154,58],[170,61,154,59,"lineno"],[170,67,154,65],[170,70,154,68],[170,71,154,69],[170,72,154,70],[170,74,154,72],[170,75,154,73],[170,76,154,74],[171,4,156,2,"frame"],[171,9,156,7],[171,10,156,8,"pre_context"],[171,21,156,19],[171,24,156,22,"lines"],[171,29,156,27],[171,30,157,5,"slice"],[171,35,157,10],[171,36,157,11,"Math"],[171,40,157,15],[171,41,157,16,"max"],[171,44,157,19],[171,45,157,20],[171,46,157,21],[171,48,157,23,"sourceLine"],[171,58,157,33],[171,61,157,36,"linesOfContext"],[171,75,157,50],[171,76,157,51],[171,78,157,53,"sourceLine"],[171,88,157,63],[171,89,157,64],[171,90,158,5,"map"],[171,93,158,8],[171,94,158,10,"line"],[171,98,158,14],[171,102,158,19],[171,106,158,19,"snipLine"],[171,122,158,27],[171,124,158,28,"line"],[171,128,158,32],[171,130,158,34],[171,131,158,35],[171,132,158,36],[171,133,158,37],[173,4,160,2],[174,4,161,2],[174,10,161,8,"lineIndex"],[174,19,161,17],[174,22,161,20,"Math"],[174,26,161,24],[174,27,161,25,"min"],[174,30,161,28],[174,31,161,29,"maxLines"],[174,39,161,37],[174,42,161,40],[174,43,161,41],[174,45,161,43,"sourceLine"],[174,55,161,53],[174,56,161,54],[176,4,163,2],[177,4,164,2,"frame"],[177,9,164,7],[177,10,164,8,"context_line"],[177,22,164,20],[177,25,164,23],[177,29,164,23,"snipLine"],[177,45,164,31],[177,47,164,32,"lines"],[177,52,164,37],[177,53,164,38,"lineIndex"],[177,62,164,47],[177,63,164,48],[177,65,164,50,"frame"],[177,70,164,55],[177,71,164,56,"colno"],[177,76,164,61],[177,80,164,65],[177,81,164,66],[177,82,164,67],[178,4,166,2,"frame"],[178,9,166,7],[178,10,166,8,"post_context"],[178,22,166,20],[178,25,166,23,"lines"],[178,30,166,28],[178,31,167,5,"slice"],[178,36,167,10],[178,37,167,11,"Math"],[178,41,167,15],[178,42,167,16,"min"],[178,45,167,19],[178,46,167,20,"sourceLine"],[178,56,167,30],[178,59,167,33],[178,60,167,34],[178,62,167,36,"maxLines"],[178,70,167,44],[178,71,167,45],[178,73,167,47,"sourceLine"],[178,83,167,57],[178,86,167,60],[178,87,167,61],[178,90,167,64,"linesOfContext"],[178,104,167,78],[178,105,167,79],[178,106,168,5,"map"],[178,109,168,8],[178,110,168,10,"line"],[178,114,168,14],[178,118,168,19],[178,122,168,19,"snipLine"],[178,138,168,27],[178,140,168,28,"line"],[178,144,168,32],[178,146,168,34],[178,147,168,35],[178,148,168,36],[178,149,168,37],[179,2,169,0],[181,2,171,0],[182,0,172,0],[183,0,173,0],[184,0,174,0],[185,0,175,0],[186,0,176,0],[187,0,177,0],[188,0,178,0],[189,0,179,0],[190,0,180,0],[191,0,181,0],[192,0,182,0],[193,0,183,0],[194,0,184,0],[195,0,185,0],[196,0,186,0],[197,0,187,0],[198,0,188,0],[199,0,189,0],[200,0,190,0],[201,0,191,0],[202,2,192,0],[202,11,192,9,"checkOrSetAlreadyCaught"],[202,34,192,32,"checkOrSetAlreadyCaught"],[202,35,192,33,"exception"],[202,44,192,42],[202,46,192,44],[203,4,193,2],[203,8,193,6,"isAlreadyCaptured"],[203,25,193,23],[203,26,193,24,"exception"],[203,35,193,33],[203,36,193,34],[203,38,193,36],[204,6,194,4],[204,13,194,11],[204,17,194,15],[205,4,195,2],[206,4,197,2],[206,8,197,6],[207,6,198,4],[208,6,199,4],[209,6,200,4],[209,10,200,4,"addNonEnumerableProperty"],[209,42,200,28],[209,44,200,29,"exception"],[209,53,200,38],[209,55,200,41],[209,76,200,62],[209,78,200,64],[209,82,200,68],[209,83,200,69],[210,4,201,2],[210,5,201,3],[210,6,201,4],[210,13,201,11,"err"],[210,16,201,14],[210,18,201,16],[211,6,202,4],[212,4,202,4],[213,4,205,2],[213,11,205,9],[213,16,205,14],[214,2,206,0],[215,2,208,0],[215,11,208,9,"isAlreadyCaptured"],[215,28,208,26,"isAlreadyCaptured"],[215,29,208,27,"exception"],[215,38,208,36],[215,40,208,38],[216,4,209,2],[216,8,209,6],[217,6,210,4],[217,13,210,12,"exception"],[217,22,210,21],[217,23,210,24,"__sentry_captured__"],[217,42,210,43],[218,4,211,2],[218,5,211,3],[218,6,211,4],[218,13,211,11,"e"],[218,14,211,12],[218,16,211,14],[218,17,211,15],[218,18,211,16],[218,19,211,17],[219,2,212,0],[221,2,214,0],[222,0,215,0],[223,0,216,0],[224,0,217,0],[225,0,218,0],[226,0,219,0],[227,0,220,0],[228,0,221,0],[229,2,222,0],[229,11,222,9,"arrayify"],[229,19,222,17,"arrayify"],[229,20,222,18,"maybeArray"],[229,30,222,28],[229,32,222,30],[230,4,223,2],[230,11,223,9,"Array"],[230,16,223,14],[230,17,223,15,"isArray"],[230,24,223,22],[230,25,223,23,"maybeArray"],[230,35,223,33],[230,36,223,34],[230,39,223,37,"maybeArray"],[230,49,223,47],[230,52,223,50],[230,53,223,51,"maybeArray"],[230,63,223,61],[230,64,223,62],[231,2,224,0],[232,0,224,1],[232,3]],"functionMap":{"names":["<global>","uuid4","getRandomByte","replace$argument_1","getFirstException","getEventDescription","addExceptionTypeValue","addExceptionMechanism","_parseInt","parseSemver","addContextToFrame","lines.slice.map$argument_0","checkOrSetAlreadyCaught","isAlreadyCaptured","arrayify"],"mappings":"AAA;ACS;sBCI,wBD;sBCM;ODS;+DES;gEFE;CDE;AIE;CJE;AKM;CLc;AMS;CNU;AOS;CPc;AQU;CRE;ASM;CTY;AUS;SCW,2BD;SCU,2BD;CVC;AYuB;CZc;AaE;CbI;AcU;CdE"}},"type":"js/module"}]}