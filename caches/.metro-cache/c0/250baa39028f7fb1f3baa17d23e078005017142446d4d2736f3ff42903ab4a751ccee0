{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./GoTrueAdminApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"C5wTnt0gil7oSFkESSK1fbFt+2Q=","exportNames":["*"]}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":164,"index":211}}],"key":"heoF0ph3MRKcRke4Rxium863E4Y=","exportNames":["*"]}},{"name":"./lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":212},"end":{"line":3,"column":336,"index":548}}],"key":"NUE3c/K+JVzkrn4COE7BqSQ6w3g=","exportNames":["*"]}},{"name":"./lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":549},"end":{"line":4,"column":113,"index":662}}],"key":"mfxfw+TXFuuoirEoeTmeetM0zAE=","exportNames":["*"]}},{"name":"./lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":663},"end":{"line":5,"column":270,"index":933}}],"key":"xyb/Bi1HyEtpUX+YnhWJXXRPw1E=","exportNames":["*"]}},{"name":"./lib/local-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":934},"end":{"line":6,"column":64,"index":998}}],"key":"VpxVJy8OOX3gpmfaL4+qvZxcfEs=","exportNames":["*"]}},{"name":"./lib/polyfills","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":999},"end":{"line":7,"column":53,"index":1052}}],"key":"lV0rT+lff8tbqQElPGdAzUbCNgE=","exportNames":["*"]}},{"name":"./lib/version","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":1053},"end":{"line":8,"column":40,"index":1093}}],"key":"JwaDbHnT/nA4LCdbzFXkLM5KVrg=","exportNames":["*"]}},{"name":"./lib/locks","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":1094},"end":{"line":9,"column":69,"index":1163}}],"key":"3nAl8WGToTbG9Ylo2D6LWgFHzy4=","exportNames":["*"]}},{"name":"./lib/base64url","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":1164},"end":{"line":10,"column":71,"index":1235}}],"key":"e/SLVEwEOrfSGzIvDteO64GlclY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _GoTrueAdminApi = _interopRequireDefault(require(_dependencyMap[1], \"./GoTrueAdminApi\"));\n  var _constants = require(_dependencyMap[2], \"./lib/constants\");\n  var _errors = require(_dependencyMap[3], \"./lib/errors\");\n  var _fetch = require(_dependencyMap[4], \"./lib/fetch\");\n  var _helpers = require(_dependencyMap[5], \"./lib/helpers\");\n  var _localStorage = require(_dependencyMap[6], \"./lib/local-storage\");\n  var _polyfills = require(_dependencyMap[7], \"./lib/polyfills\");\n  var _version = require(_dependencyMap[8], \"./lib/version\");\n  var _locks = require(_dependencyMap[9], \"./lib/locks\");\n  var _base64url = require(_dependencyMap[10], \"./lib/base64url\");\n  (0, _polyfills.polyfillGlobalThis)(); // Make \"globalThis\" available\n  const DEFAULT_OPTIONS = {\n    url: _constants.GOTRUE_URL,\n    storageKey: _constants.STORAGE_KEY,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    headers: _constants.DEFAULT_HEADERS,\n    flowType: 'implicit',\n    debug: false,\n    hasCustomAuthorizationHeader: false\n  };\n  async function lockNoOp(name, acquireTimeout, fn) {\n    return await fn();\n  }\n  /**\n   * Caches JWKS values for all clients created in the same environment. This is\n   * especially useful for shared-memory execution environments such as Vercel's\n   * Fluid Compute, AWS Lambda or Supabase's Edge Functions. Regardless of how\n   * many clients are created, if they share the same storage key they will use\n   * the same JWKS cache, significantly speeding up getClaims() with asymmetric\n   * JWTs.\n   */\n  const GLOBAL_JWKS = {};\n  class GoTrueClient {\n    /**\n     * Create a new client for use in the browser.\n     */\n    constructor(options) {\n      var _a, _b;\n      /**\n       * @experimental\n       */\n      this.userStorage = null;\n      this.memoryStorage = null;\n      this.stateChangeEmitters = new Map();\n      this.autoRefreshTicker = null;\n      this.visibilityChangedCallback = null;\n      this.refreshingDeferred = null;\n      /**\n       * Keeps track of the async client initialization.\n       * When null or not yet resolved the auth state is `unknown`\n       * Once resolved the the auth state is known and it's save to call any further client methods.\n       * Keep extra care to never reject or throw uncaught errors\n       */\n      this.initializePromise = null;\n      this.detectSessionInUrl = true;\n      this.hasCustomAuthorizationHeader = false;\n      this.suppressGetSessionWarning = false;\n      this.lockAcquired = false;\n      this.pendingInLock = [];\n      /**\n       * Used to broadcast state change events to other tabs listening.\n       */\n      this.broadcastChannel = null;\n      this.logger = console.log;\n      this.instanceID = GoTrueClient.nextInstanceID;\n      GoTrueClient.nextInstanceID += 1;\n      if (this.instanceID > 0 && (0, _helpers.isBrowser)()) {\n        console.warn('Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.');\n      }\n      const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n      this.logDebugMessages = !!settings.debug;\n      if (typeof settings.debug === 'function') {\n        this.logger = settings.debug;\n      }\n      this.persistSession = settings.persistSession;\n      this.storageKey = settings.storageKey;\n      this.autoRefreshToken = settings.autoRefreshToken;\n      this.admin = new _GoTrueAdminApi.default({\n        url: settings.url,\n        headers: settings.headers,\n        fetch: settings.fetch\n      });\n      this.url = settings.url;\n      this.headers = settings.headers;\n      this.fetch = (0, _helpers.resolveFetch)(settings.fetch);\n      this.lock = settings.lock || lockNoOp;\n      this.detectSessionInUrl = settings.detectSessionInUrl;\n      this.flowType = settings.flowType;\n      this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;\n      if (settings.lock) {\n        this.lock = settings.lock;\n      } else if ((0, _helpers.isBrowser)() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {\n        this.lock = _locks.navigatorLock;\n      } else {\n        this.lock = lockNoOp;\n      }\n      if (!this.jwks) {\n        this.jwks = {\n          keys: []\n        };\n        this.jwks_cached_at = Number.MIN_SAFE_INTEGER;\n      }\n      this.mfa = {\n        verify: this._verify.bind(this),\n        enroll: this._enroll.bind(this),\n        unenroll: this._unenroll.bind(this),\n        challenge: this._challenge.bind(this),\n        listFactors: this._listFactors.bind(this),\n        challengeAndVerify: this._challengeAndVerify.bind(this),\n        getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n      };\n      if (this.persistSession) {\n        if (settings.storage) {\n          this.storage = settings.storage;\n        } else {\n          if ((0, _helpers.supportsLocalStorage)()) {\n            this.storage = globalThis.localStorage;\n          } else {\n            this.memoryStorage = {};\n            this.storage = (0, _localStorage.memoryLocalStorageAdapter)(this.memoryStorage);\n          }\n        }\n        if (settings.userStorage) {\n          this.userStorage = settings.userStorage;\n        }\n      } else {\n        this.memoryStorage = {};\n        this.storage = (0, _localStorage.memoryLocalStorageAdapter)(this.memoryStorage);\n      }\n      if ((0, _helpers.isBrowser)() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n        try {\n          this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n        } catch (e) {\n          console.error('Failed to create a new BroadcastChannel, multi-tab state changes will not be available', e);\n        }\n        (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener('message', async event => {\n          this._debug('received broadcast notification from other tab or client', event);\n          await this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n        });\n      }\n      this.initialize();\n    }\n    /**\n     * The JWKS used for verifying asymmetric JWTs\n     */\n    get jwks() {\n      var _a, _b;\n      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.jwks) !== null && _b !== void 0 ? _b : {\n        keys: []\n      };\n    }\n    set jwks(value) {\n      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), {\n        jwks: value\n      });\n    }\n    get jwks_cached_at() {\n      var _a, _b;\n      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.cachedAt) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\n    }\n    set jwks_cached_at(value) {\n      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), {\n        cachedAt: value\n      });\n    }\n    _debug(...args) {\n      if (this.logDebugMessages) {\n        this.logger(`GoTrueClient@${this.instanceID} (${_version.version}) ${new Date().toISOString()}`, ...args);\n      }\n      return this;\n    }\n    /**\n     * Initializes the client session either from the url or from storage.\n     * This method is automatically called when instantiating the client, but should also be called\n     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n     */\n    async initialize() {\n      if (this.initializePromise) {\n        return await this.initializePromise;\n      }\n      this.initializePromise = (async () => {\n        return await this._acquireLock(-1, async () => {\n          return await this._initialize();\n        });\n      })();\n      return await this.initializePromise;\n    }\n    /**\n     * IMPORTANT:\n     * 1. Never throw in this method, as it is called from the constructor\n     * 2. Never return a session from this method as it would be cached over\n     *    the whole lifetime of the client\n     */\n    async _initialize() {\n      var _a;\n      try {\n        const params = (0, _helpers.parseParametersFromURL)(window.location.href);\n        let callbackUrlType = 'none';\n        if (this._isImplicitGrantCallback(params)) {\n          callbackUrlType = 'implicit';\n        } else if (await this._isPKCECallback(params)) {\n          callbackUrlType = 'pkce';\n        }\n        /**\n         * Attempt to get the session from the URL only if these conditions are fulfilled\n         *\n         * Note: If the URL isn't one of the callback url types (implicit or pkce),\n         * then there could be an existing session so we don't want to prematurely remove it\n         */\n        if ((0, _helpers.isBrowser)() && this.detectSessionInUrl && callbackUrlType !== 'none') {\n          const {\n            data,\n            error\n          } = await this._getSessionFromURL(params, callbackUrlType);\n          if (error) {\n            this._debug('#_initialize()', 'error detecting session from URL', error);\n            if ((0, _errors.isAuthImplicitGrantRedirectError)(error)) {\n              const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;\n              if (errorCode === 'identity_already_exists' || errorCode === 'identity_not_found' || errorCode === 'single_identity_not_deletable') {\n                return {\n                  error\n                };\n              }\n            }\n            // failed login attempt via url,\n            // remove old session as in verifyOtp, signUp and signInWith*\n            await this._removeSession();\n            return {\n              error\n            };\n          }\n          const {\n            session,\n            redirectType\n          } = data;\n          this._debug('#_initialize()', 'detected session in URL', session, 'redirect type', redirectType);\n          await this._saveSession(session);\n          setTimeout(async () => {\n            if (redirectType === 'recovery') {\n              await this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n            } else {\n              await this._notifyAllSubscribers('SIGNED_IN', session);\n            }\n          }, 0);\n          return {\n            error: null\n          };\n        }\n        // no login attempt via callback url try to recover session from storage\n        await this._recoverAndRefresh();\n        return {\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            error\n          };\n        }\n        return {\n          error: new _errors.AuthUnknownError('Unexpected error during initialization', error)\n        };\n      } finally {\n        await this._handleVisibilityChange();\n        this._debug('#_initialize()', 'end');\n      }\n    }\n    /**\n     * Creates a new anonymous user.\n     *\n     * @returns A session where the is_anonymous claim in the access token JWT set to true\n     */\n    async signInAnonymously(credentials) {\n      var _a, _b, _c;\n      try {\n        const res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},\n            gotrue_meta_security: {\n              captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken\n            }\n          },\n          xform: _fetch._sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Creates a new user.\n     *\n     * Be aware that if a user account exists in the system you may get back an\n     * error message that attempts to hide this information from the user.\n     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    async signUp(credentials) {\n      var _a, _b, _c;\n      try {\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce') {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            },\n            xform: _fetch._sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : 'sms',\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _fetch._sessionResponse\n          });\n        } else {\n          throw new _errors.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in an existing user with an email and password or phone and password.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or that the\n     * email/phone and password combination is wrong or that the account can only\n     * be accessed via social login.\n     */\n    async signInWithPassword(credentials) {\n      try {\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              email,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _fetch._sessionResponsePassword\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _fetch._sessionResponsePassword\n          });\n        } else {\n          throw new _errors.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _errors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign({\n            user: data.user,\n            session: data.session\n          }, data.weak_password ? {\n            weakPassword: data.weak_password\n          } : null),\n          error\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in an existing user via a third-party provider.\n     * This method supports the PKCE flow.\n     */\n    async signInWithOAuth(credentials) {\n      var _a, _b, _c, _d;\n      return await this._handleProviderSignIn(credentials.provider, {\n        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect\n      });\n    }\n    /**\n     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n     */\n    async exchangeCodeForSession(authCode) {\n      await this.initializePromise;\n      return this._acquireLock(-1, async () => {\n        return this._exchangeCodeForSession(authCode);\n      });\n    }\n    /**\n     * Signs in a user by verifying a message signed by the user's private key.\n     * Only Solana supported at this time, using the Sign in with Solana standard.\n     */\n    async signInWithWeb3(credentials) {\n      const {\n        chain\n      } = credentials;\n      if (chain === 'solana') {\n        return await this.signInWithSolana(credentials);\n      }\n      throw new Error(`@supabase/auth-js: Unsupported chain \"${chain}\"`);\n    }\n    async signInWithSolana(credentials) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n      let message;\n      let signature;\n      if ('message' in credentials) {\n        message = credentials.message;\n        signature = credentials.signature;\n      } else {\n        const {\n          chain,\n          wallet,\n          statement,\n          options\n        } = credentials;\n        let resolvedWallet;\n        if (!(0, _helpers.isBrowser)()) {\n          if (typeof wallet !== 'object' || !(options === null || options === void 0 ? void 0 : options.url)) {\n            throw new Error('@supabase/auth-js: Both wallet and url must be specified in non-browser environments.');\n          }\n          resolvedWallet = wallet;\n        } else if (typeof wallet === 'object') {\n          resolvedWallet = wallet;\n        } else {\n          const windowAny = window;\n          if ('solana' in windowAny && typeof windowAny.solana === 'object' && ('signIn' in windowAny.solana && typeof windowAny.solana.signIn === 'function' || 'signMessage' in windowAny.solana && typeof windowAny.solana.signMessage === 'function')) {\n            resolvedWallet = windowAny.solana;\n          } else {\n            throw new Error(`@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.`);\n          }\n        }\n        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);\n        if ('signIn' in resolvedWallet && resolvedWallet.signIn) {\n          const output = await resolvedWallet.signIn(Object.assign(Object.assign(Object.assign({\n            issuedAt: new Date().toISOString()\n          }, options === null || options === void 0 ? void 0 : options.signInWithSolana), {\n            // non-overridable properties\n            version: '1',\n            domain: url.host,\n            uri: url.href\n          }), statement ? {\n            statement\n          } : null));\n          let outputToProcess;\n          if (Array.isArray(output) && output[0] && typeof output[0] === 'object') {\n            outputToProcess = output[0];\n          } else if (output && typeof output === 'object' && 'signedMessage' in output && 'signature' in output) {\n            outputToProcess = output;\n          } else {\n            throw new Error('@supabase/auth-js: Wallet method signIn() returned unrecognized value');\n          }\n          if ('signedMessage' in outputToProcess && 'signature' in outputToProcess && (typeof outputToProcess.signedMessage === 'string' || outputToProcess.signedMessage instanceof Uint8Array) && outputToProcess.signature instanceof Uint8Array) {\n            message = typeof outputToProcess.signedMessage === 'string' ? outputToProcess.signedMessage : new TextDecoder().decode(outputToProcess.signedMessage);\n            signature = outputToProcess.signature;\n          } else {\n            throw new Error('@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields');\n          }\n        } else {\n          if (!('signMessage' in resolvedWallet) || typeof resolvedWallet.signMessage !== 'function' || !('publicKey' in resolvedWallet) || typeof resolvedWallet !== 'object' || !resolvedWallet.publicKey || !('toBase58' in resolvedWallet.publicKey) || typeof resolvedWallet.publicKey.toBase58 !== 'function') {\n            throw new Error('@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API');\n          }\n          message = [`${url.host} wants you to sign in with your Solana account:`, resolvedWallet.publicKey.toBase58(), ...(statement ? ['', statement, ''] : ['']), 'Version: 1', `URI: ${url.href}`, `Issued At: ${(_c = (_b = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _b === void 0 ? void 0 : _b.issuedAt) !== null && _c !== void 0 ? _c : new Date().toISOString()}`, ...(((_d = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _d === void 0 ? void 0 : _d.notBefore) ? [`Not Before: ${options.signInWithSolana.notBefore}`] : []), ...(((_e = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _e === void 0 ? void 0 : _e.expirationTime) ? [`Expiration Time: ${options.signInWithSolana.expirationTime}`] : []), ...(((_f = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _f === void 0 ? void 0 : _f.chainId) ? [`Chain ID: ${options.signInWithSolana.chainId}`] : []), ...(((_g = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _g === void 0 ? void 0 : _g.nonce) ? [`Nonce: ${options.signInWithSolana.nonce}`] : []), ...(((_h = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _h === void 0 ? void 0 : _h.requestId) ? [`Request ID: ${options.signInWithSolana.requestId}`] : []), ...(((_k = (_j = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _j === void 0 ? void 0 : _j.resources) === null || _k === void 0 ? void 0 : _k.length) ? ['Resources', ...options.signInWithSolana.resources.map(resource => `- ${resource}`)] : [])].join('\\n');\n          const maybeSignature = await resolvedWallet.signMessage(new TextEncoder().encode(message), 'utf8');\n          if (!maybeSignature || !(maybeSignature instanceof Uint8Array)) {\n            throw new Error('@supabase/auth-js: Wallet signMessage() API returned an recognized value');\n          }\n          signature = maybeSignature;\n        }\n      }\n      try {\n        const {\n          data,\n          error\n        } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=web3`, {\n          headers: this.headers,\n          body: Object.assign({\n            chain: 'solana',\n            message,\n            signature: (0, _base64url.bytesToBase64URL)(signature)\n          }, ((_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: (_m = credentials.options) === null || _m === void 0 ? void 0 : _m.captchaToken\n            }\n          } : null),\n          xform: _fetch._sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _errors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign({}, data),\n          error\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    async _exchangeCodeForSession(authCode) {\n      const storageItem = await (0, _helpers.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n      const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : '').split('/');\n      try {\n        const {\n          data,\n          error\n        } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=pkce`, {\n          headers: this.headers,\n          body: {\n            auth_code: authCode,\n            code_verifier: codeVerifier\n          },\n          xform: _fetch._sessionResponse\n        });\n        await (0, _helpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n        if (error) {\n          throw error;\n        }\n        if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null,\n              redirectType: null\n            },\n            error: new _errors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign(Object.assign({}, data), {\n            redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null\n          }),\n          error\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Allows signing in with an OIDC ID token. The authentication provider used\n     * should be enabled and configured.\n     */\n    async signInWithIdToken(credentials) {\n      try {\n        const {\n          options,\n          provider,\n          token,\n          access_token,\n          nonce\n        } = credentials;\n        const res = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n          headers: this.headers,\n          body: {\n            provider,\n            id_token: token,\n            access_token,\n            nonce,\n            gotrue_meta_security: {\n              captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n            }\n          },\n          xform: _fetch._sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _errors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in a user using magiclink or a one-time password (OTP).\n     *\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or, that the account\n     * can only be accessed via social login.\n     *\n     * Do note that you will need to configure a Whatsapp sender on Twilio\n     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n     * channel is not supported on other providers\n     * at this time.\n     * This method supports PKCE when an email is passed.\n     */\n    async signInWithOtp(credentials) {\n      var _a, _b, _c, _d, _e;\n      try {\n        if ('email' in credentials) {\n          const {\n            email,\n            options\n          } = credentials;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce') {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          const {\n            error\n          } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              email,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        if ('phone' in credentials) {\n          const {\n            phone,\n            options\n          } = credentials;\n          const {\n            data,\n            error\n          } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              phone,\n              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : 'sms'\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null,\n              messageId: data === null || data === void 0 ? void 0 : data.message_id\n            },\n            error\n          };\n        }\n        throw new _errors.AuthInvalidCredentialsError('You must provide either an email or phone number.');\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.\n     */\n    async verifyOtp(params) {\n      var _a, _b;\n      try {\n        let redirectTo = undefined;\n        let captchaToken = undefined;\n        if ('options' in params) {\n          redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;\n          captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;\n        }\n        const {\n          data,\n          error\n        } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/verify`, {\n          headers: this.headers,\n          body: Object.assign(Object.assign({}, params), {\n            gotrue_meta_security: {\n              captcha_token: captchaToken\n            }\n          }),\n          redirectTo,\n          xform: _fetch._sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data) {\n          throw new Error('An error occurred on token verification.');\n        }\n        const session = data.session;\n        const user = data.user;\n        if (session === null || session === void 0 ? void 0 : session.access_token) {\n          await this._saveSession(session);\n          await this._notifyAllSubscribers(params.type == 'recovery' ? 'PASSWORD_RECOVERY' : 'SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Attempts a single-sign on using an enterprise Identity Provider. A\n     * successful SSO attempt will redirect the current page to the identity\n     * provider authorization page. The redirect URL is implementation and SSO\n     * protocol specific.\n     *\n     * You can use it by providing a SSO domain. Typically you can extract this\n     * domain by asking users for their email address. If this domain is\n     * registered on the Auth instance the redirect will use that organization's\n     * currently active SSO Identity Provider for the login.\n     *\n     * If you have built an organization-specific login page, you can use the\n     * organization's SSO Identity Provider UUID directly instead.\n     */\n    async signInWithSSO(params) {\n      var _a, _b, _c;\n      try {\n        let codeChallenge = null;\n        let codeChallengeMethod = null;\n        if (this.flowType === 'pkce') {\n          ;\n          [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n        }\n        return await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/sso`, {\n          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n            provider_id: params.providerId\n          } : null), 'domain' in params ? {\n            domain: params.domain\n          } : null), {\n            redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n          }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: params.options.captchaToken\n            }\n          } : null), {\n            skip_http_redirect: true,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod\n          }),\n          headers: this.headers,\n          xform: _fetch._ssoResponse\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Sends a reauthentication OTP to the user's email or phone number.\n     * Requires the user to be signed-in.\n     */\n    async reauthenticate() {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._reauthenticate();\n      });\n    }\n    async _reauthenticate() {\n      try {\n        return await this._useSession(async result => {\n          const {\n            data: {\n              session\n            },\n            error: sessionError\n          } = result;\n          if (sessionError) throw sessionError;\n          if (!session) throw new _errors.AuthSessionMissingError();\n          const {\n            error\n          } = await (0, _fetch._request)(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n            headers: this.headers,\n            jwt: session.access_token\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n     */\n    async resend(credentials) {\n      try {\n        const endpoint = `${this.url}/resend`;\n        if ('email' in credentials) {\n          const {\n            email,\n            type,\n            options\n          } = credentials;\n          const {\n            error\n          } = await (0, _fetch._request)(this.fetch, 'POST', endpoint, {\n            headers: this.headers,\n            body: {\n              email,\n              type,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            type,\n            options\n          } = credentials;\n          const {\n            data,\n            error\n          } = await (0, _fetch._request)(this.fetch, 'POST', endpoint, {\n            headers: this.headers,\n            body: {\n              phone,\n              type,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null,\n              messageId: data === null || data === void 0 ? void 0 : data.message_id\n            },\n            error\n          };\n        }\n        throw new _errors.AuthInvalidCredentialsError('You must provide either an email or phone number and a type');\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Returns the session, refreshing it if necessary.\n     *\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n     *\n     * **IMPORTANT:** This method loads values directly from the storage attached\n     * to the client. If that storage is based on request cookies for example,\n     * the values in it may not be authentic and therefore it's strongly advised\n     * against using this method and its results in such circumstances. A warning\n     * will be emitted if this is detected. Use {@link #getUser()} instead.\n     */\n    async getSession() {\n      await this.initializePromise;\n      const result = await this._acquireLock(-1, async () => {\n        return this._useSession(async result => {\n          return result;\n        });\n      });\n      return result;\n    }\n    /**\n     * Acquires a global lock based on the storage key.\n     */\n    async _acquireLock(acquireTimeout, fn) {\n      this._debug('#_acquireLock', 'begin', acquireTimeout);\n      try {\n        if (this.lockAcquired) {\n          const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();\n          const result = (async () => {\n            await last;\n            return await fn();\n          })();\n          this.pendingInLock.push((async () => {\n            try {\n              await result;\n            } catch (e) {\n              // we just care if it finished\n            }\n          })());\n          return result;\n        }\n        return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {\n          this._debug('#_acquireLock', 'lock acquired for storage key', this.storageKey);\n          try {\n            this.lockAcquired = true;\n            const result = fn();\n            this.pendingInLock.push((async () => {\n              try {\n                await result;\n              } catch (e) {\n                // we just care if it finished\n              }\n            })());\n            await result;\n            // keep draining the queue until there's nothing to wait on\n            while (this.pendingInLock.length) {\n              const waitOn = [...this.pendingInLock];\n              await Promise.all(waitOn);\n              this.pendingInLock.splice(0, waitOn.length);\n            }\n            return await result;\n          } finally {\n            this._debug('#_acquireLock', 'lock released for storage key', this.storageKey);\n            this.lockAcquired = false;\n          }\n        });\n      } finally {\n        this._debug('#_acquireLock', 'end');\n      }\n    }\n    /**\n     * Use instead of {@link #getSession} inside the library. It is\n     * semantically usually what you want, as getting a session involves some\n     * processing afterwards that requires only one client operating on the\n     * session at once across multiple tabs or processes.\n     */\n    async _useSession(fn) {\n      this._debug('#_useSession', 'begin');\n      try {\n        // the use of __loadSession here is the only correct use of the function!\n        const result = await this.__loadSession();\n        return await fn(result);\n      } finally {\n        this._debug('#_useSession', 'end');\n      }\n    }\n    /**\n     * NEVER USE DIRECTLY!\n     *\n     * Always use {@link #_useSession}.\n     */\n    async __loadSession() {\n      this._debug('#__loadSession()', 'begin');\n      if (!this.lockAcquired) {\n        this._debug('#__loadSession()', 'used outside of an acquired lock!', new Error().stack);\n      }\n      try {\n        let currentSession = null;\n        const maybeSession = await (0, _helpers.getItemAsync)(this.storage, this.storageKey);\n        this._debug('#getSession()', 'session from storage', maybeSession);\n        if (maybeSession !== null) {\n          if (this._isValidSession(maybeSession)) {\n            currentSession = maybeSession;\n          } else {\n            this._debug('#getSession()', 'session from storage is not valid');\n            await this._removeSession();\n          }\n        }\n        if (!currentSession) {\n          return {\n            data: {\n              session: null\n            },\n            error: null\n          };\n        }\n        // A session is considered expired before the access token _actually_\n        // expires. When the autoRefreshToken option is off (or when the tab is\n        // in the background), very eager users of getSession() -- like\n        // realtime-js -- might send a valid JWT which will expire by the time it\n        // reaches the server.\n        const hasExpired = currentSession.expires_at ? currentSession.expires_at * 1000 - Date.now() < _constants.EXPIRY_MARGIN_MS : false;\n        this._debug('#__loadSession()', `session has${hasExpired ? '' : ' not'} expired`, 'expires_at', currentSession.expires_at);\n        if (!hasExpired) {\n          if (this.userStorage) {\n            const maybeUser = await (0, _helpers.getItemAsync)(this.userStorage, this.storageKey + '-user');\n            if (maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) {\n              currentSession.user = maybeUser.user;\n            } else {\n              currentSession.user = (0, _helpers.userNotAvailableProxy)();\n            }\n          }\n          if (this.storage.isServer && currentSession.user) {\n            let suppressWarning = this.suppressGetSessionWarning;\n            const proxySession = new Proxy(currentSession, {\n              get: (target, prop, receiver) => {\n                if (!suppressWarning && prop === 'user') {\n                  // only show warning when the user object is being accessed from the server\n                  console.warn('Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.');\n                  suppressWarning = true; // keeps this proxy instance from logging additional warnings\n                  this.suppressGetSessionWarning = true; // keeps this client's future proxy instances from warning\n                }\n                return Reflect.get(target, prop, receiver);\n              }\n            });\n            currentSession = proxySession;\n          }\n          return {\n            data: {\n              session: currentSession\n            },\n            error: null\n          };\n        }\n        const {\n          session,\n          error\n        } = await this._callRefreshToken(currentSession.refresh_token);\n        if (error) {\n          return {\n            data: {\n              session: null\n            },\n            error\n          };\n        }\n        return {\n          data: {\n            session\n          },\n          error: null\n        };\n      } finally {\n        this._debug('#__loadSession()', 'end');\n      }\n    }\n    /**\n     * Gets the current user details if there is an existing session. This method\n     * performs a network request to the Supabase Auth server, so the returned\n     * value is authentic and can be used to base authorization rules on.\n     *\n     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n     */\n    async getUser(jwt) {\n      if (jwt) {\n        return await this._getUser(jwt);\n      }\n      await this.initializePromise;\n      const result = await this._acquireLock(-1, async () => {\n        return await this._getUser();\n      });\n      return result;\n    }\n    async _getUser(jwt) {\n      try {\n        if (jwt) {\n          return await (0, _fetch._request)(this.fetch, 'GET', `${this.url}/user`, {\n            headers: this.headers,\n            jwt: jwt,\n            xform: _fetch._userResponse\n          });\n        }\n        return await this._useSession(async result => {\n          var _a, _b, _c;\n          const {\n            data,\n            error\n          } = result;\n          if (error) {\n            throw error;\n          }\n          // returns an error if there is no access_token or custom authorization header\n          if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {\n            return {\n              data: {\n                user: null\n              },\n              error: new _errors.AuthSessionMissingError()\n            };\n          }\n          return await (0, _fetch._request)(this.fetch, 'GET', `${this.url}/user`, {\n            headers: this.headers,\n            jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : undefined,\n            xform: _fetch._userResponse\n          });\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          if ((0, _errors.isAuthSessionMissingError)(error)) {\n            // JWT contains a `session_id` which does not correspond to an active\n            // session in the database, indicating the user is signed out.\n            await this._removeSession();\n            await (0, _helpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n          }\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Updates user data for a logged in user.\n     */\n    async updateUser(attributes, options = {}) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._updateUser(attributes, options);\n      });\n    }\n    async _updateUser(attributes, options = {}) {\n      try {\n        return await this._useSession(async result => {\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            throw sessionError;\n          }\n          if (!sessionData.session) {\n            throw new _errors.AuthSessionMissingError();\n          }\n          const session = sessionData.session;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce' && attributes.email != null) {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          const {\n            data,\n            error: userError\n          } = await (0, _fetch._request)(this.fetch, 'PUT', `${this.url}/user`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: Object.assign(Object.assign({}, attributes), {\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            }),\n            jwt: session.access_token,\n            xform: _fetch._userResponse\n          });\n          if (userError) throw userError;\n          session.user = data.user;\n          await this._saveSession(session);\n          await this._notifyAllSubscribers('USER_UPDATED', session);\n          return {\n            data: {\n              user: session.user\n            },\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\n     * @param currentSession The current session that minimally contains an access token and refresh token.\n     */\n    async setSession(currentSession) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._setSession(currentSession);\n      });\n    }\n    async _setSession(currentSession) {\n      try {\n        if (!currentSession.access_token || !currentSession.refresh_token) {\n          throw new _errors.AuthSessionMissingError();\n        }\n        const timeNow = Date.now() / 1000;\n        let expiresAt = timeNow;\n        let hasExpired = true;\n        let session = null;\n        const {\n          payload\n        } = (0, _helpers.decodeJWT)(currentSession.access_token);\n        if (payload.exp) {\n          expiresAt = payload.exp;\n          hasExpired = expiresAt <= timeNow;\n        }\n        if (hasExpired) {\n          const {\n            session: refreshedSession,\n            error\n          } = await this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!refreshedSession) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          session = refreshedSession;\n        } else {\n          const {\n            data,\n            error\n          } = await this._getUser(currentSession.access_token);\n          if (error) {\n            throw error;\n          }\n          session = {\n            access_token: currentSession.access_token,\n            refresh_token: currentSession.refresh_token,\n            user: data.user,\n            token_type: 'bearer',\n            expires_in: expiresAt - timeNow,\n            expires_at: expiresAt\n          };\n          await this._saveSession(session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Returns a new session, regardless of expiry status.\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n     * If the current session's refresh token is invalid, an error will be thrown.\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\n     */\n    async refreshSession(currentSession) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._refreshSession(currentSession);\n      });\n    }\n    async _refreshSession(currentSession) {\n      try {\n        return await this._useSession(async result => {\n          var _a;\n          if (!currentSession) {\n            const {\n              data,\n              error\n            } = result;\n            if (error) {\n              throw error;\n            }\n            currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n          }\n          if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n            throw new _errors.AuthSessionMissingError();\n          }\n          const {\n            session,\n            error\n          } = await this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!session) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          return {\n            data: {\n              user: session.user,\n              session\n            },\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Gets the session data from a URL string\n     */\n    async _getSessionFromURL(params, callbackUrlType) {\n      try {\n        if (!(0, _helpers.isBrowser)()) throw new _errors.AuthImplicitGrantRedirectError('No browser detected.');\n        // If there's an error in the URL, it doesn't matter what flow it is, we just return the error.\n        if (params.error || params.error_description || params.error_code) {\n          // The error class returned implies that the redirect is from an implicit grant flow\n          // but it could also be from a redirect error from a PKCE flow.\n          throw new _errors.AuthImplicitGrantRedirectError(params.error_description || 'Error in URL with unspecified error_description', {\n            error: params.error || 'unspecified_error',\n            code: params.error_code || 'unspecified_code'\n          });\n        }\n        // Checks for mismatches between the flowType initialised in the client and the URL parameters\n        switch (callbackUrlType) {\n          case 'implicit':\n            if (this.flowType === 'pkce') {\n              throw new _errors.AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.');\n            }\n            break;\n          case 'pkce':\n            if (this.flowType === 'implicit') {\n              throw new _errors.AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n            }\n            break;\n          default:\n          // there's no mismatch so we continue\n        }\n        // Since this is a redirect for PKCE, we attempt to retrieve the code from the URL for the code exchange\n        if (callbackUrlType === 'pkce') {\n          this._debug('#_initialize()', 'begin', 'is PKCE flow', true);\n          if (!params.code) throw new _errors.AuthPKCEGrantCodeExchangeError('No code detected.');\n          const {\n            data,\n            error\n          } = await this._exchangeCodeForSession(params.code);\n          if (error) throw error;\n          const url = new URL(window.location.href);\n          url.searchParams.delete('code');\n          window.history.replaceState(window.history.state, '', url.toString());\n          return {\n            data: {\n              session: data.session,\n              redirectType: null\n            },\n            error: null\n          };\n        }\n        const {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          refresh_token,\n          expires_in,\n          expires_at,\n          token_type\n        } = params;\n        if (!access_token || !expires_in || !refresh_token || !token_type) {\n          throw new _errors.AuthImplicitGrantRedirectError('No session defined in URL');\n        }\n        const timeNow = Math.round(Date.now() / 1000);\n        const expiresIn = parseInt(expires_in);\n        let expiresAt = timeNow + expiresIn;\n        if (expires_at) {\n          expiresAt = parseInt(expires_at);\n        }\n        const actuallyExpiresIn = expiresAt - timeNow;\n        if (actuallyExpiresIn * 1000 <= _constants.AUTO_REFRESH_TICK_DURATION_MS) {\n          console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);\n        }\n        const issuedAt = expiresAt - expiresIn;\n        if (timeNow - issuedAt >= 120) {\n          console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale', issuedAt, expiresAt, timeNow);\n        } else if (timeNow - issuedAt < 0) {\n          console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew', issuedAt, expiresAt, timeNow);\n        }\n        const {\n          data,\n          error\n        } = await this._getUser(access_token);\n        if (error) throw error;\n        const session = {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          expires_in: expiresIn,\n          expires_at: expiresAt,\n          refresh_token,\n          token_type,\n          user: data.user\n        };\n        // Remove tokens from URL\n        window.location.hash = '';\n        this._debug('#_getSessionFromURL()', 'clearing window.location.hash');\n        return {\n          data: {\n            session,\n            redirectType: params.type\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n     */\n    _isImplicitGrantCallback(params) {\n      return Boolean(params.access_token || params.error_description);\n    }\n    /**\n     * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n     */\n    async _isPKCECallback(params) {\n      const currentStorageContent = await (0, _helpers.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n      return !!(params.code && currentStorageContent);\n    }\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n     *\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n     *\n     * If using `others` scope, no `SIGNED_OUT` event is fired!\n     */\n    async signOut(options = {\n      scope: 'global'\n    }) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._signOut(options);\n      });\n    }\n    async _signOut({\n      scope\n    } = {\n      scope: 'global'\n    }) {\n      return await this._useSession(async result => {\n        var _a;\n        const {\n          data,\n          error: sessionError\n        } = result;\n        if (sessionError) {\n          return {\n            error: sessionError\n          };\n        }\n        const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n        if (accessToken) {\n          const {\n            error\n          } = await this.admin.signOut(accessToken, scope);\n          if (error) {\n            // ignore 404s since user might not exist anymore\n            // ignore 401s since an invalid or expired JWT should sign out the current session\n            if (!((0, _errors.isAuthApiError)(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {\n              return {\n                error\n              };\n            }\n          }\n        }\n        if (scope !== 'others') {\n          await this._removeSession();\n          await (0, _helpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n        }\n        return {\n          error: null\n        };\n      });\n    }\n    /**\n     * Receive a notification every time an auth event happens.\n     * @param callback A callback function to be invoked when an auth event happens.\n     */\n    onAuthStateChange(callback) {\n      const id = (0, _helpers.uuid)();\n      const subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this._debug('#unsubscribe()', 'state change callback with id removed', id);\n          this.stateChangeEmitters.delete(id);\n        }\n      };\n      this._debug('#onAuthStateChange()', 'registered callback with id', id);\n      this.stateChangeEmitters.set(id, subscription);\n      (async () => {\n        await this.initializePromise;\n        await this._acquireLock(-1, async () => {\n          this._emitInitialSession(id);\n        });\n      })();\n      return {\n        data: {\n          subscription\n        }\n      };\n    }\n    async _emitInitialSession(id) {\n      return await this._useSession(async result => {\n        var _a, _b;\n        try {\n          const {\n            data: {\n              session\n            },\n            error\n          } = result;\n          if (error) throw error;\n          await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback('INITIAL_SESSION', session));\n          this._debug('INITIAL_SESSION', 'callback id', id, 'session', session);\n        } catch (err) {\n          await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback('INITIAL_SESSION', null));\n          this._debug('INITIAL_SESSION', 'callback id', id, 'error', err);\n          console.error(err);\n        }\n      });\n    }\n    /**\n     * Sends a password reset request to an email address. This method supports the PKCE flow.\n     *\n     * @param email The email address of the user.\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n     */\n    async resetPasswordForEmail(email, options = {}) {\n      let codeChallenge = null;\n      let codeChallengeMethod = null;\n      if (this.flowType === 'pkce') {\n        ;\n        [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey, true // isPasswordRecovery\n        );\n      }\n      try {\n        return await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/recover`, {\n          body: {\n            email,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n            gotrue_meta_security: {\n              captcha_token: options.captchaToken\n            }\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Gets all the identities linked to a user.\n     */\n    async getUserIdentities() {\n      var _a;\n      try {\n        const {\n          data,\n          error\n        } = await this.getUser();\n        if (error) throw error;\n        return {\n          data: {\n            identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : []\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Links an oauth identity to an existing user.\n     * This method supports the PKCE flow.\n     */\n    async linkIdentity(credentials) {\n      var _a;\n      try {\n        const {\n          data,\n          error\n        } = await this._useSession(async result => {\n          var _a, _b, _c, _d, _e;\n          const {\n            data,\n            error\n          } = result;\n          if (error) throw error;\n          const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {\n            redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n            skipBrowserRedirect: true\n          });\n          return await (0, _fetch._request)(this.fetch, 'GET', url, {\n            headers: this.headers,\n            jwt: (_e = (_d = data.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : undefined\n          });\n        });\n        if (error) throw error;\n        if ((0, _helpers.isBrowser)() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {\n          window.location.assign(data === null || data === void 0 ? void 0 : data.url);\n        }\n        return {\n          data: {\n            provider: credentials.provider,\n            url: data === null || data === void 0 ? void 0 : data.url\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              provider: credentials.provider,\n              url: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n     */\n    async unlinkIdentity(identity) {\n      try {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data,\n            error\n          } = result;\n          if (error) {\n            throw error;\n          }\n          return await (0, _fetch._request)(this.fetch, 'DELETE', `${this.url}/user/identities/${identity.identity_id}`, {\n            headers: this.headers,\n            jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined\n          });\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    async _refreshAccessToken(refreshToken) {\n      const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;\n      this._debug(debugName, 'begin');\n      try {\n        const startedAt = Date.now();\n        // will attempt to refresh the token with exponential backoff\n        return await (0, _helpers.retryable)(async attempt => {\n          if (attempt > 0) {\n            await (0, _helpers.sleep)(200 * Math.pow(2, attempt - 1)); // 200, 400, 800, ...\n          }\n          this._debug(debugName, 'refreshing attempt', attempt);\n          return await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: {\n              refresh_token: refreshToken\n            },\n            headers: this.headers,\n            xform: _fetch._sessionResponse\n          });\n        }, (attempt, error) => {\n          const nextBackOffInterval = 200 * Math.pow(2, attempt);\n          return error && (0, _errors.isAuthRetryableFetchError)(error) &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + nextBackOffInterval - startedAt < _constants.AUTO_REFRESH_TICK_DURATION_MS;\n        });\n      } catch (error) {\n        this._debug(debugName, 'error', error);\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    _isValidSession(maybeSession) {\n      const isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n      return isValidSession;\n    }\n    async _handleProviderSignIn(provider, options) {\n      const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {\n        redirectTo: options.redirectTo,\n        scopes: options.scopes,\n        queryParams: options.queryParams\n      });\n      this._debug('#_handleProviderSignIn()', 'provider', provider, 'options', options, 'url', url);\n      // try to open on the browser\n      if ((0, _helpers.isBrowser)() && !options.skipBrowserRedirect) {\n        window.location.assign(url);\n      }\n      return {\n        data: {\n          provider,\n          url\n        },\n        error: null\n      };\n    }\n    /**\n     * Recovers the session from LocalStorage and refreshes the token\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n    async _recoverAndRefresh() {\n      var _a, _b;\n      const debugName = '#_recoverAndRefresh()';\n      this._debug(debugName, 'begin');\n      try {\n        const currentSession = await (0, _helpers.getItemAsync)(this.storage, this.storageKey);\n        if (currentSession && this.userStorage) {\n          let maybeUser = await (0, _helpers.getItemAsync)(this.userStorage, this.storageKey + '-user');\n          if (!this.storage.isServer && Object.is(this.storage, this.userStorage) && !maybeUser) {\n            // storage and userStorage are the same storage medium, for example\n            // window.localStorage if userStorage does not have the user from\n            // storage stored, store it first thereby migrating the user object\n            // from storage -> userStorage\n            maybeUser = {\n              user: currentSession.user\n            };\n            await (0, _helpers.setItemAsync)(this.userStorage, this.storageKey + '-user', maybeUser);\n          }\n          currentSession.user = (_a = maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) !== null && _a !== void 0 ? _a : (0, _helpers.userNotAvailableProxy)();\n        } else if (currentSession && !currentSession.user) {\n          // user storage is not set, let's check if it was previously enabled so\n          // we bring back the storage as it should be\n          if (!currentSession.user) {\n            // test if userStorage was previously enabled and the storage medium was the same, to move the user back under the same key\n            const separateUser = await (0, _helpers.getItemAsync)(this.storage, this.storageKey + '-user');\n            if (separateUser && (separateUser === null || separateUser === void 0 ? void 0 : separateUser.user)) {\n              currentSession.user = separateUser.user;\n              await (0, _helpers.removeItemAsync)(this.storage, this.storageKey + '-user');\n              await (0, _helpers.setItemAsync)(this.storage, this.storageKey, currentSession);\n            } else {\n              currentSession.user = (0, _helpers.userNotAvailableProxy)();\n            }\n          }\n        }\n        this._debug(debugName, 'session from storage', currentSession);\n        if (!this._isValidSession(currentSession)) {\n          this._debug(debugName, 'session is not valid');\n          if (currentSession !== null) {\n            await this._removeSession();\n          }\n          return;\n        }\n        const expiresWithMargin = ((_b = currentSession.expires_at) !== null && _b !== void 0 ? _b : Infinity) * 1000 - Date.now() < _constants.EXPIRY_MARGIN_MS;\n        this._debug(debugName, `session has${expiresWithMargin ? '' : ' not'} expired with margin of ${_constants.EXPIRY_MARGIN_MS}s`);\n        if (expiresWithMargin) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            const {\n              error\n            } = await this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n              console.error(error);\n              if (!(0, _errors.isAuthRetryableFetchError)(error)) {\n                this._debug(debugName, 'refresh failed with a non-retryable error, removing the session', error);\n                await this._removeSession();\n              }\n            }\n          }\n        } else if (currentSession.user && currentSession.user.__isUserNotAvailableProxy === true) {\n          // If we have a proxy user, try to get the real user data\n          try {\n            const {\n              data,\n              error: userError\n            } = await this._getUser(currentSession.access_token);\n            if (!userError && (data === null || data === void 0 ? void 0 : data.user)) {\n              currentSession.user = data.user;\n              await this._saveSession(currentSession);\n              await this._notifyAllSubscribers('SIGNED_IN', currentSession);\n            } else {\n              this._debug(debugName, 'could not get user data, skipping SIGNED_IN notification');\n            }\n          } catch (getUserError) {\n            console.error('Error getting user data:', getUserError);\n            this._debug(debugName, 'error getting user data, skipping SIGNED_IN notification', getUserError);\n          }\n        } else {\n          // no need to persist currentSession again, as we just loaded it from\n          // local storage; persisting it again may overwrite a value saved by\n          // another client with access to the same local storage\n          await this._notifyAllSubscribers('SIGNED_IN', currentSession);\n        }\n      } catch (err) {\n        this._debug(debugName, 'error', err);\n        console.error(err);\n        return;\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    async _callRefreshToken(refreshToken) {\n      var _a, _b;\n      if (!refreshToken) {\n        throw new _errors.AuthSessionMissingError();\n      }\n      // refreshing is already in progress\n      if (this.refreshingDeferred) {\n        return this.refreshingDeferred.promise;\n      }\n      const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;\n      this._debug(debugName, 'begin');\n      try {\n        this.refreshingDeferred = new _helpers.Deferred();\n        const {\n          data,\n          error\n        } = await this._refreshAccessToken(refreshToken);\n        if (error) throw error;\n        if (!data.session) throw new _errors.AuthSessionMissingError();\n        await this._saveSession(data.session);\n        await this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n        const result = {\n          session: data.session,\n          error: null\n        };\n        this.refreshingDeferred.resolve(result);\n        return result;\n      } catch (error) {\n        this._debug(debugName, 'error', error);\n        if ((0, _errors.isAuthError)(error)) {\n          const result = {\n            session: null,\n            error\n          };\n          if (!(0, _errors.isAuthRetryableFetchError)(error)) {\n            await this._removeSession();\n          }\n          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n          return result;\n        }\n        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n        throw error;\n      } finally {\n        this.refreshingDeferred = null;\n        this._debug(debugName, 'end');\n      }\n    }\n    async _notifyAllSubscribers(event, session, broadcast = true) {\n      const debugName = `#_notifyAllSubscribers(${event})`;\n      this._debug(debugName, 'begin', session, `broadcast = ${broadcast}`);\n      try {\n        if (this.broadcastChannel && broadcast) {\n          this.broadcastChannel.postMessage({\n            event,\n            session\n          });\n        }\n        const errors = [];\n        const promises = Array.from(this.stateChangeEmitters.values()).map(async x => {\n          try {\n            await x.callback(event, session);\n          } catch (e) {\n            errors.push(e);\n          }\n        });\n        await Promise.all(promises);\n        if (errors.length > 0) {\n          for (let i = 0; i < errors.length; i += 1) {\n            console.error(errors[i]);\n          }\n          throw errors[0];\n        }\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n    async _saveSession(session) {\n      this._debug('#_saveSession()', session);\n      // _saveSession is always called whenever a new session has been acquired\n      // so we can safely suppress the warning returned by future getSession calls\n      this.suppressGetSessionWarning = true;\n      // Create a shallow copy to work with, to avoid mutating the original session object if it's used elsewhere\n      const sessionToProcess = Object.assign({}, session);\n      const userIsProxy = sessionToProcess.user && sessionToProcess.user.__isUserNotAvailableProxy === true;\n      if (this.userStorage) {\n        if (!userIsProxy && sessionToProcess.user) {\n          // If it's a real user object, save it to userStorage.\n          await (0, _helpers.setItemAsync)(this.userStorage, this.storageKey + '-user', {\n            user: sessionToProcess.user\n          });\n        } else if (userIsProxy) {\n          // If it's the proxy, it means user was not found in userStorage.\n          // We should ensure no stale user data for this key exists in userStorage if we were to save null,\n          // or simply not save the proxy. For now, we don't save the proxy here.\n          // If there's a need to clear userStorage if user becomes proxy, that logic would go here.\n        }\n        // Prepare the main session data for primary storage: remove the user property before cloning\n        // This is important because the original session.user might be the proxy\n        const mainSessionData = Object.assign({}, sessionToProcess);\n        delete mainSessionData.user; // Remove user (real or proxy) before cloning for main storage\n        const clonedMainSessionData = (0, _helpers.deepClone)(mainSessionData);\n        await (0, _helpers.setItemAsync)(this.storage, this.storageKey, clonedMainSessionData);\n      } else {\n        // No userStorage is configured.\n        // In this case, session.user should ideally not be a proxy.\n        // If it were, structuredClone would fail. This implies an issue elsewhere if user is a proxy here\n        const clonedSession = (0, _helpers.deepClone)(sessionToProcess); // sessionToProcess still has its original user property\n        await (0, _helpers.setItemAsync)(this.storage, this.storageKey, clonedSession);\n      }\n    }\n    async _removeSession() {\n      this._debug('#_removeSession()');\n      await (0, _helpers.removeItemAsync)(this.storage, this.storageKey);\n      await (0, _helpers.removeItemAsync)(this.storage, this.storageKey + '-code-verifier');\n      await (0, _helpers.removeItemAsync)(this.storage, this.storageKey + '-user');\n      if (this.userStorage) {\n        await (0, _helpers.removeItemAsync)(this.userStorage, this.storageKey + '-user');\n      }\n      await this._notifyAllSubscribers('SIGNED_OUT', null);\n    }\n    /**\n     * Removes any registered visibilitychange callback.\n     *\n     * {@see #startAutoRefresh}\n     * {@see #stopAutoRefresh}\n     */\n    _removeVisibilityChangedCallback() {\n      this._debug('#_removeVisibilityChangedCallback()');\n      const callback = this.visibilityChangedCallback;\n      this.visibilityChangedCallback = null;\n      try {\n        if (callback && (0, _helpers.isBrowser)() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n          window.removeEventListener('visibilitychange', callback);\n        }\n      } catch (e) {\n        console.error('removing visibilitychange callback failed', e);\n      }\n    }\n    /**\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\n     * within the library.\n     */\n    async _startAutoRefresh() {\n      await this._stopAutoRefresh();\n      this._debug('#_startAutoRefresh()');\n      const ticker = setInterval(() => this._autoRefreshTokenTick(), _constants.AUTO_REFRESH_TICK_DURATION_MS);\n      this.autoRefreshTicker = ticker;\n      if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n        // ticker is a NodeJS Timeout object that has an `unref` method\n        // https://nodejs.org/api/timers.html#timeoutunref\n        // When auto refresh is used in NodeJS (like for testing) the\n        // `setInterval` is preventing the process from being marked as\n        // finished and tests run endlessly. This can be prevented by calling\n        // `unref()` on the returned object.\n        ticker.unref();\n        // @ts-expect-error TS has no context of Deno\n      } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n        // similar like for NodeJS, but with the Deno API\n        // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n        // @ts-expect-error TS has no context of Deno\n        Deno.unrefTimer(ticker);\n      }\n      // run the tick immediately, but in the next pass of the event loop so that\n      // #_initialize can be allowed to complete without recursively waiting on\n      // itself\n      setTimeout(async () => {\n        await this.initializePromise;\n        await this._autoRefreshTokenTick();\n      }, 0);\n    }\n    /**\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\n     * within the library.\n     */\n    async _stopAutoRefresh() {\n      this._debug('#_stopAutoRefresh()');\n      const ticker = this.autoRefreshTicker;\n      this.autoRefreshTicker = null;\n      if (ticker) {\n        clearInterval(ticker);\n      }\n    }\n    /**\n     * Starts an auto-refresh process in the background. The session is checked\n     * every few seconds. Close to the time of expiration a process is started to\n     * refresh the session. If refreshing fails it will be retried for as long as\n     * necessary.\n     *\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n     * to call this function, it will be called for you.\n     *\n     * On browsers the refresh process works only when the tab/window is in the\n     * foreground to conserve resources as well as prevent race conditions and\n     * flooding auth with requests. If you call this method any managed\n     * visibility change callback will be removed and you must manage visibility\n     * changes on your own.\n     *\n     * On non-browser platforms the refresh process works *continuously* in the\n     * background, which may not be desirable. You should hook into your\n     * platform's foreground indication mechanism and call these methods\n     * appropriately to conserve resources.\n     *\n     * {@see #stopAutoRefresh}\n     */\n    async startAutoRefresh() {\n      this._removeVisibilityChangedCallback();\n      await this._startAutoRefresh();\n    }\n    /**\n     * Stops an active auto refresh process running in the background (if any).\n     *\n     * If you call this method any managed visibility change callback will be\n     * removed and you must manage visibility changes on your own.\n     *\n     * See {@link #startAutoRefresh} for more details.\n     */\n    async stopAutoRefresh() {\n      this._removeVisibilityChangedCallback();\n      await this._stopAutoRefresh();\n    }\n    /**\n     * Runs the auto refresh token tick.\n     */\n    async _autoRefreshTokenTick() {\n      this._debug('#_autoRefreshTokenTick()', 'begin');\n      try {\n        await this._acquireLock(0, async () => {\n          try {\n            const now = Date.now();\n            try {\n              return await this._useSession(async result => {\n                const {\n                  data: {\n                    session\n                  }\n                } = result;\n                if (!session || !session.refresh_token || !session.expires_at) {\n                  this._debug('#_autoRefreshTokenTick()', 'no session');\n                  return;\n                }\n                // session will expire in this many ticks (or has already expired if <= 0)\n                const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / _constants.AUTO_REFRESH_TICK_DURATION_MS);\n                this._debug('#_autoRefreshTokenTick()', `access token expires in ${expiresInTicks} ticks, a tick lasts ${_constants.AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${_constants.AUTO_REFRESH_TICK_THRESHOLD} ticks`);\n                if (expiresInTicks <= _constants.AUTO_REFRESH_TICK_THRESHOLD) {\n                  await this._callRefreshToken(session.refresh_token);\n                }\n              });\n            } catch (e) {\n              console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n            }\n          } finally {\n            this._debug('#_autoRefreshTokenTick()', 'end');\n          }\n        });\n      } catch (e) {\n        if (e.isAcquireTimeout || e instanceof _locks.LockAcquireTimeoutError) {\n          this._debug('auto refresh token tick lock not available');\n        } else {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Registers callbacks on the browser / platform, which in-turn run\n     * algorithms when the browser window/tab are in foreground. On non-browser\n     * platforms it assumes always foreground.\n     */\n    async _handleVisibilityChange() {\n      this._debug('#_handleVisibilityChange()');\n      if (!(0, _helpers.isBrowser)() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        if (this.autoRefreshToken) {\n          // in non-browser environments the refresh token ticker runs always\n          this.startAutoRefresh();\n        }\n        return false;\n      }\n      try {\n        this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);\n        window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n        // now immediately call the visbility changed callback to setup with the\n        // current visbility state\n        await this._onVisibilityChanged(true); // initial call\n      } catch (error) {\n        console.error('_handleVisibilityChange', error);\n      }\n    }\n    /**\n     * Callback registered with `window.addEventListener('visibilitychange')`.\n     */\n    async _onVisibilityChanged(calledFromInitialize) {\n      const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;\n      this._debug(methodName, 'visibilityState', document.visibilityState);\n      if (document.visibilityState === 'visible') {\n        if (this.autoRefreshToken) {\n          // in browser environments the refresh token ticker runs only on focused tabs\n          // which prevents race conditions\n          this._startAutoRefresh();\n        }\n        if (!calledFromInitialize) {\n          // called when the visibility has changed, i.e. the browser\n          // transitioned from hidden -> visible so we need to see if the session\n          // should be recovered immediately... but to do that we need to acquire\n          // the lock first asynchronously\n          await this.initializePromise;\n          await this._acquireLock(-1, async () => {\n            if (document.visibilityState !== 'visible') {\n              this._debug(methodName, 'acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting');\n              // visibility has changed while waiting for the lock, abort\n              return;\n            }\n            // recover the session\n            await this._recoverAndRefresh();\n          });\n        }\n      } else if (document.visibilityState === 'hidden') {\n        if (this.autoRefreshToken) {\n          this._stopAutoRefresh();\n        }\n      }\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n     */\n    async _getUrlForProvider(url, provider, options) {\n      const urlParams = [`provider=${encodeURIComponent(provider)}`];\n      if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n      }\n      if (options === null || options === void 0 ? void 0 : options.scopes) {\n        urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n      }\n      if (this.flowType === 'pkce') {\n        const [codeChallenge, codeChallengeMethod] = await (0, _helpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n        const flowParams = new URLSearchParams({\n          code_challenge: `${encodeURIComponent(codeChallenge)}`,\n          code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`\n        });\n        urlParams.push(flowParams.toString());\n      }\n      if (options === null || options === void 0 ? void 0 : options.queryParams) {\n        const query = new URLSearchParams(options.queryParams);\n        urlParams.push(query.toString());\n      }\n      if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {\n        urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);\n      }\n      return `${url}?${urlParams.join('&')}`;\n    }\n    async _unenroll(params) {\n      try {\n        return await this._useSession(async result => {\n          var _a;\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          return await (0, _fetch._request)(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n            headers: this.headers,\n            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n          });\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    async _enroll(params) {\n      try {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          const body = Object.assign({\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType\n          }, params.factorType === 'phone' ? {\n            phone: params.phone\n          } : {\n            issuer: params.issuer\n          });\n          const {\n            data,\n            error\n          } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/factors`, {\n            body,\n            headers: this.headers,\n            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n          });\n          if (error) {\n            return {\n              data: null,\n              error\n            };\n          }\n          if (params.factorType === 'totp' && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {\n            data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n          }\n          return {\n            data,\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * {@see GoTrueMFAApi#verify}\n     */\n    async _verify(params) {\n      return this._acquireLock(-1, async () => {\n        try {\n          return await this._useSession(async result => {\n            var _a;\n            const {\n              data: sessionData,\n              error: sessionError\n            } = result;\n            if (sessionError) {\n              return {\n                data: null,\n                error: sessionError\n              };\n            }\n            const {\n              data,\n              error\n            } = await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n              body: {\n                code: params.code,\n                challenge_id: params.challengeId\n              },\n              headers: this.headers,\n              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n            });\n            if (error) {\n              return {\n                data: null,\n                error\n              };\n            }\n            await this._saveSession(Object.assign({\n              expires_at: Math.round(Date.now() / 1000) + data.expires_in\n            }, data));\n            await this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n            return {\n              data,\n              error\n            };\n          });\n        } catch (error) {\n          if ((0, _errors.isAuthError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#challenge}\n     */\n    async _challenge(params) {\n      return this._acquireLock(-1, async () => {\n        try {\n          return await this._useSession(async result => {\n            var _a;\n            const {\n              data: sessionData,\n              error: sessionError\n            } = result;\n            if (sessionError) {\n              return {\n                data: null,\n                error: sessionError\n              };\n            }\n            return await (0, _fetch._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n              body: {\n                channel: params.channel\n              },\n              headers: this.headers,\n              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n            });\n          });\n        } catch (error) {\n          if ((0, _errors.isAuthError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#challengeAndVerify}\n     */\n    async _challengeAndVerify(params) {\n      // both _challenge and _verify independently acquire the lock, so no need\n      // to acquire it here\n      const {\n        data: challengeData,\n        error: challengeError\n      } = await this._challenge({\n        factorId: params.factorId\n      });\n      if (challengeError) {\n        return {\n          data: null,\n          error: challengeError\n        };\n      }\n      return await this._verify({\n        factorId: params.factorId,\n        challengeId: challengeData.id,\n        code: params.code\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#listFactors}\n     */\n    async _listFactors() {\n      // use #getUser instead of #_getUser as the former acquires a lock\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = await this.getUser();\n      if (userError) {\n        return {\n          data: null,\n          error: userError\n        };\n      }\n      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n      const totp = factors.filter(factor => factor.factor_type === 'totp' && factor.status === 'verified');\n      const phone = factors.filter(factor => factor.factor_type === 'phone' && factor.status === 'verified');\n      return {\n        data: {\n          all: factors,\n          totp,\n          phone\n        },\n        error: null\n      };\n    }\n    /**\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n     */\n    async _getAuthenticatorAssuranceLevel() {\n      return this._acquireLock(-1, async () => {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data: {\n              session\n            },\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          if (!session) {\n            return {\n              data: {\n                currentLevel: null,\n                nextLevel: null,\n                currentAuthenticationMethods: []\n              },\n              error: null\n            };\n          }\n          const {\n            payload\n          } = (0, _helpers.decodeJWT)(session.access_token);\n          let currentLevel = null;\n          if (payload.aal) {\n            currentLevel = payload.aal;\n          }\n          let nextLevel = currentLevel;\n          const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(factor => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n          if (verifiedFactors.length > 0) {\n            nextLevel = 'aal2';\n          }\n          const currentAuthenticationMethods = payload.amr || [];\n          return {\n            data: {\n              currentLevel,\n              nextLevel,\n              currentAuthenticationMethods\n            },\n            error: null\n          };\n        });\n      });\n    }\n    async fetchJwk(kid, jwks = {\n      keys: []\n    }) {\n      // try fetching from the supplied jwks\n      let jwk = jwks.keys.find(key => key.kid === kid);\n      if (jwk) {\n        return jwk;\n      }\n      const now = Date.now();\n      // try fetching from cache\n      jwk = this.jwks.keys.find(key => key.kid === kid);\n      // jwk exists and jwks isn't stale\n      if (jwk && this.jwks_cached_at + _constants.JWKS_TTL > now) {\n        return jwk;\n      }\n      // jwk isn't cached in memory so we need to fetch it from the well-known endpoint\n      const {\n        data,\n        error\n      } = await (0, _fetch._request)(this.fetch, 'GET', `${this.url}/.well-known/jwks.json`, {\n        headers: this.headers\n      });\n      if (error) {\n        throw error;\n      }\n      if (!data.keys || data.keys.length === 0) {\n        return null;\n      }\n      this.jwks = data;\n      this.jwks_cached_at = now;\n      // Find the signing key\n      jwk = data.keys.find(key => key.kid === kid);\n      if (!jwk) {\n        return null;\n      }\n      return jwk;\n    }\n    /**\n     * Extracts the JWT claims present in the access token by first verifying the\n     * JWT against the server's JSON Web Key Set endpoint\n     * `/.well-known/jwks.json` which is often cached, resulting in significantly\n     * faster responses. Prefer this method over {@link #getUser} which always\n     * sends a request to the Auth server for each JWT.\n     *\n     * If the project is not using an asymmetric JWT signing key (like ECC or\n     * RSA) it always sends a request to the Auth server (similar to {@link\n     * #getUser}) to verify the JWT.\n     *\n     * @param jwt An optional specific JWT you wish to verify, not the one you\n     *            can obtain from {@link #getSession}.\n     * @param options Various additional options that allow you to customize the\n     *                behavior of this method.\n     */\n    async getClaims(jwt, options = {}) {\n      try {\n        let token = jwt;\n        if (!token) {\n          const {\n            data,\n            error\n          } = await this.getSession();\n          if (error || !data.session) {\n            return {\n              data: null,\n              error\n            };\n          }\n          token = data.session.access_token;\n        }\n        const {\n          header,\n          payload,\n          signature,\n          raw: {\n            header: rawHeader,\n            payload: rawPayload\n          }\n        } = (0, _helpers.decodeJWT)(token);\n        if (!(options === null || options === void 0 ? void 0 : options.allowExpired)) {\n          // Reject expired JWTs should only happen if jwt argument was passed\n          (0, _helpers.validateExp)(payload.exp);\n        }\n        const signingKey = !header.alg || header.alg.startsWith('HS') || !header.kid || !('crypto' in globalThis && 'subtle' in globalThis.crypto) ? null : await this.fetchJwk(header.kid, (options === null || options === void 0 ? void 0 : options.keys) ? {\n          keys: options.keys\n        } : options === null || options === void 0 ? void 0 : options.jwks);\n        // If symmetric algorithm or WebCrypto API is unavailable, fallback to getUser()\n        if (!signingKey) {\n          const {\n            error\n          } = await this.getUser(token);\n          if (error) {\n            throw error;\n          }\n          // getUser succeeds so the claims in the JWT can be trusted\n          return {\n            data: {\n              claims: payload,\n              header,\n              signature\n            },\n            error: null\n          };\n        }\n        const algorithm = (0, _helpers.getAlgorithm)(header.alg);\n        // Convert JWK to CryptoKey\n        const publicKey = await crypto.subtle.importKey('jwk', signingKey, algorithm, true, ['verify']);\n        // Verify the signature\n        const isValid = await crypto.subtle.verify(algorithm, publicKey, signature, (0, _base64url.stringToUint8Array)(`${rawHeader}.${rawPayload}`));\n        if (!isValid) {\n          throw new _errors.AuthInvalidJwtError('Invalid JWT signature');\n        }\n        // If verification succeeds, decode and return claims\n        return {\n          data: {\n            claims: payload,\n            header,\n            signature\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _errors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n  }\n  exports.default = GoTrueClient;\n  GoTrueClient.nextInstanceID = 0;\n});","lineCount":2912,"map":[[7,2,1,0],[7,6,1,0,"_GoTrueAdminApi"],[7,21,1,0],[7,24,1,0,"_interopRequireDefault"],[7,46,1,0],[7,47,1,0,"require"],[7,54,1,0],[7,55,1,0,"_dependencyMap"],[7,69,1,0],[8,2,2,0],[8,6,2,0,"_constants"],[8,16,2,0],[8,19,2,0,"require"],[8,26,2,0],[8,27,2,0,"_dependencyMap"],[8,41,2,0],[9,2,3,0],[9,6,3,0,"_errors"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,4,0],[10,6,4,0,"_fetch"],[10,12,4,0],[10,15,4,0,"require"],[10,22,4,0],[10,23,4,0,"_dependencyMap"],[10,37,4,0],[11,2,5,0],[11,6,5,0,"_helpers"],[11,14,5,0],[11,17,5,0,"require"],[11,24,5,0],[11,25,5,0,"_dependencyMap"],[11,39,5,0],[12,2,6,0],[12,6,6,0,"_localStorage"],[12,19,6,0],[12,22,6,0,"require"],[12,29,6,0],[12,30,6,0,"_dependencyMap"],[12,44,6,0],[13,2,7,0],[13,6,7,0,"_polyfills"],[13,16,7,0],[13,19,7,0,"require"],[13,26,7,0],[13,27,7,0,"_dependencyMap"],[13,41,7,0],[14,2,8,0],[14,6,8,0,"_version"],[14,14,8,0],[14,17,8,0,"require"],[14,24,8,0],[14,25,8,0,"_dependencyMap"],[14,39,8,0],[15,2,9,0],[15,6,9,0,"_locks"],[15,12,9,0],[15,15,9,0,"require"],[15,22,9,0],[15,23,9,0,"_dependencyMap"],[15,37,9,0],[16,2,10,0],[16,6,10,0,"_base64url"],[16,16,10,0],[16,19,10,0,"require"],[16,26,10,0],[16,27,10,0,"_dependencyMap"],[16,41,10,0],[17,2,12,0],[17,6,12,0,"polyfillGlobalThis"],[17,35,12,18],[17,37,12,19],[17,38,12,20],[17,39,12,21],[17,40,12,22],[18,2,13,0],[18,8,13,6,"DEFAULT_OPTIONS"],[18,23,13,21],[18,26,13,24],[19,4,14,4,"url"],[19,7,14,7],[19,9,14,9,"GOTRUE_URL"],[19,30,14,19],[20,4,15,4,"storageKey"],[20,14,15,14],[20,16,15,16,"STORAGE_KEY"],[20,38,15,27],[21,4,16,4,"autoRefreshToken"],[21,20,16,20],[21,22,16,22],[21,26,16,26],[22,4,17,4,"persistSession"],[22,18,17,18],[22,20,17,20],[22,24,17,24],[23,4,18,4,"detectSessionInUrl"],[23,22,18,22],[23,24,18,24],[23,28,18,28],[24,4,19,4,"headers"],[24,11,19,11],[24,13,19,13,"DEFAULT_HEADERS"],[24,39,19,28],[25,4,20,4,"flowType"],[25,12,20,12],[25,14,20,14],[25,24,20,24],[26,4,21,4,"debug"],[26,9,21,9],[26,11,21,11],[26,16,21,16],[27,4,22,4,"hasCustomAuthorizationHeader"],[27,32,22,32],[27,34,22,34],[28,2,23,0],[28,3,23,1],[29,2,24,0],[29,17,24,15,"lockNoOp"],[29,25,24,23,"lockNoOp"],[29,26,24,24,"name"],[29,30,24,28],[29,32,24,30,"acquireTimeout"],[29,46,24,44],[29,48,24,46,"fn"],[29,50,24,48],[29,52,24,50],[30,4,25,4],[30,11,25,11],[30,17,25,17,"fn"],[30,19,25,19],[30,20,25,20],[30,21,25,21],[31,2,26,0],[32,2,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,2,35,0],[40,8,35,6,"GLOBAL_JWKS"],[40,19,35,17],[40,22,35,20],[40,23,35,21],[40,24,35,22],[41,2,36,15],[41,8,36,21,"GoTrueClient"],[41,20,36,33],[41,21,36,34],[42,4,37,4],[43,0,38,0],[44,0,39,0],[45,4,40,4,"constructor"],[45,15,40,15,"constructor"],[45,16,40,16,"options"],[45,23,40,23],[45,25,40,25],[46,6,41,8],[46,10,41,12,"_a"],[46,12,41,14],[46,14,41,16,"_b"],[46,16,41,18],[47,6,42,8],[48,0,43,0],[49,0,44,0],[50,6,45,8],[50,10,45,12],[50,11,45,13,"userStorage"],[50,22,45,24],[50,25,45,27],[50,29,45,31],[51,6,46,8],[51,10,46,12],[51,11,46,13,"memoryStorage"],[51,24,46,26],[51,27,46,29],[51,31,46,33],[52,6,47,8],[52,10,47,12],[52,11,47,13,"stateChangeEmitters"],[52,30,47,32],[52,33,47,35],[52,37,47,39,"Map"],[52,40,47,42],[52,41,47,43],[52,42,47,44],[53,6,48,8],[53,10,48,12],[53,11,48,13,"autoRefreshTicker"],[53,28,48,30],[53,31,48,33],[53,35,48,37],[54,6,49,8],[54,10,49,12],[54,11,49,13,"visibilityChangedCallback"],[54,36,49,38],[54,39,49,41],[54,43,49,45],[55,6,50,8],[55,10,50,12],[55,11,50,13,"refreshingDeferred"],[55,29,50,31],[55,32,50,34],[55,36,50,38],[56,6,51,8],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,6,57,8],[62,10,57,12],[62,11,57,13,"initializePromise"],[62,28,57,30],[62,31,57,33],[62,35,57,37],[63,6,58,8],[63,10,58,12],[63,11,58,13,"detectSessionInUrl"],[63,29,58,31],[63,32,58,34],[63,36,58,38],[64,6,59,8],[64,10,59,12],[64,11,59,13,"hasCustomAuthorizationHeader"],[64,39,59,41],[64,42,59,44],[64,47,59,49],[65,6,60,8],[65,10,60,12],[65,11,60,13,"suppressGetSessionWarning"],[65,36,60,38],[65,39,60,41],[65,44,60,46],[66,6,61,8],[66,10,61,12],[66,11,61,13,"lockAcquired"],[66,23,61,25],[66,26,61,28],[66,31,61,33],[67,6,62,8],[67,10,62,12],[67,11,62,13,"pendingInLock"],[67,24,62,26],[67,27,62,29],[67,29,62,31],[68,6,63,8],[69,0,64,0],[70,0,65,0],[71,6,66,8],[71,10,66,12],[71,11,66,13,"broadcastChannel"],[71,27,66,29],[71,30,66,32],[71,34,66,36],[72,6,67,8],[72,10,67,12],[72,11,67,13,"logger"],[72,17,67,19],[72,20,67,22,"console"],[72,27,67,29],[72,28,67,30,"log"],[72,31,67,33],[73,6,68,8],[73,10,68,12],[73,11,68,13,"instanceID"],[73,21,68,23],[73,24,68,26,"GoTrueClient"],[73,36,68,38],[73,37,68,39,"nextInstanceID"],[73,51,68,53],[74,6,69,8,"GoTrueClient"],[74,18,69,20],[74,19,69,21,"nextInstanceID"],[74,33,69,35],[74,37,69,39],[74,38,69,40],[75,6,70,8],[75,10,70,12],[75,14,70,16],[75,15,70,17,"instanceID"],[75,25,70,27],[75,28,70,30],[75,29,70,31],[75,33,70,35],[75,37,70,35,"isBrowser"],[75,55,70,44],[75,57,70,45],[75,58,70,46],[75,60,70,48],[76,8,71,12,"console"],[76,15,71,19],[76,16,71,20,"warn"],[76,20,71,24],[76,21,71,25],[76,227,71,231],[76,228,71,232],[77,6,72,8],[78,6,73,8],[78,12,73,14,"settings"],[78,20,73,22],[78,23,73,25,"Object"],[78,29,73,31],[78,30,73,32,"assign"],[78,36,73,38],[78,37,73,39,"Object"],[78,43,73,45],[78,44,73,46,"assign"],[78,50,73,52],[78,51,73,53],[78,52,73,54],[78,53,73,55],[78,55,73,57,"DEFAULT_OPTIONS"],[78,70,73,72],[78,71,73,73],[78,73,73,75,"options"],[78,80,73,82],[78,81,73,83],[79,6,74,8],[79,10,74,12],[79,11,74,13,"logDebugMessages"],[79,27,74,29],[79,30,74,32],[79,31,74,33],[79,32,74,34,"settings"],[79,40,74,42],[79,41,74,43,"debug"],[79,46,74,48],[80,6,75,8],[80,10,75,12],[80,17,75,19,"settings"],[80,25,75,27],[80,26,75,28,"debug"],[80,31,75,33],[80,36,75,38],[80,46,75,48],[80,48,75,50],[81,8,76,12],[81,12,76,16],[81,13,76,17,"logger"],[81,19,76,23],[81,22,76,26,"settings"],[81,30,76,34],[81,31,76,35,"debug"],[81,36,76,40],[82,6,77,8],[83,6,78,8],[83,10,78,12],[83,11,78,13,"persistSession"],[83,25,78,27],[83,28,78,30,"settings"],[83,36,78,38],[83,37,78,39,"persistSession"],[83,51,78,53],[84,6,79,8],[84,10,79,12],[84,11,79,13,"storageKey"],[84,21,79,23],[84,24,79,26,"settings"],[84,32,79,34],[84,33,79,35,"storageKey"],[84,43,79,45],[85,6,80,8],[85,10,80,12],[85,11,80,13,"autoRefreshToken"],[85,27,80,29],[85,30,80,32,"settings"],[85,38,80,40],[85,39,80,41,"autoRefreshToken"],[85,55,80,57],[86,6,81,8],[86,10,81,12],[86,11,81,13,"admin"],[86,16,81,18],[86,19,81,21],[86,23,81,25,"GoTrueAdminApi"],[86,46,81,39],[86,47,81,40],[87,8,82,12,"url"],[87,11,82,15],[87,13,82,17,"settings"],[87,21,82,25],[87,22,82,26,"url"],[87,25,82,29],[88,8,83,12,"headers"],[88,15,83,19],[88,17,83,21,"settings"],[88,25,83,29],[88,26,83,30,"headers"],[88,33,83,37],[89,8,84,12,"fetch"],[89,13,84,17],[89,15,84,19,"settings"],[89,23,84,27],[89,24,84,28,"fetch"],[90,6,85,8],[90,7,85,9],[90,8,85,10],[91,6,86,8],[91,10,86,12],[91,11,86,13,"url"],[91,14,86,16],[91,17,86,19,"settings"],[91,25,86,27],[91,26,86,28,"url"],[91,29,86,31],[92,6,87,8],[92,10,87,12],[92,11,87,13,"headers"],[92,18,87,20],[92,21,87,23,"settings"],[92,29,87,31],[92,30,87,32,"headers"],[92,37,87,39],[93,6,88,8],[93,10,88,12],[93,11,88,13,"fetch"],[93,16,88,18],[93,19,88,21],[93,23,88,21,"resolveFetch"],[93,44,88,33],[93,46,88,34,"settings"],[93,54,88,42],[93,55,88,43,"fetch"],[93,60,88,48],[93,61,88,49],[94,6,89,8],[94,10,89,12],[94,11,89,13,"lock"],[94,15,89,17],[94,18,89,20,"settings"],[94,26,89,28],[94,27,89,29,"lock"],[94,31,89,33],[94,35,89,37,"lockNoOp"],[94,43,89,45],[95,6,90,8],[95,10,90,12],[95,11,90,13,"detectSessionInUrl"],[95,29,90,31],[95,32,90,34,"settings"],[95,40,90,42],[95,41,90,43,"detectSessionInUrl"],[95,59,90,61],[96,6,91,8],[96,10,91,12],[96,11,91,13,"flowType"],[96,19,91,21],[96,22,91,24,"settings"],[96,30,91,32],[96,31,91,33,"flowType"],[96,39,91,41],[97,6,92,8],[97,10,92,12],[97,11,92,13,"hasCustomAuthorizationHeader"],[97,39,92,41],[97,42,92,44,"settings"],[97,50,92,52],[97,51,92,53,"hasCustomAuthorizationHeader"],[97,79,92,81],[98,6,93,8],[98,10,93,12,"settings"],[98,18,93,20],[98,19,93,21,"lock"],[98,23,93,25],[98,25,93,27],[99,8,94,12],[99,12,94,16],[99,13,94,17,"lock"],[99,17,94,21],[99,20,94,24,"settings"],[99,28,94,32],[99,29,94,33,"lock"],[99,33,94,37],[100,6,95,8],[100,7,95,9],[100,13,96,13],[100,17,96,17],[100,21,96,17,"isBrowser"],[100,39,96,26],[100,41,96,27],[100,42,96,28],[100,47,96,33],[100,48,96,34,"_a"],[100,50,96,36],[100,53,96,39,"globalThis"],[100,63,96,49],[100,68,96,54],[100,72,96,58],[100,76,96,62,"globalThis"],[100,86,96,72],[100,91,96,77],[100,96,96,82],[100,97,96,83],[100,100,96,86],[100,105,96,91],[100,106,96,92],[100,109,96,95,"globalThis"],[100,119,96,105],[100,120,96,106,"navigator"],[100,129,96,115],[100,135,96,121],[100,139,96,125],[100,143,96,129,"_a"],[100,145,96,131],[100,150,96,136],[100,155,96,141],[100,156,96,142],[100,159,96,145],[100,164,96,150],[100,165,96,151],[100,168,96,154,"_a"],[100,170,96,156],[100,171,96,157,"locks"],[100,176,96,162],[100,177,96,163],[100,179,96,165],[101,8,97,12],[101,12,97,16],[101,13,97,17,"lock"],[101,17,97,21],[101,20,97,24,"navigatorLock"],[101,40,97,37],[102,6,98,8],[102,7,98,9],[102,13,99,13],[103,8,100,12],[103,12,100,16],[103,13,100,17,"lock"],[103,17,100,21],[103,20,100,24,"lockNoOp"],[103,28,100,32],[104,6,101,8],[105,6,102,8],[105,10,102,12],[105,11,102,13],[105,15,102,17],[105,16,102,18,"jwks"],[105,20,102,22],[105,22,102,24],[106,8,103,12],[106,12,103,16],[106,13,103,17,"jwks"],[106,17,103,21],[106,20,103,24],[107,10,103,26,"keys"],[107,14,103,30],[107,16,103,32],[108,8,103,35],[108,9,103,36],[109,8,104,12],[109,12,104,16],[109,13,104,17,"jwks_cached_at"],[109,27,104,31],[109,30,104,34,"Number"],[109,36,104,40],[109,37,104,41,"MIN_SAFE_INTEGER"],[109,53,104,57],[110,6,105,8],[111,6,106,8],[111,10,106,12],[111,11,106,13,"mfa"],[111,14,106,16],[111,17,106,19],[112,8,107,12,"verify"],[112,14,107,18],[112,16,107,20],[112,20,107,24],[112,21,107,25,"_verify"],[112,28,107,32],[112,29,107,33,"bind"],[112,33,107,37],[112,34,107,38],[112,38,107,42],[112,39,107,43],[113,8,108,12,"enroll"],[113,14,108,18],[113,16,108,20],[113,20,108,24],[113,21,108,25,"_enroll"],[113,28,108,32],[113,29,108,33,"bind"],[113,33,108,37],[113,34,108,38],[113,38,108,42],[113,39,108,43],[114,8,109,12,"unenroll"],[114,16,109,20],[114,18,109,22],[114,22,109,26],[114,23,109,27,"_unenroll"],[114,32,109,36],[114,33,109,37,"bind"],[114,37,109,41],[114,38,109,42],[114,42,109,46],[114,43,109,47],[115,8,110,12,"challenge"],[115,17,110,21],[115,19,110,23],[115,23,110,27],[115,24,110,28,"_challenge"],[115,34,110,38],[115,35,110,39,"bind"],[115,39,110,43],[115,40,110,44],[115,44,110,48],[115,45,110,49],[116,8,111,12,"listFactors"],[116,19,111,23],[116,21,111,25],[116,25,111,29],[116,26,111,30,"_listFactors"],[116,38,111,42],[116,39,111,43,"bind"],[116,43,111,47],[116,44,111,48],[116,48,111,52],[116,49,111,53],[117,8,112,12,"challengeAndVerify"],[117,26,112,30],[117,28,112,32],[117,32,112,36],[117,33,112,37,"_challengeAndVerify"],[117,52,112,56],[117,53,112,57,"bind"],[117,57,112,61],[117,58,112,62],[117,62,112,66],[117,63,112,67],[118,8,113,12,"getAuthenticatorAssuranceLevel"],[118,38,113,42],[118,40,113,44],[118,44,113,48],[118,45,113,49,"_getAuthenticatorAssuranceLevel"],[118,76,113,80],[118,77,113,81,"bind"],[118,81,113,85],[118,82,113,86],[118,86,113,90],[119,6,114,8],[119,7,114,9],[120,6,115,8],[120,10,115,12],[120,14,115,16],[120,15,115,17,"persistSession"],[120,29,115,31],[120,31,115,33],[121,8,116,12],[121,12,116,16,"settings"],[121,20,116,24],[121,21,116,25,"storage"],[121,28,116,32],[121,30,116,34],[122,10,117,16],[122,14,117,20],[122,15,117,21,"storage"],[122,22,117,28],[122,25,117,31,"settings"],[122,33,117,39],[122,34,117,40,"storage"],[122,41,117,47],[123,8,118,12],[123,9,118,13],[123,15,119,17],[124,10,120,16],[124,14,120,20],[124,18,120,20,"supportsLocalStorage"],[124,47,120,40],[124,49,120,41],[124,50,120,42],[124,52,120,44],[125,12,121,20],[125,16,121,24],[125,17,121,25,"storage"],[125,24,121,32],[125,27,121,35,"globalThis"],[125,37,121,45],[125,38,121,46,"localStorage"],[125,50,121,58],[126,10,122,16],[126,11,122,17],[126,17,123,21],[127,12,124,20],[127,16,124,24],[127,17,124,25,"memoryStorage"],[127,30,124,38],[127,33,124,41],[127,34,124,42],[127,35,124,43],[128,12,125,20],[128,16,125,24],[128,17,125,25,"storage"],[128,24,125,32],[128,27,125,35],[128,31,125,35,"memoryLocalStorageAdapter"],[128,70,125,60],[128,72,125,61],[128,76,125,65],[128,77,125,66,"memoryStorage"],[128,90,125,79],[128,91,125,80],[129,10,126,16],[130,8,127,12],[131,8,128,12],[131,12,128,16,"settings"],[131,20,128,24],[131,21,128,25,"userStorage"],[131,32,128,36],[131,34,128,38],[132,10,129,16],[132,14,129,20],[132,15,129,21,"userStorage"],[132,26,129,32],[132,29,129,35,"settings"],[132,37,129,43],[132,38,129,44,"userStorage"],[132,49,129,55],[133,8,130,12],[134,6,131,8],[134,7,131,9],[134,13,132,13],[135,8,133,12],[135,12,133,16],[135,13,133,17,"memoryStorage"],[135,26,133,30],[135,29,133,33],[135,30,133,34],[135,31,133,35],[136,8,134,12],[136,12,134,16],[136,13,134,17,"storage"],[136,20,134,24],[136,23,134,27],[136,27,134,27,"memoryLocalStorageAdapter"],[136,66,134,52],[136,68,134,53],[136,72,134,57],[136,73,134,58,"memoryStorage"],[136,86,134,71],[136,87,134,72],[137,6,135,8],[138,6,136,8],[138,10,136,12],[138,14,136,12,"isBrowser"],[138,32,136,21],[138,34,136,22],[138,35,136,23],[138,39,136,27,"globalThis"],[138,49,136,37],[138,50,136,38,"BroadcastChannel"],[138,66,136,54],[138,70,136,58],[138,74,136,62],[138,75,136,63,"persistSession"],[138,89,136,77],[138,93,136,81],[138,97,136,85],[138,98,136,86,"storageKey"],[138,108,136,96],[138,110,136,98],[139,8,137,12],[139,12,137,16],[140,10,138,16],[140,14,138,20],[140,15,138,21,"broadcastChannel"],[140,31,138,37],[140,34,138,40],[140,38,138,44,"globalThis"],[140,48,138,54],[140,49,138,55,"BroadcastChannel"],[140,65,138,71],[140,66,138,72],[140,70,138,76],[140,71,138,77,"storageKey"],[140,81,138,87],[140,82,138,88],[141,8,139,12],[141,9,139,13],[141,10,140,12],[141,17,140,19,"e"],[141,18,140,20],[141,20,140,22],[142,10,141,16,"console"],[142,17,141,23],[142,18,141,24,"error"],[142,23,141,29],[142,24,141,30],[142,112,141,118],[142,114,141,120,"e"],[142,115,141,121],[142,116,141,122],[143,8,142,12],[144,8,143,12],[144,9,143,13,"_b"],[144,11,143,15],[144,14,143,18],[144,18,143,22],[144,19,143,23,"broadcastChannel"],[144,35,143,39],[144,41,143,45],[144,45,143,49],[144,49,143,53,"_b"],[144,51,143,55],[144,56,143,60],[144,61,143,65],[144,62,143,66],[144,65,143,69],[144,70,143,74],[144,71,143,75],[144,74,143,78,"_b"],[144,76,143,80],[144,77,143,81,"addEventListener"],[144,93,143,97],[144,94,143,98],[144,103,143,107],[144,105,143,109],[144,111,143,116,"event"],[144,116,143,121],[144,120,143,126],[145,10,144,16],[145,14,144,20],[145,15,144,21,"_debug"],[145,21,144,27],[145,22,144,28],[145,80,144,86],[145,82,144,88,"event"],[145,87,144,93],[145,88,144,94],[146,10,145,16],[146,16,145,22],[146,20,145,26],[146,21,145,27,"_notifyAllSubscribers"],[146,42,145,48],[146,43,145,49,"event"],[146,48,145,54],[146,49,145,55,"data"],[146,53,145,59],[146,54,145,60,"event"],[146,59,145,65],[146,61,145,67,"event"],[146,66,145,72],[146,67,145,73,"data"],[146,71,145,77],[146,72,145,78,"session"],[146,79,145,85],[146,81,145,87],[146,86,145,92],[146,87,145,93],[146,88,145,94],[146,89,145,95],[147,8,146,12],[147,9,146,13],[147,10,146,14],[148,6,147,8],[149,6,148,8],[149,10,148,12],[149,11,148,13,"initialize"],[149,21,148,23],[149,22,148,24],[149,23,148,25],[150,4,149,4],[151,4,150,4],[152,0,151,0],[153,0,152,0],[154,4,153,4],[154,8,153,8,"jwks"],[154,12,153,12,"jwks"],[154,13,153,12],[154,15,153,15],[155,6,154,8],[155,10,154,12,"_a"],[155,12,154,14],[155,14,154,16,"_b"],[155,16,154,18],[156,6,155,8],[156,13,155,15],[156,14,155,16,"_b"],[156,16,155,18],[156,19,155,21],[156,20,155,22,"_a"],[156,22,155,24],[156,25,155,27,"GLOBAL_JWKS"],[156,36,155,38],[156,37,155,39],[156,41,155,43],[156,42,155,44,"storageKey"],[156,52,155,54],[156,53,155,55],[156,59,155,61],[156,63,155,65],[156,67,155,69,"_a"],[156,69,155,71],[156,74,155,76],[156,79,155,81],[156,80,155,82],[156,83,155,85],[156,88,155,90],[156,89,155,91],[156,92,155,94,"_a"],[156,94,155,96],[156,95,155,97,"jwks"],[156,99,155,101],[156,105,155,107],[156,109,155,111],[156,113,155,115,"_b"],[156,115,155,117],[156,120,155,122],[156,125,155,127],[156,126,155,128],[156,129,155,131,"_b"],[156,131,155,133],[156,134,155,136],[157,8,155,138,"keys"],[157,12,155,142],[157,14,155,144],[158,6,155,147],[158,7,155,148],[159,4,156,4],[160,4,157,4],[160,8,157,8,"jwks"],[160,12,157,12,"jwks"],[160,13,157,13,"value"],[160,18,157,18],[160,20,157,20],[161,6,158,8,"GLOBAL_JWKS"],[161,17,158,19],[161,18,158,20],[161,22,158,24],[161,23,158,25,"storageKey"],[161,33,158,35],[161,34,158,36],[161,37,158,39,"Object"],[161,43,158,45],[161,44,158,46,"assign"],[161,50,158,52],[161,51,158,53,"Object"],[161,57,158,59],[161,58,158,60,"assign"],[161,64,158,66],[161,65,158,67],[161,66,158,68],[161,67,158,69],[161,69,158,71,"GLOBAL_JWKS"],[161,80,158,82],[161,81,158,83],[161,85,158,87],[161,86,158,88,"storageKey"],[161,96,158,98],[161,97,158,99],[161,98,158,100],[161,100,158,102],[162,8,158,104,"jwks"],[162,12,158,108],[162,14,158,110,"value"],[163,6,158,116],[163,7,158,117],[163,8,158,118],[164,4,159,4],[165,4,160,4],[165,8,160,8,"jwks_cached_at"],[165,22,160,22,"jwks_cached_at"],[165,23,160,22],[165,25,160,25],[166,6,161,8],[166,10,161,12,"_a"],[166,12,161,14],[166,14,161,16,"_b"],[166,16,161,18],[167,6,162,8],[167,13,162,15],[167,14,162,16,"_b"],[167,16,162,18],[167,19,162,21],[167,20,162,22,"_a"],[167,22,162,24],[167,25,162,27,"GLOBAL_JWKS"],[167,36,162,38],[167,37,162,39],[167,41,162,43],[167,42,162,44,"storageKey"],[167,52,162,54],[167,53,162,55],[167,59,162,61],[167,63,162,65],[167,67,162,69,"_a"],[167,69,162,71],[167,74,162,76],[167,79,162,81],[167,80,162,82],[167,83,162,85],[167,88,162,90],[167,89,162,91],[167,92,162,94,"_a"],[167,94,162,96],[167,95,162,97,"cachedAt"],[167,103,162,105],[167,109,162,111],[167,113,162,115],[167,117,162,119,"_b"],[167,119,162,121],[167,124,162,126],[167,129,162,131],[167,130,162,132],[167,133,162,135,"_b"],[167,135,162,137],[167,138,162,140,"Number"],[167,144,162,146],[167,145,162,147,"MIN_SAFE_INTEGER"],[167,161,162,163],[168,4,163,4],[169,4,164,4],[169,8,164,8,"jwks_cached_at"],[169,22,164,22,"jwks_cached_at"],[169,23,164,23,"value"],[169,28,164,28],[169,30,164,30],[170,6,165,8,"GLOBAL_JWKS"],[170,17,165,19],[170,18,165,20],[170,22,165,24],[170,23,165,25,"storageKey"],[170,33,165,35],[170,34,165,36],[170,37,165,39,"Object"],[170,43,165,45],[170,44,165,46,"assign"],[170,50,165,52],[170,51,165,53,"Object"],[170,57,165,59],[170,58,165,60,"assign"],[170,64,165,66],[170,65,165,67],[170,66,165,68],[170,67,165,69],[170,69,165,71,"GLOBAL_JWKS"],[170,80,165,82],[170,81,165,83],[170,85,165,87],[170,86,165,88,"storageKey"],[170,96,165,98],[170,97,165,99],[170,98,165,100],[170,100,165,102],[171,8,165,104,"cachedAt"],[171,16,165,112],[171,18,165,114,"value"],[172,6,165,120],[172,7,165,121],[172,8,165,122],[173,4,166,4],[174,4,167,4,"_debug"],[174,10,167,10,"_debug"],[174,11,167,11],[174,14,167,14,"args"],[174,18,167,18],[174,20,167,20],[175,6,168,8],[175,10,168,12],[175,14,168,16],[175,15,168,17,"logDebugMessages"],[175,31,168,33],[175,33,168,35],[176,8,169,12],[176,12,169,16],[176,13,169,17,"logger"],[176,19,169,23],[176,20,169,24],[176,36,169,40],[176,40,169,44],[176,41,169,45,"instanceID"],[176,51,169,55],[176,56,169,60,"version"],[176,72,169,67],[176,77,169,72],[176,81,169,76,"Date"],[176,85,169,80],[176,86,169,81],[176,87,169,82],[176,88,169,83,"toISOString"],[176,99,169,94],[176,100,169,95],[176,101,169,96],[176,103,169,98],[176,105,169,100],[176,108,169,103,"args"],[176,112,169,107],[176,113,169,108],[177,6,170,8],[178,6,171,8],[178,13,171,15],[178,17,171,19],[179,4,172,4],[180,4,173,4],[181,0,174,0],[182,0,175,0],[183,0,176,0],[184,0,177,0],[185,4,178,4],[185,10,178,10,"initialize"],[185,20,178,20,"initialize"],[185,21,178,20],[185,23,178,23],[186,6,179,8],[186,10,179,12],[186,14,179,16],[186,15,179,17,"initializePromise"],[186,32,179,34],[186,34,179,36],[187,8,180,12],[187,15,180,19],[187,21,180,25],[187,25,180,29],[187,26,180,30,"initializePromise"],[187,43,180,47],[188,6,181,8],[189,6,182,8],[189,10,182,12],[189,11,182,13,"initializePromise"],[189,28,182,30],[189,31,182,33],[189,32,182,34],[189,44,182,46],[190,8,183,12],[190,15,183,19],[190,21,183,25],[190,25,183,29],[190,26,183,30,"_acquireLock"],[190,38,183,42],[190,39,183,43],[190,40,183,44],[190,41,183,45],[190,43,183,47],[190,55,183,59],[191,10,184,16],[191,17,184,23],[191,23,184,29],[191,27,184,33],[191,28,184,34,"_initialize"],[191,39,184,45],[191,40,184,46],[191,41,184,47],[192,8,185,12],[192,9,185,13],[192,10,185,14],[193,6,186,8],[193,7,186,9],[193,9,186,11],[193,10,186,12],[194,6,187,8],[194,13,187,15],[194,19,187,21],[194,23,187,25],[194,24,187,26,"initializePromise"],[194,41,187,43],[195,4,188,4],[196,4,189,4],[197,0,190,0],[198,0,191,0],[199,0,192,0],[200,0,193,0],[201,0,194,0],[202,4,195,4],[202,10,195,10,"_initialize"],[202,21,195,21,"_initialize"],[202,22,195,21],[202,24,195,24],[203,6,196,8],[203,10,196,12,"_a"],[203,12,196,14],[204,6,197,8],[204,10,197,12],[205,8,198,12],[205,14,198,18,"params"],[205,20,198,24],[205,23,198,27],[205,27,198,27,"parseParametersFromURL"],[205,58,198,49],[205,60,198,50,"window"],[205,66,198,56],[205,67,198,57,"location"],[205,75,198,65],[205,76,198,66,"href"],[205,80,198,70],[205,81,198,71],[206,8,199,12],[206,12,199,16,"callbackUrlType"],[206,27,199,31],[206,30,199,34],[206,36,199,40],[207,8,200,12],[207,12,200,16],[207,16,200,20],[207,17,200,21,"_isImplicitGrantCallback"],[207,41,200,45],[207,42,200,46,"params"],[207,48,200,52],[207,49,200,53],[207,51,200,55],[208,10,201,16,"callbackUrlType"],[208,25,201,31],[208,28,201,34],[208,38,201,44],[209,8,202,12],[209,9,202,13],[209,15,203,17],[209,19,203,21],[209,25,203,27],[209,29,203,31],[209,30,203,32,"_isPKCECallback"],[209,45,203,47],[209,46,203,48,"params"],[209,52,203,54],[209,53,203,55],[209,55,203,57],[210,10,204,16,"callbackUrlType"],[210,25,204,31],[210,28,204,34],[210,34,204,40],[211,8,205,12],[212,8,206,12],[213,0,207,0],[214,0,208,0],[215,0,209,0],[216,0,210,0],[217,0,211,0],[218,8,212,12],[218,12,212,16],[218,16,212,16,"isBrowser"],[218,34,212,25],[218,36,212,26],[218,37,212,27],[218,41,212,31],[218,45,212,35],[218,46,212,36,"detectSessionInUrl"],[218,64,212,54],[218,68,212,58,"callbackUrlType"],[218,83,212,73],[218,88,212,78],[218,94,212,84],[218,96,212,86],[219,10,213,16],[219,16,213,22],[220,12,213,24,"data"],[220,16,213,28],[221,12,213,30,"error"],[222,10,213,36],[222,11,213,37],[222,14,213,40],[222,20,213,46],[222,24,213,50],[222,25,213,51,"_getSessionFromURL"],[222,43,213,69],[222,44,213,70,"params"],[222,50,213,76],[222,52,213,78,"callbackUrlType"],[222,67,213,93],[222,68,213,94],[223,10,214,16],[223,14,214,20,"error"],[223,19,214,25],[223,21,214,27],[224,12,215,20],[224,16,215,24],[224,17,215,25,"_debug"],[224,23,215,31],[224,24,215,32],[224,40,215,48],[224,42,215,50],[224,76,215,84],[224,78,215,86,"error"],[224,83,215,91],[224,84,215,92],[225,12,216,20],[225,16,216,24],[225,20,216,24,"isAuthImplicitGrantRedirectError"],[225,60,216,56],[225,62,216,57,"error"],[225,67,216,62],[225,68,216,63],[225,70,216,65],[226,14,217,24],[226,20,217,30,"errorCode"],[226,29,217,39],[226,32,217,42],[226,33,217,43,"_a"],[226,35,217,45],[226,38,217,48,"error"],[226,43,217,53],[226,44,217,54,"details"],[226,51,217,61],[226,57,217,67],[226,61,217,71],[226,65,217,75,"_a"],[226,67,217,77],[226,72,217,82],[226,77,217,87],[226,78,217,88],[226,81,217,91],[226,86,217,96],[226,87,217,97],[226,90,217,100,"_a"],[226,92,217,102],[226,93,217,103,"code"],[226,97,217,107],[227,14,218,24],[227,18,218,28,"errorCode"],[227,27,218,37],[227,32,218,42],[227,57,218,67],[227,61,219,28,"errorCode"],[227,70,219,37],[227,75,219,42],[227,95,219,62],[227,99,220,28,"errorCode"],[227,108,220,37],[227,113,220,42],[227,144,220,73],[227,146,220,75],[228,16,221,28],[228,23,221,35],[229,18,221,37,"error"],[230,16,221,43],[230,17,221,44],[231,14,222,24],[232,12,223,20],[233,12,224,20],[234,12,225,20],[235,12,226,20],[235,18,226,26],[235,22,226,30],[235,23,226,31,"_removeSession"],[235,37,226,45],[235,38,226,46],[235,39,226,47],[236,12,227,20],[236,19,227,27],[237,14,227,29,"error"],[238,12,227,35],[238,13,227,36],[239,10,228,16],[240,10,229,16],[240,16,229,22],[241,12,229,24,"session"],[241,19,229,31],[242,12,229,33,"redirectType"],[243,10,229,46],[243,11,229,47],[243,14,229,50,"data"],[243,18,229,54],[244,10,230,16],[244,14,230,20],[244,15,230,21,"_debug"],[244,21,230,27],[244,22,230,28],[244,38,230,44],[244,40,230,46],[244,65,230,71],[244,67,230,73,"session"],[244,74,230,80],[244,76,230,82],[244,91,230,97],[244,93,230,99,"redirectType"],[244,105,230,111],[244,106,230,112],[245,10,231,16],[245,16,231,22],[245,20,231,26],[245,21,231,27,"_saveSession"],[245,33,231,39],[245,34,231,40,"session"],[245,41,231,47],[245,42,231,48],[246,10,232,16,"setTimeout"],[246,20,232,26],[246,21,232,27],[246,33,232,39],[247,12,233,20],[247,16,233,24,"redirectType"],[247,28,233,36],[247,33,233,41],[247,43,233,51],[247,45,233,53],[248,14,234,24],[248,20,234,30],[248,24,234,34],[248,25,234,35,"_notifyAllSubscribers"],[248,46,234,56],[248,47,234,57],[248,66,234,76],[248,68,234,78,"session"],[248,75,234,85],[248,76,234,86],[249,12,235,20],[249,13,235,21],[249,19,236,25],[250,14,237,24],[250,20,237,30],[250,24,237,34],[250,25,237,35,"_notifyAllSubscribers"],[250,46,237,56],[250,47,237,57],[250,58,237,68],[250,60,237,70,"session"],[250,67,237,77],[250,68,237,78],[251,12,238,20],[252,10,239,16],[252,11,239,17],[252,13,239,19],[252,14,239,20],[252,15,239,21],[253,10,240,16],[253,17,240,23],[254,12,240,25,"error"],[254,17,240,30],[254,19,240,32],[255,10,240,37],[255,11,240,38],[256,8,241,12],[257,8,242,12],[258,8,243,12],[258,14,243,18],[258,18,243,22],[258,19,243,23,"_recoverAndRefresh"],[258,37,243,41],[258,38,243,42],[258,39,243,43],[259,8,244,12],[259,15,244,19],[260,10,244,21,"error"],[260,15,244,26],[260,17,244,28],[261,8,244,33],[261,9,244,34],[262,6,245,8],[262,7,245,9],[262,8,246,8],[262,15,246,15,"error"],[262,20,246,20],[262,22,246,22],[263,8,247,12],[263,12,247,16],[263,16,247,16,"isAuthError"],[263,35,247,27],[263,37,247,28,"error"],[263,42,247,33],[263,43,247,34],[263,45,247,36],[264,10,248,16],[264,17,248,23],[265,12,248,25,"error"],[266,10,248,31],[266,11,248,32],[267,8,249,12],[268,8,250,12],[268,15,250,19],[269,10,251,16,"error"],[269,15,251,21],[269,17,251,23],[269,21,251,27,"AuthUnknownError"],[269,45,251,43],[269,46,251,44],[269,86,251,84],[269,88,251,86,"error"],[269,93,251,91],[270,8,252,12],[270,9,252,13],[271,6,253,8],[271,7,253,9],[271,16,254,16],[272,8,255,12],[272,14,255,18],[272,18,255,22],[272,19,255,23,"_handleVisibilityChange"],[272,42,255,46],[272,43,255,47],[272,44,255,48],[273,8,256,12],[273,12,256,16],[273,13,256,17,"_debug"],[273,19,256,23],[273,20,256,24],[273,36,256,40],[273,38,256,42],[273,43,256,47],[273,44,256,48],[274,6,257,8],[275,4,258,4],[276,4,259,4],[277,0,260,0],[278,0,261,0],[279,0,262,0],[280,0,263,0],[281,4,264,4],[281,10,264,10,"signInAnonymously"],[281,27,264,27,"signInAnonymously"],[281,28,264,28,"credentials"],[281,39,264,39],[281,41,264,41],[282,6,265,8],[282,10,265,12,"_a"],[282,12,265,14],[282,14,265,16,"_b"],[282,16,265,18],[282,18,265,20,"_c"],[282,20,265,22],[283,6,266,8],[283,10,266,12],[284,8,267,12],[284,14,267,18,"res"],[284,17,267,21],[284,20,267,24],[284,26,267,30],[284,30,267,30,"_request"],[284,45,267,38],[284,47,267,39],[284,51,267,43],[284,52,267,44,"fetch"],[284,57,267,49],[284,59,267,51],[284,65,267,57],[284,67,267,59],[284,70,267,62],[284,74,267,66],[284,75,267,67,"url"],[284,78,267,70],[284,87,267,79],[284,89,267,81],[285,10,268,16,"headers"],[285,17,268,23],[285,19,268,25],[285,23,268,29],[285,24,268,30,"headers"],[285,31,268,37],[286,10,269,16,"body"],[286,14,269,20],[286,16,269,22],[287,12,270,20,"data"],[287,16,270,24],[287,18,270,26],[287,19,270,27,"_b"],[287,21,270,29],[287,24,270,32],[287,25,270,33,"_a"],[287,27,270,35],[287,30,270,38,"credentials"],[287,41,270,49],[287,46,270,54],[287,50,270,58],[287,54,270,62,"credentials"],[287,65,270,73],[287,70,270,78],[287,75,270,83],[287,76,270,84],[287,79,270,87],[287,84,270,92],[287,85,270,93],[287,88,270,96,"credentials"],[287,99,270,107],[287,100,270,108,"options"],[287,107,270,115],[287,113,270,121],[287,117,270,125],[287,121,270,129,"_a"],[287,123,270,131],[287,128,270,136],[287,133,270,141],[287,134,270,142],[287,137,270,145],[287,142,270,150],[287,143,270,151],[287,146,270,154,"_a"],[287,148,270,156],[287,149,270,157,"data"],[287,153,270,161],[287,159,270,167],[287,163,270,171],[287,167,270,175,"_b"],[287,169,270,177],[287,174,270,182],[287,179,270,187],[287,180,270,188],[287,183,270,191,"_b"],[287,185,270,193],[287,188,270,196],[287,189,270,197],[287,190,270,198],[288,12,271,20,"gotrue_meta_security"],[288,32,271,40],[288,34,271,42],[289,14,271,44,"captcha_token"],[289,27,271,57],[289,29,271,59],[289,30,271,60,"_c"],[289,32,271,62],[289,35,271,65,"credentials"],[289,46,271,76],[289,51,271,81],[289,55,271,85],[289,59,271,89,"credentials"],[289,70,271,100],[289,75,271,105],[289,80,271,110],[289,81,271,111],[289,84,271,114],[289,89,271,119],[289,90,271,120],[289,93,271,123,"credentials"],[289,104,271,134],[289,105,271,135,"options"],[289,112,271,142],[289,118,271,148],[289,122,271,152],[289,126,271,156,"_c"],[289,128,271,158],[289,133,271,163],[289,138,271,168],[289,139,271,169],[289,142,271,172],[289,147,271,177],[289,148,271,178],[289,151,271,181,"_c"],[289,153,271,183],[289,154,271,184,"captchaToken"],[290,12,271,197],[291,10,272,16],[291,11,272,17],[292,10,273,16,"xform"],[292,15,273,21],[292,17,273,23,"_sessionResponse"],[293,8,274,12],[293,9,274,13],[293,10,274,14],[294,8,275,12],[294,14,275,18],[295,10,275,20,"data"],[295,14,275,24],[296,10,275,26,"error"],[297,8,275,32],[297,9,275,33],[297,12,275,36,"res"],[297,15,275,39],[298,8,276,12],[298,12,276,16,"error"],[298,17,276,21],[298,21,276,25],[298,22,276,26,"data"],[298,26,276,30],[298,28,276,32],[299,10,277,16],[299,17,277,23],[300,12,277,25,"data"],[300,16,277,29],[300,18,277,31],[301,14,277,33,"user"],[301,18,277,37],[301,20,277,39],[301,24,277,43],[302,14,277,45,"session"],[302,21,277,52],[302,23,277,54],[303,12,277,59],[303,13,277,60],[304,12,277,62,"error"],[304,17,277,67],[304,19,277,69,"error"],[305,10,277,75],[305,11,277,76],[306,8,278,12],[307,8,279,12],[307,14,279,18,"session"],[307,21,279,25],[307,24,279,28,"data"],[307,28,279,32],[307,29,279,33,"session"],[307,36,279,40],[308,8,280,12],[308,14,280,18,"user"],[308,18,280,22],[308,21,280,25,"data"],[308,25,280,29],[308,26,280,30,"user"],[308,30,280,34],[309,8,281,12],[309,12,281,16,"data"],[309,16,281,20],[309,17,281,21,"session"],[309,24,281,28],[309,26,281,30],[310,10,282,16],[310,16,282,22],[310,20,282,26],[310,21,282,27,"_saveSession"],[310,33,282,39],[310,34,282,40,"data"],[310,38,282,44],[310,39,282,45,"session"],[310,46,282,52],[310,47,282,53],[311,10,283,16],[311,16,283,22],[311,20,283,26],[311,21,283,27,"_notifyAllSubscribers"],[311,42,283,48],[311,43,283,49],[311,54,283,60],[311,56,283,62,"session"],[311,63,283,69],[311,64,283,70],[312,8,284,12],[313,8,285,12],[313,15,285,19],[314,10,285,21,"data"],[314,14,285,25],[314,16,285,27],[315,12,285,29,"user"],[315,16,285,33],[316,12,285,35,"session"],[317,10,285,43],[317,11,285,44],[318,10,285,46,"error"],[318,15,285,51],[318,17,285,53],[319,8,285,58],[319,9,285,59],[320,6,286,8],[320,7,286,9],[320,8,287,8],[320,15,287,15,"error"],[320,20,287,20],[320,22,287,22],[321,8,288,12],[321,12,288,16],[321,16,288,16,"isAuthError"],[321,35,288,27],[321,37,288,28,"error"],[321,42,288,33],[321,43,288,34],[321,45,288,36],[322,10,289,16],[322,17,289,23],[323,12,289,25,"data"],[323,16,289,29],[323,18,289,31],[324,14,289,33,"user"],[324,18,289,37],[324,20,289,39],[324,24,289,43],[325,14,289,45,"session"],[325,21,289,52],[325,23,289,54],[326,12,289,59],[326,13,289,60],[327,12,289,62,"error"],[328,10,289,68],[328,11,289,69],[329,8,290,12],[330,8,291,12],[330,14,291,18,"error"],[330,19,291,23],[331,6,292,8],[332,4,293,4],[333,4,294,4],[334,0,295,0],[335,0,296,0],[336,0,297,0],[337,0,298,0],[338,0,299,0],[339,0,300,0],[340,0,301,0],[341,0,302,0],[342,0,303,0],[343,4,304,4],[343,10,304,10,"signUp"],[343,16,304,16,"signUp"],[343,17,304,17,"credentials"],[343,28,304,28],[343,30,304,30],[344,6,305,8],[344,10,305,12,"_a"],[344,12,305,14],[344,14,305,16,"_b"],[344,16,305,18],[344,18,305,20,"_c"],[344,20,305,22],[345,6,306,8],[345,10,306,12],[346,8,307,12],[346,12,307,16,"res"],[346,15,307,19],[347,8,308,12],[347,12,308,16],[347,19,308,23],[347,23,308,27,"credentials"],[347,34,308,38],[347,36,308,40],[348,10,309,16],[348,16,309,22],[349,12,309,24,"email"],[349,17,309,29],[350,12,309,31,"password"],[350,20,309,39],[351,12,309,41,"options"],[352,10,309,49],[352,11,309,50],[352,14,309,53,"credentials"],[352,25,309,64],[353,10,310,16],[353,14,310,20,"codeChallenge"],[353,27,310,33],[353,30,310,36],[353,34,310,40],[354,10,311,16],[354,14,311,20,"codeChallengeMethod"],[354,33,311,39],[354,36,311,42],[354,40,311,46],[355,10,312,16],[355,14,312,20],[355,18,312,24],[355,19,312,25,"flowType"],[355,27,312,33],[355,32,312,38],[355,38,312,44],[355,40,312,46],[356,12,313,20],[357,12,314,20],[357,13,314,21,"codeChallenge"],[357,26,314,34],[357,28,314,36,"codeChallengeMethod"],[357,47,314,55],[357,48,314,56],[357,51,314,59],[357,57,314,65],[357,61,314,65,"getCodeChallengeAndMethod"],[357,95,314,90],[357,97,314,91],[357,101,314,95],[357,102,314,96,"storage"],[357,109,314,103],[357,111,314,105],[357,115,314,109],[357,116,314,110,"storageKey"],[357,126,314,120],[357,127,314,121],[358,10,315,16],[359,10,316,16,"res"],[359,13,316,19],[359,16,316,22],[359,22,316,28],[359,26,316,28,"_request"],[359,41,316,36],[359,43,316,37],[359,47,316,41],[359,48,316,42,"fetch"],[359,53,316,47],[359,55,316,49],[359,61,316,55],[359,63,316,57],[359,66,316,60],[359,70,316,64],[359,71,316,65,"url"],[359,74,316,68],[359,83,316,77],[359,85,316,79],[360,12,317,20,"headers"],[360,19,317,27],[360,21,317,29],[360,25,317,33],[360,26,317,34,"headers"],[360,33,317,41],[361,12,318,20,"redirectTo"],[361,22,318,30],[361,24,318,32,"options"],[361,31,318,39],[361,36,318,44],[361,40,318,48],[361,44,318,52,"options"],[361,51,318,59],[361,56,318,64],[361,61,318,69],[361,62,318,70],[361,65,318,73],[361,70,318,78],[361,71,318,79],[361,74,318,82,"options"],[361,81,318,89],[361,82,318,90,"emailRedirectTo"],[361,97,318,105],[362,12,319,20,"body"],[362,16,319,24],[362,18,319,26],[363,14,320,24,"email"],[363,19,320,29],[364,14,321,24,"password"],[364,22,321,32],[365,14,322,24,"data"],[365,18,322,28],[365,20,322,30],[365,21,322,31,"_a"],[365,23,322,33],[365,26,322,36,"options"],[365,33,322,43],[365,38,322,48],[365,42,322,52],[365,46,322,56,"options"],[365,53,322,63],[365,58,322,68],[365,63,322,73],[365,64,322,74],[365,67,322,77],[365,72,322,82],[365,73,322,83],[365,76,322,86,"options"],[365,83,322,93],[365,84,322,94,"data"],[365,88,322,98],[365,94,322,104],[365,98,322,108],[365,102,322,112,"_a"],[365,104,322,114],[365,109,322,119],[365,114,322,124],[365,115,322,125],[365,118,322,128,"_a"],[365,120,322,130],[365,123,322,133],[365,124,322,134],[365,125,322,135],[366,14,323,24,"gotrue_meta_security"],[366,34,323,44],[366,36,323,46],[367,16,323,48,"captcha_token"],[367,29,323,61],[367,31,323,63,"options"],[367,38,323,70],[367,43,323,75],[367,47,323,79],[367,51,323,83,"options"],[367,58,323,90],[367,63,323,95],[367,68,323,100],[367,69,323,101],[367,72,323,104],[367,77,323,109],[367,78,323,110],[367,81,323,113,"options"],[367,88,323,120],[367,89,323,121,"captchaToken"],[368,14,323,134],[368,15,323,135],[369,14,324,24,"code_challenge"],[369,28,324,38],[369,30,324,40,"codeChallenge"],[369,43,324,53],[370,14,325,24,"code_challenge_method"],[370,35,325,45],[370,37,325,47,"codeChallengeMethod"],[371,12,326,20],[371,13,326,21],[372,12,327,20,"xform"],[372,17,327,25],[372,19,327,27,"_sessionResponse"],[373,10,328,16],[373,11,328,17],[373,12,328,18],[374,8,329,12],[374,9,329,13],[374,15,330,17],[374,19,330,21],[374,26,330,28],[374,30,330,32,"credentials"],[374,41,330,43],[374,43,330,45],[375,10,331,16],[375,16,331,22],[376,12,331,24,"phone"],[376,17,331,29],[377,12,331,31,"password"],[377,20,331,39],[378,12,331,41,"options"],[379,10,331,49],[379,11,331,50],[379,14,331,53,"credentials"],[379,25,331,64],[380,10,332,16,"res"],[380,13,332,19],[380,16,332,22],[380,22,332,28],[380,26,332,28,"_request"],[380,41,332,36],[380,43,332,37],[380,47,332,41],[380,48,332,42,"fetch"],[380,53,332,47],[380,55,332,49],[380,61,332,55],[380,63,332,57],[380,66,332,60],[380,70,332,64],[380,71,332,65,"url"],[380,74,332,68],[380,83,332,77],[380,85,332,79],[381,12,333,20,"headers"],[381,19,333,27],[381,21,333,29],[381,25,333,33],[381,26,333,34,"headers"],[381,33,333,41],[382,12,334,20,"body"],[382,16,334,24],[382,18,334,26],[383,14,335,24,"phone"],[383,19,335,29],[384,14,336,24,"password"],[384,22,336,32],[385,14,337,24,"data"],[385,18,337,28],[385,20,337,30],[385,21,337,31,"_b"],[385,23,337,33],[385,26,337,36,"options"],[385,33,337,43],[385,38,337,48],[385,42,337,52],[385,46,337,56,"options"],[385,53,337,63],[385,58,337,68],[385,63,337,73],[385,64,337,74],[385,67,337,77],[385,72,337,82],[385,73,337,83],[385,76,337,86,"options"],[385,83,337,93],[385,84,337,94,"data"],[385,88,337,98],[385,94,337,104],[385,98,337,108],[385,102,337,112,"_b"],[385,104,337,114],[385,109,337,119],[385,114,337,124],[385,115,337,125],[385,118,337,128,"_b"],[385,120,337,130],[385,123,337,133],[385,124,337,134],[385,125,337,135],[386,14,338,24,"channel"],[386,21,338,31],[386,23,338,33],[386,24,338,34,"_c"],[386,26,338,36],[386,29,338,39,"options"],[386,36,338,46],[386,41,338,51],[386,45,338,55],[386,49,338,59,"options"],[386,56,338,66],[386,61,338,71],[386,66,338,76],[386,67,338,77],[386,70,338,80],[386,75,338,85],[386,76,338,86],[386,79,338,89,"options"],[386,86,338,96],[386,87,338,97,"channel"],[386,94,338,104],[386,100,338,110],[386,104,338,114],[386,108,338,118,"_c"],[386,110,338,120],[386,115,338,125],[386,120,338,130],[386,121,338,131],[386,124,338,134,"_c"],[386,126,338,136],[386,129,338,139],[386,134,338,144],[387,14,339,24,"gotrue_meta_security"],[387,34,339,44],[387,36,339,46],[388,16,339,48,"captcha_token"],[388,29,339,61],[388,31,339,63,"options"],[388,38,339,70],[388,43,339,75],[388,47,339,79],[388,51,339,83,"options"],[388,58,339,90],[388,63,339,95],[388,68,339,100],[388,69,339,101],[388,72,339,104],[388,77,339,109],[388,78,339,110],[388,81,339,113,"options"],[388,88,339,120],[388,89,339,121,"captchaToken"],[389,14,339,134],[390,12,340,20],[390,13,340,21],[391,12,341,20,"xform"],[391,17,341,25],[391,19,341,27,"_sessionResponse"],[392,10,342,16],[392,11,342,17],[392,12,342,18],[393,8,343,12],[393,9,343,13],[393,15,344,17],[394,10,345,16],[394,16,345,22],[394,20,345,26,"AuthInvalidCredentialsError"],[394,55,345,53],[394,56,345,54],[394,121,345,119],[394,122,345,120],[395,8,346,12],[396,8,347,12],[396,14,347,18],[397,10,347,20,"data"],[397,14,347,24],[398,10,347,26,"error"],[399,8,347,32],[399,9,347,33],[399,12,347,36,"res"],[399,15,347,39],[400,8,348,12],[400,12,348,16,"error"],[400,17,348,21],[400,21,348,25],[400,22,348,26,"data"],[400,26,348,30],[400,28,348,32],[401,10,349,16],[401,17,349,23],[402,12,349,25,"data"],[402,16,349,29],[402,18,349,31],[403,14,349,33,"user"],[403,18,349,37],[403,20,349,39],[403,24,349,43],[404,14,349,45,"session"],[404,21,349,52],[404,23,349,54],[405,12,349,59],[405,13,349,60],[406,12,349,62,"error"],[406,17,349,67],[406,19,349,69,"error"],[407,10,349,75],[407,11,349,76],[408,8,350,12],[409,8,351,12],[409,14,351,18,"session"],[409,21,351,25],[409,24,351,28,"data"],[409,28,351,32],[409,29,351,33,"session"],[409,36,351,40],[410,8,352,12],[410,14,352,18,"user"],[410,18,352,22],[410,21,352,25,"data"],[410,25,352,29],[410,26,352,30,"user"],[410,30,352,34],[411,8,353,12],[411,12,353,16,"data"],[411,16,353,20],[411,17,353,21,"session"],[411,24,353,28],[411,26,353,30],[412,10,354,16],[412,16,354,22],[412,20,354,26],[412,21,354,27,"_saveSession"],[412,33,354,39],[412,34,354,40,"data"],[412,38,354,44],[412,39,354,45,"session"],[412,46,354,52],[412,47,354,53],[413,10,355,16],[413,16,355,22],[413,20,355,26],[413,21,355,27,"_notifyAllSubscribers"],[413,42,355,48],[413,43,355,49],[413,54,355,60],[413,56,355,62,"session"],[413,63,355,69],[413,64,355,70],[414,8,356,12],[415,8,357,12],[415,15,357,19],[416,10,357,21,"data"],[416,14,357,25],[416,16,357,27],[417,12,357,29,"user"],[417,16,357,33],[418,12,357,35,"session"],[419,10,357,43],[419,11,357,44],[420,10,357,46,"error"],[420,15,357,51],[420,17,357,53],[421,8,357,58],[421,9,357,59],[422,6,358,8],[422,7,358,9],[422,8,359,8],[422,15,359,15,"error"],[422,20,359,20],[422,22,359,22],[423,8,360,12],[423,12,360,16],[423,16,360,16,"isAuthError"],[423,35,360,27],[423,37,360,28,"error"],[423,42,360,33],[423,43,360,34],[423,45,360,36],[424,10,361,16],[424,17,361,23],[425,12,361,25,"data"],[425,16,361,29],[425,18,361,31],[426,14,361,33,"user"],[426,18,361,37],[426,20,361,39],[426,24,361,43],[427,14,361,45,"session"],[427,21,361,52],[427,23,361,54],[428,12,361,59],[428,13,361,60],[429,12,361,62,"error"],[430,10,361,68],[430,11,361,69],[431,8,362,12],[432,8,363,12],[432,14,363,18,"error"],[432,19,363,23],[433,6,364,8],[434,4,365,4],[435,4,366,4],[436,0,367,0],[437,0,368,0],[438,0,369,0],[439,0,370,0],[440,0,371,0],[441,0,372,0],[442,0,373,0],[443,4,374,4],[443,10,374,10,"signInWithPassword"],[443,28,374,28,"signInWithPassword"],[443,29,374,29,"credentials"],[443,40,374,40],[443,42,374,42],[444,6,375,8],[444,10,375,12],[445,8,376,12],[445,12,376,16,"res"],[445,15,376,19],[446,8,377,12],[446,12,377,16],[446,19,377,23],[446,23,377,27,"credentials"],[446,34,377,38],[446,36,377,40],[447,10,378,16],[447,16,378,22],[448,12,378,24,"email"],[448,17,378,29],[449,12,378,31,"password"],[449,20,378,39],[450,12,378,41,"options"],[451,10,378,49],[451,11,378,50],[451,14,378,53,"credentials"],[451,25,378,64],[452,10,379,16,"res"],[452,13,379,19],[452,16,379,22],[452,22,379,28],[452,26,379,28,"_request"],[452,41,379,36],[452,43,379,37],[452,47,379,41],[452,48,379,42,"fetch"],[452,53,379,47],[452,55,379,49],[452,61,379,55],[452,63,379,57],[452,66,379,60],[452,70,379,64],[452,71,379,65,"url"],[452,74,379,68],[452,102,379,96],[452,104,379,98],[453,12,380,20,"headers"],[453,19,380,27],[453,21,380,29],[453,25,380,33],[453,26,380,34,"headers"],[453,33,380,41],[454,12,381,20,"body"],[454,16,381,24],[454,18,381,26],[455,14,382,24,"email"],[455,19,382,29],[456,14,383,24,"password"],[456,22,383,32],[457,14,384,24,"gotrue_meta_security"],[457,34,384,44],[457,36,384,46],[458,16,384,48,"captcha_token"],[458,29,384,61],[458,31,384,63,"options"],[458,38,384,70],[458,43,384,75],[458,47,384,79],[458,51,384,83,"options"],[458,58,384,90],[458,63,384,95],[458,68,384,100],[458,69,384,101],[458,72,384,104],[458,77,384,109],[458,78,384,110],[458,81,384,113,"options"],[458,88,384,120],[458,89,384,121,"captchaToken"],[459,14,384,134],[460,12,385,20],[460,13,385,21],[461,12,386,20,"xform"],[461,17,386,25],[461,19,386,27,"_sessionResponsePassword"],[462,10,387,16],[462,11,387,17],[462,12,387,18],[463,8,388,12],[463,9,388,13],[463,15,389,17],[463,19,389,21],[463,26,389,28],[463,30,389,32,"credentials"],[463,41,389,43],[463,43,389,45],[464,10,390,16],[464,16,390,22],[465,12,390,24,"phone"],[465,17,390,29],[466,12,390,31,"password"],[466,20,390,39],[467,12,390,41,"options"],[468,10,390,49],[468,11,390,50],[468,14,390,53,"credentials"],[468,25,390,64],[469,10,391,16,"res"],[469,13,391,19],[469,16,391,22],[469,22,391,28],[469,26,391,28,"_request"],[469,41,391,36],[469,43,391,37],[469,47,391,41],[469,48,391,42,"fetch"],[469,53,391,47],[469,55,391,49],[469,61,391,55],[469,63,391,57],[469,66,391,60],[469,70,391,64],[469,71,391,65,"url"],[469,74,391,68],[469,102,391,96],[469,104,391,98],[470,12,392,20,"headers"],[470,19,392,27],[470,21,392,29],[470,25,392,33],[470,26,392,34,"headers"],[470,33,392,41],[471,12,393,20,"body"],[471,16,393,24],[471,18,393,26],[472,14,394,24,"phone"],[472,19,394,29],[473,14,395,24,"password"],[473,22,395,32],[474,14,396,24,"gotrue_meta_security"],[474,34,396,44],[474,36,396,46],[475,16,396,48,"captcha_token"],[475,29,396,61],[475,31,396,63,"options"],[475,38,396,70],[475,43,396,75],[475,47,396,79],[475,51,396,83,"options"],[475,58,396,90],[475,63,396,95],[475,68,396,100],[475,69,396,101],[475,72,396,104],[475,77,396,109],[475,78,396,110],[475,81,396,113,"options"],[475,88,396,120],[475,89,396,121,"captchaToken"],[476,14,396,134],[477,12,397,20],[477,13,397,21],[478,12,398,20,"xform"],[478,17,398,25],[478,19,398,27,"_sessionResponsePassword"],[479,10,399,16],[479,11,399,17],[479,12,399,18],[480,8,400,12],[480,9,400,13],[480,15,401,17],[481,10,402,16],[481,16,402,22],[481,20,402,26,"AuthInvalidCredentialsError"],[481,55,402,53],[481,56,402,54],[481,121,402,119],[481,122,402,120],[482,8,403,12],[483,8,404,12],[483,14,404,18],[484,10,404,20,"data"],[484,14,404,24],[485,10,404,26,"error"],[486,8,404,32],[486,9,404,33],[486,12,404,36,"res"],[486,15,404,39],[487,8,405,12],[487,12,405,16,"error"],[487,17,405,21],[487,19,405,23],[488,10,406,16],[488,17,406,23],[489,12,406,25,"data"],[489,16,406,29],[489,18,406,31],[490,14,406,33,"user"],[490,18,406,37],[490,20,406,39],[490,24,406,43],[491,14,406,45,"session"],[491,21,406,52],[491,23,406,54],[492,12,406,59],[492,13,406,60],[493,12,406,62,"error"],[494,10,406,68],[494,11,406,69],[495,8,407,12],[495,9,407,13],[495,15,408,17],[495,19,408,21],[495,20,408,22,"data"],[495,24,408,26],[495,28,408,30],[495,29,408,31,"data"],[495,33,408,35],[495,34,408,36,"session"],[495,41,408,43],[495,45,408,47],[495,46,408,48,"data"],[495,50,408,52],[495,51,408,53,"user"],[495,55,408,57],[495,57,408,59],[496,10,409,16],[496,17,409,23],[497,12,409,25,"data"],[497,16,409,29],[497,18,409,31],[498,14,409,33,"user"],[498,18,409,37],[498,20,409,39],[498,24,409,43],[499,14,409,45,"session"],[499,21,409,52],[499,23,409,54],[500,12,409,59],[500,13,409,60],[501,12,409,62,"error"],[501,17,409,67],[501,19,409,69],[501,23,409,73,"AuthInvalidTokenResponseError"],[501,60,409,102],[501,61,409,103],[502,10,409,105],[502,11,409,106],[503,8,410,12],[504,8,411,12],[504,12,411,16,"data"],[504,16,411,20],[504,17,411,21,"session"],[504,24,411,28],[504,26,411,30],[505,10,412,16],[505,16,412,22],[505,20,412,26],[505,21,412,27,"_saveSession"],[505,33,412,39],[505,34,412,40,"data"],[505,38,412,44],[505,39,412,45,"session"],[505,46,412,52],[505,47,412,53],[506,10,413,16],[506,16,413,22],[506,20,413,26],[506,21,413,27,"_notifyAllSubscribers"],[506,42,413,48],[506,43,413,49],[506,54,413,60],[506,56,413,62,"data"],[506,60,413,66],[506,61,413,67,"session"],[506,68,413,74],[506,69,413,75],[507,8,414,12],[508,8,415,12],[508,15,415,19],[509,10,416,16,"data"],[509,14,416,20],[509,16,416,22,"Object"],[509,22,416,28],[509,23,416,29,"assign"],[509,29,416,35],[509,30,416,36],[510,12,416,38,"user"],[510,16,416,42],[510,18,416,44,"data"],[510,22,416,48],[510,23,416,49,"user"],[510,27,416,53],[511,12,416,55,"session"],[511,19,416,62],[511,21,416,64,"data"],[511,25,416,68],[511,26,416,69,"session"],[512,10,416,77],[512,11,416,78],[512,13,416,81,"data"],[512,17,416,85],[512,18,416,86,"weak_password"],[512,31,416,99],[512,34,416,102],[513,12,416,104,"weakPassword"],[513,24,416,116],[513,26,416,118,"data"],[513,30,416,122],[513,31,416,123,"weak_password"],[514,10,416,137],[514,11,416,138],[514,14,416,141],[514,18,416,146],[514,19,416,147],[515,10,417,16,"error"],[516,8,418,12],[516,9,418,13],[517,6,419,8],[517,7,419,9],[517,8,420,8],[517,15,420,15,"error"],[517,20,420,20],[517,22,420,22],[518,8,421,12],[518,12,421,16],[518,16,421,16,"isAuthError"],[518,35,421,27],[518,37,421,28,"error"],[518,42,421,33],[518,43,421,34],[518,45,421,36],[519,10,422,16],[519,17,422,23],[520,12,422,25,"data"],[520,16,422,29],[520,18,422,31],[521,14,422,33,"user"],[521,18,422,37],[521,20,422,39],[521,24,422,43],[522,14,422,45,"session"],[522,21,422,52],[522,23,422,54],[523,12,422,59],[523,13,422,60],[524,12,422,62,"error"],[525,10,422,68],[525,11,422,69],[526,8,423,12],[527,8,424,12],[527,14,424,18,"error"],[527,19,424,23],[528,6,425,8],[529,4,426,4],[530,4,427,4],[531,0,428,0],[532,0,429,0],[533,0,430,0],[534,4,431,4],[534,10,431,10,"signInWithOAuth"],[534,25,431,25,"signInWithOAuth"],[534,26,431,26,"credentials"],[534,37,431,37],[534,39,431,39],[535,6,432,8],[535,10,432,12,"_a"],[535,12,432,14],[535,14,432,16,"_b"],[535,16,432,18],[535,18,432,20,"_c"],[535,20,432,22],[535,22,432,24,"_d"],[535,24,432,26],[536,6,433,8],[536,13,433,15],[536,19,433,21],[536,23,433,25],[536,24,433,26,"_handleProviderSignIn"],[536,45,433,47],[536,46,433,48,"credentials"],[536,57,433,59],[536,58,433,60,"provider"],[536,66,433,68],[536,68,433,70],[537,8,434,12,"redirectTo"],[537,18,434,22],[537,20,434,24],[537,21,434,25,"_a"],[537,23,434,27],[537,26,434,30,"credentials"],[537,37,434,41],[537,38,434,42,"options"],[537,45,434,49],[537,51,434,55],[537,55,434,59],[537,59,434,63,"_a"],[537,61,434,65],[537,66,434,70],[537,71,434,75],[537,72,434,76],[537,75,434,79],[537,80,434,84],[537,81,434,85],[537,84,434,88,"_a"],[537,86,434,90],[537,87,434,91,"redirectTo"],[537,97,434,101],[538,8,435,12,"scopes"],[538,14,435,18],[538,16,435,20],[538,17,435,21,"_b"],[538,19,435,23],[538,22,435,26,"credentials"],[538,33,435,37],[538,34,435,38,"options"],[538,41,435,45],[538,47,435,51],[538,51,435,55],[538,55,435,59,"_b"],[538,57,435,61],[538,62,435,66],[538,67,435,71],[538,68,435,72],[538,71,435,75],[538,76,435,80],[538,77,435,81],[538,80,435,84,"_b"],[538,82,435,86],[538,83,435,87,"scopes"],[538,89,435,93],[539,8,436,12,"queryParams"],[539,19,436,23],[539,21,436,25],[539,22,436,26,"_c"],[539,24,436,28],[539,27,436,31,"credentials"],[539,38,436,42],[539,39,436,43,"options"],[539,46,436,50],[539,52,436,56],[539,56,436,60],[539,60,436,64,"_c"],[539,62,436,66],[539,67,436,71],[539,72,436,76],[539,73,436,77],[539,76,436,80],[539,81,436,85],[539,82,436,86],[539,85,436,89,"_c"],[539,87,436,91],[539,88,436,92,"queryParams"],[539,99,436,103],[540,8,437,12,"skipBrowserRedirect"],[540,27,437,31],[540,29,437,33],[540,30,437,34,"_d"],[540,32,437,36],[540,35,437,39,"credentials"],[540,46,437,50],[540,47,437,51,"options"],[540,54,437,58],[540,60,437,64],[540,64,437,68],[540,68,437,72,"_d"],[540,70,437,74],[540,75,437,79],[540,80,437,84],[540,81,437,85],[540,84,437,88],[540,89,437,93],[540,90,437,94],[540,93,437,97,"_d"],[540,95,437,99],[540,96,437,100,"skipBrowserRedirect"],[541,6,438,8],[541,7,438,9],[541,8,438,10],[542,4,439,4],[543,4,440,4],[544,0,441,0],[545,0,442,0],[546,4,443,4],[546,10,443,10,"exchangeCodeForSession"],[546,32,443,32,"exchangeCodeForSession"],[546,33,443,33,"authCode"],[546,41,443,41],[546,43,443,43],[547,6,444,8],[547,12,444,14],[547,16,444,18],[547,17,444,19,"initializePromise"],[547,34,444,36],[548,6,445,8],[548,13,445,15],[548,17,445,19],[548,18,445,20,"_acquireLock"],[548,30,445,32],[548,31,445,33],[548,32,445,34],[548,33,445,35],[548,35,445,37],[548,47,445,49],[549,8,446,12],[549,15,446,19],[549,19,446,23],[549,20,446,24,"_exchangeCodeForSession"],[549,43,446,47],[549,44,446,48,"authCode"],[549,52,446,56],[549,53,446,57],[550,6,447,8],[550,7,447,9],[550,8,447,10],[551,4,448,4],[552,4,449,4],[553,0,450,0],[554,0,451,0],[555,0,452,0],[556,4,453,4],[556,10,453,10,"signInWithWeb3"],[556,24,453,24,"signInWithWeb3"],[556,25,453,25,"credentials"],[556,36,453,36],[556,38,453,38],[557,6,454,8],[557,12,454,14],[558,8,454,16,"chain"],[559,6,454,22],[559,7,454,23],[559,10,454,26,"credentials"],[559,21,454,37],[560,6,455,8],[560,10,455,12,"chain"],[560,15,455,17],[560,20,455,22],[560,28,455,30],[560,30,455,32],[561,8,456,12],[561,15,456,19],[561,21,456,25],[561,25,456,29],[561,26,456,30,"signInWithSolana"],[561,42,456,46],[561,43,456,47,"credentials"],[561,54,456,58],[561,55,456,59],[562,6,457,8],[563,6,458,8],[563,12,458,14],[563,16,458,18,"Error"],[563,21,458,23],[563,22,458,24],[563,63,458,65,"chain"],[563,68,458,70],[563,71,458,73],[563,72,458,74],[564,4,459,4],[565,4,460,4],[565,10,460,10,"signInWithSolana"],[565,26,460,26,"signInWithSolana"],[565,27,460,27,"credentials"],[565,38,460,38],[565,40,460,40],[566,6,461,8],[566,10,461,12,"_a"],[566,12,461,14],[566,14,461,16,"_b"],[566,16,461,18],[566,18,461,20,"_c"],[566,20,461,22],[566,22,461,24,"_d"],[566,24,461,26],[566,26,461,28,"_e"],[566,28,461,30],[566,30,461,32,"_f"],[566,32,461,34],[566,34,461,36,"_g"],[566,36,461,38],[566,38,461,40,"_h"],[566,40,461,42],[566,42,461,44,"_j"],[566,44,461,46],[566,46,461,48,"_k"],[566,48,461,50],[566,50,461,52,"_l"],[566,52,461,54],[566,54,461,56,"_m"],[566,56,461,58],[567,6,462,8],[567,10,462,12,"message"],[567,17,462,19],[568,6,463,8],[568,10,463,12,"signature"],[568,19,463,21],[569,6,464,8],[569,10,464,12],[569,19,464,21],[569,23,464,25,"credentials"],[569,34,464,36],[569,36,464,38],[570,8,465,12,"message"],[570,15,465,19],[570,18,465,22,"credentials"],[570,29,465,33],[570,30,465,34,"message"],[570,37,465,41],[571,8,466,12,"signature"],[571,17,466,21],[571,20,466,24,"credentials"],[571,31,466,35],[571,32,466,36,"signature"],[571,41,466,45],[572,6,467,8],[572,7,467,9],[572,13,468,13],[573,8,469,12],[573,14,469,18],[574,10,469,20,"chain"],[574,15,469,25],[575,10,469,27,"wallet"],[575,16,469,33],[576,10,469,35,"statement"],[576,19,469,44],[577,10,469,46,"options"],[578,8,469,54],[578,9,469,55],[578,12,469,58,"credentials"],[578,23,469,69],[579,8,470,12],[579,12,470,16,"resolvedWallet"],[579,26,470,30],[580,8,471,12],[580,12,471,16],[580,13,471,17],[580,17,471,17,"isBrowser"],[580,35,471,26],[580,37,471,27],[580,38,471,28],[580,40,471,30],[581,10,472,16],[581,14,472,20],[581,21,472,27,"wallet"],[581,27,472,33],[581,32,472,38],[581,40,472,46],[581,44,472,50],[581,46,472,52,"options"],[581,53,472,59],[581,58,472,64],[581,62,472,68],[581,66,472,72,"options"],[581,73,472,79],[581,78,472,84],[581,83,472,89],[581,84,472,90],[581,87,472,93],[581,92,472,98],[581,93,472,99],[581,96,472,102,"options"],[581,103,472,109],[581,104,472,110,"url"],[581,107,472,113],[581,108,472,114],[581,110,472,116],[582,12,473,20],[582,18,473,26],[582,22,473,30,"Error"],[582,27,473,35],[582,28,473,36],[582,115,473,123],[582,116,473,124],[583,10,474,16],[584,10,475,16,"resolvedWallet"],[584,24,475,30],[584,27,475,33,"wallet"],[584,33,475,39],[585,8,476,12],[585,9,476,13],[585,15,477,17],[585,19,477,21],[585,26,477,28,"wallet"],[585,32,477,34],[585,37,477,39],[585,45,477,47],[585,47,477,49],[586,10,478,16,"resolvedWallet"],[586,24,478,30],[586,27,478,33,"wallet"],[586,33,478,39],[587,8,479,12],[587,9,479,13],[587,15,480,17],[588,10,481,16],[588,16,481,22,"windowAny"],[588,25,481,31],[588,28,481,34,"window"],[588,34,481,40],[589,10,482,16],[589,14,482,20],[589,22,482,28],[589,26,482,32,"windowAny"],[589,35,482,41],[589,39,483,20],[589,46,483,27,"windowAny"],[589,55,483,36],[589,56,483,37,"solana"],[589,62,483,43],[589,67,483,48],[589,75,483,56],[589,80,484,22],[589,88,484,30],[589,92,484,34,"windowAny"],[589,101,484,43],[589,102,484,44,"solana"],[589,108,484,50],[589,112,484,54],[589,119,484,61,"windowAny"],[589,128,484,70],[589,129,484,71,"solana"],[589,135,484,77],[589,136,484,78,"signIn"],[589,142,484,84],[589,147,484,89],[589,157,484,99],[589,161,485,25],[589,174,485,38],[589,178,485,42,"windowAny"],[589,187,485,51],[589,188,485,52,"solana"],[589,194,485,58],[589,198,486,28],[589,205,486,35,"windowAny"],[589,214,486,44],[589,215,486,45,"solana"],[589,221,486,51],[589,222,486,52,"signMessage"],[589,233,486,63],[589,238,486,68],[589,248,486,79],[589,249,486,80],[589,251,486,82],[590,12,487,20,"resolvedWallet"],[590,26,487,34],[590,29,487,37,"windowAny"],[590,38,487,46],[590,39,487,47,"solana"],[590,45,487,53],[591,10,488,16],[591,11,488,17],[591,17,489,21],[592,12,490,20],[592,18,490,26],[592,22,490,30,"Error"],[592,27,490,35],[592,28,490,36],[592,339,490,347],[592,340,490,348],[593,10,491,16],[594,8,492,12],[595,8,493,12],[595,14,493,18,"url"],[595,17,493,21],[595,20,493,24],[595,24,493,28,"URL"],[595,27,493,31],[595,28,493,32],[595,29,493,33,"_a"],[595,31,493,35],[595,34,493,38,"options"],[595,41,493,45],[595,46,493,50],[595,50,493,54],[595,54,493,58,"options"],[595,61,493,65],[595,66,493,70],[595,71,493,75],[595,72,493,76],[595,75,493,79],[595,80,493,84],[595,81,493,85],[595,84,493,88,"options"],[595,91,493,95],[595,92,493,96,"url"],[595,95,493,99],[595,101,493,105],[595,105,493,109],[595,109,493,113,"_a"],[595,111,493,115],[595,116,493,120],[595,121,493,125],[595,122,493,126],[595,125,493,129,"_a"],[595,127,493,131],[595,130,493,134,"window"],[595,136,493,140],[595,137,493,141,"location"],[595,145,493,149],[595,146,493,150,"href"],[595,150,493,154],[595,151,493,155],[596,8,494,12],[596,12,494,16],[596,20,494,24],[596,24,494,28,"resolvedWallet"],[596,38,494,42],[596,42,494,46,"resolvedWallet"],[596,56,494,60],[596,57,494,61,"signIn"],[596,63,494,67],[596,65,494,69],[597,10,495,16],[597,16,495,22,"output"],[597,22,495,28],[597,25,495,31],[597,31,495,37,"resolvedWallet"],[597,45,495,51],[597,46,495,52,"signIn"],[597,52,495,58],[597,53,495,59,"Object"],[597,59,495,65],[597,60,495,66,"assign"],[597,66,495,72],[597,67,495,73,"Object"],[597,73,495,79],[597,74,495,80,"assign"],[597,80,495,86],[597,81,495,87,"Object"],[597,87,495,93],[597,88,495,94,"assign"],[597,94,495,100],[597,95,495,101],[598,12,495,103,"issuedAt"],[598,20,495,111],[598,22,495,113],[598,26,495,117,"Date"],[598,30,495,121],[598,31,495,122],[598,32,495,123],[598,33,495,124,"toISOString"],[598,44,495,135],[598,45,495,136],[599,10,495,138],[599,11,495,139],[599,13,495,141,"options"],[599,20,495,148],[599,25,495,153],[599,29,495,157],[599,33,495,161,"options"],[599,40,495,168],[599,45,495,173],[599,50,495,178],[599,51,495,179],[599,54,495,182],[599,59,495,187],[599,60,495,188],[599,63,495,191,"options"],[599,70,495,198],[599,71,495,199,"signInWithSolana"],[599,87,495,215],[599,88,495,216],[599,90,495,218],[600,12,496,20],[601,12,497,20,"version"],[601,19,497,27],[601,21,497,29],[601,24,497,32],[602,12,497,34,"domain"],[602,18,497,40],[602,20,497,42,"url"],[602,23,497,45],[602,24,497,46,"host"],[602,28,497,50],[603,12,497,52,"uri"],[603,15,497,55],[603,17,497,57,"url"],[603,20,497,60],[603,21,497,61,"href"],[604,10,497,66],[604,11,497,67],[604,12,497,68],[604,14,497,71,"statement"],[604,23,497,80],[604,26,497,83],[605,12,497,85,"statement"],[606,10,497,95],[606,11,497,96],[606,14,497,99],[606,18,497,104],[606,19,497,105],[606,20,497,106],[607,10,498,16],[607,14,498,20,"outputToProcess"],[607,29,498,35],[608,10,499,16],[608,14,499,20,"Array"],[608,19,499,25],[608,20,499,26,"isArray"],[608,27,499,33],[608,28,499,34,"output"],[608,34,499,40],[608,35,499,41],[608,39,499,45,"output"],[608,45,499,51],[608,46,499,52],[608,47,499,53],[608,48,499,54],[608,52,499,58],[608,59,499,65,"output"],[608,65,499,71],[608,66,499,72],[608,67,499,73],[608,68,499,74],[608,73,499,79],[608,81,499,87],[608,83,499,89],[609,12,500,20,"outputToProcess"],[609,27,500,35],[609,30,500,38,"output"],[609,36,500,44],[609,37,500,45],[609,38,500,46],[609,39,500,47],[610,10,501,16],[610,11,501,17],[610,17,502,21],[610,21,502,25,"output"],[610,27,502,31],[610,31,503,20],[610,38,503,27,"output"],[610,44,503,33],[610,49,503,38],[610,57,503,46],[610,61,504,20],[610,76,504,35],[610,80,504,39,"output"],[610,86,504,45],[610,90,505,20],[610,101,505,31],[610,105,505,35,"output"],[610,111,505,41],[610,113,505,43],[611,12,506,20,"outputToProcess"],[611,27,506,35],[611,30,506,38,"output"],[611,36,506,44],[612,10,507,16],[612,11,507,17],[612,17,508,21],[613,12,509,20],[613,18,509,26],[613,22,509,30,"Error"],[613,27,509,35],[613,28,509,36],[613,99,509,107],[613,100,509,108],[614,10,510,16],[615,10,511,16],[615,14,511,20],[615,29,511,35],[615,33,511,39,"outputToProcess"],[615,48,511,54],[615,52,512,20],[615,63,512,31],[615,67,512,35,"outputToProcess"],[615,82,512,50],[615,87,513,21],[615,94,513,28,"outputToProcess"],[615,109,513,43],[615,110,513,44,"signedMessage"],[615,123,513,57],[615,128,513,62],[615,136,513,70],[615,140,514,24,"outputToProcess"],[615,155,514,39],[615,156,514,40,"signedMessage"],[615,169,514,53],[615,181,514,65,"Uint8Array"],[615,191,514,75],[615,192,514,76],[615,196,515,20,"outputToProcess"],[615,211,515,35],[615,212,515,36,"signature"],[615,221,515,45],[615,233,515,57,"Uint8Array"],[615,243,515,67],[615,245,515,69],[616,12,516,20,"message"],[616,19,516,27],[616,22,517,24],[616,29,517,31,"outputToProcess"],[616,44,517,46],[616,45,517,47,"signedMessage"],[616,58,517,60],[616,63,517,65],[616,71,517,73],[616,74,518,30,"outputToProcess"],[616,89,518,45],[616,90,518,46,"signedMessage"],[616,103,518,59],[616,106,519,30],[616,110,519,34,"TextDecoder"],[616,121,519,45],[616,122,519,46],[616,123,519,47],[616,124,519,48,"decode"],[616,130,519,54],[616,131,519,55,"outputToProcess"],[616,146,519,70],[616,147,519,71,"signedMessage"],[616,160,519,84],[616,161,519,85],[617,12,520,20,"signature"],[617,21,520,29],[617,24,520,32,"outputToProcess"],[617,39,520,47],[617,40,520,48,"signature"],[617,49,520,57],[618,10,521,16],[618,11,521,17],[618,17,522,21],[619,12,523,20],[619,18,523,26],[619,22,523,30,"Error"],[619,27,523,35],[619,28,523,36],[619,134,523,142],[619,135,523,143],[620,10,524,16],[621,8,525,12],[621,9,525,13],[621,15,526,17],[622,10,527,16],[622,14,527,20],[622,16,527,22],[622,29,527,35],[622,33,527,39,"resolvedWallet"],[622,47,527,53],[622,48,527,54],[622,52,528,20],[622,59,528,27,"resolvedWallet"],[622,73,528,41],[622,74,528,42,"signMessage"],[622,85,528,53],[622,90,528,58],[622,100,528,68],[622,104,529,20],[622,106,529,22],[622,117,529,33],[622,121,529,37,"resolvedWallet"],[622,135,529,51],[622,136,529,52],[622,140,530,20],[622,147,530,27,"resolvedWallet"],[622,161,530,41],[622,166,530,46],[622,174,530,54],[622,178,531,20],[622,179,531,21,"resolvedWallet"],[622,193,531,35],[622,194,531,36,"publicKey"],[622,203,531,45],[622,207,532,20],[622,209,532,22],[622,219,532,32],[622,223,532,36,"resolvedWallet"],[622,237,532,50],[622,238,532,51,"publicKey"],[622,247,532,60],[622,248,532,61],[622,252,533,20],[622,259,533,27,"resolvedWallet"],[622,273,533,41],[622,274,533,42,"publicKey"],[622,283,533,51],[622,284,533,52,"toBase58"],[622,292,533,60],[622,297,533,65],[622,307,533,75],[622,309,533,77],[623,12,534,20],[623,18,534,26],[623,22,534,30,"Error"],[623,27,534,35],[623,28,534,36],[623,125,534,133],[623,126,534,134],[624,10,535,16],[625,10,536,16,"message"],[625,17,536,23],[625,20,536,26],[625,21,537,20],[625,24,537,23,"url"],[625,27,537,26],[625,28,537,27,"host"],[625,32,537,31],[625,81,537,80],[625,83,538,20,"resolvedWallet"],[625,97,538,34],[625,98,538,35,"publicKey"],[625,107,538,44],[625,108,538,45,"toBase58"],[625,116,538,53],[625,117,538,54],[625,118,538,55],[625,120,539,20],[625,124,539,24,"statement"],[625,133,539,33],[625,136,539,36],[625,137,539,37],[625,139,539,39],[625,141,539,41,"statement"],[625,150,539,50],[625,152,539,52],[625,154,539,54],[625,155,539,55],[625,158,539,58],[625,159,539,59],[625,161,539,61],[625,162,539,62],[625,163,539,63],[625,165,540,20],[625,177,540,32],[625,179,541,20],[625,187,541,28,"url"],[625,190,541,31],[625,191,541,32,"href"],[625,195,541,36],[625,197,541,38],[625,199,542,20],[625,213,542,34],[625,214,542,35,"_c"],[625,216,542,37],[625,219,542,40],[625,220,542,41,"_b"],[625,222,542,43],[625,225,542,46,"options"],[625,232,542,53],[625,237,542,58],[625,241,542,62],[625,245,542,66,"options"],[625,252,542,73],[625,257,542,78],[625,262,542,83],[625,263,542,84],[625,266,542,87],[625,271,542,92],[625,272,542,93],[625,275,542,96,"options"],[625,282,542,103],[625,283,542,104,"signInWithSolana"],[625,299,542,120],[625,305,542,126],[625,309,542,130],[625,313,542,134,"_b"],[625,315,542,136],[625,320,542,141],[625,325,542,146],[625,326,542,147],[625,329,542,150],[625,334,542,155],[625,335,542,156],[625,338,542,159,"_b"],[625,340,542,161],[625,341,542,162,"issuedAt"],[625,349,542,170],[625,355,542,176],[625,359,542,180],[625,363,542,184,"_c"],[625,365,542,186],[625,370,542,191],[625,375,542,196],[625,376,542,197],[625,379,542,200,"_c"],[625,381,542,202],[625,384,542,205],[625,388,542,209,"Date"],[625,392,542,213],[625,393,542,214],[625,394,542,215],[625,395,542,216,"toISOString"],[625,406,542,227],[625,407,542,228],[625,408,542,229],[625,410,542,231],[625,412,543,20],[625,416,543,24],[625,417,543,25],[625,418,543,26,"_d"],[625,420,543,28],[625,423,543,31,"options"],[625,430,543,38],[625,435,543,43],[625,439,543,47],[625,443,543,51,"options"],[625,450,543,58],[625,455,543,63],[625,460,543,68],[625,461,543,69],[625,464,543,72],[625,469,543,77],[625,470,543,78],[625,473,543,81,"options"],[625,480,543,88],[625,481,543,89,"signInWithSolana"],[625,497,543,105],[625,503,543,111],[625,507,543,115],[625,511,543,119,"_d"],[625,513,543,121],[625,518,543,126],[625,523,543,131],[625,524,543,132],[625,527,543,135],[625,532,543,140],[625,533,543,141],[625,536,543,144,"_d"],[625,538,543,146],[625,539,543,147,"notBefore"],[625,548,543,156],[625,552,544,26],[625,553,544,27],[625,568,544,42,"options"],[625,575,544,49],[625,576,544,50,"signInWithSolana"],[625,592,544,66],[625,593,544,67,"notBefore"],[625,602,544,76],[625,604,544,78],[625,605,544,79],[625,608,545,26],[625,610,545,28],[625,611,545,29],[625,613,546,20],[625,617,546,24],[625,618,546,25],[625,619,546,26,"_e"],[625,621,546,28],[625,624,546,31,"options"],[625,631,546,38],[625,636,546,43],[625,640,546,47],[625,644,546,51,"options"],[625,651,546,58],[625,656,546,63],[625,661,546,68],[625,662,546,69],[625,665,546,72],[625,670,546,77],[625,671,546,78],[625,674,546,81,"options"],[625,681,546,88],[625,682,546,89,"signInWithSolana"],[625,698,546,105],[625,704,546,111],[625,708,546,115],[625,712,546,119,"_e"],[625,714,546,121],[625,719,546,126],[625,724,546,131],[625,725,546,132],[625,728,546,135],[625,733,546,140],[625,734,546,141],[625,737,546,144,"_e"],[625,739,546,146],[625,740,546,147,"expirationTime"],[625,754,546,161],[625,758,547,26],[625,759,547,27],[625,779,547,47,"options"],[625,786,547,54],[625,787,547,55,"signInWithSolana"],[625,803,547,71],[625,804,547,72,"expirationTime"],[625,818,547,86],[625,820,547,88],[625,821,547,89],[625,824,548,26],[625,826,548,28],[625,827,548,29],[625,829,549,20],[625,833,549,24],[625,834,549,25],[625,835,549,26,"_f"],[625,837,549,28],[625,840,549,31,"options"],[625,847,549,38],[625,852,549,43],[625,856,549,47],[625,860,549,51,"options"],[625,867,549,58],[625,872,549,63],[625,877,549,68],[625,878,549,69],[625,881,549,72],[625,886,549,77],[625,887,549,78],[625,890,549,81,"options"],[625,897,549,88],[625,898,549,89,"signInWithSolana"],[625,914,549,105],[625,920,549,111],[625,924,549,115],[625,928,549,119,"_f"],[625,930,549,121],[625,935,549,126],[625,940,549,131],[625,941,549,132],[625,944,549,135],[625,949,549,140],[625,950,549,141],[625,953,549,144,"_f"],[625,955,549,146],[625,956,549,147,"chainId"],[625,963,549,154],[625,967,550,26],[625,968,550,27],[625,981,550,40,"options"],[625,988,550,47],[625,989,550,48,"signInWithSolana"],[625,1005,550,64],[625,1006,550,65,"chainId"],[625,1013,550,72],[625,1015,550,74],[625,1016,550,75],[625,1019,551,26],[625,1021,551,28],[625,1022,551,29],[625,1024,552,20],[625,1028,552,24],[625,1029,552,25],[625,1030,552,26,"_g"],[625,1032,552,28],[625,1035,552,31,"options"],[625,1042,552,38],[625,1047,552,43],[625,1051,552,47],[625,1055,552,51,"options"],[625,1062,552,58],[625,1067,552,63],[625,1072,552,68],[625,1073,552,69],[625,1076,552,72],[625,1081,552,77],[625,1082,552,78],[625,1085,552,81,"options"],[625,1092,552,88],[625,1093,552,89,"signInWithSolana"],[625,1109,552,105],[625,1115,552,111],[625,1119,552,115],[625,1123,552,119,"_g"],[625,1125,552,121],[625,1130,552,126],[625,1135,552,131],[625,1136,552,132],[625,1139,552,135],[625,1144,552,140],[625,1145,552,141],[625,1148,552,144,"_g"],[625,1150,552,146],[625,1151,552,147,"nonce"],[625,1156,552,152],[625,1160,552,156],[625,1161,552,157],[625,1171,552,167,"options"],[625,1178,552,174],[625,1179,552,175,"signInWithSolana"],[625,1195,552,191],[625,1196,552,192,"nonce"],[625,1201,552,197],[625,1203,552,199],[625,1204,552,200],[625,1207,552,203],[625,1209,552,205],[625,1210,552,206],[625,1212,553,20],[625,1216,553,24],[625,1217,553,25],[625,1218,553,26,"_h"],[625,1220,553,28],[625,1223,553,31,"options"],[625,1230,553,38],[625,1235,553,43],[625,1239,553,47],[625,1243,553,51,"options"],[625,1250,553,58],[625,1255,553,63],[625,1260,553,68],[625,1261,553,69],[625,1264,553,72],[625,1269,553,77],[625,1270,553,78],[625,1273,553,81,"options"],[625,1280,553,88],[625,1281,553,89,"signInWithSolana"],[625,1297,553,105],[625,1303,553,111],[625,1307,553,115],[625,1311,553,119,"_h"],[625,1313,553,121],[625,1318,553,126],[625,1323,553,131],[625,1324,553,132],[625,1327,553,135],[625,1332,553,140],[625,1333,553,141],[625,1336,553,144,"_h"],[625,1338,553,146],[625,1339,553,147,"requestId"],[625,1348,553,156],[625,1352,554,26],[625,1353,554,27],[625,1368,554,42,"options"],[625,1375,554,49],[625,1376,554,50,"signInWithSolana"],[625,1392,554,66],[625,1393,554,67,"requestId"],[625,1402,554,76],[625,1404,554,78],[625,1405,554,79],[625,1408,555,26],[625,1410,555,28],[625,1411,555,29],[625,1413,556,20],[625,1417,556,24],[625,1418,556,25],[625,1419,556,26,"_k"],[625,1421,556,28],[625,1424,556,31],[625,1425,556,32,"_j"],[625,1427,556,34],[625,1430,556,37,"options"],[625,1437,556,44],[625,1442,556,49],[625,1446,556,53],[625,1450,556,57,"options"],[625,1457,556,64],[625,1462,556,69],[625,1467,556,74],[625,1468,556,75],[625,1471,556,78],[625,1476,556,83],[625,1477,556,84],[625,1480,556,87,"options"],[625,1487,556,94],[625,1488,556,95,"signInWithSolana"],[625,1504,556,111],[625,1510,556,117],[625,1514,556,121],[625,1518,556,125,"_j"],[625,1520,556,127],[625,1525,556,132],[625,1530,556,137],[625,1531,556,138],[625,1534,556,141],[625,1539,556,146],[625,1540,556,147],[625,1543,556,150,"_j"],[625,1545,556,152],[625,1546,556,153,"resources"],[625,1555,556,162],[625,1561,556,168],[625,1565,556,172],[625,1569,556,176,"_k"],[625,1571,556,178],[625,1576,556,183],[625,1581,556,188],[625,1582,556,189],[625,1585,556,192],[625,1590,556,197],[625,1591,556,198],[625,1594,556,201,"_k"],[625,1596,556,203],[625,1597,556,204,"length"],[625,1603,556,210],[625,1607,557,26],[625,1608,558,28],[625,1619,558,39],[625,1621,559,28],[625,1624,559,31,"options"],[625,1631,559,38],[625,1632,559,39,"signInWithSolana"],[625,1648,559,55],[625,1649,559,56,"resources"],[625,1658,559,65],[625,1659,559,66,"map"],[625,1662,559,69],[625,1663,559,71,"resource"],[625,1671,559,79],[625,1675,559,84],[625,1680,559,89,"resource"],[625,1688,559,97],[625,1690,559,99],[625,1691,559,100],[625,1692,560,25],[625,1695,561,26],[625,1697,561,28],[625,1698,561,29],[625,1699,562,17],[625,1700,562,18,"join"],[625,1704,562,22],[625,1705,562,23],[625,1709,562,27],[625,1710,562,28],[626,10,563,16],[626,16,563,22,"maybeSignature"],[626,30,563,36],[626,33,563,39],[626,39,563,45,"resolvedWallet"],[626,53,563,59],[626,54,563,60,"signMessage"],[626,65,563,71],[626,66,563,72],[626,70,563,76,"TextEncoder"],[626,81,563,87],[626,82,563,88],[626,83,563,89],[626,84,563,90,"encode"],[626,90,563,96],[626,91,563,97,"message"],[626,98,563,104],[626,99,563,105],[626,101,563,107],[626,107,563,113],[626,108,563,114],[627,10,564,16],[627,14,564,20],[627,15,564,21,"maybeSignature"],[627,29,564,35],[627,33,564,39],[627,35,564,41,"maybeSignature"],[627,49,564,55],[627,61,564,67,"Uint8Array"],[627,71,564,77],[627,72,564,78],[627,74,564,80],[628,12,565,20],[628,18,565,26],[628,22,565,30,"Error"],[628,27,565,35],[628,28,565,36],[628,102,565,110],[628,103,565,111],[629,10,566,16],[630,10,567,16,"signature"],[630,19,567,25],[630,22,567,28,"maybeSignature"],[630,36,567,42],[631,8,568,12],[632,6,569,8],[633,6,570,8],[633,10,570,12],[634,8,571,12],[634,14,571,18],[635,10,571,20,"data"],[635,14,571,24],[636,10,571,26,"error"],[637,8,571,32],[637,9,571,33],[637,12,571,36],[637,18,571,42],[637,22,571,42,"_request"],[637,37,571,50],[637,39,571,51],[637,43,571,55],[637,44,571,56,"fetch"],[637,49,571,61],[637,51,571,63],[637,57,571,69],[637,59,571,71],[637,62,571,74],[637,66,571,78],[637,67,571,79,"url"],[637,70,571,82],[637,94,571,106],[637,96,571,108],[638,10,572,16,"headers"],[638,17,572,23],[638,19,572,25],[638,23,572,29],[638,24,572,30,"headers"],[638,31,572,37],[639,10,573,16,"body"],[639,14,573,20],[639,16,573,22,"Object"],[639,22,573,28],[639,23,573,29,"assign"],[639,29,573,35],[639,30,573,36],[640,12,573,38,"chain"],[640,17,573,43],[640,19,573,45],[640,27,573,53],[641,12,573,55,"message"],[641,19,573,62],[642,12,573,64,"signature"],[642,21,573,73],[642,23,573,75],[642,27,573,75,"bytesToBase64URL"],[642,54,573,91],[642,56,573,92,"signature"],[642,65,573,101],[643,10,573,103],[643,11,573,104],[643,13,573,107],[643,14,573,108],[643,15,573,109,"_l"],[643,17,573,111],[643,20,573,114,"credentials"],[643,31,573,125],[643,32,573,126,"options"],[643,39,573,133],[643,45,573,139],[643,49,573,143],[643,53,573,147,"_l"],[643,55,573,149],[643,60,573,154],[643,65,573,159],[643,66,573,160],[643,69,573,163],[643,74,573,168],[643,75,573,169],[643,78,573,172,"_l"],[643,80,573,174],[643,81,573,175,"captchaToken"],[643,93,573,187],[643,97,574,22],[644,12,574,24,"gotrue_meta_security"],[644,32,574,44],[644,34,574,46],[645,14,574,48,"captcha_token"],[645,27,574,61],[645,29,574,63],[645,30,574,64,"_m"],[645,32,574,66],[645,35,574,69,"credentials"],[645,46,574,80],[645,47,574,81,"options"],[645,54,574,88],[645,60,574,94],[645,64,574,98],[645,68,574,102,"_m"],[645,70,574,104],[645,75,574,109],[645,80,574,114],[645,81,574,115],[645,84,574,118],[645,89,574,123],[645,90,574,124],[645,93,574,127,"_m"],[645,95,574,129],[645,96,574,130,"captchaToken"],[646,12,574,143],[647,10,574,145],[647,11,574,146],[647,14,575,22],[647,18,575,27],[647,19,575,28],[648,10,576,16,"xform"],[648,15,576,21],[648,17,576,23,"_sessionResponse"],[649,8,577,12],[649,9,577,13],[649,10,577,14],[650,8,578,12],[650,12,578,16,"error"],[650,17,578,21],[650,19,578,23],[651,10,579,16],[651,16,579,22,"error"],[651,21,579,27],[652,8,580,12],[653,8,581,12],[653,12,581,16],[653,13,581,17,"data"],[653,17,581,21],[653,21,581,25],[653,22,581,26,"data"],[653,26,581,30],[653,27,581,31,"session"],[653,34,581,38],[653,38,581,42],[653,39,581,43,"data"],[653,43,581,47],[653,44,581,48,"user"],[653,48,581,52],[653,50,581,54],[654,10,582,16],[654,17,582,23],[655,12,583,20,"data"],[655,16,583,24],[655,18,583,26],[656,14,583,28,"user"],[656,18,583,32],[656,20,583,34],[656,24,583,38],[657,14,583,40,"session"],[657,21,583,47],[657,23,583,49],[658,12,583,54],[658,13,583,55],[659,12,584,20,"error"],[659,17,584,25],[659,19,584,27],[659,23,584,31,"AuthInvalidTokenResponseError"],[659,60,584,60],[659,61,584,61],[660,10,585,16],[660,11,585,17],[661,8,586,12],[662,8,587,12],[662,12,587,16,"data"],[662,16,587,20],[662,17,587,21,"session"],[662,24,587,28],[662,26,587,30],[663,10,588,16],[663,16,588,22],[663,20,588,26],[663,21,588,27,"_saveSession"],[663,33,588,39],[663,34,588,40,"data"],[663,38,588,44],[663,39,588,45,"session"],[663,46,588,52],[663,47,588,53],[664,10,589,16],[664,16,589,22],[664,20,589,26],[664,21,589,27,"_notifyAllSubscribers"],[664,42,589,48],[664,43,589,49],[664,54,589,60],[664,56,589,62,"data"],[664,60,589,66],[664,61,589,67,"session"],[664,68,589,74],[664,69,589,75],[665,8,590,12],[666,8,591,12],[666,15,591,19],[667,10,591,21,"data"],[667,14,591,25],[667,16,591,27,"Object"],[667,22,591,33],[667,23,591,34,"assign"],[667,29,591,40],[667,30,591,41],[667,31,591,42],[667,32,591,43],[667,34,591,45,"data"],[667,38,591,49],[667,39,591,50],[668,10,591,52,"error"],[669,8,591,58],[669,9,591,59],[670,6,592,8],[670,7,592,9],[670,8,593,8],[670,15,593,15,"error"],[670,20,593,20],[670,22,593,22],[671,8,594,12],[671,12,594,16],[671,16,594,16,"isAuthError"],[671,35,594,27],[671,37,594,28,"error"],[671,42,594,33],[671,43,594,34],[671,45,594,36],[672,10,595,16],[672,17,595,23],[673,12,595,25,"data"],[673,16,595,29],[673,18,595,31],[674,14,595,33,"user"],[674,18,595,37],[674,20,595,39],[674,24,595,43],[675,14,595,45,"session"],[675,21,595,52],[675,23,595,54],[676,12,595,59],[676,13,595,60],[677,12,595,62,"error"],[678,10,595,68],[678,11,595,69],[679,8,596,12],[680,8,597,12],[680,14,597,18,"error"],[680,19,597,23],[681,6,598,8],[682,4,599,4],[683,4,600,4],[683,10,600,10,"_exchangeCodeForSession"],[683,33,600,33,"_exchangeCodeForSession"],[683,34,600,34,"authCode"],[683,42,600,42],[683,44,600,44],[684,6,601,8],[684,12,601,14,"storageItem"],[684,23,601,25],[684,26,601,28],[684,32,601,34],[684,36,601,34,"getItemAsync"],[684,57,601,46],[684,59,601,47],[684,63,601,51],[684,64,601,52,"storage"],[684,71,601,59],[684,73,601,61],[684,76,601,64],[684,80,601,68],[684,81,601,69,"storageKey"],[684,91,601,79],[684,107,601,95],[684,108,601,96],[685,6,602,8],[685,12,602,14],[685,13,602,15,"codeVerifier"],[685,25,602,27],[685,27,602,29,"redirectType"],[685,39,602,41],[685,40,602,42],[685,43,602,45],[685,44,602,46,"storageItem"],[685,55,602,57],[685,60,602,62],[685,64,602,66],[685,68,602,70,"storageItem"],[685,79,602,81],[685,84,602,86],[685,89,602,91],[685,90,602,92],[685,93,602,95,"storageItem"],[685,104,602,106],[685,107,602,109],[685,109,602,111],[685,111,602,113,"split"],[685,116,602,118],[685,117,602,119],[685,120,602,122],[685,121,602,123],[686,6,603,8],[686,10,603,12],[687,8,604,12],[687,14,604,18],[688,10,604,20,"data"],[688,14,604,24],[689,10,604,26,"error"],[690,8,604,32],[690,9,604,33],[690,12,604,36],[690,18,604,42],[690,22,604,42,"_request"],[690,37,604,50],[690,39,604,51],[690,43,604,55],[690,44,604,56,"fetch"],[690,49,604,61],[690,51,604,63],[690,57,604,69],[690,59,604,71],[690,62,604,74],[690,66,604,78],[690,67,604,79,"url"],[690,70,604,82],[690,94,604,106],[690,96,604,108],[691,10,605,16,"headers"],[691,17,605,23],[691,19,605,25],[691,23,605,29],[691,24,605,30,"headers"],[691,31,605,37],[692,10,606,16,"body"],[692,14,606,20],[692,16,606,22],[693,12,607,20,"auth_code"],[693,21,607,29],[693,23,607,31,"authCode"],[693,31,607,39],[694,12,608,20,"code_verifier"],[694,25,608,33],[694,27,608,35,"codeVerifier"],[695,10,609,16],[695,11,609,17],[696,10,610,16,"xform"],[696,15,610,21],[696,17,610,23,"_sessionResponse"],[697,8,611,12],[697,9,611,13],[697,10,611,14],[698,8,612,12],[698,14,612,18],[698,18,612,18,"removeItemAsync"],[698,42,612,33],[698,44,612,34],[698,48,612,38],[698,49,612,39,"storage"],[698,56,612,46],[698,58,612,48],[698,61,612,51],[698,65,612,55],[698,66,612,56,"storageKey"],[698,76,612,66],[698,92,612,82],[698,93,612,83],[699,8,613,12],[699,12,613,16,"error"],[699,17,613,21],[699,19,613,23],[700,10,614,16],[700,16,614,22,"error"],[700,21,614,27],[701,8,615,12],[702,8,616,12],[702,12,616,16],[702,13,616,17,"data"],[702,17,616,21],[702,21,616,25],[702,22,616,26,"data"],[702,26,616,30],[702,27,616,31,"session"],[702,34,616,38],[702,38,616,42],[702,39,616,43,"data"],[702,43,616,47],[702,44,616,48,"user"],[702,48,616,52],[702,50,616,54],[703,10,617,16],[703,17,617,23],[704,12,618,20,"data"],[704,16,618,24],[704,18,618,26],[705,14,618,28,"user"],[705,18,618,32],[705,20,618,34],[705,24,618,38],[706,14,618,40,"session"],[706,21,618,47],[706,23,618,49],[706,27,618,53],[707,14,618,55,"redirectType"],[707,26,618,67],[707,28,618,69],[708,12,618,74],[708,13,618,75],[709,12,619,20,"error"],[709,17,619,25],[709,19,619,27],[709,23,619,31,"AuthInvalidTokenResponseError"],[709,60,619,60],[709,61,619,61],[710,10,620,16],[710,11,620,17],[711,8,621,12],[712,8,622,12],[712,12,622,16,"data"],[712,16,622,20],[712,17,622,21,"session"],[712,24,622,28],[712,26,622,30],[713,10,623,16],[713,16,623,22],[713,20,623,26],[713,21,623,27,"_saveSession"],[713,33,623,39],[713,34,623,40,"data"],[713,38,623,44],[713,39,623,45,"session"],[713,46,623,52],[713,47,623,53],[714,10,624,16],[714,16,624,22],[714,20,624,26],[714,21,624,27,"_notifyAllSubscribers"],[714,42,624,48],[714,43,624,49],[714,54,624,60],[714,56,624,62,"data"],[714,60,624,66],[714,61,624,67,"session"],[714,68,624,74],[714,69,624,75],[715,8,625,12],[716,8,626,12],[716,15,626,19],[717,10,626,21,"data"],[717,14,626,25],[717,16,626,27,"Object"],[717,22,626,33],[717,23,626,34,"assign"],[717,29,626,40],[717,30,626,41,"Object"],[717,36,626,47],[717,37,626,48,"assign"],[717,43,626,54],[717,44,626,55],[717,45,626,56],[717,46,626,57],[717,48,626,59,"data"],[717,52,626,63],[717,53,626,64],[717,55,626,66],[718,12,626,68,"redirectType"],[718,24,626,80],[718,26,626,82,"redirectType"],[718,38,626,94],[718,43,626,99],[718,47,626,103],[718,51,626,107,"redirectType"],[718,63,626,119],[718,68,626,124],[718,73,626,129],[718,74,626,130],[718,77,626,133,"redirectType"],[718,89,626,145],[718,92,626,148],[719,10,626,153],[719,11,626,154],[719,12,626,155],[720,10,626,157,"error"],[721,8,626,163],[721,9,626,164],[722,6,627,8],[722,7,627,9],[722,8,628,8],[722,15,628,15,"error"],[722,20,628,20],[722,22,628,22],[723,8,629,12],[723,12,629,16],[723,16,629,16,"isAuthError"],[723,35,629,27],[723,37,629,28,"error"],[723,42,629,33],[723,43,629,34],[723,45,629,36],[724,10,630,16],[724,17,630,23],[725,12,630,25,"data"],[725,16,630,29],[725,18,630,31],[726,14,630,33,"user"],[726,18,630,37],[726,20,630,39],[726,24,630,43],[727,14,630,45,"session"],[727,21,630,52],[727,23,630,54],[727,27,630,58],[728,14,630,60,"redirectType"],[728,26,630,72],[728,28,630,74],[729,12,630,79],[729,13,630,80],[730,12,630,82,"error"],[731,10,630,88],[731,11,630,89],[732,8,631,12],[733,8,632,12],[733,14,632,18,"error"],[733,19,632,23],[734,6,633,8],[735,4,634,4],[736,4,635,4],[737,0,636,0],[738,0,637,0],[739,0,638,0],[740,4,639,4],[740,10,639,10,"signInWithIdToken"],[740,27,639,27,"signInWithIdToken"],[740,28,639,28,"credentials"],[740,39,639,39],[740,41,639,41],[741,6,640,8],[741,10,640,12],[742,8,641,12],[742,14,641,18],[743,10,641,20,"options"],[743,17,641,27],[744,10,641,29,"provider"],[744,18,641,37],[745,10,641,39,"token"],[745,15,641,44],[746,10,641,46,"access_token"],[746,22,641,58],[747,10,641,60,"nonce"],[748,8,641,66],[748,9,641,67],[748,12,641,70,"credentials"],[748,23,641,81],[749,8,642,12],[749,14,642,18,"res"],[749,17,642,21],[749,20,642,24],[749,26,642,30],[749,30,642,30,"_request"],[749,45,642,38],[749,47,642,39],[749,51,642,43],[749,52,642,44,"fetch"],[749,57,642,49],[749,59,642,51],[749,65,642,57],[749,67,642,59],[749,70,642,62],[749,74,642,66],[749,75,642,67,"url"],[749,78,642,70],[749,106,642,98],[749,108,642,100],[750,10,643,16,"headers"],[750,17,643,23],[750,19,643,25],[750,23,643,29],[750,24,643,30,"headers"],[750,31,643,37],[751,10,644,16,"body"],[751,14,644,20],[751,16,644,22],[752,12,645,20,"provider"],[752,20,645,28],[753,12,646,20,"id_token"],[753,20,646,28],[753,22,646,30,"token"],[753,27,646,35],[754,12,647,20,"access_token"],[754,24,647,32],[755,12,648,20,"nonce"],[755,17,648,25],[756,12,649,20,"gotrue_meta_security"],[756,32,649,40],[756,34,649,42],[757,14,649,44,"captcha_token"],[757,27,649,57],[757,29,649,59,"options"],[757,36,649,66],[757,41,649,71],[757,45,649,75],[757,49,649,79,"options"],[757,56,649,86],[757,61,649,91],[757,66,649,96],[757,67,649,97],[757,70,649,100],[757,75,649,105],[757,76,649,106],[757,79,649,109,"options"],[757,86,649,116],[757,87,649,117,"captchaToken"],[758,12,649,130],[759,10,650,16],[759,11,650,17],[760,10,651,16,"xform"],[760,15,651,21],[760,17,651,23,"_sessionResponse"],[761,8,652,12],[761,9,652,13],[761,10,652,14],[762,8,653,12],[762,14,653,18],[763,10,653,20,"data"],[763,14,653,24],[764,10,653,26,"error"],[765,8,653,32],[765,9,653,33],[765,12,653,36,"res"],[765,15,653,39],[766,8,654,12],[766,12,654,16,"error"],[766,17,654,21],[766,19,654,23],[767,10,655,16],[767,17,655,23],[768,12,655,25,"data"],[768,16,655,29],[768,18,655,31],[769,14,655,33,"user"],[769,18,655,37],[769,20,655,39],[769,24,655,43],[770,14,655,45,"session"],[770,21,655,52],[770,23,655,54],[771,12,655,59],[771,13,655,60],[772,12,655,62,"error"],[773,10,655,68],[773,11,655,69],[774,8,656,12],[774,9,656,13],[774,15,657,17],[774,19,657,21],[774,20,657,22,"data"],[774,24,657,26],[774,28,657,30],[774,29,657,31,"data"],[774,33,657,35],[774,34,657,36,"session"],[774,41,657,43],[774,45,657,47],[774,46,657,48,"data"],[774,50,657,52],[774,51,657,53,"user"],[774,55,657,57],[774,57,657,59],[775,10,658,16],[775,17,658,23],[776,12,659,20,"data"],[776,16,659,24],[776,18,659,26],[777,14,659,28,"user"],[777,18,659,32],[777,20,659,34],[777,24,659,38],[778,14,659,40,"session"],[778,21,659,47],[778,23,659,49],[779,12,659,54],[779,13,659,55],[780,12,660,20,"error"],[780,17,660,25],[780,19,660,27],[780,23,660,31,"AuthInvalidTokenResponseError"],[780,60,660,60],[780,61,660,61],[781,10,661,16],[781,11,661,17],[782,8,662,12],[783,8,663,12],[783,12,663,16,"data"],[783,16,663,20],[783,17,663,21,"session"],[783,24,663,28],[783,26,663,30],[784,10,664,16],[784,16,664,22],[784,20,664,26],[784,21,664,27,"_saveSession"],[784,33,664,39],[784,34,664,40,"data"],[784,38,664,44],[784,39,664,45,"session"],[784,46,664,52],[784,47,664,53],[785,10,665,16],[785,16,665,22],[785,20,665,26],[785,21,665,27,"_notifyAllSubscribers"],[785,42,665,48],[785,43,665,49],[785,54,665,60],[785,56,665,62,"data"],[785,60,665,66],[785,61,665,67,"session"],[785,68,665,74],[785,69,665,75],[786,8,666,12],[787,8,667,12],[787,15,667,19],[788,10,667,21,"data"],[788,14,667,25],[789,10,667,27,"error"],[790,8,667,33],[790,9,667,34],[791,6,668,8],[791,7,668,9],[791,8,669,8],[791,15,669,15,"error"],[791,20,669,20],[791,22,669,22],[792,8,670,12],[792,12,670,16],[792,16,670,16,"isAuthError"],[792,35,670,27],[792,37,670,28,"error"],[792,42,670,33],[792,43,670,34],[792,45,670,36],[793,10,671,16],[793,17,671,23],[794,12,671,25,"data"],[794,16,671,29],[794,18,671,31],[795,14,671,33,"user"],[795,18,671,37],[795,20,671,39],[795,24,671,43],[796,14,671,45,"session"],[796,21,671,52],[796,23,671,54],[797,12,671,59],[797,13,671,60],[798,12,671,62,"error"],[799,10,671,68],[799,11,671,69],[800,8,672,12],[801,8,673,12],[801,14,673,18,"error"],[801,19,673,23],[802,6,674,8],[803,4,675,4],[804,4,676,4],[805,0,677,0],[806,0,678,0],[807,0,679,0],[808,0,680,0],[809,0,681,0],[810,0,682,0],[811,0,683,0],[812,0,684,0],[813,0,685,0],[814,0,686,0],[815,0,687,0],[816,0,688,0],[817,0,689,0],[818,0,690,0],[819,0,691,0],[820,0,692,0],[821,4,693,4],[821,10,693,10,"signInWithOtp"],[821,23,693,23,"signInWithOtp"],[821,24,693,24,"credentials"],[821,35,693,35],[821,37,693,37],[822,6,694,8],[822,10,694,12,"_a"],[822,12,694,14],[822,14,694,16,"_b"],[822,16,694,18],[822,18,694,20,"_c"],[822,20,694,22],[822,22,694,24,"_d"],[822,24,694,26],[822,26,694,28,"_e"],[822,28,694,30],[823,6,695,8],[823,10,695,12],[824,8,696,12],[824,12,696,16],[824,19,696,23],[824,23,696,27,"credentials"],[824,34,696,38],[824,36,696,40],[825,10,697,16],[825,16,697,22],[826,12,697,24,"email"],[826,17,697,29],[827,12,697,31,"options"],[828,10,697,39],[828,11,697,40],[828,14,697,43,"credentials"],[828,25,697,54],[829,10,698,16],[829,14,698,20,"codeChallenge"],[829,27,698,33],[829,30,698,36],[829,34,698,40],[830,10,699,16],[830,14,699,20,"codeChallengeMethod"],[830,33,699,39],[830,36,699,42],[830,40,699,46],[831,10,700,16],[831,14,700,20],[831,18,700,24],[831,19,700,25,"flowType"],[831,27,700,33],[831,32,700,38],[831,38,700,44],[831,40,700,46],[832,12,701,20],[833,12,702,20],[833,13,702,21,"codeChallenge"],[833,26,702,34],[833,28,702,36,"codeChallengeMethod"],[833,47,702,55],[833,48,702,56],[833,51,702,59],[833,57,702,65],[833,61,702,65,"getCodeChallengeAndMethod"],[833,95,702,90],[833,97,702,91],[833,101,702,95],[833,102,702,96,"storage"],[833,109,702,103],[833,111,702,105],[833,115,702,109],[833,116,702,110,"storageKey"],[833,126,702,120],[833,127,702,121],[834,10,703,16],[835,10,704,16],[835,16,704,22],[836,12,704,24,"error"],[837,10,704,30],[837,11,704,31],[837,14,704,34],[837,20,704,40],[837,24,704,40,"_request"],[837,39,704,48],[837,41,704,49],[837,45,704,53],[837,46,704,54,"fetch"],[837,51,704,59],[837,53,704,61],[837,59,704,67],[837,61,704,69],[837,64,704,72],[837,68,704,76],[837,69,704,77,"url"],[837,72,704,80],[837,78,704,86],[837,80,704,88],[838,12,705,20,"headers"],[838,19,705,27],[838,21,705,29],[838,25,705,33],[838,26,705,34,"headers"],[838,33,705,41],[839,12,706,20,"body"],[839,16,706,24],[839,18,706,26],[840,14,707,24,"email"],[840,19,707,29],[841,14,708,24,"data"],[841,18,708,28],[841,20,708,30],[841,21,708,31,"_a"],[841,23,708,33],[841,26,708,36,"options"],[841,33,708,43],[841,38,708,48],[841,42,708,52],[841,46,708,56,"options"],[841,53,708,63],[841,58,708,68],[841,63,708,73],[841,64,708,74],[841,67,708,77],[841,72,708,82],[841,73,708,83],[841,76,708,86,"options"],[841,83,708,93],[841,84,708,94,"data"],[841,88,708,98],[841,94,708,104],[841,98,708,108],[841,102,708,112,"_a"],[841,104,708,114],[841,109,708,119],[841,114,708,124],[841,115,708,125],[841,118,708,128,"_a"],[841,120,708,130],[841,123,708,133],[841,124,708,134],[841,125,708,135],[842,14,709,24,"create_user"],[842,25,709,35],[842,27,709,37],[842,28,709,38,"_b"],[842,30,709,40],[842,33,709,43,"options"],[842,40,709,50],[842,45,709,55],[842,49,709,59],[842,53,709,63,"options"],[842,60,709,70],[842,65,709,75],[842,70,709,80],[842,71,709,81],[842,74,709,84],[842,79,709,89],[842,80,709,90],[842,83,709,93,"options"],[842,90,709,100],[842,91,709,101,"shouldCreateUser"],[842,107,709,117],[842,113,709,123],[842,117,709,127],[842,121,709,131,"_b"],[842,123,709,133],[842,128,709,138],[842,133,709,143],[842,134,709,144],[842,137,709,147,"_b"],[842,139,709,149],[842,142,709,152],[842,146,709,156],[843,14,710,24,"gotrue_meta_security"],[843,34,710,44],[843,36,710,46],[844,16,710,48,"captcha_token"],[844,29,710,61],[844,31,710,63,"options"],[844,38,710,70],[844,43,710,75],[844,47,710,79],[844,51,710,83,"options"],[844,58,710,90],[844,63,710,95],[844,68,710,100],[844,69,710,101],[844,72,710,104],[844,77,710,109],[844,78,710,110],[844,81,710,113,"options"],[844,88,710,120],[844,89,710,121,"captchaToken"],[845,14,710,134],[845,15,710,135],[846,14,711,24,"code_challenge"],[846,28,711,38],[846,30,711,40,"codeChallenge"],[846,43,711,53],[847,14,712,24,"code_challenge_method"],[847,35,712,45],[847,37,712,47,"codeChallengeMethod"],[848,12,713,20],[848,13,713,21],[849,12,714,20,"redirectTo"],[849,22,714,30],[849,24,714,32,"options"],[849,31,714,39],[849,36,714,44],[849,40,714,48],[849,44,714,52,"options"],[849,51,714,59],[849,56,714,64],[849,61,714,69],[849,62,714,70],[849,65,714,73],[849,70,714,78],[849,71,714,79],[849,74,714,82,"options"],[849,81,714,89],[849,82,714,90,"emailRedirectTo"],[850,10,715,16],[850,11,715,17],[850,12,715,18],[851,10,716,16],[851,17,716,23],[852,12,716,25,"data"],[852,16,716,29],[852,18,716,31],[853,14,716,33,"user"],[853,18,716,37],[853,20,716,39],[853,24,716,43],[854,14,716,45,"session"],[854,21,716,52],[854,23,716,54],[855,12,716,59],[855,13,716,60],[856,12,716,62,"error"],[857,10,716,68],[857,11,716,69],[858,8,717,12],[859,8,718,12],[859,12,718,16],[859,19,718,23],[859,23,718,27,"credentials"],[859,34,718,38],[859,36,718,40],[860,10,719,16],[860,16,719,22],[861,12,719,24,"phone"],[861,17,719,29],[862,12,719,31,"options"],[863,10,719,39],[863,11,719,40],[863,14,719,43,"credentials"],[863,25,719,54],[864,10,720,16],[864,16,720,22],[865,12,720,24,"data"],[865,16,720,28],[866,12,720,30,"error"],[867,10,720,36],[867,11,720,37],[867,14,720,40],[867,20,720,46],[867,24,720,46,"_request"],[867,39,720,54],[867,41,720,55],[867,45,720,59],[867,46,720,60,"fetch"],[867,51,720,65],[867,53,720,67],[867,59,720,73],[867,61,720,75],[867,64,720,78],[867,68,720,82],[867,69,720,83,"url"],[867,72,720,86],[867,78,720,92],[867,80,720,94],[868,12,721,20,"headers"],[868,19,721,27],[868,21,721,29],[868,25,721,33],[868,26,721,34,"headers"],[868,33,721,41],[869,12,722,20,"body"],[869,16,722,24],[869,18,722,26],[870,14,723,24,"phone"],[870,19,723,29],[871,14,724,24,"data"],[871,18,724,28],[871,20,724,30],[871,21,724,31,"_c"],[871,23,724,33],[871,26,724,36,"options"],[871,33,724,43],[871,38,724,48],[871,42,724,52],[871,46,724,56,"options"],[871,53,724,63],[871,58,724,68],[871,63,724,73],[871,64,724,74],[871,67,724,77],[871,72,724,82],[871,73,724,83],[871,76,724,86,"options"],[871,83,724,93],[871,84,724,94,"data"],[871,88,724,98],[871,94,724,104],[871,98,724,108],[871,102,724,112,"_c"],[871,104,724,114],[871,109,724,119],[871,114,724,124],[871,115,724,125],[871,118,724,128,"_c"],[871,120,724,130],[871,123,724,133],[871,124,724,134],[871,125,724,135],[872,14,725,24,"create_user"],[872,25,725,35],[872,27,725,37],[872,28,725,38,"_d"],[872,30,725,40],[872,33,725,43,"options"],[872,40,725,50],[872,45,725,55],[872,49,725,59],[872,53,725,63,"options"],[872,60,725,70],[872,65,725,75],[872,70,725,80],[872,71,725,81],[872,74,725,84],[872,79,725,89],[872,80,725,90],[872,83,725,93,"options"],[872,90,725,100],[872,91,725,101,"shouldCreateUser"],[872,107,725,117],[872,113,725,123],[872,117,725,127],[872,121,725,131,"_d"],[872,123,725,133],[872,128,725,138],[872,133,725,143],[872,134,725,144],[872,137,725,147,"_d"],[872,139,725,149],[872,142,725,152],[872,146,725,156],[873,14,726,24,"gotrue_meta_security"],[873,34,726,44],[873,36,726,46],[874,16,726,48,"captcha_token"],[874,29,726,61],[874,31,726,63,"options"],[874,38,726,70],[874,43,726,75],[874,47,726,79],[874,51,726,83,"options"],[874,58,726,90],[874,63,726,95],[874,68,726,100],[874,69,726,101],[874,72,726,104],[874,77,726,109],[874,78,726,110],[874,81,726,113,"options"],[874,88,726,120],[874,89,726,121,"captchaToken"],[875,14,726,134],[875,15,726,135],[876,14,727,24,"channel"],[876,21,727,31],[876,23,727,33],[876,24,727,34,"_e"],[876,26,727,36],[876,29,727,39,"options"],[876,36,727,46],[876,41,727,51],[876,45,727,55],[876,49,727,59,"options"],[876,56,727,66],[876,61,727,71],[876,66,727,76],[876,67,727,77],[876,70,727,80],[876,75,727,85],[876,76,727,86],[876,79,727,89,"options"],[876,86,727,96],[876,87,727,97,"channel"],[876,94,727,104],[876,100,727,110],[876,104,727,114],[876,108,727,118,"_e"],[876,110,727,120],[876,115,727,125],[876,120,727,130],[876,121,727,131],[876,124,727,134,"_e"],[876,126,727,136],[876,129,727,139],[877,12,728,20],[878,10,729,16],[878,11,729,17],[878,12,729,18],[879,10,730,16],[879,17,730,23],[880,12,730,25,"data"],[880,16,730,29],[880,18,730,31],[881,14,730,33,"user"],[881,18,730,37],[881,20,730,39],[881,24,730,43],[882,14,730,45,"session"],[882,21,730,52],[882,23,730,54],[882,27,730,58],[883,14,730,60,"messageId"],[883,23,730,69],[883,25,730,71,"data"],[883,29,730,75],[883,34,730,80],[883,38,730,84],[883,42,730,88,"data"],[883,46,730,92],[883,51,730,97],[883,56,730,102],[883,57,730,103],[883,60,730,106],[883,65,730,111],[883,66,730,112],[883,69,730,115,"data"],[883,73,730,119],[883,74,730,120,"message_id"],[884,12,730,131],[884,13,730,132],[885,12,730,134,"error"],[886,10,730,140],[886,11,730,141],[887,8,731,12],[888,8,732,12],[888,14,732,18],[888,18,732,22,"AuthInvalidCredentialsError"],[888,53,732,49],[888,54,732,50],[888,105,732,101],[888,106,732,102],[889,6,733,8],[889,7,733,9],[889,8,734,8],[889,15,734,15,"error"],[889,20,734,20],[889,22,734,22],[890,8,735,12],[890,12,735,16],[890,16,735,16,"isAuthError"],[890,35,735,27],[890,37,735,28,"error"],[890,42,735,33],[890,43,735,34],[890,45,735,36],[891,10,736,16],[891,17,736,23],[892,12,736,25,"data"],[892,16,736,29],[892,18,736,31],[893,14,736,33,"user"],[893,18,736,37],[893,20,736,39],[893,24,736,43],[894,14,736,45,"session"],[894,21,736,52],[894,23,736,54],[895,12,736,59],[895,13,736,60],[896,12,736,62,"error"],[897,10,736,68],[897,11,736,69],[898,8,737,12],[899,8,738,12],[899,14,738,18,"error"],[899,19,738,23],[900,6,739,8],[901,4,740,4],[902,4,741,4],[903,0,742,0],[904,0,743,0],[905,4,744,4],[905,10,744,10,"verifyOtp"],[905,19,744,19,"verifyOtp"],[905,20,744,20,"params"],[905,26,744,26],[905,28,744,28],[906,6,745,8],[906,10,745,12,"_a"],[906,12,745,14],[906,14,745,16,"_b"],[906,16,745,18],[907,6,746,8],[907,10,746,12],[908,8,747,12],[908,12,747,16,"redirectTo"],[908,22,747,26],[908,25,747,29,"undefined"],[908,34,747,38],[909,8,748,12],[909,12,748,16,"captchaToken"],[909,24,748,28],[909,27,748,31,"undefined"],[909,36,748,40],[910,8,749,12],[910,12,749,16],[910,21,749,25],[910,25,749,29,"params"],[910,31,749,35],[910,33,749,37],[911,10,750,16,"redirectTo"],[911,20,750,26],[911,23,750,29],[911,24,750,30,"_a"],[911,26,750,32],[911,29,750,35,"params"],[911,35,750,41],[911,36,750,42,"options"],[911,43,750,49],[911,49,750,55],[911,53,750,59],[911,57,750,63,"_a"],[911,59,750,65],[911,64,750,70],[911,69,750,75],[911,70,750,76],[911,73,750,79],[911,78,750,84],[911,79,750,85],[911,82,750,88,"_a"],[911,84,750,90],[911,85,750,91,"redirectTo"],[911,95,750,101],[912,10,751,16,"captchaToken"],[912,22,751,28],[912,25,751,31],[912,26,751,32,"_b"],[912,28,751,34],[912,31,751,37,"params"],[912,37,751,43],[912,38,751,44,"options"],[912,45,751,51],[912,51,751,57],[912,55,751,61],[912,59,751,65,"_b"],[912,61,751,67],[912,66,751,72],[912,71,751,77],[912,72,751,78],[912,75,751,81],[912,80,751,86],[912,81,751,87],[912,84,751,90,"_b"],[912,86,751,92],[912,87,751,93,"captchaToken"],[912,99,751,105],[913,8,752,12],[914,8,753,12],[914,14,753,18],[915,10,753,20,"data"],[915,14,753,24],[916,10,753,26,"error"],[917,8,753,32],[917,9,753,33],[917,12,753,36],[917,18,753,42],[917,22,753,42,"_request"],[917,37,753,50],[917,39,753,51],[917,43,753,55],[917,44,753,56,"fetch"],[917,49,753,61],[917,51,753,63],[917,57,753,69],[917,59,753,71],[917,62,753,74],[917,66,753,78],[917,67,753,79,"url"],[917,70,753,82],[917,79,753,91],[917,81,753,93],[918,10,754,16,"headers"],[918,17,754,23],[918,19,754,25],[918,23,754,29],[918,24,754,30,"headers"],[918,31,754,37],[919,10,755,16,"body"],[919,14,755,20],[919,16,755,22,"Object"],[919,22,755,28],[919,23,755,29,"assign"],[919,29,755,35],[919,30,755,36,"Object"],[919,36,755,42],[919,37,755,43,"assign"],[919,43,755,49],[919,44,755,50],[919,45,755,51],[919,46,755,52],[919,48,755,54,"params"],[919,54,755,60],[919,55,755,61],[919,57,755,63],[920,12,755,65,"gotrue_meta_security"],[920,32,755,85],[920,34,755,87],[921,14,755,89,"captcha_token"],[921,27,755,102],[921,29,755,104,"captchaToken"],[922,12,755,117],[923,10,755,119],[923,11,755,120],[923,12,755,121],[924,10,756,16,"redirectTo"],[924,20,756,26],[925,10,757,16,"xform"],[925,15,757,21],[925,17,757,23,"_sessionResponse"],[926,8,758,12],[926,9,758,13],[926,10,758,14],[927,8,759,12],[927,12,759,16,"error"],[927,17,759,21],[927,19,759,23],[928,10,760,16],[928,16,760,22,"error"],[928,21,760,27],[929,8,761,12],[930,8,762,12],[930,12,762,16],[930,13,762,17,"data"],[930,17,762,21],[930,19,762,23],[931,10,763,16],[931,16,763,22],[931,20,763,26,"Error"],[931,25,763,31],[931,26,763,32],[931,68,763,74],[931,69,763,75],[932,8,764,12],[933,8,765,12],[933,14,765,18,"session"],[933,21,765,25],[933,24,765,28,"data"],[933,28,765,32],[933,29,765,33,"session"],[933,36,765,40],[934,8,766,12],[934,14,766,18,"user"],[934,18,766,22],[934,21,766,25,"data"],[934,25,766,29],[934,26,766,30,"user"],[934,30,766,34],[935,8,767,12],[935,12,767,16,"session"],[935,19,767,23],[935,24,767,28],[935,28,767,32],[935,32,767,36,"session"],[935,39,767,43],[935,44,767,48],[935,49,767,53],[935,50,767,54],[935,53,767,57],[935,58,767,62],[935,59,767,63],[935,62,767,66,"session"],[935,69,767,73],[935,70,767,74,"access_token"],[935,82,767,86],[935,84,767,88],[936,10,768,16],[936,16,768,22],[936,20,768,26],[936,21,768,27,"_saveSession"],[936,33,768,39],[936,34,768,40,"session"],[936,41,768,47],[936,42,768,48],[937,10,769,16],[937,16,769,22],[937,20,769,26],[937,21,769,27,"_notifyAllSubscribers"],[937,42,769,48],[937,43,769,49,"params"],[937,49,769,55],[937,50,769,56,"type"],[937,54,769,60],[937,58,769,64],[937,68,769,74],[937,71,769,77],[937,90,769,96],[937,93,769,99],[937,104,769,110],[937,106,769,112,"session"],[937,113,769,119],[937,114,769,120],[938,8,770,12],[939,8,771,12],[939,15,771,19],[940,10,771,21,"data"],[940,14,771,25],[940,16,771,27],[941,12,771,29,"user"],[941,16,771,33],[942,12,771,35,"session"],[943,10,771,43],[943,11,771,44],[944,10,771,46,"error"],[944,15,771,51],[944,17,771,53],[945,8,771,58],[945,9,771,59],[946,6,772,8],[946,7,772,9],[946,8,773,8],[946,15,773,15,"error"],[946,20,773,20],[946,22,773,22],[947,8,774,12],[947,12,774,16],[947,16,774,16,"isAuthError"],[947,35,774,27],[947,37,774,28,"error"],[947,42,774,33],[947,43,774,34],[947,45,774,36],[948,10,775,16],[948,17,775,23],[949,12,775,25,"data"],[949,16,775,29],[949,18,775,31],[950,14,775,33,"user"],[950,18,775,37],[950,20,775,39],[950,24,775,43],[951,14,775,45,"session"],[951,21,775,52],[951,23,775,54],[952,12,775,59],[952,13,775,60],[953,12,775,62,"error"],[954,10,775,68],[954,11,775,69],[955,8,776,12],[956,8,777,12],[956,14,777,18,"error"],[956,19,777,23],[957,6,778,8],[958,4,779,4],[959,4,780,4],[960,0,781,0],[961,0,782,0],[962,0,783,0],[963,0,784,0],[964,0,785,0],[965,0,786,0],[966,0,787,0],[967,0,788,0],[968,0,789,0],[969,0,790,0],[970,0,791,0],[971,0,792,0],[972,0,793,0],[973,4,794,4],[973,10,794,10,"signInWithSSO"],[973,23,794,23,"signInWithSSO"],[973,24,794,24,"params"],[973,30,794,30],[973,32,794,32],[974,6,795,8],[974,10,795,12,"_a"],[974,12,795,14],[974,14,795,16,"_b"],[974,16,795,18],[974,18,795,20,"_c"],[974,20,795,22],[975,6,796,8],[975,10,796,12],[976,8,797,12],[976,12,797,16,"codeChallenge"],[976,25,797,29],[976,28,797,32],[976,32,797,36],[977,8,798,12],[977,12,798,16,"codeChallengeMethod"],[977,31,798,35],[977,34,798,38],[977,38,798,42],[978,8,799,12],[978,12,799,16],[978,16,799,20],[978,17,799,21,"flowType"],[978,25,799,29],[978,30,799,34],[978,36,799,40],[978,38,799,42],[979,10,800,16],[980,10,801,16],[980,11,801,17,"codeChallenge"],[980,24,801,30],[980,26,801,32,"codeChallengeMethod"],[980,45,801,51],[980,46,801,52],[980,49,801,55],[980,55,801,61],[980,59,801,61,"getCodeChallengeAndMethod"],[980,93,801,86],[980,95,801,87],[980,99,801,91],[980,100,801,92,"storage"],[980,107,801,99],[980,109,801,101],[980,113,801,105],[980,114,801,106,"storageKey"],[980,124,801,116],[980,125,801,117],[981,8,802,12],[982,8,803,12],[982,15,803,19],[982,21,803,25],[982,25,803,25,"_request"],[982,40,803,33],[982,42,803,34],[982,46,803,38],[982,47,803,39,"fetch"],[982,52,803,44],[982,54,803,46],[982,60,803,52],[982,62,803,54],[982,65,803,57],[982,69,803,61],[982,70,803,62,"url"],[982,73,803,65],[982,79,803,71],[982,81,803,73],[983,10,804,16,"body"],[983,14,804,20],[983,16,804,22,"Object"],[983,22,804,28],[983,23,804,29,"assign"],[983,29,804,35],[983,30,804,36,"Object"],[983,36,804,42],[983,37,804,43,"assign"],[983,43,804,49],[983,44,804,50,"Object"],[983,50,804,56],[983,51,804,57,"assign"],[983,57,804,63],[983,58,804,64,"Object"],[983,64,804,70],[983,65,804,71,"assign"],[983,71,804,77],[983,72,804,78,"Object"],[983,78,804,84],[983,79,804,85,"assign"],[983,85,804,91],[983,86,804,92],[983,87,804,93],[983,88,804,94],[983,90,804,97],[983,102,804,109],[983,106,804,113,"params"],[983,112,804,119],[983,115,804,122],[984,12,804,124,"provider_id"],[984,23,804,135],[984,25,804,137,"params"],[984,31,804,143],[984,32,804,144,"providerId"],[985,10,804,155],[985,11,804,156],[985,14,804,159],[985,18,804,164],[985,19,804,165],[985,21,804,168],[985,29,804,176],[985,33,804,180,"params"],[985,39,804,186],[985,42,804,189],[986,12,804,191,"domain"],[986,18,804,197],[986,20,804,199,"params"],[986,26,804,205],[986,27,804,206,"domain"],[987,10,804,213],[987,11,804,214],[987,14,804,217],[987,18,804,222],[987,19,804,223],[987,21,804,225],[988,12,804,227,"redirect_to"],[988,23,804,238],[988,25,804,240],[988,26,804,241,"_b"],[988,28,804,243],[988,31,804,246],[988,32,804,247,"_a"],[988,34,804,249],[988,37,804,252,"params"],[988,43,804,258],[988,44,804,259,"options"],[988,51,804,266],[988,57,804,272],[988,61,804,276],[988,65,804,280,"_a"],[988,67,804,282],[988,72,804,287],[988,77,804,292],[988,78,804,293],[988,81,804,296],[988,86,804,301],[988,87,804,302],[988,90,804,305,"_a"],[988,92,804,307],[988,93,804,308,"redirectTo"],[988,103,804,318],[988,109,804,324],[988,113,804,328],[988,117,804,332,"_b"],[988,119,804,334],[988,124,804,339],[988,129,804,344],[988,130,804,345],[988,133,804,348,"_b"],[988,135,804,350],[988,138,804,353,"undefined"],[989,10,804,363],[989,11,804,364],[989,12,804,365],[989,14,804,368],[989,15,804,369],[989,16,804,370,"_c"],[989,18,804,372],[989,21,804,375,"params"],[989,27,804,381],[989,32,804,386],[989,36,804,390],[989,40,804,394,"params"],[989,46,804,400],[989,51,804,405],[989,56,804,410],[989,57,804,411],[989,60,804,414],[989,65,804,419],[989,66,804,420],[989,69,804,423,"params"],[989,75,804,429],[989,76,804,430,"options"],[989,83,804,437],[989,89,804,443],[989,93,804,447],[989,97,804,451,"_c"],[989,99,804,453],[989,104,804,458],[989,109,804,463],[989,110,804,464],[989,113,804,467],[989,118,804,472],[989,119,804,473],[989,122,804,476,"_c"],[989,124,804,478],[989,125,804,479,"captchaToken"],[989,137,804,491],[989,141,805,22],[990,12,805,24,"gotrue_meta_security"],[990,32,805,44],[990,34,805,46],[991,14,805,48,"captcha_token"],[991,27,805,61],[991,29,805,63,"params"],[991,35,805,69],[991,36,805,70,"options"],[991,43,805,77],[991,44,805,78,"captchaToken"],[992,12,805,91],[993,10,805,93],[993,11,805,94],[993,14,806,22],[993,18,806,27],[993,19,806,28],[993,21,806,30],[994,12,806,32,"skip_http_redirect"],[994,30,806,50],[994,32,806,52],[994,36,806,56],[995,12,806,58,"code_challenge"],[995,26,806,72],[995,28,806,74,"codeChallenge"],[995,41,806,87],[996,12,806,89,"code_challenge_method"],[996,33,806,110],[996,35,806,112,"codeChallengeMethod"],[997,10,806,132],[997,11,806,133],[997,12,806,134],[998,10,807,16,"headers"],[998,17,807,23],[998,19,807,25],[998,23,807,29],[998,24,807,30,"headers"],[998,31,807,37],[999,10,808,16,"xform"],[999,15,808,21],[999,17,808,23,"_ssoResponse"],[1000,8,809,12],[1000,9,809,13],[1000,10,809,14],[1001,6,810,8],[1001,7,810,9],[1001,8,811,8],[1001,15,811,15,"error"],[1001,20,811,20],[1001,22,811,22],[1002,8,812,12],[1002,12,812,16],[1002,16,812,16,"isAuthError"],[1002,35,812,27],[1002,37,812,28,"error"],[1002,42,812,33],[1002,43,812,34],[1002,45,812,36],[1003,10,813,16],[1003,17,813,23],[1004,12,813,25,"data"],[1004,16,813,29],[1004,18,813,31],[1004,22,813,35],[1005,12,813,37,"error"],[1006,10,813,43],[1006,11,813,44],[1007,8,814,12],[1008,8,815,12],[1008,14,815,18,"error"],[1008,19,815,23],[1009,6,816,8],[1010,4,817,4],[1011,4,818,4],[1012,0,819,0],[1013,0,820,0],[1014,0,821,0],[1015,4,822,4],[1015,10,822,10,"reauthenticate"],[1015,24,822,24,"reauthenticate"],[1015,25,822,24],[1015,27,822,27],[1016,6,823,8],[1016,12,823,14],[1016,16,823,18],[1016,17,823,19,"initializePromise"],[1016,34,823,36],[1017,6,824,8],[1017,13,824,15],[1017,19,824,21],[1017,23,824,25],[1017,24,824,26,"_acquireLock"],[1017,36,824,38],[1017,37,824,39],[1017,38,824,40],[1017,39,824,41],[1017,41,824,43],[1017,53,824,55],[1018,8,825,12],[1018,15,825,19],[1018,21,825,25],[1018,25,825,29],[1018,26,825,30,"_reauthenticate"],[1018,41,825,45],[1018,42,825,46],[1018,43,825,47],[1019,6,826,8],[1019,7,826,9],[1019,8,826,10],[1020,4,827,4],[1021,4,828,4],[1021,10,828,10,"_reauthenticate"],[1021,25,828,25,"_reauthenticate"],[1021,26,828,25],[1021,28,828,28],[1022,6,829,8],[1022,10,829,12],[1023,8,830,12],[1023,15,830,19],[1023,21,830,25],[1023,25,830,29],[1023,26,830,30,"_useSession"],[1023,37,830,41],[1023,38,830,42],[1023,44,830,49,"result"],[1023,50,830,55],[1023,54,830,60],[1024,10,831,16],[1024,16,831,22],[1025,12,831,24,"data"],[1025,16,831,28],[1025,18,831,30],[1026,14,831,32,"session"],[1027,12,831,40],[1027,13,831,41],[1028,12,831,43,"error"],[1028,17,831,48],[1028,19,831,50,"sessionError"],[1029,10,831,64],[1029,11,831,65],[1029,14,831,68,"result"],[1029,20,831,74],[1030,10,832,16],[1030,14,832,20,"sessionError"],[1030,26,832,32],[1030,28,833,20],[1030,34,833,26,"sessionError"],[1030,46,833,38],[1031,10,834,16],[1031,14,834,20],[1031,15,834,21,"session"],[1031,22,834,28],[1031,24,835,20],[1031,30,835,26],[1031,34,835,30,"AuthSessionMissingError"],[1031,65,835,53],[1031,66,835,54],[1031,67,835,55],[1032,10,836,16],[1032,16,836,22],[1033,12,836,24,"error"],[1034,10,836,30],[1034,11,836,31],[1034,14,836,34],[1034,20,836,40],[1034,24,836,40,"_request"],[1034,39,836,48],[1034,41,836,49],[1034,45,836,53],[1034,46,836,54,"fetch"],[1034,51,836,59],[1034,53,836,61],[1034,58,836,66],[1034,60,836,68],[1034,63,836,71],[1034,67,836,75],[1034,68,836,76,"url"],[1034,71,836,79],[1034,88,836,96],[1034,90,836,98],[1035,12,837,20,"headers"],[1035,19,837,27],[1035,21,837,29],[1035,25,837,33],[1035,26,837,34,"headers"],[1035,33,837,41],[1036,12,838,20,"jwt"],[1036,15,838,23],[1036,17,838,25,"session"],[1036,24,838,32],[1036,25,838,33,"access_token"],[1037,10,839,16],[1037,11,839,17],[1037,12,839,18],[1038,10,840,16],[1038,17,840,23],[1039,12,840,25,"data"],[1039,16,840,29],[1039,18,840,31],[1040,14,840,33,"user"],[1040,18,840,37],[1040,20,840,39],[1040,24,840,43],[1041,14,840,45,"session"],[1041,21,840,52],[1041,23,840,54],[1042,12,840,59],[1042,13,840,60],[1043,12,840,62,"error"],[1044,10,840,68],[1044,11,840,69],[1045,8,841,12],[1045,9,841,13],[1045,10,841,14],[1046,6,842,8],[1046,7,842,9],[1046,8,843,8],[1046,15,843,15,"error"],[1046,20,843,20],[1046,22,843,22],[1047,8,844,12],[1047,12,844,16],[1047,16,844,16,"isAuthError"],[1047,35,844,27],[1047,37,844,28,"error"],[1047,42,844,33],[1047,43,844,34],[1047,45,844,36],[1048,10,845,16],[1048,17,845,23],[1049,12,845,25,"data"],[1049,16,845,29],[1049,18,845,31],[1050,14,845,33,"user"],[1050,18,845,37],[1050,20,845,39],[1050,24,845,43],[1051,14,845,45,"session"],[1051,21,845,52],[1051,23,845,54],[1052,12,845,59],[1052,13,845,60],[1053,12,845,62,"error"],[1054,10,845,68],[1054,11,845,69],[1055,8,846,12],[1056,8,847,12],[1056,14,847,18,"error"],[1056,19,847,23],[1057,6,848,8],[1058,4,849,4],[1059,4,850,4],[1060,0,851,0],[1061,0,852,0],[1062,4,853,4],[1062,10,853,10,"resend"],[1062,16,853,16,"resend"],[1062,17,853,17,"credentials"],[1062,28,853,28],[1062,30,853,30],[1063,6,854,8],[1063,10,854,12],[1064,8,855,12],[1064,14,855,18,"endpoint"],[1064,22,855,26],[1064,25,855,29],[1064,28,855,32],[1064,32,855,36],[1064,33,855,37,"url"],[1064,36,855,40],[1064,45,855,49],[1065,8,856,12],[1065,12,856,16],[1065,19,856,23],[1065,23,856,27,"credentials"],[1065,34,856,38],[1065,36,856,40],[1066,10,857,16],[1066,16,857,22],[1067,12,857,24,"email"],[1067,17,857,29],[1068,12,857,31,"type"],[1068,16,857,35],[1069,12,857,37,"options"],[1070,10,857,45],[1070,11,857,46],[1070,14,857,49,"credentials"],[1070,25,857,60],[1071,10,858,16],[1071,16,858,22],[1072,12,858,24,"error"],[1073,10,858,30],[1073,11,858,31],[1073,14,858,34],[1073,20,858,40],[1073,24,858,40,"_request"],[1073,39,858,48],[1073,41,858,49],[1073,45,858,53],[1073,46,858,54,"fetch"],[1073,51,858,59],[1073,53,858,61],[1073,59,858,67],[1073,61,858,69,"endpoint"],[1073,69,858,77],[1073,71,858,79],[1074,12,859,20,"headers"],[1074,19,859,27],[1074,21,859,29],[1074,25,859,33],[1074,26,859,34,"headers"],[1074,33,859,41],[1075,12,860,20,"body"],[1075,16,860,24],[1075,18,860,26],[1076,14,861,24,"email"],[1076,19,861,29],[1077,14,862,24,"type"],[1077,18,862,28],[1078,14,863,24,"gotrue_meta_security"],[1078,34,863,44],[1078,36,863,46],[1079,16,863,48,"captcha_token"],[1079,29,863,61],[1079,31,863,63,"options"],[1079,38,863,70],[1079,43,863,75],[1079,47,863,79],[1079,51,863,83,"options"],[1079,58,863,90],[1079,63,863,95],[1079,68,863,100],[1079,69,863,101],[1079,72,863,104],[1079,77,863,109],[1079,78,863,110],[1079,81,863,113,"options"],[1079,88,863,120],[1079,89,863,121,"captchaToken"],[1080,14,863,134],[1081,12,864,20],[1081,13,864,21],[1082,12,865,20,"redirectTo"],[1082,22,865,30],[1082,24,865,32,"options"],[1082,31,865,39],[1082,36,865,44],[1082,40,865,48],[1082,44,865,52,"options"],[1082,51,865,59],[1082,56,865,64],[1082,61,865,69],[1082,62,865,70],[1082,65,865,73],[1082,70,865,78],[1082,71,865,79],[1082,74,865,82,"options"],[1082,81,865,89],[1082,82,865,90,"emailRedirectTo"],[1083,10,866,16],[1083,11,866,17],[1083,12,866,18],[1084,10,867,16],[1084,17,867,23],[1085,12,867,25,"data"],[1085,16,867,29],[1085,18,867,31],[1086,14,867,33,"user"],[1086,18,867,37],[1086,20,867,39],[1086,24,867,43],[1087,14,867,45,"session"],[1087,21,867,52],[1087,23,867,54],[1088,12,867,59],[1088,13,867,60],[1089,12,867,62,"error"],[1090,10,867,68],[1090,11,867,69],[1091,8,868,12],[1091,9,868,13],[1091,15,869,17],[1091,19,869,21],[1091,26,869,28],[1091,30,869,32,"credentials"],[1091,41,869,43],[1091,43,869,45],[1092,10,870,16],[1092,16,870,22],[1093,12,870,24,"phone"],[1093,17,870,29],[1094,12,870,31,"type"],[1094,16,870,35],[1095,12,870,37,"options"],[1096,10,870,45],[1096,11,870,46],[1096,14,870,49,"credentials"],[1096,25,870,60],[1097,10,871,16],[1097,16,871,22],[1098,12,871,24,"data"],[1098,16,871,28],[1099,12,871,30,"error"],[1100,10,871,36],[1100,11,871,37],[1100,14,871,40],[1100,20,871,46],[1100,24,871,46,"_request"],[1100,39,871,54],[1100,41,871,55],[1100,45,871,59],[1100,46,871,60,"fetch"],[1100,51,871,65],[1100,53,871,67],[1100,59,871,73],[1100,61,871,75,"endpoint"],[1100,69,871,83],[1100,71,871,85],[1101,12,872,20,"headers"],[1101,19,872,27],[1101,21,872,29],[1101,25,872,33],[1101,26,872,34,"headers"],[1101,33,872,41],[1102,12,873,20,"body"],[1102,16,873,24],[1102,18,873,26],[1103,14,874,24,"phone"],[1103,19,874,29],[1104,14,875,24,"type"],[1104,18,875,28],[1105,14,876,24,"gotrue_meta_security"],[1105,34,876,44],[1105,36,876,46],[1106,16,876,48,"captcha_token"],[1106,29,876,61],[1106,31,876,63,"options"],[1106,38,876,70],[1106,43,876,75],[1106,47,876,79],[1106,51,876,83,"options"],[1106,58,876,90],[1106,63,876,95],[1106,68,876,100],[1106,69,876,101],[1106,72,876,104],[1106,77,876,109],[1106,78,876,110],[1106,81,876,113,"options"],[1106,88,876,120],[1106,89,876,121,"captchaToken"],[1107,14,876,134],[1108,12,877,20],[1109,10,878,16],[1109,11,878,17],[1109,12,878,18],[1110,10,879,16],[1110,17,879,23],[1111,12,879,25,"data"],[1111,16,879,29],[1111,18,879,31],[1112,14,879,33,"user"],[1112,18,879,37],[1112,20,879,39],[1112,24,879,43],[1113,14,879,45,"session"],[1113,21,879,52],[1113,23,879,54],[1113,27,879,58],[1114,14,879,60,"messageId"],[1114,23,879,69],[1114,25,879,71,"data"],[1114,29,879,75],[1114,34,879,80],[1114,38,879,84],[1114,42,879,88,"data"],[1114,46,879,92],[1114,51,879,97],[1114,56,879,102],[1114,57,879,103],[1114,60,879,106],[1114,65,879,111],[1114,66,879,112],[1114,69,879,115,"data"],[1114,73,879,119],[1114,74,879,120,"message_id"],[1115,12,879,131],[1115,13,879,132],[1116,12,879,134,"error"],[1117,10,879,140],[1117,11,879,141],[1118,8,880,12],[1119,8,881,12],[1119,14,881,18],[1119,18,881,22,"AuthInvalidCredentialsError"],[1119,53,881,49],[1119,54,881,50],[1119,115,881,111],[1119,116,881,112],[1120,6,882,8],[1120,7,882,9],[1120,8,883,8],[1120,15,883,15,"error"],[1120,20,883,20],[1120,22,883,22],[1121,8,884,12],[1121,12,884,16],[1121,16,884,16,"isAuthError"],[1121,35,884,27],[1121,37,884,28,"error"],[1121,42,884,33],[1121,43,884,34],[1121,45,884,36],[1122,10,885,16],[1122,17,885,23],[1123,12,885,25,"data"],[1123,16,885,29],[1123,18,885,31],[1124,14,885,33,"user"],[1124,18,885,37],[1124,20,885,39],[1124,24,885,43],[1125,14,885,45,"session"],[1125,21,885,52],[1125,23,885,54],[1126,12,885,59],[1126,13,885,60],[1127,12,885,62,"error"],[1128,10,885,68],[1128,11,885,69],[1129,8,886,12],[1130,8,887,12],[1130,14,887,18,"error"],[1130,19,887,23],[1131,6,888,8],[1132,4,889,4],[1133,4,890,4],[1134,0,891,0],[1135,0,892,0],[1136,0,893,0],[1137,0,894,0],[1138,0,895,0],[1139,0,896,0],[1140,0,897,0],[1141,0,898,0],[1142,0,899,0],[1143,0,900,0],[1144,4,901,4],[1144,10,901,10,"getSession"],[1144,20,901,20,"getSession"],[1144,21,901,20],[1144,23,901,23],[1145,6,902,8],[1145,12,902,14],[1145,16,902,18],[1145,17,902,19,"initializePromise"],[1145,34,902,36],[1146,6,903,8],[1146,12,903,14,"result"],[1146,18,903,20],[1146,21,903,23],[1146,27,903,29],[1146,31,903,33],[1146,32,903,34,"_acquireLock"],[1146,44,903,46],[1146,45,903,47],[1146,46,903,48],[1146,47,903,49],[1146,49,903,51],[1146,61,903,63],[1147,8,904,12],[1147,15,904,19],[1147,19,904,23],[1147,20,904,24,"_useSession"],[1147,31,904,35],[1147,32,904,36],[1147,38,904,43,"result"],[1147,44,904,49],[1147,48,904,54],[1148,10,905,16],[1148,17,905,23,"result"],[1148,23,905,29],[1149,8,906,12],[1149,9,906,13],[1149,10,906,14],[1150,6,907,8],[1150,7,907,9],[1150,8,907,10],[1151,6,908,8],[1151,13,908,15,"result"],[1151,19,908,21],[1152,4,909,4],[1153,4,910,4],[1154,0,911,0],[1155,0,912,0],[1156,4,913,4],[1156,10,913,10,"_acquireLock"],[1156,22,913,22,"_acquireLock"],[1156,23,913,23,"acquireTimeout"],[1156,37,913,37],[1156,39,913,39,"fn"],[1156,41,913,41],[1156,43,913,43],[1157,6,914,8],[1157,10,914,12],[1157,11,914,13,"_debug"],[1157,17,914,19],[1157,18,914,20],[1157,33,914,35],[1157,35,914,37],[1157,42,914,44],[1157,44,914,46,"acquireTimeout"],[1157,58,914,60],[1157,59,914,61],[1158,6,915,8],[1158,10,915,12],[1159,8,916,12],[1159,12,916,16],[1159,16,916,20],[1159,17,916,21,"lockAcquired"],[1159,29,916,33],[1159,31,916,35],[1160,10,917,16],[1160,16,917,22,"last"],[1160,20,917,26],[1160,23,917,29],[1160,27,917,33],[1160,28,917,34,"pendingInLock"],[1160,41,917,47],[1160,42,917,48,"length"],[1160,48,917,54],[1160,51,918,22],[1160,55,918,26],[1160,56,918,27,"pendingInLock"],[1160,69,918,40],[1160,70,918,41],[1160,74,918,45],[1160,75,918,46,"pendingInLock"],[1160,88,918,59],[1160,89,918,60,"length"],[1160,95,918,66],[1160,98,918,69],[1160,99,918,70],[1160,100,918,71],[1160,103,919,22,"Promise"],[1160,110,919,29],[1160,111,919,30,"resolve"],[1160,118,919,37],[1160,119,919,38],[1160,120,919,39],[1161,10,920,16],[1161,16,920,22,"result"],[1161,22,920,28],[1161,25,920,31],[1161,26,920,32],[1161,38,920,44],[1162,12,921,20],[1162,18,921,26,"last"],[1162,22,921,30],[1163,12,922,20],[1163,19,922,27],[1163,25,922,33,"fn"],[1163,27,922,35],[1163,28,922,36],[1163,29,922,37],[1164,10,923,16],[1164,11,923,17],[1164,13,923,19],[1164,14,923,20],[1165,10,924,16],[1165,14,924,20],[1165,15,924,21,"pendingInLock"],[1165,28,924,34],[1165,29,924,35,"push"],[1165,33,924,39],[1165,34,924,40],[1165,35,924,41],[1165,47,924,53],[1166,12,925,20],[1166,16,925,24],[1167,14,926,24],[1167,20,926,30,"result"],[1167,26,926,36],[1168,12,927,20],[1168,13,927,21],[1168,14,928,20],[1168,21,928,27,"e"],[1168,22,928,28],[1168,24,928,30],[1169,14,929,24],[1170,12,929,24],[1171,10,931,16],[1171,11,931,17],[1171,13,931,19],[1171,14,931,20],[1171,15,931,21],[1172,10,932,16],[1172,17,932,23,"result"],[1172,23,932,29],[1173,8,933,12],[1174,8,934,12],[1174,15,934,19],[1174,21,934,25],[1174,25,934,29],[1174,26,934,30,"lock"],[1174,30,934,34],[1174,31,934,35],[1174,39,934,43],[1174,43,934,47],[1174,44,934,48,"storageKey"],[1174,54,934,58],[1174,56,934,60],[1174,58,934,62,"acquireTimeout"],[1174,72,934,76],[1174,74,934,78],[1174,86,934,90],[1175,10,935,16],[1175,14,935,20],[1175,15,935,21,"_debug"],[1175,21,935,27],[1175,22,935,28],[1175,37,935,43],[1175,39,935,45],[1175,70,935,76],[1175,72,935,78],[1175,76,935,82],[1175,77,935,83,"storageKey"],[1175,87,935,93],[1175,88,935,94],[1176,10,936,16],[1176,14,936,20],[1177,12,937,20],[1177,16,937,24],[1177,17,937,25,"lockAcquired"],[1177,29,937,37],[1177,32,937,40],[1177,36,937,44],[1178,12,938,20],[1178,18,938,26,"result"],[1178,24,938,32],[1178,27,938,35,"fn"],[1178,29,938,37],[1178,30,938,38],[1178,31,938,39],[1179,12,939,20],[1179,16,939,24],[1179,17,939,25,"pendingInLock"],[1179,30,939,38],[1179,31,939,39,"push"],[1179,35,939,43],[1179,36,939,44],[1179,37,939,45],[1179,49,939,57],[1180,14,940,24],[1180,18,940,28],[1181,16,941,28],[1181,22,941,34,"result"],[1181,28,941,40],[1182,14,942,24],[1182,15,942,25],[1182,16,943,24],[1182,23,943,31,"e"],[1182,24,943,32],[1182,26,943,34],[1183,16,944,28],[1184,14,944,28],[1185,12,946,20],[1185,13,946,21],[1185,15,946,23],[1185,16,946,24],[1185,17,946,25],[1186,12,947,20],[1186,18,947,26,"result"],[1186,24,947,32],[1187,12,948,20],[1188,12,949,20],[1188,19,949,27],[1188,23,949,31],[1188,24,949,32,"pendingInLock"],[1188,37,949,45],[1188,38,949,46,"length"],[1188,44,949,52],[1188,46,949,54],[1189,14,950,24],[1189,20,950,30,"waitOn"],[1189,26,950,36],[1189,29,950,39],[1189,30,950,40],[1189,33,950,43],[1189,37,950,47],[1189,38,950,48,"pendingInLock"],[1189,51,950,61],[1189,52,950,62],[1190,14,951,24],[1190,20,951,30,"Promise"],[1190,27,951,37],[1190,28,951,38,"all"],[1190,31,951,41],[1190,32,951,42,"waitOn"],[1190,38,951,48],[1190,39,951,49],[1191,14,952,24],[1191,18,952,28],[1191,19,952,29,"pendingInLock"],[1191,32,952,42],[1191,33,952,43,"splice"],[1191,39,952,49],[1191,40,952,50],[1191,41,952,51],[1191,43,952,53,"waitOn"],[1191,49,952,59],[1191,50,952,60,"length"],[1191,56,952,66],[1191,57,952,67],[1192,12,953,20],[1193,12,954,20],[1193,19,954,27],[1193,25,954,33,"result"],[1193,31,954,39],[1194,10,955,16],[1194,11,955,17],[1194,20,956,24],[1195,12,957,20],[1195,16,957,24],[1195,17,957,25,"_debug"],[1195,23,957,31],[1195,24,957,32],[1195,39,957,47],[1195,41,957,49],[1195,72,957,80],[1195,74,957,82],[1195,78,957,86],[1195,79,957,87,"storageKey"],[1195,89,957,97],[1195,90,957,98],[1196,12,958,20],[1196,16,958,24],[1196,17,958,25,"lockAcquired"],[1196,29,958,37],[1196,32,958,40],[1196,37,958,45],[1197,10,959,16],[1198,8,960,12],[1198,9,960,13],[1198,10,960,14],[1199,6,961,8],[1199,7,961,9],[1199,16,962,16],[1200,8,963,12],[1200,12,963,16],[1200,13,963,17,"_debug"],[1200,19,963,23],[1200,20,963,24],[1200,35,963,39],[1200,37,963,41],[1200,42,963,46],[1200,43,963,47],[1201,6,964,8],[1202,4,965,4],[1203,4,966,4],[1204,0,967,0],[1205,0,968,0],[1206,0,969,0],[1207,0,970,0],[1208,0,971,0],[1209,4,972,4],[1209,10,972,10,"_useSession"],[1209,21,972,21,"_useSession"],[1209,22,972,22,"fn"],[1209,24,972,24],[1209,26,972,26],[1210,6,973,8],[1210,10,973,12],[1210,11,973,13,"_debug"],[1210,17,973,19],[1210,18,973,20],[1210,32,973,34],[1210,34,973,36],[1210,41,973,43],[1210,42,973,44],[1211,6,974,8],[1211,10,974,12],[1212,8,975,12],[1213,8,976,12],[1213,14,976,18,"result"],[1213,20,976,24],[1213,23,976,27],[1213,29,976,33],[1213,33,976,37],[1213,34,976,38,"__loadSession"],[1213,47,976,51],[1213,48,976,52],[1213,49,976,53],[1214,8,977,12],[1214,15,977,19],[1214,21,977,25,"fn"],[1214,23,977,27],[1214,24,977,28,"result"],[1214,30,977,34],[1214,31,977,35],[1215,6,978,8],[1215,7,978,9],[1215,16,979,16],[1216,8,980,12],[1216,12,980,16],[1216,13,980,17,"_debug"],[1216,19,980,23],[1216,20,980,24],[1216,34,980,38],[1216,36,980,40],[1216,41,980,45],[1216,42,980,46],[1217,6,981,8],[1218,4,982,4],[1219,4,983,4],[1220,0,984,0],[1221,0,985,0],[1222,0,986,0],[1223,0,987,0],[1224,4,988,4],[1224,10,988,10,"__loadSession"],[1224,23,988,23,"__loadSession"],[1224,24,988,23],[1224,26,988,26],[1225,6,989,8],[1225,10,989,12],[1225,11,989,13,"_debug"],[1225,17,989,19],[1225,18,989,20],[1225,36,989,38],[1225,38,989,40],[1225,45,989,47],[1225,46,989,48],[1226,6,990,8],[1226,10,990,12],[1226,11,990,13],[1226,15,990,17],[1226,16,990,18,"lockAcquired"],[1226,28,990,30],[1226,30,990,32],[1227,8,991,12],[1227,12,991,16],[1227,13,991,17,"_debug"],[1227,19,991,23],[1227,20,991,24],[1227,38,991,42],[1227,40,991,44],[1227,75,991,79],[1227,77,991,81],[1227,81,991,85,"Error"],[1227,86,991,90],[1227,87,991,91],[1227,88,991,92],[1227,89,991,93,"stack"],[1227,94,991,98],[1227,95,991,99],[1228,6,992,8],[1229,6,993,8],[1229,10,993,12],[1230,8,994,12],[1230,12,994,16,"currentSession"],[1230,26,994,30],[1230,29,994,33],[1230,33,994,37],[1231,8,995,12],[1231,14,995,18,"maybeSession"],[1231,26,995,30],[1231,29,995,33],[1231,35,995,39],[1231,39,995,39,"getItemAsync"],[1231,60,995,51],[1231,62,995,52],[1231,66,995,56],[1231,67,995,57,"storage"],[1231,74,995,64],[1231,76,995,66],[1231,80,995,70],[1231,81,995,71,"storageKey"],[1231,91,995,81],[1231,92,995,82],[1232,8,996,12],[1232,12,996,16],[1232,13,996,17,"_debug"],[1232,19,996,23],[1232,20,996,24],[1232,35,996,39],[1232,37,996,41],[1232,59,996,63],[1232,61,996,65,"maybeSession"],[1232,73,996,77],[1232,74,996,78],[1233,8,997,12],[1233,12,997,16,"maybeSession"],[1233,24,997,28],[1233,29,997,33],[1233,33,997,37],[1233,35,997,39],[1234,10,998,16],[1234,14,998,20],[1234,18,998,24],[1234,19,998,25,"_isValidSession"],[1234,34,998,40],[1234,35,998,41,"maybeSession"],[1234,47,998,53],[1234,48,998,54],[1234,50,998,56],[1235,12,999,20,"currentSession"],[1235,26,999,34],[1235,29,999,37,"maybeSession"],[1235,41,999,49],[1236,10,1000,16],[1236,11,1000,17],[1236,17,1001,21],[1237,12,1002,20],[1237,16,1002,24],[1237,17,1002,25,"_debug"],[1237,23,1002,31],[1237,24,1002,32],[1237,39,1002,47],[1237,41,1002,49],[1237,76,1002,84],[1237,77,1002,85],[1238,12,1003,20],[1238,18,1003,26],[1238,22,1003,30],[1238,23,1003,31,"_removeSession"],[1238,37,1003,45],[1238,38,1003,46],[1238,39,1003,47],[1239,10,1004,16],[1240,8,1005,12],[1241,8,1006,12],[1241,12,1006,16],[1241,13,1006,17,"currentSession"],[1241,27,1006,31],[1241,29,1006,33],[1242,10,1007,16],[1242,17,1007,23],[1243,12,1007,25,"data"],[1243,16,1007,29],[1243,18,1007,31],[1244,14,1007,33,"session"],[1244,21,1007,40],[1244,23,1007,42],[1245,12,1007,47],[1245,13,1007,48],[1246,12,1007,50,"error"],[1246,17,1007,55],[1246,19,1007,57],[1247,10,1007,62],[1247,11,1007,63],[1248,8,1008,12],[1249,8,1009,12],[1250,8,1010,12],[1251,8,1011,12],[1252,8,1012,12],[1253,8,1013,12],[1254,8,1014,12],[1254,14,1014,18,"hasExpired"],[1254,24,1014,28],[1254,27,1014,31,"currentSession"],[1254,41,1014,45],[1254,42,1014,46,"expires_at"],[1254,52,1014,56],[1254,55,1015,18,"currentSession"],[1254,69,1015,32],[1254,70,1015,33,"expires_at"],[1254,80,1015,43],[1254,83,1015,46],[1254,87,1015,50],[1254,90,1015,53,"Date"],[1254,94,1015,57],[1254,95,1015,58,"now"],[1254,98,1015,61],[1254,99,1015,62],[1254,100,1015,63],[1254,103,1015,66,"EXPIRY_MARGIN_MS"],[1254,130,1015,82],[1254,133,1016,18],[1254,138,1016,23],[1255,8,1017,12],[1255,12,1017,16],[1255,13,1017,17,"_debug"],[1255,19,1017,23],[1255,20,1017,24],[1255,38,1017,42],[1255,40,1017,44],[1255,54,1017,58,"hasExpired"],[1255,64,1017,68],[1255,67,1017,71],[1255,69,1017,73],[1255,72,1017,76],[1255,78,1017,82],[1255,88,1017,92],[1255,90,1017,94],[1255,102,1017,106],[1255,104,1017,108,"currentSession"],[1255,118,1017,122],[1255,119,1017,123,"expires_at"],[1255,129,1017,133],[1255,130,1017,134],[1256,8,1018,12],[1256,12,1018,16],[1256,13,1018,17,"hasExpired"],[1256,23,1018,27],[1256,25,1018,29],[1257,10,1019,16],[1257,14,1019,20],[1257,18,1019,24],[1257,19,1019,25,"userStorage"],[1257,30,1019,36],[1257,32,1019,38],[1258,12,1020,20],[1258,18,1020,26,"maybeUser"],[1258,27,1020,35],[1258,30,1020,39],[1258,36,1020,45],[1258,40,1020,45,"getItemAsync"],[1258,61,1020,57],[1258,63,1020,58],[1258,67,1020,62],[1258,68,1020,63,"userStorage"],[1258,79,1020,74],[1258,81,1020,76],[1258,85,1020,80],[1258,86,1020,81,"storageKey"],[1258,96,1020,91],[1258,99,1020,94],[1258,106,1020,101],[1258,107,1020,103],[1259,12,1021,20],[1259,16,1021,24,"maybeUser"],[1259,25,1021,33],[1259,30,1021,38],[1259,34,1021,42],[1259,38,1021,46,"maybeUser"],[1259,47,1021,55],[1259,52,1021,60],[1259,57,1021,65],[1259,58,1021,66],[1259,61,1021,69],[1259,66,1021,74],[1259,67,1021,75],[1259,70,1021,78,"maybeUser"],[1259,79,1021,87],[1259,80,1021,88,"user"],[1259,84,1021,92],[1259,86,1021,94],[1260,14,1022,24,"currentSession"],[1260,28,1022,38],[1260,29,1022,39,"user"],[1260,33,1022,43],[1260,36,1022,46,"maybeUser"],[1260,45,1022,55],[1260,46,1022,56,"user"],[1260,50,1022,60],[1261,12,1023,20],[1261,13,1023,21],[1261,19,1024,25],[1262,14,1025,24,"currentSession"],[1262,28,1025,38],[1262,29,1025,39,"user"],[1262,33,1025,43],[1262,36,1025,46],[1262,40,1025,46,"userNotAvailableProxy"],[1262,70,1025,67],[1262,72,1025,68],[1262,73,1025,69],[1263,12,1026,20],[1264,10,1027,16],[1265,10,1028,16],[1265,14,1028,20],[1265,18,1028,24],[1265,19,1028,25,"storage"],[1265,26,1028,32],[1265,27,1028,33,"isServer"],[1265,35,1028,41],[1265,39,1028,45,"currentSession"],[1265,53,1028,59],[1265,54,1028,60,"user"],[1265,58,1028,64],[1265,60,1028,66],[1266,12,1029,20],[1266,16,1029,24,"suppressWarning"],[1266,31,1029,39],[1266,34,1029,42],[1266,38,1029,46],[1266,39,1029,47,"suppressGetSessionWarning"],[1266,64,1029,72],[1267,12,1030,20],[1267,18,1030,26,"proxySession"],[1267,30,1030,38],[1267,33,1030,41],[1267,37,1030,45,"Proxy"],[1267,42,1030,50],[1267,43,1030,51,"currentSession"],[1267,57,1030,65],[1267,59,1030,67],[1268,14,1031,24,"get"],[1268,17,1031,27],[1268,19,1031,29,"get"],[1268,20,1031,30,"target"],[1268,26,1031,36],[1268,28,1031,38,"prop"],[1268,32,1031,42],[1268,34,1031,44,"receiver"],[1268,42,1031,52],[1268,47,1031,57],[1269,16,1032,28],[1269,20,1032,32],[1269,21,1032,33,"suppressWarning"],[1269,36,1032,48],[1269,40,1032,52,"prop"],[1269,44,1032,56],[1269,49,1032,61],[1269,55,1032,67],[1269,57,1032,69],[1270,18,1033,32],[1271,18,1034,32,"console"],[1271,25,1034,39],[1271,26,1034,40,"warn"],[1271,30,1034,44],[1271,31,1034,45],[1271,384,1034,398],[1271,385,1034,399],[1272,18,1035,32,"suppressWarning"],[1272,33,1035,47],[1272,36,1035,50],[1272,40,1035,54],[1272,41,1035,55],[1272,42,1035,56],[1273,18,1036,32],[1273,22,1036,36],[1273,23,1036,37,"suppressGetSessionWarning"],[1273,48,1036,62],[1273,51,1036,65],[1273,55,1036,69],[1273,56,1036,70],[1273,57,1036,71],[1274,16,1037,28],[1275,16,1038,28],[1275,23,1038,35,"Reflect"],[1275,30,1038,42],[1275,31,1038,43,"get"],[1275,34,1038,46],[1275,35,1038,47,"target"],[1275,41,1038,53],[1275,43,1038,55,"prop"],[1275,47,1038,59],[1275,49,1038,61,"receiver"],[1275,57,1038,69],[1275,58,1038,70],[1276,14,1039,24],[1277,12,1040,20],[1277,13,1040,21],[1277,14,1040,22],[1278,12,1041,20,"currentSession"],[1278,26,1041,34],[1278,29,1041,37,"proxySession"],[1278,41,1041,49],[1279,10,1042,16],[1280,10,1043,16],[1280,17,1043,23],[1281,12,1043,25,"data"],[1281,16,1043,29],[1281,18,1043,31],[1282,14,1043,33,"session"],[1282,21,1043,40],[1282,23,1043,42,"currentSession"],[1283,12,1043,57],[1283,13,1043,58],[1284,12,1043,60,"error"],[1284,17,1043,65],[1284,19,1043,67],[1285,10,1043,72],[1285,11,1043,73],[1286,8,1044,12],[1287,8,1045,12],[1287,14,1045,18],[1288,10,1045,20,"session"],[1288,17,1045,27],[1289,10,1045,29,"error"],[1290,8,1045,35],[1290,9,1045,36],[1290,12,1045,39],[1290,18,1045,45],[1290,22,1045,49],[1290,23,1045,50,"_callRefreshToken"],[1290,40,1045,67],[1290,41,1045,68,"currentSession"],[1290,55,1045,82],[1290,56,1045,83,"refresh_token"],[1290,69,1045,96],[1290,70,1045,97],[1291,8,1046,12],[1291,12,1046,16,"error"],[1291,17,1046,21],[1291,19,1046,23],[1292,10,1047,16],[1292,17,1047,23],[1293,12,1047,25,"data"],[1293,16,1047,29],[1293,18,1047,31],[1294,14,1047,33,"session"],[1294,21,1047,40],[1294,23,1047,42],[1295,12,1047,47],[1295,13,1047,48],[1296,12,1047,50,"error"],[1297,10,1047,56],[1297,11,1047,57],[1298,8,1048,12],[1299,8,1049,12],[1299,15,1049,19],[1300,10,1049,21,"data"],[1300,14,1049,25],[1300,16,1049,27],[1301,12,1049,29,"session"],[1302,10,1049,37],[1302,11,1049,38],[1303,10,1049,40,"error"],[1303,15,1049,45],[1303,17,1049,47],[1304,8,1049,52],[1304,9,1049,53],[1305,6,1050,8],[1305,7,1050,9],[1305,16,1051,16],[1306,8,1052,12],[1306,12,1052,16],[1306,13,1052,17,"_debug"],[1306,19,1052,23],[1306,20,1052,24],[1306,38,1052,42],[1306,40,1052,44],[1306,45,1052,49],[1306,46,1052,50],[1307,6,1053,8],[1308,4,1054,4],[1309,4,1055,4],[1310,0,1056,0],[1311,0,1057,0],[1312,0,1058,0],[1313,0,1059,0],[1314,0,1060,0],[1315,0,1061,0],[1316,4,1062,4],[1316,10,1062,10,"getUser"],[1316,17,1062,17,"getUser"],[1316,18,1062,18,"jwt"],[1316,21,1062,21],[1316,23,1062,23],[1317,6,1063,8],[1317,10,1063,12,"jwt"],[1317,13,1063,15],[1317,15,1063,17],[1318,8,1064,12],[1318,15,1064,19],[1318,21,1064,25],[1318,25,1064,29],[1318,26,1064,30,"_getUser"],[1318,34,1064,38],[1318,35,1064,39,"jwt"],[1318,38,1064,42],[1318,39,1064,43],[1319,6,1065,8],[1320,6,1066,8],[1320,12,1066,14],[1320,16,1066,18],[1320,17,1066,19,"initializePromise"],[1320,34,1066,36],[1321,6,1067,8],[1321,12,1067,14,"result"],[1321,18,1067,20],[1321,21,1067,23],[1321,27,1067,29],[1321,31,1067,33],[1321,32,1067,34,"_acquireLock"],[1321,44,1067,46],[1321,45,1067,47],[1321,46,1067,48],[1321,47,1067,49],[1321,49,1067,51],[1321,61,1067,63],[1322,8,1068,12],[1322,15,1068,19],[1322,21,1068,25],[1322,25,1068,29],[1322,26,1068,30,"_getUser"],[1322,34,1068,38],[1322,35,1068,39],[1322,36,1068,40],[1323,6,1069,8],[1323,7,1069,9],[1323,8,1069,10],[1324,6,1070,8],[1324,13,1070,15,"result"],[1324,19,1070,21],[1325,4,1071,4],[1326,4,1072,4],[1326,10,1072,10,"_getUser"],[1326,18,1072,18,"_getUser"],[1326,19,1072,19,"jwt"],[1326,22,1072,22],[1326,24,1072,24],[1327,6,1073,8],[1327,10,1073,12],[1328,8,1074,12],[1328,12,1074,16,"jwt"],[1328,15,1074,19],[1328,17,1074,21],[1329,10,1075,16],[1329,17,1075,23],[1329,23,1075,29],[1329,27,1075,29,"_request"],[1329,42,1075,37],[1329,44,1075,38],[1329,48,1075,42],[1329,49,1075,43,"fetch"],[1329,54,1075,48],[1329,56,1075,50],[1329,61,1075,55],[1329,63,1075,57],[1329,66,1075,60],[1329,70,1075,64],[1329,71,1075,65,"url"],[1329,74,1075,68],[1329,81,1075,75],[1329,83,1075,77],[1330,12,1076,20,"headers"],[1330,19,1076,27],[1330,21,1076,29],[1330,25,1076,33],[1330,26,1076,34,"headers"],[1330,33,1076,41],[1331,12,1077,20,"jwt"],[1331,15,1077,23],[1331,17,1077,25,"jwt"],[1331,20,1077,28],[1332,12,1078,20,"xform"],[1332,17,1078,25],[1332,19,1078,27,"_userResponse"],[1333,10,1079,16],[1333,11,1079,17],[1333,12,1079,18],[1334,8,1080,12],[1335,8,1081,12],[1335,15,1081,19],[1335,21,1081,25],[1335,25,1081,29],[1335,26,1081,30,"_useSession"],[1335,37,1081,41],[1335,38,1081,42],[1335,44,1081,49,"result"],[1335,50,1081,55],[1335,54,1081,60],[1336,10,1082,16],[1336,14,1082,20,"_a"],[1336,16,1082,22],[1336,18,1082,24,"_b"],[1336,20,1082,26],[1336,22,1082,28,"_c"],[1336,24,1082,30],[1337,10,1083,16],[1337,16,1083,22],[1338,12,1083,24,"data"],[1338,16,1083,28],[1339,12,1083,30,"error"],[1340,10,1083,36],[1340,11,1083,37],[1340,14,1083,40,"result"],[1340,20,1083,46],[1341,10,1084,16],[1341,14,1084,20,"error"],[1341,19,1084,25],[1341,21,1084,27],[1342,12,1085,20],[1342,18,1085,26,"error"],[1342,23,1085,31],[1343,10,1086,16],[1344,10,1087,16],[1345,10,1088,16],[1345,14,1088,20],[1345,16,1088,22],[1345,17,1088,23,"_a"],[1345,19,1088,25],[1345,22,1088,28,"data"],[1345,26,1088,32],[1345,27,1088,33,"session"],[1345,34,1088,40],[1345,40,1088,46],[1345,44,1088,50],[1345,48,1088,54,"_a"],[1345,50,1088,56],[1345,55,1088,61],[1345,60,1088,66],[1345,61,1088,67],[1345,64,1088,70],[1345,69,1088,75],[1345,70,1088,76],[1345,73,1088,79,"_a"],[1345,75,1088,81],[1345,76,1088,82,"access_token"],[1345,88,1088,94],[1345,89,1088,95],[1345,93,1088,99],[1345,94,1088,100],[1345,98,1088,104],[1345,99,1088,105,"hasCustomAuthorizationHeader"],[1345,127,1088,133],[1345,129,1088,135],[1346,12,1089,20],[1346,19,1089,27],[1347,14,1089,29,"data"],[1347,18,1089,33],[1347,20,1089,35],[1348,16,1089,37,"user"],[1348,20,1089,41],[1348,22,1089,43],[1349,14,1089,48],[1349,15,1089,49],[1350,14,1089,51,"error"],[1350,19,1089,56],[1350,21,1089,58],[1350,25,1089,62,"AuthSessionMissingError"],[1350,56,1089,85],[1350,57,1089,86],[1351,12,1089,88],[1351,13,1089,89],[1352,10,1090,16],[1353,10,1091,16],[1353,17,1091,23],[1353,23,1091,29],[1353,27,1091,29,"_request"],[1353,42,1091,37],[1353,44,1091,38],[1353,48,1091,42],[1353,49,1091,43,"fetch"],[1353,54,1091,48],[1353,56,1091,50],[1353,61,1091,55],[1353,63,1091,57],[1353,66,1091,60],[1353,70,1091,64],[1353,71,1091,65,"url"],[1353,74,1091,68],[1353,81,1091,75],[1353,83,1091,77],[1354,12,1092,20,"headers"],[1354,19,1092,27],[1354,21,1092,29],[1354,25,1092,33],[1354,26,1092,34,"headers"],[1354,33,1092,41],[1355,12,1093,20,"jwt"],[1355,15,1093,23],[1355,17,1093,25],[1355,18,1093,26,"_c"],[1355,20,1093,28],[1355,23,1093,31],[1355,24,1093,32,"_b"],[1355,26,1093,34],[1355,29,1093,37,"data"],[1355,33,1093,41],[1355,34,1093,42,"session"],[1355,41,1093,49],[1355,47,1093,55],[1355,51,1093,59],[1355,55,1093,63,"_b"],[1355,57,1093,65],[1355,62,1093,70],[1355,67,1093,75],[1355,68,1093,76],[1355,71,1093,79],[1355,76,1093,84],[1355,77,1093,85],[1355,80,1093,88,"_b"],[1355,82,1093,90],[1355,83,1093,91,"access_token"],[1355,95,1093,103],[1355,101,1093,109],[1355,105,1093,113],[1355,109,1093,117,"_c"],[1355,111,1093,119],[1355,116,1093,124],[1355,121,1093,129],[1355,122,1093,130],[1355,125,1093,133,"_c"],[1355,127,1093,135],[1355,130,1093,138,"undefined"],[1355,139,1093,147],[1356,12,1094,20,"xform"],[1356,17,1094,25],[1356,19,1094,27,"_userResponse"],[1357,10,1095,16],[1357,11,1095,17],[1357,12,1095,18],[1358,8,1096,12],[1358,9,1096,13],[1358,10,1096,14],[1359,6,1097,8],[1359,7,1097,9],[1359,8,1098,8],[1359,15,1098,15,"error"],[1359,20,1098,20],[1359,22,1098,22],[1360,8,1099,12],[1360,12,1099,16],[1360,16,1099,16,"isAuthError"],[1360,35,1099,27],[1360,37,1099,28,"error"],[1360,42,1099,33],[1360,43,1099,34],[1360,45,1099,36],[1361,10,1100,16],[1361,14,1100,20],[1361,18,1100,20,"isAuthSessionMissingError"],[1361,51,1100,45],[1361,53,1100,46,"error"],[1361,58,1100,51],[1361,59,1100,52],[1361,61,1100,54],[1362,12,1101,20],[1363,12,1102,20],[1364,12,1103,20],[1364,18,1103,26],[1364,22,1103,30],[1364,23,1103,31,"_removeSession"],[1364,37,1103,45],[1364,38,1103,46],[1364,39,1103,47],[1365,12,1104,20],[1365,18,1104,26],[1365,22,1104,26,"removeItemAsync"],[1365,46,1104,41],[1365,48,1104,42],[1365,52,1104,46],[1365,53,1104,47,"storage"],[1365,60,1104,54],[1365,62,1104,56],[1365,65,1104,59],[1365,69,1104,63],[1365,70,1104,64,"storageKey"],[1365,80,1104,74],[1365,96,1104,90],[1365,97,1104,91],[1366,10,1105,16],[1367,10,1106,16],[1367,17,1106,23],[1368,12,1106,25,"data"],[1368,16,1106,29],[1368,18,1106,31],[1369,14,1106,33,"user"],[1369,18,1106,37],[1369,20,1106,39],[1370,12,1106,44],[1370,13,1106,45],[1371,12,1106,47,"error"],[1372,10,1106,53],[1372,11,1106,54],[1373,8,1107,12],[1374,8,1108,12],[1374,14,1108,18,"error"],[1374,19,1108,23],[1375,6,1109,8],[1376,4,1110,4],[1377,4,1111,4],[1378,0,1112,0],[1379,0,1113,0],[1380,4,1114,4],[1380,10,1114,10,"updateUser"],[1380,20,1114,20,"updateUser"],[1380,21,1114,21,"attributes"],[1380,31,1114,31],[1380,33,1114,33,"options"],[1380,40,1114,40],[1380,43,1114,43],[1380,44,1114,44],[1380,45,1114,45],[1380,47,1114,47],[1381,6,1115,8],[1381,12,1115,14],[1381,16,1115,18],[1381,17,1115,19,"initializePromise"],[1381,34,1115,36],[1382,6,1116,8],[1382,13,1116,15],[1382,19,1116,21],[1382,23,1116,25],[1382,24,1116,26,"_acquireLock"],[1382,36,1116,38],[1382,37,1116,39],[1382,38,1116,40],[1382,39,1116,41],[1382,41,1116,43],[1382,53,1116,55],[1383,8,1117,12],[1383,15,1117,19],[1383,21,1117,25],[1383,25,1117,29],[1383,26,1117,30,"_updateUser"],[1383,37,1117,41],[1383,38,1117,42,"attributes"],[1383,48,1117,52],[1383,50,1117,54,"options"],[1383,57,1117,61],[1383,58,1117,62],[1384,6,1118,8],[1384,7,1118,9],[1384,8,1118,10],[1385,4,1119,4],[1386,4,1120,4],[1386,10,1120,10,"_updateUser"],[1386,21,1120,21,"_updateUser"],[1386,22,1120,22,"attributes"],[1386,32,1120,32],[1386,34,1120,34,"options"],[1386,41,1120,41],[1386,44,1120,44],[1386,45,1120,45],[1386,46,1120,46],[1386,48,1120,48],[1387,6,1121,8],[1387,10,1121,12],[1388,8,1122,12],[1388,15,1122,19],[1388,21,1122,25],[1388,25,1122,29],[1388,26,1122,30,"_useSession"],[1388,37,1122,41],[1388,38,1122,42],[1388,44,1122,49,"result"],[1388,50,1122,55],[1388,54,1122,60],[1389,10,1123,16],[1389,16,1123,22],[1390,12,1123,24,"data"],[1390,16,1123,28],[1390,18,1123,30,"sessionData"],[1390,29,1123,41],[1391,12,1123,43,"error"],[1391,17,1123,48],[1391,19,1123,50,"sessionError"],[1392,10,1123,63],[1392,11,1123,64],[1392,14,1123,67,"result"],[1392,20,1123,73],[1393,10,1124,16],[1393,14,1124,20,"sessionError"],[1393,26,1124,32],[1393,28,1124,34],[1394,12,1125,20],[1394,18,1125,26,"sessionError"],[1394,30,1125,38],[1395,10,1126,16],[1396,10,1127,16],[1396,14,1127,20],[1396,15,1127,21,"sessionData"],[1396,26,1127,32],[1396,27,1127,33,"session"],[1396,34,1127,40],[1396,36,1127,42],[1397,12,1128,20],[1397,18,1128,26],[1397,22,1128,30,"AuthSessionMissingError"],[1397,53,1128,53],[1397,54,1128,54],[1397,55,1128,55],[1398,10,1129,16],[1399,10,1130,16],[1399,16,1130,22,"session"],[1399,23,1130,29],[1399,26,1130,32,"sessionData"],[1399,37,1130,43],[1399,38,1130,44,"session"],[1399,45,1130,51],[1400,10,1131,16],[1400,14,1131,20,"codeChallenge"],[1400,27,1131,33],[1400,30,1131,36],[1400,34,1131,40],[1401,10,1132,16],[1401,14,1132,20,"codeChallengeMethod"],[1401,33,1132,39],[1401,36,1132,42],[1401,40,1132,46],[1402,10,1133,16],[1402,14,1133,20],[1402,18,1133,24],[1402,19,1133,25,"flowType"],[1402,27,1133,33],[1402,32,1133,38],[1402,38,1133,44],[1402,42,1133,48,"attributes"],[1402,52,1133,58],[1402,53,1133,59,"email"],[1402,58,1133,64],[1402,62,1133,68],[1402,66,1133,72],[1402,68,1133,74],[1403,12,1134,20],[1404,12,1135,20],[1404,13,1135,21,"codeChallenge"],[1404,26,1135,34],[1404,28,1135,36,"codeChallengeMethod"],[1404,47,1135,55],[1404,48,1135,56],[1404,51,1135,59],[1404,57,1135,65],[1404,61,1135,65,"getCodeChallengeAndMethod"],[1404,95,1135,90],[1404,97,1135,91],[1404,101,1135,95],[1404,102,1135,96,"storage"],[1404,109,1135,103],[1404,111,1135,105],[1404,115,1135,109],[1404,116,1135,110,"storageKey"],[1404,126,1135,120],[1404,127,1135,121],[1405,10,1136,16],[1406,10,1137,16],[1406,16,1137,22],[1407,12,1137,24,"data"],[1407,16,1137,28],[1408,12,1137,30,"error"],[1408,17,1137,35],[1408,19,1137,37,"userError"],[1409,10,1137,47],[1409,11,1137,48],[1409,14,1137,51],[1409,20,1137,57],[1409,24,1137,57,"_request"],[1409,39,1137,65],[1409,41,1137,66],[1409,45,1137,70],[1409,46,1137,71,"fetch"],[1409,51,1137,76],[1409,53,1137,78],[1409,58,1137,83],[1409,60,1137,85],[1409,63,1137,88],[1409,67,1137,92],[1409,68,1137,93,"url"],[1409,71,1137,96],[1409,78,1137,103],[1409,80,1137,105],[1410,12,1138,20,"headers"],[1410,19,1138,27],[1410,21,1138,29],[1410,25,1138,33],[1410,26,1138,34,"headers"],[1410,33,1138,41],[1411,12,1139,20,"redirectTo"],[1411,22,1139,30],[1411,24,1139,32,"options"],[1411,31,1139,39],[1411,36,1139,44],[1411,40,1139,48],[1411,44,1139,52,"options"],[1411,51,1139,59],[1411,56,1139,64],[1411,61,1139,69],[1411,62,1139,70],[1411,65,1139,73],[1411,70,1139,78],[1411,71,1139,79],[1411,74,1139,82,"options"],[1411,81,1139,89],[1411,82,1139,90,"emailRedirectTo"],[1411,97,1139,105],[1412,12,1140,20,"body"],[1412,16,1140,24],[1412,18,1140,26,"Object"],[1412,24,1140,32],[1412,25,1140,33,"assign"],[1412,31,1140,39],[1412,32,1140,40,"Object"],[1412,38,1140,46],[1412,39,1140,47,"assign"],[1412,45,1140,53],[1412,46,1140,54],[1412,47,1140,55],[1412,48,1140,56],[1412,50,1140,58,"attributes"],[1412,60,1140,68],[1412,61,1140,69],[1412,63,1140,71],[1413,14,1140,73,"code_challenge"],[1413,28,1140,87],[1413,30,1140,89,"codeChallenge"],[1413,43,1140,102],[1414,14,1140,104,"code_challenge_method"],[1414,35,1140,125],[1414,37,1140,127,"codeChallengeMethod"],[1415,12,1140,147],[1415,13,1140,148],[1415,14,1140,149],[1416,12,1141,20,"jwt"],[1416,15,1141,23],[1416,17,1141,25,"session"],[1416,24,1141,32],[1416,25,1141,33,"access_token"],[1416,37,1141,45],[1417,12,1142,20,"xform"],[1417,17,1142,25],[1417,19,1142,27,"_userResponse"],[1418,10,1143,16],[1418,11,1143,17],[1418,12,1143,18],[1419,10,1144,16],[1419,14,1144,20,"userError"],[1419,23,1144,29],[1419,25,1145,20],[1419,31,1145,26,"userError"],[1419,40,1145,35],[1420,10,1146,16,"session"],[1420,17,1146,23],[1420,18,1146,24,"user"],[1420,22,1146,28],[1420,25,1146,31,"data"],[1420,29,1146,35],[1420,30,1146,36,"user"],[1420,34,1146,40],[1421,10,1147,16],[1421,16,1147,22],[1421,20,1147,26],[1421,21,1147,27,"_saveSession"],[1421,33,1147,39],[1421,34,1147,40,"session"],[1421,41,1147,47],[1421,42,1147,48],[1422,10,1148,16],[1422,16,1148,22],[1422,20,1148,26],[1422,21,1148,27,"_notifyAllSubscribers"],[1422,42,1148,48],[1422,43,1148,49],[1422,57,1148,63],[1422,59,1148,65,"session"],[1422,66,1148,72],[1422,67,1148,73],[1423,10,1149,16],[1423,17,1149,23],[1424,12,1149,25,"data"],[1424,16,1149,29],[1424,18,1149,31],[1425,14,1149,33,"user"],[1425,18,1149,37],[1425,20,1149,39,"session"],[1425,27,1149,46],[1425,28,1149,47,"user"],[1426,12,1149,52],[1426,13,1149,53],[1427,12,1149,55,"error"],[1427,17,1149,60],[1427,19,1149,62],[1428,10,1149,67],[1428,11,1149,68],[1429,8,1150,12],[1429,9,1150,13],[1429,10,1150,14],[1430,6,1151,8],[1430,7,1151,9],[1430,8,1152,8],[1430,15,1152,15,"error"],[1430,20,1152,20],[1430,22,1152,22],[1431,8,1153,12],[1431,12,1153,16],[1431,16,1153,16,"isAuthError"],[1431,35,1153,27],[1431,37,1153,28,"error"],[1431,42,1153,33],[1431,43,1153,34],[1431,45,1153,36],[1432,10,1154,16],[1432,17,1154,23],[1433,12,1154,25,"data"],[1433,16,1154,29],[1433,18,1154,31],[1434,14,1154,33,"user"],[1434,18,1154,37],[1434,20,1154,39],[1435,12,1154,44],[1435,13,1154,45],[1436,12,1154,47,"error"],[1437,10,1154,53],[1437,11,1154,54],[1438,8,1155,12],[1439,8,1156,12],[1439,14,1156,18,"error"],[1439,19,1156,23],[1440,6,1157,8],[1441,4,1158,4],[1442,4,1159,4],[1443,0,1160,0],[1444,0,1161,0],[1445,0,1162,0],[1446,0,1163,0],[1447,4,1164,4],[1447,10,1164,10,"setSession"],[1447,20,1164,20,"setSession"],[1447,21,1164,21,"currentSession"],[1447,35,1164,35],[1447,37,1164,37],[1448,6,1165,8],[1448,12,1165,14],[1448,16,1165,18],[1448,17,1165,19,"initializePromise"],[1448,34,1165,36],[1449,6,1166,8],[1449,13,1166,15],[1449,19,1166,21],[1449,23,1166,25],[1449,24,1166,26,"_acquireLock"],[1449,36,1166,38],[1449,37,1166,39],[1449,38,1166,40],[1449,39,1166,41],[1449,41,1166,43],[1449,53,1166,55],[1450,8,1167,12],[1450,15,1167,19],[1450,21,1167,25],[1450,25,1167,29],[1450,26,1167,30,"_setSession"],[1450,37,1167,41],[1450,38,1167,42,"currentSession"],[1450,52,1167,56],[1450,53,1167,57],[1451,6,1168,8],[1451,7,1168,9],[1451,8,1168,10],[1452,4,1169,4],[1453,4,1170,4],[1453,10,1170,10,"_setSession"],[1453,21,1170,21,"_setSession"],[1453,22,1170,22,"currentSession"],[1453,36,1170,36],[1453,38,1170,38],[1454,6,1171,8],[1454,10,1171,12],[1455,8,1172,12],[1455,12,1172,16],[1455,13,1172,17,"currentSession"],[1455,27,1172,31],[1455,28,1172,32,"access_token"],[1455,40,1172,44],[1455,44,1172,48],[1455,45,1172,49,"currentSession"],[1455,59,1172,63],[1455,60,1172,64,"refresh_token"],[1455,73,1172,77],[1455,75,1172,79],[1456,10,1173,16],[1456,16,1173,22],[1456,20,1173,26,"AuthSessionMissingError"],[1456,51,1173,49],[1456,52,1173,50],[1456,53,1173,51],[1457,8,1174,12],[1458,8,1175,12],[1458,14,1175,18,"timeNow"],[1458,21,1175,25],[1458,24,1175,28,"Date"],[1458,28,1175,32],[1458,29,1175,33,"now"],[1458,32,1175,36],[1458,33,1175,37],[1458,34,1175,38],[1458,37,1175,41],[1458,41,1175,45],[1459,8,1176,12],[1459,12,1176,16,"expiresAt"],[1459,21,1176,25],[1459,24,1176,28,"timeNow"],[1459,31,1176,35],[1460,8,1177,12],[1460,12,1177,16,"hasExpired"],[1460,22,1177,26],[1460,25,1177,29],[1460,29,1177,33],[1461,8,1178,12],[1461,12,1178,16,"session"],[1461,19,1178,23],[1461,22,1178,26],[1461,26,1178,30],[1462,8,1179,12],[1462,14,1179,18],[1463,10,1179,20,"payload"],[1464,8,1179,28],[1464,9,1179,29],[1464,12,1179,32],[1464,16,1179,32,"decodeJWT"],[1464,34,1179,41],[1464,36,1179,42,"currentSession"],[1464,50,1179,56],[1464,51,1179,57,"access_token"],[1464,63,1179,69],[1464,64,1179,70],[1465,8,1180,12],[1465,12,1180,16,"payload"],[1465,19,1180,23],[1465,20,1180,24,"exp"],[1465,23,1180,27],[1465,25,1180,29],[1466,10,1181,16,"expiresAt"],[1466,19,1181,25],[1466,22,1181,28,"payload"],[1466,29,1181,35],[1466,30,1181,36,"exp"],[1466,33,1181,39],[1467,10,1182,16,"hasExpired"],[1467,20,1182,26],[1467,23,1182,29,"expiresAt"],[1467,32,1182,38],[1467,36,1182,42,"timeNow"],[1467,43,1182,49],[1468,8,1183,12],[1469,8,1184,12],[1469,12,1184,16,"hasExpired"],[1469,22,1184,26],[1469,24,1184,28],[1470,10,1185,16],[1470,16,1185,22],[1471,12,1185,24,"session"],[1471,19,1185,31],[1471,21,1185,33,"refreshedSession"],[1471,37,1185,49],[1472,12,1185,51,"error"],[1473,10,1185,57],[1473,11,1185,58],[1473,14,1185,61],[1473,20,1185,67],[1473,24,1185,71],[1473,25,1185,72,"_callRefreshToken"],[1473,42,1185,89],[1473,43,1185,90,"currentSession"],[1473,57,1185,104],[1473,58,1185,105,"refresh_token"],[1473,71,1185,118],[1473,72,1185,119],[1474,10,1186,16],[1474,14,1186,20,"error"],[1474,19,1186,25],[1474,21,1186,27],[1475,12,1187,20],[1475,19,1187,27],[1476,14,1187,29,"data"],[1476,18,1187,33],[1476,20,1187,35],[1477,16,1187,37,"user"],[1477,20,1187,41],[1477,22,1187,43],[1477,26,1187,47],[1478,16,1187,49,"session"],[1478,23,1187,56],[1478,25,1187,58],[1479,14,1187,63],[1479,15,1187,64],[1480,14,1187,66,"error"],[1480,19,1187,71],[1480,21,1187,73,"error"],[1481,12,1187,79],[1481,13,1187,80],[1482,10,1188,16],[1483,10,1189,16],[1483,14,1189,20],[1483,15,1189,21,"refreshedSession"],[1483,31,1189,37],[1483,33,1189,39],[1484,12,1190,20],[1484,19,1190,27],[1485,14,1190,29,"data"],[1485,18,1190,33],[1485,20,1190,35],[1486,16,1190,37,"user"],[1486,20,1190,41],[1486,22,1190,43],[1486,26,1190,47],[1487,16,1190,49,"session"],[1487,23,1190,56],[1487,25,1190,58],[1488,14,1190,63],[1488,15,1190,64],[1489,14,1190,66,"error"],[1489,19,1190,71],[1489,21,1190,73],[1490,12,1190,78],[1490,13,1190,79],[1491,10,1191,16],[1492,10,1192,16,"session"],[1492,17,1192,23],[1492,20,1192,26,"refreshedSession"],[1492,36,1192,42],[1493,8,1193,12],[1493,9,1193,13],[1493,15,1194,17],[1494,10,1195,16],[1494,16,1195,22],[1495,12,1195,24,"data"],[1495,16,1195,28],[1496,12,1195,30,"error"],[1497,10,1195,36],[1497,11,1195,37],[1497,14,1195,40],[1497,20,1195,46],[1497,24,1195,50],[1497,25,1195,51,"_getUser"],[1497,33,1195,59],[1497,34,1195,60,"currentSession"],[1497,48,1195,74],[1497,49,1195,75,"access_token"],[1497,61,1195,87],[1497,62,1195,88],[1498,10,1196,16],[1498,14,1196,20,"error"],[1498,19,1196,25],[1498,21,1196,27],[1499,12,1197,20],[1499,18,1197,26,"error"],[1499,23,1197,31],[1500,10,1198,16],[1501,10,1199,16,"session"],[1501,17,1199,23],[1501,20,1199,26],[1502,12,1200,20,"access_token"],[1502,24,1200,32],[1502,26,1200,34,"currentSession"],[1502,40,1200,48],[1502,41,1200,49,"access_token"],[1502,53,1200,61],[1503,12,1201,20,"refresh_token"],[1503,25,1201,33],[1503,27,1201,35,"currentSession"],[1503,41,1201,49],[1503,42,1201,50,"refresh_token"],[1503,55,1201,63],[1504,12,1202,20,"user"],[1504,16,1202,24],[1504,18,1202,26,"data"],[1504,22,1202,30],[1504,23,1202,31,"user"],[1504,27,1202,35],[1505,12,1203,20,"token_type"],[1505,22,1203,30],[1505,24,1203,32],[1505,32,1203,40],[1506,12,1204,20,"expires_in"],[1506,22,1204,30],[1506,24,1204,32,"expiresAt"],[1506,33,1204,41],[1506,36,1204,44,"timeNow"],[1506,43,1204,51],[1507,12,1205,20,"expires_at"],[1507,22,1205,30],[1507,24,1205,32,"expiresAt"],[1508,10,1206,16],[1508,11,1206,17],[1509,10,1207,16],[1509,16,1207,22],[1509,20,1207,26],[1509,21,1207,27,"_saveSession"],[1509,33,1207,39],[1509,34,1207,40,"session"],[1509,41,1207,47],[1509,42,1207,48],[1510,10,1208,16],[1510,16,1208,22],[1510,20,1208,26],[1510,21,1208,27,"_notifyAllSubscribers"],[1510,42,1208,48],[1510,43,1208,49],[1510,54,1208,60],[1510,56,1208,62,"session"],[1510,63,1208,69],[1510,64,1208,70],[1511,8,1209,12],[1512,8,1210,12],[1512,15,1210,19],[1513,10,1210,21,"data"],[1513,14,1210,25],[1513,16,1210,27],[1514,12,1210,29,"user"],[1514,16,1210,33],[1514,18,1210,35,"session"],[1514,25,1210,42],[1514,26,1210,43,"user"],[1514,30,1210,47],[1515,12,1210,49,"session"],[1516,10,1210,57],[1516,11,1210,58],[1517,10,1210,60,"error"],[1517,15,1210,65],[1517,17,1210,67],[1518,8,1210,72],[1518,9,1210,73],[1519,6,1211,8],[1519,7,1211,9],[1519,8,1212,8],[1519,15,1212,15,"error"],[1519,20,1212,20],[1519,22,1212,22],[1520,8,1213,12],[1520,12,1213,16],[1520,16,1213,16,"isAuthError"],[1520,35,1213,27],[1520,37,1213,28,"error"],[1520,42,1213,33],[1520,43,1213,34],[1520,45,1213,36],[1521,10,1214,16],[1521,17,1214,23],[1522,12,1214,25,"data"],[1522,16,1214,29],[1522,18,1214,31],[1523,14,1214,33,"session"],[1523,21,1214,40],[1523,23,1214,42],[1523,27,1214,46],[1524,14,1214,48,"user"],[1524,18,1214,52],[1524,20,1214,54],[1525,12,1214,59],[1525,13,1214,60],[1526,12,1214,62,"error"],[1527,10,1214,68],[1527,11,1214,69],[1528,8,1215,12],[1529,8,1216,12],[1529,14,1216,18,"error"],[1529,19,1216,23],[1530,6,1217,8],[1531,4,1218,4],[1532,4,1219,4],[1533,0,1220,0],[1534,0,1221,0],[1535,0,1222,0],[1536,0,1223,0],[1537,0,1224,0],[1538,4,1225,4],[1538,10,1225,10,"refreshSession"],[1538,24,1225,24,"refreshSession"],[1538,25,1225,25,"currentSession"],[1538,39,1225,39],[1538,41,1225,41],[1539,6,1226,8],[1539,12,1226,14],[1539,16,1226,18],[1539,17,1226,19,"initializePromise"],[1539,34,1226,36],[1540,6,1227,8],[1540,13,1227,15],[1540,19,1227,21],[1540,23,1227,25],[1540,24,1227,26,"_acquireLock"],[1540,36,1227,38],[1540,37,1227,39],[1540,38,1227,40],[1540,39,1227,41],[1540,41,1227,43],[1540,53,1227,55],[1541,8,1228,12],[1541,15,1228,19],[1541,21,1228,25],[1541,25,1228,29],[1541,26,1228,30,"_refreshSession"],[1541,41,1228,45],[1541,42,1228,46,"currentSession"],[1541,56,1228,60],[1541,57,1228,61],[1542,6,1229,8],[1542,7,1229,9],[1542,8,1229,10],[1543,4,1230,4],[1544,4,1231,4],[1544,10,1231,10,"_refreshSession"],[1544,25,1231,25,"_refreshSession"],[1544,26,1231,26,"currentSession"],[1544,40,1231,40],[1544,42,1231,42],[1545,6,1232,8],[1545,10,1232,12],[1546,8,1233,12],[1546,15,1233,19],[1546,21,1233,25],[1546,25,1233,29],[1546,26,1233,30,"_useSession"],[1546,37,1233,41],[1546,38,1233,42],[1546,44,1233,49,"result"],[1546,50,1233,55],[1546,54,1233,60],[1547,10,1234,16],[1547,14,1234,20,"_a"],[1547,16,1234,22],[1548,10,1235,16],[1548,14,1235,20],[1548,15,1235,21,"currentSession"],[1548,29,1235,35],[1548,31,1235,37],[1549,12,1236,20],[1549,18,1236,26],[1550,14,1236,28,"data"],[1550,18,1236,32],[1551,14,1236,34,"error"],[1552,12,1236,40],[1552,13,1236,41],[1552,16,1236,44,"result"],[1552,22,1236,50],[1553,12,1237,20],[1553,16,1237,24,"error"],[1553,21,1237,29],[1553,23,1237,31],[1554,14,1238,24],[1554,20,1238,30,"error"],[1554,25,1238,35],[1555,12,1239,20],[1556,12,1240,20,"currentSession"],[1556,26,1240,34],[1556,29,1240,37],[1556,30,1240,38,"_a"],[1556,32,1240,40],[1556,35,1240,43,"data"],[1556,39,1240,47],[1556,40,1240,48,"session"],[1556,47,1240,55],[1556,53,1240,61],[1556,57,1240,65],[1556,61,1240,69,"_a"],[1556,63,1240,71],[1556,68,1240,76],[1556,73,1240,81],[1556,74,1240,82],[1556,77,1240,85,"_a"],[1556,79,1240,87],[1556,82,1240,90,"undefined"],[1556,91,1240,99],[1557,10,1241,16],[1558,10,1242,16],[1558,14,1242,20],[1558,16,1242,22,"currentSession"],[1558,30,1242,36],[1558,35,1242,41],[1558,39,1242,45],[1558,43,1242,49,"currentSession"],[1558,57,1242,63],[1558,62,1242,68],[1558,67,1242,73],[1558,68,1242,74],[1558,71,1242,77],[1558,76,1242,82],[1558,77,1242,83],[1558,80,1242,86,"currentSession"],[1558,94,1242,100],[1558,95,1242,101,"refresh_token"],[1558,108,1242,114],[1558,109,1242,115],[1558,111,1242,117],[1559,12,1243,20],[1559,18,1243,26],[1559,22,1243,30,"AuthSessionMissingError"],[1559,53,1243,53],[1559,54,1243,54],[1559,55,1243,55],[1560,10,1244,16],[1561,10,1245,16],[1561,16,1245,22],[1562,12,1245,24,"session"],[1562,19,1245,31],[1563,12,1245,33,"error"],[1564,10,1245,39],[1564,11,1245,40],[1564,14,1245,43],[1564,20,1245,49],[1564,24,1245,53],[1564,25,1245,54,"_callRefreshToken"],[1564,42,1245,71],[1564,43,1245,72,"currentSession"],[1564,57,1245,86],[1564,58,1245,87,"refresh_token"],[1564,71,1245,100],[1564,72,1245,101],[1565,10,1246,16],[1565,14,1246,20,"error"],[1565,19,1246,25],[1565,21,1246,27],[1566,12,1247,20],[1566,19,1247,27],[1567,14,1247,29,"data"],[1567,18,1247,33],[1567,20,1247,35],[1568,16,1247,37,"user"],[1568,20,1247,41],[1568,22,1247,43],[1568,26,1247,47],[1569,16,1247,49,"session"],[1569,23,1247,56],[1569,25,1247,58],[1570,14,1247,63],[1570,15,1247,64],[1571,14,1247,66,"error"],[1571,19,1247,71],[1571,21,1247,73,"error"],[1572,12,1247,79],[1572,13,1247,80],[1573,10,1248,16],[1574,10,1249,16],[1574,14,1249,20],[1574,15,1249,21,"session"],[1574,22,1249,28],[1574,24,1249,30],[1575,12,1250,20],[1575,19,1250,27],[1576,14,1250,29,"data"],[1576,18,1250,33],[1576,20,1250,35],[1577,16,1250,37,"user"],[1577,20,1250,41],[1577,22,1250,43],[1577,26,1250,47],[1578,16,1250,49,"session"],[1578,23,1250,56],[1578,25,1250,58],[1579,14,1250,63],[1579,15,1250,64],[1580,14,1250,66,"error"],[1580,19,1250,71],[1580,21,1250,73],[1581,12,1250,78],[1581,13,1250,79],[1582,10,1251,16],[1583,10,1252,16],[1583,17,1252,23],[1584,12,1252,25,"data"],[1584,16,1252,29],[1584,18,1252,31],[1585,14,1252,33,"user"],[1585,18,1252,37],[1585,20,1252,39,"session"],[1585,27,1252,46],[1585,28,1252,47,"user"],[1585,32,1252,51],[1586,14,1252,53,"session"],[1587,12,1252,61],[1587,13,1252,62],[1588,12,1252,64,"error"],[1588,17,1252,69],[1588,19,1252,71],[1589,10,1252,76],[1589,11,1252,77],[1590,8,1253,12],[1590,9,1253,13],[1590,10,1253,14],[1591,6,1254,8],[1591,7,1254,9],[1591,8,1255,8],[1591,15,1255,15,"error"],[1591,20,1255,20],[1591,22,1255,22],[1592,8,1256,12],[1592,12,1256,16],[1592,16,1256,16,"isAuthError"],[1592,35,1256,27],[1592,37,1256,28,"error"],[1592,42,1256,33],[1592,43,1256,34],[1592,45,1256,36],[1593,10,1257,16],[1593,17,1257,23],[1594,12,1257,25,"data"],[1594,16,1257,29],[1594,18,1257,31],[1595,14,1257,33,"user"],[1595,18,1257,37],[1595,20,1257,39],[1595,24,1257,43],[1596,14,1257,45,"session"],[1596,21,1257,52],[1596,23,1257,54],[1597,12,1257,59],[1597,13,1257,60],[1598,12,1257,62,"error"],[1599,10,1257,68],[1599,11,1257,69],[1600,8,1258,12],[1601,8,1259,12],[1601,14,1259,18,"error"],[1601,19,1259,23],[1602,6,1260,8],[1603,4,1261,4],[1604,4,1262,4],[1605,0,1263,0],[1606,0,1264,0],[1607,4,1265,4],[1607,10,1265,10,"_getSessionFromURL"],[1607,28,1265,28,"_getSessionFromURL"],[1607,29,1265,29,"params"],[1607,35,1265,35],[1607,37,1265,37,"callbackUrlType"],[1607,52,1265,52],[1607,54,1265,54],[1608,6,1266,8],[1608,10,1266,12],[1609,8,1267,12],[1609,12,1267,16],[1609,13,1267,17],[1609,17,1267,17,"isBrowser"],[1609,35,1267,26],[1609,37,1267,27],[1609,38,1267,28],[1609,40,1268,16],[1609,46,1268,22],[1609,50,1268,26,"AuthImplicitGrantRedirectError"],[1609,88,1268,56],[1609,89,1268,57],[1609,111,1268,79],[1609,112,1268,80],[1610,8,1269,12],[1611,8,1270,12],[1611,12,1270,16,"params"],[1611,18,1270,22],[1611,19,1270,23,"error"],[1611,24,1270,28],[1611,28,1270,32,"params"],[1611,34,1270,38],[1611,35,1270,39,"error_description"],[1611,52,1270,56],[1611,56,1270,60,"params"],[1611,62,1270,66],[1611,63,1270,67,"error_code"],[1611,73,1270,77],[1611,75,1270,79],[1612,10,1271,16],[1613,10,1272,16],[1614,10,1273,16],[1614,16,1273,22],[1614,20,1273,26,"AuthImplicitGrantRedirectError"],[1614,58,1273,56],[1614,59,1273,57,"params"],[1614,65,1273,63],[1614,66,1273,64,"error_description"],[1614,83,1273,81],[1614,87,1273,85],[1614,136,1273,134],[1614,138,1273,136],[1615,12,1274,20,"error"],[1615,17,1274,25],[1615,19,1274,27,"params"],[1615,25,1274,33],[1615,26,1274,34,"error"],[1615,31,1274,39],[1615,35,1274,43],[1615,54,1274,62],[1616,12,1275,20,"code"],[1616,16,1275,24],[1616,18,1275,26,"params"],[1616,24,1275,32],[1616,25,1275,33,"error_code"],[1616,35,1275,43],[1616,39,1275,47],[1617,10,1276,16],[1617,11,1276,17],[1617,12,1276,18],[1618,8,1277,12],[1619,8,1278,12],[1620,8,1279,12],[1620,16,1279,20,"callbackUrlType"],[1620,31,1279,35],[1621,10,1280,16],[1621,15,1280,21],[1621,25,1280,31],[1622,12,1281,20],[1622,16,1281,24],[1622,20,1281,28],[1622,21,1281,29,"flowType"],[1622,29,1281,37],[1622,34,1281,42],[1622,40,1281,48],[1622,42,1281,50],[1623,14,1282,24],[1623,20,1282,30],[1623,24,1282,34,"AuthPKCEGrantCodeExchangeError"],[1623,62,1282,64],[1623,63,1282,65],[1623,91,1282,93],[1623,92,1282,94],[1624,12,1283,20],[1625,12,1284,20],[1626,10,1285,16],[1626,15,1285,21],[1626,21,1285,27],[1627,12,1286,20],[1627,16,1286,24],[1627,20,1286,28],[1627,21,1286,29,"flowType"],[1627,29,1286,37],[1627,34,1286,42],[1627,44,1286,52],[1627,46,1286,54],[1628,14,1287,24],[1628,20,1287,30],[1628,24,1287,34,"AuthImplicitGrantRedirectError"],[1628,62,1287,64],[1628,63,1287,65],[1628,101,1287,103],[1628,102,1287,104],[1629,12,1288,20],[1630,12,1289,20],[1631,10,1290,16],[1632,10,1291,16],[1633,8,1292,12],[1634,8,1293,12],[1635,8,1294,12],[1635,12,1294,16,"callbackUrlType"],[1635,27,1294,31],[1635,32,1294,36],[1635,38,1294,42],[1635,40,1294,44],[1636,10,1295,16],[1636,14,1295,20],[1636,15,1295,21,"_debug"],[1636,21,1295,27],[1636,22,1295,28],[1636,38,1295,44],[1636,40,1295,46],[1636,47,1295,53],[1636,49,1295,55],[1636,63,1295,69],[1636,65,1295,71],[1636,69,1295,75],[1636,70,1295,76],[1637,10,1296,16],[1637,14,1296,20],[1637,15,1296,21,"params"],[1637,21,1296,27],[1637,22,1296,28,"code"],[1637,26,1296,32],[1637,28,1297,20],[1637,34,1297,26],[1637,38,1297,30,"AuthPKCEGrantCodeExchangeError"],[1637,76,1297,60],[1637,77,1297,61],[1637,96,1297,80],[1637,97,1297,81],[1638,10,1298,16],[1638,16,1298,22],[1639,12,1298,24,"data"],[1639,16,1298,28],[1640,12,1298,30,"error"],[1641,10,1298,36],[1641,11,1298,37],[1641,14,1298,40],[1641,20,1298,46],[1641,24,1298,50],[1641,25,1298,51,"_exchangeCodeForSession"],[1641,48,1298,74],[1641,49,1298,75,"params"],[1641,55,1298,81],[1641,56,1298,82,"code"],[1641,60,1298,86],[1641,61,1298,87],[1642,10,1299,16],[1642,14,1299,20,"error"],[1642,19,1299,25],[1642,21,1300,20],[1642,27,1300,26,"error"],[1642,32,1300,31],[1643,10,1301,16],[1643,16,1301,22,"url"],[1643,19,1301,25],[1643,22,1301,28],[1643,26,1301,32,"URL"],[1643,29,1301,35],[1643,30,1301,36,"window"],[1643,36,1301,42],[1643,37,1301,43,"location"],[1643,45,1301,51],[1643,46,1301,52,"href"],[1643,50,1301,56],[1643,51,1301,57],[1644,10,1302,16,"url"],[1644,13,1302,19],[1644,14,1302,20,"searchParams"],[1644,26,1302,32],[1644,27,1302,33,"delete"],[1644,33,1302,39],[1644,34,1302,40],[1644,40,1302,46],[1644,41,1302,47],[1645,10,1303,16,"window"],[1645,16,1303,22],[1645,17,1303,23,"history"],[1645,24,1303,30],[1645,25,1303,31,"replaceState"],[1645,37,1303,43],[1645,38,1303,44,"window"],[1645,44,1303,50],[1645,45,1303,51,"history"],[1645,52,1303,58],[1645,53,1303,59,"state"],[1645,58,1303,64],[1645,60,1303,66],[1645,62,1303,68],[1645,64,1303,70,"url"],[1645,67,1303,73],[1645,68,1303,74,"toString"],[1645,76,1303,82],[1645,77,1303,83],[1645,78,1303,84],[1645,79,1303,85],[1646,10,1304,16],[1646,17,1304,23],[1647,12,1304,25,"data"],[1647,16,1304,29],[1647,18,1304,31],[1648,14,1304,33,"session"],[1648,21,1304,40],[1648,23,1304,42,"data"],[1648,27,1304,46],[1648,28,1304,47,"session"],[1648,35,1304,54],[1649,14,1304,56,"redirectType"],[1649,26,1304,68],[1649,28,1304,70],[1650,12,1304,75],[1650,13,1304,76],[1651,12,1304,78,"error"],[1651,17,1304,83],[1651,19,1304,85],[1652,10,1304,90],[1652,11,1304,91],[1653,8,1305,12],[1654,8,1306,12],[1654,14,1306,18],[1655,10,1306,20,"provider_token"],[1655,24,1306,34],[1656,10,1306,36,"provider_refresh_token"],[1656,32,1306,58],[1657,10,1306,60,"access_token"],[1657,22,1306,72],[1658,10,1306,74,"refresh_token"],[1658,23,1306,87],[1659,10,1306,89,"expires_in"],[1659,20,1306,99],[1660,10,1306,101,"expires_at"],[1660,20,1306,111],[1661,10,1306,113,"token_type"],[1662,8,1306,125],[1662,9,1306,126],[1662,12,1306,129,"params"],[1662,18,1306,135],[1663,8,1307,12],[1663,12,1307,16],[1663,13,1307,17,"access_token"],[1663,25,1307,29],[1663,29,1307,33],[1663,30,1307,34,"expires_in"],[1663,40,1307,44],[1663,44,1307,48],[1663,45,1307,49,"refresh_token"],[1663,58,1307,62],[1663,62,1307,66],[1663,63,1307,67,"token_type"],[1663,73,1307,77],[1663,75,1307,79],[1664,10,1308,16],[1664,16,1308,22],[1664,20,1308,26,"AuthImplicitGrantRedirectError"],[1664,58,1308,56],[1664,59,1308,57],[1664,86,1308,84],[1664,87,1308,85],[1665,8,1309,12],[1666,8,1310,12],[1666,14,1310,18,"timeNow"],[1666,21,1310,25],[1666,24,1310,28,"Math"],[1666,28,1310,32],[1666,29,1310,33,"round"],[1666,34,1310,38],[1666,35,1310,39,"Date"],[1666,39,1310,43],[1666,40,1310,44,"now"],[1666,43,1310,47],[1666,44,1310,48],[1666,45,1310,49],[1666,48,1310,52],[1666,52,1310,56],[1666,53,1310,57],[1667,8,1311,12],[1667,14,1311,18,"expiresIn"],[1667,23,1311,27],[1667,26,1311,30,"parseInt"],[1667,34,1311,38],[1667,35,1311,39,"expires_in"],[1667,45,1311,49],[1667,46,1311,50],[1668,8,1312,12],[1668,12,1312,16,"expiresAt"],[1668,21,1312,25],[1668,24,1312,28,"timeNow"],[1668,31,1312,35],[1668,34,1312,38,"expiresIn"],[1668,43,1312,47],[1669,8,1313,12],[1669,12,1313,16,"expires_at"],[1669,22,1313,26],[1669,24,1313,28],[1670,10,1314,16,"expiresAt"],[1670,19,1314,25],[1670,22,1314,28,"parseInt"],[1670,30,1314,36],[1670,31,1314,37,"expires_at"],[1670,41,1314,47],[1670,42,1314,48],[1671,8,1315,12],[1672,8,1316,12],[1672,14,1316,18,"actuallyExpiresIn"],[1672,31,1316,35],[1672,34,1316,38,"expiresAt"],[1672,43,1316,47],[1672,46,1316,50,"timeNow"],[1672,53,1316,57],[1673,8,1317,12],[1673,12,1317,16,"actuallyExpiresIn"],[1673,29,1317,33],[1673,32,1317,36],[1673,36,1317,40],[1673,40,1317,44,"AUTO_REFRESH_TICK_DURATION_MS"],[1673,80,1317,73],[1673,82,1317,75],[1674,10,1318,16,"console"],[1674,17,1318,23],[1674,18,1318,24,"warn"],[1674,22,1318,28],[1674,23,1318,29],[1674,88,1318,94,"actuallyExpiresIn"],[1674,105,1318,111],[1674,138,1318,144,"expiresIn"],[1674,147,1318,153],[1674,150,1318,156],[1674,151,1318,157],[1675,8,1319,12],[1676,8,1320,12],[1676,14,1320,18,"issuedAt"],[1676,22,1320,26],[1676,25,1320,29,"expiresAt"],[1676,34,1320,38],[1676,37,1320,41,"expiresIn"],[1676,46,1320,50],[1677,8,1321,12],[1677,12,1321,16,"timeNow"],[1677,19,1321,23],[1677,22,1321,26,"issuedAt"],[1677,30,1321,34],[1677,34,1321,38],[1677,37,1321,41],[1677,39,1321,43],[1678,10,1322,16,"console"],[1678,17,1322,23],[1678,18,1322,24,"warn"],[1678,22,1322,28],[1678,23,1322,29],[1678,120,1322,126],[1678,122,1322,128,"issuedAt"],[1678,130,1322,136],[1678,132,1322,138,"expiresAt"],[1678,141,1322,147],[1678,143,1322,149,"timeNow"],[1678,150,1322,156],[1678,151,1322,157],[1679,8,1323,12],[1679,9,1323,13],[1679,15,1324,17],[1679,19,1324,21,"timeNow"],[1679,26,1324,28],[1679,29,1324,31,"issuedAt"],[1679,37,1324,39],[1679,40,1324,42],[1679,41,1324,43],[1679,43,1324,45],[1680,10,1325,16,"console"],[1680,17,1325,23],[1680,18,1325,24,"warn"],[1680,22,1325,28],[1680,23,1325,29],[1680,133,1325,139],[1680,135,1325,141,"issuedAt"],[1680,143,1325,149],[1680,145,1325,151,"expiresAt"],[1680,154,1325,160],[1680,156,1325,162,"timeNow"],[1680,163,1325,169],[1680,164,1325,170],[1681,8,1326,12],[1682,8,1327,12],[1682,14,1327,18],[1683,10,1327,20,"data"],[1683,14,1327,24],[1684,10,1327,26,"error"],[1685,8,1327,32],[1685,9,1327,33],[1685,12,1327,36],[1685,18,1327,42],[1685,22,1327,46],[1685,23,1327,47,"_getUser"],[1685,31,1327,55],[1685,32,1327,56,"access_token"],[1685,44,1327,68],[1685,45,1327,69],[1686,8,1328,12],[1686,12,1328,16,"error"],[1686,17,1328,21],[1686,19,1329,16],[1686,25,1329,22,"error"],[1686,30,1329,27],[1687,8,1330,12],[1687,14,1330,18,"session"],[1687,21,1330,25],[1687,24,1330,28],[1688,10,1331,16,"provider_token"],[1688,24,1331,30],[1689,10,1332,16,"provider_refresh_token"],[1689,32,1332,38],[1690,10,1333,16,"access_token"],[1690,22,1333,28],[1691,10,1334,16,"expires_in"],[1691,20,1334,26],[1691,22,1334,28,"expiresIn"],[1691,31,1334,37],[1692,10,1335,16,"expires_at"],[1692,20,1335,26],[1692,22,1335,28,"expiresAt"],[1692,31,1335,37],[1693,10,1336,16,"refresh_token"],[1693,23,1336,29],[1694,10,1337,16,"token_type"],[1694,20,1337,26],[1695,10,1338,16,"user"],[1695,14,1338,20],[1695,16,1338,22,"data"],[1695,20,1338,26],[1695,21,1338,27,"user"],[1696,8,1339,12],[1696,9,1339,13],[1697,8,1340,12],[1698,8,1341,12,"window"],[1698,14,1341,18],[1698,15,1341,19,"location"],[1698,23,1341,27],[1698,24,1341,28,"hash"],[1698,28,1341,32],[1698,31,1341,35],[1698,33,1341,37],[1699,8,1342,12],[1699,12,1342,16],[1699,13,1342,17,"_debug"],[1699,19,1342,23],[1699,20,1342,24],[1699,43,1342,47],[1699,45,1342,49],[1699,76,1342,80],[1699,77,1342,81],[1700,8,1343,12],[1700,15,1343,19],[1701,10,1343,21,"data"],[1701,14,1343,25],[1701,16,1343,27],[1702,12,1343,29,"session"],[1702,19,1343,36],[1703,12,1343,38,"redirectType"],[1703,24,1343,50],[1703,26,1343,52,"params"],[1703,32,1343,58],[1703,33,1343,59,"type"],[1704,10,1343,64],[1704,11,1343,65],[1705,10,1343,67,"error"],[1705,15,1343,72],[1705,17,1343,74],[1706,8,1343,79],[1706,9,1343,80],[1707,6,1344,8],[1707,7,1344,9],[1707,8,1345,8],[1707,15,1345,15,"error"],[1707,20,1345,20],[1707,22,1345,22],[1708,8,1346,12],[1708,12,1346,16],[1708,16,1346,16,"isAuthError"],[1708,35,1346,27],[1708,37,1346,28,"error"],[1708,42,1346,33],[1708,43,1346,34],[1708,45,1346,36],[1709,10,1347,16],[1709,17,1347,23],[1710,12,1347,25,"data"],[1710,16,1347,29],[1710,18,1347,31],[1711,14,1347,33,"session"],[1711,21,1347,40],[1711,23,1347,42],[1711,27,1347,46],[1712,14,1347,48,"redirectType"],[1712,26,1347,60],[1712,28,1347,62],[1713,12,1347,67],[1713,13,1347,68],[1714,12,1347,70,"error"],[1715,10,1347,76],[1715,11,1347,77],[1716,8,1348,12],[1717,8,1349,12],[1717,14,1349,18,"error"],[1717,19,1349,23],[1718,6,1350,8],[1719,4,1351,4],[1720,4,1352,4],[1721,0,1353,0],[1722,0,1354,0],[1723,4,1355,4,"_isImplicitGrantCallback"],[1723,28,1355,28,"_isImplicitGrantCallback"],[1723,29,1355,29,"params"],[1723,35,1355,35],[1723,37,1355,37],[1724,6,1356,8],[1724,13,1356,15,"Boolean"],[1724,20,1356,22],[1724,21,1356,23,"params"],[1724,27,1356,29],[1724,28,1356,30,"access_token"],[1724,40,1356,42],[1724,44,1356,46,"params"],[1724,50,1356,52],[1724,51,1356,53,"error_description"],[1724,68,1356,70],[1724,69,1356,71],[1725,4,1357,4],[1726,4,1358,4],[1727,0,1359,0],[1728,0,1360,0],[1729,4,1361,4],[1729,10,1361,10,"_isPKCECallback"],[1729,25,1361,25,"_isPKCECallback"],[1729,26,1361,26,"params"],[1729,32,1361,32],[1729,34,1361,34],[1730,6,1362,8],[1730,12,1362,14,"currentStorageContent"],[1730,33,1362,35],[1730,36,1362,38],[1730,42,1362,44],[1730,46,1362,44,"getItemAsync"],[1730,67,1362,56],[1730,69,1362,57],[1730,73,1362,61],[1730,74,1362,62,"storage"],[1730,81,1362,69],[1730,83,1362,71],[1730,86,1362,74],[1730,90,1362,78],[1730,91,1362,79,"storageKey"],[1730,101,1362,89],[1730,117,1362,105],[1730,118,1362,106],[1731,6,1363,8],[1731,13,1363,15],[1731,14,1363,16],[1731,16,1363,18,"params"],[1731,22,1363,24],[1731,23,1363,25,"code"],[1731,27,1363,29],[1731,31,1363,33,"currentStorageContent"],[1731,52,1363,54],[1731,53,1363,55],[1732,4,1364,4],[1733,4,1365,4],[1734,0,1366,0],[1735,0,1367,0],[1736,0,1368,0],[1737,0,1369,0],[1738,0,1370,0],[1739,0,1371,0],[1740,0,1372,0],[1741,4,1373,4],[1741,10,1373,10,"signOut"],[1741,17,1373,17,"signOut"],[1741,18,1373,18,"options"],[1741,25,1373,25],[1741,28,1373,28],[1742,6,1373,30,"scope"],[1742,11,1373,35],[1742,13,1373,37],[1743,4,1373,46],[1743,5,1373,47],[1743,7,1373,49],[1744,6,1374,8],[1744,12,1374,14],[1744,16,1374,18],[1744,17,1374,19,"initializePromise"],[1744,34,1374,36],[1745,6,1375,8],[1745,13,1375,15],[1745,19,1375,21],[1745,23,1375,25],[1745,24,1375,26,"_acquireLock"],[1745,36,1375,38],[1745,37,1375,39],[1745,38,1375,40],[1745,39,1375,41],[1745,41,1375,43],[1745,53,1375,55],[1746,8,1376,12],[1746,15,1376,19],[1746,21,1376,25],[1746,25,1376,29],[1746,26,1376,30,"_signOut"],[1746,34,1376,38],[1746,35,1376,39,"options"],[1746,42,1376,46],[1746,43,1376,47],[1747,6,1377,8],[1747,7,1377,9],[1747,8,1377,10],[1748,4,1378,4],[1749,4,1379,4],[1749,10,1379,10,"_signOut"],[1749,18,1379,18,"_signOut"],[1749,19,1379,19],[1750,6,1379,21,"scope"],[1751,4,1379,27],[1751,5,1379,28],[1751,8,1379,31],[1752,6,1379,33,"scope"],[1752,11,1379,38],[1752,13,1379,40],[1753,4,1379,49],[1753,5,1379,50],[1753,7,1379,52],[1754,6,1380,8],[1754,13,1380,15],[1754,19,1380,21],[1754,23,1380,25],[1754,24,1380,26,"_useSession"],[1754,35,1380,37],[1754,36,1380,38],[1754,42,1380,45,"result"],[1754,48,1380,51],[1754,52,1380,56],[1755,8,1381,12],[1755,12,1381,16,"_a"],[1755,14,1381,18],[1756,8,1382,12],[1756,14,1382,18],[1757,10,1382,20,"data"],[1757,14,1382,24],[1758,10,1382,26,"error"],[1758,15,1382,31],[1758,17,1382,33,"sessionError"],[1759,8,1382,46],[1759,9,1382,47],[1759,12,1382,50,"result"],[1759,18,1382,56],[1760,8,1383,12],[1760,12,1383,16,"sessionError"],[1760,24,1383,28],[1760,26,1383,30],[1761,10,1384,16],[1761,17,1384,23],[1762,12,1384,25,"error"],[1762,17,1384,30],[1762,19,1384,32,"sessionError"],[1763,10,1384,45],[1763,11,1384,46],[1764,8,1385,12],[1765,8,1386,12],[1765,14,1386,18,"accessToken"],[1765,25,1386,29],[1765,28,1386,32],[1765,29,1386,33,"_a"],[1765,31,1386,35],[1765,34,1386,38,"data"],[1765,38,1386,42],[1765,39,1386,43,"session"],[1765,46,1386,50],[1765,52,1386,56],[1765,56,1386,60],[1765,60,1386,64,"_a"],[1765,62,1386,66],[1765,67,1386,71],[1765,72,1386,76],[1765,73,1386,77],[1765,76,1386,80],[1765,81,1386,85],[1765,82,1386,86],[1765,85,1386,89,"_a"],[1765,87,1386,91],[1765,88,1386,92,"access_token"],[1765,100,1386,104],[1766,8,1387,12],[1766,12,1387,16,"accessToken"],[1766,23,1387,27],[1766,25,1387,29],[1767,10,1388,16],[1767,16,1388,22],[1768,12,1388,24,"error"],[1769,10,1388,30],[1769,11,1388,31],[1769,14,1388,34],[1769,20,1388,40],[1769,24,1388,44],[1769,25,1388,45,"admin"],[1769,30,1388,50],[1769,31,1388,51,"signOut"],[1769,38,1388,58],[1769,39,1388,59,"accessToken"],[1769,50,1388,70],[1769,52,1388,72,"scope"],[1769,57,1388,77],[1769,58,1388,78],[1770,10,1389,16],[1770,14,1389,20,"error"],[1770,19,1389,25],[1770,21,1389,27],[1771,12,1390,20],[1772,12,1391,20],[1773,12,1392,20],[1773,16,1392,24],[1773,18,1392,26],[1773,22,1392,26,"isAuthApiError"],[1773,44,1392,40],[1773,46,1392,41,"error"],[1773,51,1392,46],[1773,52,1392,47],[1773,57,1393,25,"error"],[1773,62,1393,30],[1773,63,1393,31,"status"],[1773,69,1393,37],[1773,74,1393,42],[1773,77,1393,45],[1773,81,1393,49,"error"],[1773,86,1393,54],[1773,87,1393,55,"status"],[1773,93,1393,61],[1773,98,1393,66],[1773,101,1393,69],[1773,105,1393,73,"error"],[1773,110,1393,78],[1773,111,1393,79,"status"],[1773,117,1393,85],[1773,122,1393,90],[1773,125,1393,93],[1773,126,1393,94],[1773,127,1393,95],[1773,129,1393,97],[1774,14,1394,24],[1774,21,1394,31],[1775,16,1394,33,"error"],[1776,14,1394,39],[1776,15,1394,40],[1777,12,1395,20],[1778,10,1396,16],[1779,8,1397,12],[1780,8,1398,12],[1780,12,1398,16,"scope"],[1780,17,1398,21],[1780,22,1398,26],[1780,30,1398,34],[1780,32,1398,36],[1781,10,1399,16],[1781,16,1399,22],[1781,20,1399,26],[1781,21,1399,27,"_removeSession"],[1781,35,1399,41],[1781,36,1399,42],[1781,37,1399,43],[1782,10,1400,16],[1782,16,1400,22],[1782,20,1400,22,"removeItemAsync"],[1782,44,1400,37],[1782,46,1400,38],[1782,50,1400,42],[1782,51,1400,43,"storage"],[1782,58,1400,50],[1782,60,1400,52],[1782,63,1400,55],[1782,67,1400,59],[1782,68,1400,60,"storageKey"],[1782,78,1400,70],[1782,94,1400,86],[1782,95,1400,87],[1783,8,1401,12],[1784,8,1402,12],[1784,15,1402,19],[1785,10,1402,21,"error"],[1785,15,1402,26],[1785,17,1402,28],[1786,8,1402,33],[1786,9,1402,34],[1787,6,1403,8],[1787,7,1403,9],[1787,8,1403,10],[1788,4,1404,4],[1789,4,1405,4],[1790,0,1406,0],[1791,0,1407,0],[1792,0,1408,0],[1793,4,1409,4,"onAuthStateChange"],[1793,21,1409,21,"onAuthStateChange"],[1793,22,1409,22,"callback"],[1793,30,1409,30],[1793,32,1409,32],[1794,6,1410,8],[1794,12,1410,14,"id"],[1794,14,1410,16],[1794,17,1410,19],[1794,21,1410,19,"uuid"],[1794,34,1410,23],[1794,36,1410,24],[1794,37,1410,25],[1795,6,1411,8],[1795,12,1411,14,"subscription"],[1795,24,1411,26],[1795,27,1411,29],[1796,8,1412,12,"id"],[1796,10,1412,14],[1797,8,1413,12,"callback"],[1797,16,1413,20],[1798,8,1414,12,"unsubscribe"],[1798,19,1414,23],[1798,21,1414,25,"unsubscribe"],[1798,22,1414,25],[1798,27,1414,31],[1799,10,1415,16],[1799,14,1415,20],[1799,15,1415,21,"_debug"],[1799,21,1415,27],[1799,22,1415,28],[1799,38,1415,44],[1799,40,1415,46],[1799,79,1415,85],[1799,81,1415,87,"id"],[1799,83,1415,89],[1799,84,1415,90],[1800,10,1416,16],[1800,14,1416,20],[1800,15,1416,21,"stateChangeEmitters"],[1800,34,1416,40],[1800,35,1416,41,"delete"],[1800,41,1416,47],[1800,42,1416,48,"id"],[1800,44,1416,50],[1800,45,1416,51],[1801,8,1417,12],[1802,6,1418,8],[1802,7,1418,9],[1803,6,1419,8],[1803,10,1419,12],[1803,11,1419,13,"_debug"],[1803,17,1419,19],[1803,18,1419,20],[1803,40,1419,42],[1803,42,1419,44],[1803,71,1419,73],[1803,73,1419,75,"id"],[1803,75,1419,77],[1803,76,1419,78],[1804,6,1420,8],[1804,10,1420,12],[1804,11,1420,13,"stateChangeEmitters"],[1804,30,1420,32],[1804,31,1420,33,"set"],[1804,34,1420,36],[1804,35,1420,37,"id"],[1804,37,1420,39],[1804,39,1420,41,"subscription"],[1804,51,1420,53],[1804,52,1420,54],[1805,6,1421,8],[1805,7,1421,9],[1805,19,1421,21],[1806,8,1422,12],[1806,14,1422,18],[1806,18,1422,22],[1806,19,1422,23,"initializePromise"],[1806,36,1422,40],[1807,8,1423,12],[1807,14,1423,18],[1807,18,1423,22],[1807,19,1423,23,"_acquireLock"],[1807,31,1423,35],[1807,32,1423,36],[1807,33,1423,37],[1807,34,1423,38],[1807,36,1423,40],[1807,48,1423,52],[1808,10,1424,16],[1808,14,1424,20],[1808,15,1424,21,"_emitInitialSession"],[1808,34,1424,40],[1808,35,1424,41,"id"],[1808,37,1424,43],[1808,38,1424,44],[1809,8,1425,12],[1809,9,1425,13],[1809,10,1425,14],[1810,6,1426,8],[1810,7,1426,9],[1810,9,1426,11],[1810,10,1426,12],[1811,6,1427,8],[1811,13,1427,15],[1812,8,1427,17,"data"],[1812,12,1427,21],[1812,14,1427,23],[1813,10,1427,25,"subscription"],[1814,8,1427,38],[1815,6,1427,40],[1815,7,1427,41],[1816,4,1428,4],[1817,4,1429,4],[1817,10,1429,10,"_emitInitialSession"],[1817,29,1429,29,"_emitInitialSession"],[1817,30,1429,30,"id"],[1817,32,1429,32],[1817,34,1429,34],[1818,6,1430,8],[1818,13,1430,15],[1818,19,1430,21],[1818,23,1430,25],[1818,24,1430,26,"_useSession"],[1818,35,1430,37],[1818,36,1430,38],[1818,42,1430,45,"result"],[1818,48,1430,51],[1818,52,1430,56],[1819,8,1431,12],[1819,12,1431,16,"_a"],[1819,14,1431,18],[1819,16,1431,20,"_b"],[1819,18,1431,22],[1820,8,1432,12],[1820,12,1432,16],[1821,10,1433,16],[1821,16,1433,22],[1822,12,1433,24,"data"],[1822,16,1433,28],[1822,18,1433,30],[1823,14,1433,32,"session"],[1824,12,1433,40],[1824,13,1433,41],[1825,12,1433,43,"error"],[1826,10,1433,50],[1826,11,1433,51],[1826,14,1433,54,"result"],[1826,20,1433,60],[1827,10,1434,16],[1827,14,1434,20,"error"],[1827,19,1434,25],[1827,21,1435,20],[1827,27,1435,26,"error"],[1827,32,1435,31],[1828,10,1436,16],[1828,17,1436,23],[1828,18,1436,24,"_a"],[1828,20,1436,26],[1828,23,1436,29],[1828,27,1436,33],[1828,28,1436,34,"stateChangeEmitters"],[1828,47,1436,53],[1828,48,1436,54,"get"],[1828,51,1436,57],[1828,52,1436,58,"id"],[1828,54,1436,60],[1828,55,1436,61],[1828,61,1436,67],[1828,65,1436,71],[1828,69,1436,75,"_a"],[1828,71,1436,77],[1828,76,1436,82],[1828,81,1436,87],[1828,82,1436,88],[1828,85,1436,91],[1828,90,1436,96],[1828,91,1436,97],[1828,94,1436,100,"_a"],[1828,96,1436,102],[1828,97,1436,103,"callback"],[1828,105,1436,111],[1828,106,1436,112],[1828,123,1436,129],[1828,125,1436,131,"session"],[1828,132,1436,138],[1828,133,1436,139],[1828,134,1436,140],[1829,10,1437,16],[1829,14,1437,20],[1829,15,1437,21,"_debug"],[1829,21,1437,27],[1829,22,1437,28],[1829,39,1437,45],[1829,41,1437,47],[1829,54,1437,60],[1829,56,1437,62,"id"],[1829,58,1437,64],[1829,60,1437,66],[1829,69,1437,75],[1829,71,1437,77,"session"],[1829,78,1437,84],[1829,79,1437,85],[1830,8,1438,12],[1830,9,1438,13],[1830,10,1439,12],[1830,17,1439,19,"err"],[1830,20,1439,22],[1830,22,1439,24],[1831,10,1440,16],[1831,17,1440,23],[1831,18,1440,24,"_b"],[1831,20,1440,26],[1831,23,1440,29],[1831,27,1440,33],[1831,28,1440,34,"stateChangeEmitters"],[1831,47,1440,53],[1831,48,1440,54,"get"],[1831,51,1440,57],[1831,52,1440,58,"id"],[1831,54,1440,60],[1831,55,1440,61],[1831,61,1440,67],[1831,65,1440,71],[1831,69,1440,75,"_b"],[1831,71,1440,77],[1831,76,1440,82],[1831,81,1440,87],[1831,82,1440,88],[1831,85,1440,91],[1831,90,1440,96],[1831,91,1440,97],[1831,94,1440,100,"_b"],[1831,96,1440,102],[1831,97,1440,103,"callback"],[1831,105,1440,111],[1831,106,1440,112],[1831,123,1440,129],[1831,125,1440,131],[1831,129,1440,135],[1831,130,1440,136],[1831,131,1440,137],[1832,10,1441,16],[1832,14,1441,20],[1832,15,1441,21,"_debug"],[1832,21,1441,27],[1832,22,1441,28],[1832,39,1441,45],[1832,41,1441,47],[1832,54,1441,60],[1832,56,1441,62,"id"],[1832,58,1441,64],[1832,60,1441,66],[1832,67,1441,73],[1832,69,1441,75,"err"],[1832,72,1441,78],[1832,73,1441,79],[1833,10,1442,16,"console"],[1833,17,1442,23],[1833,18,1442,24,"error"],[1833,23,1442,29],[1833,24,1442,30,"err"],[1833,27,1442,33],[1833,28,1442,34],[1834,8,1443,12],[1835,6,1444,8],[1835,7,1444,9],[1835,8,1444,10],[1836,4,1445,4],[1837,4,1446,4],[1838,0,1447,0],[1839,0,1448,0],[1840,0,1449,0],[1841,0,1450,0],[1842,0,1451,0],[1843,0,1452,0],[1844,4,1453,4],[1844,10,1453,10,"resetPasswordForEmail"],[1844,31,1453,31,"resetPasswordForEmail"],[1844,32,1453,32,"email"],[1844,37,1453,37],[1844,39,1453,39,"options"],[1844,46,1453,46],[1844,49,1453,49],[1844,50,1453,50],[1844,51,1453,51],[1844,53,1453,53],[1845,6,1454,8],[1845,10,1454,12,"codeChallenge"],[1845,23,1454,25],[1845,26,1454,28],[1845,30,1454,32],[1846,6,1455,8],[1846,10,1455,12,"codeChallengeMethod"],[1846,29,1455,31],[1846,32,1455,34],[1846,36,1455,38],[1847,6,1456,8],[1847,10,1456,12],[1847,14,1456,16],[1847,15,1456,17,"flowType"],[1847,23,1456,25],[1847,28,1456,30],[1847,34,1456,36],[1847,36,1456,38],[1848,8,1457,12],[1849,8,1458,12],[1849,9,1458,13,"codeChallenge"],[1849,22,1458,26],[1849,24,1458,28,"codeChallengeMethod"],[1849,43,1458,47],[1849,44,1458,48],[1849,47,1458,51],[1849,53,1458,57],[1849,57,1458,57,"getCodeChallengeAndMethod"],[1849,91,1458,82],[1849,93,1458,83],[1849,97,1458,87],[1849,98,1458,88,"storage"],[1849,105,1458,95],[1849,107,1458,97],[1849,111,1458,101],[1849,112,1458,102,"storageKey"],[1849,122,1458,112],[1849,124,1458,114],[1849,128,1458,118],[1849,129,1458,119],[1850,8,1459,12],[1850,9,1459,13],[1851,6,1460,8],[1852,6,1461,8],[1852,10,1461,12],[1853,8,1462,12],[1853,15,1462,19],[1853,21,1462,25],[1853,25,1462,25,"_request"],[1853,40,1462,33],[1853,42,1462,34],[1853,46,1462,38],[1853,47,1462,39,"fetch"],[1853,52,1462,44],[1853,54,1462,46],[1853,60,1462,52],[1853,62,1462,54],[1853,65,1462,57],[1853,69,1462,61],[1853,70,1462,62,"url"],[1853,73,1462,65],[1853,83,1462,75],[1853,85,1462,77],[1854,10,1463,16,"body"],[1854,14,1463,20],[1854,16,1463,22],[1855,12,1464,20,"email"],[1855,17,1464,25],[1856,12,1465,20,"code_challenge"],[1856,26,1465,34],[1856,28,1465,36,"codeChallenge"],[1856,41,1465,49],[1857,12,1466,20,"code_challenge_method"],[1857,33,1466,41],[1857,35,1466,43,"codeChallengeMethod"],[1857,54,1466,62],[1858,12,1467,20,"gotrue_meta_security"],[1858,32,1467,40],[1858,34,1467,42],[1859,14,1467,44,"captcha_token"],[1859,27,1467,57],[1859,29,1467,59,"options"],[1859,36,1467,66],[1859,37,1467,67,"captchaToken"],[1860,12,1467,80],[1861,10,1468,16],[1861,11,1468,17],[1862,10,1469,16,"headers"],[1862,17,1469,23],[1862,19,1469,25],[1862,23,1469,29],[1862,24,1469,30,"headers"],[1862,31,1469,37],[1863,10,1470,16,"redirectTo"],[1863,20,1470,26],[1863,22,1470,28,"options"],[1863,29,1470,35],[1863,30,1470,36,"redirectTo"],[1864,8,1471,12],[1864,9,1471,13],[1864,10,1471,14],[1865,6,1472,8],[1865,7,1472,9],[1865,8,1473,8],[1865,15,1473,15,"error"],[1865,20,1473,20],[1865,22,1473,22],[1866,8,1474,12],[1866,12,1474,16],[1866,16,1474,16,"isAuthError"],[1866,35,1474,27],[1866,37,1474,28,"error"],[1866,42,1474,33],[1866,43,1474,34],[1866,45,1474,36],[1867,10,1475,16],[1867,17,1475,23],[1868,12,1475,25,"data"],[1868,16,1475,29],[1868,18,1475,31],[1868,22,1475,35],[1869,12,1475,37,"error"],[1870,10,1475,43],[1870,11,1475,44],[1871,8,1476,12],[1872,8,1477,12],[1872,14,1477,18,"error"],[1872,19,1477,23],[1873,6,1478,8],[1874,4,1479,4],[1875,4,1480,4],[1876,0,1481,0],[1877,0,1482,0],[1878,4,1483,4],[1878,10,1483,10,"getUserIdentities"],[1878,27,1483,27,"getUserIdentities"],[1878,28,1483,27],[1878,30,1483,30],[1879,6,1484,8],[1879,10,1484,12,"_a"],[1879,12,1484,14],[1880,6,1485,8],[1880,10,1485,12],[1881,8,1486,12],[1881,14,1486,18],[1882,10,1486,20,"data"],[1882,14,1486,24],[1883,10,1486,26,"error"],[1884,8,1486,32],[1884,9,1486,33],[1884,12,1486,36],[1884,18,1486,42],[1884,22,1486,46],[1884,23,1486,47,"getUser"],[1884,30,1486,54],[1884,31,1486,55],[1884,32,1486,56],[1885,8,1487,12],[1885,12,1487,16,"error"],[1885,17,1487,21],[1885,19,1488,16],[1885,25,1488,22,"error"],[1885,30,1488,27],[1886,8,1489,12],[1886,15,1489,19],[1887,10,1489,21,"data"],[1887,14,1489,25],[1887,16,1489,27],[1888,12,1489,29,"identities"],[1888,22,1489,39],[1888,24,1489,41],[1888,25,1489,42,"_a"],[1888,27,1489,44],[1888,30,1489,47,"data"],[1888,34,1489,51],[1888,35,1489,52,"user"],[1888,39,1489,56],[1888,40,1489,57,"identities"],[1888,50,1489,67],[1888,56,1489,73],[1888,60,1489,77],[1888,64,1489,81,"_a"],[1888,66,1489,83],[1888,71,1489,88],[1888,76,1489,93],[1888,77,1489,94],[1888,80,1489,97,"_a"],[1888,82,1489,99],[1888,85,1489,102],[1889,10,1489,105],[1889,11,1489,106],[1890,10,1489,108,"error"],[1890,15,1489,113],[1890,17,1489,115],[1891,8,1489,120],[1891,9,1489,121],[1892,6,1490,8],[1892,7,1490,9],[1892,8,1491,8],[1892,15,1491,15,"error"],[1892,20,1491,20],[1892,22,1491,22],[1893,8,1492,12],[1893,12,1492,16],[1893,16,1492,16,"isAuthError"],[1893,35,1492,27],[1893,37,1492,28,"error"],[1893,42,1492,33],[1893,43,1492,34],[1893,45,1492,36],[1894,10,1493,16],[1894,17,1493,23],[1895,12,1493,25,"data"],[1895,16,1493,29],[1895,18,1493,31],[1895,22,1493,35],[1896,12,1493,37,"error"],[1897,10,1493,43],[1897,11,1493,44],[1898,8,1494,12],[1899,8,1495,12],[1899,14,1495,18,"error"],[1899,19,1495,23],[1900,6,1496,8],[1901,4,1497,4],[1902,4,1498,4],[1903,0,1499,0],[1904,0,1500,0],[1905,0,1501,0],[1906,4,1502,4],[1906,10,1502,10,"linkIdentity"],[1906,22,1502,22,"linkIdentity"],[1906,23,1502,23,"credentials"],[1906,34,1502,34],[1906,36,1502,36],[1907,6,1503,8],[1907,10,1503,12,"_a"],[1907,12,1503,14],[1908,6,1504,8],[1908,10,1504,12],[1909,8,1505,12],[1909,14,1505,18],[1910,10,1505,20,"data"],[1910,14,1505,24],[1911,10,1505,26,"error"],[1912,8,1505,32],[1912,9,1505,33],[1912,12,1505,36],[1912,18,1505,42],[1912,22,1505,46],[1912,23,1505,47,"_useSession"],[1912,34,1505,58],[1912,35,1505,59],[1912,41,1505,66,"result"],[1912,47,1505,72],[1912,51,1505,77],[1913,10,1506,16],[1913,14,1506,20,"_a"],[1913,16,1506,22],[1913,18,1506,24,"_b"],[1913,20,1506,26],[1913,22,1506,28,"_c"],[1913,24,1506,30],[1913,26,1506,32,"_d"],[1913,28,1506,34],[1913,30,1506,36,"_e"],[1913,32,1506,38],[1914,10,1507,16],[1914,16,1507,22],[1915,12,1507,24,"data"],[1915,16,1507,28],[1916,12,1507,30,"error"],[1917,10,1507,36],[1917,11,1507,37],[1917,14,1507,40,"result"],[1917,20,1507,46],[1918,10,1508,16],[1918,14,1508,20,"error"],[1918,19,1508,25],[1918,21,1509,20],[1918,27,1509,26,"error"],[1918,32,1509,31],[1919,10,1510,16],[1919,16,1510,22,"url"],[1919,19,1510,25],[1919,22,1510,28],[1919,28,1510,34],[1919,32,1510,38],[1919,33,1510,39,"_getUrlForProvider"],[1919,51,1510,57],[1919,52,1510,58],[1919,55,1510,61],[1919,59,1510,65],[1919,60,1510,66,"url"],[1919,63,1510,69],[1919,91,1510,97],[1919,93,1510,99,"credentials"],[1919,104,1510,110],[1919,105,1510,111,"provider"],[1919,113,1510,119],[1919,115,1510,121],[1920,12,1511,20,"redirectTo"],[1920,22,1511,30],[1920,24,1511,32],[1920,25,1511,33,"_a"],[1920,27,1511,35],[1920,30,1511,38,"credentials"],[1920,41,1511,49],[1920,42,1511,50,"options"],[1920,49,1511,57],[1920,55,1511,63],[1920,59,1511,67],[1920,63,1511,71,"_a"],[1920,65,1511,73],[1920,70,1511,78],[1920,75,1511,83],[1920,76,1511,84],[1920,79,1511,87],[1920,84,1511,92],[1920,85,1511,93],[1920,88,1511,96,"_a"],[1920,90,1511,98],[1920,91,1511,99,"redirectTo"],[1920,101,1511,109],[1921,12,1512,20,"scopes"],[1921,18,1512,26],[1921,20,1512,28],[1921,21,1512,29,"_b"],[1921,23,1512,31],[1921,26,1512,34,"credentials"],[1921,37,1512,45],[1921,38,1512,46,"options"],[1921,45,1512,53],[1921,51,1512,59],[1921,55,1512,63],[1921,59,1512,67,"_b"],[1921,61,1512,69],[1921,66,1512,74],[1921,71,1512,79],[1921,72,1512,80],[1921,75,1512,83],[1921,80,1512,88],[1921,81,1512,89],[1921,84,1512,92,"_b"],[1921,86,1512,94],[1921,87,1512,95,"scopes"],[1921,93,1512,101],[1922,12,1513,20,"queryParams"],[1922,23,1513,31],[1922,25,1513,33],[1922,26,1513,34,"_c"],[1922,28,1513,36],[1922,31,1513,39,"credentials"],[1922,42,1513,50],[1922,43,1513,51,"options"],[1922,50,1513,58],[1922,56,1513,64],[1922,60,1513,68],[1922,64,1513,72,"_c"],[1922,66,1513,74],[1922,71,1513,79],[1922,76,1513,84],[1922,77,1513,85],[1922,80,1513,88],[1922,85,1513,93],[1922,86,1513,94],[1922,89,1513,97,"_c"],[1922,91,1513,99],[1922,92,1513,100,"queryParams"],[1922,103,1513,111],[1923,12,1514,20,"skipBrowserRedirect"],[1923,31,1514,39],[1923,33,1514,41],[1924,10,1515,16],[1924,11,1515,17],[1924,12,1515,18],[1925,10,1516,16],[1925,17,1516,23],[1925,23,1516,29],[1925,27,1516,29,"_request"],[1925,42,1516,37],[1925,44,1516,38],[1925,48,1516,42],[1925,49,1516,43,"fetch"],[1925,54,1516,48],[1925,56,1516,50],[1925,61,1516,55],[1925,63,1516,57,"url"],[1925,66,1516,60],[1925,68,1516,62],[1926,12,1517,20,"headers"],[1926,19,1517,27],[1926,21,1517,29],[1926,25,1517,33],[1926,26,1517,34,"headers"],[1926,33,1517,41],[1927,12,1518,20,"jwt"],[1927,15,1518,23],[1927,17,1518,25],[1927,18,1518,26,"_e"],[1927,20,1518,28],[1927,23,1518,31],[1927,24,1518,32,"_d"],[1927,26,1518,34],[1927,29,1518,37,"data"],[1927,33,1518,41],[1927,34,1518,42,"session"],[1927,41,1518,49],[1927,47,1518,55],[1927,51,1518,59],[1927,55,1518,63,"_d"],[1927,57,1518,65],[1927,62,1518,70],[1927,67,1518,75],[1927,68,1518,76],[1927,71,1518,79],[1927,76,1518,84],[1927,77,1518,85],[1927,80,1518,88,"_d"],[1927,82,1518,90],[1927,83,1518,91,"access_token"],[1927,95,1518,103],[1927,101,1518,109],[1927,105,1518,113],[1927,109,1518,117,"_e"],[1927,111,1518,119],[1927,116,1518,124],[1927,121,1518,129],[1927,122,1518,130],[1927,125,1518,133,"_e"],[1927,127,1518,135],[1927,130,1518,138,"undefined"],[1928,10,1519,16],[1928,11,1519,17],[1928,12,1519,18],[1929,8,1520,12],[1929,9,1520,13],[1929,10,1520,14],[1930,8,1521,12],[1930,12,1521,16,"error"],[1930,17,1521,21],[1930,19,1522,16],[1930,25,1522,22,"error"],[1930,30,1522,27],[1931,8,1523,12],[1931,12,1523,16],[1931,16,1523,16,"isBrowser"],[1931,34,1523,25],[1931,36,1523,26],[1931,37,1523,27],[1931,41,1523,31],[1931,43,1523,33],[1931,44,1523,34,"_a"],[1931,46,1523,36],[1931,49,1523,39,"credentials"],[1931,60,1523,50],[1931,61,1523,51,"options"],[1931,68,1523,58],[1931,74,1523,64],[1931,78,1523,68],[1931,82,1523,72,"_a"],[1931,84,1523,74],[1931,89,1523,79],[1931,94,1523,84],[1931,95,1523,85],[1931,98,1523,88],[1931,103,1523,93],[1931,104,1523,94],[1931,107,1523,97,"_a"],[1931,109,1523,99],[1931,110,1523,100,"skipBrowserRedirect"],[1931,129,1523,119],[1931,130,1523,120],[1931,132,1523,122],[1932,10,1524,16,"window"],[1932,16,1524,22],[1932,17,1524,23,"location"],[1932,25,1524,31],[1932,26,1524,32,"assign"],[1932,32,1524,38],[1932,33,1524,39,"data"],[1932,37,1524,43],[1932,42,1524,48],[1932,46,1524,52],[1932,50,1524,56,"data"],[1932,54,1524,60],[1932,59,1524,65],[1932,64,1524,70],[1932,65,1524,71],[1932,68,1524,74],[1932,73,1524,79],[1932,74,1524,80],[1932,77,1524,83,"data"],[1932,81,1524,87],[1932,82,1524,88,"url"],[1932,85,1524,91],[1932,86,1524,92],[1933,8,1525,12],[1934,8,1526,12],[1934,15,1526,19],[1935,10,1526,21,"data"],[1935,14,1526,25],[1935,16,1526,27],[1936,12,1526,29,"provider"],[1936,20,1526,37],[1936,22,1526,39,"credentials"],[1936,33,1526,50],[1936,34,1526,51,"provider"],[1936,42,1526,59],[1937,12,1526,61,"url"],[1937,15,1526,64],[1937,17,1526,66,"data"],[1937,21,1526,70],[1937,26,1526,75],[1937,30,1526,79],[1937,34,1526,83,"data"],[1937,38,1526,87],[1937,43,1526,92],[1937,48,1526,97],[1937,49,1526,98],[1937,52,1526,101],[1937,57,1526,106],[1937,58,1526,107],[1937,61,1526,110,"data"],[1937,65,1526,114],[1937,66,1526,115,"url"],[1938,10,1526,119],[1938,11,1526,120],[1939,10,1526,122,"error"],[1939,15,1526,127],[1939,17,1526,129],[1940,8,1526,134],[1940,9,1526,135],[1941,6,1527,8],[1941,7,1527,9],[1941,8,1528,8],[1941,15,1528,15,"error"],[1941,20,1528,20],[1941,22,1528,22],[1942,8,1529,12],[1942,12,1529,16],[1942,16,1529,16,"isAuthError"],[1942,35,1529,27],[1942,37,1529,28,"error"],[1942,42,1529,33],[1942,43,1529,34],[1942,45,1529,36],[1943,10,1530,16],[1943,17,1530,23],[1944,12,1530,25,"data"],[1944,16,1530,29],[1944,18,1530,31],[1945,14,1530,33,"provider"],[1945,22,1530,41],[1945,24,1530,43,"credentials"],[1945,35,1530,54],[1945,36,1530,55,"provider"],[1945,44,1530,63],[1946,14,1530,65,"url"],[1946,17,1530,68],[1946,19,1530,70],[1947,12,1530,75],[1947,13,1530,76],[1948,12,1530,78,"error"],[1949,10,1530,84],[1949,11,1530,85],[1950,8,1531,12],[1951,8,1532,12],[1951,14,1532,18,"error"],[1951,19,1532,23],[1952,6,1533,8],[1953,4,1534,4],[1954,4,1535,4],[1955,0,1536,0],[1956,0,1537,0],[1957,4,1538,4],[1957,10,1538,10,"unlinkIdentity"],[1957,24,1538,24,"unlinkIdentity"],[1957,25,1538,25,"identity"],[1957,33,1538,33],[1957,35,1538,35],[1958,6,1539,8],[1958,10,1539,12],[1959,8,1540,12],[1959,15,1540,19],[1959,21,1540,25],[1959,25,1540,29],[1959,26,1540,30,"_useSession"],[1959,37,1540,41],[1959,38,1540,42],[1959,44,1540,49,"result"],[1959,50,1540,55],[1959,54,1540,60],[1960,10,1541,16],[1960,14,1541,20,"_a"],[1960,16,1541,22],[1960,18,1541,24,"_b"],[1960,20,1541,26],[1961,10,1542,16],[1961,16,1542,22],[1962,12,1542,24,"data"],[1962,16,1542,28],[1963,12,1542,30,"error"],[1964,10,1542,36],[1964,11,1542,37],[1964,14,1542,40,"result"],[1964,20,1542,46],[1965,10,1543,16],[1965,14,1543,20,"error"],[1965,19,1543,25],[1965,21,1543,27],[1966,12,1544,20],[1966,18,1544,26,"error"],[1966,23,1544,31],[1967,10,1545,16],[1968,10,1546,16],[1968,17,1546,23],[1968,23,1546,29],[1968,27,1546,29,"_request"],[1968,42,1546,37],[1968,44,1546,38],[1968,48,1546,42],[1968,49,1546,43,"fetch"],[1968,54,1546,48],[1968,56,1546,50],[1968,64,1546,58],[1968,66,1546,60],[1968,69,1546,63],[1968,73,1546,67],[1968,74,1546,68,"url"],[1968,77,1546,71],[1968,97,1546,91,"identity"],[1968,105,1546,99],[1968,106,1546,100,"identity_id"],[1968,117,1546,111],[1968,119,1546,113],[1968,121,1546,115],[1969,12,1547,20,"headers"],[1969,19,1547,27],[1969,21,1547,29],[1969,25,1547,33],[1969,26,1547,34,"headers"],[1969,33,1547,41],[1970,12,1548,20,"jwt"],[1970,15,1548,23],[1970,17,1548,25],[1970,18,1548,26,"_b"],[1970,20,1548,28],[1970,23,1548,31],[1970,24,1548,32,"_a"],[1970,26,1548,34],[1970,29,1548,37,"data"],[1970,33,1548,41],[1970,34,1548,42,"session"],[1970,41,1548,49],[1970,47,1548,55],[1970,51,1548,59],[1970,55,1548,63,"_a"],[1970,57,1548,65],[1970,62,1548,70],[1970,67,1548,75],[1970,68,1548,76],[1970,71,1548,79],[1970,76,1548,84],[1970,77,1548,85],[1970,80,1548,88,"_a"],[1970,82,1548,90],[1970,83,1548,91,"access_token"],[1970,95,1548,103],[1970,101,1548,109],[1970,105,1548,113],[1970,109,1548,117,"_b"],[1970,111,1548,119],[1970,116,1548,124],[1970,121,1548,129],[1970,122,1548,130],[1970,125,1548,133,"_b"],[1970,127,1548,135],[1970,130,1548,138,"undefined"],[1971,10,1549,16],[1971,11,1549,17],[1971,12,1549,18],[1972,8,1550,12],[1972,9,1550,13],[1972,10,1550,14],[1973,6,1551,8],[1973,7,1551,9],[1973,8,1552,8],[1973,15,1552,15,"error"],[1973,20,1552,20],[1973,22,1552,22],[1974,8,1553,12],[1974,12,1553,16],[1974,16,1553,16,"isAuthError"],[1974,35,1553,27],[1974,37,1553,28,"error"],[1974,42,1553,33],[1974,43,1553,34],[1974,45,1553,36],[1975,10,1554,16],[1975,17,1554,23],[1976,12,1554,25,"data"],[1976,16,1554,29],[1976,18,1554,31],[1976,22,1554,35],[1977,12,1554,37,"error"],[1978,10,1554,43],[1978,11,1554,44],[1979,8,1555,12],[1980,8,1556,12],[1980,14,1556,18,"error"],[1980,19,1556,23],[1981,6,1557,8],[1982,4,1558,4],[1983,4,1559,4],[1984,0,1560,0],[1985,0,1561,0],[1986,0,1562,0],[1987,4,1563,4],[1987,10,1563,10,"_refreshAccessToken"],[1987,29,1563,29,"_refreshAccessToken"],[1987,30,1563,30,"refreshToken"],[1987,42,1563,42],[1987,44,1563,44],[1988,6,1564,8],[1988,12,1564,14,"debugName"],[1988,21,1564,23],[1988,24,1564,26],[1988,48,1564,50,"refreshToken"],[1988,60,1564,62],[1988,61,1564,63,"substring"],[1988,70,1564,72],[1988,71,1564,73],[1988,72,1564,74],[1988,74,1564,76],[1988,75,1564,77],[1988,76,1564,78],[1988,82,1564,84],[1989,6,1565,8],[1989,10,1565,12],[1989,11,1565,13,"_debug"],[1989,17,1565,19],[1989,18,1565,20,"debugName"],[1989,27,1565,29],[1989,29,1565,31],[1989,36,1565,38],[1989,37,1565,39],[1990,6,1566,8],[1990,10,1566,12],[1991,8,1567,12],[1991,14,1567,18,"startedAt"],[1991,23,1567,27],[1991,26,1567,30,"Date"],[1991,30,1567,34],[1991,31,1567,35,"now"],[1991,34,1567,38],[1991,35,1567,39],[1991,36,1567,40],[1992,8,1568,12],[1993,8,1569,12],[1993,15,1569,19],[1993,21,1569,25],[1993,25,1569,25,"retryable"],[1993,43,1569,34],[1993,45,1569,35],[1993,51,1569,42,"attempt"],[1993,58,1569,49],[1993,62,1569,54],[1994,10,1570,16],[1994,14,1570,20,"attempt"],[1994,21,1570,27],[1994,24,1570,30],[1994,25,1570,31],[1994,27,1570,33],[1995,12,1571,20],[1995,18,1571,26],[1995,22,1571,26,"sleep"],[1995,36,1571,31],[1995,38,1571,32],[1995,41,1571,35],[1995,44,1571,38,"Math"],[1995,48,1571,42],[1995,49,1571,43,"pow"],[1995,52,1571,46],[1995,53,1571,47],[1995,54,1571,48],[1995,56,1571,50,"attempt"],[1995,63,1571,57],[1995,66,1571,60],[1995,67,1571,61],[1995,68,1571,62],[1995,69,1571,63],[1995,70,1571,64],[1995,71,1571,65],[1996,10,1572,16],[1997,10,1573,16],[1997,14,1573,20],[1997,15,1573,21,"_debug"],[1997,21,1573,27],[1997,22,1573,28,"debugName"],[1997,31,1573,37],[1997,33,1573,39],[1997,53,1573,59],[1997,55,1573,61,"attempt"],[1997,62,1573,68],[1997,63,1573,69],[1998,10,1574,16],[1998,17,1574,23],[1998,23,1574,29],[1998,27,1574,29,"_request"],[1998,42,1574,37],[1998,44,1574,38],[1998,48,1574,42],[1998,49,1574,43,"fetch"],[1998,54,1574,48],[1998,56,1574,50],[1998,62,1574,56],[1998,64,1574,58],[1998,67,1574,61],[1998,71,1574,65],[1998,72,1574,66,"url"],[1998,75,1574,69],[1998,108,1574,102],[1998,110,1574,104],[1999,12,1575,20,"body"],[1999,16,1575,24],[1999,18,1575,26],[2000,14,1575,28,"refresh_token"],[2000,27,1575,41],[2000,29,1575,43,"refreshToken"],[2001,12,1575,56],[2001,13,1575,57],[2002,12,1576,20,"headers"],[2002,19,1576,27],[2002,21,1576,29],[2002,25,1576,33],[2002,26,1576,34,"headers"],[2002,33,1576,41],[2003,12,1577,20,"xform"],[2003,17,1577,25],[2003,19,1577,27,"_sessionResponse"],[2004,10,1578,16],[2004,11,1578,17],[2004,12,1578,18],[2005,8,1579,12],[2005,9,1579,13],[2005,11,1579,15],[2005,12,1579,16,"attempt"],[2005,19,1579,23],[2005,21,1579,25,"error"],[2005,26,1579,30],[2005,31,1579,35],[2006,10,1580,16],[2006,16,1580,22,"nextBackOffInterval"],[2006,35,1580,41],[2006,38,1580,44],[2006,41,1580,47],[2006,44,1580,50,"Math"],[2006,48,1580,54],[2006,49,1580,55,"pow"],[2006,52,1580,58],[2006,53,1580,59],[2006,54,1580,60],[2006,56,1580,62,"attempt"],[2006,63,1580,69],[2006,64,1580,70],[2007,10,1581,16],[2007,17,1581,24,"error"],[2007,22,1581,29],[2007,26,1582,20],[2007,30,1582,20,"isAuthRetryableFetchError"],[2007,63,1582,45],[2007,65,1582,46,"error"],[2007,70,1582,51],[2007,71,1582,52],[2008,10,1583,20],[2009,10,1584,20,"Date"],[2009,14,1584,24],[2009,15,1584,25,"now"],[2009,18,1584,28],[2009,19,1584,29],[2009,20,1584,30],[2009,23,1584,33,"nextBackOffInterval"],[2009,42,1584,52],[2009,45,1584,55,"startedAt"],[2009,54,1584,64],[2009,57,1584,67,"AUTO_REFRESH_TICK_DURATION_MS"],[2009,97,1584,96],[2010,8,1585,12],[2010,9,1585,13],[2010,10,1585,14],[2011,6,1586,8],[2011,7,1586,9],[2011,8,1587,8],[2011,15,1587,15,"error"],[2011,20,1587,20],[2011,22,1587,22],[2012,8,1588,12],[2012,12,1588,16],[2012,13,1588,17,"_debug"],[2012,19,1588,23],[2012,20,1588,24,"debugName"],[2012,29,1588,33],[2012,31,1588,35],[2012,38,1588,42],[2012,40,1588,44,"error"],[2012,45,1588,49],[2012,46,1588,50],[2013,8,1589,12],[2013,12,1589,16],[2013,16,1589,16,"isAuthError"],[2013,35,1589,27],[2013,37,1589,28,"error"],[2013,42,1589,33],[2013,43,1589,34],[2013,45,1589,36],[2014,10,1590,16],[2014,17,1590,23],[2015,12,1590,25,"data"],[2015,16,1590,29],[2015,18,1590,31],[2016,14,1590,33,"session"],[2016,21,1590,40],[2016,23,1590,42],[2016,27,1590,46],[2017,14,1590,48,"user"],[2017,18,1590,52],[2017,20,1590,54],[2018,12,1590,59],[2018,13,1590,60],[2019,12,1590,62,"error"],[2020,10,1590,68],[2020,11,1590,69],[2021,8,1591,12],[2022,8,1592,12],[2022,14,1592,18,"error"],[2022,19,1592,23],[2023,6,1593,8],[2023,7,1593,9],[2023,16,1594,16],[2024,8,1595,12],[2024,12,1595,16],[2024,13,1595,17,"_debug"],[2024,19,1595,23],[2024,20,1595,24,"debugName"],[2024,29,1595,33],[2024,31,1595,35],[2024,36,1595,40],[2024,37,1595,41],[2025,6,1596,8],[2026,4,1597,4],[2027,4,1598,4,"_isValidSession"],[2027,19,1598,19,"_isValidSession"],[2027,20,1598,20,"maybeSession"],[2027,32,1598,32],[2027,34,1598,34],[2028,6,1599,8],[2028,12,1599,14,"isValidSession"],[2028,26,1599,28],[2028,29,1599,31],[2028,36,1599,38,"maybeSession"],[2028,48,1599,50],[2028,53,1599,55],[2028,61,1599,63],[2028,65,1600,12,"maybeSession"],[2028,77,1600,24],[2028,82,1600,29],[2028,86,1600,33],[2028,90,1601,12],[2028,104,1601,26],[2028,108,1601,30,"maybeSession"],[2028,120,1601,42],[2028,124,1602,12],[2028,139,1602,27],[2028,143,1602,31,"maybeSession"],[2028,155,1602,43],[2028,159,1603,12],[2028,171,1603,24],[2028,175,1603,28,"maybeSession"],[2028,187,1603,40],[2029,6,1604,8],[2029,13,1604,15,"isValidSession"],[2029,27,1604,29],[2030,4,1605,4],[2031,4,1606,4],[2031,10,1606,10,"_handleProviderSignIn"],[2031,31,1606,31,"_handleProviderSignIn"],[2031,32,1606,32,"provider"],[2031,40,1606,40],[2031,42,1606,42,"options"],[2031,49,1606,49],[2031,51,1606,51],[2032,6,1607,8],[2032,12,1607,14,"url"],[2032,15,1607,17],[2032,18,1607,20],[2032,24,1607,26],[2032,28,1607,30],[2032,29,1607,31,"_getUrlForProvider"],[2032,47,1607,49],[2032,48,1607,50],[2032,51,1607,53],[2032,55,1607,57],[2032,56,1607,58,"url"],[2032,59,1607,61],[2032,71,1607,73],[2032,73,1607,75,"provider"],[2032,81,1607,83],[2032,83,1607,85],[2033,8,1608,12,"redirectTo"],[2033,18,1608,22],[2033,20,1608,24,"options"],[2033,27,1608,31],[2033,28,1608,32,"redirectTo"],[2033,38,1608,42],[2034,8,1609,12,"scopes"],[2034,14,1609,18],[2034,16,1609,20,"options"],[2034,23,1609,27],[2034,24,1609,28,"scopes"],[2034,30,1609,34],[2035,8,1610,12,"queryParams"],[2035,19,1610,23],[2035,21,1610,25,"options"],[2035,28,1610,32],[2035,29,1610,33,"queryParams"],[2036,6,1611,8],[2036,7,1611,9],[2036,8,1611,10],[2037,6,1612,8],[2037,10,1612,12],[2037,11,1612,13,"_debug"],[2037,17,1612,19],[2037,18,1612,20],[2037,44,1612,46],[2037,46,1612,48],[2037,56,1612,58],[2037,58,1612,60,"provider"],[2037,66,1612,68],[2037,68,1612,70],[2037,77,1612,79],[2037,79,1612,81,"options"],[2037,86,1612,88],[2037,88,1612,90],[2037,93,1612,95],[2037,95,1612,97,"url"],[2037,98,1612,100],[2037,99,1612,101],[2038,6,1613,8],[2039,6,1614,8],[2039,10,1614,12],[2039,14,1614,12,"isBrowser"],[2039,32,1614,21],[2039,34,1614,22],[2039,35,1614,23],[2039,39,1614,27],[2039,40,1614,28,"options"],[2039,47,1614,35],[2039,48,1614,36,"skipBrowserRedirect"],[2039,67,1614,55],[2039,69,1614,57],[2040,8,1615,12,"window"],[2040,14,1615,18],[2040,15,1615,19,"location"],[2040,23,1615,27],[2040,24,1615,28,"assign"],[2040,30,1615,34],[2040,31,1615,35,"url"],[2040,34,1615,38],[2040,35,1615,39],[2041,6,1616,8],[2042,6,1617,8],[2042,13,1617,15],[2043,8,1617,17,"data"],[2043,12,1617,21],[2043,14,1617,23],[2044,10,1617,25,"provider"],[2044,18,1617,33],[2045,10,1617,35,"url"],[2046,8,1617,39],[2046,9,1617,40],[2047,8,1617,42,"error"],[2047,13,1617,47],[2047,15,1617,49],[2048,6,1617,54],[2048,7,1617,55],[2049,4,1618,4],[2050,4,1619,4],[2051,0,1620,0],[2052,0,1621,0],[2053,0,1622,0],[2054,4,1623,4],[2054,10,1623,10,"_recoverAndRefresh"],[2054,28,1623,28,"_recoverAndRefresh"],[2054,29,1623,28],[2054,31,1623,31],[2055,6,1624,8],[2055,10,1624,12,"_a"],[2055,12,1624,14],[2055,14,1624,16,"_b"],[2055,16,1624,18],[2056,6,1625,8],[2056,12,1625,14,"debugName"],[2056,21,1625,23],[2056,24,1625,26],[2056,47,1625,49],[2057,6,1626,8],[2057,10,1626,12],[2057,11,1626,13,"_debug"],[2057,17,1626,19],[2057,18,1626,20,"debugName"],[2057,27,1626,29],[2057,29,1626,31],[2057,36,1626,38],[2057,37,1626,39],[2058,6,1627,8],[2058,10,1627,12],[2059,8,1628,12],[2059,14,1628,18,"currentSession"],[2059,28,1628,32],[2059,31,1628,36],[2059,37,1628,42],[2059,41,1628,42,"getItemAsync"],[2059,62,1628,54],[2059,64,1628,55],[2059,68,1628,59],[2059,69,1628,60,"storage"],[2059,76,1628,67],[2059,78,1628,69],[2059,82,1628,73],[2059,83,1628,74,"storageKey"],[2059,93,1628,84],[2059,94,1628,86],[2060,8,1629,12],[2060,12,1629,16,"currentSession"],[2060,26,1629,30],[2060,30,1629,34],[2060,34,1629,38],[2060,35,1629,39,"userStorage"],[2060,46,1629,50],[2060,48,1629,52],[2061,10,1630,16],[2061,14,1630,20,"maybeUser"],[2061,23,1630,29],[2061,26,1630,33],[2061,32,1630,39],[2061,36,1630,39,"getItemAsync"],[2061,57,1630,51],[2061,59,1630,52],[2061,63,1630,56],[2061,64,1630,57,"userStorage"],[2061,75,1630,68],[2061,77,1630,70],[2061,81,1630,74],[2061,82,1630,75,"storageKey"],[2061,92,1630,85],[2061,95,1630,88],[2061,102,1630,95],[2061,103,1630,97],[2062,10,1631,16],[2062,14,1631,20],[2062,15,1631,21],[2062,19,1631,25],[2062,20,1631,26,"storage"],[2062,27,1631,33],[2062,28,1631,34,"isServer"],[2062,36,1631,42],[2062,40,1631,46,"Object"],[2062,46,1631,52],[2062,47,1631,53,"is"],[2062,49,1631,55],[2062,50,1631,56],[2062,54,1631,60],[2062,55,1631,61,"storage"],[2062,62,1631,68],[2062,64,1631,70],[2062,68,1631,74],[2062,69,1631,75,"userStorage"],[2062,80,1631,86],[2062,81,1631,87],[2062,85,1631,91],[2062,86,1631,92,"maybeUser"],[2062,95,1631,101],[2062,97,1631,103],[2063,12,1632,20],[2064,12,1633,20],[2065,12,1634,20],[2066,12,1635,20],[2067,12,1636,20,"maybeUser"],[2067,21,1636,29],[2067,24,1636,32],[2068,14,1636,34,"user"],[2068,18,1636,38],[2068,20,1636,40,"currentSession"],[2068,34,1636,54],[2068,35,1636,55,"user"],[2069,12,1636,60],[2069,13,1636,61],[2070,12,1637,20],[2070,18,1637,26],[2070,22,1637,26,"setItemAsync"],[2070,43,1637,38],[2070,45,1637,39],[2070,49,1637,43],[2070,50,1637,44,"userStorage"],[2070,61,1637,55],[2070,63,1637,57],[2070,67,1637,61],[2070,68,1637,62,"storageKey"],[2070,78,1637,72],[2070,81,1637,75],[2070,88,1637,82],[2070,90,1637,84,"maybeUser"],[2070,99,1637,93],[2070,100,1637,94],[2071,10,1638,16],[2072,10,1639,16,"currentSession"],[2072,24,1639,30],[2072,25,1639,31,"user"],[2072,29,1639,35],[2072,32,1639,38],[2072,33,1639,39,"_a"],[2072,35,1639,41],[2072,38,1639,44,"maybeUser"],[2072,47,1639,53],[2072,52,1639,58],[2072,56,1639,62],[2072,60,1639,66,"maybeUser"],[2072,69,1639,75],[2072,74,1639,80],[2072,79,1639,85],[2072,80,1639,86],[2072,83,1639,89],[2072,88,1639,94],[2072,89,1639,95],[2072,92,1639,98,"maybeUser"],[2072,101,1639,107],[2072,102,1639,108,"user"],[2072,106,1639,112],[2072,112,1639,118],[2072,116,1639,122],[2072,120,1639,126,"_a"],[2072,122,1639,128],[2072,127,1639,133],[2072,132,1639,138],[2072,133,1639,139],[2072,136,1639,142,"_a"],[2072,138,1639,144],[2072,141,1639,147],[2072,145,1639,147,"userNotAvailableProxy"],[2072,175,1639,168],[2072,177,1639,169],[2072,178,1639,170],[2073,8,1640,12],[2073,9,1640,13],[2073,15,1641,17],[2073,19,1641,21,"currentSession"],[2073,33,1641,35],[2073,37,1641,39],[2073,38,1641,40,"currentSession"],[2073,52,1641,54],[2073,53,1641,55,"user"],[2073,57,1641,59],[2073,59,1641,61],[2074,10,1642,16],[2075,10,1643,16],[2076,10,1644,16],[2076,14,1644,20],[2076,15,1644,21,"currentSession"],[2076,29,1644,35],[2076,30,1644,36,"user"],[2076,34,1644,40],[2076,36,1644,42],[2077,12,1645,20],[2078,12,1646,20],[2078,18,1646,26,"separateUser"],[2078,30,1646,38],[2078,33,1646,42],[2078,39,1646,48],[2078,43,1646,48,"getItemAsync"],[2078,64,1646,60],[2078,66,1646,61],[2078,70,1646,65],[2078,71,1646,66,"storage"],[2078,78,1646,73],[2078,80,1646,75],[2078,84,1646,79],[2078,85,1646,80,"storageKey"],[2078,95,1646,90],[2078,98,1646,93],[2078,105,1646,100],[2078,106,1646,102],[2079,12,1647,20],[2079,16,1647,24,"separateUser"],[2079,28,1647,36],[2079,33,1647,41,"separateUser"],[2079,45,1647,53],[2079,50,1647,58],[2079,54,1647,62],[2079,58,1647,66,"separateUser"],[2079,70,1647,78],[2079,75,1647,83],[2079,80,1647,88],[2079,81,1647,89],[2079,84,1647,92],[2079,89,1647,97],[2079,90,1647,98],[2079,93,1647,101,"separateUser"],[2079,105,1647,113],[2079,106,1647,114,"user"],[2079,110,1647,118],[2079,111,1647,119],[2079,113,1647,121],[2080,14,1648,24,"currentSession"],[2080,28,1648,38],[2080,29,1648,39,"user"],[2080,33,1648,43],[2080,36,1648,46,"separateUser"],[2080,48,1648,58],[2080,49,1648,59,"user"],[2080,53,1648,63],[2081,14,1649,24],[2081,20,1649,30],[2081,24,1649,30,"removeItemAsync"],[2081,48,1649,45],[2081,50,1649,46],[2081,54,1649,50],[2081,55,1649,51,"storage"],[2081,62,1649,58],[2081,64,1649,60],[2081,68,1649,64],[2081,69,1649,65,"storageKey"],[2081,79,1649,75],[2081,82,1649,78],[2081,89,1649,85],[2081,90,1649,86],[2082,14,1650,24],[2082,20,1650,30],[2082,24,1650,30,"setItemAsync"],[2082,45,1650,42],[2082,47,1650,43],[2082,51,1650,47],[2082,52,1650,48,"storage"],[2082,59,1650,55],[2082,61,1650,57],[2082,65,1650,61],[2082,66,1650,62,"storageKey"],[2082,76,1650,72],[2082,78,1650,74,"currentSession"],[2082,92,1650,88],[2082,93,1650,89],[2083,12,1651,20],[2083,13,1651,21],[2083,19,1652,25],[2084,14,1653,24,"currentSession"],[2084,28,1653,38],[2084,29,1653,39,"user"],[2084,33,1653,43],[2084,36,1653,46],[2084,40,1653,46,"userNotAvailableProxy"],[2084,70,1653,67],[2084,72,1653,68],[2084,73,1653,69],[2085,12,1654,20],[2086,10,1655,16],[2087,8,1656,12],[2088,8,1657,12],[2088,12,1657,16],[2088,13,1657,17,"_debug"],[2088,19,1657,23],[2088,20,1657,24,"debugName"],[2088,29,1657,33],[2088,31,1657,35],[2088,53,1657,57],[2088,55,1657,59,"currentSession"],[2088,69,1657,73],[2088,70,1657,74],[2089,8,1658,12],[2089,12,1658,16],[2089,13,1658,17],[2089,17,1658,21],[2089,18,1658,22,"_isValidSession"],[2089,33,1658,37],[2089,34,1658,38,"currentSession"],[2089,48,1658,52],[2089,49,1658,53],[2089,51,1658,55],[2090,10,1659,16],[2090,14,1659,20],[2090,15,1659,21,"_debug"],[2090,21,1659,27],[2090,22,1659,28,"debugName"],[2090,31,1659,37],[2090,33,1659,39],[2090,55,1659,61],[2090,56,1659,62],[2091,10,1660,16],[2091,14,1660,20,"currentSession"],[2091,28,1660,34],[2091,33,1660,39],[2091,37,1660,43],[2091,39,1660,45],[2092,12,1661,20],[2092,18,1661,26],[2092,22,1661,30],[2092,23,1661,31,"_removeSession"],[2092,37,1661,45],[2092,38,1661,46],[2092,39,1661,47],[2093,10,1662,16],[2094,10,1663,16],[2095,8,1664,12],[2096,8,1665,12],[2096,14,1665,18,"expiresWithMargin"],[2096,31,1665,35],[2096,34,1665,38],[2096,35,1665,39],[2096,36,1665,40,"_b"],[2096,38,1665,42],[2096,41,1665,45,"currentSession"],[2096,55,1665,59],[2096,56,1665,60,"expires_at"],[2096,66,1665,70],[2096,72,1665,76],[2096,76,1665,80],[2096,80,1665,84,"_b"],[2096,82,1665,86],[2096,87,1665,91],[2096,92,1665,96],[2096,93,1665,97],[2096,96,1665,100,"_b"],[2096,98,1665,102],[2096,101,1665,105,"Infinity"],[2096,109,1665,113],[2096,113,1665,117],[2096,117,1665,121],[2096,120,1665,124,"Date"],[2096,124,1665,128],[2096,125,1665,129,"now"],[2096,128,1665,132],[2096,129,1665,133],[2096,130,1665,134],[2096,133,1665,137,"EXPIRY_MARGIN_MS"],[2096,160,1665,153],[2097,8,1666,12],[2097,12,1666,16],[2097,13,1666,17,"_debug"],[2097,19,1666,23],[2097,20,1666,24,"debugName"],[2097,29,1666,33],[2097,31,1666,35],[2097,45,1666,49,"expiresWithMargin"],[2097,62,1666,66],[2097,65,1666,69],[2097,67,1666,71],[2097,70,1666,74],[2097,76,1666,80],[2097,103,1666,107,"EXPIRY_MARGIN_MS"],[2097,130,1666,123],[2097,133,1666,126],[2097,134,1666,127],[2098,8,1667,12],[2098,12,1667,16,"expiresWithMargin"],[2098,29,1667,33],[2098,31,1667,35],[2099,10,1668,16],[2099,14,1668,20],[2099,18,1668,24],[2099,19,1668,25,"autoRefreshToken"],[2099,35,1668,41],[2099,39,1668,45,"currentSession"],[2099,53,1668,59],[2099,54,1668,60,"refresh_token"],[2099,67,1668,73],[2099,69,1668,75],[2100,12,1669,20],[2100,18,1669,26],[2101,14,1669,28,"error"],[2102,12,1669,34],[2102,13,1669,35],[2102,16,1669,38],[2102,22,1669,44],[2102,26,1669,48],[2102,27,1669,49,"_callRefreshToken"],[2102,44,1669,66],[2102,45,1669,67,"currentSession"],[2102,59,1669,81],[2102,60,1669,82,"refresh_token"],[2102,73,1669,95],[2102,74,1669,96],[2103,12,1670,20],[2103,16,1670,24,"error"],[2103,21,1670,29],[2103,23,1670,31],[2104,14,1671,24,"console"],[2104,21,1671,31],[2104,22,1671,32,"error"],[2104,27,1671,37],[2104,28,1671,38,"error"],[2104,33,1671,43],[2104,34,1671,44],[2105,14,1672,24],[2105,18,1672,28],[2105,19,1672,29],[2105,23,1672,29,"isAuthRetryableFetchError"],[2105,56,1672,54],[2105,58,1672,55,"error"],[2105,63,1672,60],[2105,64,1672,61],[2105,66,1672,63],[2106,16,1673,28],[2106,20,1673,32],[2106,21,1673,33,"_debug"],[2106,27,1673,39],[2106,28,1673,40,"debugName"],[2106,37,1673,49],[2106,39,1673,51],[2106,104,1673,116],[2106,106,1673,118,"error"],[2106,111,1673,123],[2106,112,1673,124],[2107,16,1674,28],[2107,22,1674,34],[2107,26,1674,38],[2107,27,1674,39,"_removeSession"],[2107,41,1674,53],[2107,42,1674,54],[2107,43,1674,55],[2108,14,1675,24],[2109,12,1676,20],[2110,10,1677,16],[2111,8,1678,12],[2111,9,1678,13],[2111,15,1679,17],[2111,19,1679,21,"currentSession"],[2111,33,1679,35],[2111,34,1679,36,"user"],[2111,38,1679,40],[2111,42,1680,16,"currentSession"],[2111,56,1680,30],[2111,57,1680,31,"user"],[2111,61,1680,35],[2111,62,1680,36,"__isUserNotAvailableProxy"],[2111,87,1680,61],[2111,92,1680,66],[2111,96,1680,70],[2111,98,1680,72],[2112,10,1681,16],[2113,10,1682,16],[2113,14,1682,20],[2114,12,1683,20],[2114,18,1683,26],[2115,14,1683,28,"data"],[2115,18,1683,32],[2116,14,1683,34,"error"],[2116,19,1683,39],[2116,21,1683,41,"userError"],[2117,12,1683,51],[2117,13,1683,52],[2117,16,1683,55],[2117,22,1683,61],[2117,26,1683,65],[2117,27,1683,66,"_getUser"],[2117,35,1683,74],[2117,36,1683,75,"currentSession"],[2117,50,1683,89],[2117,51,1683,90,"access_token"],[2117,63,1683,102],[2117,64,1683,103],[2118,12,1684,20],[2118,16,1684,24],[2118,17,1684,25,"userError"],[2118,26,1684,34],[2118,31,1684,39,"data"],[2118,35,1684,43],[2118,40,1684,48],[2118,44,1684,52],[2118,48,1684,56,"data"],[2118,52,1684,60],[2118,57,1684,65],[2118,62,1684,70],[2118,63,1684,71],[2118,66,1684,74],[2118,71,1684,79],[2118,72,1684,80],[2118,75,1684,83,"data"],[2118,79,1684,87],[2118,80,1684,88,"user"],[2118,84,1684,92],[2118,85,1684,93],[2118,87,1684,95],[2119,14,1685,24,"currentSession"],[2119,28,1685,38],[2119,29,1685,39,"user"],[2119,33,1685,43],[2119,36,1685,46,"data"],[2119,40,1685,50],[2119,41,1685,51,"user"],[2119,45,1685,55],[2120,14,1686,24],[2120,20,1686,30],[2120,24,1686,34],[2120,25,1686,35,"_saveSession"],[2120,37,1686,47],[2120,38,1686,48,"currentSession"],[2120,52,1686,62],[2120,53,1686,63],[2121,14,1687,24],[2121,20,1687,30],[2121,24,1687,34],[2121,25,1687,35,"_notifyAllSubscribers"],[2121,46,1687,56],[2121,47,1687,57],[2121,58,1687,68],[2121,60,1687,70,"currentSession"],[2121,74,1687,84],[2121,75,1687,85],[2122,12,1688,20],[2122,13,1688,21],[2122,19,1689,25],[2123,14,1690,24],[2123,18,1690,28],[2123,19,1690,29,"_debug"],[2123,25,1690,35],[2123,26,1690,36,"debugName"],[2123,35,1690,45],[2123,37,1690,47],[2123,95,1690,105],[2123,96,1690,106],[2124,12,1691,20],[2125,10,1692,16],[2125,11,1692,17],[2125,12,1693,16],[2125,19,1693,23,"getUserError"],[2125,31,1693,35],[2125,33,1693,37],[2126,12,1694,20,"console"],[2126,19,1694,27],[2126,20,1694,28,"error"],[2126,25,1694,33],[2126,26,1694,34],[2126,52,1694,60],[2126,54,1694,62,"getUserError"],[2126,66,1694,74],[2126,67,1694,75],[2127,12,1695,20],[2127,16,1695,24],[2127,17,1695,25,"_debug"],[2127,23,1695,31],[2127,24,1695,32,"debugName"],[2127,33,1695,41],[2127,35,1695,43],[2127,93,1695,101],[2127,95,1695,103,"getUserError"],[2127,107,1695,115],[2127,108,1695,116],[2128,10,1696,16],[2129,8,1697,12],[2129,9,1697,13],[2129,15,1698,17],[2130,10,1699,16],[2131,10,1700,16],[2132,10,1701,16],[2133,10,1702,16],[2133,16,1702,22],[2133,20,1702,26],[2133,21,1702,27,"_notifyAllSubscribers"],[2133,42,1702,48],[2133,43,1702,49],[2133,54,1702,60],[2133,56,1702,62,"currentSession"],[2133,70,1702,76],[2133,71,1702,77],[2134,8,1703,12],[2135,6,1704,8],[2135,7,1704,9],[2135,8,1705,8],[2135,15,1705,15,"err"],[2135,18,1705,18],[2135,20,1705,20],[2136,8,1706,12],[2136,12,1706,16],[2136,13,1706,17,"_debug"],[2136,19,1706,23],[2136,20,1706,24,"debugName"],[2136,29,1706,33],[2136,31,1706,35],[2136,38,1706,42],[2136,40,1706,44,"err"],[2136,43,1706,47],[2136,44,1706,48],[2137,8,1707,12,"console"],[2137,15,1707,19],[2137,16,1707,20,"error"],[2137,21,1707,25],[2137,22,1707,26,"err"],[2137,25,1707,29],[2137,26,1707,30],[2138,8,1708,12],[2139,6,1709,8],[2139,7,1709,9],[2139,16,1710,16],[2140,8,1711,12],[2140,12,1711,16],[2140,13,1711,17,"_debug"],[2140,19,1711,23],[2140,20,1711,24,"debugName"],[2140,29,1711,33],[2140,31,1711,35],[2140,36,1711,40],[2140,37,1711,41],[2141,6,1712,8],[2142,4,1713,4],[2143,4,1714,4],[2143,10,1714,10,"_callRefreshToken"],[2143,27,1714,27,"_callRefreshToken"],[2143,28,1714,28,"refreshToken"],[2143,40,1714,40],[2143,42,1714,42],[2144,6,1715,8],[2144,10,1715,12,"_a"],[2144,12,1715,14],[2144,14,1715,16,"_b"],[2144,16,1715,18],[2145,6,1716,8],[2145,10,1716,12],[2145,11,1716,13,"refreshToken"],[2145,23,1716,25],[2145,25,1716,27],[2146,8,1717,12],[2146,14,1717,18],[2146,18,1717,22,"AuthSessionMissingError"],[2146,49,1717,45],[2146,50,1717,46],[2146,51,1717,47],[2147,6,1718,8],[2148,6,1719,8],[2149,6,1720,8],[2149,10,1720,12],[2149,14,1720,16],[2149,15,1720,17,"refreshingDeferred"],[2149,33,1720,35],[2149,35,1720,37],[2150,8,1721,12],[2150,15,1721,19],[2150,19,1721,23],[2150,20,1721,24,"refreshingDeferred"],[2150,38,1721,42],[2150,39,1721,43,"promise"],[2150,46,1721,50],[2151,6,1722,8],[2152,6,1723,8],[2152,12,1723,14,"debugName"],[2152,21,1723,23],[2152,24,1723,26],[2152,46,1723,48,"refreshToken"],[2152,58,1723,60],[2152,59,1723,61,"substring"],[2152,68,1723,70],[2152,69,1723,71],[2152,70,1723,72],[2152,72,1723,74],[2152,73,1723,75],[2152,74,1723,76],[2152,80,1723,82],[2153,6,1724,8],[2153,10,1724,12],[2153,11,1724,13,"_debug"],[2153,17,1724,19],[2153,18,1724,20,"debugName"],[2153,27,1724,29],[2153,29,1724,31],[2153,36,1724,38],[2153,37,1724,39],[2154,6,1725,8],[2154,10,1725,12],[2155,8,1726,12],[2155,12,1726,16],[2155,13,1726,17,"refreshingDeferred"],[2155,31,1726,35],[2155,34,1726,38],[2155,38,1726,42,"Deferred"],[2155,55,1726,50],[2155,56,1726,51],[2155,57,1726,52],[2156,8,1727,12],[2156,14,1727,18],[2157,10,1727,20,"data"],[2157,14,1727,24],[2158,10,1727,26,"error"],[2159,8,1727,32],[2159,9,1727,33],[2159,12,1727,36],[2159,18,1727,42],[2159,22,1727,46],[2159,23,1727,47,"_refreshAccessToken"],[2159,42,1727,66],[2159,43,1727,67,"refreshToken"],[2159,55,1727,79],[2159,56,1727,80],[2160,8,1728,12],[2160,12,1728,16,"error"],[2160,17,1728,21],[2160,19,1729,16],[2160,25,1729,22,"error"],[2160,30,1729,27],[2161,8,1730,12],[2161,12,1730,16],[2161,13,1730,17,"data"],[2161,17,1730,21],[2161,18,1730,22,"session"],[2161,25,1730,29],[2161,27,1731,16],[2161,33,1731,22],[2161,37,1731,26,"AuthSessionMissingError"],[2161,68,1731,49],[2161,69,1731,50],[2161,70,1731,51],[2162,8,1732,12],[2162,14,1732,18],[2162,18,1732,22],[2162,19,1732,23,"_saveSession"],[2162,31,1732,35],[2162,32,1732,36,"data"],[2162,36,1732,40],[2162,37,1732,41,"session"],[2162,44,1732,48],[2162,45,1732,49],[2163,8,1733,12],[2163,14,1733,18],[2163,18,1733,22],[2163,19,1733,23,"_notifyAllSubscribers"],[2163,40,1733,44],[2163,41,1733,45],[2163,58,1733,62],[2163,60,1733,64,"data"],[2163,64,1733,68],[2163,65,1733,69,"session"],[2163,72,1733,76],[2163,73,1733,77],[2164,8,1734,12],[2164,14,1734,18,"result"],[2164,20,1734,24],[2164,23,1734,27],[2165,10,1734,29,"session"],[2165,17,1734,36],[2165,19,1734,38,"data"],[2165,23,1734,42],[2165,24,1734,43,"session"],[2165,31,1734,50],[2166,10,1734,52,"error"],[2166,15,1734,57],[2166,17,1734,59],[2167,8,1734,64],[2167,9,1734,65],[2168,8,1735,12],[2168,12,1735,16],[2168,13,1735,17,"refreshingDeferred"],[2168,31,1735,35],[2168,32,1735,36,"resolve"],[2168,39,1735,43],[2168,40,1735,44,"result"],[2168,46,1735,50],[2168,47,1735,51],[2169,8,1736,12],[2169,15,1736,19,"result"],[2169,21,1736,25],[2170,6,1737,8],[2170,7,1737,9],[2170,8,1738,8],[2170,15,1738,15,"error"],[2170,20,1738,20],[2170,22,1738,22],[2171,8,1739,12],[2171,12,1739,16],[2171,13,1739,17,"_debug"],[2171,19,1739,23],[2171,20,1739,24,"debugName"],[2171,29,1739,33],[2171,31,1739,35],[2171,38,1739,42],[2171,40,1739,44,"error"],[2171,45,1739,49],[2171,46,1739,50],[2172,8,1740,12],[2172,12,1740,16],[2172,16,1740,16,"isAuthError"],[2172,35,1740,27],[2172,37,1740,28,"error"],[2172,42,1740,33],[2172,43,1740,34],[2172,45,1740,36],[2173,10,1741,16],[2173,16,1741,22,"result"],[2173,22,1741,28],[2173,25,1741,31],[2174,12,1741,33,"session"],[2174,19,1741,40],[2174,21,1741,42],[2174,25,1741,46],[2175,12,1741,48,"error"],[2176,10,1741,54],[2176,11,1741,55],[2177,10,1742,16],[2177,14,1742,20],[2177,15,1742,21],[2177,19,1742,21,"isAuthRetryableFetchError"],[2177,52,1742,46],[2177,54,1742,47,"error"],[2177,59,1742,52],[2177,60,1742,53],[2177,62,1742,55],[2178,12,1743,20],[2178,18,1743,26],[2178,22,1743,30],[2178,23,1743,31,"_removeSession"],[2178,37,1743,45],[2178,38,1743,46],[2178,39,1743,47],[2179,10,1744,16],[2180,10,1745,16],[2180,11,1745,17,"_a"],[2180,13,1745,19],[2180,16,1745,22],[2180,20,1745,26],[2180,21,1745,27,"refreshingDeferred"],[2180,39,1745,45],[2180,45,1745,51],[2180,49,1745,55],[2180,53,1745,59,"_a"],[2180,55,1745,61],[2180,60,1745,66],[2180,65,1745,71],[2180,66,1745,72],[2180,69,1745,75],[2180,74,1745,80],[2180,75,1745,81],[2180,78,1745,84,"_a"],[2180,80,1745,86],[2180,81,1745,87,"resolve"],[2180,88,1745,94],[2180,89,1745,95,"result"],[2180,95,1745,101],[2180,96,1745,102],[2181,10,1746,16],[2181,17,1746,23,"result"],[2181,23,1746,29],[2182,8,1747,12],[2183,8,1748,12],[2183,9,1748,13,"_b"],[2183,11,1748,15],[2183,14,1748,18],[2183,18,1748,22],[2183,19,1748,23,"refreshingDeferred"],[2183,37,1748,41],[2183,43,1748,47],[2183,47,1748,51],[2183,51,1748,55,"_b"],[2183,53,1748,57],[2183,58,1748,62],[2183,63,1748,67],[2183,64,1748,68],[2183,67,1748,71],[2183,72,1748,76],[2183,73,1748,77],[2183,76,1748,80,"_b"],[2183,78,1748,82],[2183,79,1748,83,"reject"],[2183,85,1748,89],[2183,86,1748,90,"error"],[2183,91,1748,95],[2183,92,1748,96],[2184,8,1749,12],[2184,14,1749,18,"error"],[2184,19,1749,23],[2185,6,1750,8],[2185,7,1750,9],[2185,16,1751,16],[2186,8,1752,12],[2186,12,1752,16],[2186,13,1752,17,"refreshingDeferred"],[2186,31,1752,35],[2186,34,1752,38],[2186,38,1752,42],[2187,8,1753,12],[2187,12,1753,16],[2187,13,1753,17,"_debug"],[2187,19,1753,23],[2187,20,1753,24,"debugName"],[2187,29,1753,33],[2187,31,1753,35],[2187,36,1753,40],[2187,37,1753,41],[2188,6,1754,8],[2189,4,1755,4],[2190,4,1756,4],[2190,10,1756,10,"_notifyAllSubscribers"],[2190,31,1756,31,"_notifyAllSubscribers"],[2190,32,1756,32,"event"],[2190,37,1756,37],[2190,39,1756,39,"session"],[2190,46,1756,46],[2190,48,1756,48,"broadcast"],[2190,57,1756,57],[2190,60,1756,60],[2190,64,1756,64],[2190,66,1756,66],[2191,6,1757,8],[2191,12,1757,14,"debugName"],[2191,21,1757,23],[2191,24,1757,26],[2191,50,1757,52,"event"],[2191,55,1757,57],[2191,58,1757,60],[2192,6,1758,8],[2192,10,1758,12],[2192,11,1758,13,"_debug"],[2192,17,1758,19],[2192,18,1758,20,"debugName"],[2192,27,1758,29],[2192,29,1758,31],[2192,36,1758,38],[2192,38,1758,40,"session"],[2192,45,1758,47],[2192,47,1758,49],[2192,62,1758,64,"broadcast"],[2192,71,1758,73],[2192,73,1758,75],[2192,74,1758,76],[2193,6,1759,8],[2193,10,1759,12],[2194,8,1760,12],[2194,12,1760,16],[2194,16,1760,20],[2194,17,1760,21,"broadcastChannel"],[2194,33,1760,37],[2194,37,1760,41,"broadcast"],[2194,46,1760,50],[2194,48,1760,52],[2195,10,1761,16],[2195,14,1761,20],[2195,15,1761,21,"broadcastChannel"],[2195,31,1761,37],[2195,32,1761,38,"postMessage"],[2195,43,1761,49],[2195,44,1761,50],[2196,12,1761,52,"event"],[2196,17,1761,57],[2197,12,1761,59,"session"],[2198,10,1761,67],[2198,11,1761,68],[2198,12,1761,69],[2199,8,1762,12],[2200,8,1763,12],[2200,14,1763,18,"errors"],[2200,20,1763,24],[2200,23,1763,27],[2200,25,1763,29],[2201,8,1764,12],[2201,14,1764,18,"promises"],[2201,22,1764,26],[2201,25,1764,29,"Array"],[2201,30,1764,34],[2201,31,1764,35,"from"],[2201,35,1764,39],[2201,36,1764,40],[2201,40,1764,44],[2201,41,1764,45,"stateChangeEmitters"],[2201,60,1764,64],[2201,61,1764,65,"values"],[2201,67,1764,71],[2201,68,1764,72],[2201,69,1764,73],[2201,70,1764,74],[2201,71,1764,75,"map"],[2201,74,1764,78],[2201,75,1764,79],[2201,81,1764,86,"x"],[2201,82,1764,87],[2201,86,1764,92],[2202,10,1765,16],[2202,14,1765,20],[2203,12,1766,20],[2203,18,1766,26,"x"],[2203,19,1766,27],[2203,20,1766,28,"callback"],[2203,28,1766,36],[2203,29,1766,37,"event"],[2203,34,1766,42],[2203,36,1766,44,"session"],[2203,43,1766,51],[2203,44,1766,52],[2204,10,1767,16],[2204,11,1767,17],[2204,12,1768,16],[2204,19,1768,23,"e"],[2204,20,1768,24],[2204,22,1768,26],[2205,12,1769,20,"errors"],[2205,18,1769,26],[2205,19,1769,27,"push"],[2205,23,1769,31],[2205,24,1769,32,"e"],[2205,25,1769,33],[2205,26,1769,34],[2206,10,1770,16],[2207,8,1771,12],[2207,9,1771,13],[2207,10,1771,14],[2208,8,1772,12],[2208,14,1772,18,"Promise"],[2208,21,1772,25],[2208,22,1772,26,"all"],[2208,25,1772,29],[2208,26,1772,30,"promises"],[2208,34,1772,38],[2208,35,1772,39],[2209,8,1773,12],[2209,12,1773,16,"errors"],[2209,18,1773,22],[2209,19,1773,23,"length"],[2209,25,1773,29],[2209,28,1773,32],[2209,29,1773,33],[2209,31,1773,35],[2210,10,1774,16],[2210,15,1774,21],[2210,19,1774,25,"i"],[2210,20,1774,26],[2210,23,1774,29],[2210,24,1774,30],[2210,26,1774,32,"i"],[2210,27,1774,33],[2210,30,1774,36,"errors"],[2210,36,1774,42],[2210,37,1774,43,"length"],[2210,43,1774,49],[2210,45,1774,51,"i"],[2210,46,1774,52],[2210,50,1774,56],[2210,51,1774,57],[2210,53,1774,59],[2211,12,1775,20,"console"],[2211,19,1775,27],[2211,20,1775,28,"error"],[2211,25,1775,33],[2211,26,1775,34,"errors"],[2211,32,1775,40],[2211,33,1775,41,"i"],[2211,34,1775,42],[2211,35,1775,43],[2211,36,1775,44],[2212,10,1776,16],[2213,10,1777,16],[2213,16,1777,22,"errors"],[2213,22,1777,28],[2213,23,1777,29],[2213,24,1777,30],[2213,25,1777,31],[2214,8,1778,12],[2215,6,1779,8],[2215,7,1779,9],[2215,16,1780,16],[2216,8,1781,12],[2216,12,1781,16],[2216,13,1781,17,"_debug"],[2216,19,1781,23],[2216,20,1781,24,"debugName"],[2216,29,1781,33],[2216,31,1781,35],[2216,36,1781,40],[2216,37,1781,41],[2217,6,1782,8],[2218,4,1783,4],[2219,4,1784,4],[2220,0,1785,0],[2221,0,1786,0],[2222,0,1787,0],[2223,4,1788,4],[2223,10,1788,10,"_saveSession"],[2223,22,1788,22,"_saveSession"],[2223,23,1788,23,"session"],[2223,30,1788,30],[2223,32,1788,32],[2224,6,1789,8],[2224,10,1789,12],[2224,11,1789,13,"_debug"],[2224,17,1789,19],[2224,18,1789,20],[2224,35,1789,37],[2224,37,1789,39,"session"],[2224,44,1789,46],[2224,45,1789,47],[2225,6,1790,8],[2226,6,1791,8],[2227,6,1792,8],[2227,10,1792,12],[2227,11,1792,13,"suppressGetSessionWarning"],[2227,36,1792,38],[2227,39,1792,41],[2227,43,1792,45],[2228,6,1793,8],[2229,6,1794,8],[2229,12,1794,14,"sessionToProcess"],[2229,28,1794,30],[2229,31,1794,33,"Object"],[2229,37,1794,39],[2229,38,1794,40,"assign"],[2229,44,1794,46],[2229,45,1794,47],[2229,46,1794,48],[2229,47,1794,49],[2229,49,1794,51,"session"],[2229,56,1794,58],[2229,57,1794,59],[2230,6,1795,8],[2230,12,1795,14,"userIsProxy"],[2230,23,1795,25],[2230,26,1795,28,"sessionToProcess"],[2230,42,1795,44],[2230,43,1795,45,"user"],[2230,47,1795,49],[2230,51,1795,53,"sessionToProcess"],[2230,67,1795,69],[2230,68,1795,70,"user"],[2230,72,1795,74],[2230,73,1795,75,"__isUserNotAvailableProxy"],[2230,98,1795,100],[2230,103,1795,105],[2230,107,1795,109],[2231,6,1796,8],[2231,10,1796,12],[2231,14,1796,16],[2231,15,1796,17,"userStorage"],[2231,26,1796,28],[2231,28,1796,30],[2232,8,1797,12],[2232,12,1797,16],[2232,13,1797,17,"userIsProxy"],[2232,24,1797,28],[2232,28,1797,32,"sessionToProcess"],[2232,44,1797,48],[2232,45,1797,49,"user"],[2232,49,1797,53],[2232,51,1797,55],[2233,10,1798,16],[2234,10,1799,16],[2234,16,1799,22],[2234,20,1799,22,"setItemAsync"],[2234,41,1799,34],[2234,43,1799,35],[2234,47,1799,39],[2234,48,1799,40,"userStorage"],[2234,59,1799,51],[2234,61,1799,53],[2234,65,1799,57],[2234,66,1799,58,"storageKey"],[2234,76,1799,68],[2234,79,1799,71],[2234,86,1799,78],[2234,88,1799,80],[2235,12,1800,20,"user"],[2235,16,1800,24],[2235,18,1800,26,"sessionToProcess"],[2235,34,1800,42],[2235,35,1800,43,"user"],[2236,10,1801,16],[2236,11,1801,17],[2236,12,1801,18],[2237,8,1802,12],[2237,9,1802,13],[2237,15,1803,17],[2237,19,1803,21,"userIsProxy"],[2237,30,1803,32],[2237,32,1803,34],[2238,10,1804,16],[2239,10,1805,16],[2240,10,1806,16],[2241,10,1807,16],[2242,8,1807,16],[2243,8,1809,12],[2244,8,1810,12],[2245,8,1811,12],[2245,14,1811,18,"mainSessionData"],[2245,29,1811,33],[2245,32,1811,36,"Object"],[2245,38,1811,42],[2245,39,1811,43,"assign"],[2245,45,1811,49],[2245,46,1811,50],[2245,47,1811,51],[2245,48,1811,52],[2245,50,1811,54,"sessionToProcess"],[2245,66,1811,70],[2245,67,1811,71],[2246,8,1812,12],[2246,15,1812,19,"mainSessionData"],[2246,30,1812,34],[2246,31,1812,35,"user"],[2246,35,1812,39],[2246,36,1812,40],[2246,37,1812,41],[2247,8,1813,12],[2247,14,1813,18,"clonedMainSessionData"],[2247,35,1813,39],[2247,38,1813,42],[2247,42,1813,42,"deepClone"],[2247,60,1813,51],[2247,62,1813,52,"mainSessionData"],[2247,77,1813,67],[2247,78,1813,68],[2248,8,1814,12],[2248,14,1814,18],[2248,18,1814,18,"setItemAsync"],[2248,39,1814,30],[2248,41,1814,31],[2248,45,1814,35],[2248,46,1814,36,"storage"],[2248,53,1814,43],[2248,55,1814,45],[2248,59,1814,49],[2248,60,1814,50,"storageKey"],[2248,70,1814,60],[2248,72,1814,62,"clonedMainSessionData"],[2248,93,1814,83],[2248,94,1814,84],[2249,6,1815,8],[2249,7,1815,9],[2249,13,1816,13],[2250,8,1817,12],[2251,8,1818,12],[2252,8,1819,12],[2253,8,1820,12],[2253,14,1820,18,"clonedSession"],[2253,27,1820,31],[2253,30,1820,34],[2253,34,1820,34,"deepClone"],[2253,52,1820,43],[2253,54,1820,44,"sessionToProcess"],[2253,70,1820,60],[2253,71,1820,61],[2253,72,1820,62],[2253,73,1820,63],[2254,8,1821,12],[2254,14,1821,18],[2254,18,1821,18,"setItemAsync"],[2254,39,1821,30],[2254,41,1821,31],[2254,45,1821,35],[2254,46,1821,36,"storage"],[2254,53,1821,43],[2254,55,1821,45],[2254,59,1821,49],[2254,60,1821,50,"storageKey"],[2254,70,1821,60],[2254,72,1821,62,"clonedSession"],[2254,85,1821,75],[2254,86,1821,76],[2255,6,1822,8],[2256,4,1823,4],[2257,4,1824,4],[2257,10,1824,10,"_removeSession"],[2257,24,1824,24,"_removeSession"],[2257,25,1824,24],[2257,27,1824,27],[2258,6,1825,8],[2258,10,1825,12],[2258,11,1825,13,"_debug"],[2258,17,1825,19],[2258,18,1825,20],[2258,37,1825,39],[2258,38,1825,40],[2259,6,1826,8],[2259,12,1826,14],[2259,16,1826,14,"removeItemAsync"],[2259,40,1826,29],[2259,42,1826,30],[2259,46,1826,34],[2259,47,1826,35,"storage"],[2259,54,1826,42],[2259,56,1826,44],[2259,60,1826,48],[2259,61,1826,49,"storageKey"],[2259,71,1826,59],[2259,72,1826,60],[2260,6,1827,8],[2260,12,1827,14],[2260,16,1827,14,"removeItemAsync"],[2260,40,1827,29],[2260,42,1827,30],[2260,46,1827,34],[2260,47,1827,35,"storage"],[2260,54,1827,42],[2260,56,1827,44],[2260,60,1827,48],[2260,61,1827,49,"storageKey"],[2260,71,1827,59],[2260,74,1827,62],[2260,90,1827,78],[2260,91,1827,79],[2261,6,1828,8],[2261,12,1828,14],[2261,16,1828,14,"removeItemAsync"],[2261,40,1828,29],[2261,42,1828,30],[2261,46,1828,34],[2261,47,1828,35,"storage"],[2261,54,1828,42],[2261,56,1828,44],[2261,60,1828,48],[2261,61,1828,49,"storageKey"],[2261,71,1828,59],[2261,74,1828,62],[2261,81,1828,69],[2261,82,1828,70],[2262,6,1829,8],[2262,10,1829,12],[2262,14,1829,16],[2262,15,1829,17,"userStorage"],[2262,26,1829,28],[2262,28,1829,30],[2263,8,1830,12],[2263,14,1830,18],[2263,18,1830,18,"removeItemAsync"],[2263,42,1830,33],[2263,44,1830,34],[2263,48,1830,38],[2263,49,1830,39,"userStorage"],[2263,60,1830,50],[2263,62,1830,52],[2263,66,1830,56],[2263,67,1830,57,"storageKey"],[2263,77,1830,67],[2263,80,1830,70],[2263,87,1830,77],[2263,88,1830,78],[2264,6,1831,8],[2265,6,1832,8],[2265,12,1832,14],[2265,16,1832,18],[2265,17,1832,19,"_notifyAllSubscribers"],[2265,38,1832,40],[2265,39,1832,41],[2265,51,1832,53],[2265,53,1832,55],[2265,57,1832,59],[2265,58,1832,60],[2266,4,1833,4],[2267,4,1834,4],[2268,0,1835,0],[2269,0,1836,0],[2270,0,1837,0],[2271,0,1838,0],[2272,0,1839,0],[2273,4,1840,4,"_removeVisibilityChangedCallback"],[2273,36,1840,36,"_removeVisibilityChangedCallback"],[2273,37,1840,36],[2273,39,1840,39],[2274,6,1841,8],[2274,10,1841,12],[2274,11,1841,13,"_debug"],[2274,17,1841,19],[2274,18,1841,20],[2274,55,1841,57],[2274,56,1841,58],[2275,6,1842,8],[2275,12,1842,14,"callback"],[2275,20,1842,22],[2275,23,1842,25],[2275,27,1842,29],[2275,28,1842,30,"visibilityChangedCallback"],[2275,53,1842,55],[2276,6,1843,8],[2276,10,1843,12],[2276,11,1843,13,"visibilityChangedCallback"],[2276,36,1843,38],[2276,39,1843,41],[2276,43,1843,45],[2277,6,1844,8],[2277,10,1844,12],[2278,8,1845,12],[2278,12,1845,16,"callback"],[2278,20,1845,24],[2278,24,1845,28],[2278,28,1845,28,"isBrowser"],[2278,46,1845,37],[2278,48,1845,38],[2278,49,1845,39],[2278,54,1845,44,"window"],[2278,60,1845,50],[2278,65,1845,55],[2278,69,1845,59],[2278,73,1845,63,"window"],[2278,79,1845,69],[2278,84,1845,74],[2278,89,1845,79],[2278,90,1845,80],[2278,93,1845,83],[2278,98,1845,88],[2278,99,1845,89],[2278,102,1845,92,"window"],[2278,108,1845,98],[2278,109,1845,99,"removeEventListener"],[2278,128,1845,118],[2278,129,1845,119],[2278,131,1845,121],[2279,10,1846,16,"window"],[2279,16,1846,22],[2279,17,1846,23,"removeEventListener"],[2279,36,1846,42],[2279,37,1846,43],[2279,55,1846,61],[2279,57,1846,63,"callback"],[2279,65,1846,71],[2279,66,1846,72],[2280,8,1847,12],[2281,6,1848,8],[2281,7,1848,9],[2281,8,1849,8],[2281,15,1849,15,"e"],[2281,16,1849,16],[2281,18,1849,18],[2282,8,1850,12,"console"],[2282,15,1850,19],[2282,16,1850,20,"error"],[2282,21,1850,25],[2282,22,1850,26],[2282,65,1850,69],[2282,67,1850,71,"e"],[2282,68,1850,72],[2282,69,1850,73],[2283,6,1851,8],[2284,4,1852,4],[2285,4,1853,4],[2286,0,1854,0],[2287,0,1855,0],[2288,0,1856,0],[2289,4,1857,4],[2289,10,1857,10,"_startAutoRefresh"],[2289,27,1857,27,"_startAutoRefresh"],[2289,28,1857,27],[2289,30,1857,30],[2290,6,1858,8],[2290,12,1858,14],[2290,16,1858,18],[2290,17,1858,19,"_stopAutoRefresh"],[2290,33,1858,35],[2290,34,1858,36],[2290,35,1858,37],[2291,6,1859,8],[2291,10,1859,12],[2291,11,1859,13,"_debug"],[2291,17,1859,19],[2291,18,1859,20],[2291,40,1859,42],[2291,41,1859,43],[2292,6,1860,8],[2292,12,1860,14,"ticker"],[2292,18,1860,20],[2292,21,1860,23,"setInterval"],[2292,32,1860,34],[2292,33,1860,35],[2292,39,1860,41],[2292,43,1860,45],[2292,44,1860,46,"_autoRefreshTokenTick"],[2292,65,1860,67],[2292,66,1860,68],[2292,67,1860,69],[2292,69,1860,71,"AUTO_REFRESH_TICK_DURATION_MS"],[2292,109,1860,100],[2292,110,1860,101],[2293,6,1861,8],[2293,10,1861,12],[2293,11,1861,13,"autoRefreshTicker"],[2293,28,1861,30],[2293,31,1861,33,"ticker"],[2293,37,1861,39],[2294,6,1862,8],[2294,10,1862,12,"ticker"],[2294,16,1862,18],[2294,20,1862,22],[2294,27,1862,29,"ticker"],[2294,33,1862,35],[2294,38,1862,40],[2294,46,1862,48],[2294,50,1862,52],[2294,57,1862,59,"ticker"],[2294,63,1862,65],[2294,64,1862,66,"unref"],[2294,69,1862,71],[2294,74,1862,76],[2294,84,1862,86],[2294,86,1862,88],[2295,8,1863,12],[2296,8,1864,12],[2297,8,1865,12],[2298,8,1866,12],[2299,8,1867,12],[2300,8,1868,12],[2301,8,1869,12,"ticker"],[2301,14,1869,18],[2301,15,1869,19,"unref"],[2301,20,1869,24],[2301,21,1869,25],[2301,22,1869,26],[2302,8,1870,12],[2303,6,1871,8],[2303,7,1871,9],[2303,13,1872,13],[2303,17,1872,17],[2303,24,1872,24,"Deno"],[2303,28,1872,28],[2303,33,1872,33],[2303,44,1872,44],[2303,48,1872,48],[2303,55,1872,55,"Deno"],[2303,59,1872,59],[2303,60,1872,60,"unrefTimer"],[2303,70,1872,70],[2303,75,1872,75],[2303,85,1872,85],[2303,87,1872,87],[2304,8,1873,12],[2305,8,1874,12],[2306,8,1875,12],[2307,8,1876,12,"Deno"],[2307,12,1876,16],[2307,13,1876,17,"unrefTimer"],[2307,23,1876,27],[2307,24,1876,28,"ticker"],[2307,30,1876,34],[2307,31,1876,35],[2308,6,1877,8],[2309,6,1878,8],[2310,6,1879,8],[2311,6,1880,8],[2312,6,1881,8,"setTimeout"],[2312,16,1881,18],[2312,17,1881,19],[2312,29,1881,31],[2313,8,1882,12],[2313,14,1882,18],[2313,18,1882,22],[2313,19,1882,23,"initializePromise"],[2313,36,1882,40],[2314,8,1883,12],[2314,14,1883,18],[2314,18,1883,22],[2314,19,1883,23,"_autoRefreshTokenTick"],[2314,40,1883,44],[2314,41,1883,45],[2314,42,1883,46],[2315,6,1884,8],[2315,7,1884,9],[2315,9,1884,11],[2315,10,1884,12],[2315,11,1884,13],[2316,4,1885,4],[2317,4,1886,4],[2318,0,1887,0],[2319,0,1888,0],[2320,0,1889,0],[2321,4,1890,4],[2321,10,1890,10,"_stopAutoRefresh"],[2321,26,1890,26,"_stopAutoRefresh"],[2321,27,1890,26],[2321,29,1890,29],[2322,6,1891,8],[2322,10,1891,12],[2322,11,1891,13,"_debug"],[2322,17,1891,19],[2322,18,1891,20],[2322,39,1891,41],[2322,40,1891,42],[2323,6,1892,8],[2323,12,1892,14,"ticker"],[2323,18,1892,20],[2323,21,1892,23],[2323,25,1892,27],[2323,26,1892,28,"autoRefreshTicker"],[2323,43,1892,45],[2324,6,1893,8],[2324,10,1893,12],[2324,11,1893,13,"autoRefreshTicker"],[2324,28,1893,30],[2324,31,1893,33],[2324,35,1893,37],[2325,6,1894,8],[2325,10,1894,12,"ticker"],[2325,16,1894,18],[2325,18,1894,20],[2326,8,1895,12,"clearInterval"],[2326,21,1895,25],[2326,22,1895,26,"ticker"],[2326,28,1895,32],[2326,29,1895,33],[2327,6,1896,8],[2328,4,1897,4],[2329,4,1898,4],[2330,0,1899,0],[2331,0,1900,0],[2332,0,1901,0],[2333,0,1902,0],[2334,0,1903,0],[2335,0,1904,0],[2336,0,1905,0],[2337,0,1906,0],[2338,0,1907,0],[2339,0,1908,0],[2340,0,1909,0],[2341,0,1910,0],[2342,0,1911,0],[2343,0,1912,0],[2344,0,1913,0],[2345,0,1914,0],[2346,0,1915,0],[2347,0,1916,0],[2348,0,1917,0],[2349,0,1918,0],[2350,0,1919,0],[2351,4,1920,4],[2351,10,1920,10,"startAutoRefresh"],[2351,26,1920,26,"startAutoRefresh"],[2351,27,1920,26],[2351,29,1920,29],[2352,6,1921,8],[2352,10,1921,12],[2352,11,1921,13,"_removeVisibilityChangedCallback"],[2352,43,1921,45],[2352,44,1921,46],[2352,45,1921,47],[2353,6,1922,8],[2353,12,1922,14],[2353,16,1922,18],[2353,17,1922,19,"_startAutoRefresh"],[2353,34,1922,36],[2353,35,1922,37],[2353,36,1922,38],[2354,4,1923,4],[2355,4,1924,4],[2356,0,1925,0],[2357,0,1926,0],[2358,0,1927,0],[2359,0,1928,0],[2360,0,1929,0],[2361,0,1930,0],[2362,0,1931,0],[2363,4,1932,4],[2363,10,1932,10,"stopAutoRefresh"],[2363,25,1932,25,"stopAutoRefresh"],[2363,26,1932,25],[2363,28,1932,28],[2364,6,1933,8],[2364,10,1933,12],[2364,11,1933,13,"_removeVisibilityChangedCallback"],[2364,43,1933,45],[2364,44,1933,46],[2364,45,1933,47],[2365,6,1934,8],[2365,12,1934,14],[2365,16,1934,18],[2365,17,1934,19,"_stopAutoRefresh"],[2365,33,1934,35],[2365,34,1934,36],[2365,35,1934,37],[2366,4,1935,4],[2367,4,1936,4],[2368,0,1937,0],[2369,0,1938,0],[2370,4,1939,4],[2370,10,1939,10,"_autoRefreshTokenTick"],[2370,31,1939,31,"_autoRefreshTokenTick"],[2370,32,1939,31],[2370,34,1939,34],[2371,6,1940,8],[2371,10,1940,12],[2371,11,1940,13,"_debug"],[2371,17,1940,19],[2371,18,1940,20],[2371,44,1940,46],[2371,46,1940,48],[2371,53,1940,55],[2371,54,1940,56],[2372,6,1941,8],[2372,10,1941,12],[2373,8,1942,12],[2373,14,1942,18],[2373,18,1942,22],[2373,19,1942,23,"_acquireLock"],[2373,31,1942,35],[2373,32,1942,36],[2373,33,1942,37],[2373,35,1942,39],[2373,47,1942,51],[2374,10,1943,16],[2374,14,1943,20],[2375,12,1944,20],[2375,18,1944,26,"now"],[2375,21,1944,29],[2375,24,1944,32,"Date"],[2375,28,1944,36],[2375,29,1944,37,"now"],[2375,32,1944,40],[2375,33,1944,41],[2375,34,1944,42],[2376,12,1945,20],[2376,16,1945,24],[2377,14,1946,24],[2377,21,1946,31],[2377,27,1946,37],[2377,31,1946,41],[2377,32,1946,42,"_useSession"],[2377,43,1946,53],[2377,44,1946,54],[2377,50,1946,61,"result"],[2377,56,1946,67],[2377,60,1946,72],[2378,16,1947,28],[2378,22,1947,34],[2379,18,1947,36,"data"],[2379,22,1947,40],[2379,24,1947,42],[2380,20,1947,44,"session"],[2381,18,1947,52],[2382,16,1947,55],[2382,17,1947,56],[2382,20,1947,59,"result"],[2382,26,1947,65],[2383,16,1948,28],[2383,20,1948,32],[2383,21,1948,33,"session"],[2383,28,1948,40],[2383,32,1948,44],[2383,33,1948,45,"session"],[2383,40,1948,52],[2383,41,1948,53,"refresh_token"],[2383,54,1948,66],[2383,58,1948,70],[2383,59,1948,71,"session"],[2383,66,1948,78],[2383,67,1948,79,"expires_at"],[2383,77,1948,89],[2383,79,1948,91],[2384,18,1949,32],[2384,22,1949,36],[2384,23,1949,37,"_debug"],[2384,29,1949,43],[2384,30,1949,44],[2384,56,1949,70],[2384,58,1949,72],[2384,70,1949,84],[2384,71,1949,85],[2385,18,1950,32],[2386,16,1951,28],[2387,16,1952,28],[2388,16,1953,28],[2388,22,1953,34,"expiresInTicks"],[2388,36,1953,48],[2388,39,1953,51,"Math"],[2388,43,1953,55],[2388,44,1953,56,"floor"],[2388,49,1953,61],[2388,50,1953,62],[2388,51,1953,63,"session"],[2388,58,1953,70],[2388,59,1953,71,"expires_at"],[2388,69,1953,81],[2388,72,1953,84],[2388,76,1953,88],[2388,79,1953,91,"now"],[2388,82,1953,94],[2388,86,1953,98,"AUTO_REFRESH_TICK_DURATION_MS"],[2388,126,1953,127],[2388,127,1953,128],[2389,16,1954,28],[2389,20,1954,32],[2389,21,1954,33,"_debug"],[2389,27,1954,39],[2389,28,1954,40],[2389,54,1954,66],[2389,56,1954,68],[2389,83,1954,95,"expiresInTicks"],[2389,97,1954,109],[2389,121,1954,133,"AUTO_REFRESH_TICK_DURATION_MS"],[2389,161,1954,162],[2389,189,1954,190,"AUTO_REFRESH_TICK_THRESHOLD"],[2389,227,1954,217],[2389,235,1954,225],[2389,236,1954,226],[2390,16,1955,28],[2390,20,1955,32,"expiresInTicks"],[2390,34,1955,46],[2390,38,1955,50,"AUTO_REFRESH_TICK_THRESHOLD"],[2390,76,1955,77],[2390,78,1955,79],[2391,18,1956,32],[2391,24,1956,38],[2391,28,1956,42],[2391,29,1956,43,"_callRefreshToken"],[2391,46,1956,60],[2391,47,1956,61,"session"],[2391,54,1956,68],[2391,55,1956,69,"refresh_token"],[2391,68,1956,82],[2391,69,1956,83],[2392,16,1957,28],[2393,14,1958,24],[2393,15,1958,25],[2393,16,1958,26],[2394,12,1959,20],[2394,13,1959,21],[2394,14,1960,20],[2394,21,1960,27,"e"],[2394,22,1960,28],[2394,24,1960,30],[2395,14,1961,24,"console"],[2395,21,1961,31],[2395,22,1961,32,"error"],[2395,27,1961,37],[2395,28,1961,38],[2395,100,1961,110],[2395,102,1961,112,"e"],[2395,103,1961,113],[2395,104,1961,114],[2396,12,1962,20],[2397,10,1963,16],[2397,11,1963,17],[2397,20,1964,24],[2398,12,1965,20],[2398,16,1965,24],[2398,17,1965,25,"_debug"],[2398,23,1965,31],[2398,24,1965,32],[2398,50,1965,58],[2398,52,1965,60],[2398,57,1965,65],[2398,58,1965,66],[2399,10,1966,16],[2400,8,1967,12],[2400,9,1967,13],[2400,10,1967,14],[2401,6,1968,8],[2401,7,1968,9],[2401,8,1969,8],[2401,15,1969,15,"e"],[2401,16,1969,16],[2401,18,1969,18],[2402,8,1970,12],[2402,12,1970,16,"e"],[2402,13,1970,17],[2402,14,1970,18,"isAcquireTimeout"],[2402,30,1970,34],[2402,34,1970,38,"e"],[2402,35,1970,39],[2402,47,1970,51,"LockAcquireTimeoutError"],[2402,77,1970,74],[2402,79,1970,76],[2403,10,1971,16],[2403,14,1971,20],[2403,15,1971,21,"_debug"],[2403,21,1971,27],[2403,22,1971,28],[2403,66,1971,72],[2403,67,1971,73],[2404,8,1972,12],[2404,9,1972,13],[2404,15,1973,17],[2405,10,1974,16],[2405,16,1974,22,"e"],[2405,17,1974,23],[2406,8,1975,12],[2407,6,1976,8],[2408,4,1977,4],[2409,4,1978,4],[2410,0,1979,0],[2411,0,1980,0],[2412,0,1981,0],[2413,0,1982,0],[2414,4,1983,4],[2414,10,1983,10,"_handleVisibilityChange"],[2414,33,1983,33,"_handleVisibilityChange"],[2414,34,1983,33],[2414,36,1983,36],[2415,6,1984,8],[2415,10,1984,12],[2415,11,1984,13,"_debug"],[2415,17,1984,19],[2415,18,1984,20],[2415,46,1984,48],[2415,47,1984,49],[2416,6,1985,8],[2416,10,1985,12],[2416,11,1985,13],[2416,15,1985,13,"isBrowser"],[2416,33,1985,22],[2416,35,1985,23],[2416,36,1985,24],[2416,40,1985,28],[2416,42,1985,30,"window"],[2416,48,1985,36],[2416,53,1985,41],[2416,57,1985,45],[2416,61,1985,49,"window"],[2416,67,1985,55],[2416,72,1985,60],[2416,77,1985,65],[2416,78,1985,66],[2416,81,1985,69],[2416,86,1985,74],[2416,87,1985,75],[2416,90,1985,78,"window"],[2416,96,1985,84],[2416,97,1985,85,"addEventListener"],[2416,113,1985,101],[2416,114,1985,102],[2416,116,1985,104],[2417,8,1986,12],[2417,12,1986,16],[2417,16,1986,20],[2417,17,1986,21,"autoRefreshToken"],[2417,33,1986,37],[2417,35,1986,39],[2418,10,1987,16],[2419,10,1988,16],[2419,14,1988,20],[2419,15,1988,21,"startAutoRefresh"],[2419,31,1988,37],[2419,32,1988,38],[2419,33,1988,39],[2420,8,1989,12],[2421,8,1990,12],[2421,15,1990,19],[2421,20,1990,24],[2422,6,1991,8],[2423,6,1992,8],[2423,10,1992,12],[2424,8,1993,12],[2424,12,1993,16],[2424,13,1993,17,"visibilityChangedCallback"],[2424,38,1993,42],[2424,41,1993,45],[2424,53,1993,57],[2424,59,1993,63],[2424,63,1993,67],[2424,64,1993,68,"_onVisibilityChanged"],[2424,84,1993,88],[2424,85,1993,89],[2424,90,1993,94],[2424,91,1993,95],[2425,8,1994,12,"window"],[2425,14,1994,18],[2425,19,1994,23],[2425,23,1994,27],[2425,27,1994,31,"window"],[2425,33,1994,37],[2425,38,1994,42],[2425,43,1994,47],[2425,44,1994,48],[2425,47,1994,51],[2425,52,1994,56],[2425,53,1994,57],[2425,56,1994,60,"window"],[2425,62,1994,66],[2425,63,1994,67,"addEventListener"],[2425,79,1994,83],[2425,80,1994,84],[2425,98,1994,102],[2425,100,1994,104],[2425,104,1994,108],[2425,105,1994,109,"visibilityChangedCallback"],[2425,130,1994,134],[2425,131,1994,135],[2426,8,1995,12],[2427,8,1996,12],[2428,8,1997,12],[2428,14,1997,18],[2428,18,1997,22],[2428,19,1997,23,"_onVisibilityChanged"],[2428,39,1997,43],[2428,40,1997,44],[2428,44,1997,48],[2428,45,1997,49],[2428,46,1997,50],[2428,47,1997,51],[2429,6,1998,8],[2429,7,1998,9],[2429,8,1999,8],[2429,15,1999,15,"error"],[2429,20,1999,20],[2429,22,1999,22],[2430,8,2000,12,"console"],[2430,15,2000,19],[2430,16,2000,20,"error"],[2430,21,2000,25],[2430,22,2000,26],[2430,47,2000,51],[2430,49,2000,53,"error"],[2430,54,2000,58],[2430,55,2000,59],[2431,6,2001,8],[2432,4,2002,4],[2433,4,2003,4],[2434,0,2004,0],[2435,0,2005,0],[2436,4,2006,4],[2436,10,2006,10,"_onVisibilityChanged"],[2436,30,2006,30,"_onVisibilityChanged"],[2436,31,2006,31,"calledFromInitialize"],[2436,51,2006,51],[2436,53,2006,53],[2437,6,2007,8],[2437,12,2007,14,"methodName"],[2437,22,2007,24],[2437,25,2007,27],[2437,50,2007,52,"calledFromInitialize"],[2437,70,2007,72],[2437,73,2007,75],[2438,6,2008,8],[2438,10,2008,12],[2438,11,2008,13,"_debug"],[2438,17,2008,19],[2438,18,2008,20,"methodName"],[2438,28,2008,30],[2438,30,2008,32],[2438,47,2008,49],[2438,49,2008,51,"document"],[2438,57,2008,59],[2438,58,2008,60,"visibilityState"],[2438,73,2008,75],[2438,74,2008,76],[2439,6,2009,8],[2439,10,2009,12,"document"],[2439,18,2009,20],[2439,19,2009,21,"visibilityState"],[2439,34,2009,36],[2439,39,2009,41],[2439,48,2009,50],[2439,50,2009,52],[2440,8,2010,12],[2440,12,2010,16],[2440,16,2010,20],[2440,17,2010,21,"autoRefreshToken"],[2440,33,2010,37],[2440,35,2010,39],[2441,10,2011,16],[2442,10,2012,16],[2443,10,2013,16],[2443,14,2013,20],[2443,15,2013,21,"_startAutoRefresh"],[2443,32,2013,38],[2443,33,2013,39],[2443,34,2013,40],[2444,8,2014,12],[2445,8,2015,12],[2445,12,2015,16],[2445,13,2015,17,"calledFromInitialize"],[2445,33,2015,37],[2445,35,2015,39],[2446,10,2016,16],[2447,10,2017,16],[2448,10,2018,16],[2449,10,2019,16],[2450,10,2020,16],[2450,16,2020,22],[2450,20,2020,26],[2450,21,2020,27,"initializePromise"],[2450,38,2020,44],[2451,10,2021,16],[2451,16,2021,22],[2451,20,2021,26],[2451,21,2021,27,"_acquireLock"],[2451,33,2021,39],[2451,34,2021,40],[2451,35,2021,41],[2451,36,2021,42],[2451,38,2021,44],[2451,50,2021,56],[2452,12,2022,20],[2452,16,2022,24,"document"],[2452,24,2022,32],[2452,25,2022,33,"visibilityState"],[2452,40,2022,48],[2452,45,2022,53],[2452,54,2022,62],[2452,56,2022,64],[2453,14,2023,24],[2453,18,2023,28],[2453,19,2023,29,"_debug"],[2453,25,2023,35],[2453,26,2023,36,"methodName"],[2453,36,2023,46],[2453,38,2023,48],[2453,144,2023,154],[2453,145,2023,155],[2454,14,2024,24],[2455,14,2025,24],[2456,12,2026,20],[2457,12,2027,20],[2458,12,2028,20],[2458,18,2028,26],[2458,22,2028,30],[2458,23,2028,31,"_recoverAndRefresh"],[2458,41,2028,49],[2458,42,2028,50],[2458,43,2028,51],[2459,10,2029,16],[2459,11,2029,17],[2459,12,2029,18],[2460,8,2030,12],[2461,6,2031,8],[2461,7,2031,9],[2461,13,2032,13],[2461,17,2032,17,"document"],[2461,25,2032,25],[2461,26,2032,26,"visibilityState"],[2461,41,2032,41],[2461,46,2032,46],[2461,54,2032,54],[2461,56,2032,56],[2462,8,2033,12],[2462,12,2033,16],[2462,16,2033,20],[2462,17,2033,21,"autoRefreshToken"],[2462,33,2033,37],[2462,35,2033,39],[2463,10,2034,16],[2463,14,2034,20],[2463,15,2034,21,"_stopAutoRefresh"],[2463,31,2034,37],[2463,32,2034,38],[2463,33,2034,39],[2464,8,2035,12],[2465,6,2036,8],[2466,4,2037,4],[2467,4,2038,4],[2468,0,2039,0],[2469,0,2040,0],[2470,0,2041,0],[2471,0,2042,0],[2472,0,2043,0],[2473,4,2044,4],[2473,10,2044,10,"_getUrlForProvider"],[2473,28,2044,28,"_getUrlForProvider"],[2473,29,2044,29,"url"],[2473,32,2044,32],[2473,34,2044,34,"provider"],[2473,42,2044,42],[2473,44,2044,44,"options"],[2473,51,2044,51],[2473,53,2044,53],[2474,6,2045,8],[2474,12,2045,14,"urlParams"],[2474,21,2045,23],[2474,24,2045,26],[2474,25,2045,27],[2474,37,2045,39,"encodeURIComponent"],[2474,55,2045,57],[2474,56,2045,58,"provider"],[2474,64,2045,66],[2474,65,2045,67],[2474,67,2045,69],[2474,68,2045,70],[2475,6,2046,8],[2475,10,2046,12,"options"],[2475,17,2046,19],[2475,22,2046,24],[2475,26,2046,28],[2475,30,2046,32,"options"],[2475,37,2046,39],[2475,42,2046,44],[2475,47,2046,49],[2475,48,2046,50],[2475,51,2046,53],[2475,56,2046,58],[2475,57,2046,59],[2475,60,2046,62,"options"],[2475,67,2046,69],[2475,68,2046,70,"redirectTo"],[2475,78,2046,80],[2475,80,2046,82],[2476,8,2047,12,"urlParams"],[2476,17,2047,21],[2476,18,2047,22,"push"],[2476,22,2047,26],[2476,23,2047,27],[2476,38,2047,42,"encodeURIComponent"],[2476,56,2047,60],[2476,57,2047,61,"options"],[2476,64,2047,68],[2476,65,2047,69,"redirectTo"],[2476,75,2047,79],[2476,76,2047,80],[2476,78,2047,82],[2476,79,2047,83],[2477,6,2048,8],[2478,6,2049,8],[2478,10,2049,12,"options"],[2478,17,2049,19],[2478,22,2049,24],[2478,26,2049,28],[2478,30,2049,32,"options"],[2478,37,2049,39],[2478,42,2049,44],[2478,47,2049,49],[2478,48,2049,50],[2478,51,2049,53],[2478,56,2049,58],[2478,57,2049,59],[2478,60,2049,62,"options"],[2478,67,2049,69],[2478,68,2049,70,"scopes"],[2478,74,2049,76],[2478,76,2049,78],[2479,8,2050,12,"urlParams"],[2479,17,2050,21],[2479,18,2050,22,"push"],[2479,22,2050,26],[2479,23,2050,27],[2479,33,2050,37,"encodeURIComponent"],[2479,51,2050,55],[2479,52,2050,56,"options"],[2479,59,2050,63],[2479,60,2050,64,"scopes"],[2479,66,2050,70],[2479,67,2050,71],[2479,69,2050,73],[2479,70,2050,74],[2480,6,2051,8],[2481,6,2052,8],[2481,10,2052,12],[2481,14,2052,16],[2481,15,2052,17,"flowType"],[2481,23,2052,25],[2481,28,2052,30],[2481,34,2052,36],[2481,36,2052,38],[2482,8,2053,12],[2482,14,2053,18],[2482,15,2053,19,"codeChallenge"],[2482,28,2053,32],[2482,30,2053,34,"codeChallengeMethod"],[2482,49,2053,53],[2482,50,2053,54],[2482,53,2053,57],[2482,59,2053,63],[2482,63,2053,63,"getCodeChallengeAndMethod"],[2482,97,2053,88],[2482,99,2053,89],[2482,103,2053,93],[2482,104,2053,94,"storage"],[2482,111,2053,101],[2482,113,2053,103],[2482,117,2053,107],[2482,118,2053,108,"storageKey"],[2482,128,2053,118],[2482,129,2053,119],[2483,8,2054,12],[2483,14,2054,18,"flowParams"],[2483,24,2054,28],[2483,27,2054,31],[2483,31,2054,35,"URLSearchParams"],[2483,46,2054,50],[2483,47,2054,51],[2484,10,2055,16,"code_challenge"],[2484,24,2055,30],[2484,26,2055,32],[2484,29,2055,35,"encodeURIComponent"],[2484,47,2055,53],[2484,48,2055,54,"codeChallenge"],[2484,61,2055,67],[2484,62,2055,68],[2484,64,2055,70],[2485,10,2056,16,"code_challenge_method"],[2485,31,2056,37],[2485,33,2056,39],[2485,36,2056,42,"encodeURIComponent"],[2485,54,2056,60],[2485,55,2056,61,"codeChallengeMethod"],[2485,74,2056,80],[2485,75,2056,81],[2486,8,2057,12],[2486,9,2057,13],[2486,10,2057,14],[2487,8,2058,12,"urlParams"],[2487,17,2058,21],[2487,18,2058,22,"push"],[2487,22,2058,26],[2487,23,2058,27,"flowParams"],[2487,33,2058,37],[2487,34,2058,38,"toString"],[2487,42,2058,46],[2487,43,2058,47],[2487,44,2058,48],[2487,45,2058,49],[2488,6,2059,8],[2489,6,2060,8],[2489,10,2060,12,"options"],[2489,17,2060,19],[2489,22,2060,24],[2489,26,2060,28],[2489,30,2060,32,"options"],[2489,37,2060,39],[2489,42,2060,44],[2489,47,2060,49],[2489,48,2060,50],[2489,51,2060,53],[2489,56,2060,58],[2489,57,2060,59],[2489,60,2060,62,"options"],[2489,67,2060,69],[2489,68,2060,70,"queryParams"],[2489,79,2060,81],[2489,81,2060,83],[2490,8,2061,12],[2490,14,2061,18,"query"],[2490,19,2061,23],[2490,22,2061,26],[2490,26,2061,30,"URLSearchParams"],[2490,41,2061,45],[2490,42,2061,46,"options"],[2490,49,2061,53],[2490,50,2061,54,"queryParams"],[2490,61,2061,65],[2490,62,2061,66],[2491,8,2062,12,"urlParams"],[2491,17,2062,21],[2491,18,2062,22,"push"],[2491,22,2062,26],[2491,23,2062,27,"query"],[2491,28,2062,32],[2491,29,2062,33,"toString"],[2491,37,2062,41],[2491,38,2062,42],[2491,39,2062,43],[2491,40,2062,44],[2492,6,2063,8],[2493,6,2064,8],[2493,10,2064,12,"options"],[2493,17,2064,19],[2493,22,2064,24],[2493,26,2064,28],[2493,30,2064,32,"options"],[2493,37,2064,39],[2493,42,2064,44],[2493,47,2064,49],[2493,48,2064,50],[2493,51,2064,53],[2493,56,2064,58],[2493,57,2064,59],[2493,60,2064,62,"options"],[2493,67,2064,69],[2493,68,2064,70,"skipBrowserRedirect"],[2493,87,2064,89],[2493,89,2064,91],[2494,8,2065,12,"urlParams"],[2494,17,2065,21],[2494,18,2065,22,"push"],[2494,22,2065,26],[2494,23,2065,27],[2494,45,2065,49,"options"],[2494,52,2065,56],[2494,53,2065,57,"skipBrowserRedirect"],[2494,72,2065,76],[2494,74,2065,78],[2494,75,2065,79],[2495,6,2066,8],[2496,6,2067,8],[2496,13,2067,15],[2496,16,2067,18,"url"],[2496,19,2067,21],[2496,23,2067,25,"urlParams"],[2496,32,2067,34],[2496,33,2067,35,"join"],[2496,37,2067,39],[2496,38,2067,40],[2496,41,2067,43],[2496,42,2067,44],[2496,44,2067,46],[2497,4,2068,4],[2498,4,2069,4],[2498,10,2069,10,"_unenroll"],[2498,19,2069,19,"_unenroll"],[2498,20,2069,20,"params"],[2498,26,2069,26],[2498,28,2069,28],[2499,6,2070,8],[2499,10,2070,12],[2500,8,2071,12],[2500,15,2071,19],[2500,21,2071,25],[2500,25,2071,29],[2500,26,2071,30,"_useSession"],[2500,37,2071,41],[2500,38,2071,42],[2500,44,2071,49,"result"],[2500,50,2071,55],[2500,54,2071,60],[2501,10,2072,16],[2501,14,2072,20,"_a"],[2501,16,2072,22],[2502,10,2073,16],[2502,16,2073,22],[2503,12,2073,24,"data"],[2503,16,2073,28],[2503,18,2073,30,"sessionData"],[2503,29,2073,41],[2504,12,2073,43,"error"],[2504,17,2073,48],[2504,19,2073,50,"sessionError"],[2505,10,2073,63],[2505,11,2073,64],[2505,14,2073,67,"result"],[2505,20,2073,73],[2506,10,2074,16],[2506,14,2074,20,"sessionError"],[2506,26,2074,32],[2506,28,2074,34],[2507,12,2075,20],[2507,19,2075,27],[2508,14,2075,29,"data"],[2508,18,2075,33],[2508,20,2075,35],[2508,24,2075,39],[2509,14,2075,41,"error"],[2509,19,2075,46],[2509,21,2075,48,"sessionError"],[2510,12,2075,61],[2510,13,2075,62],[2511,10,2076,16],[2512,10,2077,16],[2512,17,2077,23],[2512,23,2077,29],[2512,27,2077,29,"_request"],[2512,42,2077,37],[2512,44,2077,38],[2512,48,2077,42],[2512,49,2077,43,"fetch"],[2512,54,2077,48],[2512,56,2077,50],[2512,64,2077,58],[2512,66,2077,60],[2512,69,2077,63],[2512,73,2077,67],[2512,74,2077,68,"url"],[2512,77,2077,71],[2512,89,2077,83,"params"],[2512,95,2077,89],[2512,96,2077,90,"factorId"],[2512,104,2077,98],[2512,106,2077,100],[2512,108,2077,102],[2513,12,2078,20,"headers"],[2513,19,2078,27],[2513,21,2078,29],[2513,25,2078,33],[2513,26,2078,34,"headers"],[2513,33,2078,41],[2514,12,2079,20,"jwt"],[2514,15,2079,23],[2514,17,2079,25],[2514,18,2079,26,"_a"],[2514,20,2079,28],[2514,23,2079,31,"sessionData"],[2514,34,2079,42],[2514,39,2079,47],[2514,43,2079,51],[2514,47,2079,55,"sessionData"],[2514,58,2079,66],[2514,63,2079,71],[2514,68,2079,76],[2514,69,2079,77],[2514,72,2079,80],[2514,77,2079,85],[2514,78,2079,86],[2514,81,2079,89,"sessionData"],[2514,92,2079,100],[2514,93,2079,101,"session"],[2514,100,2079,108],[2514,106,2079,114],[2514,110,2079,118],[2514,114,2079,122,"_a"],[2514,116,2079,124],[2514,121,2079,129],[2514,126,2079,134],[2514,127,2079,135],[2514,130,2079,138],[2514,135,2079,143],[2514,136,2079,144],[2514,139,2079,147,"_a"],[2514,141,2079,149],[2514,142,2079,150,"access_token"],[2515,10,2080,16],[2515,11,2080,17],[2515,12,2080,18],[2516,8,2081,12],[2516,9,2081,13],[2516,10,2081,14],[2517,6,2082,8],[2517,7,2082,9],[2517,8,2083,8],[2517,15,2083,15,"error"],[2517,20,2083,20],[2517,22,2083,22],[2518,8,2084,12],[2518,12,2084,16],[2518,16,2084,16,"isAuthError"],[2518,35,2084,27],[2518,37,2084,28,"error"],[2518,42,2084,33],[2518,43,2084,34],[2518,45,2084,36],[2519,10,2085,16],[2519,17,2085,23],[2520,12,2085,25,"data"],[2520,16,2085,29],[2520,18,2085,31],[2520,22,2085,35],[2521,12,2085,37,"error"],[2522,10,2085,43],[2522,11,2085,44],[2523,8,2086,12],[2524,8,2087,12],[2524,14,2087,18,"error"],[2524,19,2087,23],[2525,6,2088,8],[2526,4,2089,4],[2527,4,2090,4],[2527,10,2090,10,"_enroll"],[2527,17,2090,17,"_enroll"],[2527,18,2090,18,"params"],[2527,24,2090,24],[2527,26,2090,26],[2528,6,2091,8],[2528,10,2091,12],[2529,8,2092,12],[2529,15,2092,19],[2529,21,2092,25],[2529,25,2092,29],[2529,26,2092,30,"_useSession"],[2529,37,2092,41],[2529,38,2092,42],[2529,44,2092,49,"result"],[2529,50,2092,55],[2529,54,2092,60],[2530,10,2093,16],[2530,14,2093,20,"_a"],[2530,16,2093,22],[2530,18,2093,24,"_b"],[2530,20,2093,26],[2531,10,2094,16],[2531,16,2094,22],[2532,12,2094,24,"data"],[2532,16,2094,28],[2532,18,2094,30,"sessionData"],[2532,29,2094,41],[2533,12,2094,43,"error"],[2533,17,2094,48],[2533,19,2094,50,"sessionError"],[2534,10,2094,63],[2534,11,2094,64],[2534,14,2094,67,"result"],[2534,20,2094,73],[2535,10,2095,16],[2535,14,2095,20,"sessionError"],[2535,26,2095,32],[2535,28,2095,34],[2536,12,2096,20],[2536,19,2096,27],[2537,14,2096,29,"data"],[2537,18,2096,33],[2537,20,2096,35],[2537,24,2096,39],[2538,14,2096,41,"error"],[2538,19,2096,46],[2538,21,2096,48,"sessionError"],[2539,12,2096,61],[2539,13,2096,62],[2540,10,2097,16],[2541,10,2098,16],[2541,16,2098,22,"body"],[2541,20,2098,26],[2541,23,2098,29,"Object"],[2541,29,2098,35],[2541,30,2098,36,"assign"],[2541,36,2098,42],[2541,37,2098,43],[2542,12,2098,45,"friendly_name"],[2542,25,2098,58],[2542,27,2098,60,"params"],[2542,33,2098,66],[2542,34,2098,67,"friendlyName"],[2542,46,2098,79],[2543,12,2098,81,"factor_type"],[2543,23,2098,92],[2543,25,2098,94,"params"],[2543,31,2098,100],[2543,32,2098,101,"factorType"],[2544,10,2098,112],[2544,11,2098,113],[2544,13,2098,116,"params"],[2544,19,2098,122],[2544,20,2098,123,"factorType"],[2544,30,2098,133],[2544,35,2098,138],[2544,42,2098,145],[2544,45,2098,148],[2545,12,2098,150,"phone"],[2545,17,2098,155],[2545,19,2098,157,"params"],[2545,25,2098,163],[2545,26,2098,164,"phone"],[2546,10,2098,170],[2546,11,2098,171],[2546,14,2098,174],[2547,12,2098,176,"issuer"],[2547,18,2098,182],[2547,20,2098,184,"params"],[2547,26,2098,190],[2547,27,2098,191,"issuer"],[2548,10,2098,198],[2548,11,2098,200],[2548,12,2098,201],[2549,10,2099,16],[2549,16,2099,22],[2550,12,2099,24,"data"],[2550,16,2099,28],[2551,12,2099,30,"error"],[2552,10,2099,36],[2552,11,2099,37],[2552,14,2099,40],[2552,20,2099,46],[2552,24,2099,46,"_request"],[2552,39,2099,54],[2552,41,2099,55],[2552,45,2099,59],[2552,46,2099,60,"fetch"],[2552,51,2099,65],[2552,53,2099,67],[2552,59,2099,73],[2552,61,2099,75],[2552,64,2099,78],[2552,68,2099,82],[2552,69,2099,83,"url"],[2552,72,2099,86],[2552,82,2099,96],[2552,84,2099,98],[2553,12,2100,20,"body"],[2553,16,2100,24],[2554,12,2101,20,"headers"],[2554,19,2101,27],[2554,21,2101,29],[2554,25,2101,33],[2554,26,2101,34,"headers"],[2554,33,2101,41],[2555,12,2102,20,"jwt"],[2555,15,2102,23],[2555,17,2102,25],[2555,18,2102,26,"_a"],[2555,20,2102,28],[2555,23,2102,31,"sessionData"],[2555,34,2102,42],[2555,39,2102,47],[2555,43,2102,51],[2555,47,2102,55,"sessionData"],[2555,58,2102,66],[2555,63,2102,71],[2555,68,2102,76],[2555,69,2102,77],[2555,72,2102,80],[2555,77,2102,85],[2555,78,2102,86],[2555,81,2102,89,"sessionData"],[2555,92,2102,100],[2555,93,2102,101,"session"],[2555,100,2102,108],[2555,106,2102,114],[2555,110,2102,118],[2555,114,2102,122,"_a"],[2555,116,2102,124],[2555,121,2102,129],[2555,126,2102,134],[2555,127,2102,135],[2555,130,2102,138],[2555,135,2102,143],[2555,136,2102,144],[2555,139,2102,147,"_a"],[2555,141,2102,149],[2555,142,2102,150,"access_token"],[2556,10,2103,16],[2556,11,2103,17],[2556,12,2103,18],[2557,10,2104,16],[2557,14,2104,20,"error"],[2557,19,2104,25],[2557,21,2104,27],[2558,12,2105,20],[2558,19,2105,27],[2559,14,2105,29,"data"],[2559,18,2105,33],[2559,20,2105,35],[2559,24,2105,39],[2560,14,2105,41,"error"],[2561,12,2105,47],[2561,13,2105,48],[2562,10,2106,16],[2563,10,2107,16],[2563,14,2107,20,"params"],[2563,20,2107,26],[2563,21,2107,27,"factorType"],[2563,31,2107,37],[2563,36,2107,42],[2563,42,2107,48],[2563,47,2107,53],[2563,48,2107,54,"_b"],[2563,50,2107,56],[2563,53,2107,59,"data"],[2563,57,2107,63],[2563,62,2107,68],[2563,66,2107,72],[2563,70,2107,76,"data"],[2563,74,2107,80],[2563,79,2107,85],[2563,84,2107,90],[2563,85,2107,91],[2563,88,2107,94],[2563,93,2107,99],[2563,94,2107,100],[2563,97,2107,103,"data"],[2563,101,2107,107],[2563,102,2107,108,"totp"],[2563,106,2107,112],[2563,112,2107,118],[2563,116,2107,122],[2563,120,2107,126,"_b"],[2563,122,2107,128],[2563,127,2107,133],[2563,132,2107,138],[2563,133,2107,139],[2563,136,2107,142],[2563,141,2107,147],[2563,142,2107,148],[2563,145,2107,151,"_b"],[2563,147,2107,153],[2563,148,2107,154,"qr_code"],[2563,155,2107,161],[2563,156,2107,162],[2563,158,2107,164],[2564,12,2108,20,"data"],[2564,16,2108,24],[2564,17,2108,25,"totp"],[2564,21,2108,29],[2564,22,2108,30,"qr_code"],[2564,29,2108,37],[2564,32,2108,40],[2564,60,2108,68,"data"],[2564,64,2108,72],[2564,65,2108,73,"totp"],[2564,69,2108,77],[2564,70,2108,78,"qr_code"],[2564,77,2108,85],[2564,79,2108,87],[2565,10,2109,16],[2566,10,2110,16],[2566,17,2110,23],[2567,12,2110,25,"data"],[2567,16,2110,29],[2568,12,2110,31,"error"],[2568,17,2110,36],[2568,19,2110,38],[2569,10,2110,43],[2569,11,2110,44],[2570,8,2111,12],[2570,9,2111,13],[2570,10,2111,14],[2571,6,2112,8],[2571,7,2112,9],[2571,8,2113,8],[2571,15,2113,15,"error"],[2571,20,2113,20],[2571,22,2113,22],[2572,8,2114,12],[2572,12,2114,16],[2572,16,2114,16,"isAuthError"],[2572,35,2114,27],[2572,37,2114,28,"error"],[2572,42,2114,33],[2572,43,2114,34],[2572,45,2114,36],[2573,10,2115,16],[2573,17,2115,23],[2574,12,2115,25,"data"],[2574,16,2115,29],[2574,18,2115,31],[2574,22,2115,35],[2575,12,2115,37,"error"],[2576,10,2115,43],[2576,11,2115,44],[2577,8,2116,12],[2578,8,2117,12],[2578,14,2117,18,"error"],[2578,19,2117,23],[2579,6,2118,8],[2580,4,2119,4],[2581,4,2120,4],[2582,0,2121,0],[2583,0,2122,0],[2584,4,2123,4],[2584,10,2123,10,"_verify"],[2584,17,2123,17,"_verify"],[2584,18,2123,18,"params"],[2584,24,2123,24],[2584,26,2123,26],[2585,6,2124,8],[2585,13,2124,15],[2585,17,2124,19],[2585,18,2124,20,"_acquireLock"],[2585,30,2124,32],[2585,31,2124,33],[2585,32,2124,34],[2585,33,2124,35],[2585,35,2124,37],[2585,47,2124,49],[2586,8,2125,12],[2586,12,2125,16],[2587,10,2126,16],[2587,17,2126,23],[2587,23,2126,29],[2587,27,2126,33],[2587,28,2126,34,"_useSession"],[2587,39,2126,45],[2587,40,2126,46],[2587,46,2126,53,"result"],[2587,52,2126,59],[2587,56,2126,64],[2588,12,2127,20],[2588,16,2127,24,"_a"],[2588,18,2127,26],[2589,12,2128,20],[2589,18,2128,26],[2590,14,2128,28,"data"],[2590,18,2128,32],[2590,20,2128,34,"sessionData"],[2590,31,2128,45],[2591,14,2128,47,"error"],[2591,19,2128,52],[2591,21,2128,54,"sessionError"],[2592,12,2128,67],[2592,13,2128,68],[2592,16,2128,71,"result"],[2592,22,2128,77],[2593,12,2129,20],[2593,16,2129,24,"sessionError"],[2593,28,2129,36],[2593,30,2129,38],[2594,14,2130,24],[2594,21,2130,31],[2595,16,2130,33,"data"],[2595,20,2130,37],[2595,22,2130,39],[2595,26,2130,43],[2596,16,2130,45,"error"],[2596,21,2130,50],[2596,23,2130,52,"sessionError"],[2597,14,2130,65],[2597,15,2130,66],[2598,12,2131,20],[2599,12,2132,20],[2599,18,2132,26],[2600,14,2132,28,"data"],[2600,18,2132,32],[2601,14,2132,34,"error"],[2602,12,2132,40],[2602,13,2132,41],[2602,16,2132,44],[2602,22,2132,50],[2602,26,2132,50,"_request"],[2602,41,2132,58],[2602,43,2132,59],[2602,47,2132,63],[2602,48,2132,64,"fetch"],[2602,53,2132,69],[2602,55,2132,71],[2602,61,2132,77],[2602,63,2132,79],[2602,66,2132,82],[2602,70,2132,86],[2602,71,2132,87,"url"],[2602,74,2132,90],[2602,86,2132,102,"params"],[2602,92,2132,108],[2602,93,2132,109,"factorId"],[2602,101,2132,117],[2602,110,2132,126],[2602,112,2132,128],[2603,14,2133,24,"body"],[2603,18,2133,28],[2603,20,2133,30],[2604,16,2133,32,"code"],[2604,20,2133,36],[2604,22,2133,38,"params"],[2604,28,2133,44],[2604,29,2133,45,"code"],[2604,33,2133,49],[2605,16,2133,51,"challenge_id"],[2605,28,2133,63],[2605,30,2133,65,"params"],[2605,36,2133,71],[2605,37,2133,72,"challengeId"],[2606,14,2133,84],[2606,15,2133,85],[2607,14,2134,24,"headers"],[2607,21,2134,31],[2607,23,2134,33],[2607,27,2134,37],[2607,28,2134,38,"headers"],[2607,35,2134,45],[2608,14,2135,24,"jwt"],[2608,17,2135,27],[2608,19,2135,29],[2608,20,2135,30,"_a"],[2608,22,2135,32],[2608,25,2135,35,"sessionData"],[2608,36,2135,46],[2608,41,2135,51],[2608,45,2135,55],[2608,49,2135,59,"sessionData"],[2608,60,2135,70],[2608,65,2135,75],[2608,70,2135,80],[2608,71,2135,81],[2608,74,2135,84],[2608,79,2135,89],[2608,80,2135,90],[2608,83,2135,93,"sessionData"],[2608,94,2135,104],[2608,95,2135,105,"session"],[2608,102,2135,112],[2608,108,2135,118],[2608,112,2135,122],[2608,116,2135,126,"_a"],[2608,118,2135,128],[2608,123,2135,133],[2608,128,2135,138],[2608,129,2135,139],[2608,132,2135,142],[2608,137,2135,147],[2608,138,2135,148],[2608,141,2135,151,"_a"],[2608,143,2135,153],[2608,144,2135,154,"access_token"],[2609,12,2136,20],[2609,13,2136,21],[2609,14,2136,22],[2610,12,2137,20],[2610,16,2137,24,"error"],[2610,21,2137,29],[2610,23,2137,31],[2611,14,2138,24],[2611,21,2138,31],[2612,16,2138,33,"data"],[2612,20,2138,37],[2612,22,2138,39],[2612,26,2138,43],[2613,16,2138,45,"error"],[2614,14,2138,51],[2614,15,2138,52],[2615,12,2139,20],[2616,12,2140,20],[2616,18,2140,26],[2616,22,2140,30],[2616,23,2140,31,"_saveSession"],[2616,35,2140,43],[2616,36,2140,44,"Object"],[2616,42,2140,50],[2616,43,2140,51,"assign"],[2616,49,2140,57],[2616,50,2140,58],[2617,14,2140,60,"expires_at"],[2617,24,2140,70],[2617,26,2140,72,"Math"],[2617,30,2140,76],[2617,31,2140,77,"round"],[2617,36,2140,82],[2617,37,2140,83,"Date"],[2617,41,2140,87],[2617,42,2140,88,"now"],[2617,45,2140,91],[2617,46,2140,92],[2617,47,2140,93],[2617,50,2140,96],[2617,54,2140,100],[2617,55,2140,101],[2617,58,2140,104,"data"],[2617,62,2140,108],[2617,63,2140,109,"expires_in"],[2618,12,2140,120],[2618,13,2140,121],[2618,15,2140,123,"data"],[2618,19,2140,127],[2618,20,2140,128],[2618,21,2140,129],[2619,12,2141,20],[2619,18,2141,26],[2619,22,2141,30],[2619,23,2141,31,"_notifyAllSubscribers"],[2619,44,2141,52],[2619,45,2141,53],[2619,69,2141,77],[2619,71,2141,79,"data"],[2619,75,2141,83],[2619,76,2141,84],[2620,12,2142,20],[2620,19,2142,27],[2621,14,2142,29,"data"],[2621,18,2142,33],[2622,14,2142,35,"error"],[2623,12,2142,41],[2623,13,2142,42],[2624,10,2143,16],[2624,11,2143,17],[2624,12,2143,18],[2625,8,2144,12],[2625,9,2144,13],[2625,10,2145,12],[2625,17,2145,19,"error"],[2625,22,2145,24],[2625,24,2145,26],[2626,10,2146,16],[2626,14,2146,20],[2626,18,2146,20,"isAuthError"],[2626,37,2146,31],[2626,39,2146,32,"error"],[2626,44,2146,37],[2626,45,2146,38],[2626,47,2146,40],[2627,12,2147,20],[2627,19,2147,27],[2628,14,2147,29,"data"],[2628,18,2147,33],[2628,20,2147,35],[2628,24,2147,39],[2629,14,2147,41,"error"],[2630,12,2147,47],[2630,13,2147,48],[2631,10,2148,16],[2632,10,2149,16],[2632,16,2149,22,"error"],[2632,21,2149,27],[2633,8,2150,12],[2634,6,2151,8],[2634,7,2151,9],[2634,8,2151,10],[2635,4,2152,4],[2636,4,2153,4],[2637,0,2154,0],[2638,0,2155,0],[2639,4,2156,4],[2639,10,2156,10,"_challenge"],[2639,20,2156,20,"_challenge"],[2639,21,2156,21,"params"],[2639,27,2156,27],[2639,29,2156,29],[2640,6,2157,8],[2640,13,2157,15],[2640,17,2157,19],[2640,18,2157,20,"_acquireLock"],[2640,30,2157,32],[2640,31,2157,33],[2640,32,2157,34],[2640,33,2157,35],[2640,35,2157,37],[2640,47,2157,49],[2641,8,2158,12],[2641,12,2158,16],[2642,10,2159,16],[2642,17,2159,23],[2642,23,2159,29],[2642,27,2159,33],[2642,28,2159,34,"_useSession"],[2642,39,2159,45],[2642,40,2159,46],[2642,46,2159,53,"result"],[2642,52,2159,59],[2642,56,2159,64],[2643,12,2160,20],[2643,16,2160,24,"_a"],[2643,18,2160,26],[2644,12,2161,20],[2644,18,2161,26],[2645,14,2161,28,"data"],[2645,18,2161,32],[2645,20,2161,34,"sessionData"],[2645,31,2161,45],[2646,14,2161,47,"error"],[2646,19,2161,52],[2646,21,2161,54,"sessionError"],[2647,12,2161,67],[2647,13,2161,68],[2647,16,2161,71,"result"],[2647,22,2161,77],[2648,12,2162,20],[2648,16,2162,24,"sessionError"],[2648,28,2162,36],[2648,30,2162,38],[2649,14,2163,24],[2649,21,2163,31],[2650,16,2163,33,"data"],[2650,20,2163,37],[2650,22,2163,39],[2650,26,2163,43],[2651,16,2163,45,"error"],[2651,21,2163,50],[2651,23,2163,52,"sessionError"],[2652,14,2163,65],[2652,15,2163,66],[2653,12,2164,20],[2654,12,2165,20],[2654,19,2165,27],[2654,25,2165,33],[2654,29,2165,33,"_request"],[2654,44,2165,41],[2654,46,2165,42],[2654,50,2165,46],[2654,51,2165,47,"fetch"],[2654,56,2165,52],[2654,58,2165,54],[2654,64,2165,60],[2654,66,2165,62],[2654,69,2165,65],[2654,73,2165,69],[2654,74,2165,70,"url"],[2654,77,2165,73],[2654,89,2165,85,"params"],[2654,95,2165,91],[2654,96,2165,92,"factorId"],[2654,104,2165,100],[2654,116,2165,112],[2654,118,2165,114],[2655,14,2166,24,"body"],[2655,18,2166,28],[2655,20,2166,30],[2656,16,2166,32,"channel"],[2656,23,2166,39],[2656,25,2166,41,"params"],[2656,31,2166,47],[2656,32,2166,48,"channel"],[2657,14,2166,56],[2657,15,2166,57],[2658,14,2167,24,"headers"],[2658,21,2167,31],[2658,23,2167,33],[2658,27,2167,37],[2658,28,2167,38,"headers"],[2658,35,2167,45],[2659,14,2168,24,"jwt"],[2659,17,2168,27],[2659,19,2168,29],[2659,20,2168,30,"_a"],[2659,22,2168,32],[2659,25,2168,35,"sessionData"],[2659,36,2168,46],[2659,41,2168,51],[2659,45,2168,55],[2659,49,2168,59,"sessionData"],[2659,60,2168,70],[2659,65,2168,75],[2659,70,2168,80],[2659,71,2168,81],[2659,74,2168,84],[2659,79,2168,89],[2659,80,2168,90],[2659,83,2168,93,"sessionData"],[2659,94,2168,104],[2659,95,2168,105,"session"],[2659,102,2168,112],[2659,108,2168,118],[2659,112,2168,122],[2659,116,2168,126,"_a"],[2659,118,2168,128],[2659,123,2168,133],[2659,128,2168,138],[2659,129,2168,139],[2659,132,2168,142],[2659,137,2168,147],[2659,138,2168,148],[2659,141,2168,151,"_a"],[2659,143,2168,153],[2659,144,2168,154,"access_token"],[2660,12,2169,20],[2660,13,2169,21],[2660,14,2169,22],[2661,10,2170,16],[2661,11,2170,17],[2661,12,2170,18],[2662,8,2171,12],[2662,9,2171,13],[2662,10,2172,12],[2662,17,2172,19,"error"],[2662,22,2172,24],[2662,24,2172,26],[2663,10,2173,16],[2663,14,2173,20],[2663,18,2173,20,"isAuthError"],[2663,37,2173,31],[2663,39,2173,32,"error"],[2663,44,2173,37],[2663,45,2173,38],[2663,47,2173,40],[2664,12,2174,20],[2664,19,2174,27],[2665,14,2174,29,"data"],[2665,18,2174,33],[2665,20,2174,35],[2665,24,2174,39],[2666,14,2174,41,"error"],[2667,12,2174,47],[2667,13,2174,48],[2668,10,2175,16],[2669,10,2176,16],[2669,16,2176,22,"error"],[2669,21,2176,27],[2670,8,2177,12],[2671,6,2178,8],[2671,7,2178,9],[2671,8,2178,10],[2672,4,2179,4],[2673,4,2180,4],[2674,0,2181,0],[2675,0,2182,0],[2676,4,2183,4],[2676,10,2183,10,"_challengeAndVerify"],[2676,29,2183,29,"_challengeAndVerify"],[2676,30,2183,30,"params"],[2676,36,2183,36],[2676,38,2183,38],[2677,6,2184,8],[2678,6,2185,8],[2679,6,2186,8],[2679,12,2186,14],[2680,8,2186,16,"data"],[2680,12,2186,20],[2680,14,2186,22,"challengeData"],[2680,27,2186,35],[2681,8,2186,37,"error"],[2681,13,2186,42],[2681,15,2186,44,"challengeError"],[2682,6,2186,59],[2682,7,2186,60],[2682,10,2186,63],[2682,16,2186,69],[2682,20,2186,73],[2682,21,2186,74,"_challenge"],[2682,31,2186,84],[2682,32,2186,85],[2683,8,2187,12,"factorId"],[2683,16,2187,20],[2683,18,2187,22,"params"],[2683,24,2187,28],[2683,25,2187,29,"factorId"],[2684,6,2188,8],[2684,7,2188,9],[2684,8,2188,10],[2685,6,2189,8],[2685,10,2189,12,"challengeError"],[2685,24,2189,26],[2685,26,2189,28],[2686,8,2190,12],[2686,15,2190,19],[2687,10,2190,21,"data"],[2687,14,2190,25],[2687,16,2190,27],[2687,20,2190,31],[2688,10,2190,33,"error"],[2688,15,2190,38],[2688,17,2190,40,"challengeError"],[2689,8,2190,55],[2689,9,2190,56],[2690,6,2191,8],[2691,6,2192,8],[2691,13,2192,15],[2691,19,2192,21],[2691,23,2192,25],[2691,24,2192,26,"_verify"],[2691,31,2192,33],[2691,32,2192,34],[2692,8,2193,12,"factorId"],[2692,16,2193,20],[2692,18,2193,22,"params"],[2692,24,2193,28],[2692,25,2193,29,"factorId"],[2692,33,2193,37],[2693,8,2194,12,"challengeId"],[2693,19,2194,23],[2693,21,2194,25,"challengeData"],[2693,34,2194,38],[2693,35,2194,39,"id"],[2693,37,2194,41],[2694,8,2195,12,"code"],[2694,12,2195,16],[2694,14,2195,18,"params"],[2694,20,2195,24],[2694,21,2195,25,"code"],[2695,6,2196,8],[2695,7,2196,9],[2695,8,2196,10],[2696,4,2197,4],[2697,4,2198,4],[2698,0,2199,0],[2699,0,2200,0],[2700,4,2201,4],[2700,10,2201,10,"_listFactors"],[2700,22,2201,22,"_listFactors"],[2700,23,2201,22],[2700,25,2201,25],[2701,6,2202,8],[2702,6,2203,8],[2702,12,2203,14],[2703,8,2203,16,"data"],[2703,12,2203,20],[2703,14,2203,22],[2704,10,2203,24,"user"],[2705,8,2203,29],[2705,9,2203,30],[2706,8,2203,32,"error"],[2706,13,2203,37],[2706,15,2203,39,"userError"],[2707,6,2203,50],[2707,7,2203,51],[2707,10,2203,54],[2707,16,2203,60],[2707,20,2203,64],[2707,21,2203,65,"getUser"],[2707,28,2203,72],[2707,29,2203,73],[2707,30,2203,74],[2708,6,2204,8],[2708,10,2204,12,"userError"],[2708,19,2204,21],[2708,21,2204,23],[2709,8,2205,12],[2709,15,2205,19],[2710,10,2205,21,"data"],[2710,14,2205,25],[2710,16,2205,27],[2710,20,2205,31],[2711,10,2205,33,"error"],[2711,15,2205,38],[2711,17,2205,40,"userError"],[2712,8,2205,50],[2712,9,2205,51],[2713,6,2206,8],[2714,6,2207,8],[2714,12,2207,14,"factors"],[2714,19,2207,21],[2714,22,2207,24],[2714,23,2207,25,"user"],[2714,27,2207,29],[2714,32,2207,34],[2714,36,2207,38],[2714,40,2207,42,"user"],[2714,44,2207,46],[2714,49,2207,51],[2714,54,2207,56],[2714,55,2207,57],[2714,58,2207,60],[2714,63,2207,65],[2714,64,2207,66],[2714,67,2207,69,"user"],[2714,71,2207,73],[2714,72,2207,74,"factors"],[2714,79,2207,81],[2714,84,2207,86],[2714,86,2207,88],[2715,6,2208,8],[2715,12,2208,14,"totp"],[2715,16,2208,18],[2715,19,2208,21,"factors"],[2715,26,2208,28],[2715,27,2208,29,"filter"],[2715,33,2208,35],[2715,34,2208,37,"factor"],[2715,40,2208,43],[2715,44,2208,48,"factor"],[2715,50,2208,54],[2715,51,2208,55,"factor_type"],[2715,62,2208,66],[2715,67,2208,71],[2715,73,2208,77],[2715,77,2208,81,"factor"],[2715,83,2208,87],[2715,84,2208,88,"status"],[2715,90,2208,94],[2715,95,2208,99],[2715,105,2208,109],[2715,106,2208,110],[2716,6,2209,8],[2716,12,2209,14,"phone"],[2716,17,2209,19],[2716,20,2209,22,"factors"],[2716,27,2209,29],[2716,28,2209,30,"filter"],[2716,34,2209,36],[2716,35,2209,38,"factor"],[2716,41,2209,44],[2716,45,2209,49,"factor"],[2716,51,2209,55],[2716,52,2209,56,"factor_type"],[2716,63,2209,67],[2716,68,2209,72],[2716,75,2209,79],[2716,79,2209,83,"factor"],[2716,85,2209,89],[2716,86,2209,90,"status"],[2716,92,2209,96],[2716,97,2209,101],[2716,107,2209,111],[2716,108,2209,112],[2717,6,2210,8],[2717,13,2210,15],[2718,8,2211,12,"data"],[2718,12,2211,16],[2718,14,2211,18],[2719,10,2212,16,"all"],[2719,13,2212,19],[2719,15,2212,21,"factors"],[2719,22,2212,28],[2720,10,2213,16,"totp"],[2720,14,2213,20],[2721,10,2214,16,"phone"],[2722,8,2215,12],[2722,9,2215,13],[2723,8,2216,12,"error"],[2723,13,2216,17],[2723,15,2216,19],[2724,6,2217,8],[2724,7,2217,9],[2725,4,2218,4],[2726,4,2219,4],[2727,0,2220,0],[2728,0,2221,0],[2729,4,2222,4],[2729,10,2222,10,"_getAuthenticatorAssuranceLevel"],[2729,41,2222,41,"_getAuthenticatorAssuranceLevel"],[2729,42,2222,41],[2729,44,2222,44],[2730,6,2223,8],[2730,13,2223,15],[2730,17,2223,19],[2730,18,2223,20,"_acquireLock"],[2730,30,2223,32],[2730,31,2223,33],[2730,32,2223,34],[2730,33,2223,35],[2730,35,2223,37],[2730,47,2223,49],[2731,8,2224,12],[2731,15,2224,19],[2731,21,2224,25],[2731,25,2224,29],[2731,26,2224,30,"_useSession"],[2731,37,2224,41],[2731,38,2224,42],[2731,44,2224,49,"result"],[2731,50,2224,55],[2731,54,2224,60],[2732,10,2225,16],[2732,14,2225,20,"_a"],[2732,16,2225,22],[2732,18,2225,24,"_b"],[2732,20,2225,26],[2733,10,2226,16],[2733,16,2226,22],[2734,12,2226,24,"data"],[2734,16,2226,28],[2734,18,2226,30],[2735,14,2226,32,"session"],[2736,12,2226,40],[2736,13,2226,41],[2737,12,2226,43,"error"],[2737,17,2226,48],[2737,19,2226,50,"sessionError"],[2738,10,2226,64],[2738,11,2226,65],[2738,14,2226,68,"result"],[2738,20,2226,74],[2739,10,2227,16],[2739,14,2227,20,"sessionError"],[2739,26,2227,32],[2739,28,2227,34],[2740,12,2228,20],[2740,19,2228,27],[2741,14,2228,29,"data"],[2741,18,2228,33],[2741,20,2228,35],[2741,24,2228,39],[2742,14,2228,41,"error"],[2742,19,2228,46],[2742,21,2228,48,"sessionError"],[2743,12,2228,61],[2743,13,2228,62],[2744,10,2229,16],[2745,10,2230,16],[2745,14,2230,20],[2745,15,2230,21,"session"],[2745,22,2230,28],[2745,24,2230,30],[2746,12,2231,20],[2746,19,2231,27],[2747,14,2232,24,"data"],[2747,18,2232,28],[2747,20,2232,30],[2748,16,2232,32,"currentLevel"],[2748,28,2232,44],[2748,30,2232,46],[2748,34,2232,50],[2749,16,2232,52,"nextLevel"],[2749,25,2232,61],[2749,27,2232,63],[2749,31,2232,67],[2750,16,2232,69,"currentAuthenticationMethods"],[2750,44,2232,97],[2750,46,2232,99],[2751,14,2232,102],[2751,15,2232,103],[2752,14,2233,24,"error"],[2752,19,2233,29],[2752,21,2233,31],[2753,12,2234,20],[2753,13,2234,21],[2754,10,2235,16],[2755,10,2236,16],[2755,16,2236,22],[2756,12,2236,24,"payload"],[2757,10,2236,32],[2757,11,2236,33],[2757,14,2236,36],[2757,18,2236,36,"decodeJWT"],[2757,36,2236,45],[2757,38,2236,46,"session"],[2757,45,2236,53],[2757,46,2236,54,"access_token"],[2757,58,2236,66],[2757,59,2236,67],[2758,10,2237,16],[2758,14,2237,20,"currentLevel"],[2758,26,2237,32],[2758,29,2237,35],[2758,33,2237,39],[2759,10,2238,16],[2759,14,2238,20,"payload"],[2759,21,2238,27],[2759,22,2238,28,"aal"],[2759,25,2238,31],[2759,27,2238,33],[2760,12,2239,20,"currentLevel"],[2760,24,2239,32],[2760,27,2239,35,"payload"],[2760,34,2239,42],[2760,35,2239,43,"aal"],[2760,38,2239,46],[2761,10,2240,16],[2762,10,2241,16],[2762,14,2241,20,"nextLevel"],[2762,23,2241,29],[2762,26,2241,32,"currentLevel"],[2762,38,2241,44],[2763,10,2242,16],[2763,16,2242,22,"verifiedFactors"],[2763,31,2242,37],[2763,34,2242,40],[2763,35,2242,41,"_b"],[2763,37,2242,43],[2763,40,2242,46],[2763,41,2242,47,"_a"],[2763,43,2242,49],[2763,46,2242,52,"session"],[2763,53,2242,59],[2763,54,2242,60,"user"],[2763,58,2242,64],[2763,59,2242,65,"factors"],[2763,66,2242,72],[2763,72,2242,78],[2763,76,2242,82],[2763,80,2242,86,"_a"],[2763,82,2242,88],[2763,87,2242,93],[2763,92,2242,98],[2763,93,2242,99],[2763,96,2242,102],[2763,101,2242,107],[2763,102,2242,108],[2763,105,2242,111,"_a"],[2763,107,2242,113],[2763,108,2242,114,"filter"],[2763,114,2242,120],[2763,115,2242,122,"factor"],[2763,121,2242,128],[2763,125,2242,133,"factor"],[2763,131,2242,139],[2763,132,2242,140,"status"],[2763,138,2242,146],[2763,143,2242,151],[2763,153,2242,161],[2763,154,2242,162],[2763,160,2242,168],[2763,164,2242,172],[2763,168,2242,176,"_b"],[2763,170,2242,178],[2763,175,2242,183],[2763,180,2242,188],[2763,181,2242,189],[2763,184,2242,192,"_b"],[2763,186,2242,194],[2763,189,2242,197],[2763,191,2242,199],[2764,10,2243,16],[2764,14,2243,20,"verifiedFactors"],[2764,29,2243,35],[2764,30,2243,36,"length"],[2764,36,2243,42],[2764,39,2243,45],[2764,40,2243,46],[2764,42,2243,48],[2765,12,2244,20,"nextLevel"],[2765,21,2244,29],[2765,24,2244,32],[2765,30,2244,38],[2766,10,2245,16],[2767,10,2246,16],[2767,16,2246,22,"currentAuthenticationMethods"],[2767,44,2246,50],[2767,47,2246,53,"payload"],[2767,54,2246,60],[2767,55,2246,61,"amr"],[2767,58,2246,64],[2767,62,2246,68],[2767,64,2246,70],[2768,10,2247,16],[2768,17,2247,23],[2769,12,2247,25,"data"],[2769,16,2247,29],[2769,18,2247,31],[2770,14,2247,33,"currentLevel"],[2770,26,2247,45],[2771,14,2247,47,"nextLevel"],[2771,23,2247,56],[2772,14,2247,58,"currentAuthenticationMethods"],[2773,12,2247,87],[2773,13,2247,88],[2774,12,2247,90,"error"],[2774,17,2247,95],[2774,19,2247,97],[2775,10,2247,102],[2775,11,2247,103],[2776,8,2248,12],[2776,9,2248,13],[2776,10,2248,14],[2777,6,2249,8],[2777,7,2249,9],[2777,8,2249,10],[2778,4,2250,4],[2779,4,2251,4],[2779,10,2251,10,"fetchJwk"],[2779,18,2251,18,"fetchJwk"],[2779,19,2251,19,"kid"],[2779,22,2251,22],[2779,24,2251,24,"jwks"],[2779,28,2251,28],[2779,31,2251,31],[2780,6,2251,33,"keys"],[2780,10,2251,37],[2780,12,2251,39],[2781,4,2251,42],[2781,5,2251,43],[2781,7,2251,45],[2782,6,2252,8],[2783,6,2253,8],[2783,10,2253,12,"jwk"],[2783,13,2253,15],[2783,16,2253,18,"jwks"],[2783,20,2253,22],[2783,21,2253,23,"keys"],[2783,25,2253,27],[2783,26,2253,28,"find"],[2783,30,2253,32],[2783,31,2253,34,"key"],[2783,34,2253,37],[2783,38,2253,42,"key"],[2783,41,2253,45],[2783,42,2253,46,"kid"],[2783,45,2253,49],[2783,50,2253,54,"kid"],[2783,53,2253,57],[2783,54,2253,58],[2784,6,2254,8],[2784,10,2254,12,"jwk"],[2784,13,2254,15],[2784,15,2254,17],[2785,8,2255,12],[2785,15,2255,19,"jwk"],[2785,18,2255,22],[2786,6,2256,8],[2787,6,2257,8],[2787,12,2257,14,"now"],[2787,15,2257,17],[2787,18,2257,20,"Date"],[2787,22,2257,24],[2787,23,2257,25,"now"],[2787,26,2257,28],[2787,27,2257,29],[2787,28,2257,30],[2788,6,2258,8],[2789,6,2259,8,"jwk"],[2789,9,2259,11],[2789,12,2259,14],[2789,16,2259,18],[2789,17,2259,19,"jwks"],[2789,21,2259,23],[2789,22,2259,24,"keys"],[2789,26,2259,28],[2789,27,2259,29,"find"],[2789,31,2259,33],[2789,32,2259,35,"key"],[2789,35,2259,38],[2789,39,2259,43,"key"],[2789,42,2259,46],[2789,43,2259,47,"kid"],[2789,46,2259,50],[2789,51,2259,55,"kid"],[2789,54,2259,58],[2789,55,2259,59],[2790,6,2260,8],[2791,6,2261,8],[2791,10,2261,12,"jwk"],[2791,13,2261,15],[2791,17,2261,19],[2791,21,2261,23],[2791,22,2261,24,"jwks_cached_at"],[2791,36,2261,38],[2791,39,2261,41,"JWKS_TTL"],[2791,58,2261,49],[2791,61,2261,52,"now"],[2791,64,2261,55],[2791,66,2261,57],[2792,8,2262,12],[2792,15,2262,19,"jwk"],[2792,18,2262,22],[2793,6,2263,8],[2794,6,2264,8],[2795,6,2265,8],[2795,12,2265,14],[2796,8,2265,16,"data"],[2796,12,2265,20],[2797,8,2265,22,"error"],[2798,6,2265,28],[2798,7,2265,29],[2798,10,2265,32],[2798,16,2265,38],[2798,20,2265,38,"_request"],[2798,35,2265,46],[2798,37,2265,47],[2798,41,2265,51],[2798,42,2265,52,"fetch"],[2798,47,2265,57],[2798,49,2265,59],[2798,54,2265,64],[2798,56,2265,66],[2798,59,2265,69],[2798,63,2265,73],[2798,64,2265,74,"url"],[2798,67,2265,77],[2798,91,2265,101],[2798,93,2265,103],[2799,8,2266,12,"headers"],[2799,15,2266,19],[2799,17,2266,21],[2799,21,2266,25],[2799,22,2266,26,"headers"],[2800,6,2267,8],[2800,7,2267,9],[2800,8,2267,10],[2801,6,2268,8],[2801,10,2268,12,"error"],[2801,15,2268,17],[2801,17,2268,19],[2802,8,2269,12],[2802,14,2269,18,"error"],[2802,19,2269,23],[2803,6,2270,8],[2804,6,2271,8],[2804,10,2271,12],[2804,11,2271,13,"data"],[2804,15,2271,17],[2804,16,2271,18,"keys"],[2804,20,2271,22],[2804,24,2271,26,"data"],[2804,28,2271,30],[2804,29,2271,31,"keys"],[2804,33,2271,35],[2804,34,2271,36,"length"],[2804,40,2271,42],[2804,45,2271,47],[2804,46,2271,48],[2804,48,2271,50],[2805,8,2272,12],[2805,15,2272,19],[2805,19,2272,23],[2806,6,2273,8],[2807,6,2274,8],[2807,10,2274,12],[2807,11,2274,13,"jwks"],[2807,15,2274,17],[2807,18,2274,20,"data"],[2807,22,2274,24],[2808,6,2275,8],[2808,10,2275,12],[2808,11,2275,13,"jwks_cached_at"],[2808,25,2275,27],[2808,28,2275,30,"now"],[2808,31,2275,33],[2809,6,2276,8],[2810,6,2277,8,"jwk"],[2810,9,2277,11],[2810,12,2277,14,"data"],[2810,16,2277,18],[2810,17,2277,19,"keys"],[2810,21,2277,23],[2810,22,2277,24,"find"],[2810,26,2277,28],[2810,27,2277,30,"key"],[2810,30,2277,33],[2810,34,2277,38,"key"],[2810,37,2277,41],[2810,38,2277,42,"kid"],[2810,41,2277,45],[2810,46,2277,50,"kid"],[2810,49,2277,53],[2810,50,2277,54],[2811,6,2278,8],[2811,10,2278,12],[2811,11,2278,13,"jwk"],[2811,14,2278,16],[2811,16,2278,18],[2812,8,2279,12],[2812,15,2279,19],[2812,19,2279,23],[2813,6,2280,8],[2814,6,2281,8],[2814,13,2281,15,"jwk"],[2814,16,2281,18],[2815,4,2282,4],[2816,4,2283,4],[2817,0,2284,0],[2818,0,2285,0],[2819,0,2286,0],[2820,0,2287,0],[2821,0,2288,0],[2822,0,2289,0],[2823,0,2290,0],[2824,0,2291,0],[2825,0,2292,0],[2826,0,2293,0],[2827,0,2294,0],[2828,0,2295,0],[2829,0,2296,0],[2830,0,2297,0],[2831,0,2298,0],[2832,4,2299,4],[2832,10,2299,10,"getClaims"],[2832,19,2299,19,"getClaims"],[2832,20,2299,20,"jwt"],[2832,23,2299,23],[2832,25,2299,25,"options"],[2832,32,2299,32],[2832,35,2299,35],[2832,36,2299,36],[2832,37,2299,37],[2832,39,2299,39],[2833,6,2300,8],[2833,10,2300,12],[2834,8,2301,12],[2834,12,2301,16,"token"],[2834,17,2301,21],[2834,20,2301,24,"jwt"],[2834,23,2301,27],[2835,8,2302,12],[2835,12,2302,16],[2835,13,2302,17,"token"],[2835,18,2302,22],[2835,20,2302,24],[2836,10,2303,16],[2836,16,2303,22],[2837,12,2303,24,"data"],[2837,16,2303,28],[2838,12,2303,30,"error"],[2839,10,2303,36],[2839,11,2303,37],[2839,14,2303,40],[2839,20,2303,46],[2839,24,2303,50],[2839,25,2303,51,"getSession"],[2839,35,2303,61],[2839,36,2303,62],[2839,37,2303,63],[2840,10,2304,16],[2840,14,2304,20,"error"],[2840,19,2304,25],[2840,23,2304,29],[2840,24,2304,30,"data"],[2840,28,2304,34],[2840,29,2304,35,"session"],[2840,36,2304,42],[2840,38,2304,44],[2841,12,2305,20],[2841,19,2305,27],[2842,14,2305,29,"data"],[2842,18,2305,33],[2842,20,2305,35],[2842,24,2305,39],[2843,14,2305,41,"error"],[2844,12,2305,47],[2844,13,2305,48],[2845,10,2306,16],[2846,10,2307,16,"token"],[2846,15,2307,21],[2846,18,2307,24,"data"],[2846,22,2307,28],[2846,23,2307,29,"session"],[2846,30,2307,36],[2846,31,2307,37,"access_token"],[2846,43,2307,49],[2847,8,2308,12],[2848,8,2309,12],[2848,14,2309,18],[2849,10,2309,20,"header"],[2849,16,2309,26],[2850,10,2309,28,"payload"],[2850,17,2309,35],[2851,10,2309,37,"signature"],[2851,19,2309,46],[2852,10,2309,48,"raw"],[2852,13,2309,51],[2852,15,2309,53],[2853,12,2309,55,"header"],[2853,18,2309,61],[2853,20,2309,63,"rawHeader"],[2853,29,2309,72],[2854,12,2309,74,"payload"],[2854,19,2309,81],[2854,21,2309,83,"rawPayload"],[2855,10,2309,94],[2856,8,2309,97],[2856,9,2309,98],[2856,12,2309,101],[2856,16,2309,101,"decodeJWT"],[2856,34,2309,110],[2856,36,2309,111,"token"],[2856,41,2309,116],[2856,42,2309,117],[2857,8,2310,12],[2857,12,2310,16],[2857,14,2310,18,"options"],[2857,21,2310,25],[2857,26,2310,30],[2857,30,2310,34],[2857,34,2310,38,"options"],[2857,41,2310,45],[2857,46,2310,50],[2857,51,2310,55],[2857,52,2310,56],[2857,55,2310,59],[2857,60,2310,64],[2857,61,2310,65],[2857,64,2310,68,"options"],[2857,71,2310,75],[2857,72,2310,76,"allowExpired"],[2857,84,2310,88],[2857,85,2310,89],[2857,87,2310,91],[2858,10,2311,16],[2859,10,2312,16],[2859,14,2312,16,"validateExp"],[2859,34,2312,27],[2859,36,2312,28,"payload"],[2859,43,2312,35],[2859,44,2312,36,"exp"],[2859,47,2312,39],[2859,48,2312,40],[2860,8,2313,12],[2861,8,2314,12],[2861,14,2314,18,"signingKey"],[2861,24,2314,28],[2861,27,2314,31],[2861,28,2314,32,"header"],[2861,34,2314,38],[2861,35,2314,39,"alg"],[2861,38,2314,42],[2861,42,2315,16,"header"],[2861,48,2315,22],[2861,49,2315,23,"alg"],[2861,52,2315,26],[2861,53,2315,27,"startsWith"],[2861,63,2315,37],[2861,64,2315,38],[2861,68,2315,42],[2861,69,2315,43],[2861,73,2316,16],[2861,74,2316,17,"header"],[2861,80,2316,23],[2861,81,2316,24,"kid"],[2861,84,2316,27],[2861,88,2317,16],[2861,90,2317,18],[2861,98,2317,26],[2861,102,2317,30,"globalThis"],[2861,112,2317,40],[2861,116,2317,44],[2861,124,2317,52],[2861,128,2317,56,"globalThis"],[2861,138,2317,66],[2861,139,2317,67,"crypto"],[2861,145,2317,73],[2861,146,2317,74],[2861,149,2318,18],[2861,153,2318,22],[2861,156,2319,18],[2861,162,2319,24],[2861,166,2319,28],[2861,167,2319,29,"fetchJwk"],[2861,175,2319,37],[2861,176,2319,38,"header"],[2861,182,2319,44],[2861,183,2319,45,"kid"],[2861,186,2319,48],[2861,188,2319,50],[2861,189,2319,51,"options"],[2861,196,2319,58],[2861,201,2319,63],[2861,205,2319,67],[2861,209,2319,71,"options"],[2861,216,2319,78],[2861,221,2319,83],[2861,226,2319,88],[2861,227,2319,89],[2861,230,2319,92],[2861,235,2319,97],[2861,236,2319,98],[2861,239,2319,101,"options"],[2861,246,2319,108],[2861,247,2319,109,"keys"],[2861,251,2319,113],[2861,255,2319,117],[2862,10,2319,119,"keys"],[2862,14,2319,123],[2862,16,2319,125,"options"],[2862,23,2319,132],[2862,24,2319,133,"keys"],[2863,8,2319,138],[2863,9,2319,139],[2863,12,2319,142,"options"],[2863,19,2319,149],[2863,24,2319,154],[2863,28,2319,158],[2863,32,2319,162,"options"],[2863,39,2319,169],[2863,44,2319,174],[2863,49,2319,179],[2863,50,2319,180],[2863,53,2319,183],[2863,58,2319,188],[2863,59,2319,189],[2863,62,2319,192,"options"],[2863,69,2319,199],[2863,70,2319,200,"jwks"],[2863,74,2319,204],[2863,75,2319,205],[2864,8,2320,12],[2865,8,2321,12],[2865,12,2321,16],[2865,13,2321,17,"signingKey"],[2865,23,2321,27],[2865,25,2321,29],[2866,10,2322,16],[2866,16,2322,22],[2867,12,2322,24,"error"],[2868,10,2322,30],[2868,11,2322,31],[2868,14,2322,34],[2868,20,2322,40],[2868,24,2322,44],[2868,25,2322,45,"getUser"],[2868,32,2322,52],[2868,33,2322,53,"token"],[2868,38,2322,58],[2868,39,2322,59],[2869,10,2323,16],[2869,14,2323,20,"error"],[2869,19,2323,25],[2869,21,2323,27],[2870,12,2324,20],[2870,18,2324,26,"error"],[2870,23,2324,31],[2871,10,2325,16],[2872,10,2326,16],[2873,10,2327,16],[2873,17,2327,23],[2874,12,2328,20,"data"],[2874,16,2328,24],[2874,18,2328,26],[2875,14,2329,24,"claims"],[2875,20,2329,30],[2875,22,2329,32,"payload"],[2875,29,2329,39],[2876,14,2330,24,"header"],[2876,20,2330,30],[2877,14,2331,24,"signature"],[2878,12,2332,20],[2878,13,2332,21],[2879,12,2333,20,"error"],[2879,17,2333,25],[2879,19,2333,27],[2880,10,2334,16],[2880,11,2334,17],[2881,8,2335,12],[2882,8,2336,12],[2882,14,2336,18,"algorithm"],[2882,23,2336,27],[2882,26,2336,30],[2882,30,2336,30,"getAlgorithm"],[2882,51,2336,42],[2882,53,2336,43,"header"],[2882,59,2336,49],[2882,60,2336,50,"alg"],[2882,63,2336,53],[2882,64,2336,54],[2883,8,2337,12],[2884,8,2338,12],[2884,14,2338,18,"publicKey"],[2884,23,2338,27],[2884,26,2338,30],[2884,32,2338,36,"crypto"],[2884,38,2338,42],[2884,39,2338,43,"subtle"],[2884,45,2338,49],[2884,46,2338,50,"importKey"],[2884,55,2338,59],[2884,56,2338,60],[2884,61,2338,65],[2884,63,2338,67,"signingKey"],[2884,73,2338,77],[2884,75,2338,79,"algorithm"],[2884,84,2338,88],[2884,86,2338,90],[2884,90,2338,94],[2884,92,2338,96],[2884,93,2339,16],[2884,101,2339,24],[2884,102,2340,13],[2884,103,2340,14],[2885,8,2341,12],[2886,8,2342,12],[2886,14,2342,18,"isValid"],[2886,21,2342,25],[2886,24,2342,28],[2886,30,2342,34,"crypto"],[2886,36,2342,40],[2886,37,2342,41,"subtle"],[2886,43,2342,47],[2886,44,2342,48,"verify"],[2886,50,2342,54],[2886,51,2342,55,"algorithm"],[2886,60,2342,64],[2886,62,2342,66,"publicKey"],[2886,71,2342,75],[2886,73,2342,77,"signature"],[2886,82,2342,86],[2886,84,2342,88],[2886,88,2342,88,"stringToUint8Array"],[2886,117,2342,106],[2886,119,2342,107],[2886,122,2342,110,"rawHeader"],[2886,131,2342,119],[2886,135,2342,123,"rawPayload"],[2886,145,2342,133],[2886,147,2342,135],[2886,148,2342,136],[2886,149,2342,137],[2887,8,2343,12],[2887,12,2343,16],[2887,13,2343,17,"isValid"],[2887,20,2343,24],[2887,22,2343,26],[2888,10,2344,16],[2888,16,2344,22],[2888,20,2344,26,"AuthInvalidJwtError"],[2888,47,2344,45],[2888,48,2344,46],[2888,71,2344,69],[2888,72,2344,70],[2889,8,2345,12],[2890,8,2346,12],[2891,8,2347,12],[2891,15,2347,19],[2892,10,2348,16,"data"],[2892,14,2348,20],[2892,16,2348,22],[2893,12,2349,20,"claims"],[2893,18,2349,26],[2893,20,2349,28,"payload"],[2893,27,2349,35],[2894,12,2350,20,"header"],[2894,18,2350,26],[2895,12,2351,20,"signature"],[2896,10,2352,16],[2896,11,2352,17],[2897,10,2353,16,"error"],[2897,15,2353,21],[2897,17,2353,23],[2898,8,2354,12],[2898,9,2354,13],[2899,6,2355,8],[2899,7,2355,9],[2899,8,2356,8],[2899,15,2356,15,"error"],[2899,20,2356,20],[2899,22,2356,22],[2900,8,2357,12],[2900,12,2357,16],[2900,16,2357,16,"isAuthError"],[2900,35,2357,27],[2900,37,2357,28,"error"],[2900,42,2357,33],[2900,43,2357,34],[2900,45,2357,36],[2901,10,2358,16],[2901,17,2358,23],[2902,12,2358,25,"data"],[2902,16,2358,29],[2902,18,2358,31],[2902,22,2358,35],[2903,12,2358,37,"error"],[2904,10,2358,43],[2904,11,2358,44],[2905,8,2359,12],[2906,8,2360,12],[2906,14,2360,18,"error"],[2906,19,2360,23],[2907,6,2361,8],[2908,4,2362,4],[2909,2,2363,0],[2910,2,2363,1,"exports"],[2910,9,2363,1],[2910,10,2363,1,"default"],[2910,17,2363,1],[2910,20,2363,1,"GoTrueClient"],[2910,32,2363,1],[2911,2,2364,0,"GoTrueClient"],[2911,14,2364,12],[2911,15,2364,13,"nextInstanceID"],[2911,29,2364,27],[2911,32,2364,30],[2911,33,2364,31],[2912,0,2364,32],[2912,3]],"functionMap":{"names":["<global>","lockNoOp","GoTrueClient","constructor","_b.addEventListener$argument_1","get__jwks","set__jwks","get__jwks_cached_at","set__jwks_cached_at","_debug","initialize","<anonymous>","_acquireLock$argument_1","_initialize","setTimeout$argument_0","signInAnonymously","signUp","signInWithPassword","signInWithOAuth","exchangeCodeForSession","signInWithWeb3","signInWithSolana","options.signInWithSolana.resources.map$argument_0","_exchangeCodeForSession","signInWithIdToken","signInWithOtp","verifyOtp","signInWithSSO","reauthenticate","_reauthenticate","_useSession$argument_0","resend","getSession","_acquireLock","lock$argument_2","_useSession","__loadSession","Proxy$argument_1.get","getUser","_getUser","updateUser","_updateUser","setSession","_setSession","refreshSession","_refreshSession","_getSessionFromURL","_isImplicitGrantCallback","_isPKCECallback","signOut","_signOut","onAuthStateChange","subscription.unsubscribe","_emitInitialSession","resetPasswordForEmail","getUserIdentities","linkIdentity","unlinkIdentity","_refreshAccessToken","retryable$argument_0","retryable$argument_1","_isValidSession","_handleProviderSignIn","_recoverAndRefresh","_callRefreshToken","_notifyAllSubscribers","Array.from.map$argument_0","_saveSession","_removeSession","_removeVisibilityChangedCallback","_startAutoRefresh","setInterval$argument_0","_stopAutoRefresh","startAutoRefresh","stopAutoRefresh","_autoRefreshTokenTick","_handleVisibilityChange","visibilityChangedCallback","_onVisibilityChanged","_getUrlForProvider","_unenroll","_enroll","_verify","_challenge","_challengeAndVerify","_listFactors","factors.filter$argument_0","_getAuthenticatorAssuranceLevel","_a.filter$argument_0","fetchJwk","jwks.keys.find$argument_0","data.keys.find$argument_0","getClaims"],"mappings":"AAA;ACuB;CDE;eEU;ICI;6GCuG;aDG;KDG;IGI;KHG;IIC;KJE;IKC;KLG;IMC;KNE;IOC;KPK;IQM;kCCI;+CCC;aDE;SDC;KRE;IWO;2BCqC;iBDO;KXmB;IaM;Kb6B;IcW;Kd6D;IeS;KfoD;IgBK;KhBQ;IiBI;qCPE;SOE;KjBC;IkBK;KlBM;ImBC;sECmG,6BD;KnBwC;IqBC;KrBkC;IsBK;KtBoC;IuBkB;KvB+C;IwBI;KxBmC;IyBe;KzBuB;I0BK;2ChBE;SgBE;K1BC;I2BC;0CCE;aDW;K3BQ;I6BI;K7BoC;I8BY;mDpBE;oCkBC;alBE;SoBC;K9BE;I+BI;gCtBO;iBsBG;yCtBC;iBsBO;8ECG;6CvBK;qBuBO;aDc;K/BK;IiCO;KjCU;IkCM;6BC2C;yBDQ;KlCe;IoCQ;mD1BK;S0BE;KpCE;IqCC;0CTS;aSe;KrCc;IsCI;2C5BE;S4BE;KtCC;IuCC;0CXE;aW4B;KvCQ;IwCM;2C9BE;S8BE;KxCC;IyCC;KzCgD;I0CO;2ChCE;SgCE;K1CC;I2CC;0CfE;aeoB;K3CQ;I4CI;K5CsF;I6CI;K7CE;I8CI;K9CG;I+CS;2CrCE;SqCE;K/CC;IgDC;sCpBC;SoBuB;KhDC;IiDK;yBCK;aDG;SxCI;wCCE;aDE;SwCC;KjDE;ImDC;sCvBC;SuBc;KnDC;IoDQ;KpD0B;IqDI;KrDc;IsDK;2D1BG;a0Be;KtDc;IuDI;0C3BE;a2BU;KvDQ;IwDK;mCCM;aDU,EE;aFM;KxDY;I2DC;K3DO;I4DC;K5DY;I6DK;K7D0F;I8DC;K9DyC;I+DC;+ECQ;aDO;K/DY;IiEK;KjEmC;IkEC;KlES;ImEO;KnEY;IoEK;mCCG,kCD;mBxDqB;SwDG;KpEC;IsEK;KtEO;IuEuB;KvEG;IwES;KxEG;IyEI;uC/DG;sDkBI;yBlBY;a+DS;KzEU;I0EM;6CCU,kDD;K1ES;I4EI;4ClEe;iBkEQ;K5EQ;I6EO;K7EwB;I8EC;0ClDE;akDU;K9EQ;I+EC;0CnDE;amDmB;K/EQ;IgFI;qCtEC;8CkBE;iBlBiB;SsEQ;KhFC;IiFI;qCvEC;8CkBE;iBlBW;SuEQ;KjFC;IkFI;KlFc;ImFI;oCCO,yED;qCCC,0ED;KnFS;IqFI;qC3EC;0CkBC;yH0DkB,wC1D;alBM;S2EC;KrFC;IuFC;iCCE,wBD;kCCM,wBD;6BEkB,wBF;KvFK;I0FiB;K1F+D;CFC"}},"type":"js/module"}]}