{"dependencies":[{"name":"../asyncContext/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"0lgbsiOKFlLN56kb6TORm/gLqf8=","exportNames":["*"]}},{"name":"../carrier.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":47,"index":115}}],"key":"/CHWq5A6N7GxVM0vQJS3tsMdXuE=","exportNames":["*"]}},{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":116},"end":{"line":3,"column":54,"index":170}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../metrics/metric-summary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":171},"end":{"line":4,"column":102,"index":273}}],"key":"SgD8iidLO9LqRs+nZfdnbn+DJQA=","exportNames":["*"]}},{"name":"../semanticAttributes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":274},"end":{"line":5,"column":184,"index":458}}],"key":"Ovsn9ORXEwSazI36ru//KBDD8LQ=","exportNames":["*"]}},{"name":"../tracing/spanstatus.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":459},"end":{"line":6,"column":77,"index":536}}],"key":"1phYvcu7fEfN/sCmA7PTW9MzdDU=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":537},"end":{"line":7,"column":58,"index":595}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":596},"end":{"line":8,"column":87,"index":683}}],"key":"IWRGqGXR51VGNaoabCqwsNvBzK0=","exportNames":["*"]}},{"name":"../utils-hoist/propagationContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":684},"end":{"line":9,"column":70,"index":754}}],"key":"acTMSbYB3Ip99hQ+0SCJ99493GM=","exportNames":["*"]}},{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":755},"end":{"line":10,"column":60,"index":815}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils-hoist/tracing.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":816},"end":{"line":11,"column":70,"index":886}}],"key":"A6M78jOorF6ZvWa6FxdnTB6bynQ=","exportNames":["*"]}},{"name":"./spanOnScope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":887},"end":{"line":12,"column":52,"index":939}}],"key":"P4taAJefiQhMIijk2Zg9ZlD5r0w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TRACE_FLAG_SAMPLED = exports.TRACE_FLAG_NONE = void 0;\n  exports.addChildSpanToSpan = addChildSpanToSpan;\n  exports.getActiveSpan = getActiveSpan;\n  exports.getRootSpan = getRootSpan;\n  exports.getSpanDescendants = getSpanDescendants;\n  exports.getStatusMessage = getStatusMessage;\n  exports.removeChildSpanFromSpan = removeChildSpanFromSpan;\n  exports.showSpanDropWarning = showSpanDropWarning;\n  exports.spanIsSampled = spanIsSampled;\n  exports.spanTimeInputToSeconds = spanTimeInputToSeconds;\n  exports.spanToJSON = spanToJSON;\n  exports.spanToTraceContext = spanToTraceContext;\n  exports.spanToTraceHeader = spanToTraceHeader;\n  exports.spanToTransactionTraceContext = spanToTransactionTraceContext;\n  exports.updateMetricSummaryOnActiveSpan = updateMetricSummaryOnActiveSpan;\n  exports.updateSpanName = updateSpanName;\n  var _index = require(_dependencyMap[0], \"../asyncContext/index.js\");\n  var _carrier = require(_dependencyMap[1], \"../carrier.js\");\n  var _currentScopes = require(_dependencyMap[2], \"../currentScopes.js\");\n  var _metricSummary = require(_dependencyMap[3], \"../metrics/metric-summary.js\");\n  var _semanticAttributes = require(_dependencyMap[4], \"../semanticAttributes.js\");\n  var _spanstatus = require(_dependencyMap[5], \"../tracing/spanstatus.js\");\n  var _logger = require(_dependencyMap[6], \"../utils-hoist/logger.js\");\n  var _object = require(_dependencyMap[7], \"../utils-hoist/object.js\");\n  var _propagationContext = require(_dependencyMap[8], \"../utils-hoist/propagationContext.js\");\n  var _time = require(_dependencyMap[9], \"../utils-hoist/time.js\");\n  var _tracing = require(_dependencyMap[10], \"../utils-hoist/tracing.js\");\n  var _spanOnScope = require(_dependencyMap[11], \"./spanOnScope.js\");\n  // These are aligned with OpenTelemetry trace flags\n  const TRACE_FLAG_NONE = exports.TRACE_FLAG_NONE = 0x0;\n  const TRACE_FLAG_SAMPLED = exports.TRACE_FLAG_SAMPLED = 0x1;\n\n  // todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`\n  let hasShownSpanDropWarning = false;\n\n  /**\n   * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n   * By default, this will only include trace_id, span_id & parent_span_id.\n   * If `includeAllData` is true, it will also include data, op, status & origin.\n   */\n  function spanToTransactionTraceContext(span) {\n    const {\n      spanId: span_id,\n      traceId: trace_id\n    } = span.spanContext();\n    const {\n      data,\n      op,\n      parent_span_id,\n      status,\n      origin\n    } = spanToJSON(span);\n    return (0, _object.dropUndefinedKeys)({\n      parent_span_id,\n      span_id,\n      trace_id,\n      data,\n      op,\n      status,\n      origin\n    });\n  }\n\n  /**\n   * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n   */\n  function spanToTraceContext(span) {\n    const {\n      spanId,\n      traceId: trace_id,\n      isRemote\n    } = span.spanContext();\n\n    // If the span is remote, we use a random/virtual span as span_id to the trace context,\n    // and the remote span as parent_span_id\n    const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n    const span_id = isRemote ? (0, _propagationContext.generateSpanId)() : spanId;\n    return (0, _object.dropUndefinedKeys)({\n      parent_span_id,\n      span_id,\n      trace_id\n    });\n  }\n\n  /**\n   * Convert a Span to a Sentry trace header.\n   */\n  function spanToTraceHeader(span) {\n    const {\n      traceId,\n      spanId\n    } = span.spanContext();\n    const sampled = spanIsSampled(span);\n    return (0, _tracing.generateSentryTraceHeader)(traceId, spanId, sampled);\n  }\n\n  /**\n   * Convert a span time input into a timestamp in seconds.\n   */\n  function spanTimeInputToSeconds(input) {\n    if (typeof input === 'number') {\n      return ensureTimestampInSeconds(input);\n    }\n    if (Array.isArray(input)) {\n      // See {@link HrTime} for the array-based time format\n      return input[0] + input[1] / 1e9;\n    }\n    if (input instanceof Date) {\n      return ensureTimestampInSeconds(input.getTime());\n    }\n    return (0, _time.timestampInSeconds)();\n  }\n\n  /**\n   * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n   */\n  function ensureTimestampInSeconds(timestamp) {\n    const isMs = timestamp > 9999999999;\n    return isMs ? timestamp / 1000 : timestamp;\n  }\n\n  /**\n   * Convert a span to a JSON representation.\n   */\n  // Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n  // This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n  // And `spanToJSON` needs the Span class from `span.ts` to check here.\n  function spanToJSON(span) {\n    if (spanIsSentrySpan(span)) {\n      return span.getSpanJSON();\n    }\n    try {\n      const {\n        spanId: span_id,\n        traceId: trace_id\n      } = span.spanContext();\n\n      // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n      if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n        const {\n          attributes,\n          startTime,\n          name,\n          endTime,\n          parentSpanId,\n          status\n        } = span;\n        return (0, _object.dropUndefinedKeys)({\n          span_id,\n          trace_id,\n          data: attributes,\n          description: name,\n          parent_span_id: parentSpanId,\n          start_timestamp: spanTimeInputToSeconds(startTime),\n          // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n          timestamp: spanTimeInputToSeconds(endTime) || undefined,\n          status: getStatusMessage(status),\n          op: attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n          origin: attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n          _metrics_summary: (0, _metricSummary.getMetricSummaryJsonForSpan)(span)\n        });\n      }\n\n      // Finally, at least we have `spanContext()`....\n      return {\n        span_id,\n        trace_id\n      };\n    } catch (e) {\n      return {};\n    }\n  }\n  function spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n    const castSpan = span;\n    return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n  }\n\n  /** Exported only for tests. */\n\n  /**\n   * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n   * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n   */\n  function spanIsSentrySpan(span) {\n    return typeof span.getSpanJSON === 'function';\n  }\n\n  /**\n   * Returns true if a span is sampled.\n   * In most cases, you should just use `span.isRecording()` instead.\n   * However, this has a slightly different semantic, as it also returns false if the span is finished.\n   * So in the case where this distinction is important, use this method.\n   */\n  function spanIsSampled(span) {\n    // We align our trace flags with the ones OpenTelemetry use\n    // So we also check for sampled the same way they do.\n    const {\n      traceFlags\n    } = span.spanContext();\n    return traceFlags === TRACE_FLAG_SAMPLED;\n  }\n\n  /** Get the status message to use for a JSON representation of a span. */\n  function getStatusMessage(status) {\n    if (!status || status.code === _spanstatus.SPAN_STATUS_UNSET) {\n      return undefined;\n    }\n    if (status.code === _spanstatus.SPAN_STATUS_OK) {\n      return 'ok';\n    }\n    return status.message || 'unknown_error';\n  }\n  const CHILD_SPANS_FIELD = '_sentryChildSpans';\n  const ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n  /**\n   * Adds an opaque child span reference to a span.\n   */\n  function addChildSpanToSpan(span, childSpan) {\n    // We store the root span reference on the child span\n    // We need this for `getRootSpan()` to work\n    const rootSpan = span[ROOT_SPAN_FIELD] || span;\n    (0, _object.addNonEnumerableProperty)(childSpan, ROOT_SPAN_FIELD, rootSpan);\n\n    // We store a list of child spans on the parent span\n    // We need this for `getSpanDescendants()` to work\n    if (span[CHILD_SPANS_FIELD]) {\n      span[CHILD_SPANS_FIELD].add(childSpan);\n    } else {\n      (0, _object.addNonEnumerableProperty)(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n    }\n  }\n\n  /** This is only used internally by Idle Spans. */\n  function removeChildSpanFromSpan(span, childSpan) {\n    if (span[CHILD_SPANS_FIELD]) {\n      span[CHILD_SPANS_FIELD].delete(childSpan);\n    }\n  }\n\n  /**\n   * Returns an array of the given span and all of its descendants.\n   */\n  function getSpanDescendants(span) {\n    const resultSet = new Set();\n    function addSpanChildren(span) {\n      // This exit condition is required to not infinitely loop in case of a circular dependency.\n      if (resultSet.has(span)) {\n        return;\n        // We want to ignore unsampled spans (e.g. non recording spans)\n      } else if (spanIsSampled(span)) {\n        resultSet.add(span);\n        const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n        for (const childSpan of childSpans) {\n          addSpanChildren(childSpan);\n        }\n      }\n    }\n    addSpanChildren(span);\n    return Array.from(resultSet);\n  }\n\n  /**\n   * Returns the root span of a given span.\n   */\n  function getRootSpan(span) {\n    return span[ROOT_SPAN_FIELD] || span;\n  }\n\n  /**\n   * Returns the currently active span.\n   */\n  function getActiveSpan() {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n    if (acs.getActiveSpan) {\n      return acs.getActiveSpan();\n    }\n    return (0, _spanOnScope._getSpanForScope)((0, _currentScopes.getCurrentScope)());\n  }\n\n  /**\n   * Updates the metric summary on the currently active span\n   */\n  function updateMetricSummaryOnActiveSpan(metricType, sanitizedName, value, unit, tags, bucketKey) {\n    const span = getActiveSpan();\n    if (span) {\n      (0, _metricSummary.updateMetricSummaryOnSpan)(span, metricType, sanitizedName, value, unit, tags, bucketKey);\n    }\n  }\n\n  /**\n   * Logs a warning once if `beforeSendSpan` is used to drop spans.\n   *\n   * todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`.\n   */\n  function showSpanDropWarning() {\n    if (!hasShownSpanDropWarning) {\n      (0, _logger.consoleSandbox)(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.');\n      });\n      hasShownSpanDropWarning = true;\n    }\n  }\n\n  /**\n   * Updates the name of the given span and ensures that the span name is not\n   * overwritten by the Sentry SDK.\n   *\n   * Use this function instead of `span.updateName()` if you want to make sure that\n   * your name is kept. For some spans, for example root `http.server` spans the\n   * Sentry SDK would otherwise overwrite the span name with a high-quality name\n   * it infers when the span ends.\n   *\n   * Use this function in server code or when your span is started on the server\n   * and on the client (browser). If you only update a span name on the client,\n   * you can also use `span.updateName()` the SDK does not overwrite the name.\n   *\n   * @param span - The span to update the name of.\n   * @param name - The name to set on the span.\n   */\n  function updateSpanName(span, name) {\n    span.updateName(name);\n    span.setAttributes({\n      [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name\n    });\n  }\n});","lineCount":334,"map":[[21,2,1,0],[21,6,1,0,"_index"],[21,12,1,0],[21,15,1,0,"require"],[21,22,1,0],[21,23,1,0,"_dependencyMap"],[21,37,1,0],[22,2,2,0],[22,6,2,0,"_carrier"],[22,14,2,0],[22,17,2,0,"require"],[22,24,2,0],[22,25,2,0,"_dependencyMap"],[22,39,2,0],[23,2,3,0],[23,6,3,0,"_currentScopes"],[23,20,3,0],[23,23,3,0,"require"],[23,30,3,0],[23,31,3,0,"_dependencyMap"],[23,45,3,0],[24,2,4,0],[24,6,4,0,"_metricSummary"],[24,20,4,0],[24,23,4,0,"require"],[24,30,4,0],[24,31,4,0,"_dependencyMap"],[24,45,4,0],[25,2,5,0],[25,6,5,0,"_semanticAttributes"],[25,25,5,0],[25,28,5,0,"require"],[25,35,5,0],[25,36,5,0,"_dependencyMap"],[25,50,5,0],[26,2,6,0],[26,6,6,0,"_spanstatus"],[26,17,6,0],[26,20,6,0,"require"],[26,27,6,0],[26,28,6,0,"_dependencyMap"],[26,42,6,0],[27,2,7,0],[27,6,7,0,"_logger"],[27,13,7,0],[27,16,7,0,"require"],[27,23,7,0],[27,24,7,0,"_dependencyMap"],[27,38,7,0],[28,2,8,0],[28,6,8,0,"_object"],[28,13,8,0],[28,16,8,0,"require"],[28,23,8,0],[28,24,8,0,"_dependencyMap"],[28,38,8,0],[29,2,9,0],[29,6,9,0,"_propagationContext"],[29,25,9,0],[29,28,9,0,"require"],[29,35,9,0],[29,36,9,0,"_dependencyMap"],[29,50,9,0],[30,2,10,0],[30,6,10,0,"_time"],[30,11,10,0],[30,14,10,0,"require"],[30,21,10,0],[30,22,10,0,"_dependencyMap"],[30,36,10,0],[31,2,11,0],[31,6,11,0,"_tracing"],[31,14,11,0],[31,17,11,0,"require"],[31,24,11,0],[31,25,11,0,"_dependencyMap"],[31,39,11,0],[32,2,12,0],[32,6,12,0,"_spanOnScope"],[32,18,12,0],[32,21,12,0,"require"],[32,28,12,0],[32,29,12,0,"_dependencyMap"],[32,43,12,0],[33,2,14,0],[34,2,15,0],[34,8,15,6,"TRACE_FLAG_NONE"],[34,23,15,21],[34,26,15,21,"exports"],[34,33,15,21],[34,34,15,21,"TRACE_FLAG_NONE"],[34,49,15,21],[34,52,15,24],[34,55,15,27],[35,2,16,0],[35,8,16,6,"TRACE_FLAG_SAMPLED"],[35,26,16,24],[35,29,16,24,"exports"],[35,36,16,24],[35,37,16,24,"TRACE_FLAG_SAMPLED"],[35,55,16,24],[35,58,16,27],[35,61,16,30],[37,2,18,0],[38,2,19,0],[38,6,19,4,"hasShownSpanDropWarning"],[38,29,19,27],[38,32,19,30],[38,37,19,35],[40,2,21,0],[41,0,22,0],[42,0,23,0],[43,0,24,0],[44,0,25,0],[45,2,26,0],[45,11,26,9,"spanToTransactionTraceContext"],[45,40,26,38,"spanToTransactionTraceContext"],[45,41,26,39,"span"],[45,45,26,43],[45,47,26,45],[46,4,27,2],[46,10,27,8],[47,6,27,10,"spanId"],[47,12,27,16],[47,14,27,18,"span_id"],[47,21,27,25],[48,6,27,27,"traceId"],[48,13,27,34],[48,15,27,36,"trace_id"],[49,4,27,45],[49,5,27,46],[49,8,27,49,"span"],[49,12,27,53],[49,13,27,54,"spanContext"],[49,24,27,65],[49,25,27,66],[49,26,27,67],[50,4,28,2],[50,10,28,8],[51,6,28,10,"data"],[51,10,28,14],[52,6,28,16,"op"],[52,8,28,18],[53,6,28,20,"parent_span_id"],[53,20,28,34],[54,6,28,36,"status"],[54,12,28,42],[55,6,28,44,"origin"],[56,4,28,51],[56,5,28,52],[56,8,28,55,"spanToJSON"],[56,18,28,65],[56,19,28,66,"span"],[56,23,28,70],[56,24,28,71],[57,4,30,2],[57,11,30,9],[57,15,30,9,"dropUndefinedKeys"],[57,40,30,26],[57,42,30,27],[58,6,31,4,"parent_span_id"],[58,20,31,18],[59,6,32,4,"span_id"],[59,13,32,11],[60,6,33,4,"trace_id"],[60,14,33,12],[61,6,34,4,"data"],[61,10,34,8],[62,6,35,4,"op"],[62,8,35,6],[63,6,36,4,"status"],[63,12,36,10],[64,6,37,4,"origin"],[65,4,38,2],[65,5,38,3],[65,6,38,4],[66,2,39,0],[68,2,41,0],[69,0,42,0],[70,0,43,0],[71,2,44,0],[71,11,44,9,"spanToTraceContext"],[71,29,44,27,"spanToTraceContext"],[71,30,44,28,"span"],[71,34,44,32],[71,36,44,34],[72,4,45,2],[72,10,45,8],[73,6,45,10,"spanId"],[73,12,45,16],[74,6,45,18,"traceId"],[74,13,45,25],[74,15,45,27,"trace_id"],[74,23,45,35],[75,6,45,37,"isRemote"],[76,4,45,46],[76,5,45,47],[76,8,45,50,"span"],[76,12,45,54],[76,13,45,55,"spanContext"],[76,24,45,66],[76,25,45,67],[76,26,45,68],[78,4,47,2],[79,4,48,2],[80,4,49,2],[80,10,49,8,"parent_span_id"],[80,24,49,22],[80,27,49,25,"isRemote"],[80,35,49,33],[80,38,49,36,"spanId"],[80,44,49,42],[80,47,49,45,"spanToJSON"],[80,57,49,55],[80,58,49,56,"span"],[80,62,49,60],[80,63,49,61],[80,64,49,62,"parent_span_id"],[80,78,49,76],[81,4,50,2],[81,10,50,8,"span_id"],[81,17,50,15],[81,20,50,18,"isRemote"],[81,28,50,26],[81,31,50,29],[81,35,50,29,"generateSpanId"],[81,69,50,43],[81,71,50,44],[81,72,50,45],[81,75,50,48,"spanId"],[81,81,50,54],[82,4,52,2],[82,11,52,9],[82,15,52,9,"dropUndefinedKeys"],[82,40,52,26],[82,42,52,27],[83,6,53,4,"parent_span_id"],[83,20,53,18],[84,6,54,4,"span_id"],[84,13,54,11],[85,6,55,4,"trace_id"],[86,4,56,2],[86,5,56,3],[86,6,56,4],[87,2,57,0],[89,2,59,0],[90,0,60,0],[91,0,61,0],[92,2,62,0],[92,11,62,9,"spanToTraceHeader"],[92,28,62,26,"spanToTraceHeader"],[92,29,62,27,"span"],[92,33,62,31],[92,35,62,33],[93,4,63,2],[93,10,63,8],[94,6,63,10,"traceId"],[94,13,63,17],[95,6,63,19,"spanId"],[96,4,63,26],[96,5,63,27],[96,8,63,30,"span"],[96,12,63,34],[96,13,63,35,"spanContext"],[96,24,63,46],[96,25,63,47],[96,26,63,48],[97,4,64,2],[97,10,64,8,"sampled"],[97,17,64,15],[97,20,64,18,"spanIsSampled"],[97,33,64,31],[97,34,64,32,"span"],[97,38,64,36],[97,39,64,37],[98,4,65,2],[98,11,65,9],[98,15,65,9,"generateSentryTraceHeader"],[98,49,65,34],[98,51,65,35,"traceId"],[98,58,65,42],[98,60,65,44,"spanId"],[98,66,65,50],[98,68,65,52,"sampled"],[98,75,65,59],[98,76,65,60],[99,2,66,0],[101,2,68,0],[102,0,69,0],[103,0,70,0],[104,2,71,0],[104,11,71,9,"spanTimeInputToSeconds"],[104,33,71,31,"spanTimeInputToSeconds"],[104,34,71,32,"input"],[104,39,71,37],[104,41,71,39],[105,4,72,2],[105,8,72,6],[105,15,72,13,"input"],[105,20,72,18],[105,25,72,23],[105,33,72,31],[105,35,72,33],[106,6,73,4],[106,13,73,11,"ensureTimestampInSeconds"],[106,37,73,35],[106,38,73,36,"input"],[106,43,73,41],[106,44,73,42],[107,4,74,2],[108,4,76,2],[108,8,76,6,"Array"],[108,13,76,11],[108,14,76,12,"isArray"],[108,21,76,19],[108,22,76,20,"input"],[108,27,76,25],[108,28,76,26],[108,30,76,28],[109,6,77,4],[110,6,78,4],[110,13,78,11,"input"],[110,18,78,16],[110,19,78,17],[110,20,78,18],[110,21,78,19],[110,24,78,22,"input"],[110,29,78,27],[110,30,78,28],[110,31,78,29],[110,32,78,30],[110,35,78,33],[110,38,78,36],[111,4,79,2],[112,4,81,2],[112,8,81,6,"input"],[112,13,81,11],[112,25,81,23,"Date"],[112,29,81,27],[112,31,81,29],[113,6,82,4],[113,13,82,11,"ensureTimestampInSeconds"],[113,37,82,35],[113,38,82,36,"input"],[113,43,82,41],[113,44,82,42,"getTime"],[113,51,82,49],[113,52,82,50],[113,53,82,51],[113,54,82,52],[114,4,83,2],[115,4,85,2],[115,11,85,9],[115,15,85,9,"timestampInSeconds"],[115,39,85,27],[115,41,85,28],[115,42,85,29],[116,2,86,0],[118,2,88,0],[119,0,89,0],[120,0,90,0],[121,2,91,0],[121,11,91,9,"ensureTimestampInSeconds"],[121,35,91,33,"ensureTimestampInSeconds"],[121,36,91,34,"timestamp"],[121,45,91,43],[121,47,91,45],[122,4,92,2],[122,10,92,8,"isMs"],[122,14,92,12],[122,17,92,15,"timestamp"],[122,26,92,24],[122,29,92,27],[122,39,92,37],[123,4,93,2],[123,11,93,9,"isMs"],[123,15,93,13],[123,18,93,16,"timestamp"],[123,27,93,25],[123,30,93,28],[123,34,93,32],[123,37,93,35,"timestamp"],[123,46,93,44],[124,2,94,0],[126,2,96,0],[127,0,97,0],[128,0,98,0],[129,2,99,0],[130,2,100,0],[131,2,101,0],[132,2,102,0],[132,11,102,9,"spanToJSON"],[132,21,102,19,"spanToJSON"],[132,22,102,20,"span"],[132,26,102,24],[132,28,102,26],[133,4,103,2],[133,8,103,6,"spanIsSentrySpan"],[133,24,103,22],[133,25,103,23,"span"],[133,29,103,27],[133,30,103,28],[133,32,103,30],[134,6,104,4],[134,13,104,11,"span"],[134,17,104,15],[134,18,104,16,"getSpanJSON"],[134,29,104,27],[134,30,104,28],[134,31,104,29],[135,4,105,2],[136,4,107,2],[136,8,107,6],[137,6,108,4],[137,12,108,10],[138,8,108,12,"spanId"],[138,14,108,18],[138,16,108,20,"span_id"],[138,23,108,27],[139,8,108,29,"traceId"],[139,15,108,36],[139,17,108,38,"trace_id"],[140,6,108,47],[140,7,108,48],[140,10,108,51,"span"],[140,14,108,55],[140,15,108,56,"spanContext"],[140,26,108,67],[140,27,108,68],[140,28,108,69],[142,6,110,4],[143,6,111,4],[143,10,111,8,"spanIsOpenTelemetrySdkTraceBaseSpan"],[143,45,111,43],[143,46,111,44,"span"],[143,50,111,48],[143,51,111,49],[143,53,111,51],[144,8,112,6],[144,14,112,12],[145,10,112,14,"attributes"],[145,20,112,24],[146,10,112,26,"startTime"],[146,19,112,35],[147,10,112,37,"name"],[147,14,112,41],[148,10,112,43,"endTime"],[148,17,112,50],[149,10,112,52,"parentSpanId"],[149,22,112,64],[150,10,112,66,"status"],[151,8,112,73],[151,9,112,74],[151,12,112,77,"span"],[151,16,112,81],[152,8,114,6],[152,15,114,13],[152,19,114,13,"dropUndefinedKeys"],[152,44,114,30],[152,46,114,31],[153,10,115,8,"span_id"],[153,17,115,15],[154,10,116,8,"trace_id"],[154,18,116,16],[155,10,117,8,"data"],[155,14,117,12],[155,16,117,14,"attributes"],[155,26,117,24],[156,10,118,8,"description"],[156,21,118,19],[156,23,118,21,"name"],[156,27,118,25],[157,10,119,8,"parent_span_id"],[157,24,119,22],[157,26,119,24,"parentSpanId"],[157,38,119,36],[158,10,120,8,"start_timestamp"],[158,25,120,23],[158,27,120,25,"spanTimeInputToSeconds"],[158,49,120,47],[158,50,120,48,"startTime"],[158,59,120,57],[158,60,120,58],[159,10,121,8],[160,10,122,8,"timestamp"],[160,19,122,17],[160,21,122,19,"spanTimeInputToSeconds"],[160,43,122,41],[160,44,122,42,"endTime"],[160,51,122,49],[160,52,122,50],[160,56,122,54,"undefined"],[160,65,122,63],[161,10,123,8,"status"],[161,16,123,14],[161,18,123,16,"getStatusMessage"],[161,34,123,32],[161,35,123,33,"status"],[161,41,123,39],[161,42,123,40],[162,10,124,8,"op"],[162,12,124,10],[162,14,124,12,"attributes"],[162,24,124,22],[162,25,124,23,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[162,73,124,51],[162,74,124,52],[163,10,125,8,"origin"],[163,16,125,14],[163,18,125,16,"attributes"],[163,28,125,26],[163,29,125,27,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[163,81,125,59],[163,82,125,60],[164,10,126,8,"_metrics_summary"],[164,26,126,24],[164,28,126,26],[164,32,126,26,"getMetricSummaryJsonForSpan"],[164,74,126,53],[164,76,126,54,"span"],[164,80,126,58],[165,8,127,6],[165,9,127,7],[165,10,127,8],[166,6,128,4],[168,6,130,4],[169,6,131,4],[169,13,131,11],[170,8,132,6,"span_id"],[170,15,132,13],[171,8,133,6,"trace_id"],[172,6,134,4],[172,7,134,5],[173,4,135,2],[173,5,135,3],[173,6,135,4],[173,13,135,11,"e"],[173,14,135,12],[173,16,135,14],[174,6,136,4],[174,13,136,11],[174,14,136,12],[174,15,136,13],[175,4,137,2],[176,2,138,0],[177,2,140,0],[177,11,140,9,"spanIsOpenTelemetrySdkTraceBaseSpan"],[177,46,140,44,"spanIsOpenTelemetrySdkTraceBaseSpan"],[177,47,140,45,"span"],[177,51,140,49],[177,53,140,51],[178,4,141,2],[178,10,141,8,"castSpan"],[178,18,141,16],[178,21,141,19,"span"],[178,25,141,23],[179,4,142,2],[179,11,142,9],[179,12,142,10],[179,13,142,11,"castSpan"],[179,21,142,19],[179,22,142,20,"attributes"],[179,32,142,30],[179,36,142,34],[179,37,142,35],[179,38,142,36,"castSpan"],[179,46,142,44],[179,47,142,45,"startTime"],[179,56,142,54],[179,60,142,58],[179,61,142,59],[179,62,142,60,"castSpan"],[179,70,142,68],[179,71,142,69,"name"],[179,75,142,73],[179,79,142,77],[179,80,142,78],[179,81,142,79,"castSpan"],[179,89,142,87],[179,90,142,88,"endTime"],[179,97,142,95],[179,101,142,99],[179,102,142,100],[179,103,142,101,"castSpan"],[179,111,142,109],[179,112,142,110,"status"],[179,118,142,116],[180,2,143,0],[182,2,145,0],[184,2,147,0],[185,0,148,0],[186,0,149,0],[187,0,150,0],[188,2,151,0],[188,11,151,9,"spanIsSentrySpan"],[188,27,151,25,"spanIsSentrySpan"],[188,28,151,26,"span"],[188,32,151,30],[188,34,151,32],[189,4,152,2],[189,11,152,9],[189,18,152,17,"span"],[189,22,152,21],[189,23,152,24,"getSpanJSON"],[189,34,152,35],[189,39,152,40],[189,49,152,50],[190,2,153,0],[192,2,155,0],[193,0,156,0],[194,0,157,0],[195,0,158,0],[196,0,159,0],[197,0,160,0],[198,2,161,0],[198,11,161,9,"spanIsSampled"],[198,24,161,22,"spanIsSampled"],[198,25,161,23,"span"],[198,29,161,27],[198,31,161,29],[199,4,162,2],[200,4,163,2],[201,4,164,2],[201,10,164,8],[202,6,164,10,"traceFlags"],[203,4,164,21],[203,5,164,22],[203,8,164,25,"span"],[203,12,164,29],[203,13,164,30,"spanContext"],[203,24,164,41],[203,25,164,42],[203,26,164,43],[204,4,165,2],[204,11,165,9,"traceFlags"],[204,21,165,19],[204,26,165,24,"TRACE_FLAG_SAMPLED"],[204,44,165,42],[205,2,166,0],[207,2,168,0],[208,2,169,0],[208,11,169,9,"getStatusMessage"],[208,27,169,25,"getStatusMessage"],[208,28,169,26,"status"],[208,34,169,32],[208,36,169,34],[209,4,170,2],[209,8,170,6],[209,9,170,7,"status"],[209,15,170,13],[209,19,170,17,"status"],[209,25,170,23],[209,26,170,24,"code"],[209,30,170,28],[209,35,170,33,"SPAN_STATUS_UNSET"],[209,64,170,50],[209,66,170,52],[210,6,171,4],[210,13,171,11,"undefined"],[210,22,171,20],[211,4,172,2],[212,4,174,2],[212,8,174,6,"status"],[212,14,174,12],[212,15,174,13,"code"],[212,19,174,17],[212,24,174,22,"SPAN_STATUS_OK"],[212,50,174,36],[212,52,174,38],[213,6,175,4],[213,13,175,11],[213,17,175,15],[214,4,176,2],[215,4,178,2],[215,11,178,9,"status"],[215,17,178,15],[215,18,178,16,"message"],[215,25,178,23],[215,29,178,27],[215,44,178,42],[216,2,179,0],[217,2,181,0],[217,8,181,6,"CHILD_SPANS_FIELD"],[217,25,181,23],[217,28,181,26],[217,47,181,45],[218,2,182,0],[218,8,182,6,"ROOT_SPAN_FIELD"],[218,23,182,21],[218,26,182,24],[218,43,182,41],[220,2,184,0],[221,0,185,0],[222,0,186,0],[223,2,187,0],[223,11,187,9,"addChildSpanToSpan"],[223,29,187,27,"addChildSpanToSpan"],[223,30,187,28,"span"],[223,34,187,32],[223,36,187,34,"childSpan"],[223,45,187,43],[223,47,187,45],[224,4,188,2],[225,4,189,2],[226,4,190,2],[226,10,190,8,"rootSpan"],[226,18,190,16],[226,21,190,19,"span"],[226,25,190,23],[226,26,190,24,"ROOT_SPAN_FIELD"],[226,41,190,39],[226,42,190,40],[226,46,190,44,"span"],[226,50,190,48],[227,4,191,2],[227,8,191,2,"addNonEnumerableProperty"],[227,40,191,26],[227,42,191,27,"childSpan"],[227,51,191,36],[227,53,191,39,"ROOT_SPAN_FIELD"],[227,68,191,54],[227,70,191,56,"rootSpan"],[227,78,191,64],[227,79,191,65],[229,4,193,2],[230,4,194,2],[231,4,195,2],[231,8,195,6,"span"],[231,12,195,10],[231,13,195,11,"CHILD_SPANS_FIELD"],[231,30,195,28],[231,31,195,29],[231,33,195,31],[232,6,196,4,"span"],[232,10,196,8],[232,11,196,9,"CHILD_SPANS_FIELD"],[232,28,196,26],[232,29,196,27],[232,30,196,28,"add"],[232,33,196,31],[232,34,196,32,"childSpan"],[232,43,196,41],[232,44,196,42],[233,4,197,2],[233,5,197,3],[233,11,197,9],[234,6,198,4],[234,10,198,4,"addNonEnumerableProperty"],[234,42,198,28],[234,44,198,29,"span"],[234,48,198,33],[234,50,198,35,"CHILD_SPANS_FIELD"],[234,67,198,52],[234,69,198,54],[234,73,198,58,"Set"],[234,76,198,61],[234,77,198,62],[234,78,198,63,"childSpan"],[234,87,198,72],[234,88,198,73],[234,89,198,74],[234,90,198,75],[235,4,199,2],[236,2,200,0],[238,2,202,0],[239,2,203,0],[239,11,203,9,"removeChildSpanFromSpan"],[239,34,203,32,"removeChildSpanFromSpan"],[239,35,203,33,"span"],[239,39,203,37],[239,41,203,39,"childSpan"],[239,50,203,48],[239,52,203,50],[240,4,204,2],[240,8,204,6,"span"],[240,12,204,10],[240,13,204,11,"CHILD_SPANS_FIELD"],[240,30,204,28],[240,31,204,29],[240,33,204,31],[241,6,205,4,"span"],[241,10,205,8],[241,11,205,9,"CHILD_SPANS_FIELD"],[241,28,205,26],[241,29,205,27],[241,30,205,28,"delete"],[241,36,205,34],[241,37,205,35,"childSpan"],[241,46,205,44],[241,47,205,45],[242,4,206,2],[243,2,207,0],[245,2,209,0],[246,0,210,0],[247,0,211,0],[248,2,212,0],[248,11,212,9,"getSpanDescendants"],[248,29,212,27,"getSpanDescendants"],[248,30,212,28,"span"],[248,34,212,32],[248,36,212,34],[249,4,213,2],[249,10,213,8,"resultSet"],[249,19,213,17],[249,22,213,20],[249,26,213,24,"Set"],[249,29,213,27],[249,30,213,28],[249,31,213,29],[250,4,215,2],[250,13,215,11,"addSpanChildren"],[250,28,215,26,"addSpanChildren"],[250,29,215,27,"span"],[250,33,215,31],[250,35,215,33],[251,6,216,4],[252,6,217,4],[252,10,217,8,"resultSet"],[252,19,217,17],[252,20,217,18,"has"],[252,23,217,21],[252,24,217,22,"span"],[252,28,217,26],[252,29,217,27],[252,31,217,29],[253,8,218,6],[254,8,219,6],[255,6,220,4],[255,7,220,5],[255,13,220,11],[255,17,220,15,"spanIsSampled"],[255,30,220,28],[255,31,220,29,"span"],[255,35,220,33],[255,36,220,34],[255,38,220,36],[256,8,221,6,"resultSet"],[256,17,221,15],[256,18,221,16,"add"],[256,21,221,19],[256,22,221,20,"span"],[256,26,221,24],[256,27,221,25],[257,8,222,6],[257,14,222,12,"childSpans"],[257,24,222,22],[257,27,222,25,"span"],[257,31,222,29],[257,32,222,30,"CHILD_SPANS_FIELD"],[257,49,222,47],[257,50,222,48],[257,53,222,51,"Array"],[257,58,222,56],[257,59,222,57,"from"],[257,63,222,61],[257,64,222,62,"span"],[257,68,222,66],[257,69,222,67,"CHILD_SPANS_FIELD"],[257,86,222,84],[257,87,222,85],[257,88,222,86],[257,91,222,89],[257,93,222,91],[258,8,223,6],[258,13,223,11],[258,19,223,17,"childSpan"],[258,28,223,26],[258,32,223,30,"childSpans"],[258,42,223,40],[258,44,223,42],[259,10,224,8,"addSpanChildren"],[259,25,224,23],[259,26,224,24,"childSpan"],[259,35,224,33],[259,36,224,34],[260,8,225,6],[261,6,226,4],[262,4,227,2],[263,4,229,2,"addSpanChildren"],[263,19,229,17],[263,20,229,18,"span"],[263,24,229,22],[263,25,229,23],[264,4,231,2],[264,11,231,9,"Array"],[264,16,231,14],[264,17,231,15,"from"],[264,21,231,19],[264,22,231,20,"resultSet"],[264,31,231,29],[264,32,231,30],[265,2,232,0],[267,2,234,0],[268,0,235,0],[269,0,236,0],[270,2,237,0],[270,11,237,9,"getRootSpan"],[270,22,237,20,"getRootSpan"],[270,23,237,21,"span"],[270,27,237,25],[270,29,237,27],[271,4,238,2],[271,11,238,9,"span"],[271,15,238,13],[271,16,238,14,"ROOT_SPAN_FIELD"],[271,31,238,29],[271,32,238,30],[271,36,238,34,"span"],[271,40,238,38],[272,2,239,0],[274,2,241,0],[275,0,242,0],[276,0,243,0],[277,2,244,0],[277,11,244,9,"getActiveSpan"],[277,24,244,22,"getActiveSpan"],[277,25,244,22],[277,27,244,25],[278,4,245,2],[278,10,245,8,"carrier"],[278,17,245,15],[278,20,245,18],[278,24,245,18,"getMainCarrier"],[278,47,245,32],[278,49,245,33],[278,50,245,34],[279,4,246,2],[279,10,246,8,"acs"],[279,13,246,11],[279,16,246,14],[279,20,246,14,"getAsyncContextStrategy"],[279,50,246,37],[279,52,246,38,"carrier"],[279,59,246,45],[279,60,246,46],[280,4,247,2],[280,8,247,6,"acs"],[280,11,247,9],[280,12,247,10,"getActiveSpan"],[280,25,247,23],[280,27,247,25],[281,6,248,4],[281,13,248,11,"acs"],[281,16,248,14],[281,17,248,15,"getActiveSpan"],[281,30,248,28],[281,31,248,29],[281,32,248,30],[282,4,249,2],[283,4,251,2],[283,11,251,9],[283,15,251,9,"_getSpanForScope"],[283,44,251,25],[283,46,251,26],[283,50,251,26,"getCurrentScope"],[283,80,251,41],[283,82,251,42],[283,83,251,43],[283,84,251,44],[284,2,252,0],[286,2,254,0],[287,0,255,0],[288,0,256,0],[289,2,257,0],[289,11,257,9,"updateMetricSummaryOnActiveSpan"],[289,42,257,40,"updateMetricSummaryOnActiveSpan"],[289,43,258,2,"metricType"],[289,53,258,12],[289,55,259,2,"sanitizedName"],[289,68,259,15],[289,70,260,2,"value"],[289,75,260,7],[289,77,261,2,"unit"],[289,81,261,6],[289,83,262,2,"tags"],[289,87,262,6],[289,89,263,2,"bucketKey"],[289,98,263,11],[289,100,264,2],[290,4,265,2],[290,10,265,8,"span"],[290,14,265,12],[290,17,265,15,"getActiveSpan"],[290,30,265,28],[290,31,265,29],[290,32,265,30],[291,4,266,2],[291,8,266,6,"span"],[291,12,266,10],[291,14,266,12],[292,6,267,4],[292,10,267,4,"updateMetricSummaryOnSpan"],[292,50,267,29],[292,52,267,30,"span"],[292,56,267,34],[292,58,267,36,"metricType"],[292,68,267,46],[292,70,267,48,"sanitizedName"],[292,83,267,61],[292,85,267,63,"value"],[292,90,267,68],[292,92,267,70,"unit"],[292,96,267,74],[292,98,267,76,"tags"],[292,102,267,80],[292,104,267,82,"bucketKey"],[292,113,267,91],[292,114,267,92],[293,4,268,2],[294,2,269,0],[296,2,271,0],[297,0,272,0],[298,0,273,0],[299,0,274,0],[300,0,275,0],[301,2,276,0],[301,11,276,9,"showSpanDropWarning"],[301,30,276,28,"showSpanDropWarning"],[301,31,276,28],[301,33,276,31],[302,4,277,2],[302,8,277,6],[302,9,277,7,"hasShownSpanDropWarning"],[302,32,277,30],[302,34,277,32],[303,6,278,4],[303,10,278,4,"consoleSandbox"],[303,32,278,18],[303,34,278,19],[303,40,278,25],[304,8,279,6],[305,8,280,6,"console"],[305,15,280,13],[305,16,280,14,"warn"],[305,20,280,18],[305,21,281,8],[305,258,282,6],[305,259,282,7],[306,6,283,4],[306,7,283,5],[306,8,283,6],[307,6,284,4,"hasShownSpanDropWarning"],[307,29,284,27],[307,32,284,30],[307,36,284,34],[308,4,285,2],[309,2,286,0],[311,2,288,0],[312,0,289,0],[313,0,290,0],[314,0,291,0],[315,0,292,0],[316,0,293,0],[317,0,294,0],[318,0,295,0],[319,0,296,0],[320,0,297,0],[321,0,298,0],[322,0,299,0],[323,0,300,0],[324,0,301,0],[325,0,302,0],[326,0,303,0],[327,2,304,0],[327,11,304,9,"updateSpanName"],[327,25,304,23,"updateSpanName"],[327,26,304,24,"span"],[327,30,304,28],[327,32,304,30,"name"],[327,36,304,34],[327,38,304,36],[328,4,305,2,"span"],[328,8,305,6],[328,9,305,7,"updateName"],[328,19,305,17],[328,20,305,18,"name"],[328,24,305,22],[328,25,305,23],[329,4,306,2,"span"],[329,8,306,6],[329,9,306,7,"setAttributes"],[329,22,306,20],[329,23,306,21],[330,6,307,4],[330,7,307,5,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[330,59,307,37],[330,62,307,40],[330,70,307,48],[331,6,308,4],[331,7,308,5,"SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME"],[331,69,308,47],[331,72,308,50,"name"],[332,4,309,2],[332,5,309,3],[332,6,309,4],[333,2,310,0],[334,0,310,1],[334,3]],"functionMap":{"names":["<global>","spanToTransactionTraceContext","spanToTraceContext","spanToTraceHeader","spanTimeInputToSeconds","ensureTimestampInSeconds","spanToJSON","spanIsOpenTelemetrySdkTraceBaseSpan","spanIsSentrySpan","spanIsSampled","getStatusMessage","addChildSpanToSpan","removeChildSpanFromSpan","getSpanDescendants","addSpanChildren","getRootSpan","getActiveSpan","updateMetricSummaryOnActiveSpan","showSpanDropWarning","consoleSandbox$argument_0","updateSpanName"],"mappings":"AAA;ACyB;CDa;AEK;CFa;AGK;CHI;AIK;CJe;AKK;CLG;AMQ;CNoC;AOE;CPG;AQQ;CRE;ASQ;CTK;AUG;CVU;AWQ;CXa;AYG;CZI;AaK;ECG;GDY;CbK;AeK;CfE;AgBK;ChBQ;AiBK;CjBY;AkBO;mBCE;KDK;ClBG;AoBkB;CpBM"}},"type":"js/module"}]}