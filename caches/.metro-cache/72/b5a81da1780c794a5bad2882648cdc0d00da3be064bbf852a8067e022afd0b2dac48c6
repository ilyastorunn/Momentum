{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":185,"index":185}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.WINDOW = void 0;\n  exports.ignoreNextOnError = ignoreNextOnError;\n  exports.shouldIgnoreOnError = shouldIgnoreOnError;\n  exports.wrap = wrap;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  const WINDOW = exports.WINDOW = _core.GLOBAL_OBJ;\n  let ignoreOnError = 0;\n\n  /**\n   * @hidden\n   */\n  function shouldIgnoreOnError() {\n    return ignoreOnError > 0;\n  }\n\n  /**\n   * @hidden\n   */\n  function ignoreNextOnError() {\n    // onerror should trigger before setTimeout\n    ignoreOnError++;\n    setTimeout(() => {\n      ignoreOnError--;\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Instruments the given function and sends an event to Sentry every time the\n   * function throws an exception.\n   *\n   * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n   * has a correct `this` context.\n   * @returns The wrapped function.\n   * @hidden\n   */\n  function wrap(fn, options = {}) {\n    // for future readers what this does is wrap a function and then create\n    // a bi-directional wrapping between them.\n    //\n    // example: wrapped = wrap(original);\n    //  original.__sentry_wrapped__ -> wrapped\n    //  wrapped.__sentry_original__ -> original\n\n    function isFunction(fn) {\n      return typeof fn === 'function';\n    }\n    if (!isFunction(fn)) {\n      return fn;\n    }\n    try {\n      // if we're dealing with a function that was previously wrapped, return\n      // the original wrapper.\n      const wrapper = fn.__sentry_wrapped__;\n      if (wrapper) {\n        if (typeof wrapper === 'function') {\n          return wrapper;\n        } else {\n          // If we find that the `__sentry_wrapped__` function is not a function at the time of accessing it, it means\n          // that something messed with it. In that case we want to return the originally passed function.\n          return fn;\n        }\n      }\n\n      // We don't wanna wrap it twice\n      if ((0, _core.getOriginalFunction)(fn)) {\n        return fn;\n      }\n    } catch (e) {\n      // Just accessing custom props in some Selenium environments\n      // can cause a \"Permission denied\" exception (see raven-js#495).\n      // Bail on wrapping and return the function as-is (defers to window.onerror).\n      return fn;\n    }\n\n    // Wrap the function itself\n    // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n    const sentryWrapped = function (...args) {\n      try {\n        // Also wrap arguments that are themselves functions\n        const wrappedArguments = args.map(arg => wrap(arg, options));\n\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        return fn.apply(this, wrappedArguments);\n      } catch (ex) {\n        ignoreNextOnError();\n        (0, _core.withScope)(scope => {\n          scope.addEventProcessor(event => {\n            if (options.mechanism) {\n              (0, _core.addExceptionTypeValue)(event, undefined, undefined);\n              (0, _core.addExceptionMechanism)(event, options.mechanism);\n            }\n            event.extra = {\n              ...event.extra,\n              arguments: args\n            };\n            return event;\n          });\n          (0, _core.captureException)(ex);\n        });\n        throw ex;\n      }\n    };\n\n    // Wrap the wrapped function in a proxy, to ensure any other properties of the original function remain available\n    try {\n      for (const property in fn) {\n        if (Object.prototype.hasOwnProperty.call(fn, property)) {\n          sentryWrapped[property] = fn[property];\n        }\n      }\n    } catch (e2) {\n      // Accessing some objects may throw\n      // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n    }\n\n    // Signal that this function has been wrapped/filled already\n    // for both debugging and to prevent it to being wrapped/filled twice\n    (0, _core.markFunctionWrapped)(sentryWrapped, fn);\n    (0, _core.addNonEnumerableProperty)(fn, '__sentry_wrapped__', sentryWrapped);\n\n    // Restore original function name (not all browsers allow that)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n      if (descriptor.configurable) {\n        Object.defineProperty(sentryWrapped, 'name', {\n          get() {\n            return fn.name;\n          }\n        });\n      }\n    } catch (e3) {\n      // This may throw if e.g. the descriptor does not exist, or a browser does not allow redefining `name`.\n      // to save some bytes we simply try-catch this\n    }\n    return sentryWrapped;\n  }\n});","lineCount":147,"map":[[9,2,1,0],[9,6,1,0,"_core"],[9,11,1,0],[9,14,1,0,"require"],[9,21,1,0],[9,22,1,0,"_dependencyMap"],[9,36,1,0],[10,2,3,0],[10,8,3,6,"WINDOW"],[10,14,3,12],[10,17,3,12,"exports"],[10,24,3,12],[10,25,3,12,"WINDOW"],[10,31,3,12],[10,34,3,15,"GLOBAL_OBJ"],[10,50,3,25],[11,2,5,0],[11,6,5,4,"ignoreOnError"],[11,19,5,17],[11,22,5,20],[11,23,5,21],[13,2,7,0],[14,0,8,0],[15,0,9,0],[16,2,10,0],[16,11,10,9,"shouldIgnoreOnError"],[16,30,10,28,"shouldIgnoreOnError"],[16,31,10,28],[16,33,10,31],[17,4,11,2],[17,11,11,9,"ignoreOnError"],[17,24,11,22],[17,27,11,25],[17,28,11,26],[18,2,12,0],[20,2,14,0],[21,0,15,0],[22,0,16,0],[23,2,17,0],[23,11,17,9,"ignoreNextOnError"],[23,28,17,26,"ignoreNextOnError"],[23,29,17,26],[23,31,17,29],[24,4,18,2],[25,4,19,2,"ignoreOnError"],[25,17,19,15],[25,19,19,17],[26,4,20,2,"setTimeout"],[26,14,20,12],[26,15,20,13],[26,21,20,19],[27,6,21,4,"ignoreOnError"],[27,19,21,17],[27,21,21,19],[28,4,22,2],[28,5,22,3],[28,6,22,4],[29,2,23,0],[31,2,25,0],[33,2,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,2,36,0],[42,11,36,9,"wrap"],[42,15,36,13,"wrap"],[42,16,37,2,"fn"],[42,18,37,4],[42,20,38,2,"options"],[42,27,38,9],[42,30,40,3],[42,31,40,4],[42,32,40,5],[42,34,41,2],[43,4,42,2],[44,4,43,2],[45,4,44,2],[46,4,45,2],[47,4,46,2],[48,4,47,2],[50,4,49,2],[50,13,49,11,"isFunction"],[50,23,49,21,"isFunction"],[50,24,49,22,"fn"],[50,26,49,24],[50,28,49,26],[51,6,50,4],[51,13,50,11],[51,20,50,18,"fn"],[51,22,50,20],[51,27,50,25],[51,37,50,35],[52,4,51,2],[53,4,53,2],[53,8,53,6],[53,9,53,7,"isFunction"],[53,19,53,17],[53,20,53,18,"fn"],[53,22,53,20],[53,23,53,21],[53,25,53,23],[54,6,54,4],[54,13,54,11,"fn"],[54,15,54,13],[55,4,55,2],[56,4,57,2],[56,8,57,6],[57,6,58,4],[58,6,59,4],[59,6,60,4],[59,12,60,10,"wrapper"],[59,19,60,17],[59,22,60,21,"fn"],[59,24,60,23],[59,25,60,26,"__sentry_wrapped__"],[59,43,60,44],[60,6,61,4],[60,10,61,8,"wrapper"],[60,17,61,15],[60,19,61,17],[61,8,62,6],[61,12,62,10],[61,19,62,17,"wrapper"],[61,26,62,24],[61,31,62,29],[61,41,62,39],[61,43,62,41],[62,10,63,8],[62,17,63,15,"wrapper"],[62,24,63,22],[63,8,64,6],[63,9,64,7],[63,15,64,13],[64,10,65,8],[65,10,66,8],[66,10,67,8],[66,17,67,15,"fn"],[66,19,67,17],[67,8,68,6],[68,6,69,4],[70,6,71,4],[71,6,72,4],[71,10,72,8],[71,14,72,8,"getOriginalFunction"],[71,39,72,27],[71,41,72,28,"fn"],[71,43,72,30],[71,44,72,31],[71,46,72,33],[72,8,73,6],[72,15,73,13,"fn"],[72,17,73,15],[73,6,74,4],[74,4,75,2],[74,5,75,3],[74,6,75,4],[74,13,75,11,"e"],[74,14,75,12],[74,16,75,14],[75,6,76,4],[76,6,77,4],[77,6,78,4],[78,6,79,4],[78,13,79,11,"fn"],[78,15,79,13],[79,4,80,2],[81,4,82,2],[82,4,83,2],[83,4,84,2],[83,10,84,8,"sentryWrapped"],[83,23,84,21],[83,26,84,24],[83,35,84,24,"sentryWrapped"],[83,36,84,35],[83,39,84,38,"args"],[83,43,84,42],[83,45,84,44],[84,6,85,4],[84,10,85,8],[85,8,86,6],[86,8,87,6],[86,14,87,12,"wrappedArguments"],[86,30,87,28],[86,33,87,31,"args"],[86,37,87,35],[86,38,87,36,"map"],[86,41,87,39],[86,42,87,40,"arg"],[86,45,87,43],[86,49,87,47,"wrap"],[86,53,87,51],[86,54,87,52,"arg"],[86,57,87,55],[86,59,87,57,"options"],[86,66,87,64],[86,67,87,65],[86,68,87,66],[88,8,89,6],[89,8,90,6],[90,8,91,6],[91,8,92,6],[92,8,93,6],[92,15,93,13,"fn"],[92,17,93,15],[92,18,93,16,"apply"],[92,23,93,21],[92,24,93,22],[92,28,93,26],[92,30,93,28,"wrappedArguments"],[92,46,93,44],[92,47,93,45],[93,6,94,4],[93,7,94,5],[93,8,94,6],[93,15,94,13,"ex"],[93,17,94,15],[93,19,94,17],[94,8,95,6,"ignoreNextOnError"],[94,25,95,23],[94,26,95,24],[94,27,95,25],[95,8,97,6],[95,12,97,6,"withScope"],[95,27,97,15],[95,29,97,16,"scope"],[95,34,97,21],[95,38,97,25],[96,10,98,8,"scope"],[96,15,98,13],[96,16,98,14,"addEventProcessor"],[96,33,98,31],[96,34,98,32,"event"],[96,39,98,37],[96,43,98,41],[97,12,99,10],[97,16,99,14,"options"],[97,23,99,21],[97,24,99,22,"mechanism"],[97,33,99,31],[97,35,99,33],[98,14,100,12],[98,18,100,12,"addExceptionTypeValue"],[98,45,100,33],[98,47,100,34,"event"],[98,52,100,39],[98,54,100,41,"undefined"],[98,63,100,50],[98,65,100,52,"undefined"],[98,74,100,61],[98,75,100,62],[99,14,101,12],[99,18,101,12,"addExceptionMechanism"],[99,45,101,33],[99,47,101,34,"event"],[99,52,101,39],[99,54,101,41,"options"],[99,61,101,48],[99,62,101,49,"mechanism"],[99,71,101,58],[99,72,101,59],[100,12,102,10],[101,12,104,10,"event"],[101,17,104,15],[101,18,104,16,"extra"],[101,23,104,21],[101,26,104,24],[102,14,105,12],[102,17,105,15,"event"],[102,22,105,20],[102,23,105,21,"extra"],[102,28,105,26],[103,14,106,12,"arguments"],[103,23,106,21],[103,25,106,23,"args"],[104,12,107,10],[104,13,107,11],[105,12,109,10],[105,19,109,17,"event"],[105,24,109,22],[106,10,110,8],[106,11,110,9],[106,12,110,10],[107,10,112,8],[107,14,112,8,"captureException"],[107,36,112,24],[107,38,112,25,"ex"],[107,40,112,27],[107,41,112,28],[108,8,113,6],[108,9,113,7],[108,10,113,8],[109,8,115,6],[109,14,115,12,"ex"],[109,16,115,14],[110,6,116,4],[111,4,117,2],[111,5,117,3],[113,4,119,2],[114,4,120,2],[114,8,120,6],[115,6,121,4],[115,11,121,9],[115,17,121,15,"property"],[115,25,121,23],[115,29,121,27,"fn"],[115,31,121,29],[115,33,121,31],[116,8,122,6],[116,12,122,10,"Object"],[116,18,122,16],[116,19,122,17,"prototype"],[116,28,122,26],[116,29,122,27,"hasOwnProperty"],[116,43,122,41],[116,44,122,42,"call"],[116,48,122,46],[116,49,122,47,"fn"],[116,51,122,49],[116,53,122,51,"property"],[116,61,122,59],[116,62,122,60],[116,64,122,62],[117,10,123,8,"sentryWrapped"],[117,23,123,21],[117,24,123,22,"property"],[117,32,123,30],[117,33,123,32],[117,36,123,35,"fn"],[117,38,123,37],[117,39,123,38,"property"],[117,47,123,46],[117,48,123,48],[118,8,124,6],[119,6,125,4],[120,4,126,2],[120,5,126,3],[120,6,126,4],[120,13,126,11,"e2"],[120,15,126,13],[120,17,126,15],[121,6,127,4],[122,6,128,4],[123,4,128,4],[125,4,131,2],[126,4,132,2],[127,4,133,2],[127,8,133,2,"markFunctionWrapped"],[127,33,133,21],[127,35,133,22,"sentryWrapped"],[127,48,133,35],[127,50,133,37,"fn"],[127,52,133,39],[127,53,133,40],[128,4,135,2],[128,8,135,2,"addNonEnumerableProperty"],[128,38,135,26],[128,40,135,27,"fn"],[128,42,135,29],[128,44,135,31],[128,64,135,51],[128,66,135,53,"sentryWrapped"],[128,79,135,66],[128,80,135,67],[130,4,137,2],[131,4,138,2],[131,8,138,6],[132,6,139,4],[133,6,140,4],[133,12,140,10,"descriptor"],[133,22,140,20],[133,25,140,23,"Object"],[133,31,140,29],[133,32,140,30,"getOwnPropertyDescriptor"],[133,56,140,54],[133,57,140,55,"sentryWrapped"],[133,70,140,68],[133,72,140,70],[133,78,140,76],[133,79,140,77],[134,6,141,4],[134,10,141,8,"descriptor"],[134,20,141,18],[134,21,141,19,"configurable"],[134,33,141,31],[134,35,141,33],[135,8,142,6,"Object"],[135,14,142,12],[135,15,142,13,"defineProperty"],[135,29,142,27],[135,30,142,28,"sentryWrapped"],[135,43,142,41],[135,45,142,43],[135,51,142,49],[135,53,142,51],[136,10,143,8,"get"],[136,13,143,11,"get"],[136,14,143,11],[136,16,143,14],[137,12,144,10],[137,19,144,17,"fn"],[137,21,144,19],[137,22,144,20,"name"],[137,26,144,24],[138,10,145,8],[139,8,146,6],[139,9,146,7],[139,10,146,8],[140,6,147,4],[141,4,148,2],[141,5,148,3],[141,6,148,4],[141,13,148,11,"e3"],[141,15,148,13],[141,17,148,15],[142,6,149,4],[143,6,150,4],[144,4,150,4],[145,4,153,2],[145,11,153,9,"sentryWrapped"],[145,24,153,22],[146,2,154,0],[147,0,154,1],[147,3]],"functionMap":{"names":["<global>","shouldIgnoreOnError","ignoreNextOnError","setTimeout$argument_0","wrap","isFunction","sentryWrapped","args.map$argument_0","withScope$argument_0","scope.addEventProcessor$argument_0","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACS;CDE;AEK;aCG;GDE;CFC;AIa;ECa;GDE;wBEiC;wCCG,yBD;gBEU;gCCC;SDY;OFG;GFI;QM0B;SNE;CJS"}},"type":"js/module"}]}