{"dependencies":[{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":48,"index":105}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":106},"end":{"line":3,"column":50,"index":156}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils/hasTracingEnabled.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":157},"end":{"line":4,"column":66,"index":223}}],"key":"SyK4SleOU+9x9l8aHJ9lO4+iDQU=","exportNames":["*"]}},{"name":"../utils/parseSampleRate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":224},"end":{"line":5,"column":62,"index":286}}],"key":"fuSKwon9rTlXsG7MamYKWdW+40U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.sampleSpan = sampleSpan;\n  var _currentScopes = require(_dependencyMap[0], \"../currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  var _logger = require(_dependencyMap[2], \"../utils-hoist/logger.js\");\n  var _hasTracingEnabled = require(_dependencyMap[3], \"../utils/hasTracingEnabled.js\");\n  var _parseSampleRate = require(_dependencyMap[4], \"../utils/parseSampleRate.js\");\n  /**\n   * Makes a sampling decision for the given options.\n   *\n   * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n   * sent to Sentry.\n   */\n  function sampleSpan(options, samplingContext) {\n    // nothing to do if tracing is not enabled\n    if (!(0, _hasTracingEnabled.hasTracingEnabled)(options)) {\n      return [false];\n    }\n\n    // Casting this from unknown, as the type of `sdkProcessingMetadata` is only changed in v9 and `normalizedRequest` is set in SentryHttpInstrumentation\n    const normalizedRequest = (0, _currentScopes.getIsolationScope)().getScopeData().sdkProcessingMetadata.normalizedRequest;\n    const enhancedSamplingContext = {\n      ...samplingContext,\n      normalizedRequest: samplingContext.normalizedRequest || normalizedRequest\n    };\n\n    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n    // work; prefer the hook if so\n    let sampleRate;\n    if (typeof options.tracesSampler === 'function') {\n      sampleRate = options.tracesSampler(enhancedSamplingContext);\n    } else if (enhancedSamplingContext.parentSampled !== undefined) {\n      sampleRate = enhancedSamplingContext.parentSampled;\n    } else if (typeof options.tracesSampleRate !== 'undefined') {\n      sampleRate = options.tracesSampleRate;\n    } else {\n      // When `enableTracing === true`, we use a sample rate of 100%\n      sampleRate = 1;\n    }\n\n    // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n    // (The only valid values are booleans or numbers between 0 and 1.)\n    const parsedSampleRate = (0, _parseSampleRate.parseSampleRate)(sampleRate);\n    if (parsedSampleRate === undefined) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n      return [false];\n    }\n\n    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n    if (!parsedSampleRate) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);\n      return [false, parsedSampleRate];\n    }\n\n    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n    const shouldSample = Math.random() < parsedSampleRate;\n\n    // if we're not going to keep it, we're done\n    if (!shouldSample) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n      return [false, parsedSampleRate];\n    }\n    return [true, parsedSampleRate];\n  }\n});","lineCount":69,"map":[[6,2,1,0],[6,6,1,0,"_currentScopes"],[6,20,1,0],[6,23,1,0,"require"],[6,30,1,0],[6,31,1,0,"_dependencyMap"],[6,45,1,0],[7,2,2,0],[7,6,2,0,"_debugBuild"],[7,17,2,0],[7,20,2,0,"require"],[7,27,2,0],[7,28,2,0,"_dependencyMap"],[7,42,2,0],[8,2,3,0],[8,6,3,0,"_logger"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_hasTracingEnabled"],[9,24,4,0],[9,27,4,0,"require"],[9,34,4,0],[9,35,4,0,"_dependencyMap"],[9,49,4,0],[10,2,5,0],[10,6,5,0,"_parseSampleRate"],[10,22,5,0],[10,25,5,0,"require"],[10,32,5,0],[10,33,5,0,"_dependencyMap"],[10,47,5,0],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,2,13,0],[17,11,13,9,"sampleSpan"],[17,21,13,19,"sampleSpan"],[17,22,14,2,"options"],[17,29,14,9],[17,31,15,2,"samplingContext"],[17,46,15,17],[17,48,16,2],[18,4,17,2],[19,4,18,2],[19,8,18,6],[19,9,18,7],[19,13,18,7,"hasTracingEnabled"],[19,49,18,24],[19,51,18,25,"options"],[19,58,18,32],[19,59,18,33],[19,61,18,35],[20,6,19,4],[20,13,19,11],[20,14,19,12],[20,19,19,17],[20,20,19,18],[21,4,20,2],[23,4,22,2],[24,4,23,2],[24,10,23,8,"normalizedRequest"],[24,27,23,25],[24,30,23,28],[24,34,23,28,"getIsolationScope"],[24,66,23,45],[24,68,23,46],[24,69,23,47],[24,70,23,48,"getScopeData"],[24,82,23,60],[24,83,23,61],[24,84,23,62],[24,85,23,63,"sdkProcessingMetadata"],[24,106,23,84],[24,107,24,5,"normalizedRequest"],[24,124,24,22],[25,4,26,2],[25,10,26,8,"enhancedSamplingContext"],[25,33,26,31],[25,36,26,34],[26,6,27,4],[26,9,27,7,"samplingContext"],[26,24,27,22],[27,6,28,4,"normalizedRequest"],[27,23,28,21],[27,25,28,23,"samplingContext"],[27,40,28,38],[27,41,28,39,"normalizedRequest"],[27,58,28,56],[27,62,28,60,"normalizedRequest"],[28,4,29,2],[28,5,29,3],[30,4,31,2],[31,4,32,2],[32,4,33,2],[32,8,33,6,"sampleRate"],[32,18,33,16],[33,4,34,2],[33,8,34,6],[33,15,34,13,"options"],[33,22,34,20],[33,23,34,21,"tracesSampler"],[33,36,34,34],[33,41,34,39],[33,51,34,49],[33,53,34,51],[34,6,35,4,"sampleRate"],[34,16,35,14],[34,19,35,17,"options"],[34,26,35,24],[34,27,35,25,"tracesSampler"],[34,40,35,38],[34,41,35,39,"enhancedSamplingContext"],[34,64,35,62],[34,65,35,63],[35,4,36,2],[35,5,36,3],[35,11,36,9],[35,15,36,13,"enhancedSamplingContext"],[35,38,36,36],[35,39,36,37,"parentSampled"],[35,52,36,50],[35,57,36,55,"undefined"],[35,66,36,64],[35,68,36,66],[36,6,37,4,"sampleRate"],[36,16,37,14],[36,19,37,17,"enhancedSamplingContext"],[36,42,37,40],[36,43,37,41,"parentSampled"],[36,56,37,54],[37,4,38,2],[37,5,38,3],[37,11,38,9],[37,15,38,13],[37,22,38,20,"options"],[37,29,38,27],[37,30,38,28,"tracesSampleRate"],[37,46,38,44],[37,51,38,49],[37,62,38,60],[37,64,38,62],[38,6,39,4,"sampleRate"],[38,16,39,14],[38,19,39,17,"options"],[38,26,39,24],[38,27,39,25,"tracesSampleRate"],[38,43,39,41],[39,4,40,2],[39,5,40,3],[39,11,40,9],[40,6,41,4],[41,6,42,4,"sampleRate"],[41,16,42,14],[41,19,42,17],[41,20,42,18],[42,4,43,2],[44,4,45,2],[45,4,46,2],[46,4,47,2],[46,10,47,8,"parsedSampleRate"],[46,26,47,24],[46,29,47,27],[46,33,47,27,"parseSampleRate"],[46,65,47,42],[46,67,47,43,"sampleRate"],[46,77,47,53],[46,78,47,54],[47,4,49,2],[47,8,49,6,"parsedSampleRate"],[47,24,49,22],[47,29,49,27,"undefined"],[47,38,49,36],[47,40,49,38],[48,6,50,4,"DEBUG_BUILD"],[48,29,50,15],[48,33,50,19,"logger"],[48,47,50,25],[48,48,50,26,"warn"],[48,52,50,30],[48,53,50,31],[48,119,50,97],[48,120,50,98],[49,6,51,4],[49,13,51,11],[49,14,51,12],[49,19,51,17],[49,20,51,18],[50,4,52,2],[52,4,54,2],[53,4,55,2],[53,8,55,6],[53,9,55,7,"parsedSampleRate"],[53,25,55,23],[53,27,55,25],[54,6,56,4,"DEBUG_BUILD"],[54,29,56,15],[54,33,57,6,"logger"],[54,47,57,12],[54,48,57,13,"log"],[54,51,57,16],[54,52,58,8],[54,96,59,10],[54,103,59,17,"options"],[54,110,59,24],[54,111,59,25,"tracesSampler"],[54,124,59,38],[54,129,59,43],[54,139,59,53],[54,142,60,14],[54,177,60,49],[54,180,61,14],[54,256,61,90],[54,258,63,6],[54,259,63,7],[55,6,64,4],[55,13,64,11],[55,14,64,12],[55,19,64,17],[55,21,64,19,"parsedSampleRate"],[55,37,64,35],[55,38,64,36],[56,4,65,2],[58,4,67,2],[59,4,68,2],[60,4,69,2],[60,10,69,8,"shouldSample"],[60,22,69,20],[60,25,69,23,"Math"],[60,29,69,27],[60,30,69,28,"random"],[60,36,69,34],[60,37,69,35],[60,38,69,36],[60,41,69,39,"parsedSampleRate"],[60,57,69,55],[62,4,71,2],[63,4,72,2],[63,8,72,6],[63,9,72,7,"shouldSample"],[63,21,72,19],[63,23,72,21],[64,6,73,4,"DEBUG_BUILD"],[64,29,73,15],[64,33,74,6,"logger"],[64,47,74,12],[64,48,74,13,"log"],[64,51,74,16],[64,52,75,8],[64,152,75,108,"Number"],[64,158,75,114],[64,159,76,10,"sampleRate"],[64,169,77,8],[64,170,77,9],[64,173,78,6],[64,174,78,7],[65,6,79,4],[65,13,79,11],[65,14,79,12],[65,19,79,17],[65,21,79,19,"parsedSampleRate"],[65,37,79,35],[65,38,79,36],[66,4,80,2],[67,4,82,2],[67,11,82,9],[67,12,82,10],[67,16,82,14],[67,18,82,16,"parsedSampleRate"],[67,34,82,32],[67,35,82,33],[68,2,83,0],[69,0,83,1],[69,3]],"functionMap":{"names":["<global>","sampleSpan"],"mappings":"AAA;ACY;CDsE"}},"type":"js/module"}]}