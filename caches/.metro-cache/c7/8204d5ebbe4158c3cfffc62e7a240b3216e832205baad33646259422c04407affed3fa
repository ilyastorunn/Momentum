{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":48,"index":104}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.FLAG_BUFFER_SIZE = void 0;\n  exports.copyFlagsFromScopeToEvent = copyFlagsFromScopeToEvent;\n  exports.insertFlagToScope = insertFlagToScope;\n  exports.insertToFlagBuffer = insertToFlagBuffer;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  /**\n   * Ordered LRU cache for storing feature flags in the scope context. The name\n   * of each flag in the buffer is unique, and the output of getAll() is ordered\n   * from oldest to newest.\n   */\n\n  /**\n   * Max size of the LRU flag buffer stored in Sentry scope and event contexts.\n   */\n  const FLAG_BUFFER_SIZE = exports.FLAG_BUFFER_SIZE = 100;\n\n  /**\n   * Copies feature flags that are in current scope context to the event context\n   */\n  function copyFlagsFromScopeToEvent(event) {\n    const scope = (0, _core.getCurrentScope)();\n    const flagContext = scope.getScopeData().contexts.flags;\n    const flagBuffer = flagContext ? flagContext.values : [];\n    if (!flagBuffer.length) {\n      return event;\n    }\n    if (event.contexts === undefined) {\n      event.contexts = {};\n    }\n    event.contexts.flags = {\n      values: [...flagBuffer]\n    };\n    return event;\n  }\n\n  /**\n   * Creates a feature flags values array in current context if it does not exist\n   * and inserts the flag into a FeatureFlag array while maintaining ordered LRU\n   * properties. Not thread-safe. After inserting:\n   * - `flags` is sorted in order of recency, with the newest flag at the end.\n   * - No other flags with the same name exist in `flags`.\n   * - The length of `flags` does not exceed `maxSize`. The oldest flag is evicted\n   *  as needed.\n   *\n   * @param name     Name of the feature flag to insert.\n   * @param value    Value of the feature flag.\n   * @param maxSize  Max number of flags the buffer should store. It's recommended\n   *   to keep this consistent across insertions. Default is FLAG_BUFFER_SIZE\n   */\n  function insertFlagToScope(name, value, maxSize = FLAG_BUFFER_SIZE) {\n    const scopeContexts = (0, _core.getCurrentScope)().getScopeData().contexts;\n    if (!scopeContexts.flags) {\n      scopeContexts.flags = {\n        values: []\n      };\n    }\n    const flags = scopeContexts.flags.values;\n    insertToFlagBuffer(flags, name, value, maxSize);\n  }\n\n  /**\n   * Exported for tests. Currently only accepts boolean values (otherwise no-op).\n   */\n  function insertToFlagBuffer(flags, name, value, maxSize) {\n    if (typeof value !== 'boolean') {\n      return;\n    }\n    if (flags.length > maxSize) {\n      _debugBuild.DEBUG_BUILD && _core.logger.error(`[Feature Flags] insertToFlagBuffer called on a buffer larger than maxSize=${maxSize}`);\n      return;\n    }\n\n    // Check if the flag is already in the buffer - O(n)\n    const index = flags.findIndex(f => f.flag === name);\n    if (index !== -1) {\n      // The flag was found, remove it from its current position - O(n)\n      flags.splice(index, 1);\n    }\n    if (flags.length === maxSize) {\n      // If at capacity, pop the earliest flag - O(n)\n      flags.shift();\n    }\n\n    // Push the flag to the end - O(1)\n    flags.push({\n      flag: name,\n      result: value\n    });\n  }\n});","lineCount":95,"map":[[9,2,1,0],[9,6,1,0,"_core"],[9,11,1,0],[9,14,1,0,"require"],[9,21,1,0],[9,22,1,0,"_dependencyMap"],[9,36,1,0],[10,2,2,0],[10,6,2,0,"_debugBuild"],[10,17,2,0],[10,20,2,0,"require"],[10,27,2,0],[10,28,2,0,"_dependencyMap"],[10,42,2,0],[11,2,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[17,2,10,0],[18,0,11,0],[19,0,12,0],[20,2,13,0],[20,8,13,6,"FLAG_BUFFER_SIZE"],[20,24,13,22],[20,27,13,22,"exports"],[20,34,13,22],[20,35,13,22,"FLAG_BUFFER_SIZE"],[20,51,13,22],[20,54,13,25],[20,57,13,28],[22,2,15,0],[23,0,16,0],[24,0,17,0],[25,2,18,0],[25,11,18,9,"copyFlagsFromScopeToEvent"],[25,36,18,34,"copyFlagsFromScopeToEvent"],[25,37,18,35,"event"],[25,42,18,40],[25,44,18,42],[26,4,19,2],[26,10,19,8,"scope"],[26,15,19,13],[26,18,19,16],[26,22,19,16,"getCurrentScope"],[26,43,19,31],[26,45,19,32],[26,46,19,33],[27,4,20,2],[27,10,20,8,"flagContext"],[27,21,20,19],[27,24,20,22,"scope"],[27,29,20,27],[27,30,20,28,"getScopeData"],[27,42,20,40],[27,43,20,41],[27,44,20,42],[27,45,20,43,"contexts"],[27,53,20,51],[27,54,20,52,"flags"],[27,59,20,57],[28,4,21,2],[28,10,21,8,"flagBuffer"],[28,20,21,18],[28,23,21,21,"flagContext"],[28,34,21,32],[28,37,21,35,"flagContext"],[28,48,21,46],[28,49,21,47,"values"],[28,55,21,53],[28,58,21,56],[28,60,21,58],[29,4,23,2],[29,8,23,6],[29,9,23,7,"flagBuffer"],[29,19,23,17],[29,20,23,18,"length"],[29,26,23,24],[29,28,23,26],[30,6,24,4],[30,13,24,11,"event"],[30,18,24,16],[31,4,25,2],[32,4,27,2],[32,8,27,6,"event"],[32,13,27,11],[32,14,27,12,"contexts"],[32,22,27,20],[32,27,27,25,"undefined"],[32,36,27,34],[32,38,27,36],[33,6,28,4,"event"],[33,11,28,9],[33,12,28,10,"contexts"],[33,20,28,18],[33,23,28,21],[33,24,28,22],[33,25,28,23],[34,4,29,2],[35,4,30,2,"event"],[35,9,30,7],[35,10,30,8,"contexts"],[35,18,30,16],[35,19,30,17,"flags"],[35,24,30,22],[35,27,30,25],[36,6,30,27,"values"],[36,12,30,33],[36,14,30,35],[36,15,30,36],[36,18,30,39,"flagBuffer"],[36,28,30,49],[37,4,30,51],[37,5,30,52],[38,4,31,2],[38,11,31,9,"event"],[38,16,31,14],[39,2,32,0],[41,2,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,2,48,0],[55,11,48,9,"insertFlagToScope"],[55,28,48,26,"insertFlagToScope"],[55,29,48,27,"name"],[55,33,48,31],[55,35,48,33,"value"],[55,40,48,38],[55,42,48,40,"maxSize"],[55,49,48,47],[55,52,48,50,"FLAG_BUFFER_SIZE"],[55,68,48,66],[55,70,48,68],[56,4,49,2],[56,10,49,8,"scopeContexts"],[56,23,49,21],[56,26,49,24],[56,30,49,24,"getCurrentScope"],[56,51,49,39],[56,53,49,40],[56,54,49,41],[56,55,49,42,"getScopeData"],[56,67,49,54],[56,68,49,55],[56,69,49,56],[56,70,49,57,"contexts"],[56,78,49,65],[57,4,50,2],[57,8,50,6],[57,9,50,7,"scopeContexts"],[57,22,50,20],[57,23,50,21,"flags"],[57,28,50,26],[57,30,50,28],[58,6,51,4,"scopeContexts"],[58,19,51,17],[58,20,51,18,"flags"],[58,25,51,23],[58,28,51,26],[59,8,51,28,"values"],[59,14,51,34],[59,16,51,36],[60,6,51,39],[60,7,51,40],[61,4,52,2],[62,4,53,2],[62,10,53,8,"flags"],[62,15,53,13],[62,18,53,16,"scopeContexts"],[62,31,53,29],[62,32,53,30,"flags"],[62,37,53,35],[62,38,53,36,"values"],[62,44,53,42],[63,4,54,2,"insertToFlagBuffer"],[63,22,54,20],[63,23,54,21,"flags"],[63,28,54,26],[63,30,54,28,"name"],[63,34,54,32],[63,36,54,34,"value"],[63,41,54,39],[63,43,54,41,"maxSize"],[63,50,54,48],[63,51,54,49],[64,2,55,0],[66,2,57,0],[67,0,58,0],[68,0,59,0],[69,2,60,0],[69,11,60,9,"insertToFlagBuffer"],[69,29,60,27,"insertToFlagBuffer"],[69,30,60,28,"flags"],[69,35,60,33],[69,37,60,35,"name"],[69,41,60,39],[69,43,60,41,"value"],[69,48,60,46],[69,50,60,48,"maxSize"],[69,57,60,55],[69,59,60,57],[70,4,61,2],[70,8,61,6],[70,15,61,13,"value"],[70,20,61,18],[70,25,61,23],[70,34,61,32],[70,36,61,34],[71,6,62,4],[72,4,63,2],[73,4,65,2],[73,8,65,6,"flags"],[73,13,65,11],[73,14,65,12,"length"],[73,20,65,18],[73,23,65,21,"maxSize"],[73,30,65,28],[73,32,65,30],[74,6,66,4,"DEBUG_BUILD"],[74,29,66,15],[74,33,66,19,"logger"],[74,45,66,25],[74,46,66,26,"error"],[74,51,66,31],[74,52,66,32],[74,129,66,109,"maxSize"],[74,136,66,116],[74,138,66,118],[74,139,66,119],[75,6,67,4],[76,4,68,2],[78,4,70,2],[79,4,71,2],[79,10,71,8,"index"],[79,15,71,13],[79,18,71,16,"flags"],[79,23,71,21],[79,24,71,22,"findIndex"],[79,33,71,31],[79,34,71,32,"f"],[79,35,71,33],[79,39,71,37,"f"],[79,40,71,38],[79,41,71,39,"flag"],[79,45,71,43],[79,50,71,48,"name"],[79,54,71,52],[79,55,71,53],[80,4,73,2],[80,8,73,6,"index"],[80,13,73,11],[80,18,73,16],[80,19,73,17],[80,20,73,18],[80,22,73,20],[81,6,74,4],[82,6,75,4,"flags"],[82,11,75,9],[82,12,75,10,"splice"],[82,18,75,16],[82,19,75,17,"index"],[82,24,75,22],[82,26,75,24],[82,27,75,25],[82,28,75,26],[83,4,76,2],[84,4,78,2],[84,8,78,6,"flags"],[84,13,78,11],[84,14,78,12,"length"],[84,20,78,18],[84,25,78,23,"maxSize"],[84,32,78,30],[84,34,78,32],[85,6,79,4],[86,6,80,4,"flags"],[86,11,80,9],[86,12,80,10,"shift"],[86,17,80,15],[86,18,80,16],[86,19,80,17],[87,4,81,2],[89,4,83,2],[90,4,84,2,"flags"],[90,9,84,7],[90,10,84,8,"push"],[90,14,84,12],[90,15,84,13],[91,6,85,4,"flag"],[91,10,85,8],[91,12,85,10,"name"],[91,16,85,14],[92,6,86,4,"result"],[92,12,86,10],[92,14,86,12,"value"],[93,4,87,2],[93,5,87,3],[93,6,87,4],[94,2,88,0],[95,0,88,1],[95,3]],"functionMap":{"names":["<global>","copyFlagsFromScopeToEvent","insertFlagToScope","insertToFlagBuffer","flags.findIndex$argument_0"],"mappings":"AAA;ACiB;CDc;AEgB;CFO;AGK;gCCW,oBD;CHiB"}},"type":"js/module"}]}