{"dependencies":[{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":681},"end":{"line":10,"column":82,"index":763}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"]}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":764},"end":{"line":11,"column":60,"index":824}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"]}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":825},"end":{"line":12,"column":64,"index":889}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _errors = require(_dependencyMap[0], \"../lib/errors\");\n  var _fetch = require(_dependencyMap[1], \"../lib/fetch\");\n  var _helpers = require(_dependencyMap[2], \"../lib/helpers\");\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  const DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  const DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let body;\n          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n          let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n            'x-upsert': String(options.upsert)\n          });\n          const metadata = options.metadata;\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n            if (metadata) {\n              headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n            }\n          }\n          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n          }\n          const cleanPath = this._removeEmptyFolders(path);\n          const _path = this._getFinalPath(cleanPath);\n          const data = yield (method == 'PUT' ? _fetch.put : _fetch.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n            headers\n          }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n            duplex: options.duplex\n          } : {}));\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const url = new URL(this.url + `/object/upload/sign/${_path}`);\n        url.searchParams.set('token', token);\n        try {\n          let body;\n          const options = Object.assign({\n            upsert: DEFAULT_FILE_OPTIONS.upsert\n          }, fileOptions);\n          const headers = Object.assign(Object.assign({}, this.headers), {\n            'x-upsert': String(options.upsert)\n          });\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n          }\n          const data = yield (0, _fetch.put)(this.fetch, url.toString(), body, {\n            headers\n          });\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          const headers = Object.assign({}, this.headers);\n          if (options === null || options === void 0 ? void 0 : options.upsert) {\n            headers['x-upsert'] = 'true';\n          }\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n            headers\n          });\n          const url = new URL(this.url + data.url);\n          const token = url.searchParams.get('token');\n          if (!token) {\n            throw new _errors.StorageError('No token returned by API');\n          }\n          return {\n            data: {\n              signedUrl: url.toString(),\n              path,\n              token\n            },\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/move`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/copy`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: {\n              path: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          let data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n            expiresIn\n          }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n            transform: options.transform\n          } : {}), {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n          data = {\n            signedUrl\n          };\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n            expiresIn,\n            paths\n          }, {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          return {\n            data: data.map(datum => Object.assign(Object.assign({}, datum), {\n              signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n            })),\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        const queryString = transformationQuery ? `?${transformationQuery}` : '';\n        try {\n          const _path = this._getFinalPath(path);\n          const res = yield (0, _fetch.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n            headers: this.headers,\n            noResolveJson: true\n          });\n          const data = yield res.blob();\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: (0, _helpers.recursiveToCamel)(data),\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          yield (0, _fetch.head)(this.fetch, `${this.url}/object/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: true,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error) && error instanceof _errors.StorageUnknownError) {\n            const originalError = error.originalError;\n            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n              return {\n                data: false,\n                error\n              };\n            }\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n      const _path = this._getFinalPath(path);\n      const _queryString = [];\n      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      let queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = `?${queryString}`;\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n            prefixes: paths\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n            prefix: path || ''\n          });\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign({}, options);\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    encodeMetadata(metadata) {\n      return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.from(data).toString('base64');\n      }\n      return btoa(data);\n    }\n    _getFinalPath(path) {\n      return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n      const params = [];\n      if (transform.width) {\n        params.push(`width=${transform.width}`);\n      }\n      if (transform.height) {\n        params.push(`height=${transform.height}`);\n      }\n      if (transform.resize) {\n        params.push(`resize=${transform.resize}`);\n      }\n      if (transform.format) {\n        params.push(`format=${transform.format}`);\n      }\n      if (transform.quality) {\n        params.push(`quality=${transform.quality}`);\n      }\n      return params.join('&');\n    }\n  }\n  exports.default = StorageFileApi;\n});","lineCount":679,"map":[[6,2,10,0],[6,6,10,0,"_errors"],[6,13,10,0],[6,16,10,0,"require"],[6,23,10,0],[6,24,10,0,"_dependencyMap"],[6,38,10,0],[7,2,11,0],[7,6,11,0,"_fetch"],[7,12,11,0],[7,15,11,0,"require"],[7,22,11,0],[7,23,11,0,"_dependencyMap"],[7,37,11,0],[8,2,12,0],[8,6,12,0,"_helpers"],[8,14,12,0],[8,17,12,0,"require"],[8,24,12,0],[8,25,12,0,"_dependencyMap"],[8,39,12,0],[9,2,1,0],[9,6,1,4,"__awaiter"],[9,15,1,13],[9,18,1,17],[9,22,1,21],[9,26,1,25],[9,30,1,29],[9,31,1,30,"__awaiter"],[9,40,1,39],[9,44,1,44],[9,54,1,54,"thisArg"],[9,61,1,61],[9,63,1,63,"_arguments"],[9,73,1,73],[9,75,1,75,"P"],[9,76,1,76],[9,78,1,78,"generator"],[9,87,1,87],[9,89,1,89],[10,4,2,4],[10,13,2,13,"adopt"],[10,18,2,18,"adopt"],[10,19,2,19,"value"],[10,24,2,24],[10,26,2,26],[11,6,2,28],[11,13,2,35,"value"],[11,18,2,40],[11,30,2,52,"P"],[11,31,2,53],[11,34,2,56,"value"],[11,39,2,61],[11,42,2,64],[11,46,2,68,"P"],[11,47,2,69],[11,48,2,70],[11,58,2,80,"resolve"],[11,65,2,87],[11,67,2,89],[12,8,2,91,"resolve"],[12,15,2,98],[12,16,2,99,"value"],[12,21,2,104],[12,22,2,105],[13,6,2,107],[13,7,2,108],[13,8,2,109],[14,4,2,111],[15,4,3,4],[15,11,3,11],[15,16,3,16,"P"],[15,17,3,17],[15,22,3,22,"P"],[15,23,3,23],[15,26,3,26,"Promise"],[15,33,3,33],[15,34,3,34],[15,36,3,36],[15,46,3,46,"resolve"],[15,53,3,53],[15,55,3,55,"reject"],[15,61,3,61],[15,63,3,63],[16,6,4,8],[16,15,4,17,"fulfilled"],[16,24,4,26,"fulfilled"],[16,25,4,27,"value"],[16,30,4,32],[16,32,4,34],[17,8,4,36],[17,12,4,40],[18,10,4,42,"step"],[18,14,4,46],[18,15,4,47,"generator"],[18,24,4,56],[18,25,4,57,"next"],[18,29,4,61],[18,30,4,62,"value"],[18,35,4,67],[18,36,4,68],[18,37,4,69],[19,8,4,71],[19,9,4,72],[19,10,4,73],[19,17,4,80,"e"],[19,18,4,81],[19,20,4,83],[20,10,4,85,"reject"],[20,16,4,91],[20,17,4,92,"e"],[20,18,4,93],[20,19,4,94],[21,8,4,96],[22,6,4,98],[23,6,5,8],[23,15,5,17,"rejected"],[23,23,5,25,"rejected"],[23,24,5,26,"value"],[23,29,5,31],[23,31,5,33],[24,8,5,35],[24,12,5,39],[25,10,5,41,"step"],[25,14,5,45],[25,15,5,46,"generator"],[25,24,5,55],[25,25,5,56],[25,32,5,63],[25,33,5,64],[25,34,5,65,"value"],[25,39,5,70],[25,40,5,71],[25,41,5,72],[26,8,5,74],[26,9,5,75],[26,10,5,76],[26,17,5,83,"e"],[26,18,5,84],[26,20,5,86],[27,10,5,88,"reject"],[27,16,5,94],[27,17,5,95,"e"],[27,18,5,96],[27,19,5,97],[28,8,5,99],[29,6,5,101],[30,6,6,8],[30,15,6,17,"step"],[30,19,6,21,"step"],[30,20,6,22,"result"],[30,26,6,28],[30,28,6,30],[31,8,6,32,"result"],[31,14,6,38],[31,15,6,39,"done"],[31,19,6,43],[31,22,6,46,"resolve"],[31,29,6,53],[31,30,6,54,"result"],[31,36,6,60],[31,37,6,61,"value"],[31,42,6,66],[31,43,6,67],[31,46,6,70,"adopt"],[31,51,6,75],[31,52,6,76,"result"],[31,58,6,82],[31,59,6,83,"value"],[31,64,6,88],[31,65,6,89],[31,66,6,90,"then"],[31,70,6,94],[31,71,6,95,"fulfilled"],[31,80,6,104],[31,82,6,106,"rejected"],[31,90,6,114],[31,91,6,115],[32,6,6,117],[33,6,7,8,"step"],[33,10,7,12],[33,11,7,13],[33,12,7,14,"generator"],[33,21,7,23],[33,24,7,26,"generator"],[33,33,7,35],[33,34,7,36,"apply"],[33,39,7,41],[33,40,7,42,"thisArg"],[33,47,7,49],[33,49,7,51,"_arguments"],[33,59,7,61],[33,63,7,65],[33,65,7,67],[33,66,7,68],[33,68,7,70,"next"],[33,72,7,74],[33,73,7,75],[33,74,7,76],[33,75,7,77],[34,4,8,4],[34,5,8,5],[34,6,8,6],[35,2,9,0],[35,3,9,1],[36,2,13,0],[36,8,13,6,"DEFAULT_SEARCH_OPTIONS"],[36,30,13,28],[36,33,13,31],[37,4,14,4,"limit"],[37,9,14,9],[37,11,14,11],[37,14,14,14],[38,4,15,4,"offset"],[38,10,15,10],[38,12,15,12],[38,13,15,13],[39,4,16,4,"sortBy"],[39,10,16,10],[39,12,16,12],[40,6,17,8,"column"],[40,12,17,14],[40,14,17,16],[40,20,17,22],[41,6,18,8,"order"],[41,11,18,13],[41,13,18,15],[42,4,19,4],[43,2,20,0],[43,3,20,1],[44,2,21,0],[44,8,21,6,"DEFAULT_FILE_OPTIONS"],[44,28,21,26],[44,31,21,29],[45,4,22,4,"cacheControl"],[45,16,22,16],[45,18,22,18],[45,24,22,24],[46,4,23,4,"contentType"],[46,15,23,15],[46,17,23,17],[46,43,23,43],[47,4,24,4,"upsert"],[47,10,24,10],[47,12,24,12],[48,2,25,0],[48,3,25,1],[49,2,26,15],[49,8,26,21,"StorageFileApi"],[49,22,26,35],[49,23,26,36],[50,4,27,4,"constructor"],[50,15,27,15,"constructor"],[50,16,27,16,"url"],[50,19,27,19],[50,21,27,21,"headers"],[50,28,27,28],[50,31,27,31],[50,32,27,32],[50,33,27,33],[50,35,27,35,"bucketId"],[50,43,27,43],[50,45,27,45,"fetch"],[50,50,27,50],[50,52,27,52],[51,6,28,8],[51,10,28,12],[51,11,28,13,"url"],[51,14,28,16],[51,17,28,19,"url"],[51,20,28,22],[52,6,29,8],[52,10,29,12],[52,11,29,13,"headers"],[52,18,29,20],[52,21,29,23,"headers"],[52,28,29,30],[53,6,30,8],[53,10,30,12],[53,11,30,13,"bucketId"],[53,19,30,21],[53,22,30,24,"bucketId"],[53,30,30,32],[54,6,31,8],[54,10,31,12],[54,11,31,13,"fetch"],[54,16,31,18],[54,19,31,21],[54,23,31,21,"resolveFetch"],[54,44,31,33],[54,46,31,34,"fetch"],[54,51,31,39],[54,52,31,40],[55,4,32,4],[56,4,33,4],[57,0,34,0],[58,0,35,0],[59,0,36,0],[60,0,37,0],[61,0,38,0],[62,0,39,0],[63,4,40,4,"uploadOrUpdate"],[63,18,40,18,"uploadOrUpdate"],[63,19,40,19,"method"],[63,25,40,25],[63,27,40,27,"path"],[63,31,40,31],[63,33,40,33,"fileBody"],[63,41,40,41],[63,43,40,43,"fileOptions"],[63,54,40,54],[63,56,40,56],[64,6,41,8],[64,13,41,15,"__awaiter"],[64,22,41,24],[64,23,41,25],[64,27,41,29],[64,29,41,31],[64,34,41,36],[64,35,41,37],[64,37,41,39],[64,42,41,44],[64,43,41,45],[64,45,41,47],[64,58,41,60],[65,8,42,12],[65,12,42,16],[66,10,43,16],[66,14,43,20,"body"],[66,18,43,24],[67,10,44,16],[67,16,44,22,"options"],[67,23,44,29],[67,26,44,32,"Object"],[67,32,44,38],[67,33,44,39,"assign"],[67,39,44,45],[67,40,44,46,"Object"],[67,46,44,52],[67,47,44,53,"assign"],[67,53,44,59],[67,54,44,60],[67,55,44,61],[67,56,44,62],[67,58,44,64,"DEFAULT_FILE_OPTIONS"],[67,78,44,84],[67,79,44,85],[67,81,44,87,"fileOptions"],[67,92,44,98],[67,93,44,99],[68,10,45,16],[68,14,45,20,"headers"],[68,21,45,27],[68,24,45,30,"Object"],[68,30,45,36],[68,31,45,37,"assign"],[68,37,45,43],[68,38,45,44,"Object"],[68,44,45,50],[68,45,45,51,"assign"],[68,51,45,57],[68,52,45,58],[68,53,45,59],[68,54,45,60],[68,56,45,62],[68,60,45,66],[68,61,45,67,"headers"],[68,68,45,74],[68,69,45,75],[68,71,45,78,"method"],[68,77,45,84],[68,82,45,89],[68,88,45,95],[68,92,45,99],[69,12,45,101],[69,22,45,111],[69,24,45,113,"String"],[69,30,45,119],[69,31,45,120,"options"],[69,38,45,127],[69,39,45,128,"upsert"],[69,45,45,134],[70,10,45,136],[70,11,45,138],[70,12,45,139],[71,10,46,16],[71,16,46,22,"metadata"],[71,24,46,30],[71,27,46,33,"options"],[71,34,46,40],[71,35,46,41,"metadata"],[71,43,46,49],[72,10,47,16],[72,14,47,20],[72,21,47,27,"Blob"],[72,25,47,31],[72,30,47,36],[72,41,47,47],[72,45,47,51,"fileBody"],[72,53,47,59],[72,65,47,71,"Blob"],[72,69,47,75],[72,71,47,77],[73,12,48,20,"body"],[73,16,48,24],[73,19,48,27],[73,23,48,31,"FormData"],[73,31,48,39],[73,32,48,40],[73,33,48,41],[74,12,49,20,"body"],[74,16,49,24],[74,17,49,25,"append"],[74,23,49,31],[74,24,49,32],[74,38,49,46],[74,40,49,48,"options"],[74,47,49,55],[74,48,49,56,"cacheControl"],[74,60,49,68],[74,61,49,69],[75,12,50,20],[75,16,50,24,"metadata"],[75,24,50,32],[75,26,50,34],[76,14,51,24,"body"],[76,18,51,28],[76,19,51,29,"append"],[76,25,51,35],[76,26,51,36],[76,36,51,46],[76,38,51,48],[76,42,51,52],[76,43,51,53,"encodeMetadata"],[76,57,51,67],[76,58,51,68,"metadata"],[76,66,51,76],[76,67,51,77],[76,68,51,78],[77,12,52,20],[78,12,53,20,"body"],[78,16,53,24],[78,17,53,25,"append"],[78,23,53,31],[78,24,53,32],[78,26,53,34],[78,28,53,36,"fileBody"],[78,36,53,44],[78,37,53,45],[79,10,54,16],[79,11,54,17],[79,17,55,21],[79,21,55,25],[79,28,55,32,"FormData"],[79,36,55,40],[79,41,55,45],[79,52,55,56],[79,56,55,60,"fileBody"],[79,64,55,68],[79,76,55,80,"FormData"],[79,84,55,88],[79,86,55,90],[80,12,56,20,"body"],[80,16,56,24],[80,19,56,27,"fileBody"],[80,27,56,35],[81,12,57,20,"body"],[81,16,57,24],[81,17,57,25,"append"],[81,23,57,31],[81,24,57,32],[81,38,57,46],[81,40,57,48,"options"],[81,47,57,55],[81,48,57,56,"cacheControl"],[81,60,57,68],[81,61,57,69],[82,12,58,20],[82,16,58,24,"metadata"],[82,24,58,32],[82,26,58,34],[83,14,59,24,"body"],[83,18,59,28],[83,19,59,29,"append"],[83,25,59,35],[83,26,59,36],[83,36,59,46],[83,38,59,48],[83,42,59,52],[83,43,59,53,"encodeMetadata"],[83,57,59,67],[83,58,59,68,"metadata"],[83,66,59,76],[83,67,59,77],[83,68,59,78],[84,12,60,20],[85,10,61,16],[85,11,61,17],[85,17,62,21],[86,12,63,20,"body"],[86,16,63,24],[86,19,63,27,"fileBody"],[86,27,63,35],[87,12,64,20,"headers"],[87,19,64,27],[87,20,64,28],[87,35,64,43],[87,36,64,44],[87,39,64,47],[87,50,64,58,"options"],[87,57,64,65],[87,58,64,66,"cacheControl"],[87,70,64,78],[87,72,64,80],[88,12,65,20,"headers"],[88,19,65,27],[88,20,65,28],[88,34,65,42],[88,35,65,43],[88,38,65,46,"options"],[88,45,65,53],[88,46,65,54,"contentType"],[88,57,65,65],[89,12,66,20],[89,16,66,24,"metadata"],[89,24,66,32],[89,26,66,34],[90,14,67,24,"headers"],[90,21,67,31],[90,22,67,32],[90,34,67,44],[90,35,67,45],[90,38,67,48],[90,42,67,52],[90,43,67,53,"toBase64"],[90,51,67,61],[90,52,67,62],[90,56,67,66],[90,57,67,67,"encodeMetadata"],[90,71,67,81],[90,72,67,82,"metadata"],[90,80,67,90],[90,81,67,91],[90,82,67,92],[91,12,68,20],[92,10,69,16],[93,10,70,16],[93,14,70,20,"fileOptions"],[93,25,70,31],[93,30,70,36],[93,34,70,40],[93,38,70,44,"fileOptions"],[93,49,70,55],[93,54,70,60],[93,59,70,65],[93,60,70,66],[93,63,70,69],[93,68,70,74],[93,69,70,75],[93,72,70,78,"fileOptions"],[93,83,70,89],[93,84,70,90,"headers"],[93,91,70,97],[93,93,70,99],[94,12,71,20,"headers"],[94,19,71,27],[94,22,71,30,"Object"],[94,28,71,36],[94,29,71,37,"assign"],[94,35,71,43],[94,36,71,44,"Object"],[94,42,71,50],[94,43,71,51,"assign"],[94,49,71,57],[94,50,71,58],[94,51,71,59],[94,52,71,60],[94,54,71,62,"headers"],[94,61,71,69],[94,62,71,70],[94,64,71,72,"fileOptions"],[94,75,71,83],[94,76,71,84,"headers"],[94,83,71,91],[94,84,71,92],[95,10,72,16],[96,10,73,16],[96,16,73,22,"cleanPath"],[96,25,73,31],[96,28,73,34],[96,32,73,38],[96,33,73,39,"_removeEmptyFolders"],[96,52,73,58],[96,53,73,59,"path"],[96,57,73,63],[96,58,73,64],[97,10,74,16],[97,16,74,22,"_path"],[97,21,74,27],[97,24,74,30],[97,28,74,34],[97,29,74,35,"_getFinalPath"],[97,42,74,48],[97,43,74,49,"cleanPath"],[97,52,74,58],[97,53,74,59],[98,10,75,16],[98,16,75,22,"data"],[98,20,75,26],[98,23,75,29],[98,29,75,35],[98,30,75,36,"method"],[98,36,75,42],[98,40,75,46],[98,45,75,51],[98,48,75,54,"put"],[98,58,75,57],[98,61,75,60,"post"],[98,72,75,64],[98,74,75,66],[98,78,75,70],[98,79,75,71,"fetch"],[98,84,75,76],[98,86,75,78],[98,89,75,81],[98,93,75,85],[98,94,75,86,"url"],[98,97,75,89],[98,108,75,100,"_path"],[98,113,75,105],[98,115,75,107],[98,117,75,109,"body"],[98,121,75,113],[98,123,75,115,"Object"],[98,129,75,121],[98,130,75,122,"assign"],[98,136,75,128],[98,137,75,129],[99,12,75,131,"headers"],[100,10,75,139],[100,11,75,140],[100,13,75,143],[100,14,75,144,"options"],[100,21,75,151],[100,26,75,156],[100,30,75,160],[100,34,75,164,"options"],[100,41,75,171],[100,46,75,176],[100,51,75,181],[100,52,75,182],[100,55,75,185],[100,60,75,190],[100,61,75,191],[100,64,75,194,"options"],[100,71,75,201],[100,72,75,202,"duplex"],[100,78,75,208],[100,82,75,212],[101,12,75,214,"duplex"],[101,18,75,220],[101,20,75,222,"options"],[101,27,75,229],[101,28,75,230,"duplex"],[102,10,75,237],[102,11,75,238],[102,14,75,241],[102,15,75,242],[102,16,75,244],[102,17,75,245],[102,18,75,246],[103,10,76,16],[103,17,76,23],[104,12,77,20,"data"],[104,16,77,24],[104,18,77,26],[105,14,77,28,"path"],[105,18,77,32],[105,20,77,34,"cleanPath"],[105,29,77,43],[106,14,77,45,"id"],[106,16,77,47],[106,18,77,49,"data"],[106,22,77,53],[106,23,77,54,"Id"],[106,25,77,56],[107,14,77,58,"fullPath"],[107,22,77,66],[107,24,77,68,"data"],[107,28,77,72],[107,29,77,73,"Key"],[108,12,77,77],[108,13,77,78],[109,12,78,20,"error"],[109,17,78,25],[109,19,78,27],[110,10,79,16],[110,11,79,17],[111,8,80,12],[111,9,80,13],[111,10,81,12],[111,17,81,19,"error"],[111,22,81,24],[111,24,81,26],[112,10,82,16],[112,14,82,20],[112,18,82,20,"isStorageError"],[112,40,82,34],[112,42,82,35,"error"],[112,47,82,40],[112,48,82,41],[112,50,82,43],[113,12,83,20],[113,19,83,27],[114,14,83,29,"data"],[114,18,83,33],[114,20,83,35],[114,24,83,39],[115,14,83,41,"error"],[116,12,83,47],[116,13,83,48],[117,10,84,16],[118,10,85,16],[118,16,85,22,"error"],[118,21,85,27],[119,8,86,12],[120,6,87,8],[120,7,87,9],[120,8,87,10],[121,4,88,4],[122,4,89,4],[123,0,90,0],[124,0,91,0],[125,0,92,0],[126,0,93,0],[127,0,94,0],[128,4,95,4,"upload"],[128,10,95,10,"upload"],[128,11,95,11,"path"],[128,15,95,15],[128,17,95,17,"fileBody"],[128,25,95,25],[128,27,95,27,"fileOptions"],[128,38,95,38],[128,40,95,40],[129,6,96,8],[129,13,96,15,"__awaiter"],[129,22,96,24],[129,23,96,25],[129,27,96,29],[129,29,96,31],[129,34,96,36],[129,35,96,37],[129,37,96,39],[129,42,96,44],[129,43,96,45],[129,45,96,47],[129,58,96,60],[130,8,97,12],[130,15,97,19],[130,19,97,23],[130,20,97,24,"uploadOrUpdate"],[130,34,97,38],[130,35,97,39],[130,41,97,45],[130,43,97,47,"path"],[130,47,97,51],[130,49,97,53,"fileBody"],[130,57,97,61],[130,59,97,63,"fileOptions"],[130,70,97,74],[130,71,97,75],[131,6,98,8],[131,7,98,9],[131,8,98,10],[132,4,99,4],[133,4,100,4],[134,0,101,0],[135,0,102,0],[136,0,103,0],[137,0,104,0],[138,0,105,0],[139,4,106,4,"uploadToSignedUrl"],[139,21,106,21,"uploadToSignedUrl"],[139,22,106,22,"path"],[139,26,106,26],[139,28,106,28,"token"],[139,33,106,33],[139,35,106,35,"fileBody"],[139,43,106,43],[139,45,106,45,"fileOptions"],[139,56,106,56],[139,58,106,58],[140,6,107,8],[140,13,107,15,"__awaiter"],[140,22,107,24],[140,23,107,25],[140,27,107,29],[140,29,107,31],[140,34,107,36],[140,35,107,37],[140,37,107,39],[140,42,107,44],[140,43,107,45],[140,45,107,47],[140,58,107,60],[141,8,108,12],[141,14,108,18,"cleanPath"],[141,23,108,27],[141,26,108,30],[141,30,108,34],[141,31,108,35,"_removeEmptyFolders"],[141,50,108,54],[141,51,108,55,"path"],[141,55,108,59],[141,56,108,60],[142,8,109,12],[142,14,109,18,"_path"],[142,19,109,23],[142,22,109,26],[142,26,109,30],[142,27,109,31,"_getFinalPath"],[142,40,109,44],[142,41,109,45,"cleanPath"],[142,50,109,54],[142,51,109,55],[143,8,110,12],[143,14,110,18,"url"],[143,17,110,21],[143,20,110,24],[143,24,110,28,"URL"],[143,27,110,31],[143,28,110,32],[143,32,110,36],[143,33,110,37,"url"],[143,36,110,40],[143,39,110,43],[143,62,110,66,"_path"],[143,67,110,71],[143,69,110,73],[143,70,110,74],[144,8,111,12,"url"],[144,11,111,15],[144,12,111,16,"searchParams"],[144,24,111,28],[144,25,111,29,"set"],[144,28,111,32],[144,29,111,33],[144,36,111,40],[144,38,111,42,"token"],[144,43,111,47],[144,44,111,48],[145,8,112,12],[145,12,112,16],[146,10,113,16],[146,14,113,20,"body"],[146,18,113,24],[147,10,114,16],[147,16,114,22,"options"],[147,23,114,29],[147,26,114,32,"Object"],[147,32,114,38],[147,33,114,39,"assign"],[147,39,114,45],[147,40,114,46],[148,12,114,48,"upsert"],[148,18,114,54],[148,20,114,56,"DEFAULT_FILE_OPTIONS"],[148,40,114,76],[148,41,114,77,"upsert"],[149,10,114,84],[149,11,114,85],[149,13,114,87,"fileOptions"],[149,24,114,98],[149,25,114,99],[150,10,115,16],[150,16,115,22,"headers"],[150,23,115,29],[150,26,115,32,"Object"],[150,32,115,38],[150,33,115,39,"assign"],[150,39,115,45],[150,40,115,46,"Object"],[150,46,115,52],[150,47,115,53,"assign"],[150,53,115,59],[150,54,115,60],[150,55,115,61],[150,56,115,62],[150,58,115,64],[150,62,115,68],[150,63,115,69,"headers"],[150,70,115,76],[150,71,115,77],[150,73,115,79],[151,12,115,81],[151,22,115,91],[151,24,115,93,"String"],[151,30,115,99],[151,31,115,100,"options"],[151,38,115,107],[151,39,115,108,"upsert"],[151,45,115,114],[152,10,115,116],[152,11,115,117],[152,12,115,118],[153,10,116,16],[153,14,116,20],[153,21,116,27,"Blob"],[153,25,116,31],[153,30,116,36],[153,41,116,47],[153,45,116,51,"fileBody"],[153,53,116,59],[153,65,116,71,"Blob"],[153,69,116,75],[153,71,116,77],[154,12,117,20,"body"],[154,16,117,24],[154,19,117,27],[154,23,117,31,"FormData"],[154,31,117,39],[154,32,117,40],[154,33,117,41],[155,12,118,20,"body"],[155,16,118,24],[155,17,118,25,"append"],[155,23,118,31],[155,24,118,32],[155,38,118,46],[155,40,118,48,"options"],[155,47,118,55],[155,48,118,56,"cacheControl"],[155,60,118,68],[155,61,118,69],[156,12,119,20,"body"],[156,16,119,24],[156,17,119,25,"append"],[156,23,119,31],[156,24,119,32],[156,26,119,34],[156,28,119,36,"fileBody"],[156,36,119,44],[156,37,119,45],[157,10,120,16],[157,11,120,17],[157,17,121,21],[157,21,121,25],[157,28,121,32,"FormData"],[157,36,121,40],[157,41,121,45],[157,52,121,56],[157,56,121,60,"fileBody"],[157,64,121,68],[157,76,121,80,"FormData"],[157,84,121,88],[157,86,121,90],[158,12,122,20,"body"],[158,16,122,24],[158,19,122,27,"fileBody"],[158,27,122,35],[159,12,123,20,"body"],[159,16,123,24],[159,17,123,25,"append"],[159,23,123,31],[159,24,123,32],[159,38,123,46],[159,40,123,48,"options"],[159,47,123,55],[159,48,123,56,"cacheControl"],[159,60,123,68],[159,61,123,69],[160,10,124,16],[160,11,124,17],[160,17,125,21],[161,12,126,20,"body"],[161,16,126,24],[161,19,126,27,"fileBody"],[161,27,126,35],[162,12,127,20,"headers"],[162,19,127,27],[162,20,127,28],[162,35,127,43],[162,36,127,44],[162,39,127,47],[162,50,127,58,"options"],[162,57,127,65],[162,58,127,66,"cacheControl"],[162,70,127,78],[162,72,127,80],[163,12,128,20,"headers"],[163,19,128,27],[163,20,128,28],[163,34,128,42],[163,35,128,43],[163,38,128,46,"options"],[163,45,128,53],[163,46,128,54,"contentType"],[163,57,128,65],[164,10,129,16],[165,10,130,16],[165,16,130,22,"data"],[165,20,130,26],[165,23,130,29],[165,29,130,35],[165,33,130,35,"put"],[165,43,130,38],[165,45,130,39],[165,49,130,43],[165,50,130,44,"fetch"],[165,55,130,49],[165,57,130,51,"url"],[165,60,130,54],[165,61,130,55,"toString"],[165,69,130,63],[165,70,130,64],[165,71,130,65],[165,73,130,67,"body"],[165,77,130,71],[165,79,130,73],[166,12,130,75,"headers"],[167,10,130,83],[167,11,130,84],[167,12,130,85],[168,10,131,16],[168,17,131,23],[169,12,132,20,"data"],[169,16,132,24],[169,18,132,26],[170,14,132,28,"path"],[170,18,132,32],[170,20,132,34,"cleanPath"],[170,29,132,43],[171,14,132,45,"fullPath"],[171,22,132,53],[171,24,132,55,"data"],[171,28,132,59],[171,29,132,60,"Key"],[172,12,132,64],[172,13,132,65],[173,12,133,20,"error"],[173,17,133,25],[173,19,133,27],[174,10,134,16],[174,11,134,17],[175,8,135,12],[175,9,135,13],[175,10,136,12],[175,17,136,19,"error"],[175,22,136,24],[175,24,136,26],[176,10,137,16],[176,14,137,20],[176,18,137,20,"isStorageError"],[176,40,137,34],[176,42,137,35,"error"],[176,47,137,40],[176,48,137,41],[176,50,137,43],[177,12,138,20],[177,19,138,27],[178,14,138,29,"data"],[178,18,138,33],[178,20,138,35],[178,24,138,39],[179,14,138,41,"error"],[180,12,138,47],[180,13,138,48],[181,10,139,16],[182,10,140,16],[182,16,140,22,"error"],[182,21,140,27],[183,8,141,12],[184,6,142,8],[184,7,142,9],[184,8,142,10],[185,4,143,4],[186,4,144,4],[187,0,145,0],[188,0,146,0],[189,0,147,0],[190,0,148,0],[191,0,149,0],[192,0,150,0],[193,4,151,4,"createSignedUploadUrl"],[193,25,151,25,"createSignedUploadUrl"],[193,26,151,26,"path"],[193,30,151,30],[193,32,151,32,"options"],[193,39,151,39],[193,41,151,41],[194,6,152,8],[194,13,152,15,"__awaiter"],[194,22,152,24],[194,23,152,25],[194,27,152,29],[194,29,152,31],[194,34,152,36],[194,35,152,37],[194,37,152,39],[194,42,152,44],[194,43,152,45],[194,45,152,47],[194,58,152,60],[195,8,153,12],[195,12,153,16],[196,10,154,16],[196,14,154,20,"_path"],[196,19,154,25],[196,22,154,28],[196,26,154,32],[196,27,154,33,"_getFinalPath"],[196,40,154,46],[196,41,154,47,"path"],[196,45,154,51],[196,46,154,52],[197,10,155,16],[197,16,155,22,"headers"],[197,23,155,29],[197,26,155,32,"Object"],[197,32,155,38],[197,33,155,39,"assign"],[197,39,155,45],[197,40,155,46],[197,41,155,47],[197,42,155,48],[197,44,155,50],[197,48,155,54],[197,49,155,55,"headers"],[197,56,155,62],[197,57,155,63],[198,10,156,16],[198,14,156,20,"options"],[198,21,156,27],[198,26,156,32],[198,30,156,36],[198,34,156,40,"options"],[198,41,156,47],[198,46,156,52],[198,51,156,57],[198,52,156,58],[198,55,156,61],[198,60,156,66],[198,61,156,67],[198,64,156,70,"options"],[198,71,156,77],[198,72,156,78,"upsert"],[198,78,156,84],[198,80,156,86],[199,12,157,20,"headers"],[199,19,157,27],[199,20,157,28],[199,30,157,38],[199,31,157,39],[199,34,157,42],[199,40,157,48],[200,10,158,16],[201,10,159,16],[201,16,159,22,"data"],[201,20,159,26],[201,23,159,29],[201,29,159,35],[201,33,159,35,"post"],[201,44,159,39],[201,46,159,40],[201,50,159,44],[201,51,159,45,"fetch"],[201,56,159,50],[201,58,159,52],[201,61,159,55],[201,65,159,59],[201,66,159,60,"url"],[201,69,159,63],[201,92,159,86,"_path"],[201,97,159,91],[201,99,159,93],[201,101,159,95],[201,102,159,96],[201,103,159,97],[201,105,159,99],[202,12,159,101,"headers"],[203,10,159,109],[203,11,159,110],[203,12,159,111],[204,10,160,16],[204,16,160,22,"url"],[204,19,160,25],[204,22,160,28],[204,26,160,32,"URL"],[204,29,160,35],[204,30,160,36],[204,34,160,40],[204,35,160,41,"url"],[204,38,160,44],[204,41,160,47,"data"],[204,45,160,51],[204,46,160,52,"url"],[204,49,160,55],[204,50,160,56],[205,10,161,16],[205,16,161,22,"token"],[205,21,161,27],[205,24,161,30,"url"],[205,27,161,33],[205,28,161,34,"searchParams"],[205,40,161,46],[205,41,161,47,"get"],[205,44,161,50],[205,45,161,51],[205,52,161,58],[205,53,161,59],[206,10,162,16],[206,14,162,20],[206,15,162,21,"token"],[206,20,162,26],[206,22,162,28],[207,12,163,20],[207,18,163,26],[207,22,163,30,"StorageError"],[207,42,163,42],[207,43,163,43],[207,69,163,69],[207,70,163,70],[208,10,164,16],[209,10,165,16],[209,17,165,23],[210,12,165,25,"data"],[210,16,165,29],[210,18,165,31],[211,14,165,33,"signedUrl"],[211,23,165,42],[211,25,165,44,"url"],[211,28,165,47],[211,29,165,48,"toString"],[211,37,165,56],[211,38,165,57],[211,39,165,58],[212,14,165,60,"path"],[212,18,165,64],[213,14,165,66,"token"],[214,12,165,72],[214,13,165,73],[215,12,165,75,"error"],[215,17,165,80],[215,19,165,82],[216,10,165,87],[216,11,165,88],[217,8,166,12],[217,9,166,13],[217,10,167,12],[217,17,167,19,"error"],[217,22,167,24],[217,24,167,26],[218,10,168,16],[218,14,168,20],[218,18,168,20,"isStorageError"],[218,40,168,34],[218,42,168,35,"error"],[218,47,168,40],[218,48,168,41],[218,50,168,43],[219,12,169,20],[219,19,169,27],[220,14,169,29,"data"],[220,18,169,33],[220,20,169,35],[220,24,169,39],[221,14,169,41,"error"],[222,12,169,47],[222,13,169,48],[223,10,170,16],[224,10,171,16],[224,16,171,22,"error"],[224,21,171,27],[225,8,172,12],[226,6,173,8],[226,7,173,9],[226,8,173,10],[227,4,174,4],[228,4,175,4],[229,0,176,0],[230,0,177,0],[231,0,178,0],[232,0,179,0],[233,0,180,0],[234,4,181,4,"update"],[234,10,181,10,"update"],[234,11,181,11,"path"],[234,15,181,15],[234,17,181,17,"fileBody"],[234,25,181,25],[234,27,181,27,"fileOptions"],[234,38,181,38],[234,40,181,40],[235,6,182,8],[235,13,182,15,"__awaiter"],[235,22,182,24],[235,23,182,25],[235,27,182,29],[235,29,182,31],[235,34,182,36],[235,35,182,37],[235,37,182,39],[235,42,182,44],[235,43,182,45],[235,45,182,47],[235,58,182,60],[236,8,183,12],[236,15,183,19],[236,19,183,23],[236,20,183,24,"uploadOrUpdate"],[236,34,183,38],[236,35,183,39],[236,40,183,44],[236,42,183,46,"path"],[236,46,183,50],[236,48,183,52,"fileBody"],[236,56,183,60],[236,58,183,62,"fileOptions"],[236,69,183,73],[236,70,183,74],[237,6,184,8],[237,7,184,9],[237,8,184,10],[238,4,185,4],[239,4,186,4],[240,0,187,0],[241,0,188,0],[242,0,189,0],[243,0,190,0],[244,0,191,0],[245,0,192,0],[246,4,193,4,"move"],[246,8,193,8,"move"],[246,9,193,9,"fromPath"],[246,17,193,17],[246,19,193,19,"toPath"],[246,25,193,25],[246,27,193,27,"options"],[246,34,193,34],[246,36,193,36],[247,6,194,8],[247,13,194,15,"__awaiter"],[247,22,194,24],[247,23,194,25],[247,27,194,29],[247,29,194,31],[247,34,194,36],[247,35,194,37],[247,37,194,39],[247,42,194,44],[247,43,194,45],[247,45,194,47],[247,58,194,60],[248,8,195,12],[248,12,195,16],[249,10,196,16],[249,16,196,22,"data"],[249,20,196,26],[249,23,196,29],[249,29,196,35],[249,33,196,35,"post"],[249,44,196,39],[249,46,196,40],[249,50,196,44],[249,51,196,45,"fetch"],[249,56,196,50],[249,58,196,52],[249,61,196,55],[249,65,196,59],[249,66,196,60,"url"],[249,69,196,63],[249,83,196,77],[249,85,196,79],[250,12,197,20,"bucketId"],[250,20,197,28],[250,22,197,30],[250,26,197,34],[250,27,197,35,"bucketId"],[250,35,197,43],[251,12,198,20,"sourceKey"],[251,21,198,29],[251,23,198,31,"fromPath"],[251,31,198,39],[252,12,199,20,"destinationKey"],[252,26,199,34],[252,28,199,36,"toPath"],[252,34,199,42],[253,12,200,20,"destinationBucket"],[253,29,200,37],[253,31,200,39,"options"],[253,38,200,46],[253,43,200,51],[253,47,200,55],[253,51,200,59,"options"],[253,58,200,66],[253,63,200,71],[253,68,200,76],[253,69,200,77],[253,72,200,80],[253,77,200,85],[253,78,200,86],[253,81,200,89,"options"],[253,88,200,96],[253,89,200,97,"destinationBucket"],[254,10,201,16],[254,11,201,17],[254,13,201,19],[255,12,201,21,"headers"],[255,19,201,28],[255,21,201,30],[255,25,201,34],[255,26,201,35,"headers"],[256,10,201,43],[256,11,201,44],[256,12,201,45],[257,10,202,16],[257,17,202,23],[258,12,202,25,"data"],[258,16,202,29],[259,12,202,31,"error"],[259,17,202,36],[259,19,202,38],[260,10,202,43],[260,11,202,44],[261,8,203,12],[261,9,203,13],[261,10,204,12],[261,17,204,19,"error"],[261,22,204,24],[261,24,204,26],[262,10,205,16],[262,14,205,20],[262,18,205,20,"isStorageError"],[262,40,205,34],[262,42,205,35,"error"],[262,47,205,40],[262,48,205,41],[262,50,205,43],[263,12,206,20],[263,19,206,27],[264,14,206,29,"data"],[264,18,206,33],[264,20,206,35],[264,24,206,39],[265,14,206,41,"error"],[266,12,206,47],[266,13,206,48],[267,10,207,16],[268,10,208,16],[268,16,208,22,"error"],[268,21,208,27],[269,8,209,12],[270,6,210,8],[270,7,210,9],[270,8,210,10],[271,4,211,4],[272,4,212,4],[273,0,213,0],[274,0,214,0],[275,0,215,0],[276,0,216,0],[277,0,217,0],[278,0,218,0],[279,4,219,4,"copy"],[279,8,219,8,"copy"],[279,9,219,9,"fromPath"],[279,17,219,17],[279,19,219,19,"toPath"],[279,25,219,25],[279,27,219,27,"options"],[279,34,219,34],[279,36,219,36],[280,6,220,8],[280,13,220,15,"__awaiter"],[280,22,220,24],[280,23,220,25],[280,27,220,29],[280,29,220,31],[280,34,220,36],[280,35,220,37],[280,37,220,39],[280,42,220,44],[280,43,220,45],[280,45,220,47],[280,58,220,60],[281,8,221,12],[281,12,221,16],[282,10,222,16],[282,16,222,22,"data"],[282,20,222,26],[282,23,222,29],[282,29,222,35],[282,33,222,35,"post"],[282,44,222,39],[282,46,222,40],[282,50,222,44],[282,51,222,45,"fetch"],[282,56,222,50],[282,58,222,52],[282,61,222,55],[282,65,222,59],[282,66,222,60,"url"],[282,69,222,63],[282,83,222,77],[282,85,222,79],[283,12,223,20,"bucketId"],[283,20,223,28],[283,22,223,30],[283,26,223,34],[283,27,223,35,"bucketId"],[283,35,223,43],[284,12,224,20,"sourceKey"],[284,21,224,29],[284,23,224,31,"fromPath"],[284,31,224,39],[285,12,225,20,"destinationKey"],[285,26,225,34],[285,28,225,36,"toPath"],[285,34,225,42],[286,12,226,20,"destinationBucket"],[286,29,226,37],[286,31,226,39,"options"],[286,38,226,46],[286,43,226,51],[286,47,226,55],[286,51,226,59,"options"],[286,58,226,66],[286,63,226,71],[286,68,226,76],[286,69,226,77],[286,72,226,80],[286,77,226,85],[286,78,226,86],[286,81,226,89,"options"],[286,88,226,96],[286,89,226,97,"destinationBucket"],[287,10,227,16],[287,11,227,17],[287,13,227,19],[288,12,227,21,"headers"],[288,19,227,28],[288,21,227,30],[288,25,227,34],[288,26,227,35,"headers"],[289,10,227,43],[289,11,227,44],[289,12,227,45],[290,10,228,16],[290,17,228,23],[291,12,228,25,"data"],[291,16,228,29],[291,18,228,31],[292,14,228,33,"path"],[292,18,228,37],[292,20,228,39,"data"],[292,24,228,43],[292,25,228,44,"Key"],[293,12,228,48],[293,13,228,49],[294,12,228,51,"error"],[294,17,228,56],[294,19,228,58],[295,10,228,63],[295,11,228,64],[296,8,229,12],[296,9,229,13],[296,10,230,12],[296,17,230,19,"error"],[296,22,230,24],[296,24,230,26],[297,10,231,16],[297,14,231,20],[297,18,231,20,"isStorageError"],[297,40,231,34],[297,42,231,35,"error"],[297,47,231,40],[297,48,231,41],[297,50,231,43],[298,12,232,20],[298,19,232,27],[299,14,232,29,"data"],[299,18,232,33],[299,20,232,35],[299,24,232,39],[300,14,232,41,"error"],[301,12,232,47],[301,13,232,48],[302,10,233,16],[303,10,234,16],[303,16,234,22,"error"],[303,21,234,27],[304,8,235,12],[305,6,236,8],[305,7,236,9],[305,8,236,10],[306,4,237,4],[307,4,238,4],[308,0,239,0],[309,0,240,0],[310,0,241,0],[311,0,242,0],[312,0,243,0],[313,0,244,0],[314,0,245,0],[315,4,246,4,"createSignedUrl"],[315,19,246,19,"createSignedUrl"],[315,20,246,20,"path"],[315,24,246,24],[315,26,246,26,"expiresIn"],[315,35,246,35],[315,37,246,37,"options"],[315,44,246,44],[315,46,246,46],[316,6,247,8],[316,13,247,15,"__awaiter"],[316,22,247,24],[316,23,247,25],[316,27,247,29],[316,29,247,31],[316,34,247,36],[316,35,247,37],[316,37,247,39],[316,42,247,44],[316,43,247,45],[316,45,247,47],[316,58,247,60],[317,8,248,12],[317,12,248,16],[318,10,249,16],[318,14,249,20,"_path"],[318,19,249,25],[318,22,249,28],[318,26,249,32],[318,27,249,33,"_getFinalPath"],[318,40,249,46],[318,41,249,47,"path"],[318,45,249,51],[318,46,249,52],[319,10,250,16],[319,14,250,20,"data"],[319,18,250,24],[319,21,250,27],[319,27,250,33],[319,31,250,33,"post"],[319,42,250,37],[319,44,250,38],[319,48,250,42],[319,49,250,43,"fetch"],[319,54,250,48],[319,56,250,50],[319,59,250,53],[319,63,250,57],[319,64,250,58,"url"],[319,67,250,61],[319,83,250,77,"_path"],[319,88,250,82],[319,90,250,84],[319,92,250,86,"Object"],[319,98,250,92],[319,99,250,93,"assign"],[319,105,250,99],[319,106,250,100],[320,12,250,102,"expiresIn"],[321,10,250,112],[321,11,250,113],[321,13,250,116],[321,14,250,117,"options"],[321,21,250,124],[321,26,250,129],[321,30,250,133],[321,34,250,137,"options"],[321,41,250,144],[321,46,250,149],[321,51,250,154],[321,52,250,155],[321,55,250,158],[321,60,250,163],[321,61,250,164],[321,64,250,167,"options"],[321,71,250,174],[321,72,250,175,"transform"],[321,81,250,184],[321,85,250,188],[322,12,250,190,"transform"],[322,21,250,199],[322,23,250,201,"options"],[322,30,250,208],[322,31,250,209,"transform"],[323,10,250,219],[323,11,250,220],[323,14,250,223],[323,15,250,224],[323,16,250,226],[323,17,250,227],[323,19,250,229],[324,12,250,231,"headers"],[324,19,250,238],[324,21,250,240],[324,25,250,244],[324,26,250,245,"headers"],[325,10,250,253],[325,11,250,254],[325,12,250,255],[326,10,251,16],[326,16,251,22,"downloadQueryParam"],[326,34,251,40],[326,37,251,43],[326,38,251,44,"options"],[326,45,251,51],[326,50,251,56],[326,54,251,60],[326,58,251,64,"options"],[326,65,251,71],[326,70,251,76],[326,75,251,81],[326,76,251,82],[326,79,251,85],[326,84,251,90],[326,85,251,91],[326,88,251,94,"options"],[326,95,251,101],[326,96,251,102,"download"],[326,104,251,110],[326,108,252,22],[326,121,252,35,"options"],[326,128,252,42],[326,129,252,43,"download"],[326,137,252,51],[326,142,252,56],[326,146,252,60],[326,149,252,63],[326,151,252,65],[326,154,252,68,"options"],[326,161,252,75],[326,162,252,76,"download"],[326,170,252,84],[326,172,252,86],[326,175,253,22],[326,177,253,24],[327,10,254,16],[327,16,254,22,"signedUrl"],[327,25,254,31],[327,28,254,34,"encodeURI"],[327,37,254,43],[327,38,254,44],[327,41,254,47],[327,45,254,51],[327,46,254,52,"url"],[327,49,254,55],[327,52,254,58,"data"],[327,56,254,62],[327,57,254,63,"signedURL"],[327,66,254,72],[327,69,254,75,"downloadQueryParam"],[327,87,254,93],[327,89,254,95],[327,90,254,96],[328,10,255,16,"data"],[328,14,255,20],[328,17,255,23],[329,12,255,25,"signedUrl"],[330,10,255,35],[330,11,255,36],[331,10,256,16],[331,17,256,23],[332,12,256,25,"data"],[332,16,256,29],[333,12,256,31,"error"],[333,17,256,36],[333,19,256,38],[334,10,256,43],[334,11,256,44],[335,8,257,12],[335,9,257,13],[335,10,258,12],[335,17,258,19,"error"],[335,22,258,24],[335,24,258,26],[336,10,259,16],[336,14,259,20],[336,18,259,20,"isStorageError"],[336,40,259,34],[336,42,259,35,"error"],[336,47,259,40],[336,48,259,41],[336,50,259,43],[337,12,260,20],[337,19,260,27],[338,14,260,29,"data"],[338,18,260,33],[338,20,260,35],[338,24,260,39],[339,14,260,41,"error"],[340,12,260,47],[340,13,260,48],[341,10,261,16],[342,10,262,16],[342,16,262,22,"error"],[342,21,262,27],[343,8,263,12],[344,6,264,8],[344,7,264,9],[344,8,264,10],[345,4,265,4],[346,4,266,4],[347,0,267,0],[348,0,268,0],[349,0,269,0],[350,0,270,0],[351,0,271,0],[352,0,272,0],[353,4,273,4,"createSignedUrls"],[353,20,273,20,"createSignedUrls"],[353,21,273,21,"paths"],[353,26,273,26],[353,28,273,28,"expiresIn"],[353,37,273,37],[353,39,273,39,"options"],[353,46,273,46],[353,48,273,48],[354,6,274,8],[354,13,274,15,"__awaiter"],[354,22,274,24],[354,23,274,25],[354,27,274,29],[354,29,274,31],[354,34,274,36],[354,35,274,37],[354,37,274,39],[354,42,274,44],[354,43,274,45],[354,45,274,47],[354,58,274,60],[355,8,275,12],[355,12,275,16],[356,10,276,16],[356,16,276,22,"data"],[356,20,276,26],[356,23,276,29],[356,29,276,35],[356,33,276,35,"post"],[356,44,276,39],[356,46,276,40],[356,50,276,44],[356,51,276,45,"fetch"],[356,56,276,50],[356,58,276,52],[356,61,276,55],[356,65,276,59],[356,66,276,60,"url"],[356,69,276,63],[356,85,276,79],[356,89,276,83],[356,90,276,84,"bucketId"],[356,98,276,92],[356,100,276,94],[356,102,276,96],[357,12,276,98,"expiresIn"],[357,21,276,107],[358,12,276,109,"paths"],[359,10,276,115],[359,11,276,116],[359,13,276,118],[360,12,276,120,"headers"],[360,19,276,127],[360,21,276,129],[360,25,276,133],[360,26,276,134,"headers"],[361,10,276,142],[361,11,276,143],[361,12,276,144],[362,10,277,16],[362,16,277,22,"downloadQueryParam"],[362,34,277,40],[362,37,277,43],[362,38,277,44,"options"],[362,45,277,51],[362,50,277,56],[362,54,277,60],[362,58,277,64,"options"],[362,65,277,71],[362,70,277,76],[362,75,277,81],[362,76,277,82],[362,79,277,85],[362,84,277,90],[362,85,277,91],[362,88,277,94,"options"],[362,95,277,101],[362,96,277,102,"download"],[362,104,277,110],[362,108,278,22],[362,121,278,35,"options"],[362,128,278,42],[362,129,278,43,"download"],[362,137,278,51],[362,142,278,56],[362,146,278,60],[362,149,278,63],[362,151,278,65],[362,154,278,68,"options"],[362,161,278,75],[362,162,278,76,"download"],[362,170,278,84],[362,172,278,86],[362,175,279,22],[362,177,279,24],[363,10,280,16],[363,17,280,23],[364,12,281,20,"data"],[364,16,281,24],[364,18,281,26,"data"],[364,22,281,30],[364,23,281,31,"map"],[364,26,281,34],[364,27,281,36,"datum"],[364,32,281,41],[364,36,281,47,"Object"],[364,42,281,53],[364,43,281,54,"assign"],[364,49,281,60],[364,50,281,61,"Object"],[364,56,281,67],[364,57,281,68,"assign"],[364,63,281,74],[364,64,281,75],[364,65,281,76],[364,66,281,77],[364,68,281,79,"datum"],[364,73,281,84],[364,74,281,85],[364,76,281,87],[365,14,281,89,"signedUrl"],[365,23,281,98],[365,25,281,100,"datum"],[365,30,281,105],[365,31,281,106,"signedURL"],[365,40,281,115],[365,43,282,30,"encodeURI"],[365,52,282,39],[365,53,282,40],[365,56,282,43],[365,60,282,47],[365,61,282,48,"url"],[365,64,282,51],[365,67,282,54,"datum"],[365,72,282,59],[365,73,282,60,"signedURL"],[365,82,282,69],[365,85,282,72,"downloadQueryParam"],[365,103,282,90],[365,105,282,92],[365,106,282,93],[365,109,283,30],[366,12,283,35],[366,13,283,36],[366,14,283,38],[366,15,283,39],[367,12,284,20,"error"],[367,17,284,25],[367,19,284,27],[368,10,285,16],[368,11,285,17],[369,8,286,12],[369,9,286,13],[369,10,287,12],[369,17,287,19,"error"],[369,22,287,24],[369,24,287,26],[370,10,288,16],[370,14,288,20],[370,18,288,20,"isStorageError"],[370,40,288,34],[370,42,288,35,"error"],[370,47,288,40],[370,48,288,41],[370,50,288,43],[371,12,289,20],[371,19,289,27],[372,14,289,29,"data"],[372,18,289,33],[372,20,289,35],[372,24,289,39],[373,14,289,41,"error"],[374,12,289,47],[374,13,289,48],[375,10,290,16],[376,10,291,16],[376,16,291,22,"error"],[376,21,291,27],[377,8,292,12],[378,6,293,8],[378,7,293,9],[378,8,293,10],[379,4,294,4],[380,4,295,4],[381,0,296,0],[382,0,297,0],[383,0,298,0],[384,0,299,0],[385,0,300,0],[386,4,301,4,"download"],[386,12,301,12,"download"],[386,13,301,13,"path"],[386,17,301,17],[386,19,301,19,"options"],[386,26,301,26],[386,28,301,28],[387,6,302,8],[387,13,302,15,"__awaiter"],[387,22,302,24],[387,23,302,25],[387,27,302,29],[387,29,302,31],[387,34,302,36],[387,35,302,37],[387,37,302,39],[387,42,302,44],[387,43,302,45],[387,45,302,47],[387,58,302,60],[388,8,303,12],[388,14,303,18,"wantsTransformation"],[388,33,303,37],[388,36,303,40],[388,44,303,48,"options"],[388,51,303,55],[388,56,303,60],[388,60,303,64],[388,64,303,68,"options"],[388,71,303,75],[388,76,303,80],[388,81,303,85],[388,82,303,86],[388,85,303,89],[388,90,303,94],[388,91,303,95],[388,94,303,98,"options"],[388,101,303,105],[388,102,303,106,"transform"],[388,111,303,115],[388,112,303,116],[388,117,303,121],[388,128,303,132],[389,8,304,12],[389,14,304,18,"renderPath"],[389,24,304,28],[389,27,304,31,"wantsTransformation"],[389,46,304,50],[389,49,304,53],[389,77,304,81],[389,80,304,84],[389,88,304,92],[390,8,305,12],[390,14,305,18,"transformationQuery"],[390,33,305,37],[390,36,305,40],[390,40,305,44],[390,41,305,45,"transformOptsToQueryString"],[390,67,305,71],[390,68,305,72],[390,69,305,73,"options"],[390,76,305,80],[390,81,305,85],[390,85,305,89],[390,89,305,93,"options"],[390,96,305,100],[390,101,305,105],[390,106,305,110],[390,107,305,111],[390,110,305,114],[390,115,305,119],[390,116,305,120],[390,119,305,123,"options"],[390,126,305,130],[390,127,305,131,"transform"],[390,136,305,140],[390,141,305,145],[390,142,305,146],[390,143,305,147],[390,144,305,148],[391,8,306,12],[391,14,306,18,"queryString"],[391,25,306,29],[391,28,306,32,"transformationQuery"],[391,47,306,51],[391,50,306,54],[391,54,306,58,"transformationQuery"],[391,73,306,77],[391,75,306,79],[391,78,306,82],[391,80,306,84],[392,8,307,12],[392,12,307,16],[393,10,308,16],[393,16,308,22,"_path"],[393,21,308,27],[393,24,308,30],[393,28,308,34],[393,29,308,35,"_getFinalPath"],[393,42,308,48],[393,43,308,49,"path"],[393,47,308,53],[393,48,308,54],[394,10,309,16],[394,16,309,22,"res"],[394,19,309,25],[394,22,309,28],[394,28,309,34],[394,32,309,34,"get"],[394,42,309,37],[394,44,309,38],[394,48,309,42],[394,49,309,43,"fetch"],[394,54,309,48],[394,56,309,50],[394,59,309,53],[394,63,309,57],[394,64,309,58,"url"],[394,67,309,61],[394,71,309,65,"renderPath"],[394,81,309,75],[394,85,309,79,"_path"],[394,90,309,84],[394,93,309,87,"queryString"],[394,104,309,98],[394,106,309,100],[394,108,309,102],[395,12,310,20,"headers"],[395,19,310,27],[395,21,310,29],[395,25,310,33],[395,26,310,34,"headers"],[395,33,310,41],[396,12,311,20,"noResolveJson"],[396,25,311,33],[396,27,311,35],[397,10,312,16],[397,11,312,17],[397,12,312,18],[398,10,313,16],[398,16,313,22,"data"],[398,20,313,26],[398,23,313,29],[398,29,313,35,"res"],[398,32,313,38],[398,33,313,39,"blob"],[398,37,313,43],[398,38,313,44],[398,39,313,45],[399,10,314,16],[399,17,314,23],[400,12,314,25,"data"],[400,16,314,29],[401,12,314,31,"error"],[401,17,314,36],[401,19,314,38],[402,10,314,43],[402,11,314,44],[403,8,315,12],[403,9,315,13],[403,10,316,12],[403,17,316,19,"error"],[403,22,316,24],[403,24,316,26],[404,10,317,16],[404,14,317,20],[404,18,317,20,"isStorageError"],[404,40,317,34],[404,42,317,35,"error"],[404,47,317,40],[404,48,317,41],[404,50,317,43],[405,12,318,20],[405,19,318,27],[406,14,318,29,"data"],[406,18,318,33],[406,20,318,35],[406,24,318,39],[407,14,318,41,"error"],[408,12,318,47],[408,13,318,48],[409,10,319,16],[410,10,320,16],[410,16,320,22,"error"],[410,21,320,27],[411,8,321,12],[412,6,322,8],[412,7,322,9],[412,8,322,10],[413,4,323,4],[414,4,324,4],[415,0,325,0],[416,0,326,0],[417,0,327,0],[418,4,328,4,"info"],[418,8,328,8,"info"],[418,9,328,9,"path"],[418,13,328,13],[418,15,328,15],[419,6,329,8],[419,13,329,15,"__awaiter"],[419,22,329,24],[419,23,329,25],[419,27,329,29],[419,29,329,31],[419,34,329,36],[419,35,329,37],[419,37,329,39],[419,42,329,44],[419,43,329,45],[419,45,329,47],[419,58,329,60],[420,8,330,12],[420,14,330,18,"_path"],[420,19,330,23],[420,22,330,26],[420,26,330,30],[420,27,330,31,"_getFinalPath"],[420,40,330,44],[420,41,330,45,"path"],[420,45,330,49],[420,46,330,50],[421,8,331,12],[421,12,331,16],[422,10,332,16],[422,16,332,22,"data"],[422,20,332,26],[422,23,332,29],[422,29,332,35],[422,33,332,35,"get"],[422,43,332,38],[422,45,332,39],[422,49,332,43],[422,50,332,44,"fetch"],[422,55,332,49],[422,57,332,51],[422,60,332,54],[422,64,332,58],[422,65,332,59,"url"],[422,68,332,62],[422,84,332,78,"_path"],[422,89,332,83],[422,91,332,85],[422,93,332,87],[423,12,333,20,"headers"],[423,19,333,27],[423,21,333,29],[423,25,333,33],[423,26,333,34,"headers"],[424,10,334,16],[424,11,334,17],[424,12,334,18],[425,10,335,16],[425,17,335,23],[426,12,335,25,"data"],[426,16,335,29],[426,18,335,31],[426,22,335,31,"recursiveToCamel"],[426,47,335,47],[426,49,335,48,"data"],[426,53,335,52],[426,54,335,53],[427,12,335,55,"error"],[427,17,335,60],[427,19,335,62],[428,10,335,67],[428,11,335,68],[429,8,336,12],[429,9,336,13],[429,10,337,12],[429,17,337,19,"error"],[429,22,337,24],[429,24,337,26],[430,10,338,16],[430,14,338,20],[430,18,338,20,"isStorageError"],[430,40,338,34],[430,42,338,35,"error"],[430,47,338,40],[430,48,338,41],[430,50,338,43],[431,12,339,20],[431,19,339,27],[432,14,339,29,"data"],[432,18,339,33],[432,20,339,35],[432,24,339,39],[433,14,339,41,"error"],[434,12,339,47],[434,13,339,48],[435,10,340,16],[436,10,341,16],[436,16,341,22,"error"],[436,21,341,27],[437,8,342,12],[438,6,343,8],[438,7,343,9],[438,8,343,10],[439,4,344,4],[440,4,345,4],[441,0,346,0],[442,0,347,0],[443,0,348,0],[444,4,349,4,"exists"],[444,10,349,10,"exists"],[444,11,349,11,"path"],[444,15,349,15],[444,17,349,17],[445,6,350,8],[445,13,350,15,"__awaiter"],[445,22,350,24],[445,23,350,25],[445,27,350,29],[445,29,350,31],[445,34,350,36],[445,35,350,37],[445,37,350,39],[445,42,350,44],[445,43,350,45],[445,45,350,47],[445,58,350,60],[446,8,351,12],[446,14,351,18,"_path"],[446,19,351,23],[446,22,351,26],[446,26,351,30],[446,27,351,31,"_getFinalPath"],[446,40,351,44],[446,41,351,45,"path"],[446,45,351,49],[446,46,351,50],[447,8,352,12],[447,12,352,16],[448,10,353,16],[448,16,353,22],[448,20,353,22,"head"],[448,31,353,26],[448,33,353,27],[448,37,353,31],[448,38,353,32,"fetch"],[448,43,353,37],[448,45,353,39],[448,48,353,42],[448,52,353,46],[448,53,353,47,"url"],[448,56,353,50],[448,67,353,61,"_path"],[448,72,353,66],[448,74,353,68],[448,76,353,70],[449,12,354,20,"headers"],[449,19,354,27],[449,21,354,29],[449,25,354,33],[449,26,354,34,"headers"],[450,10,355,16],[450,11,355,17],[450,12,355,18],[451,10,356,16],[451,17,356,23],[452,12,356,25,"data"],[452,16,356,29],[452,18,356,31],[452,22,356,35],[453,12,356,37,"error"],[453,17,356,42],[453,19,356,44],[454,10,356,49],[454,11,356,50],[455,8,357,12],[455,9,357,13],[455,10,358,12],[455,17,358,19,"error"],[455,22,358,24],[455,24,358,26],[456,10,359,16],[456,14,359,20],[456,18,359,20,"isStorageError"],[456,40,359,34],[456,42,359,35,"error"],[456,47,359,40],[456,48,359,41],[456,52,359,45,"error"],[456,57,359,50],[456,69,359,62,"StorageUnknownError"],[456,96,359,81],[456,98,359,83],[457,12,360,20],[457,18,360,26,"originalError"],[457,31,360,39],[457,34,360,42,"error"],[457,39,360,47],[457,40,360,48,"originalError"],[457,53,360,61],[458,12,361,20],[458,16,361,24],[458,17,361,25],[458,20,361,28],[458,22,361,30],[458,25,361,33],[458,26,361,34],[458,27,361,35,"includes"],[458,35,361,43],[458,36,361,44,"originalError"],[458,49,361,57],[458,54,361,62],[458,58,361,66],[458,62,361,70,"originalError"],[458,75,361,83],[458,80,361,88],[458,85,361,93],[458,86,361,94],[458,89,361,97],[458,94,361,102],[458,95,361,103],[458,98,361,106,"originalError"],[458,111,361,119],[458,112,361,120,"status"],[458,118,361,126],[458,119,361,127],[458,121,361,129],[459,14,362,24],[459,21,362,31],[460,16,362,33,"data"],[460,20,362,37],[460,22,362,39],[460,27,362,44],[461,16,362,46,"error"],[462,14,362,52],[462,15,362,53],[463,12,363,20],[464,10,364,16],[465,10,365,16],[465,16,365,22,"error"],[465,21,365,27],[466,8,366,12],[467,6,367,8],[467,7,367,9],[467,8,367,10],[468,4,368,4],[469,4,369,4],[470,0,370,0],[471,0,371,0],[472,0,372,0],[473,0,373,0],[474,0,374,0],[475,0,375,0],[476,0,376,0],[477,4,377,4,"getPublicUrl"],[477,16,377,16,"getPublicUrl"],[477,17,377,17,"path"],[477,21,377,21],[477,23,377,23,"options"],[477,30,377,30],[477,32,377,32],[478,6,378,8],[478,12,378,14,"_path"],[478,17,378,19],[478,20,378,22],[478,24,378,26],[478,25,378,27,"_getFinalPath"],[478,38,378,40],[478,39,378,41,"path"],[478,43,378,45],[478,44,378,46],[479,6,379,8],[479,12,379,14,"_queryString"],[479,24,379,26],[479,27,379,29],[479,29,379,31],[480,6,380,8],[480,12,380,14,"downloadQueryParam"],[480,30,380,32],[480,33,380,35],[480,34,380,36,"options"],[480,41,380,43],[480,46,380,48],[480,50,380,52],[480,54,380,56,"options"],[480,61,380,63],[480,66,380,68],[480,71,380,73],[480,72,380,74],[480,75,380,77],[480,80,380,82],[480,81,380,83],[480,84,380,86,"options"],[480,91,380,93],[480,92,380,94,"download"],[480,100,380,102],[480,104,381,14],[480,116,381,26,"options"],[480,123,381,33],[480,124,381,34,"download"],[480,132,381,42],[480,137,381,47],[480,141,381,51],[480,144,381,54],[480,146,381,56],[480,149,381,59,"options"],[480,156,381,66],[480,157,381,67,"download"],[480,165,381,75],[480,167,381,77],[480,170,382,14],[480,172,382,16],[481,6,383,8],[481,10,383,12,"downloadQueryParam"],[481,28,383,30],[481,33,383,35],[481,35,383,37],[481,37,383,39],[482,8,384,12,"_queryString"],[482,20,384,24],[482,21,384,25,"push"],[482,25,384,29],[482,26,384,30,"downloadQueryParam"],[482,44,384,48],[482,45,384,49],[483,6,385,8],[484,6,386,8],[484,12,386,14,"wantsTransformation"],[484,31,386,33],[484,34,386,36],[484,42,386,44,"options"],[484,49,386,51],[484,54,386,56],[484,58,386,60],[484,62,386,64,"options"],[484,69,386,71],[484,74,386,76],[484,79,386,81],[484,80,386,82],[484,83,386,85],[484,88,386,90],[484,89,386,91],[484,92,386,94,"options"],[484,99,386,101],[484,100,386,102,"transform"],[484,109,386,111],[484,110,386,112],[484,115,386,117],[484,126,386,128],[485,6,387,8],[485,12,387,14,"renderPath"],[485,22,387,24],[485,25,387,27,"wantsTransformation"],[485,44,387,46],[485,47,387,49],[485,61,387,63],[485,64,387,66],[485,72,387,74],[486,6,388,8],[486,12,388,14,"transformationQuery"],[486,31,388,33],[486,34,388,36],[486,38,388,40],[486,39,388,41,"transformOptsToQueryString"],[486,65,388,67],[486,66,388,68],[486,67,388,69,"options"],[486,74,388,76],[486,79,388,81],[486,83,388,85],[486,87,388,89,"options"],[486,94,388,96],[486,99,388,101],[486,104,388,106],[486,105,388,107],[486,108,388,110],[486,113,388,115],[486,114,388,116],[486,117,388,119,"options"],[486,124,388,126],[486,125,388,127,"transform"],[486,134,388,136],[486,139,388,141],[486,140,388,142],[486,141,388,143],[486,142,388,144],[487,6,389,8],[487,10,389,12,"transformationQuery"],[487,29,389,31],[487,34,389,36],[487,36,389,38],[487,38,389,40],[488,8,390,12,"_queryString"],[488,20,390,24],[488,21,390,25,"push"],[488,25,390,29],[488,26,390,30,"transformationQuery"],[488,45,390,49],[488,46,390,50],[489,6,391,8],[490,6,392,8],[490,10,392,12,"queryString"],[490,21,392,23],[490,24,392,26,"_queryString"],[490,36,392,38],[490,37,392,39,"join"],[490,41,392,43],[490,42,392,44],[490,45,392,47],[490,46,392,48],[491,6,393,8],[491,10,393,12,"queryString"],[491,21,393,23],[491,26,393,28],[491,28,393,30],[491,30,393,32],[492,8,394,12,"queryString"],[492,19,394,23],[492,22,394,26],[492,26,394,30,"queryString"],[492,37,394,41],[492,39,394,43],[493,6,395,8],[494,6,396,8],[494,13,396,15],[495,8,397,12,"data"],[495,12,397,16],[495,14,397,18],[496,10,397,20,"publicUrl"],[496,19,397,29],[496,21,397,31,"encodeURI"],[496,30,397,40],[496,31,397,41],[496,34,397,44],[496,38,397,48],[496,39,397,49,"url"],[496,42,397,52],[496,46,397,56,"renderPath"],[496,56,397,66],[496,67,397,77,"_path"],[496,72,397,82],[496,75,397,85,"queryString"],[496,86,397,96],[496,88,397,98],[497,8,397,100],[498,6,398,8],[498,7,398,9],[499,4,399,4],[500,4,400,4],[501,0,401,0],[502,0,402,0],[503,0,403,0],[504,0,404,0],[505,4,405,4,"remove"],[505,10,405,10,"remove"],[505,11,405,11,"paths"],[505,16,405,16],[505,18,405,18],[506,6,406,8],[506,13,406,15,"__awaiter"],[506,22,406,24],[506,23,406,25],[506,27,406,29],[506,29,406,31],[506,34,406,36],[506,35,406,37],[506,37,406,39],[506,42,406,44],[506,43,406,45],[506,45,406,47],[506,58,406,60],[507,8,407,12],[507,12,407,16],[508,10,408,16],[508,16,408,22,"data"],[508,20,408,26],[508,23,408,29],[508,29,408,35],[508,33,408,35,"remove"],[508,46,408,41],[508,48,408,42],[508,52,408,46],[508,53,408,47,"fetch"],[508,58,408,52],[508,60,408,54],[508,63,408,57],[508,67,408,61],[508,68,408,62,"url"],[508,71,408,65],[508,82,408,76],[508,86,408,80],[508,87,408,81,"bucketId"],[508,95,408,89],[508,97,408,91],[508,99,408,93],[509,12,408,95,"prefixes"],[509,20,408,103],[509,22,408,105,"paths"],[510,10,408,111],[510,11,408,112],[510,13,408,114],[511,12,408,116,"headers"],[511,19,408,123],[511,21,408,125],[511,25,408,129],[511,26,408,130,"headers"],[512,10,408,138],[512,11,408,139],[512,12,408,140],[513,10,409,16],[513,17,409,23],[514,12,409,25,"data"],[514,16,409,29],[515,12,409,31,"error"],[515,17,409,36],[515,19,409,38],[516,10,409,43],[516,11,409,44],[517,8,410,12],[517,9,410,13],[517,10,411,12],[517,17,411,19,"error"],[517,22,411,24],[517,24,411,26],[518,10,412,16],[518,14,412,20],[518,18,412,20,"isStorageError"],[518,40,412,34],[518,42,412,35,"error"],[518,47,412,40],[518,48,412,41],[518,50,412,43],[519,12,413,20],[519,19,413,27],[520,14,413,29,"data"],[520,18,413,33],[520,20,413,35],[520,24,413,39],[521,14,413,41,"error"],[522,12,413,47],[522,13,413,48],[523,10,414,16],[524,10,415,16],[524,16,415,22,"error"],[524,21,415,27],[525,8,416,12],[526,6,417,8],[526,7,417,9],[526,8,417,10],[527,4,418,4],[528,4,419,4],[529,0,420,0],[530,0,421,0],[531,0,422,0],[532,4,423,4],[533,4,424,4],[534,4,425,4],[535,4,426,4],[536,4,427,4],[537,4,428,4],[538,4,429,4],[539,4,430,4],[540,4,431,4],[541,4,432,4],[542,4,433,4],[543,4,434,4],[544,4,435,4],[545,4,436,4],[546,4,437,4],[547,4,438,4],[548,4,439,4],[549,4,440,4],[550,4,441,4],[551,4,442,4],[552,4,443,4],[553,4,444,4],[554,4,445,4],[555,0,446,0],[556,0,447,0],[557,0,448,0],[558,0,449,0],[559,4,450,4],[560,4,451,4],[561,4,452,4],[562,4,453,4],[563,4,454,4],[564,4,455,4],[565,4,456,4],[566,4,457,4],[567,4,458,4],[568,4,459,4],[569,4,460,4],[570,4,461,4],[571,4,462,4],[572,4,463,4],[573,4,464,4],[574,4,465,4],[575,4,466,4],[576,4,467,4],[577,4,468,4],[578,4,469,4],[579,4,470,4],[580,4,471,4],[581,4,472,4],[582,4,473,4],[583,4,474,4],[584,4,475,4],[585,4,476,4],[586,4,477,4],[587,4,478,4],[588,0,479,0],[589,0,480,0],[590,0,481,0],[591,0,482,0],[592,4,483,4,"list"],[592,8,483,8,"list"],[592,9,483,9,"path"],[592,13,483,13],[592,15,483,15,"options"],[592,22,483,22],[592,24,483,24,"parameters"],[592,34,483,34],[592,36,483,36],[593,6,484,8],[593,13,484,15,"__awaiter"],[593,22,484,24],[593,23,484,25],[593,27,484,29],[593,29,484,31],[593,34,484,36],[593,35,484,37],[593,37,484,39],[593,42,484,44],[593,43,484,45],[593,45,484,47],[593,58,484,60],[594,8,485,12],[594,12,485,16],[595,10,486,16],[595,16,486,22,"body"],[595,20,486,26],[595,23,486,29,"Object"],[595,29,486,35],[595,30,486,36,"assign"],[595,36,486,42],[595,37,486,43,"Object"],[595,43,486,49],[595,44,486,50,"assign"],[595,50,486,56],[595,51,486,57,"Object"],[595,57,486,63],[595,58,486,64,"assign"],[595,64,486,70],[595,65,486,71],[595,66,486,72],[595,67,486,73],[595,69,486,75,"DEFAULT_SEARCH_OPTIONS"],[595,91,486,97],[595,92,486,98],[595,94,486,100,"options"],[595,101,486,107],[595,102,486,108],[595,104,486,110],[596,12,486,112,"prefix"],[596,18,486,118],[596,20,486,120,"path"],[596,24,486,124],[596,28,486,128],[597,10,486,131],[597,11,486,132],[597,12,486,133],[598,10,487,16],[598,16,487,22,"data"],[598,20,487,26],[598,23,487,29],[598,29,487,35],[598,33,487,35,"post"],[598,44,487,39],[598,46,487,40],[598,50,487,44],[598,51,487,45,"fetch"],[598,56,487,50],[598,58,487,52],[598,61,487,55],[598,65,487,59],[598,66,487,60,"url"],[598,69,487,63],[598,85,487,79],[598,89,487,83],[598,90,487,84,"bucketId"],[598,98,487,92],[598,100,487,94],[598,102,487,96,"body"],[598,106,487,100],[598,108,487,102],[599,12,487,104,"headers"],[599,19,487,111],[599,21,487,113],[599,25,487,117],[599,26,487,118,"headers"],[600,10,487,126],[600,11,487,127],[600,13,487,129,"parameters"],[600,23,487,139],[600,24,487,140],[601,10,488,16],[601,17,488,23],[602,12,488,25,"data"],[602,16,488,29],[603,12,488,31,"error"],[603,17,488,36],[603,19,488,38],[604,10,488,43],[604,11,488,44],[605,8,489,12],[605,9,489,13],[605,10,490,12],[605,17,490,19,"error"],[605,22,490,24],[605,24,490,26],[606,10,491,16],[606,14,491,20],[606,18,491,20,"isStorageError"],[606,40,491,34],[606,42,491,35,"error"],[606,47,491,40],[606,48,491,41],[606,50,491,43],[607,12,492,20],[607,19,492,27],[608,14,492,29,"data"],[608,18,492,33],[608,20,492,35],[608,24,492,39],[609,14,492,41,"error"],[610,12,492,47],[610,13,492,48],[611,10,493,16],[612,10,494,16],[612,16,494,22,"error"],[612,21,494,27],[613,8,495,12],[614,6,496,8],[614,7,496,9],[614,8,496,10],[615,4,497,4],[616,4,498,4],[617,0,499,0],[618,0,500,0],[619,0,501,0],[620,0,502,0],[621,4,503,4,"listV2"],[621,10,503,10,"listV2"],[621,11,503,11,"options"],[621,18,503,18],[621,20,503,20,"parameters"],[621,30,503,30],[621,32,503,32],[622,6,504,8],[622,13,504,15,"__awaiter"],[622,22,504,24],[622,23,504,25],[622,27,504,29],[622,29,504,31],[622,34,504,36],[622,35,504,37],[622,37,504,39],[622,42,504,44],[622,43,504,45],[622,45,504,47],[622,58,504,60],[623,8,505,12],[623,12,505,16],[624,10,506,16],[624,16,506,22,"body"],[624,20,506,26],[624,23,506,29,"Object"],[624,29,506,35],[624,30,506,36,"assign"],[624,36,506,42],[624,37,506,43],[624,38,506,44],[624,39,506,45],[624,41,506,47,"options"],[624,48,506,54],[624,49,506,55],[625,10,507,16],[625,16,507,22,"data"],[625,20,507,26],[625,23,507,29],[625,29,507,35],[625,33,507,35,"post"],[625,44,507,39],[625,46,507,40],[625,50,507,44],[625,51,507,45,"fetch"],[625,56,507,50],[625,58,507,52],[625,61,507,55],[625,65,507,59],[625,66,507,60,"url"],[625,69,507,63],[625,88,507,82],[625,92,507,86],[625,93,507,87,"bucketId"],[625,101,507,95],[625,103,507,97],[625,105,507,99,"body"],[625,109,507,103],[625,111,507,105],[626,12,507,107,"headers"],[626,19,507,114],[626,21,507,116],[626,25,507,120],[626,26,507,121,"headers"],[627,10,507,129],[627,11,507,130],[627,13,507,132,"parameters"],[627,23,507,142],[627,24,507,143],[628,10,508,16],[628,17,508,23],[629,12,508,25,"data"],[629,16,508,29],[630,12,508,31,"error"],[630,17,508,36],[630,19,508,38],[631,10,508,43],[631,11,508,44],[632,8,509,12],[632,9,509,13],[632,10,510,12],[632,17,510,19,"error"],[632,22,510,24],[632,24,510,26],[633,10,511,16],[633,14,511,20],[633,18,511,20,"isStorageError"],[633,40,511,34],[633,42,511,35,"error"],[633,47,511,40],[633,48,511,41],[633,50,511,43],[634,12,512,20],[634,19,512,27],[635,14,512,29,"data"],[635,18,512,33],[635,20,512,35],[635,24,512,39],[636,14,512,41,"error"],[637,12,512,47],[637,13,512,48],[638,10,513,16],[639,10,514,16],[639,16,514,22,"error"],[639,21,514,27],[640,8,515,12],[641,6,516,8],[641,7,516,9],[641,8,516,10],[642,4,517,4],[643,4,518,4,"encodeMetadata"],[643,18,518,18,"encodeMetadata"],[643,19,518,19,"metadata"],[643,27,518,27],[643,29,518,29],[644,6,519,8],[644,13,519,15,"JSON"],[644,17,519,19],[644,18,519,20,"stringify"],[644,27,519,29],[644,28,519,30,"metadata"],[644,36,519,38],[644,37,519,39],[645,4,520,4],[646,4,521,4,"toBase64"],[646,12,521,12,"toBase64"],[646,13,521,13,"data"],[646,17,521,17],[646,19,521,19],[647,6,522,8],[647,10,522,12],[647,17,522,19,"Buffer"],[647,23,522,25],[647,28,522,30],[647,39,522,41],[647,41,522,43],[648,8,523,12],[648,15,523,19,"Buffer"],[648,21,523,25],[648,22,523,26,"from"],[648,26,523,30],[648,27,523,31,"data"],[648,31,523,35],[648,32,523,36],[648,33,523,37,"toString"],[648,41,523,45],[648,42,523,46],[648,50,523,54],[648,51,523,55],[649,6,524,8],[650,6,525,8],[650,13,525,15,"btoa"],[650,17,525,19],[650,18,525,20,"data"],[650,22,525,24],[650,23,525,25],[651,4,526,4],[652,4,527,4,"_getFinalPath"],[652,17,527,17,"_getFinalPath"],[652,18,527,18,"path"],[652,22,527,22],[652,24,527,24],[653,6,528,8],[653,13,528,15],[653,16,528,18],[653,20,528,22],[653,21,528,23,"bucketId"],[653,29,528,31],[653,33,528,35,"path"],[653,37,528,39],[653,38,528,40,"replace"],[653,45,528,47],[653,46,528,48],[653,52,528,54],[653,54,528,56],[653,56,528,58],[653,57,528,59],[653,59,528,61],[654,4,529,4],[655,4,530,4,"_removeEmptyFolders"],[655,23,530,23,"_removeEmptyFolders"],[655,24,530,24,"path"],[655,28,530,28],[655,30,530,30],[656,6,531,8],[656,13,531,15,"path"],[656,17,531,19],[656,18,531,20,"replace"],[656,25,531,27],[656,26,531,28],[656,36,531,38],[656,38,531,40],[656,40,531,42],[656,41,531,43],[656,42,531,44,"replace"],[656,49,531,51],[656,50,531,52],[656,56,531,58],[656,58,531,60],[656,61,531,63],[656,62,531,64],[657,4,532,4],[658,4,533,4,"transformOptsToQueryString"],[658,30,533,30,"transformOptsToQueryString"],[658,31,533,31,"transform"],[658,40,533,40],[658,42,533,42],[659,6,534,8],[659,12,534,14,"params"],[659,18,534,20],[659,21,534,23],[659,23,534,25],[660,6,535,8],[660,10,535,12,"transform"],[660,19,535,21],[660,20,535,22,"width"],[660,25,535,27],[660,27,535,29],[661,8,536,12,"params"],[661,14,536,18],[661,15,536,19,"push"],[661,19,536,23],[661,20,536,24],[661,29,536,33,"transform"],[661,38,536,42],[661,39,536,43,"width"],[661,44,536,48],[661,46,536,50],[661,47,536,51],[662,6,537,8],[663,6,538,8],[663,10,538,12,"transform"],[663,19,538,21],[663,20,538,22,"height"],[663,26,538,28],[663,28,538,30],[664,8,539,12,"params"],[664,14,539,18],[664,15,539,19,"push"],[664,19,539,23],[664,20,539,24],[664,30,539,34,"transform"],[664,39,539,43],[664,40,539,44,"height"],[664,46,539,50],[664,48,539,52],[664,49,539,53],[665,6,540,8],[666,6,541,8],[666,10,541,12,"transform"],[666,19,541,21],[666,20,541,22,"resize"],[666,26,541,28],[666,28,541,30],[667,8,542,12,"params"],[667,14,542,18],[667,15,542,19,"push"],[667,19,542,23],[667,20,542,24],[667,30,542,34,"transform"],[667,39,542,43],[667,40,542,44,"resize"],[667,46,542,50],[667,48,542,52],[667,49,542,53],[668,6,543,8],[669,6,544,8],[669,10,544,12,"transform"],[669,19,544,21],[669,20,544,22,"format"],[669,26,544,28],[669,28,544,30],[670,8,545,12,"params"],[670,14,545,18],[670,15,545,19,"push"],[670,19,545,23],[670,20,545,24],[670,30,545,34,"transform"],[670,39,545,43],[670,40,545,44,"format"],[670,46,545,50],[670,48,545,52],[670,49,545,53],[671,6,546,8],[672,6,547,8],[672,10,547,12,"transform"],[672,19,547,21],[672,20,547,22,"quality"],[672,27,547,29],[672,29,547,31],[673,8,548,12,"params"],[673,14,548,18],[673,15,548,19,"push"],[673,19,548,23],[673,20,548,24],[673,31,548,35,"transform"],[673,40,548,44],[673,41,548,45,"quality"],[673,48,548,52],[673,50,548,54],[673,51,548,55],[674,6,549,8],[675,6,550,8],[675,13,550,15,"params"],[675,19,550,21],[675,20,550,22,"join"],[675,24,550,26],[675,25,550,27],[675,28,550,30],[675,29,550,31],[676,4,551,4],[677,2,552,0],[678,2,552,1,"exports"],[678,9,552,1],[678,10,552,1,"default"],[678,17,552,1],[678,20,552,1,"StorageFileApi"],[678,34,552,1],[679,0,552,1],[679,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;eOiB;ICC;KDK;IEQ;+CCC;SD8C;KFC;IIO;+CDC;SCE;KJC;IKO;+CFC;SEmC;KLC;IMQ;+CHC;SGqB;KNC;IOO;+CJC;SIE;KPC;IQQ;+CLC;SKgB;KRC;ISQ;+CNC;SMgB;KTC;IUS;+CPC;SOiB;KVC;IWQ;+CRC;mCSO;sCTE;SQU;KXC;IaO;+CVC;SUoB;KbC;IcK;+CXC;SWc;KdC;IeK;+CZC;SYiB;KfC;IgBS;KhBsB;IiBM;+CdC;ScW;KjBC;IkBiE;+CfC;SeY;KlBC;ImBM;+ChBC;SgBY;KnBC;IoBC;KpBE;IqBC;KrBK;IsBC;KtBE;IuBC;KvBE;IwBC;KxBkB;CPC"}},"type":"js/module"}]}