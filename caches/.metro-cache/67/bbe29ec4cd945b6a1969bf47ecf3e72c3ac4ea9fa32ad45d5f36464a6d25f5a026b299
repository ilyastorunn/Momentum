{"dependencies":[{"name":"./polyfills/interactionCountPolyfill.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"0MuBAjXYJzqIS93aKiU6tlqsUTU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.processInteractionEntry = exports.longestInteractionMap = exports.longestInteractionList = exports.estimateP98LongestInteraction = exports.entryPreProcessingCallbacks = exports.DEFAULT_DURATION_THRESHOLD = void 0;\n  var _interactionCountPolyfill = require(_dependencyMap[0], \"./polyfills/interactionCountPolyfill.js\");\n  /*\n   * Copyright 2024 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     https://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  // A list of longest interactions on the page (by latency) sorted so the\n  // longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER long.\n  const longestInteractionList = exports.longestInteractionList = [];\n\n  // A mapping of longest interactions by their interaction ID.\n  // This is used for faster lookup.\n  const longestInteractionMap = exports.longestInteractionMap = new Map();\n\n  // The default `durationThreshold` used across this library for observing\n  // `event` entries via PerformanceObserver.\n  const DEFAULT_DURATION_THRESHOLD = exports.DEFAULT_DURATION_THRESHOLD = 40;\n\n  // Used to store the interaction count after a bfcache restore, since p98\n  // interaction latencies should only consider the current navigation.\n  let prevInteractionCount = 0;\n\n  /**\n   * Returns the interaction count since the last bfcache restore (or for the\n   * full page lifecycle if there were no bfcache restores).\n   */\n  const getInteractionCountForNavigation = () => {\n    return (0, _interactionCountPolyfill.getInteractionCount)() - prevInteractionCount;\n  };\n\n  /**\n   * Returns the estimated p98 longest interaction based on the stored\n   * interaction candidates and the interaction count for the current page.\n   */\n  const estimateP98LongestInteraction = () => {\n    const candidateInteractionIndex = Math.min(longestInteractionList.length - 1, Math.floor(getInteractionCountForNavigation() / 50));\n    return longestInteractionList[candidateInteractionIndex];\n  };\n\n  // To prevent unnecessary memory usage on pages with lots of interactions,\n  // store at most 10 of the longest interactions to consider as INP candidates.\n  exports.estimateP98LongestInteraction = estimateP98LongestInteraction;\n  const MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n  /**\n   * A list of callback functions to run before each entry is processed.\n   * Exposing this list allows the attribution build to hook into the\n   * entry processing pipeline.\n   */\n  const entryPreProcessingCallbacks = exports.entryPreProcessingCallbacks = [];\n\n  /**\n   * Takes a performance entry and adds it to the list of worst interactions\n   * if its duration is long enough to make it among the worst. If the\n   * entry is part of an existing interaction, it is merged and the latency\n   * and entries list is updated as needed.\n   */\n  const processInteractionEntry = entry => {\n    entryPreProcessingCallbacks.forEach(cb => cb(entry));\n\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n    const existingInteraction = longestInteractionMap.get(entry.interactionId);\n\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (existingInteraction || longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER || minLongestInteraction && entry.duration > minLongestInteraction.latency) {\n      // If the interaction already exists, update it. Otherwise create one.\n      if (existingInteraction) {\n        // If the new entry has a longer duration, replace the old entries,\n        // otherwise add to the array.\n        if (entry.duration > existingInteraction.latency) {\n          existingInteraction.entries = [entry];\n          existingInteraction.latency = entry.duration;\n        } else if (entry.duration === existingInteraction.latency && entry.startTime === (existingInteraction.entries[0] && existingInteraction.entries[0].startTime)) {\n          existingInteraction.entries.push(entry);\n        }\n      } else {\n        const interaction = {\n          id: entry.interactionId,\n          latency: entry.duration,\n          entries: [entry]\n        };\n        longestInteractionMap.set(interaction.id, interaction);\n        longestInteractionList.push(interaction);\n      }\n\n      // Sort the entries by latency (descending) and keep only the top ten.\n      longestInteractionList.sort((a, b) => b.latency - a.latency);\n      if (longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n        longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => longestInteractionMap.delete(i.id));\n      }\n    }\n  };\n  exports.processInteractionEntry = processInteractionEntry;\n});","lineCount":115,"map":[[6,2,1,0],[6,6,1,0,"_interactionCountPolyfill"],[6,31,1,0],[6,34,1,0,"require"],[6,41,1,0],[6,42,1,0,"_dependencyMap"],[6,56,1,0],[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[23,2,20,0],[24,2,21,0],[25,2,22,0],[25,8,22,6,"longestInteractionList"],[25,30,22,28],[25,33,22,28,"exports"],[25,40,22,28],[25,41,22,28,"longestInteractionList"],[25,63,22,28],[25,66,22,31],[25,68,22,33],[27,2,24,0],[28,2,25,0],[29,2,26,0],[29,8,26,6,"longestInteractionMap"],[29,29,26,27],[29,32,26,27,"exports"],[29,39,26,27],[29,40,26,27,"longestInteractionMap"],[29,61,26,27],[29,64,26,30],[29,68,26,34,"Map"],[29,71,26,37],[29,72,26,38],[29,73,26,39],[31,2,28,0],[32,2,29,0],[33,2,30,0],[33,8,30,6,"DEFAULT_DURATION_THRESHOLD"],[33,34,30,32],[33,37,30,32,"exports"],[33,44,30,32],[33,45,30,32,"DEFAULT_DURATION_THRESHOLD"],[33,71,30,32],[33,74,30,35],[33,76,30,37],[35,2,32,0],[36,2,33,0],[37,2,34,0],[37,6,34,4,"prevInteractionCount"],[37,26,34,24],[37,29,34,27],[37,30,34,28],[39,2,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,2,40,0],[43,8,40,6,"getInteractionCountForNavigation"],[43,40,40,38],[43,43,40,41,"getInteractionCountForNavigation"],[43,44,40,41],[43,49,40,47],[44,4,41,2],[44,11,41,9],[44,15,41,9,"getInteractionCount"],[44,60,41,28],[44,62,41,29],[44,63,41,30],[44,66,41,33,"prevInteractionCount"],[44,86,41,53],[45,2,42,0],[45,3,42,1],[47,2,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,2,48,0],[51,8,48,6,"estimateP98LongestInteraction"],[51,37,48,35],[51,40,48,38,"estimateP98LongestInteraction"],[51,41,48,38],[51,46,48,44],[52,4,49,2],[52,10,49,8,"candidateInteractionIndex"],[52,35,49,33],[52,38,49,36,"Math"],[52,42,49,40],[52,43,49,41,"min"],[52,46,49,44],[52,47,50,4,"longestInteractionList"],[52,69,50,26],[52,70,50,27,"length"],[52,76,50,33],[52,79,50,36],[52,80,50,37],[52,82,51,4,"Math"],[52,86,51,8],[52,87,51,9,"floor"],[52,92,51,14],[52,93,51,15,"getInteractionCountForNavigation"],[52,125,51,47],[52,126,51,48],[52,127,51,49],[52,130,51,52],[52,132,51,54],[52,133,52,2],[52,134,52,3],[53,4,54,2],[53,11,54,9,"longestInteractionList"],[53,33,54,31],[53,34,54,32,"candidateInteractionIndex"],[53,59,54,57],[53,60,54,58],[54,2,55,0],[54,3,55,1],[56,2,57,0],[57,2,58,0],[58,2,58,0,"exports"],[58,9,58,0],[58,10,58,0,"estimateP98LongestInteraction"],[58,39,58,0],[58,42,58,0,"estimateP98LongestInteraction"],[58,71,58,0],[59,2,59,0],[59,8,59,6,"MAX_INTERACTIONS_TO_CONSIDER"],[59,36,59,34],[59,39,59,37],[59,41,59,39],[61,2,61,0],[62,0,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,2,66,0],[66,8,66,6,"entryPreProcessingCallbacks"],[66,35,66,33],[66,38,66,33,"exports"],[66,45,66,33],[66,46,66,33,"entryPreProcessingCallbacks"],[66,73,66,33],[66,76,66,36],[66,78,66,38],[68,2,68,0],[69,0,69,0],[70,0,70,0],[71,0,71,0],[72,0,72,0],[73,0,73,0],[74,2,74,0],[74,8,74,6,"processInteractionEntry"],[74,31,74,29],[74,34,74,33,"entry"],[74,39,74,38],[74,43,74,43],[75,4,75,2,"entryPreProcessingCallbacks"],[75,31,75,29],[75,32,75,30,"forEach"],[75,39,75,37],[75,40,75,38,"cb"],[75,42,75,40],[75,46,75,44,"cb"],[75,48,75,46],[75,49,75,47,"entry"],[75,54,75,52],[75,55,75,53],[75,56,75,54],[77,4,77,2],[78,4,78,2],[78,8,78,6],[78,10,78,8,"entry"],[78,15,78,13],[78,16,78,14,"interactionId"],[78,29,78,27],[78,33,78,31,"entry"],[78,38,78,36],[78,39,78,37,"entryType"],[78,48,78,46],[78,53,78,51],[78,66,78,64],[78,67,78,65],[78,69,78,67],[80,4,80,2],[81,4,81,2],[81,10,81,8,"minLongestInteraction"],[81,31,81,29],[81,34,81,32,"longestInteractionList"],[81,56,81,54],[81,57,81,55,"longestInteractionList"],[81,79,81,77],[81,80,81,78,"length"],[81,86,81,84],[81,89,81,87],[81,90,81,88],[81,91,81,89],[82,4,83,2],[82,10,83,8,"existingInteraction"],[82,29,83,27],[82,32,83,30,"longestInteractionMap"],[82,53,83,51],[82,54,83,52,"get"],[82,57,83,55],[82,58,83,56,"entry"],[82,63,83,61],[82,64,83,62,"interactionId"],[82,77,83,75],[82,78,83,76],[84,4,85,2],[85,4,86,2],[86,4,87,2],[86,8,88,4,"existingInteraction"],[86,27,88,23],[86,31,89,4,"longestInteractionList"],[86,53,89,26],[86,54,89,27,"length"],[86,60,89,33],[86,63,89,36,"MAX_INTERACTIONS_TO_CONSIDER"],[86,91,89,64],[86,95,90,5,"minLongestInteraction"],[86,116,90,26],[86,120,90,30,"entry"],[86,125,90,35],[86,126,90,36,"duration"],[86,134,90,44],[86,137,90,47,"minLongestInteraction"],[86,158,90,68],[86,159,90,69,"latency"],[86,166,90,77],[86,168,91,4],[87,6,92,4],[88,6,93,4],[88,10,93,8,"existingInteraction"],[88,29,93,27],[88,31,93,29],[89,8,94,6],[90,8,95,6],[91,8,96,6],[91,12,96,10,"entry"],[91,17,96,15],[91,18,96,16,"duration"],[91,26,96,24],[91,29,96,27,"existingInteraction"],[91,48,96,46],[91,49,96,47,"latency"],[91,56,96,54],[91,58,96,56],[92,10,97,8,"existingInteraction"],[92,29,97,27],[92,30,97,28,"entries"],[92,37,97,35],[92,40,97,38],[92,41,97,39,"entry"],[92,46,97,44],[92,47,97,45],[93,10,98,8,"existingInteraction"],[93,29,98,27],[93,30,98,28,"latency"],[93,37,98,35],[93,40,98,38,"entry"],[93,45,98,43],[93,46,98,44,"duration"],[93,54,98,52],[94,8,99,6],[94,9,99,7],[94,15,99,13],[94,19,100,8,"entry"],[94,24,100,13],[94,25,100,14,"duration"],[94,33,100,22],[94,38,100,27,"existingInteraction"],[94,57,100,46],[94,58,100,47,"latency"],[94,65,100,54],[94,69,101,8,"entry"],[94,74,101,13],[94,75,101,14,"startTime"],[94,84,101,23],[94,90,101,29,"existingInteraction"],[94,109,101,48],[94,110,101,49,"entries"],[94,117,101,56],[94,118,101,57],[94,119,101,58],[94,120,101,59],[94,124,101,63,"existingInteraction"],[94,143,101,82],[94,144,101,83,"entries"],[94,151,101,90],[94,152,101,91],[94,153,101,92],[94,154,101,93],[94,155,101,94,"startTime"],[94,164,101,103],[94,165,101,104],[94,167,102,8],[95,10,103,8,"existingInteraction"],[95,29,103,27],[95,30,103,28,"entries"],[95,37,103,35],[95,38,103,36,"push"],[95,42,103,40],[95,43,103,41,"entry"],[95,48,103,46],[95,49,103,47],[96,8,104,6],[97,6,105,4],[97,7,105,5],[97,13,105,11],[98,8,106,6],[98,14,106,12,"interaction"],[98,25,106,23],[98,28,106,26],[99,10,107,8,"id"],[99,12,107,10],[99,14,107,12,"entry"],[99,19,107,17],[99,20,107,18,"interactionId"],[99,33,107,31],[100,10,108,8,"latency"],[100,17,108,15],[100,19,108,17,"entry"],[100,24,108,22],[100,25,108,23,"duration"],[100,33,108,31],[101,10,109,8,"entries"],[101,17,109,15],[101,19,109,17],[101,20,109,18,"entry"],[101,25,109,23],[102,8,110,6],[102,9,110,7],[103,8,111,6,"longestInteractionMap"],[103,29,111,27],[103,30,111,28,"set"],[103,33,111,31],[103,34,111,32,"interaction"],[103,45,111,43],[103,46,111,44,"id"],[103,48,111,46],[103,50,111,48,"interaction"],[103,61,111,59],[103,62,111,60],[104,8,112,6,"longestInteractionList"],[104,30,112,28],[104,31,112,29,"push"],[104,35,112,33],[104,36,112,34,"interaction"],[104,47,112,45],[104,48,112,46],[105,6,113,4],[107,6,115,4],[108,6,116,4,"longestInteractionList"],[108,28,116,26],[108,29,116,27,"sort"],[108,33,116,31],[108,34,116,32],[108,35,116,33,"a"],[108,36,116,34],[108,38,116,36,"b"],[108,39,116,37],[108,44,116,42,"b"],[108,45,116,43],[108,46,116,44,"latency"],[108,53,116,51],[108,56,116,54,"a"],[108,57,116,55],[108,58,116,56,"latency"],[108,65,116,63],[108,66,116,64],[109,6,117,4],[109,10,117,8,"longestInteractionList"],[109,32,117,30],[109,33,117,31,"length"],[109,39,117,37],[109,42,117,40,"MAX_INTERACTIONS_TO_CONSIDER"],[109,70,117,68],[109,72,117,70],[110,8,118,6,"longestInteractionList"],[110,30,118,28],[110,31,118,29,"splice"],[110,37,118,35],[110,38,118,36,"MAX_INTERACTIONS_TO_CONSIDER"],[110,66,118,64],[110,67,118,65],[110,68,118,66,"forEach"],[110,75,118,73],[110,76,118,74,"i"],[110,77,118,75],[110,81,118,79,"longestInteractionMap"],[110,102,118,100],[110,103,118,101,"delete"],[110,109,118,107],[110,110,118,108,"i"],[110,111,118,109],[110,112,118,110,"id"],[110,114,118,112],[110,115,118,113],[110,116,118,114],[111,6,119,4],[112,4,120,2],[113,2,121,0],[113,3,121,1],[114,2,121,2,"exports"],[114,9,121,2],[114,10,121,2,"processInteractionEntry"],[114,33,121,2],[114,36,121,2,"processInteractionEntry"],[114,59,121,2],[115,0,121,2],[115,3]],"functionMap":{"names":["<global>","getInteractionCountForNavigation","estimateP98LongestInteraction","processInteractionEntry","entryPreProcessingCallbacks.forEach$argument_0","longestInteractionList.sort$argument_0","longestInteractionList.splice.forEach$argument_0"],"mappings":"AAA;yCCuC;CDE;sCEM;CFO;gCGmB;sCCC,eD;gCEyC,+BF;0EGE,uCH;CHG"}},"type":"js/module"}]}