{"dependencies":[{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":48,"index":103}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../semanticAttributes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":115,"index":219}}],"key":"Ovsn9ORXEwSazI36ru//KBDD8LQ=","exportNames":["*"]}},{"name":"../utils-hoist/baggage.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":220},"end":{"line":4,"column":127,"index":347}}],"key":"7E4L6t6LLucAUNle9HwLRERiQfY=","exportNames":["*"]}},{"name":"../utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":348},"end":{"line":5,"column":87,"index":435}}],"key":"IWRGqGXR51VGNaoabCqwsNvBzK0=","exportNames":["*"]}},{"name":"../utils/hasTracingEnabled.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":436},"end":{"line":6,"column":66,"index":502}}],"key":"SyK4SleOU+9x9l8aHJ9lO4+iDQU=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":503},"end":{"line":7,"column":79,"index":582}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.freezeDscOnSpan = freezeDscOnSpan;\n  exports.getDynamicSamplingContextFromClient = getDynamicSamplingContextFromClient;\n  exports.getDynamicSamplingContextFromScope = getDynamicSamplingContextFromScope;\n  exports.getDynamicSamplingContextFromSpan = getDynamicSamplingContextFromSpan;\n  exports.spanToBaggageHeader = spanToBaggageHeader;\n  var _constants = require(_dependencyMap[0], \"../constants.js\");\n  var _currentScopes = require(_dependencyMap[1], \"../currentScopes.js\");\n  var _semanticAttributes = require(_dependencyMap[2], \"../semanticAttributes.js\");\n  var _baggage = require(_dependencyMap[3], \"../utils-hoist/baggage.js\");\n  var _object = require(_dependencyMap[4], \"../utils-hoist/object.js\");\n  var _hasTracingEnabled = require(_dependencyMap[5], \"../utils/hasTracingEnabled.js\");\n  var _spanUtils = require(_dependencyMap[6], \"../utils/spanUtils.js\");\n  /**\n   * If you change this value, also update the terser plugin config to\n   * avoid minification of the object property!\n   */\n  const FROZEN_DSC_FIELD = '_frozenDsc';\n\n  /**\n   * Freeze the given DSC on the given span.\n   */\n  function freezeDscOnSpan(span, dsc) {\n    const spanWithMaybeDsc = span;\n    (0, _object.addNonEnumerableProperty)(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n  }\n\n  /**\n   * Creates a dynamic sampling context from a client.\n   *\n   * Dispatches the `createDsc` lifecycle hook as a side effect.\n   */\n  function getDynamicSamplingContextFromClient(trace_id, client) {\n    const options = client.getOptions();\n    const {\n      publicKey: public_key\n    } = client.getDsn() || {};\n    const dsc = (0, _object.dropUndefinedKeys)({\n      environment: options.environment || _constants.DEFAULT_ENVIRONMENT,\n      release: options.release,\n      public_key,\n      trace_id\n    });\n    client.emit('createDsc', dsc);\n    return dsc;\n  }\n\n  /**\n   * Get the dynamic sampling context for the currently active scopes.\n   */\n  function getDynamicSamplingContextFromScope(client, scope) {\n    const propagationContext = scope.getPropagationContext();\n    return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n  }\n\n  /**\n   * Creates a dynamic sampling context from a span (and client and scope)\n   *\n   * @param span the span from which a few values like the root span name and sample rate are extracted.\n   *\n   * @returns a dynamic sampling context\n   */\n  function getDynamicSamplingContextFromSpan(span) {\n    const client = (0, _currentScopes.getClient)();\n    if (!client) {\n      return {};\n    }\n    const rootSpan = (0, _spanUtils.getRootSpan)(span);\n\n    // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n    const frozenDsc = rootSpan[FROZEN_DSC_FIELD];\n    if (frozenDsc) {\n      return frozenDsc;\n    }\n\n    // For OpenTelemetry, we freeze the DSC on the trace state\n    const traceState = rootSpan.spanContext().traceState;\n    const traceStateDsc = traceState && traceState.get('sentry.dsc');\n\n    // If the span has a DSC, we want it to take precedence\n    const dscOnTraceState = traceStateDsc && (0, _baggage.baggageHeaderToDynamicSamplingContext)(traceStateDsc);\n    if (dscOnTraceState) {\n      return dscOnTraceState;\n    }\n\n    // Else, we generate it from the span\n    const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n    const jsonSpan = (0, _spanUtils.spanToJSON)(rootSpan);\n    const attributes = jsonSpan.data || {};\n    const maybeSampleRate = attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n    if (maybeSampleRate != null) {\n      dsc.sample_rate = `${maybeSampleRate}`;\n    }\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const source = attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    // after JSON conversion, txn.name becomes jsonSpan.description\n    const name = jsonSpan.description;\n    if (source !== 'url' && name) {\n      dsc.transaction = name;\n    }\n\n    // How can we even land here with hasTracingEnabled() returning false?\n    // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n    // So we end up with an active span that is not sampled (neither positively nor negatively)\n    if ((0, _hasTracingEnabled.hasTracingEnabled)()) {\n      dsc.sampled = String((0, _spanUtils.spanIsSampled)(rootSpan));\n    }\n    client.emit('createDsc', dsc, rootSpan);\n    return dsc;\n  }\n\n  /**\n   * Convert a Span to a baggage header.\n   */\n  function spanToBaggageHeader(span) {\n    const dsc = getDynamicSamplingContextFromSpan(span);\n    return (0, _baggage.dynamicSamplingContextToSentryBaggageHeader)(dsc);\n  }\n});","lineCount":124,"map":[[10,2,1,0],[10,6,1,0,"_constants"],[10,16,1,0],[10,19,1,0,"require"],[10,26,1,0],[10,27,1,0,"_dependencyMap"],[10,41,1,0],[11,2,2,0],[11,6,2,0,"_currentScopes"],[11,20,2,0],[11,23,2,0,"require"],[11,30,2,0],[11,31,2,0,"_dependencyMap"],[11,45,2,0],[12,2,3,0],[12,6,3,0,"_semanticAttributes"],[12,25,3,0],[12,28,3,0,"require"],[12,35,3,0],[12,36,3,0,"_dependencyMap"],[12,50,3,0],[13,2,4,0],[13,6,4,0,"_baggage"],[13,14,4,0],[13,17,4,0,"require"],[13,24,4,0],[13,25,4,0,"_dependencyMap"],[13,39,4,0],[14,2,5,0],[14,6,5,0,"_object"],[14,13,5,0],[14,16,5,0,"require"],[14,23,5,0],[14,24,5,0,"_dependencyMap"],[14,38,5,0],[15,2,6,0],[15,6,6,0,"_hasTracingEnabled"],[15,24,6,0],[15,27,6,0,"require"],[15,34,6,0],[15,35,6,0,"_dependencyMap"],[15,49,6,0],[16,2,7,0],[16,6,7,0,"_spanUtils"],[16,16,7,0],[16,19,7,0,"require"],[16,26,7,0],[16,27,7,0,"_dependencyMap"],[16,41,7,0],[17,2,9,0],[18,0,10,0],[19,0,11,0],[20,0,12,0],[21,2,13,0],[21,8,13,6,"FROZEN_DSC_FIELD"],[21,24,13,22],[21,27,13,25],[21,39,13,37],[23,2,15,0],[24,0,16,0],[25,0,17,0],[26,2,18,0],[26,11,18,9,"freezeDscOnSpan"],[26,26,18,24,"freezeDscOnSpan"],[26,27,18,25,"span"],[26,31,18,29],[26,33,18,31,"dsc"],[26,36,18,34],[26,38,18,36],[27,4,19,2],[27,10,19,8,"spanWithMaybeDsc"],[27,26,19,24],[27,29,19,27,"span"],[27,33,19,31],[28,4,20,2],[28,8,20,2,"addNonEnumerableProperty"],[28,40,20,26],[28,42,20,27,"spanWithMaybeDsc"],[28,58,20,43],[28,60,20,45,"FROZEN_DSC_FIELD"],[28,76,20,61],[28,78,20,63,"dsc"],[28,81,20,66],[28,82,20,67],[29,2,21,0],[31,2,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,2,28,0],[36,11,28,9,"getDynamicSamplingContextFromClient"],[36,46,28,44,"getDynamicSamplingContextFromClient"],[36,47,28,45,"trace_id"],[36,55,28,53],[36,57,28,55,"client"],[36,63,28,61],[36,65,28,63],[37,4,29,2],[37,10,29,8,"options"],[37,17,29,15],[37,20,29,18,"client"],[37,26,29,24],[37,27,29,25,"getOptions"],[37,37,29,35],[37,38,29,36],[37,39,29,37],[38,4,31,2],[38,10,31,8],[39,6,31,10,"publicKey"],[39,15,31,19],[39,17,31,21,"public_key"],[40,4,31,32],[40,5,31,33],[40,8,31,36,"client"],[40,14,31,42],[40,15,31,43,"getDsn"],[40,21,31,49],[40,22,31,50],[40,23,31,51],[40,27,31,55],[40,28,31,56],[40,29,31,57],[41,4,33,2],[41,10,33,8,"dsc"],[41,13,33,11],[41,16,33,14],[41,20,33,14,"dropUndefinedKeys"],[41,45,33,31],[41,47,33,32],[42,6,34,4,"environment"],[42,17,34,15],[42,19,34,17,"options"],[42,26,34,24],[42,27,34,25,"environment"],[42,38,34,36],[42,42,34,40,"DEFAULT_ENVIRONMENT"],[42,72,34,59],[43,6,35,4,"release"],[43,13,35,11],[43,15,35,13,"options"],[43,22,35,20],[43,23,35,21,"release"],[43,30,35,28],[44,6,36,4,"public_key"],[44,16,36,14],[45,6,37,4,"trace_id"],[46,4,38,2],[46,5,38,3],[46,6,38,4],[47,4,40,2,"client"],[47,10,40,8],[47,11,40,9,"emit"],[47,15,40,13],[47,16,40,14],[47,27,40,25],[47,29,40,27,"dsc"],[47,32,40,30],[47,33,40,31],[48,4,42,2],[48,11,42,9,"dsc"],[48,14,42,12],[49,2,43,0],[51,2,45,0],[52,0,46,0],[53,0,47,0],[54,2,48,0],[54,11,48,9,"getDynamicSamplingContextFromScope"],[54,45,48,43,"getDynamicSamplingContextFromScope"],[54,46,48,44,"client"],[54,52,48,50],[54,54,48,52,"scope"],[54,59,48,57],[54,61,48,59],[55,4,49,2],[55,10,49,8,"propagationContext"],[55,28,49,26],[55,31,49,29,"scope"],[55,36,49,34],[55,37,49,35,"getPropagationContext"],[55,58,49,56],[55,59,49,57],[55,60,49,58],[56,4,50,2],[56,11,50,9,"propagationContext"],[56,29,50,27],[56,30,50,28,"dsc"],[56,33,50,31],[56,37,50,35,"getDynamicSamplingContextFromClient"],[56,72,50,70],[56,73,50,71,"propagationContext"],[56,91,50,89],[56,92,50,90,"traceId"],[56,99,50,97],[56,101,50,99,"client"],[56,107,50,105],[56,108,50,106],[57,2,51,0],[59,2,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,2,60,0],[66,11,60,9,"getDynamicSamplingContextFromSpan"],[66,44,60,42,"getDynamicSamplingContextFromSpan"],[66,45,60,43,"span"],[66,49,60,47],[66,51,60,49],[67,4,61,2],[67,10,61,8,"client"],[67,16,61,14],[67,19,61,17],[67,23,61,17,"getClient"],[67,47,61,26],[67,49,61,27],[67,50,61,28],[68,4,62,2],[68,8,62,6],[68,9,62,7,"client"],[68,15,62,13],[68,17,62,15],[69,6,63,4],[69,13,63,11],[69,14,63,12],[69,15,63,13],[70,4,64,2],[71,4,66,2],[71,10,66,8,"rootSpan"],[71,18,66,16],[71,21,66,19],[71,25,66,19,"getRootSpan"],[71,47,66,30],[71,49,66,31,"span"],[71,53,66,35],[71,54,66,36],[73,4,68,2],[74,4,69,2],[74,10,69,8,"frozenDsc"],[74,19,69,17],[74,22,69,21,"rootSpan"],[74,30,69,29],[74,31,69,32,"FROZEN_DSC_FIELD"],[74,47,69,48],[74,48,69,49],[75,4,70,2],[75,8,70,6,"frozenDsc"],[75,17,70,15],[75,19,70,17],[76,6,71,4],[76,13,71,11,"frozenDsc"],[76,22,71,20],[77,4,72,2],[79,4,74,2],[80,4,75,2],[80,10,75,8,"traceState"],[80,20,75,18],[80,23,75,21,"rootSpan"],[80,31,75,29],[80,32,75,30,"spanContext"],[80,43,75,41],[80,44,75,42],[80,45,75,43],[80,46,75,44,"traceState"],[80,56,75,54],[81,4,76,2],[81,10,76,8,"traceStateDsc"],[81,23,76,21],[81,26,76,24,"traceState"],[81,36,76,34],[81,40,76,38,"traceState"],[81,50,76,48],[81,51,76,49,"get"],[81,54,76,52],[81,55,76,53],[81,67,76,65],[81,68,76,66],[83,4,78,2],[84,4,79,2],[84,10,79,8,"dscOnTraceState"],[84,25,79,23],[84,28,79,26,"traceStateDsc"],[84,41,79,39],[84,45,79,43],[84,49,79,43,"baggageHeaderToDynamicSamplingContext"],[84,95,79,80],[84,97,79,81,"traceStateDsc"],[84,110,79,94],[84,111,79,95],[85,4,81,2],[85,8,81,6,"dscOnTraceState"],[85,23,81,21],[85,25,81,23],[86,6,82,4],[86,13,82,11,"dscOnTraceState"],[86,28,82,26],[87,4,83,2],[89,4,85,2],[90,4,86,2],[90,10,86,8,"dsc"],[90,13,86,11],[90,16,86,14,"getDynamicSamplingContextFromClient"],[90,51,86,49],[90,52,86,50,"span"],[90,56,86,54],[90,57,86,55,"spanContext"],[90,68,86,66],[90,69,86,67],[90,70,86,68],[90,71,86,69,"traceId"],[90,78,86,76],[90,80,86,78,"client"],[90,86,86,84],[90,87,86,85],[91,4,87,2],[91,10,87,8,"jsonSpan"],[91,18,87,16],[91,21,87,19],[91,25,87,19,"spanToJSON"],[91,46,87,29],[91,48,87,30,"rootSpan"],[91,56,87,38],[91,57,87,39],[92,4,88,2],[92,10,88,8,"attributes"],[92,20,88,18],[92,23,88,21,"jsonSpan"],[92,31,88,29],[92,32,88,30,"data"],[92,36,88,34],[92,40,88,38],[92,41,88,39],[92,42,88,40],[93,4,89,2],[93,10,89,8,"maybeSampleRate"],[93,25,89,23],[93,28,89,26,"attributes"],[93,38,89,36],[93,39,89,37,"SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE"],[93,96,89,74],[93,97,89,75],[94,4,91,2],[94,8,91,6,"maybeSampleRate"],[94,23,91,21],[94,27,91,25],[94,31,91,29],[94,33,91,31],[95,6,92,4,"dsc"],[95,9,92,7],[95,10,92,8,"sample_rate"],[95,21,92,19],[95,24,92,22],[95,27,92,25,"maybeSampleRate"],[95,42,92,40],[95,44,92,42],[96,4,93,2],[98,4,95,2],[99,4,96,2],[99,10,96,8,"source"],[99,16,96,14],[99,19,96,17,"attributes"],[99,29,96,27],[99,30,96,28,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[99,82,96,60],[99,83,96,61],[101,4,98,2],[102,4,99,2],[102,10,99,8,"name"],[102,14,99,12],[102,17,99,15,"jsonSpan"],[102,25,99,23],[102,26,99,24,"description"],[102,37,99,35],[103,4,100,2],[103,8,100,6,"source"],[103,14,100,12],[103,19,100,17],[103,24,100,22],[103,28,100,26,"name"],[103,32,100,30],[103,34,100,32],[104,6,101,4,"dsc"],[104,9,101,7],[104,10,101,8,"transaction"],[104,21,101,19],[104,24,101,22,"name"],[104,28,101,26],[105,4,102,2],[107,4,104,2],[108,4,105,2],[109,4,106,2],[110,4,107,2],[110,8,107,6],[110,12,107,6,"hasTracingEnabled"],[110,48,107,23],[110,50,107,24],[110,51,107,25],[110,53,107,27],[111,6,108,4,"dsc"],[111,9,108,7],[111,10,108,8,"sampled"],[111,17,108,15],[111,20,108,18,"String"],[111,26,108,24],[111,27,108,25],[111,31,108,25,"spanIsSampled"],[111,55,108,38],[111,57,108,39,"rootSpan"],[111,65,108,47],[111,66,108,48],[111,67,108,49],[112,4,109,2],[113,4,111,2,"client"],[113,10,111,8],[113,11,111,9,"emit"],[113,15,111,13],[113,16,111,14],[113,27,111,25],[113,29,111,27,"dsc"],[113,32,111,30],[113,34,111,32,"rootSpan"],[113,42,111,40],[113,43,111,41],[114,4,113,2],[114,11,113,9,"dsc"],[114,14,113,12],[115,2,114,0],[117,2,116,0],[118,0,117,0],[119,0,118,0],[120,2,119,0],[120,11,119,9,"spanToBaggageHeader"],[120,30,119,28,"spanToBaggageHeader"],[120,31,119,29,"span"],[120,35,119,33],[120,37,119,35],[121,4,120,2],[121,10,120,8,"dsc"],[121,13,120,11],[121,16,120,14,"getDynamicSamplingContextFromSpan"],[121,49,120,47],[121,50,120,48,"span"],[121,54,120,52],[121,55,120,53],[122,4,121,2],[122,11,121,9],[122,15,121,9,"dynamicSamplingContextToSentryBaggageHeader"],[122,67,121,52],[122,69,121,53,"dsc"],[122,72,121,56],[122,73,121,57],[123,2,122,0],[124,0,122,1],[124,3]],"functionMap":{"names":["<global>","freezeDscOnSpan","getDynamicSamplingContextFromClient","getDynamicSamplingContextFromScope","getDynamicSamplingContextFromSpan","spanToBaggageHeader"],"mappings":"AAA;ACiB;CDG;AEO;CFe;AGK;CHG;AIS;CJsD;AKK;CLG"}},"type":"js/module"}]}