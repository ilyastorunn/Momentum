{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.base64StringFromByteArray = base64StringFromByteArray;\n  /* eslint-disable */\n  // The MIT License (MIT)\n  // Copyright (c) 2014 Jameson Little\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the \"Software\"), to deal\n  // in the Software without restriction, including without limitation the rights\n  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  // copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n  // The above copyright notice and this permission notice shall be included in\n  // all copies or substantial portions of the Software.\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  // THE SOFTWARE.\n  // Adapted from https://github.dev/beatgammit/base64-js/blob/88957c9943c7e2a0f03cdf73e71d579e433627d3/index.js#L119\n  const lookup = [];\n  const code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (let i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n  }\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3f] + lookup[num >> 12 & 0x3f] + lookup[num >> 6 & 0x3f] + lookup[num & 0x3f];\n  }\n  function encodeChunk(uint8, start, end) {\n    let tmp;\n    const output = [];\n    for (let i = start; i < end; i += 3) {\n      tmp = (uint8[i] << 16 & 0xff0000) + (uint8[i + 1] << 8 & 0xff00) + (uint8[i + 2] & 0xff);\n      output.push(tripletToBase64(tmp));\n    }\n    return output.join('');\n  }\n  /**\n   * Converts a Uint8Array or Array of bytes into a string representation of base64.\n   */\n  function base64StringFromByteArray(uint8) {\n    let tmp;\n    const len = uint8.length;\n    const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n    const parts = [];\n    const maxChunkLength = 16383; // must be multiple of 3\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n      tmp = uint8[len - 1];\n      parts.push(`${lookup[tmp >> 2] + lookup[tmp << 4 & 0x3f]}==`);\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n      parts.push(`${lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3f] + lookup[tmp << 2 & 0x3f]}=`);\n    }\n    return parts.join('');\n  }\n});","lineCount":65,"map":[[6,2,1,0],[7,2,2,0],[8,2,3,0],[9,2,4,0],[10,2,5,0],[11,2,6,0],[12,2,7,0],[13,2,8,0],[14,2,9,0],[15,2,10,0],[16,2,11,0],[17,2,12,0],[18,2,13,0],[19,2,14,0],[20,2,15,0],[21,2,16,0],[22,2,17,0],[23,2,18,0],[24,2,19,0],[25,2,20,0],[25,8,20,6,"lookup"],[25,14,20,12],[25,17,20,15],[25,19,20,17],[26,2,21,0],[26,8,21,6,"code"],[26,12,21,10],[26,15,21,13],[26,81,21,79],[27,2,22,0],[27,7,22,5],[27,11,22,9,"i"],[27,12,22,10],[27,15,22,13],[27,16,22,14],[27,18,22,16,"len"],[27,21,22,19],[27,24,22,22,"code"],[27,28,22,26],[27,29,22,27,"length"],[27,35,22,33],[27,37,22,35,"i"],[27,38,22,36],[27,41,22,39,"len"],[27,44,22,42],[27,46,22,44],[27,48,22,46,"i"],[27,49,22,47],[27,51,22,49],[28,4,23,4,"lookup"],[28,10,23,10],[28,11,23,11,"i"],[28,12,23,12],[28,13,23,13],[28,16,23,16,"code"],[28,20,23,20],[28,21,23,21,"i"],[28,22,23,22],[28,23,23,23],[29,2,24,0],[30,2,25,0],[30,11,25,9,"tripletToBase64"],[30,26,25,24,"tripletToBase64"],[30,27,25,25,"num"],[30,30,25,28],[30,32,25,30],[31,4,26,4],[31,11,26,11,"lookup"],[31,17,26,17],[31,18,26,19,"num"],[31,21,26,22],[31,25,26,26],[31,27,26,28],[31,30,26,32],[31,34,26,36],[31,35,26,37],[31,38,26,40,"lookup"],[31,44,26,46],[31,45,26,48,"num"],[31,48,26,51],[31,52,26,55],[31,54,26,57],[31,57,26,61],[31,61,26,65],[31,62,26,66],[31,65,26,69,"lookup"],[31,71,26,75],[31,72,26,77,"num"],[31,75,26,80],[31,79,26,84],[31,80,26,85],[31,83,26,89],[31,87,26,93],[31,88,26,94],[31,91,26,97,"lookup"],[31,97,26,103],[31,98,26,104,"num"],[31,101,26,107],[31,104,26,110],[31,108,26,114],[31,109,26,115],[32,2,27,0],[33,2,28,0],[33,11,28,9,"encodeChunk"],[33,22,28,20,"encodeChunk"],[33,23,28,21,"uint8"],[33,28,28,26],[33,30,28,28,"start"],[33,35,28,33],[33,37,28,35,"end"],[33,40,28,38],[33,42,28,40],[34,4,29,4],[34,8,29,8,"tmp"],[34,11,29,11],[35,4,30,4],[35,10,30,10,"output"],[35,16,30,16],[35,19,30,19],[35,21,30,21],[36,4,31,4],[36,9,31,9],[36,13,31,13,"i"],[36,14,31,14],[36,17,31,17,"start"],[36,22,31,22],[36,24,31,24,"i"],[36,25,31,25],[36,28,31,28,"end"],[36,31,31,31],[36,33,31,33,"i"],[36,34,31,34],[36,38,31,38],[36,39,31,39],[36,41,31,41],[37,6,32,8,"tmp"],[37,9,32,11],[37,12,32,14],[37,13,32,16,"uint8"],[37,18,32,21],[37,19,32,22,"i"],[37,20,32,23],[37,21,32,24],[37,25,32,28],[37,27,32,30],[37,30,32,34],[37,38,32,42],[37,43,32,48,"uint8"],[37,48,32,53],[37,49,32,54,"i"],[37,50,32,55],[37,53,32,58],[37,54,32,59],[37,55,32,60],[37,59,32,64],[37,60,32,65],[37,63,32,69],[37,69,32,75],[37,70,32,76],[37,74,32,80,"uint8"],[37,79,32,85],[37,80,32,86,"i"],[37,81,32,87],[37,84,32,90],[37,85,32,91],[37,86,32,92],[37,89,32,95],[37,93,32,99],[37,94,32,100],[38,6,33,8,"output"],[38,12,33,14],[38,13,33,15,"push"],[38,17,33,19],[38,18,33,20,"tripletToBase64"],[38,33,33,35],[38,34,33,36,"tmp"],[38,37,33,39],[38,38,33,40],[38,39,33,41],[39,4,34,4],[40,4,35,4],[40,11,35,11,"output"],[40,17,35,17],[40,18,35,18,"join"],[40,22,35,22],[40,23,35,23],[40,25,35,25],[40,26,35,26],[41,2,36,0],[42,2,37,0],[43,0,38,0],[44,0,39,0],[45,2,40,7],[45,11,40,16,"base64StringFromByteArray"],[45,36,40,41,"base64StringFromByteArray"],[45,37,40,42,"uint8"],[45,42,40,47],[45,44,40,49],[46,4,41,4],[46,8,41,8,"tmp"],[46,11,41,11],[47,4,42,4],[47,10,42,10,"len"],[47,13,42,13],[47,16,42,16,"uint8"],[47,21,42,21],[47,22,42,22,"length"],[47,28,42,28],[48,4,43,4],[48,10,43,10,"extraBytes"],[48,20,43,20],[48,23,43,23,"len"],[48,26,43,26],[48,29,43,29],[48,30,43,30],[48,31,43,31],[48,32,43,32],[49,4,44,4],[49,10,44,10,"parts"],[49,15,44,15],[49,18,44,18],[49,20,44,20],[50,4,45,4],[50,10,45,10,"maxChunkLength"],[50,24,45,24],[50,27,45,27],[50,32,45,32],[50,33,45,33],[50,34,45,34],[51,4,46,4],[52,4,47,4],[52,9,47,9],[52,13,47,13,"i"],[52,14,47,14],[52,17,47,17],[52,18,47,18],[52,20,47,20,"len2"],[52,24,47,24],[52,27,47,27,"len"],[52,30,47,30],[52,33,47,33,"extraBytes"],[52,43,47,43],[52,45,47,45,"i"],[52,46,47,46],[52,49,47,49,"len2"],[52,53,47,53],[52,55,47,55,"i"],[52,56,47,56],[52,60,47,60,"maxChunkLength"],[52,74,47,74],[52,76,47,76],[53,6,48,8,"parts"],[53,11,48,13],[53,12,48,14,"push"],[53,16,48,18],[53,17,48,19,"encodeChunk"],[53,28,48,30],[53,29,48,31,"uint8"],[53,34,48,36],[53,36,48,38,"i"],[53,37,48,39],[53,39,48,41,"i"],[53,40,48,42],[53,43,48,45,"maxChunkLength"],[53,57,48,59],[53,60,48,62,"len2"],[53,64,48,66],[53,67,48,69,"len2"],[53,71,48,73],[53,74,48,76,"i"],[53,75,48,77],[53,78,48,80,"maxChunkLength"],[53,92,48,94],[53,93,48,95],[53,94,48,96],[54,4,49,4],[55,4,50,4],[56,4,51,4],[56,8,51,8,"extraBytes"],[56,18,51,18],[56,23,51,23],[56,24,51,24],[56,26,51,26],[57,6,52,8,"tmp"],[57,9,52,11],[57,12,52,14,"uint8"],[57,17,52,19],[57,18,52,20,"len"],[57,21,52,23],[57,24,52,26],[57,25,52,27],[57,26,52,28],[58,6,53,8,"parts"],[58,11,53,13],[58,12,53,14,"push"],[58,16,53,18],[58,17,53,19],[58,20,53,22,"lookup"],[58,26,53,28],[58,27,53,29,"tmp"],[58,30,53,32],[58,34,53,36],[58,35,53,37],[58,36,53,38],[58,39,53,41,"lookup"],[58,45,53,47],[58,46,53,49,"tmp"],[58,49,53,52],[58,53,53,56],[58,54,53,57],[58,57,53,61],[58,61,53,65],[58,62,53,66],[58,66,53,70],[58,67,53,71],[59,4,54,4],[59,5,54,5],[59,11,55,9],[59,15,55,13,"extraBytes"],[59,25,55,23],[59,30,55,28],[59,31,55,29],[59,33,55,31],[60,6,56,8,"tmp"],[60,9,56,11],[60,12,56,14],[60,13,56,15,"uint8"],[60,18,56,20],[60,19,56,21,"len"],[60,22,56,24],[60,25,56,27],[60,26,56,28],[60,27,56,29],[60,31,56,33],[60,32,56,34],[60,36,56,38,"uint8"],[60,41,56,43],[60,42,56,44,"len"],[60,45,56,47],[60,48,56,50],[60,49,56,51],[60,50,56,52],[61,6,57,8,"parts"],[61,11,57,13],[61,12,57,14,"push"],[61,16,57,18],[61,17,57,19],[61,20,57,22,"lookup"],[61,26,57,28],[61,27,57,29,"tmp"],[61,30,57,32],[61,34,57,36],[61,36,57,38],[61,37,57,39],[61,40,57,42,"lookup"],[61,46,57,48],[61,47,57,50,"tmp"],[61,50,57,53],[61,54,57,57],[61,55,57,58],[61,58,57,62],[61,62,57,66],[61,63,57,67],[61,66,57,70,"lookup"],[61,72,57,76],[61,73,57,78,"tmp"],[61,76,57,81],[61,80,57,85],[61,81,57,86],[61,84,57,90],[61,88,57,94],[61,89,57,95],[61,92,57,98],[61,93,57,99],[62,4,58,4],[63,4,59,4],[63,11,59,11,"parts"],[63,16,59,16],[63,17,59,17,"join"],[63,21,59,21],[63,22,59,22],[63,24,59,24],[63,25,59,25],[64,2,60,0],[65,0,60,1],[65,3]],"functionMap":{"names":["<global>","tripletToBase64","encodeChunk","base64StringFromByteArray"],"mappings":"AAA;ACwB;CDE;AEC;CFQ;OGI;CHoB"}},"type":"js/module"}]}