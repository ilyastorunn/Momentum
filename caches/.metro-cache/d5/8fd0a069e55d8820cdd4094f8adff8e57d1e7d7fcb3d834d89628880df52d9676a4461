{"dependencies":[{"name":"@sentry-internal/browser-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":99,"index":99}}],"key":"NhwjGxy6N7nYR3SR4JfgASTvmbA=","exportNames":["*"]}},{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":100},"end":{"line":2,"column":190,"index":290}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":291},"end":{"line":3,"column":48,"index":339}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.httpClientIntegration = void 0;\n  var _browserUtils = require(_dependencyMap[0], \"@sentry-internal/browser-utils\");\n  var _core = require(_dependencyMap[1], \"@sentry/core\");\n  var _debugBuild = require(_dependencyMap[2], \"../debug-build.js\");\n  const INTEGRATION_NAME = 'HttpClient';\n  const _httpClientIntegration = (options = {}) => {\n    const _options = {\n      failedRequestStatusCodes: [[500, 599]],\n      failedRequestTargets: [/.*/],\n      ...options\n    };\n    return {\n      name: INTEGRATION_NAME,\n      setup(client) {\n        _wrapFetch(client, _options);\n        _wrapXHR(client, _options);\n      }\n    };\n  };\n\n  /**\n   * Create events for failed client side HTTP requests.\n   */\n  const httpClientIntegration = exports.httpClientIntegration = (0, _core.defineIntegration)(_httpClientIntegration);\n\n  /**\n   * Interceptor function for fetch requests\n   *\n   * @param requestInfo The Fetch API request info\n   * @param response The Fetch API response\n   * @param requestInit The request init object\n   */\n  function _fetchResponseHandler(options, requestInfo, response, requestInit, error) {\n    if (_shouldCaptureResponse(options, response.status, response.url)) {\n      const request = _getRequest(requestInfo, requestInit);\n      let requestHeaders, responseHeaders, requestCookies, responseCookies;\n      if (_shouldSendDefaultPii()) {\n        [requestHeaders, requestCookies] = _parseCookieHeaders('Cookie', request);\n        [responseHeaders, responseCookies] = _parseCookieHeaders('Set-Cookie', response);\n      }\n      const event = _createEvent({\n        url: request.url,\n        method: request.method,\n        status: response.status,\n        requestHeaders,\n        responseHeaders,\n        requestCookies,\n        responseCookies,\n        error\n      });\n      (0, _core.captureEvent)(event);\n    }\n  }\n  function _parseCookieHeaders(cookieHeader, obj) {\n    const headers = _extractFetchHeaders(obj.headers);\n    let cookies;\n    try {\n      const cookieString = headers[cookieHeader] || headers[cookieHeader.toLowerCase()] || undefined;\n      if (cookieString) {\n        cookies = _parseCookieString(cookieString);\n      }\n    } catch (e2) {\n      // ignore it if parsing fails\n    }\n    return [headers, cookies];\n  }\n\n  /**\n   * Interceptor function for XHR requests\n   *\n   * @param xhr The XHR request\n   * @param method The HTTP method\n   * @param headers The HTTP headers\n   */\n  function _xhrResponseHandler(options, xhr, method, headers, error) {\n    if (_shouldCaptureResponse(options, xhr.status, xhr.responseURL)) {\n      let requestHeaders, responseCookies, responseHeaders;\n      if (_shouldSendDefaultPii()) {\n        try {\n          const cookieString = xhr.getResponseHeader('Set-Cookie') || xhr.getResponseHeader('set-cookie') || undefined;\n          if (cookieString) {\n            responseCookies = _parseCookieString(cookieString);\n          }\n        } catch (e3) {\n          // ignore it if parsing fails\n        }\n        try {\n          responseHeaders = _getXHRResponseHeaders(xhr);\n        } catch (e4) {\n          // ignore it if parsing fails\n        }\n        requestHeaders = headers;\n      }\n      const event = _createEvent({\n        url: xhr.responseURL,\n        method,\n        status: xhr.status,\n        requestHeaders,\n        // Can't access request cookies from XHR\n        responseHeaders,\n        responseCookies,\n        error\n      });\n      (0, _core.captureEvent)(event);\n    }\n  }\n\n  /**\n   * Extracts response size from `Content-Length` header when possible\n   *\n   * @param headers\n   * @returns The response size in bytes or undefined\n   */\n  function _getResponseSizeFromHeaders(headers) {\n    if (headers) {\n      const contentLength = headers['Content-Length'] || headers['content-length'];\n      if (contentLength) {\n        return parseInt(contentLength, 10);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an object containing cookies from the given cookie string\n   *\n   * @param cookieString The cookie string to parse\n   * @returns The parsed cookies\n   */\n  function _parseCookieString(cookieString) {\n    return cookieString.split('; ').reduce((acc, cookie) => {\n      const [key, value] = cookie.split('=');\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Extracts the headers as an object from the given Fetch API request or response object\n   *\n   * @param headers The headers to extract\n   * @returns The extracted headers as an object\n   */\n  function _extractFetchHeaders(headers) {\n    const result = {};\n    headers.forEach((value, key) => {\n      result[key] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Extracts the response headers as an object from the given XHR object\n   *\n   * @param xhr The XHR object to extract the response headers from\n   * @returns The response headers as an object\n   */\n  function _getXHRResponseHeaders(xhr) {\n    const headers = xhr.getAllResponseHeaders();\n    if (!headers) {\n      return {};\n    }\n    return headers.split('\\r\\n').reduce((acc, line) => {\n      const [key, value] = line.split(': ');\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Checks if the given target url is in the given list of targets\n   *\n   * @param target The target url to check\n   * @returns true if the target url is in the given list of targets, false otherwise\n   */\n  function _isInGivenRequestTargets(failedRequestTargets, target) {\n    return failedRequestTargets.some(givenRequestTarget => {\n      if (typeof givenRequestTarget === 'string') {\n        return target.includes(givenRequestTarget);\n      }\n      return givenRequestTarget.test(target);\n    });\n  }\n\n  /**\n   * Checks if the given status code is in the given range\n   *\n   * @param status The status code to check\n   * @returns true if the status code is in the given range, false otherwise\n   */\n  function _isInGivenStatusRanges(failedRequestStatusCodes, status) {\n    return failedRequestStatusCodes.some(range => {\n      if (typeof range === 'number') {\n        return range === status;\n      }\n      return status >= range[0] && status <= range[1];\n    });\n  }\n\n  /**\n   * Wraps `fetch` function to capture request and response data\n   */\n  function _wrapFetch(client, options) {\n    if (!(0, _core.supportsNativeFetch)()) {\n      return;\n    }\n    (0, _core.addFetchInstrumentationHandler)(handlerData => {\n      if ((0, _core.getClient)() !== client) {\n        return;\n      }\n      const {\n        response,\n        args,\n        error,\n        virtualError\n      } = handlerData;\n      const [requestInfo, requestInit] = args;\n      if (!response) {\n        return;\n      }\n      _fetchResponseHandler(options, requestInfo, response, requestInit, error || virtualError);\n    }, false);\n  }\n\n  /**\n   * Wraps XMLHttpRequest to capture request and response data\n   */\n  function _wrapXHR(client, options) {\n    if (!('XMLHttpRequest' in _core.GLOBAL_OBJ)) {\n      return;\n    }\n    (0, _browserUtils.addXhrInstrumentationHandler)(handlerData => {\n      if ((0, _core.getClient)() !== client) {\n        return;\n      }\n      const {\n        error,\n        virtualError\n      } = handlerData;\n      const xhr = handlerData.xhr;\n      const sentryXhrData = xhr[_browserUtils.SENTRY_XHR_DATA_KEY];\n      if (!sentryXhrData) {\n        return;\n      }\n      const {\n        method,\n        request_headers: headers\n      } = sentryXhrData;\n      try {\n        _xhrResponseHandler(options, xhr, method, headers, error || virtualError);\n      } catch (e) {\n        _debugBuild.DEBUG_BUILD && _core.logger.warn('Error while extracting response event form XHR response', e);\n      }\n    });\n  }\n\n  /**\n   * Checks whether to capture given response as an event\n   *\n   * @param status response status code\n   * @param url response url\n   */\n  function _shouldCaptureResponse(options, status, url) {\n    return _isInGivenStatusRanges(options.failedRequestStatusCodes, status) && _isInGivenRequestTargets(options.failedRequestTargets, url) && !(0, _core.isSentryRequestUrl)(url, (0, _core.getClient)());\n  }\n\n  /**\n   * Creates a synthetic Sentry event from given response data\n   *\n   * @param data response data\n   * @returns event\n   */\n  function _createEvent(data) {\n    const client = (0, _core.getClient)();\n    const virtualStackTrace = client && data.error && data.error instanceof Error ? data.error.stack : undefined;\n    // Remove the first frame from the stack as it's the HttpClient call\n    const stack = virtualStackTrace && client ? client.getOptions().stackParser(virtualStackTrace, 0, 1) : undefined;\n    const message = `HTTP Client Error with status code: ${data.status}`;\n    const event = {\n      message,\n      exception: {\n        values: [{\n          type: 'Error',\n          value: message,\n          stacktrace: stack ? {\n            frames: stack\n          } : undefined\n        }]\n      },\n      request: {\n        url: data.url,\n        method: data.method,\n        headers: data.requestHeaders,\n        cookies: data.requestCookies\n      },\n      contexts: {\n        response: {\n          status_code: data.status,\n          headers: data.responseHeaders,\n          cookies: data.responseCookies,\n          body_size: _getResponseSizeFromHeaders(data.responseHeaders)\n        }\n      }\n    };\n    (0, _core.addExceptionMechanism)(event, {\n      type: 'http.client',\n      handled: false\n    });\n    return event;\n  }\n  function _getRequest(requestInfo, requestInit) {\n    if (!requestInit && requestInfo instanceof Request) {\n      return requestInfo;\n    }\n\n    // If both are set, we try to construct a new Request with the given arguments\n    // However, if e.g. the original request has a `body`, this will throw an error because it was already accessed\n    // In this case, as a fallback, we just use the original request - using both is rather an edge case\n    if (requestInfo instanceof Request && requestInfo.bodyUsed) {\n      return requestInfo;\n    }\n    return new Request(requestInfo, requestInit);\n  }\n  function _shouldSendDefaultPii() {\n    const client = (0, _core.getClient)();\n    return client ? Boolean(client.getOptions().sendDefaultPii) : false;\n  }\n});","lineCount":336,"map":[[6,2,1,0],[6,6,1,0,"_browserUtils"],[6,19,1,0],[6,22,1,0,"require"],[6,29,1,0],[6,30,1,0,"_dependencyMap"],[6,44,1,0],[7,2,2,0],[7,6,2,0,"_core"],[7,11,2,0],[7,14,2,0,"require"],[7,21,2,0],[7,22,2,0,"_dependencyMap"],[7,36,2,0],[8,2,3,0],[8,6,3,0,"_debugBuild"],[8,17,3,0],[8,20,3,0,"require"],[8,27,3,0],[8,28,3,0,"_dependencyMap"],[8,42,3,0],[9,2,5,0],[9,8,5,6,"INTEGRATION_NAME"],[9,24,5,22],[9,27,5,25],[9,39,5,37],[10,2,7,0],[10,8,7,6,"_httpClientIntegration"],[10,30,7,28],[10,33,7,32,"_httpClientIntegration"],[10,34,7,33,"options"],[10,41,7,40],[10,44,7,43],[10,45,7,44],[10,46,7,45],[10,51,7,50],[11,4,8,2],[11,10,8,8,"_options"],[11,18,8,16],[11,21,8,19],[12,6,9,4,"failedRequestStatusCodes"],[12,30,9,28],[12,32,9,30],[12,33,9,31],[12,34,9,32],[12,37,9,35],[12,39,9,37],[12,42,9,40],[12,43,9,41],[12,44,9,42],[13,6,10,4,"failedRequestTargets"],[13,26,10,24],[13,28,10,26],[13,29,10,27],[13,33,10,31],[13,34,10,32],[14,6,11,4],[14,9,11,7,"options"],[15,4,12,2],[15,5,12,3],[16,4,14,2],[16,11,14,9],[17,6,15,4,"name"],[17,10,15,8],[17,12,15,10,"INTEGRATION_NAME"],[17,28,15,26],[18,6,16,4,"setup"],[18,11,16,9,"setup"],[18,12,16,10,"client"],[18,18,16,16],[18,20,16,18],[19,8,17,6,"_wrapFetch"],[19,18,17,16],[19,19,17,17,"client"],[19,25,17,23],[19,27,17,25,"_options"],[19,35,17,33],[19,36,17,34],[20,8,18,6,"_wrapXHR"],[20,16,18,14],[20,17,18,15,"client"],[20,23,18,21],[20,25,18,23,"_options"],[20,33,18,31],[20,34,18,32],[21,6,19,4],[22,4,20,2],[22,5,20,3],[23,2,21,0],[23,3,21,2],[25,2,23,0],[26,0,24,0],[27,0,25,0],[28,2,26,0],[28,8,26,6,"httpClientIntegration"],[28,29,26,27],[28,32,26,27,"exports"],[28,39,26,27],[28,40,26,27,"httpClientIntegration"],[28,61,26,27],[28,64,26,30],[28,68,26,30,"defineIntegration"],[28,91,26,47],[28,93,26,48,"_httpClientIntegration"],[28,115,26,70],[28,116,26,71],[30,2,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,2,35,0],[37,11,35,9,"_fetchResponseHandler"],[37,32,35,30,"_fetchResponseHandler"],[37,33,36,2,"options"],[37,40,36,9],[37,42,37,2,"requestInfo"],[37,53,37,13],[37,55,38,2,"response"],[37,63,38,10],[37,65,39,2,"requestInit"],[37,76,39,13],[37,78,40,2,"error"],[37,83,40,7],[37,85,41,2],[38,4,42,2],[38,8,42,6,"_shouldCaptureResponse"],[38,30,42,28],[38,31,42,29,"options"],[38,38,42,36],[38,40,42,38,"response"],[38,48,42,46],[38,49,42,47,"status"],[38,55,42,53],[38,57,42,55,"response"],[38,65,42,63],[38,66,42,64,"url"],[38,69,42,67],[38,70,42,68],[38,72,42,70],[39,6,43,4],[39,12,43,10,"request"],[39,19,43,17],[39,22,43,20,"_getRequest"],[39,33,43,31],[39,34,43,32,"requestInfo"],[39,45,43,43],[39,47,43,45,"requestInit"],[39,58,43,56],[39,59,43,57],[40,6,45,4],[40,10,45,8,"requestHeaders"],[40,24,45,22],[40,26,45,24,"responseHeaders"],[40,41,45,39],[40,43,45,41,"requestCookies"],[40,57,45,55],[40,59,45,57,"responseCookies"],[40,74,45,72],[41,6,47,4],[41,10,47,8,"_shouldSendDefaultPii"],[41,31,47,29],[41,32,47,30],[41,33,47,31],[41,35,47,33],[42,8,48,6],[42,9,48,7,"requestHeaders"],[42,23,48,21],[42,25,48,23,"requestCookies"],[42,39,48,37],[42,40,48,38],[42,43,48,41,"_parseCookieHeaders"],[42,62,48,60],[42,63,48,61],[42,71,48,69],[42,73,48,71,"request"],[42,80,48,78],[42,81,48,79],[43,8,49,6],[43,9,49,7,"responseHeaders"],[43,24,49,22],[43,26,49,24,"responseCookies"],[43,41,49,39],[43,42,49,40],[43,45,49,43,"_parseCookieHeaders"],[43,64,49,62],[43,65,49,63],[43,77,49,75],[43,79,49,77,"response"],[43,87,49,85],[43,88,49,86],[44,6,50,4],[45,6,52,4],[45,12,52,10,"event"],[45,17,52,15],[45,20,52,18,"_createEvent"],[45,32,52,30],[45,33,52,31],[46,8,53,6,"url"],[46,11,53,9],[46,13,53,11,"request"],[46,20,53,18],[46,21,53,19,"url"],[46,24,53,22],[47,8,54,6,"method"],[47,14,54,12],[47,16,54,14,"request"],[47,23,54,21],[47,24,54,22,"method"],[47,30,54,28],[48,8,55,6,"status"],[48,14,55,12],[48,16,55,14,"response"],[48,24,55,22],[48,25,55,23,"status"],[48,31,55,29],[49,8,56,6,"requestHeaders"],[49,22,56,20],[50,8,57,6,"responseHeaders"],[50,23,57,21],[51,8,58,6,"requestCookies"],[51,22,58,20],[52,8,59,6,"responseCookies"],[52,23,59,21],[53,8,60,6,"error"],[54,6,61,4],[54,7,61,5],[54,8,61,6],[55,6,63,4],[55,10,63,4,"captureEvent"],[55,28,63,16],[55,30,63,17,"event"],[55,35,63,22],[55,36,63,23],[56,4,64,2],[57,2,65,0],[58,2,67,0],[58,11,67,9,"_parseCookieHeaders"],[58,30,67,28,"_parseCookieHeaders"],[58,31,68,2,"cookieHeader"],[58,43,68,14],[58,45,69,2,"obj"],[58,48,69,5],[58,50,70,2],[59,4,71,2],[59,10,71,8,"headers"],[59,17,71,15],[59,20,71,18,"_extractFetchHeaders"],[59,40,71,38],[59,41,71,39,"obj"],[59,44,71,42],[59,45,71,43,"headers"],[59,52,71,50],[59,53,71,51],[60,4,72,2],[60,8,72,6,"cookies"],[60,15,72,13],[61,4,74,2],[61,8,74,6],[62,6,75,4],[62,12,75,10,"cookieString"],[62,24,75,22],[62,27,75,25,"headers"],[62,34,75,32],[62,35,75,33,"cookieHeader"],[62,47,75,45],[62,48,75,46],[62,52,75,50,"headers"],[62,59,75,57],[62,60,75,58,"cookieHeader"],[62,72,75,70],[62,73,75,71,"toLowerCase"],[62,84,75,82],[62,85,75,83],[62,86,75,84],[62,87,75,85],[62,91,75,89,"undefined"],[62,100,75,98],[63,6,77,4],[63,10,77,8,"cookieString"],[63,22,77,20],[63,24,77,22],[64,8,78,6,"cookies"],[64,15,78,13],[64,18,78,16,"_parseCookieString"],[64,36,78,34],[64,37,78,35,"cookieString"],[64,49,78,47],[64,50,78,48],[65,6,79,4],[66,4,80,2],[66,5,80,3],[66,6,80,4],[66,13,80,11,"e2"],[66,15,80,13],[66,17,80,15],[67,6,81,4],[68,4,81,4],[69,4,84,2],[69,11,84,9],[69,12,84,10,"headers"],[69,19,84,17],[69,21,84,19,"cookies"],[69,28,84,26],[69,29,84,27],[70,2,85,0],[72,2,87,0],[73,0,88,0],[74,0,89,0],[75,0,90,0],[76,0,91,0],[77,0,92,0],[78,0,93,0],[79,2,94,0],[79,11,94,9,"_xhrResponseHandler"],[79,30,94,28,"_xhrResponseHandler"],[79,31,95,2,"options"],[79,38,95,9],[79,40,96,2,"xhr"],[79,43,96,5],[79,45,97,2,"method"],[79,51,97,8],[79,53,98,2,"headers"],[79,60,98,9],[79,62,99,2,"error"],[79,67,99,7],[79,69,100,2],[80,4,101,2],[80,8,101,6,"_shouldCaptureResponse"],[80,30,101,28],[80,31,101,29,"options"],[80,38,101,36],[80,40,101,38,"xhr"],[80,43,101,41],[80,44,101,42,"status"],[80,50,101,48],[80,52,101,50,"xhr"],[80,55,101,53],[80,56,101,54,"responseURL"],[80,67,101,65],[80,68,101,66],[80,70,101,68],[81,6,102,4],[81,10,102,8,"requestHeaders"],[81,24,102,22],[81,26,102,24,"responseCookies"],[81,41,102,39],[81,43,102,41,"responseHeaders"],[81,58,102,56],[82,6,104,4],[82,10,104,8,"_shouldSendDefaultPii"],[82,31,104,29],[82,32,104,30],[82,33,104,31],[82,35,104,33],[83,8,105,6],[83,12,105,10],[84,10,106,8],[84,16,106,14,"cookieString"],[84,28,106,26],[84,31,106,29,"xhr"],[84,34,106,32],[84,35,106,33,"getResponseHeader"],[84,52,106,50],[84,53,106,51],[84,65,106,63],[84,66,106,64],[84,70,106,68,"xhr"],[84,73,106,71],[84,74,106,72,"getResponseHeader"],[84,91,106,89],[84,92,106,90],[84,104,106,102],[84,105,106,103],[84,109,106,107,"undefined"],[84,118,106,116],[85,10,108,8],[85,14,108,12,"cookieString"],[85,26,108,24],[85,28,108,26],[86,12,109,10,"responseCookies"],[86,27,109,25],[86,30,109,28,"_parseCookieString"],[86,48,109,46],[86,49,109,47,"cookieString"],[86,61,109,59],[86,62,109,60],[87,10,110,8],[88,8,111,6],[88,9,111,7],[88,10,111,8],[88,17,111,15,"e3"],[88,19,111,17],[88,21,111,19],[89,10,112,8],[90,8,112,8],[91,8,115,6],[91,12,115,10],[92,10,116,8,"responseHeaders"],[92,25,116,23],[92,28,116,26,"_getXHRResponseHeaders"],[92,50,116,48],[92,51,116,49,"xhr"],[92,54,116,52],[92,55,116,53],[93,8,117,6],[93,9,117,7],[93,10,117,8],[93,17,117,15,"e4"],[93,19,117,17],[93,21,117,19],[94,10,118,8],[95,8,118,8],[96,8,121,6,"requestHeaders"],[96,22,121,20],[96,25,121,23,"headers"],[96,32,121,30],[97,6,122,4],[98,6,124,4],[98,12,124,10,"event"],[98,17,124,15],[98,20,124,18,"_createEvent"],[98,32,124,30],[98,33,124,31],[99,8,125,6,"url"],[99,11,125,9],[99,13,125,11,"xhr"],[99,16,125,14],[99,17,125,15,"responseURL"],[99,28,125,26],[100,8,126,6,"method"],[100,14,126,12],[101,8,127,6,"status"],[101,14,127,12],[101,16,127,14,"xhr"],[101,19,127,17],[101,20,127,18,"status"],[101,26,127,24],[102,8,128,6,"requestHeaders"],[102,22,128,20],[103,8,129,6],[104,8,130,6,"responseHeaders"],[104,23,130,21],[105,8,131,6,"responseCookies"],[105,23,131,21],[106,8,132,6,"error"],[107,6,133,4],[107,7,133,5],[107,8,133,6],[108,6,135,4],[108,10,135,4,"captureEvent"],[108,28,135,16],[108,30,135,17,"event"],[108,35,135,22],[108,36,135,23],[109,4,136,2],[110,2,137,0],[112,2,139,0],[113,0,140,0],[114,0,141,0],[115,0,142,0],[116,0,143,0],[117,0,144,0],[118,2,145,0],[118,11,145,9,"_getResponseSizeFromHeaders"],[118,38,145,36,"_getResponseSizeFromHeaders"],[118,39,145,37,"headers"],[118,46,145,44],[118,48,145,46],[119,4,146,2],[119,8,146,6,"headers"],[119,15,146,13],[119,17,146,15],[120,6,147,4],[120,12,147,10,"contentLength"],[120,25,147,23],[120,28,147,26,"headers"],[120,35,147,33],[120,36,147,34],[120,52,147,50],[120,53,147,51],[120,57,147,55,"headers"],[120,64,147,62],[120,65,147,63],[120,81,147,79],[120,82,147,80],[121,6,149,4],[121,10,149,8,"contentLength"],[121,23,149,21],[121,25,149,23],[122,8,150,6],[122,15,150,13,"parseInt"],[122,23,150,21],[122,24,150,22,"contentLength"],[122,37,150,35],[122,39,150,37],[122,41,150,39],[122,42,150,40],[123,6,151,4],[124,4,152,2],[125,4,154,2],[125,11,154,9,"undefined"],[125,20,154,18],[126,2,155,0],[128,2,157,0],[129,0,158,0],[130,0,159,0],[131,0,160,0],[132,0,161,0],[133,0,162,0],[134,2,163,0],[134,11,163,9,"_parseCookieString"],[134,29,163,27,"_parseCookieString"],[134,30,163,28,"cookieString"],[134,42,163,40],[134,44,163,42],[135,4,164,2],[135,11,164,9,"cookieString"],[135,23,164,21],[135,24,164,22,"split"],[135,29,164,27],[135,30,164,28],[135,34,164,32],[135,35,164,33],[135,36,164,34,"reduce"],[135,42,164,40],[135,43,164,41],[135,44,164,42,"acc"],[135,47,164,45],[135,49,164,47,"cookie"],[135,55,164,53],[135,60,164,58],[136,6,165,4],[136,12,165,10],[136,13,165,11,"key"],[136,16,165,14],[136,18,165,16,"value"],[136,23,165,21],[136,24,165,22],[136,27,165,25,"cookie"],[136,33,165,31],[136,34,165,32,"split"],[136,39,165,37],[136,40,165,38],[136,43,165,41],[136,44,165,42],[137,6,166,4],[137,10,166,8,"key"],[137,13,166,11],[137,17,166,15,"value"],[137,22,166,20],[137,24,166,22],[138,8,167,6,"acc"],[138,11,167,9],[138,12,167,10,"key"],[138,15,167,13],[138,16,167,14],[138,19,167,17,"value"],[138,24,167,22],[139,6,168,4],[140,6,169,4],[140,13,169,11,"acc"],[140,16,169,14],[141,4,170,2],[141,5,170,3],[141,7,170,5],[141,8,170,6],[141,9,170,7],[141,10,170,8],[142,2,171,0],[144,2,173,0],[145,0,174,0],[146,0,175,0],[147,0,176,0],[148,0,177,0],[149,0,178,0],[150,2,179,0],[150,11,179,9,"_extractFetchHeaders"],[150,31,179,29,"_extractFetchHeaders"],[150,32,179,30,"headers"],[150,39,179,37],[150,41,179,39],[151,4,180,2],[151,10,180,8,"result"],[151,16,180,14],[151,19,180,17],[151,20,180,18],[151,21,180,19],[152,4,182,2,"headers"],[152,11,182,9],[152,12,182,10,"forEach"],[152,19,182,17],[152,20,182,18],[152,21,182,19,"value"],[152,26,182,24],[152,28,182,26,"key"],[152,31,182,29],[152,36,182,34],[153,6,183,4,"result"],[153,12,183,10],[153,13,183,11,"key"],[153,16,183,14],[153,17,183,15],[153,20,183,18,"value"],[153,25,183,23],[154,4,184,2],[154,5,184,3],[154,6,184,4],[155,4,186,2],[155,11,186,9,"result"],[155,17,186,15],[156,2,187,0],[158,2,189,0],[159,0,190,0],[160,0,191,0],[161,0,192,0],[162,0,193,0],[163,0,194,0],[164,2,195,0],[164,11,195,9,"_getXHRResponseHeaders"],[164,33,195,31,"_getXHRResponseHeaders"],[164,34,195,32,"xhr"],[164,37,195,35],[164,39,195,37],[165,4,196,2],[165,10,196,8,"headers"],[165,17,196,15],[165,20,196,18,"xhr"],[165,23,196,21],[165,24,196,22,"getAllResponseHeaders"],[165,45,196,43],[165,46,196,44],[165,47,196,45],[166,4,198,2],[166,8,198,6],[166,9,198,7,"headers"],[166,16,198,14],[166,18,198,16],[167,6,199,4],[167,13,199,11],[167,14,199,12],[167,15,199,13],[168,4,200,2],[169,4,202,2],[169,11,202,9,"headers"],[169,18,202,16],[169,19,202,17,"split"],[169,24,202,22],[169,25,202,23],[169,31,202,29],[169,32,202,30],[169,33,202,31,"reduce"],[169,39,202,37],[169,40,202,38],[169,41,202,39,"acc"],[169,44,202,42],[169,46,202,44,"line"],[169,50,202,48],[169,55,202,53],[170,6,203,4],[170,12,203,10],[170,13,203,11,"key"],[170,16,203,14],[170,18,203,16,"value"],[170,23,203,21],[170,24,203,22],[170,27,203,25,"line"],[170,31,203,29],[170,32,203,30,"split"],[170,37,203,35],[170,38,203,36],[170,42,203,40],[170,43,203,41],[171,6,204,4],[171,10,204,8,"key"],[171,13,204,11],[171,17,204,15,"value"],[171,22,204,20],[171,24,204,22],[172,8,205,6,"acc"],[172,11,205,9],[172,12,205,10,"key"],[172,15,205,13],[172,16,205,14],[172,19,205,17,"value"],[172,24,205,22],[173,6,206,4],[174,6,207,4],[174,13,207,11,"acc"],[174,16,207,14],[175,4,208,2],[175,5,208,3],[175,7,208,5],[175,8,208,6],[175,9,208,7],[175,10,208,8],[176,2,209,0],[178,2,211,0],[179,0,212,0],[180,0,213,0],[181,0,214,0],[182,0,215,0],[183,0,216,0],[184,2,217,0],[184,11,217,9,"_isInGivenRequestTargets"],[184,35,217,33,"_isInGivenRequestTargets"],[184,36,218,2,"failedRequestTargets"],[184,56,218,22],[184,58,219,2,"target"],[184,64,219,8],[184,66,220,2],[185,4,221,2],[185,11,221,9,"failedRequestTargets"],[185,31,221,29],[185,32,221,30,"some"],[185,36,221,34],[185,37,221,36,"givenRequestTarget"],[185,55,221,54],[185,59,221,59],[186,6,222,4],[186,10,222,8],[186,17,222,15,"givenRequestTarget"],[186,35,222,33],[186,40,222,38],[186,48,222,46],[186,50,222,48],[187,8,223,6],[187,15,223,13,"target"],[187,21,223,19],[187,22,223,20,"includes"],[187,30,223,28],[187,31,223,29,"givenRequestTarget"],[187,49,223,47],[187,50,223,48],[188,6,224,4],[189,6,226,4],[189,13,226,11,"givenRequestTarget"],[189,31,226,29],[189,32,226,30,"test"],[189,36,226,34],[189,37,226,35,"target"],[189,43,226,41],[189,44,226,42],[190,4,227,2],[190,5,227,3],[190,6,227,4],[191,2,228,0],[193,2,230,0],[194,0,231,0],[195,0,232,0],[196,0,233,0],[197,0,234,0],[198,0,235,0],[199,2,236,0],[199,11,236,9,"_isInGivenStatusRanges"],[199,33,236,31,"_isInGivenStatusRanges"],[199,34,237,2,"failedRequestStatusCodes"],[199,58,237,26],[199,60,238,2,"status"],[199,66,238,8],[199,68,239,2],[200,4,240,2],[200,11,240,9,"failedRequestStatusCodes"],[200,35,240,33],[200,36,240,34,"some"],[200,40,240,38],[200,41,240,40,"range"],[200,46,240,45],[200,50,240,50],[201,6,241,4],[201,10,241,8],[201,17,241,15,"range"],[201,22,241,20],[201,27,241,25],[201,35,241,33],[201,37,241,35],[202,8,242,6],[202,15,242,13,"range"],[202,20,242,18],[202,25,242,23,"status"],[202,31,242,29],[203,6,243,4],[204,6,245,4],[204,13,245,11,"status"],[204,19,245,17],[204,23,245,21,"range"],[204,28,245,26],[204,29,245,27],[204,30,245,28],[204,31,245,29],[204,35,245,33,"status"],[204,41,245,39],[204,45,245,43,"range"],[204,50,245,48],[204,51,245,49],[204,52,245,50],[204,53,245,51],[205,4,246,2],[205,5,246,3],[205,6,246,4],[206,2,247,0],[208,2,249,0],[209,0,250,0],[210,0,251,0],[211,2,252,0],[211,11,252,9,"_wrapFetch"],[211,21,252,19,"_wrapFetch"],[211,22,252,20,"client"],[211,28,252,26],[211,30,252,28,"options"],[211,37,252,35],[211,39,252,37],[212,4,253,2],[212,8,253,6],[212,9,253,7],[212,13,253,7,"supportsNativeFetch"],[212,38,253,26],[212,40,253,27],[212,41,253,28],[212,43,253,30],[213,6,254,4],[214,4,255,2],[215,4,257,2],[215,8,257,2,"addFetchInstrumentationHandler"],[215,44,257,32],[215,46,257,33,"handlerData"],[215,57,257,44],[215,61,257,48],[216,6,258,4],[216,10,258,8],[216,14,258,8,"getClient"],[216,29,258,17],[216,31,258,18],[216,32,258,19],[216,37,258,24,"client"],[216,43,258,30],[216,45,258,32],[217,8,259,6],[218,6,260,4],[219,6,262,4],[219,12,262,10],[220,8,262,12,"response"],[220,16,262,20],[221,8,262,22,"args"],[221,12,262,26],[222,8,262,28,"error"],[222,13,262,33],[223,8,262,35,"virtualError"],[224,6,262,48],[224,7,262,49],[224,10,262,52,"handlerData"],[224,21,262,63],[225,6,263,4],[225,12,263,10],[225,13,263,11,"requestInfo"],[225,24,263,22],[225,26,263,24,"requestInit"],[225,37,263,35],[225,38,263,36],[225,41,263,39,"args"],[225,45,263,43],[226,6,265,4],[226,10,265,8],[226,11,265,9,"response"],[226,19,265,17],[226,21,265,19],[227,8,266,6],[228,6,267,4],[229,6,269,4,"_fetchResponseHandler"],[229,27,269,25],[229,28,269,26,"options"],[229,35,269,33],[229,37,269,35,"requestInfo"],[229,48,269,46],[229,50,269,48,"response"],[229,58,269,56],[229,60,269,59,"requestInit"],[229,71,269,70],[229,73,269,72,"error"],[229,78,269,77],[229,82,269,81,"virtualError"],[229,94,269,93],[229,95,269,94],[230,4,270,2],[230,5,270,3],[230,7,270,5],[230,12,270,10],[230,13,270,11],[231,2,271,0],[233,2,273,0],[234,0,274,0],[235,0,275,0],[236,2,276,0],[236,11,276,9,"_wrapXHR"],[236,19,276,17,"_wrapXHR"],[236,20,276,18,"client"],[236,26,276,24],[236,28,276,26,"options"],[236,35,276,33],[236,37,276,35],[237,4,277,2],[237,8,277,6],[237,10,277,8],[237,26,277,24],[237,30,277,28,"GLOBAL_OBJ"],[237,46,277,38],[237,47,277,39],[237,49,277,41],[238,6,278,4],[239,4,279,2],[240,4,281,2],[240,8,281,2,"addXhrInstrumentationHandler"],[240,50,281,30],[240,52,281,31,"handlerData"],[240,63,281,42],[240,67,281,46],[241,6,282,4],[241,10,282,8],[241,14,282,8,"getClient"],[241,29,282,17],[241,31,282,18],[241,32,282,19],[241,37,282,24,"client"],[241,43,282,30],[241,45,282,32],[242,8,283,6],[243,6,284,4],[244,6,286,4],[244,12,286,10],[245,8,286,12,"error"],[245,13,286,17],[246,8,286,19,"virtualError"],[247,6,286,32],[247,7,286,33],[247,10,286,36,"handlerData"],[247,21,286,47],[248,6,288,4],[248,12,288,10,"xhr"],[248,15,288,13],[248,18,288,16,"handlerData"],[248,29,288,27],[248,30,288,28,"xhr"],[248,33,288,31],[249,6,290,4],[249,12,290,10,"sentryXhrData"],[249,25,290,23],[249,28,290,26,"xhr"],[249,31,290,29],[249,32,290,30,"SENTRY_XHR_DATA_KEY"],[249,65,290,49],[249,66,290,50],[250,6,292,4],[250,10,292,8],[250,11,292,9,"sentryXhrData"],[250,24,292,22],[250,26,292,24],[251,8,293,6],[252,6,294,4],[253,6,296,4],[253,12,296,10],[254,8,296,12,"method"],[254,14,296,18],[255,8,296,20,"request_headers"],[255,23,296,35],[255,25,296,37,"headers"],[256,6,296,45],[256,7,296,46],[256,10,296,49,"sentryXhrData"],[256,23,296,62],[257,6,298,4],[257,10,298,8],[258,8,299,6,"_xhrResponseHandler"],[258,27,299,25],[258,28,299,26,"options"],[258,35,299,33],[258,37,299,35,"xhr"],[258,40,299,38],[258,42,299,40,"method"],[258,48,299,46],[258,50,299,48,"headers"],[258,57,299,55],[258,59,299,57,"error"],[258,64,299,62],[258,68,299,66,"virtualError"],[258,80,299,78],[258,81,299,79],[259,6,300,4],[259,7,300,5],[259,8,300,6],[259,15,300,13,"e"],[259,16,300,14],[259,18,300,16],[260,8,301,6,"DEBUG_BUILD"],[260,31,301,17],[260,35,301,21,"logger"],[260,47,301,27],[260,48,301,28,"warn"],[260,52,301,32],[260,53,301,33],[260,110,301,90],[260,112,301,92,"e"],[260,113,301,93],[260,114,301,94],[261,6,302,4],[262,4,303,2],[262,5,303,3],[262,6,303,4],[263,2,304,0],[265,2,306,0],[266,0,307,0],[267,0,308,0],[268,0,309,0],[269,0,310,0],[270,0,311,0],[271,2,312,0],[271,11,312,9,"_shouldCaptureResponse"],[271,33,312,31,"_shouldCaptureResponse"],[271,34,312,32,"options"],[271,41,312,39],[271,43,312,41,"status"],[271,49,312,47],[271,51,312,49,"url"],[271,54,312,52],[271,56,312,54],[272,4,313,2],[272,11,314,4,"_isInGivenStatusRanges"],[272,33,314,26],[272,34,314,27,"options"],[272,41,314,34],[272,42,314,35,"failedRequestStatusCodes"],[272,66,314,59],[272,68,314,61,"status"],[272,74,314,67],[272,75,314,68],[272,79,315,4,"_isInGivenRequestTargets"],[272,103,315,28],[272,104,315,29,"options"],[272,111,315,36],[272,112,315,37,"failedRequestTargets"],[272,132,315,57],[272,134,315,59,"url"],[272,137,315,62],[272,138,315,63],[272,142,316,4],[272,143,316,5],[272,147,316,5,"isSentryRequestUrl"],[272,171,316,23],[272,173,316,24,"url"],[272,176,316,27],[272,178,316,29],[272,182,316,29,"getClient"],[272,197,316,38],[272,199,316,39],[272,200,316,40],[272,201,316,41],[273,2,318,0],[275,2,320,0],[276,0,321,0],[277,0,322,0],[278,0,323,0],[279,0,324,0],[280,0,325,0],[281,2,326,0],[281,11,326,9,"_createEvent"],[281,23,326,21,"_createEvent"],[281,24,326,22,"data"],[281,28,326,26],[281,30,328,2],[282,4,329,2],[282,10,329,8,"client"],[282,16,329,14],[282,19,329,17],[282,23,329,17,"getClient"],[282,38,329,26],[282,40,329,27],[282,41,329,28],[283,4,330,2],[283,10,330,8,"virtualStackTrace"],[283,27,330,25],[283,30,330,28,"client"],[283,36,330,34],[283,40,330,38,"data"],[283,44,330,42],[283,45,330,43,"error"],[283,50,330,48],[283,54,330,52,"data"],[283,58,330,56],[283,59,330,57,"error"],[283,64,330,62],[283,76,330,74,"Error"],[283,81,330,79],[283,84,330,82,"data"],[283,88,330,86],[283,89,330,87,"error"],[283,94,330,92],[283,95,330,93,"stack"],[283,100,330,98],[283,103,330,101,"undefined"],[283,112,330,110],[284,4,331,2],[285,4,332,2],[285,10,332,8,"stack"],[285,15,332,13],[285,18,332,16,"virtualStackTrace"],[285,35,332,33],[285,39,332,37,"client"],[285,45,332,43],[285,48,332,46,"client"],[285,54,332,52],[285,55,332,53,"getOptions"],[285,65,332,63],[285,66,332,64],[285,67,332,65],[285,68,332,66,"stackParser"],[285,79,332,77],[285,80,332,78,"virtualStackTrace"],[285,97,332,95],[285,99,332,97],[285,100,332,98],[285,102,332,100],[285,103,332,101],[285,104,332,102],[285,107,332,105,"undefined"],[285,116,332,114],[286,4,333,2],[286,10,333,8,"message"],[286,17,333,15],[286,20,333,18],[286,59,333,57,"data"],[286,63,333,61],[286,64,333,62,"status"],[286,70,333,68],[286,72,333,70],[287,4,335,2],[287,10,335,8,"event"],[287,15,335,13],[287,18,335,16],[288,6,336,4,"message"],[288,13,336,11],[289,6,337,4,"exception"],[289,15,337,13],[289,17,337,15],[290,8,338,6,"values"],[290,14,338,12],[290,16,338,14],[290,17,339,8],[291,10,340,10,"type"],[291,14,340,14],[291,16,340,16],[291,23,340,23],[292,10,341,10,"value"],[292,15,341,15],[292,17,341,17,"message"],[292,24,341,24],[293,10,342,10,"stacktrace"],[293,20,342,20],[293,22,342,22,"stack"],[293,27,342,27],[293,30,342,30],[294,12,342,32,"frames"],[294,18,342,38],[294,20,342,40,"stack"],[295,10,342,46],[295,11,342,47],[295,14,342,50,"undefined"],[296,8,343,8],[296,9,343,9],[297,6,345,4],[297,7,345,5],[298,6,346,4,"request"],[298,13,346,11],[298,15,346,13],[299,8,347,6,"url"],[299,11,347,9],[299,13,347,11,"data"],[299,17,347,15],[299,18,347,16,"url"],[299,21,347,19],[300,8,348,6,"method"],[300,14,348,12],[300,16,348,14,"data"],[300,20,348,18],[300,21,348,19,"method"],[300,27,348,25],[301,8,349,6,"headers"],[301,15,349,13],[301,17,349,15,"data"],[301,21,349,19],[301,22,349,20,"requestHeaders"],[301,36,349,34],[302,8,350,6,"cookies"],[302,15,350,13],[302,17,350,15,"data"],[302,21,350,19],[302,22,350,20,"requestCookies"],[303,6,351,4],[303,7,351,5],[304,6,352,4,"contexts"],[304,14,352,12],[304,16,352,14],[305,8,353,6,"response"],[305,16,353,14],[305,18,353,16],[306,10,354,8,"status_code"],[306,21,354,19],[306,23,354,21,"data"],[306,27,354,25],[306,28,354,26,"status"],[306,34,354,32],[307,10,355,8,"headers"],[307,17,355,15],[307,19,355,17,"data"],[307,23,355,21],[307,24,355,22,"responseHeaders"],[307,39,355,37],[308,10,356,8,"cookies"],[308,17,356,15],[308,19,356,17,"data"],[308,23,356,21],[308,24,356,22,"responseCookies"],[308,39,356,37],[309,10,357,8,"body_size"],[309,19,357,17],[309,21,357,19,"_getResponseSizeFromHeaders"],[309,48,357,46],[309,49,357,47,"data"],[309,53,357,51],[309,54,357,52,"responseHeaders"],[309,69,357,67],[310,8,358,6],[311,6,359,4],[312,4,360,2],[312,5,360,3],[313,4,362,2],[313,8,362,2,"addExceptionMechanism"],[313,35,362,23],[313,37,362,24,"event"],[313,42,362,29],[313,44,362,31],[314,6,363,4,"type"],[314,10,363,8],[314,12,363,10],[314,25,363,23],[315,6,364,4,"handled"],[315,13,364,11],[315,15,364,13],[316,4,365,2],[316,5,365,3],[316,6,365,4],[317,4,367,2],[317,11,367,9,"event"],[317,16,367,14],[318,2,368,0],[319,2,370,0],[319,11,370,9,"_getRequest"],[319,22,370,20,"_getRequest"],[319,23,370,21,"requestInfo"],[319,34,370,32],[319,36,370,34,"requestInit"],[319,47,370,45],[319,49,370,47],[320,4,371,2],[320,8,371,6],[320,9,371,7,"requestInit"],[320,20,371,18],[320,24,371,22,"requestInfo"],[320,35,371,33],[320,47,371,45,"Request"],[320,54,371,52],[320,56,371,54],[321,6,372,4],[321,13,372,11,"requestInfo"],[321,24,372,22],[322,4,373,2],[324,4,375,2],[325,4,376,2],[326,4,377,2],[327,4,378,2],[327,8,378,6,"requestInfo"],[327,19,378,17],[327,31,378,29,"Request"],[327,38,378,36],[327,42,378,40,"requestInfo"],[327,53,378,51],[327,54,378,52,"bodyUsed"],[327,62,378,60],[327,64,378,62],[328,6,379,4],[328,13,379,11,"requestInfo"],[328,24,379,22],[329,4,380,2],[330,4,382,2],[330,11,382,9],[330,15,382,13,"Request"],[330,22,382,20],[330,23,382,21,"requestInfo"],[330,34,382,32],[330,36,382,34,"requestInit"],[330,47,382,45],[330,48,382,46],[331,2,383,0],[332,2,385,0],[332,11,385,9,"_shouldSendDefaultPii"],[332,32,385,30,"_shouldSendDefaultPii"],[332,33,385,30],[332,35,385,33],[333,4,386,2],[333,10,386,8,"client"],[333,16,386,14],[333,19,386,17],[333,23,386,17,"getClient"],[333,38,386,26],[333,40,386,27],[333,41,386,28],[334,4,387,2],[334,11,387,9,"client"],[334,17,387,15],[334,20,387,18,"Boolean"],[334,27,387,25],[334,28,387,26,"client"],[334,34,387,32],[334,35,387,33,"getOptions"],[334,45,387,43],[334,46,387,44],[334,47,387,45],[334,48,387,46,"sendDefaultPii"],[334,62,387,60],[334,63,387,61],[334,66,387,64],[334,71,387,69],[335,2,388,0],[336,0,388,1],[336,3]],"functionMap":{"names":["<global>","_httpClientIntegration","setup","_fetchResponseHandler","_parseCookieHeaders","_xhrResponseHandler","_getResponseSizeFromHeaders","_parseCookieString","cookieString.split.reduce$argument_0","_extractFetchHeaders","headers.forEach$argument_0","_getXHRResponseHeaders","headers.split.reduce$argument_0","_isInGivenRequestTargets","failedRequestTargets.some$argument_0","_isInGivenStatusRanges","failedRequestStatusCodes.some$argument_0","_wrapFetch","addFetchInstrumentationHandler$argument_0","_wrapXHR","addXhrInstrumentationHandler$argument_0","_shouldCaptureResponse","_createEvent","_getRequest","_shouldSendDefaultPii"],"mappings":"AAA;gCCM;ICS;KDG;CDE;AGc;CH8B;AIE;CJkB;AKS;CL2C;AMQ;CNU;AOQ;yCCC;GDM;CPC;ASQ;kBCG;GDE;CTG;AWQ;sCCO;GDM;CXC;AaQ;mCCI;GDM;CbC;AeQ;uCCI;GDM;CfC;AiBK;iCCK;GDa;CjBC;AmBK;+BCK;GDsB;CnBC;AqBQ;CrBM;AsBQ;CtB0C;AuBE;CvBa;AwBE;CxBG"}},"type":"js/module"}]}