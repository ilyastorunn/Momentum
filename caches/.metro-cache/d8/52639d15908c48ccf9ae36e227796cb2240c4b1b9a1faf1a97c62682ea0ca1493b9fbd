{"dependencies":[{"name":"../../types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"W1BH0a3HSCo8tOLXH7X+m5FGigs=","exportNames":["*"]}},{"name":"./lib/bindReporter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":53,"index":94}}],"key":"yZXTUsWh1M46DyxIbZ88NUHRymg=","exportNames":["*"]}},{"name":"./lib/initMetric.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":95},"end":{"line":3,"column":49,"index":144}}],"key":"3h8m+kvAV2o3xN93IHHrmBqzs4s=","exportNames":["*"]}},{"name":"./lib/interactions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":145},"end":{"line":4,"column":123,"index":268}}],"key":"Q/H4M+k8+8IzXxuv2873yxwzAkI=","exportNames":["*"]}},{"name":"./lib/observe.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":269},"end":{"line":5,"column":43,"index":312}}],"key":"Cz2RoRvLyGQyofIDJmcgFo6dicM=","exportNames":["*"]}},{"name":"./lib/onHidden.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":313},"end":{"line":6,"column":45,"index":358}}],"key":"Me8dIXVCoQX50hAKyNiBvASIs+8=","exportNames":["*"]}},{"name":"./lib/polyfills/interactionCountPolyfill.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":359},"end":{"line":7,"column":91,"index":450}}],"key":"scDlk2WKDLOYPPbp6vPwC12IYso=","exportNames":["*"]}},{"name":"./lib/whenActivated.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":451},"end":{"line":8,"column":55,"index":506}}],"key":"ZUHRzyG92JJbjB1/O2ptt6DviqY=","exportNames":["*"]}},{"name":"./lib/whenIdle.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":507},"end":{"line":9,"column":45,"index":552}}],"key":"zrrBLWRm5MIj+zH+s2UusPup9Jw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.onINP = exports.INPThresholds = void 0;\n  var _types = require(_dependencyMap[0], \"../../types.js\");\n  var _bindReporter = require(_dependencyMap[1], \"./lib/bindReporter.js\");\n  var _initMetric = require(_dependencyMap[2], \"./lib/initMetric.js\");\n  var _interactions = require(_dependencyMap[3], \"./lib/interactions.js\");\n  var _observe = require(_dependencyMap[4], \"./lib/observe.js\");\n  var _onHidden = require(_dependencyMap[5], \"./lib/onHidden.js\");\n  var _interactionCountPolyfill = require(_dependencyMap[6], \"./lib/polyfills/interactionCountPolyfill.js\");\n  var _whenActivated = require(_dependencyMap[7], \"./lib/whenActivated.js\");\n  var _whenIdle = require(_dependencyMap[8], \"./lib/whenIdle.js\");\n  /*\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     https://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** Thresholds for INP. See https://web.dev/articles/inp#what_is_a_good_inp_score */\n  const INPThresholds = exports.INPThresholds = [200, 500];\n\n  /**\n   * Calculates the [INP](https://web.dev/articles/inp) value for the current\n   * page and calls the `callback` function once the value is ready, along with\n   * the `event` performance entries reported for that interaction. The reported\n   * value is a `DOMHighResTimeStamp`.\n   *\n   * A custom `durationThreshold` configuration option can optionally be passed to\n   * control what `event-timing` entries are considered for INP reporting. The\n   * default threshold is `40`, which means INP scores of less than 40 are\n   * reported as 0. Note that this will not affect your 75th percentile INP value\n   * unless that value is also less than 40 (well below the recommended\n   * [good](https://web.dev/articles/inp#what_is_a_good_inp_score) threshold).\n   *\n   * If the `reportAllChanges` configuration option is set to `true`, the\n   * `callback` function will be called as soon as the value is initially\n   * determined as well as any time the value changes throughout the page\n   * lifespan.\n   *\n   * _**Important:** INP should be continually monitored for changes throughout\n   * the entire lifespan of a pageâ€”including if the user returns to the page after\n   * it's been hidden/backgrounded. However, since browsers often [will not fire\n   * additional callbacks once the user has backgrounded a\n   * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n   * `callback` is always called when the page's visibility state changes to\n   * hidden. As a result, the `callback` function might be called multiple times\n   * during the same page load._\n   */\n  const onINP = (onReport, opts = {}) => {\n    // Return if the browser doesn't support all APIs needed to measure INP.\n    if (!('PerformanceEventTiming' in _types.WINDOW && 'interactionId' in PerformanceEventTiming.prototype)) {\n      return;\n    }\n    (0, _whenActivated.whenActivated)(() => {\n      // TODO(philipwalton): remove once the polyfill is no longer needed.\n      (0, _interactionCountPolyfill.initInteractionCountPolyfill)();\n      const metric = (0, _initMetric.initMetric)('INP');\n      // eslint-disable-next-line prefer-const\n      let report;\n      const handleEntries = entries => {\n        // Queue the `handleEntries()` callback in the next idle task.\n        // This is needed to increase the chances that all event entries that\n        // occurred between the user interaction and the next paint\n        // have been dispatched. Note: there is currently an experiment\n        // running in Chrome (EventTimingKeypressAndCompositionInteractionId)\n        // 123+ that if rolled out fully may make this no longer necessary.\n        (0, _whenIdle.whenIdle)(() => {\n          entries.forEach(_interactions.processInteractionEntry);\n          const inp = (0, _interactions.estimateP98LongestInteraction)();\n          if (inp && inp.latency !== metric.value) {\n            metric.value = inp.latency;\n            metric.entries = inp.entries;\n            report();\n          }\n        });\n      };\n      const po = (0, _observe.observe)('event', handleEntries, {\n        // Event Timing entries have their durations rounded to the nearest 8ms,\n        // so a duration of 40ms would be any event that spans 2.5 or more frames\n        // at 60Hz. This threshold is chosen to strike a balance between usefulness\n        // and performance. Running this callback for any interaction that spans\n        // just one or two frames is likely not worth the insight that could be\n        // gained.\n        durationThreshold: opts.durationThreshold != null ? opts.durationThreshold : _interactions.DEFAULT_DURATION_THRESHOLD\n      });\n      report = (0, _bindReporter.bindReporter)(onReport, metric, INPThresholds, opts.reportAllChanges);\n      if (po) {\n        // Also observe entries of type `first-input`. This is useful in cases\n        // where the first interaction is less than the `durationThreshold`.\n        po.observe({\n          type: 'first-input',\n          buffered: true\n        });\n        (0, _onHidden.onHidden)(() => {\n          handleEntries(po.takeRecords());\n          report(true);\n        });\n      }\n    });\n  };\n  exports.onINP = onINP;\n});","lineCount":114,"map":[[6,2,1,0],[6,6,1,0,"_types"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_bindReporter"],[7,19,2,0],[7,22,2,0,"require"],[7,29,2,0],[7,30,2,0,"_dependencyMap"],[7,44,2,0],[8,2,3,0],[8,6,3,0,"_initMetric"],[8,17,3,0],[8,20,3,0,"require"],[8,27,3,0],[8,28,3,0,"_dependencyMap"],[8,42,3,0],[9,2,4,0],[9,6,4,0,"_interactions"],[9,19,4,0],[9,22,4,0,"require"],[9,29,4,0],[9,30,4,0,"_dependencyMap"],[9,44,4,0],[10,2,5,0],[10,6,5,0,"_observe"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,0],[11,6,6,0,"_onHidden"],[11,15,6,0],[11,18,6,0,"require"],[11,25,6,0],[11,26,6,0,"_dependencyMap"],[11,40,6,0],[12,2,7,0],[12,6,7,0,"_interactionCountPolyfill"],[12,31,7,0],[12,34,7,0,"require"],[12,41,7,0],[12,42,7,0,"_dependencyMap"],[12,56,7,0],[13,2,8,0],[13,6,8,0,"_whenActivated"],[13,20,8,0],[13,23,8,0,"require"],[13,30,8,0],[13,31,8,0,"_dependencyMap"],[13,45,8,0],[14,2,9,0],[14,6,9,0,"_whenIdle"],[14,15,9,0],[14,18,9,0,"require"],[14,25,9,0],[14,26,9,0,"_dependencyMap"],[14,40,9,0],[15,2,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[31,2,28,0],[32,2,29,0],[32,8,29,6,"INPThresholds"],[32,21,29,19],[32,24,29,19,"exports"],[32,31,29,19],[32,32,29,19,"INPThresholds"],[32,45,29,19],[32,48,29,22],[32,49,29,23],[32,52,29,26],[32,54,29,28],[32,57,29,31],[32,58,29,32],[34,2,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,0,51,0],[55,0,52,0],[56,0,53,0],[57,0,54,0],[58,0,55,0],[59,0,56,0],[60,0,57,0],[61,2,58,0],[61,8,58,6,"onINP"],[61,13,58,11],[61,16,58,14,"onINP"],[61,17,58,15,"onReport"],[61,25,58,23],[61,27,58,25,"opts"],[61,31,58,29],[61,34,58,32],[61,35,58,33],[61,36,58,34],[61,41,58,39],[62,4,59,2],[63,4,60,2],[63,8,60,6],[63,10,60,8],[63,34,60,32],[63,38,60,36,"WINDOW"],[63,51,60,42],[63,55,60,46],[63,70,60,61],[63,74,60,65,"PerformanceEventTiming"],[63,96,60,87],[63,97,60,88,"prototype"],[63,106,60,97],[63,107,60,98],[63,109,60,100],[64,6,61,4],[65,4,62,2],[66,4,64,2],[66,8,64,2,"whenActivated"],[66,36,64,15],[66,38,64,16],[66,44,64,22],[67,6,65,4],[68,6,66,4],[68,10,66,4,"initInteractionCountPolyfill"],[68,64,66,32],[68,66,66,33],[68,67,66,34],[69,6,68,4],[69,12,68,10,"metric"],[69,18,68,16],[69,21,68,19],[69,25,68,19,"initMetric"],[69,47,68,29],[69,49,68,30],[69,54,68,35],[69,55,68,36],[70,6,69,4],[71,6,70,4],[71,10,70,8,"report"],[71,16,70,14],[72,6,72,4],[72,12,72,10,"handleEntries"],[72,25,72,23],[72,28,72,27,"entries"],[72,35,72,34],[72,39,72,39],[73,8,73,6],[74,8,74,6],[75,8,75,6],[76,8,76,6],[77,8,77,6],[78,8,78,6],[79,8,79,6],[79,12,79,6,"whenIdle"],[79,30,79,14],[79,32,79,15],[79,38,79,21],[80,10,80,8,"entries"],[80,17,80,15],[80,18,80,16,"forEach"],[80,25,80,23],[80,26,80,24,"processInteractionEntry"],[80,63,80,47],[80,64,80,48],[81,10,82,8],[81,16,82,14,"inp"],[81,19,82,17],[81,22,82,20],[81,26,82,20,"estimateP98LongestInteraction"],[81,69,82,49],[81,71,82,50],[81,72,82,51],[82,10,84,8],[82,14,84,12,"inp"],[82,17,84,15],[82,21,84,19,"inp"],[82,24,84,22],[82,25,84,23,"latency"],[82,32,84,30],[82,37,84,35,"metric"],[82,43,84,41],[82,44,84,42,"value"],[82,49,84,47],[82,51,84,49],[83,12,85,10,"metric"],[83,18,85,16],[83,19,85,17,"value"],[83,24,85,22],[83,27,85,25,"inp"],[83,30,85,28],[83,31,85,29,"latency"],[83,38,85,36],[84,12,86,10,"metric"],[84,18,86,16],[84,19,86,17,"entries"],[84,26,86,24],[84,29,86,27,"inp"],[84,32,86,30],[84,33,86,31,"entries"],[84,40,86,38],[85,12,87,10,"report"],[85,18,87,16],[85,19,87,17],[85,20,87,18],[86,10,88,8],[87,8,89,6],[87,9,89,7],[87,10,89,8],[88,6,90,4],[88,7,90,5],[89,6,92,4],[89,12,92,10,"po"],[89,14,92,12],[89,17,92,15],[89,21,92,15,"observe"],[89,37,92,22],[89,39,92,23],[89,46,92,30],[89,48,92,32,"handleEntries"],[89,61,92,45],[89,63,92,47],[90,8,93,6],[91,8,94,6],[92,8,95,6],[93,8,96,6],[94,8,97,6],[95,8,98,6],[96,8,99,6,"durationThreshold"],[96,25,99,23],[96,27,99,25,"opts"],[96,31,99,29],[96,32,99,30,"durationThreshold"],[96,49,99,47],[96,53,99,51],[96,57,99,55],[96,60,99,58,"opts"],[96,64,99,62],[96,65,99,63,"durationThreshold"],[96,82,99,80],[96,85,99,83,"DEFAULT_DURATION_THRESHOLD"],[97,6,100,4],[97,7,100,5],[97,8,100,6],[98,6,102,4,"report"],[98,12,102,10],[98,15,102,13],[98,19,102,13,"bindReporter"],[98,45,102,25],[98,47,102,26,"onReport"],[98,55,102,34],[98,57,102,36,"metric"],[98,63,102,42],[98,65,102,44,"INPThresholds"],[98,78,102,57],[98,80,102,59,"opts"],[98,84,102,63],[98,85,102,64,"reportAllChanges"],[98,101,102,80],[98,102,102,81],[99,6,104,4],[99,10,104,8,"po"],[99,12,104,10],[99,14,104,12],[100,8,105,6],[101,8,106,6],[102,8,107,6,"po"],[102,10,107,8],[102,11,107,9,"observe"],[102,18,107,16],[102,19,107,17],[103,10,107,19,"type"],[103,14,107,23],[103,16,107,25],[103,29,107,38],[104,10,107,40,"buffered"],[104,18,107,48],[104,20,107,50],[105,8,107,55],[105,9,107,56],[105,10,107,57],[106,8,109,6],[106,12,109,6,"onHidden"],[106,30,109,14],[106,32,109,15],[106,38,109,21],[107,10,110,8,"handleEntries"],[107,23,110,21],[107,24,110,22,"po"],[107,26,110,24],[107,27,110,25,"takeRecords"],[107,38,110,36],[107,39,110,37],[107,40,110,39],[107,41,110,40],[108,10,111,8,"report"],[108,16,111,14],[108,17,111,15],[108,21,111,19],[108,22,111,20],[109,8,112,6],[109,9,112,7],[109,10,112,8],[110,6,113,4],[111,4,114,2],[111,5,114,3],[111,6,114,4],[112,2,115,0],[112,3,115,1],[113,2,115,2,"exports"],[113,9,115,2],[113,10,115,2,"onINP"],[113,15,115,2],[113,18,115,2,"onINP"],[113,23,115,2],[114,0,115,2],[114,3]],"functionMap":{"names":["<global>","onINP","whenActivated$argument_0","handleEntries","whenIdle$argument_0","onHidden$argument_0"],"mappings":"AAA;cCyD;gBCM;0BCQ;eCO;ODU;KDC;eGmB;OHG;GDE;CDC"}},"type":"js/module"}]}