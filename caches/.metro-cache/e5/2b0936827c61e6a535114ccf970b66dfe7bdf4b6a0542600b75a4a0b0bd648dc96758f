{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":211,"index":211}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../integrations/appRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":212},"end":{"line":2,"column":72,"index":284}}],"key":"+tSVqc9/FKTnE62Yp6qXujhYyu0=","exportNames":["*"]}},{"name":"../utils/span","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":285},"end":{"line":3,"column":45,"index":330}}],"key":"SmejHLZsYa7o/dEFwNj+T2rtX3Q=","exportNames":["*"]}},{"name":"../utils/worldwide","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":331},"end":{"line":4,"column":51,"index":382}}],"key":"/9Zkbo5cHZuI/WH8RoGGgsefOs8=","exportNames":["*"]}},{"name":"../wrapper","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":383},"end":{"line":5,"column":36,"index":419}}],"key":"3qo6tWpJLamBuMFs5ex6CktRJQ4=","exportNames":["*"]}},{"name":"./onSpanEndUtils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":420},"end":{"line":6,"column":61,"index":481}}],"key":"xw+K+bKzLEuqElYqVDtaM97OfQQ=","exportNames":["*"]}},{"name":"./origin","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":482},"end":{"line":7,"column":72,"index":554}}],"key":"gjqB2ZMKB4umzeBLbntsA0M0Xog=","exportNames":["*"]}},{"name":"./reactnativetracing","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":555},"end":{"line":8,"column":72,"index":627}}],"key":"WcrzgriTW4BAo8R7+tERL1tdlDo=","exportNames":["*"]}},{"name":"./semanticAttributes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":628},"end":{"line":9,"column":115,"index":743}}],"key":"2myej2OERfMzH35ESLpPNKWn/hg=","exportNames":["*"]}},{"name":"./span","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":744},"end":{"line":10,"column":171,"index":915}}],"key":"WASfu1uBL/rVwi9nIGl911GmKqk=","exportNames":["*"]}},{"name":"./timeToDisplayFallback","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":916},"end":{"line":11,"column":74,"index":990}}],"key":"AsWYt5Dri7BXFa74jeTx6iMNK4s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.INTEGRATION_NAME = void 0;\n  exports.getReactNavigationIntegration = getReactNavigationIntegration;\n  exports.reactNavigationIntegration = void 0;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _appRegistry = require(_dependencyMap[1], \"../integrations/appRegistry\");\n  var _span = require(_dependencyMap[2], \"../utils/span\");\n  var _worldwide = require(_dependencyMap[3], \"../utils/worldwide\");\n  var _wrapper = require(_dependencyMap[4], \"../wrapper\");\n  var _onSpanEndUtils = require(_dependencyMap[5], \"./onSpanEndUtils\");\n  var _origin = require(_dependencyMap[6], \"./origin\");\n  var _reactnativetracing = require(_dependencyMap[7], \"./reactnativetracing\");\n  var _semanticAttributes = require(_dependencyMap[8], \"./semanticAttributes\");\n  var _span2 = require(_dependencyMap[9], \"./span\");\n  var _timeToDisplayFallback = require(_dependencyMap[10], \"./timeToDisplayFallback\");\n  const INTEGRATION_NAME = exports.INTEGRATION_NAME = 'ReactNavigation';\n  const NAVIGATION_HISTORY_MAX_SIZE = 200;\n  /**\n   * Instrumentation for React-Navigation V5 and above. See docs or sample app for usage.\n   *\n   * How this works:\n   * - `_onDispatch` is called every time a dispatch happens and sets an IdleTransaction on the scope without any route context.\n   * - `_onStateChange` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n   * - If `_onStateChange` isn't called within `STATE_CHANGE_TIMEOUT_DURATION` of the dispatch, then the transaction is not sampled and finished.\n   */\n  const reactNavigationIntegration = ({\n    routeChangeTimeoutMs = 1000,\n    enableTimeToInitialDisplay = false,\n    ignoreEmptyBackNavigationTransactions = true,\n    enableTimeToInitialDisplayForPreloadedRoutes = false,\n    useDispatchedActionData = false\n  } = {}) => {\n    let navigationContainer;\n    let tracing;\n    let idleSpanOptions = _span2.defaultIdleOptions;\n    let latestRoute;\n    let latestNavigationSpan;\n    let navigationProcessingSpan;\n    let initialStateHandled = false;\n    let stateChangeTimeout;\n    let recentRouteKeys = [];\n    if (enableTimeToInitialDisplay) {\n      _wrapper.NATIVE.initNativeReactNavigationNewFrameTracking().catch(reason => {\n        _core.logger.error(`${INTEGRATION_NAME} Failed to initialize native new frame tracking: ${reason}`);\n      });\n    }\n    /**\n     * Set the initial state and start initial navigation span for the current screen.\n     */\n    const afterAllSetup = client => {\n      var _a;\n      tracing = (0, _reactnativetracing.getReactNativeTracingIntegration)(client);\n      if (tracing) {\n        idleSpanOptions = {\n          finalTimeout: tracing.options.finalTimeoutMs,\n          idleTimeout: tracing.options.idleTimeoutMs\n        };\n      }\n      if (initialStateHandled) {\n        // We create an initial state here to ensure a transaction gets created before the first route mounts.\n        // This assumes that the Sentry.init() call is made before the first route mounts.\n        // If this is not the case, the first transaction will be nameless 'Route Changed'\n        return undefined;\n      }\n      (_a = (0, _appRegistry.getAppRegistryIntegration)(client)) === null || _a === void 0 ? void 0 : _a.onRunApplication(() => {\n        if (initialStateHandled) {\n          // To avoid conflict with the initial transaction we check if it was already handled.\n          // This ensures runApplication calls after the initial start are correctly traced.\n          // This is used for example when Activity is (re)started on Android.\n          _core.logger.log('[ReactNavigationIntegration] Starting new idle navigation span based on runApplication call.');\n          startIdleNavigationSpan();\n        }\n      });\n      startIdleNavigationSpan();\n      if (!navigationContainer) {\n        // This is expected as navigation container is registered after the root component is mounted.\n        return undefined;\n      }\n      // Navigation container already registered, just populate with route state\n      updateLatestNavigationSpanWithCurrentRoute();\n      initialStateHandled = true;\n    };\n    const registerNavigationContainer = maybeNewNavigationContainer => {\n      if (_worldwide.RN_GLOBAL_OBJ.__sentry_rn_v5_registered) {\n        _core.logger.debug(`${INTEGRATION_NAME} Instrumentation already exists, but registering again...`);\n        // In the past we have not allowed re-registering the navigation container to avoid unexpected behavior.\n        // But this doesn't work for Android and re-recreating application main activity.\n        // Where new navigation container is created and the old one is discarded. We need to re-register to\n        // trace the new navigation container navigation.\n      }\n      let newNavigationContainer;\n      if ((0, _core.isPlainObject)(maybeNewNavigationContainer) && 'current' in maybeNewNavigationContainer) {\n        newNavigationContainer = maybeNewNavigationContainer.current;\n      } else {\n        newNavigationContainer = maybeNewNavigationContainer;\n      }\n      if (navigationContainer === newNavigationContainer) {\n        _core.logger.log(`${INTEGRATION_NAME} Navigation container ref is the same as the one already registered.`);\n        return;\n      }\n      navigationContainer = newNavigationContainer;\n      if (!navigationContainer) {\n        _core.logger.warn(`${INTEGRATION_NAME} Received invalid navigation container ref!`);\n        return undefined;\n      }\n      // This action is emitted on every dispatch\n      navigationContainer.addListener('__unsafe_action__', startIdleNavigationSpan);\n      navigationContainer.addListener('state', updateLatestNavigationSpanWithCurrentRoute);\n      _worldwide.RN_GLOBAL_OBJ.__sentry_rn_v5_registered = true;\n      if (initialStateHandled) {\n        return undefined;\n      }\n      if (!latestNavigationSpan) {\n        _core.logger.log(`${INTEGRATION_NAME} Navigation container registered, but integration has not been setup yet.`);\n        return undefined;\n      }\n      // Navigation Container is registered after the first navigation\n      // Initial navigation span was started, after integration setup,\n      // so now we populate it with the current route.\n      updateLatestNavigationSpanWithCurrentRoute();\n      initialStateHandled = true;\n    };\n    /**\n     * To be called on every React-Navigation action dispatch.\n     * It does not name the transaction or populate it with route information. Instead, it waits for the state to fully change\n     * and gets the route information from there, @see updateLatestNavigationSpanWithCurrentRoute\n     */\n    const startIdleNavigationSpan = unknownEvent => {\n      const event = unknownEvent;\n      if (useDispatchedActionData && (event === null || event === void 0 ? void 0 : event.data.noop)) {\n        _core.logger.debug(`${INTEGRATION_NAME} Navigation action is a noop, not starting navigation span.`);\n        return;\n      }\n      const navigationActionType = useDispatchedActionData ? event === null || event === void 0 ? void 0 : event.data.action.type : undefined;\n      if (useDispatchedActionData && [\n      // Process common actions\n      'PRELOAD', 'SET_PARAMS',\n      // Drawer actions\n      'OPEN_DRAWER', 'CLOSE_DRAWER', 'TOGGLE_DRAWER'].includes(navigationActionType)) {\n        _core.logger.debug(`${INTEGRATION_NAME} Navigation action is ${navigationActionType}, not starting navigation span.`);\n        return;\n      }\n      if (latestNavigationSpan) {\n        _core.logger.log(`${INTEGRATION_NAME} A transaction was detected that turned out to be a noop, discarding.`);\n        _discardLatestTransaction();\n        clearStateChangeTimeout();\n      }\n      latestNavigationSpan = (0, _span2.startIdleNavigationSpan)(tracing && tracing.options.beforeStartSpan ? tracing.options.beforeStartSpan((0, _span2.getDefaultIdleNavigationSpanOptions)()) : (0, _span2.getDefaultIdleNavigationSpanOptions)(), idleSpanOptions);\n      latestNavigationSpan === null || latestNavigationSpan === void 0 ? void 0 : latestNavigationSpan.setAttribute(_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, _origin.SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NAVIGATION);\n      latestNavigationSpan === null || latestNavigationSpan === void 0 ? void 0 : latestNavigationSpan.setAttribute(_semanticAttributes.SEMANTIC_ATTRIBUTE_NAVIGATION_ACTION_TYPE, navigationActionType);\n      if (ignoreEmptyBackNavigationTransactions) {\n        (0, _onSpanEndUtils.ignoreEmptyBackNavigation)((0, _core.getClient)(), latestNavigationSpan);\n      }\n      if (enableTimeToInitialDisplay) {\n        _wrapper.NATIVE.setActiveSpanId(latestNavigationSpan === null || latestNavigationSpan === void 0 ? void 0 : latestNavigationSpan.spanContext().spanId);\n        navigationProcessingSpan = (0, _core.startInactiveSpan)({\n          op: 'navigation.processing',\n          name: 'Navigation dispatch to navigation cancelled or screen mounted',\n          startTime: latestNavigationSpan && (0, _core.spanToJSON)(latestNavigationSpan).start_timestamp\n        });\n        navigationProcessingSpan.setAttribute(_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, _origin.SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NAVIGATION);\n      }\n      stateChangeTimeout = setTimeout(_discardLatestTransaction, routeChangeTimeoutMs);\n    };\n    /**\n     * To be called AFTER the state has been changed to populate the transaction with the current route.\n     */\n    const updateLatestNavigationSpanWithCurrentRoute = () => {\n      const stateChangedTimestamp = (0, _core.timestampInSeconds)();\n      const previousRoute = latestRoute;\n      if (!navigationContainer) {\n        _core.logger.warn(`${INTEGRATION_NAME} Missing navigation container ref. Route transactions will not be sent.`);\n        return undefined;\n      }\n      const route = navigationContainer.getCurrentRoute();\n      if (!route) {\n        _core.logger.debug(`[${INTEGRATION_NAME}] Navigation state changed, but no route is rendered.`);\n        return undefined;\n      }\n      if (!latestNavigationSpan) {\n        _core.logger.debug(`[${INTEGRATION_NAME}] Navigation state changed, but navigation transaction was not started on dispatch.`);\n        return undefined;\n      }\n      (0, _timeToDisplayFallback.addTimeToInitialDisplayFallback)(latestNavigationSpan.spanContext().spanId, _wrapper.NATIVE.getNewScreenTimeToDisplay());\n      if (previousRoute && previousRoute.key === route.key) {\n        _core.logger.debug(`[${INTEGRATION_NAME}] Navigation state changed, but route is the same as previous.`);\n        pushRecentRouteKey(route.key);\n        latestRoute = route;\n        // Clear the latest transaction as it has been handled.\n        latestNavigationSpan = undefined;\n        return undefined;\n      }\n      const routeHasBeenSeen = recentRouteKeys.includes(route.key);\n      navigationProcessingSpan === null || navigationProcessingSpan === void 0 ? void 0 : navigationProcessingSpan.updateName(`Navigation dispatch to screen ${route.name} mounted`);\n      navigationProcessingSpan === null || navigationProcessingSpan === void 0 ? void 0 : navigationProcessingSpan.setStatus({\n        code: _core.SPAN_STATUS_OK\n      });\n      navigationProcessingSpan === null || navigationProcessingSpan === void 0 ? void 0 : navigationProcessingSpan.end(stateChangedTimestamp);\n      navigationProcessingSpan = undefined;\n      if ((0, _core.spanToJSON)(latestNavigationSpan).description === _span2.DEFAULT_NAVIGATION_SPAN_NAME) {\n        latestNavigationSpan.updateName(route.name);\n      }\n      latestNavigationSpan.setAttributes({\n        'route.name': route.name,\n        'route.key': route.key,\n        // TODO: filter PII params instead of dropping them all\n        // 'route.params': {},\n        'route.has_been_seen': routeHasBeenSeen,\n        'previous_route.name': previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.name,\n        'previous_route.key': previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key,\n        // TODO: filter PII params instead of dropping them all\n        // 'previous_route.params': {},\n        [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n        [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation'\n      });\n      // Clear the timeout so the transaction does not get cancelled.\n      clearStateChangeTimeout();\n      (0, _core.addBreadcrumb)({\n        category: 'navigation',\n        type: 'navigation',\n        message: `Navigation to ${route.name}`,\n        data: {\n          from: previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.name,\n          to: route.name\n        }\n      });\n      tracing === null || tracing === void 0 ? void 0 : tracing.setCurrentRoute(route.name);\n      pushRecentRouteKey(route.key);\n      latestRoute = route;\n      // Clear the latest transaction as it has been handled.\n      latestNavigationSpan = undefined;\n    };\n    /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n    const pushRecentRouteKey = key => {\n      recentRouteKeys.push(key);\n      if (recentRouteKeys.length > NAVIGATION_HISTORY_MAX_SIZE) {\n        recentRouteKeys = recentRouteKeys.slice(recentRouteKeys.length - NAVIGATION_HISTORY_MAX_SIZE);\n      }\n    };\n    /** Cancels the latest transaction so it does not get sent to Sentry. */\n    const _discardLatestTransaction = () => {\n      if (latestNavigationSpan) {\n        if ((0, _span.isSentrySpan)(latestNavigationSpan)) {\n          latestNavigationSpan['_sampled'] = false;\n        }\n        // TODO: What if it's not SentrySpan?\n        latestNavigationSpan.end();\n        latestNavigationSpan = undefined;\n      }\n      if (navigationProcessingSpan) {\n        navigationProcessingSpan = undefined;\n      }\n    };\n    const clearStateChangeTimeout = () => {\n      if (typeof stateChangeTimeout !== 'undefined') {\n        clearTimeout(stateChangeTimeout);\n        stateChangeTimeout = undefined;\n      }\n    };\n    return {\n      name: INTEGRATION_NAME,\n      afterAllSetup,\n      registerNavigationContainer,\n      options: {\n        routeChangeTimeoutMs,\n        enableTimeToInitialDisplay,\n        ignoreEmptyBackNavigationTransactions,\n        enableTimeToInitialDisplayForPreloadedRoutes,\n        useDispatchedActionData\n      }\n    };\n  };\n  /**\n   * Returns React Navigation integration of the given client.\n   */\n  exports.reactNavigationIntegration = reactNavigationIntegration;\n  function getReactNavigationIntegration(client) {\n    return client.getIntegrationByName(INTEGRATION_NAME);\n  }\n});","lineCount":283,"map":[[8,2,1,0],[8,6,1,0,"_core"],[8,11,1,0],[8,14,1,0,"require"],[8,21,1,0],[8,22,1,0,"_dependencyMap"],[8,36,1,0],[9,2,2,0],[9,6,2,0,"_appRegistry"],[9,18,2,0],[9,21,2,0,"require"],[9,28,2,0],[9,29,2,0,"_dependencyMap"],[9,43,2,0],[10,2,3,0],[10,6,3,0,"_span"],[10,11,3,0],[10,14,3,0,"require"],[10,21,3,0],[10,22,3,0,"_dependencyMap"],[10,36,3,0],[11,2,4,0],[11,6,4,0,"_worldwide"],[11,16,4,0],[11,19,4,0,"require"],[11,26,4,0],[11,27,4,0,"_dependencyMap"],[11,41,4,0],[12,2,5,0],[12,6,5,0,"_wrapper"],[12,14,5,0],[12,17,5,0,"require"],[12,24,5,0],[12,25,5,0,"_dependencyMap"],[12,39,5,0],[13,2,6,0],[13,6,6,0,"_onSpanEndUtils"],[13,21,6,0],[13,24,6,0,"require"],[13,31,6,0],[13,32,6,0,"_dependencyMap"],[13,46,6,0],[14,2,7,0],[14,6,7,0,"_origin"],[14,13,7,0],[14,16,7,0,"require"],[14,23,7,0],[14,24,7,0,"_dependencyMap"],[14,38,7,0],[15,2,8,0],[15,6,8,0,"_reactnativetracing"],[15,25,8,0],[15,28,8,0,"require"],[15,35,8,0],[15,36,8,0,"_dependencyMap"],[15,50,8,0],[16,2,9,0],[16,6,9,0,"_semanticAttributes"],[16,25,9,0],[16,28,9,0,"require"],[16,35,9,0],[16,36,9,0,"_dependencyMap"],[16,50,9,0],[17,2,10,0],[17,6,10,0,"_span2"],[17,12,10,0],[17,15,10,0,"require"],[17,22,10,0],[17,23,10,0,"_dependencyMap"],[17,37,10,0],[18,2,11,0],[18,6,11,0,"_timeToDisplayFallback"],[18,28,11,0],[18,31,11,0,"require"],[18,38,11,0],[18,39,11,0,"_dependencyMap"],[18,53,11,0],[19,2,12,7],[19,8,12,13,"INTEGRATION_NAME"],[19,24,12,29],[19,27,12,29,"exports"],[19,34,12,29],[19,35,12,29,"INTEGRATION_NAME"],[19,51,12,29],[19,54,12,32],[19,71,12,49],[20,2,13,0],[20,8,13,6,"NAVIGATION_HISTORY_MAX_SIZE"],[20,35,13,33],[20,38,13,36],[20,41,13,39],[21,2,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,2,22,7],[29,8,22,13,"reactNavigationIntegration"],[29,34,22,39],[29,37,22,42,"reactNavigationIntegration"],[29,38,22,43],[30,4,22,45,"routeChangeTimeoutMs"],[30,24,22,65],[30,27,22,68],[30,31,22,72],[31,4,22,74,"enableTimeToInitialDisplay"],[31,30,22,100],[31,33,22,103],[31,38,22,108],[32,4,22,110,"ignoreEmptyBackNavigationTransactions"],[32,41,22,147],[32,44,22,150],[32,48,22,154],[33,4,22,156,"enableTimeToInitialDisplayForPreloadedRoutes"],[33,48,22,200],[33,51,22,203],[33,56,22,208],[34,4,22,210,"useDispatchedActionData"],[34,27,22,233],[34,30,22,236],[35,2,22,243],[35,3,22,244],[35,6,22,247],[35,7,22,248],[35,8,22,249],[35,13,22,254],[36,4,23,4],[36,8,23,8,"navigationContainer"],[36,27,23,27],[37,4,24,4],[37,8,24,8,"tracing"],[37,15,24,15],[38,4,25,4],[38,8,25,8,"idleSpanOptions"],[38,23,25,23],[38,26,25,26,"defaultIdleOptions"],[38,51,25,44],[39,4,26,4],[39,8,26,8,"latestRoute"],[39,19,26,19],[40,4,27,4],[40,8,27,8,"latestNavigationSpan"],[40,28,27,28],[41,4,28,4],[41,8,28,8,"navigationProcessingSpan"],[41,32,28,32],[42,4,29,4],[42,8,29,8,"initialStateHandled"],[42,27,29,27],[42,30,29,30],[42,35,29,35],[43,4,30,4],[43,8,30,8,"stateChangeTimeout"],[43,26,30,26],[44,4,31,4],[44,8,31,8,"recentRouteKeys"],[44,23,31,23],[44,26,31,26],[44,28,31,28],[45,4,32,4],[45,8,32,8,"enableTimeToInitialDisplay"],[45,34,32,34],[45,36,32,36],[46,6,33,8,"NATIVE"],[46,21,33,14],[46,22,33,15,"initNativeReactNavigationNewFrameTracking"],[46,63,33,56],[46,64,33,57],[46,65,33,58],[46,66,33,59,"catch"],[46,71,33,64],[46,72,33,66,"reason"],[46,78,33,72],[46,82,33,77],[47,8,34,12,"logger"],[47,20,34,18],[47,21,34,19,"error"],[47,26,34,24],[47,27,34,25],[47,30,34,28,"INTEGRATION_NAME"],[47,46,34,44],[47,98,34,96,"reason"],[47,104,34,102],[47,106,34,104],[47,107,34,105],[48,6,35,8],[48,7,35,9],[48,8,35,10],[49,4,36,4],[50,4,37,4],[51,0,38,0],[52,0,39,0],[53,4,40,4],[53,10,40,10,"afterAllSetup"],[53,23,40,23],[53,26,40,27,"client"],[53,32,40,33],[53,36,40,38],[54,6,41,8],[54,10,41,12,"_a"],[54,12,41,14],[55,6,42,8,"tracing"],[55,13,42,15],[55,16,42,18],[55,20,42,18,"getReactNativeTracingIntegration"],[55,72,42,50],[55,74,42,51,"client"],[55,80,42,57],[55,81,42,58],[56,6,43,8],[56,10,43,12,"tracing"],[56,17,43,19],[56,19,43,21],[57,8,44,12,"idleSpanOptions"],[57,23,44,27],[57,26,44,30],[58,10,45,16,"finalTimeout"],[58,22,45,28],[58,24,45,30,"tracing"],[58,31,45,37],[58,32,45,38,"options"],[58,39,45,45],[58,40,45,46,"finalTimeoutMs"],[58,54,45,60],[59,10,46,16,"idleTimeout"],[59,21,46,27],[59,23,46,29,"tracing"],[59,30,46,36],[59,31,46,37,"options"],[59,38,46,44],[59,39,46,45,"idleTimeoutMs"],[60,8,47,12],[60,9,47,13],[61,6,48,8],[62,6,49,8],[62,10,49,12,"initialStateHandled"],[62,29,49,31],[62,31,49,33],[63,8,50,12],[64,8,51,12],[65,8,52,12],[66,8,53,12],[66,15,53,19,"undefined"],[66,24,53,28],[67,6,54,8],[68,6,55,8],[68,7,55,9,"_a"],[68,9,55,11],[68,12,55,14],[68,16,55,14,"getAppRegistryIntegration"],[68,54,55,39],[68,56,55,40,"client"],[68,62,55,46],[68,63,55,47],[68,69,55,53],[68,73,55,57],[68,77,55,61,"_a"],[68,79,55,63],[68,84,55,68],[68,89,55,73],[68,90,55,74],[68,93,55,77],[68,98,55,82],[68,99,55,83],[68,102,55,86,"_a"],[68,104,55,88],[68,105,55,89,"onRunApplication"],[68,121,55,105],[68,122,55,106],[68,128,55,112],[69,8,56,12],[69,12,56,16,"initialStateHandled"],[69,31,56,35],[69,33,56,37],[70,10,57,16],[71,10,58,16],[72,10,59,16],[73,10,60,16,"logger"],[73,22,60,22],[73,23,60,23,"log"],[73,26,60,26],[73,27,60,27],[73,121,60,121],[73,122,60,122],[74,10,61,16,"startIdleNavigationSpan"],[74,33,61,39],[74,34,61,40],[74,35,61,41],[75,8,62,12],[76,6,63,8],[76,7,63,9],[76,8,63,10],[77,6,64,8,"startIdleNavigationSpan"],[77,29,64,31],[77,30,64,32],[77,31,64,33],[78,6,65,8],[78,10,65,12],[78,11,65,13,"navigationContainer"],[78,30,65,32],[78,32,65,34],[79,8,66,12],[80,8,67,12],[80,15,67,19,"undefined"],[80,24,67,28],[81,6,68,8],[82,6,69,8],[83,6,70,8,"updateLatestNavigationSpanWithCurrentRoute"],[83,48,70,50],[83,49,70,51],[83,50,70,52],[84,6,71,8,"initialStateHandled"],[84,25,71,27],[84,28,71,30],[84,32,71,34],[85,4,72,4],[85,5,72,5],[86,4,73,4],[86,10,73,10,"registerNavigationContainer"],[86,37,73,37],[86,40,73,41,"maybeNewNavigationContainer"],[86,67,73,68],[86,71,73,73],[87,6,74,8],[87,10,74,12,"RN_GLOBAL_OBJ"],[87,34,74,25],[87,35,74,26,"__sentry_rn_v5_registered"],[87,60,74,51],[87,62,74,53],[88,8,75,12,"logger"],[88,20,75,18],[88,21,75,19,"debug"],[88,26,75,24],[88,27,75,25],[88,30,75,28,"INTEGRATION_NAME"],[88,46,75,44],[88,105,75,103],[88,106,75,104],[89,8,76,12],[90,8,77,12],[91,8,78,12],[92,8,79,12],[93,6,80,8],[94,6,81,8],[94,10,81,12,"newNavigationContainer"],[94,32,81,34],[95,6,82,8],[95,10,82,12],[95,14,82,12,"isPlainObject"],[95,33,82,25],[95,35,82,26,"maybeNewNavigationContainer"],[95,62,82,53],[95,63,82,54],[95,67,82,58],[95,76,82,67],[95,80,82,71,"maybeNewNavigationContainer"],[95,107,82,98],[95,109,82,100],[96,8,83,12,"newNavigationContainer"],[96,30,83,34],[96,33,83,37,"maybeNewNavigationContainer"],[96,60,83,64],[96,61,83,65,"current"],[96,68,83,72],[97,6,84,8],[97,7,84,9],[97,13,85,13],[98,8,86,12,"newNavigationContainer"],[98,30,86,34],[98,33,86,37,"maybeNewNavigationContainer"],[98,60,86,64],[99,6,87,8],[100,6,88,8],[100,10,88,12,"navigationContainer"],[100,29,88,31],[100,34,88,36,"newNavigationContainer"],[100,56,88,58],[100,58,88,60],[101,8,89,12,"logger"],[101,20,89,18],[101,21,89,19,"log"],[101,24,89,22],[101,25,89,23],[101,28,89,26,"INTEGRATION_NAME"],[101,44,89,42],[101,114,89,112],[101,115,89,113],[102,8,90,12],[103,6,91,8],[104,6,92,8,"navigationContainer"],[104,25,92,27],[104,28,92,30,"newNavigationContainer"],[104,50,92,52],[105,6,93,8],[105,10,93,12],[105,11,93,13,"navigationContainer"],[105,30,93,32],[105,32,93,34],[106,8,94,12,"logger"],[106,20,94,18],[106,21,94,19,"warn"],[106,25,94,23],[106,26,94,24],[106,29,94,27,"INTEGRATION_NAME"],[106,45,94,43],[106,90,94,88],[106,91,94,89],[107,8,95,12],[107,15,95,19,"undefined"],[107,24,95,28],[108,6,96,8],[109,6,97,8],[110,6,98,8,"navigationContainer"],[110,25,98,27],[110,26,98,28,"addListener"],[110,37,98,39],[110,38,98,40],[110,57,98,59],[110,59,98,61,"startIdleNavigationSpan"],[110,82,98,84],[110,83,98,85],[111,6,99,8,"navigationContainer"],[111,25,99,27],[111,26,99,28,"addListener"],[111,37,99,39],[111,38,99,40],[111,45,99,47],[111,47,99,49,"updateLatestNavigationSpanWithCurrentRoute"],[111,89,99,91],[111,90,99,92],[112,6,100,8,"RN_GLOBAL_OBJ"],[112,30,100,21],[112,31,100,22,"__sentry_rn_v5_registered"],[112,56,100,47],[112,59,100,50],[112,63,100,54],[113,6,101,8],[113,10,101,12,"initialStateHandled"],[113,29,101,31],[113,31,101,33],[114,8,102,12],[114,15,102,19,"undefined"],[114,24,102,28],[115,6,103,8],[116,6,104,8],[116,10,104,12],[116,11,104,13,"latestNavigationSpan"],[116,31,104,33],[116,33,104,35],[117,8,105,12,"logger"],[117,20,105,18],[117,21,105,19,"log"],[117,24,105,22],[117,25,105,23],[117,28,105,26,"INTEGRATION_NAME"],[117,44,105,42],[117,119,105,117],[117,120,105,118],[118,8,106,12],[118,15,106,19,"undefined"],[118,24,106,28],[119,6,107,8],[120,6,108,8],[121,6,109,8],[122,6,110,8],[123,6,111,8,"updateLatestNavigationSpanWithCurrentRoute"],[123,48,111,50],[123,49,111,51],[123,50,111,52],[124,6,112,8,"initialStateHandled"],[124,25,112,27],[124,28,112,30],[124,32,112,34],[125,4,113,4],[125,5,113,5],[126,4,114,4],[127,0,115,0],[128,0,116,0],[129,0,117,0],[130,0,118,0],[131,4,119,4],[131,10,119,10,"startIdleNavigationSpan"],[131,33,119,33],[131,36,119,37,"unknownEvent"],[131,48,119,49],[131,52,119,54],[132,6,120,8],[132,12,120,14,"event"],[132,17,120,19],[132,20,120,22,"unknownEvent"],[132,32,120,34],[133,6,121,8],[133,10,121,12,"useDispatchedActionData"],[133,33,121,35],[133,38,121,40,"event"],[133,43,121,45],[133,48,121,50],[133,52,121,54],[133,56,121,58,"event"],[133,61,121,63],[133,66,121,68],[133,71,121,73],[133,72,121,74],[133,75,121,77],[133,80,121,82],[133,81,121,83],[133,84,121,86,"event"],[133,89,121,91],[133,90,121,92,"data"],[133,94,121,96],[133,95,121,97,"noop"],[133,99,121,101],[133,100,121,102],[133,102,121,104],[134,8,122,12,"logger"],[134,20,122,18],[134,21,122,19,"debug"],[134,26,122,24],[134,27,122,25],[134,30,122,28,"INTEGRATION_NAME"],[134,46,122,44],[134,107,122,105],[134,108,122,106],[135,8,123,12],[136,6,124,8],[137,6,125,8],[137,12,125,14,"navigationActionType"],[137,32,125,34],[137,35,125,37,"useDispatchedActionData"],[137,58,125,60],[137,61,125,63,"event"],[137,66,125,68],[137,71,125,73],[137,75,125,77],[137,79,125,81,"event"],[137,84,125,86],[137,89,125,91],[137,94,125,96],[137,95,125,97],[137,98,125,100],[137,103,125,105],[137,104,125,106],[137,107,125,109,"event"],[137,112,125,114],[137,113,125,115,"data"],[137,117,125,119],[137,118,125,120,"action"],[137,124,125,126],[137,125,125,127,"type"],[137,129,125,131],[137,132,125,134,"undefined"],[137,141,125,143],[138,6,126,8],[138,10,126,12,"useDispatchedActionData"],[138,33,126,35],[138,37,127,12],[139,6,128,16],[140,6,129,16],[140,15,129,25],[140,17,130,16],[140,29,130,28],[141,6,131,16],[142,6,132,16],[142,19,132,29],[142,21,133,16],[142,35,133,30],[142,37,134,16],[142,52,134,31],[142,53,135,13],[142,54,135,14,"includes"],[142,62,135,22],[142,63,135,23,"navigationActionType"],[142,83,135,43],[142,84,135,44],[142,86,135,46],[143,8,136,12,"logger"],[143,20,136,18],[143,21,136,19,"debug"],[143,26,136,24],[143,27,136,25],[143,30,136,28,"INTEGRATION_NAME"],[143,46,136,44],[143,71,136,69,"navigationActionType"],[143,91,136,89],[143,124,136,122],[143,125,136,123],[144,8,137,12],[145,6,138,8],[146,6,139,8],[146,10,139,12,"latestNavigationSpan"],[146,30,139,32],[146,32,139,34],[147,8,140,12,"logger"],[147,20,140,18],[147,21,140,19,"log"],[147,24,140,22],[147,25,140,23],[147,28,140,26,"INTEGRATION_NAME"],[147,44,140,42],[147,115,140,113],[147,116,140,114],[148,8,141,12,"_discardLatestTransaction"],[148,33,141,37],[148,34,141,38],[148,35,141,39],[149,8,142,12,"clearStateChangeTimeout"],[149,31,142,35],[149,32,142,36],[149,33,142,37],[150,6,143,8],[151,6,144,8,"latestNavigationSpan"],[151,26,144,28],[151,29,144,31],[151,33,144,31,"startGenericIdleNavigationSpan"],[151,63,144,61],[151,65,144,62,"tracing"],[151,72,144,69],[151,76,144,73,"tracing"],[151,83,144,80],[151,84,144,81,"options"],[151,91,144,88],[151,92,144,89,"beforeStartSpan"],[151,107,144,104],[151,110,145,14,"tracing"],[151,117,145,21],[151,118,145,22,"options"],[151,125,145,29],[151,126,145,30,"beforeStartSpan"],[151,141,145,45],[151,142,145,46],[151,146,145,46,"getDefaultIdleNavigationSpanOptions"],[151,188,145,81],[151,190,145,82],[151,191,145,83],[151,192,145,84],[151,195,146,14],[151,199,146,14,"getDefaultIdleNavigationSpanOptions"],[151,241,146,49],[151,243,146,50],[151,244,146,51],[151,246,146,53,"idleSpanOptions"],[151,261,146,68],[151,262,146,69],[152,6,147,8,"latestNavigationSpan"],[152,26,147,28],[152,31,147,33],[152,35,147,37],[152,39,147,41,"latestNavigationSpan"],[152,59,147,61],[152,64,147,66],[152,69,147,71],[152,70,147,72],[152,73,147,75],[152,78,147,80],[152,79,147,81],[152,82,147,84,"latestNavigationSpan"],[152,102,147,104],[152,103,147,105,"setAttribute"],[152,115,147,117],[152,116,147,118,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[152,154,147,150],[152,156,147,152,"SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NAVIGATION"],[152,208,147,196],[152,209,147,197],[153,6,148,8,"latestNavigationSpan"],[153,26,148,28],[153,31,148,33],[153,35,148,37],[153,39,148,41,"latestNavigationSpan"],[153,59,148,61],[153,64,148,66],[153,69,148,71],[153,70,148,72],[153,73,148,75],[153,78,148,80],[153,79,148,81],[153,82,148,84,"latestNavigationSpan"],[153,102,148,104],[153,103,148,105,"setAttribute"],[153,115,148,117],[153,116,148,118,"SEMANTIC_ATTRIBUTE_NAVIGATION_ACTION_TYPE"],[153,177,148,159],[153,179,148,161,"navigationActionType"],[153,199,148,181],[153,200,148,182],[154,6,149,8],[154,10,149,12,"ignoreEmptyBackNavigationTransactions"],[154,47,149,49],[154,49,149,51],[155,8,150,12],[155,12,150,12,"ignoreEmptyBackNavigation"],[155,53,150,37],[155,55,150,38],[155,59,150,38,"getClient"],[155,74,150,47],[155,76,150,48],[155,77,150,49],[155,79,150,51,"latestNavigationSpan"],[155,99,150,71],[155,100,150,72],[156,6,151,8],[157,6,152,8],[157,10,152,12,"enableTimeToInitialDisplay"],[157,36,152,38],[157,38,152,40],[158,8,153,12,"NATIVE"],[158,23,153,18],[158,24,153,19,"setActiveSpanId"],[158,39,153,34],[158,40,153,35,"latestNavigationSpan"],[158,60,153,55],[158,65,153,60],[158,69,153,64],[158,73,153,68,"latestNavigationSpan"],[158,93,153,88],[158,98,153,93],[158,103,153,98],[158,104,153,99],[158,107,153,102],[158,112,153,107],[158,113,153,108],[158,116,153,111,"latestNavigationSpan"],[158,136,153,131],[158,137,153,132,"spanContext"],[158,148,153,143],[158,149,153,144],[158,150,153,145],[158,151,153,146,"spanId"],[158,157,153,152],[158,158,153,153],[159,8,154,12,"navigationProcessingSpan"],[159,32,154,36],[159,35,154,39],[159,39,154,39,"startInactiveSpan"],[159,62,154,56],[159,64,154,57],[160,10,155,16,"op"],[160,12,155,18],[160,14,155,20],[160,37,155,43],[161,10,156,16,"name"],[161,14,156,20],[161,16,156,22],[161,79,156,85],[162,10,157,16,"startTime"],[162,19,157,25],[162,21,157,27,"latestNavigationSpan"],[162,41,157,47],[162,45,157,51],[162,49,157,51,"spanToJSON"],[162,65,157,61],[162,67,157,62,"latestNavigationSpan"],[162,87,157,82],[162,88,157,83],[162,89,157,84,"start_timestamp"],[163,8,158,12],[163,9,158,13],[163,10,158,14],[164,8,159,12,"navigationProcessingSpan"],[164,32,159,36],[164,33,159,37,"setAttribute"],[164,45,159,49],[164,46,159,50,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[164,84,159,82],[164,86,159,84,"SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NAVIGATION"],[164,138,159,128],[164,139,159,129],[165,6,160,8],[166,6,161,8,"stateChangeTimeout"],[166,24,161,26],[166,27,161,29,"setTimeout"],[166,37,161,39],[166,38,161,40,"_discardLatestTransaction"],[166,63,161,65],[166,65,161,67,"routeChangeTimeoutMs"],[166,85,161,87],[166,86,161,88],[167,4,162,4],[167,5,162,5],[168,4,163,4],[169,0,164,0],[170,0,165,0],[171,4,166,4],[171,10,166,10,"updateLatestNavigationSpanWithCurrentRoute"],[171,52,166,52],[171,55,166,55,"updateLatestNavigationSpanWithCurrentRoute"],[171,56,166,55],[171,61,166,61],[172,6,167,8],[172,12,167,14,"stateChangedTimestamp"],[172,33,167,35],[172,36,167,38],[172,40,167,38,"timestampInSeconds"],[172,64,167,56],[172,66,167,57],[172,67,167,58],[173,6,168,8],[173,12,168,14,"previousRoute"],[173,25,168,27],[173,28,168,30,"latestRoute"],[173,39,168,41],[174,6,169,8],[174,10,169,12],[174,11,169,13,"navigationContainer"],[174,30,169,32],[174,32,169,34],[175,8,170,12,"logger"],[175,20,170,18],[175,21,170,19,"warn"],[175,25,170,23],[175,26,170,24],[175,29,170,27,"INTEGRATION_NAME"],[175,45,170,43],[175,118,170,116],[175,119,170,117],[176,8,171,12],[176,15,171,19,"undefined"],[176,24,171,28],[177,6,172,8],[178,6,173,8],[178,12,173,14,"route"],[178,17,173,19],[178,20,173,22,"navigationContainer"],[178,39,173,41],[178,40,173,42,"getCurrentRoute"],[178,55,173,57],[178,56,173,58],[178,57,173,59],[179,6,174,8],[179,10,174,12],[179,11,174,13,"route"],[179,16,174,18],[179,18,174,20],[180,8,175,12,"logger"],[180,20,175,18],[180,21,175,19,"debug"],[180,26,175,24],[180,27,175,25],[180,31,175,29,"INTEGRATION_NAME"],[180,47,175,45],[180,102,175,100],[180,103,175,101],[181,8,176,12],[181,15,176,19,"undefined"],[181,24,176,28],[182,6,177,8],[183,6,178,8],[183,10,178,12],[183,11,178,13,"latestNavigationSpan"],[183,31,178,33],[183,33,178,35],[184,8,179,12,"logger"],[184,20,179,18],[184,21,179,19,"debug"],[184,26,179,24],[184,27,179,25],[184,31,179,29,"INTEGRATION_NAME"],[184,47,179,45],[184,132,179,130],[184,133,179,131],[185,8,180,12],[185,15,180,19,"undefined"],[185,24,180,28],[186,6,181,8],[187,6,182,8],[187,10,182,8,"addTimeToInitialDisplayFallback"],[187,64,182,39],[187,66,182,40,"latestNavigationSpan"],[187,86,182,60],[187,87,182,61,"spanContext"],[187,98,182,72],[187,99,182,73],[187,100,182,74],[187,101,182,75,"spanId"],[187,107,182,81],[187,109,182,83,"NATIVE"],[187,124,182,89],[187,125,182,90,"getNewScreenTimeToDisplay"],[187,150,182,115],[187,151,182,116],[187,152,182,117],[187,153,182,118],[188,6,183,8],[188,10,183,12,"previousRoute"],[188,23,183,25],[188,27,183,29,"previousRoute"],[188,40,183,42],[188,41,183,43,"key"],[188,44,183,46],[188,49,183,51,"route"],[188,54,183,56],[188,55,183,57,"key"],[188,58,183,60],[188,60,183,62],[189,8,184,12,"logger"],[189,20,184,18],[189,21,184,19,"debug"],[189,26,184,24],[189,27,184,25],[189,31,184,29,"INTEGRATION_NAME"],[189,47,184,45],[189,111,184,109],[189,112,184,110],[190,8,185,12,"pushRecentRouteKey"],[190,26,185,30],[190,27,185,31,"route"],[190,32,185,36],[190,33,185,37,"key"],[190,36,185,40],[190,37,185,41],[191,8,186,12,"latestRoute"],[191,19,186,23],[191,22,186,26,"route"],[191,27,186,31],[192,8,187,12],[193,8,188,12,"latestNavigationSpan"],[193,28,188,32],[193,31,188,35,"undefined"],[193,40,188,44],[194,8,189,12],[194,15,189,19,"undefined"],[194,24,189,28],[195,6,190,8],[196,6,191,8],[196,12,191,14,"routeHasBeenSeen"],[196,28,191,30],[196,31,191,33,"recentRouteKeys"],[196,46,191,48],[196,47,191,49,"includes"],[196,55,191,57],[196,56,191,58,"route"],[196,61,191,63],[196,62,191,64,"key"],[196,65,191,67],[196,66,191,68],[197,6,192,8,"navigationProcessingSpan"],[197,30,192,32],[197,35,192,37],[197,39,192,41],[197,43,192,45,"navigationProcessingSpan"],[197,67,192,69],[197,72,192,74],[197,77,192,79],[197,78,192,80],[197,81,192,83],[197,86,192,88],[197,87,192,89],[197,90,192,92,"navigationProcessingSpan"],[197,114,192,116],[197,115,192,117,"updateName"],[197,125,192,127],[197,126,192,128],[197,159,192,161,"route"],[197,164,192,166],[197,165,192,167,"name"],[197,169,192,171],[197,179,192,181],[197,180,192,182],[198,6,193,8,"navigationProcessingSpan"],[198,30,193,32],[198,35,193,37],[198,39,193,41],[198,43,193,45,"navigationProcessingSpan"],[198,67,193,69],[198,72,193,74],[198,77,193,79],[198,78,193,80],[198,81,193,83],[198,86,193,88],[198,87,193,89],[198,90,193,92,"navigationProcessingSpan"],[198,114,193,116],[198,115,193,117,"setStatus"],[198,124,193,126],[198,125,193,127],[199,8,193,129,"code"],[199,12,193,133],[199,14,193,135,"SPAN_STATUS_OK"],[200,6,193,150],[200,7,193,151],[200,8,193,152],[201,6,194,8,"navigationProcessingSpan"],[201,30,194,32],[201,35,194,37],[201,39,194,41],[201,43,194,45,"navigationProcessingSpan"],[201,67,194,69],[201,72,194,74],[201,77,194,79],[201,78,194,80],[201,81,194,83],[201,86,194,88],[201,87,194,89],[201,90,194,92,"navigationProcessingSpan"],[201,114,194,116],[201,115,194,117,"end"],[201,118,194,120],[201,119,194,121,"stateChangedTimestamp"],[201,140,194,142],[201,141,194,143],[202,6,195,8,"navigationProcessingSpan"],[202,30,195,32],[202,33,195,35,"undefined"],[202,42,195,44],[203,6,196,8],[203,10,196,12],[203,14,196,12,"spanToJSON"],[203,30,196,22],[203,32,196,23,"latestNavigationSpan"],[203,52,196,43],[203,53,196,44],[203,54,196,45,"description"],[203,65,196,56],[203,70,196,61,"DEFAULT_NAVIGATION_SPAN_NAME"],[203,105,196,89],[203,107,196,91],[204,8,197,12,"latestNavigationSpan"],[204,28,197,32],[204,29,197,33,"updateName"],[204,39,197,43],[204,40,197,44,"route"],[204,45,197,49],[204,46,197,50,"name"],[204,50,197,54],[204,51,197,55],[205,6,198,8],[206,6,199,8,"latestNavigationSpan"],[206,26,199,28],[206,27,199,29,"setAttributes"],[206,40,199,42],[206,41,199,43],[207,8,200,12],[207,20,200,24],[207,22,200,26,"route"],[207,27,200,31],[207,28,200,32,"name"],[207,32,200,36],[208,8,201,12],[208,19,201,23],[208,21,201,25,"route"],[208,26,201,30],[208,27,201,31,"key"],[208,30,201,34],[209,8,202,12],[210,8,203,12],[211,8,204,12],[211,29,204,33],[211,31,204,35,"routeHasBeenSeen"],[211,47,204,51],[212,8,205,12],[212,29,205,33],[212,31,205,35,"previousRoute"],[212,44,205,48],[212,49,205,53],[212,53,205,57],[212,57,205,61,"previousRoute"],[212,70,205,74],[212,75,205,79],[212,80,205,84],[212,81,205,85],[212,84,205,88],[212,89,205,93],[212,90,205,94],[212,93,205,97,"previousRoute"],[212,106,205,110],[212,107,205,111,"name"],[212,111,205,115],[213,8,206,12],[213,28,206,32],[213,30,206,34,"previousRoute"],[213,43,206,47],[213,48,206,52],[213,52,206,56],[213,56,206,60,"previousRoute"],[213,69,206,73],[213,74,206,78],[213,79,206,83],[213,80,206,84],[213,83,206,87],[213,88,206,92],[213,89,206,93],[213,92,206,96,"previousRoute"],[213,105,206,109],[213,106,206,110,"key"],[213,109,206,113],[214,8,207,12],[215,8,208,12],[216,8,209,12],[216,9,209,13,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[216,61,209,45],[216,64,209,48],[216,75,209,59],[217,8,210,12],[217,9,210,13,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[217,43,210,41],[217,46,210,44],[218,6,211,8],[218,7,211,9],[218,8,211,10],[219,6,212,8],[220,6,213,8,"clearStateChangeTimeout"],[220,29,213,31],[220,30,213,32],[220,31,213,33],[221,6,214,8],[221,10,214,8,"addBreadcrumb"],[221,29,214,21],[221,31,214,22],[222,8,215,12,"category"],[222,16,215,20],[222,18,215,22],[222,30,215,34],[223,8,216,12,"type"],[223,12,216,16],[223,14,216,18],[223,26,216,30],[224,8,217,12,"message"],[224,15,217,19],[224,17,217,21],[224,34,217,38,"route"],[224,39,217,43],[224,40,217,44,"name"],[224,44,217,48],[224,46,217,50],[225,8,218,12,"data"],[225,12,218,16],[225,14,218,18],[226,10,219,16,"from"],[226,14,219,20],[226,16,219,22,"previousRoute"],[226,29,219,35],[226,34,219,40],[226,38,219,44],[226,42,219,48,"previousRoute"],[226,55,219,61],[226,60,219,66],[226,65,219,71],[226,66,219,72],[226,69,219,75],[226,74,219,80],[226,75,219,81],[226,78,219,84,"previousRoute"],[226,91,219,97],[226,92,219,98,"name"],[226,96,219,102],[227,10,220,16,"to"],[227,12,220,18],[227,14,220,20,"route"],[227,19,220,25],[227,20,220,26,"name"],[228,8,221,12],[229,6,222,8],[229,7,222,9],[229,8,222,10],[230,6,223,8,"tracing"],[230,13,223,15],[230,18,223,20],[230,22,223,24],[230,26,223,28,"tracing"],[230,33,223,35],[230,38,223,40],[230,43,223,45],[230,44,223,46],[230,47,223,49],[230,52,223,54],[230,53,223,55],[230,56,223,58,"tracing"],[230,63,223,65],[230,64,223,66,"setCurrentRoute"],[230,79,223,81],[230,80,223,82,"route"],[230,85,223,87],[230,86,223,88,"name"],[230,90,223,92],[230,91,223,93],[231,6,224,8,"pushRecentRouteKey"],[231,24,224,26],[231,25,224,27,"route"],[231,30,224,32],[231,31,224,33,"key"],[231,34,224,36],[231,35,224,37],[232,6,225,8,"latestRoute"],[232,17,225,19],[232,20,225,22,"route"],[232,25,225,27],[233,6,226,8],[234,6,227,8,"latestNavigationSpan"],[234,26,227,28],[234,29,227,31,"undefined"],[234,38,227,40],[235,4,228,4],[235,5,228,5],[236,4,229,4],[237,4,230,4],[237,10,230,10,"pushRecentRouteKey"],[237,28,230,28],[237,31,230,32,"key"],[237,34,230,35],[237,38,230,40],[238,6,231,8,"recentRouteKeys"],[238,21,231,23],[238,22,231,24,"push"],[238,26,231,28],[238,27,231,29,"key"],[238,30,231,32],[238,31,231,33],[239,6,232,8],[239,10,232,12,"recentRouteKeys"],[239,25,232,27],[239,26,232,28,"length"],[239,32,232,34],[239,35,232,37,"NAVIGATION_HISTORY_MAX_SIZE"],[239,62,232,64],[239,64,232,66],[240,8,233,12,"recentRouteKeys"],[240,23,233,27],[240,26,233,30,"recentRouteKeys"],[240,41,233,45],[240,42,233,46,"slice"],[240,47,233,51],[240,48,233,52,"recentRouteKeys"],[240,63,233,67],[240,64,233,68,"length"],[240,70,233,74],[240,73,233,77,"NAVIGATION_HISTORY_MAX_SIZE"],[240,100,233,104],[240,101,233,105],[241,6,234,8],[242,4,235,4],[242,5,235,5],[243,4,236,4],[244,4,237,4],[244,10,237,10,"_discardLatestTransaction"],[244,35,237,35],[244,38,237,38,"_discardLatestTransaction"],[244,39,237,38],[244,44,237,44],[245,6,238,8],[245,10,238,12,"latestNavigationSpan"],[245,30,238,32],[245,32,238,34],[246,8,239,12],[246,12,239,16],[246,16,239,16,"isSentrySpan"],[246,34,239,28],[246,36,239,29,"latestNavigationSpan"],[246,56,239,49],[246,57,239,50],[246,59,239,52],[247,10,240,16,"latestNavigationSpan"],[247,30,240,36],[247,31,240,37],[247,41,240,47],[247,42,240,48],[247,45,240,51],[247,50,240,56],[248,8,241,12],[249,8,242,12],[250,8,243,12,"latestNavigationSpan"],[250,28,243,32],[250,29,243,33,"end"],[250,32,243,36],[250,33,243,37],[250,34,243,38],[251,8,244,12,"latestNavigationSpan"],[251,28,244,32],[251,31,244,35,"undefined"],[251,40,244,44],[252,6,245,8],[253,6,246,8],[253,10,246,12,"navigationProcessingSpan"],[253,34,246,36],[253,36,246,38],[254,8,247,12,"navigationProcessingSpan"],[254,32,247,36],[254,35,247,39,"undefined"],[254,44,247,48],[255,6,248,8],[256,4,249,4],[256,5,249,5],[257,4,250,4],[257,10,250,10,"clearStateChangeTimeout"],[257,33,250,33],[257,36,250,36,"clearStateChangeTimeout"],[257,37,250,36],[257,42,250,42],[258,6,251,8],[258,10,251,12],[258,17,251,19,"stateChangeTimeout"],[258,35,251,37],[258,40,251,42],[258,51,251,53],[258,53,251,55],[259,8,252,12,"clearTimeout"],[259,20,252,24],[259,21,252,25,"stateChangeTimeout"],[259,39,252,43],[259,40,252,44],[260,8,253,12,"stateChangeTimeout"],[260,26,253,30],[260,29,253,33,"undefined"],[260,38,253,42],[261,6,254,8],[262,4,255,4],[262,5,255,5],[263,4,256,4],[263,11,256,11],[264,6,257,8,"name"],[264,10,257,12],[264,12,257,14,"INTEGRATION_NAME"],[264,28,257,30],[265,6,258,8,"afterAllSetup"],[265,19,258,21],[266,6,259,8,"registerNavigationContainer"],[266,33,259,35],[267,6,260,8,"options"],[267,13,260,15],[267,15,260,17],[268,8,261,12,"routeChangeTimeoutMs"],[268,28,261,32],[269,8,262,12,"enableTimeToInitialDisplay"],[269,34,262,38],[270,8,263,12,"ignoreEmptyBackNavigationTransactions"],[270,45,263,49],[271,8,264,12,"enableTimeToInitialDisplayForPreloadedRoutes"],[271,52,264,56],[272,8,265,12,"useDispatchedActionData"],[273,6,266,8],[274,4,267,4],[274,5,267,5],[275,2,268,0],[275,3,268,1],[276,2,269,0],[277,0,270,0],[278,0,271,0],[279,2,269,0,"exports"],[279,9,269,0],[279,10,269,0,"reactNavigationIntegration"],[279,36,269,0],[279,39,269,0,"reactNavigationIntegration"],[279,65,269,0],[280,2,272,7],[280,11,272,16,"getReactNavigationIntegration"],[280,40,272,45,"getReactNavigationIntegration"],[280,41,272,46,"client"],[280,47,272,52],[280,49,272,54],[281,4,273,4],[281,11,273,11,"client"],[281,17,273,17],[281,18,273,18,"getIntegrationByName"],[281,38,273,38],[281,39,273,39,"INTEGRATION_NAME"],[281,55,273,55],[281,56,273,56],[282,2,274,0],[283,0,274,1],[283,3]],"functionMap":{"names":["<global>","reactNavigationIntegration","NATIVE.initNativeReactNavigationNewFrameTracking._catch$argument_0","afterAllSetup","_a.onRunApplication$argument_0","registerNavigationContainer","startIdleNavigationSpan","updateLatestNavigationSpanWithCurrentRoute","pushRecentRouteKey","_discardLatestTransaction","clearStateChangeTimeout","getReactNavigationIntegration"],"mappings":"AAA;0CCqB;iECW;SDE;0BEK;0GCe;SDQ;KFS;wCIC;KJwC;oCKM;KL2C;uDMI;KN8D;+BOE;KPK;sCQE;KRY;oCSC;KTK;CDa;OWI;CXE"}},"type":"js/module"}]}