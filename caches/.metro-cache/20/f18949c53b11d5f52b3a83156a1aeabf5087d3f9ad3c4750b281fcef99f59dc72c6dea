{"dependencies":[{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":66},"end":{"line":2,"column":48,"index":114}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../semanticAttributes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":115},"end":{"line":3,"column":93,"index":208}}],"key":"Ovsn9ORXEwSazI36ru//KBDD8LQ=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":209},"end":{"line":4,"column":50,"index":259}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":260},"end":{"line":5,"column":60,"index":320}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils/hasTracingEnabled.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":321},"end":{"line":6,"column":66,"index":387}}],"key":"SyK4SleOU+9x9l8aHJ9lO4+iDQU=","exportNames":["*"]}},{"name":"../utils/spanOnScope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":388},"end":{"line":7,"column":59,"index":447}}],"key":"y89KJcz9cqvIDyT9JAMyeJm48wg=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":448},"end":{"line":8,"column":135,"index":583}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./sentryNonRecordingSpan.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":584},"end":{"line":9,"column":69,"index":653}}],"key":"rJBV9PfB2h47oMRsp2+zRvY6wpk=","exportNames":["*"]}},{"name":"./spanstatus.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":654},"end":{"line":10,"column":52,"index":706}}],"key":"Y3Jz0fXFV1VA2c+eEGi4NJg5MfQ=","exportNames":["*"]}},{"name":"./trace.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":707},"end":{"line":11,"column":47,"index":754}}],"key":"mzaDI+q4uOMBDhnZgV/9cf4+7Yk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TRACING_DEFAULTS = void 0;\n  exports.startIdleSpan = startIdleSpan;\n  var _currentScopes = require(_dependencyMap[0], \"../currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  var _semanticAttributes = require(_dependencyMap[2], \"../semanticAttributes.js\");\n  var _logger = require(_dependencyMap[3], \"../utils-hoist/logger.js\");\n  var _time = require(_dependencyMap[4], \"../utils-hoist/time.js\");\n  var _hasTracingEnabled = require(_dependencyMap[5], \"../utils/hasTracingEnabled.js\");\n  var _spanOnScope = require(_dependencyMap[6], \"../utils/spanOnScope.js\");\n  var _spanUtils = require(_dependencyMap[7], \"../utils/spanUtils.js\");\n  var _sentryNonRecordingSpan = require(_dependencyMap[8], \"./sentryNonRecordingSpan.js\");\n  var _spanstatus = require(_dependencyMap[9], \"./spanstatus.js\");\n  var _trace = require(_dependencyMap[10], \"./trace.js\");\n  const TRACING_DEFAULTS = exports.TRACING_DEFAULTS = {\n    idleTimeout: 1000,\n    finalTimeout: 30000,\n    childSpanTimeout: 15000\n  };\n  const FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\n  const FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\n  const FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\n  const FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\n\n  /**\n   * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n   * An idle span is always the active span.\n   */\n  function startIdleSpan(startSpanOptions, options = {}) {\n    // Activities store a list of active spans\n    const activities = new Map();\n\n    // We should not use heartbeat if we finished a span\n    let _finished = false;\n\n    // Timer that tracks idleTimeout\n    let _idleTimeoutID;\n\n    // The reason why the span was finished\n    let _finishReason = FINISH_REASON_EXTERNAL_FINISH;\n    let _autoFinishAllowed = !options.disableAutoFinish;\n    const _cleanupHooks = [];\n    const {\n      idleTimeout = TRACING_DEFAULTS.idleTimeout,\n      finalTimeout = TRACING_DEFAULTS.finalTimeout,\n      childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n      beforeSpanEnd\n    } = options;\n    const client = (0, _currentScopes.getClient)();\n    if (!client || !(0, _hasTracingEnabled.hasTracingEnabled)()) {\n      return new _sentryNonRecordingSpan.SentryNonRecordingSpan();\n    }\n    const scope = (0, _currentScopes.getCurrentScope)();\n    const previousActiveSpan = (0, _spanUtils.getActiveSpan)();\n    const span = _startIdleSpan(startSpanOptions);\n\n    // We patch span.end to ensure we can run some things before the span is ended\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    span.end = new Proxy(span.end, {\n      apply(target, thisArg, args) {\n        if (beforeSpanEnd) {\n          beforeSpanEnd(span);\n        }\n\n        // Just ensuring that this keeps working, even if we ever have more arguments here\n        const [definedEndTimestamp, ...rest] = args;\n        const timestamp = definedEndTimestamp || (0, _time.timestampInSeconds)();\n        const spanEndTimestamp = (0, _spanUtils.spanTimeInputToSeconds)(timestamp);\n\n        // Ensure we end with the last span timestamp, if possible\n        const spans = (0, _spanUtils.getSpanDescendants)(span).filter(child => child !== span);\n\n        // If we have no spans, we just end, nothing else to do here\n        if (!spans.length) {\n          onIdleSpanEnded(spanEndTimestamp);\n          return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n        }\n        const childEndTimestamps = spans.map(span => (0, _spanUtils.spanToJSON)(span).timestamp).filter(timestamp => !!timestamp);\n        const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n        // In reality this should always exist here, but type-wise it may be undefined...\n        const spanStartTimestamp = (0, _spanUtils.spanToJSON)(span).start_timestamp;\n\n        // The final endTimestamp should:\n        // * Never be before the span start timestamp\n        // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n        // * Otherwise be the passed end timestamp\n        // Final timestamp can never be after finalTimeout\n        const endTimestamp = Math.min(spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity, Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)));\n        onIdleSpanEnded(endTimestamp);\n        return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n      }\n    });\n\n    /**\n     * Cancels the existing idle timeout, if there is one.\n     */\n    function _cancelIdleTimeout() {\n      if (_idleTimeoutID) {\n        clearTimeout(_idleTimeoutID);\n        _idleTimeoutID = undefined;\n      }\n    }\n\n    /**\n     * Restarts idle timeout, if there is no running idle timeout it will start one.\n     */\n    function _restartIdleTimeout(endTimestamp) {\n      _cancelIdleTimeout();\n      _idleTimeoutID = setTimeout(() => {\n        if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n          _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n          span.end(endTimestamp);\n        }\n      }, idleTimeout);\n    }\n\n    /**\n     * Restarts child span timeout, if there is none running it will start one.\n     */\n    function _restartChildSpanTimeout(endTimestamp) {\n      _idleTimeoutID = setTimeout(() => {\n        if (!_finished && _autoFinishAllowed) {\n          _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n          span.end(endTimestamp);\n        }\n      }, childSpanTimeout);\n    }\n\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n    function _pushActivity(spanId) {\n      _cancelIdleTimeout();\n      activities.set(spanId, true);\n      const endTimestamp = (0, _time.timestampInSeconds)();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n    }\n\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n    function _popActivity(spanId) {\n      if (activities.has(spanId)) {\n        activities.delete(spanId);\n      }\n      if (activities.size === 0) {\n        const endTimestamp = (0, _time.timestampInSeconds)();\n        // We need to add the timeout here to have the real endtimestamp of the idle span\n        // Remember timestampInSeconds is in seconds, timeout is in ms\n        _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n      }\n    }\n    function onIdleSpanEnded(endTimestamp) {\n      _finished = true;\n      activities.clear();\n      _cleanupHooks.forEach(cleanup => cleanup());\n      (0, _spanOnScope._setSpanForScope)(scope, previousActiveSpan);\n      const spanJSON = (0, _spanUtils.spanToJSON)(span);\n      const {\n        start_timestamp: startTimestamp\n      } = spanJSON;\n      // This should never happen, but to make TS happy...\n      if (!startTimestamp) {\n        return;\n      }\n      const attributes = spanJSON.data || {};\n      if (!attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n        span.setAttribute(_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n      }\n      _logger.logger.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n      const childSpans = (0, _spanUtils.getSpanDescendants)(span).filter(child => child !== span);\n      let discardedSpans = 0;\n      childSpans.forEach(childSpan => {\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n        if (childSpan.isRecording()) {\n          childSpan.setStatus({\n            code: _spanstatus.SPAN_STATUS_ERROR,\n            message: 'cancelled'\n          });\n          childSpan.end(endTimestamp);\n          _debugBuild.DEBUG_BUILD && _logger.logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n        }\n        const childSpanJSON = (0, _spanUtils.spanToJSON)(childSpan);\n        const {\n          timestamp: childEndTimestamp = 0,\n          start_timestamp: childStartTimestamp = 0\n        } = childSpanJSON;\n        const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n        // Add a delta with idle timeout so that we prevent false positives\n        const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n        const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n        if (_debugBuild.DEBUG_BUILD) {\n          const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n          if (!spanStartedBeforeIdleSpanEnd) {\n            _logger.logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n          } else if (!spanEndedBeforeFinalTimeout) {\n            _logger.logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n          }\n        }\n        if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n          (0, _spanUtils.removeChildSpanFromSpan)(span, childSpan);\n          discardedSpans++;\n        }\n      });\n      if (discardedSpans > 0) {\n        span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n      }\n    }\n    _cleanupHooks.push(client.on('spanStart', startedSpan => {\n      // If we already finished the idle span,\n      // or if this is the idle span itself being started,\n      // or if the started span has already been closed,\n      // we don't care about it for activity\n      if (_finished || startedSpan === span || !!(0, _spanUtils.spanToJSON)(startedSpan).timestamp) {\n        return;\n      }\n      const allSpans = (0, _spanUtils.getSpanDescendants)(span);\n\n      // If the span that was just started is a child of the idle span, we should track it\n      if (allSpans.includes(startedSpan)) {\n        _pushActivity(startedSpan.spanContext().spanId);\n      }\n    }));\n    _cleanupHooks.push(client.on('spanEnd', endedSpan => {\n      if (_finished) {\n        return;\n      }\n      _popActivity(endedSpan.spanContext().spanId);\n    }));\n    _cleanupHooks.push(client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n      if (spanToAllowAutoFinish === span) {\n        _autoFinishAllowed = true;\n        _restartIdleTimeout();\n        if (activities.size) {\n          _restartChildSpanTimeout();\n        }\n      }\n    }));\n\n    // We only start the initial idle timeout if we are not delaying the auto finish\n    if (!options.disableAutoFinish) {\n      _restartIdleTimeout();\n    }\n    setTimeout(() => {\n      if (!_finished) {\n        span.setStatus({\n          code: _spanstatus.SPAN_STATUS_ERROR,\n          message: 'deadline_exceeded'\n        });\n        _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n        span.end();\n      }\n    }, finalTimeout);\n    return span;\n  }\n  function _startIdleSpan(options) {\n    const span = (0, _trace.startInactiveSpan)(options);\n    (0, _spanOnScope._setSpanForScope)((0, _currentScopes.getCurrentScope)(), span);\n    _debugBuild.DEBUG_BUILD && _logger.logger.log('[Tracing] Started span is an idle span');\n    return span;\n  }\n});","lineCount":271,"map":[[7,2,1,0],[7,6,1,0,"_currentScopes"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_debugBuild"],[8,17,2,0],[8,20,2,0,"require"],[8,27,2,0],[8,28,2,0,"_dependencyMap"],[8,42,2,0],[9,2,3,0],[9,6,3,0,"_semanticAttributes"],[9,25,3,0],[9,28,3,0,"require"],[9,35,3,0],[9,36,3,0,"_dependencyMap"],[9,50,3,0],[10,2,4,0],[10,6,4,0,"_logger"],[10,13,4,0],[10,16,4,0,"require"],[10,23,4,0],[10,24,4,0,"_dependencyMap"],[10,38,4,0],[11,2,5,0],[11,6,5,0,"_time"],[11,11,5,0],[11,14,5,0,"require"],[11,21,5,0],[11,22,5,0,"_dependencyMap"],[11,36,5,0],[12,2,6,0],[12,6,6,0,"_hasTracingEnabled"],[12,24,6,0],[12,27,6,0,"require"],[12,34,6,0],[12,35,6,0,"_dependencyMap"],[12,49,6,0],[13,2,7,0],[13,6,7,0,"_spanOnScope"],[13,18,7,0],[13,21,7,0,"require"],[13,28,7,0],[13,29,7,0,"_dependencyMap"],[13,43,7,0],[14,2,8,0],[14,6,8,0,"_spanUtils"],[14,16,8,0],[14,19,8,0,"require"],[14,26,8,0],[14,27,8,0,"_dependencyMap"],[14,41,8,0],[15,2,9,0],[15,6,9,0,"_sentryNonRecordingSpan"],[15,29,9,0],[15,32,9,0,"require"],[15,39,9,0],[15,40,9,0,"_dependencyMap"],[15,54,9,0],[16,2,10,0],[16,6,10,0,"_spanstatus"],[16,17,10,0],[16,20,10,0,"require"],[16,27,10,0],[16,28,10,0,"_dependencyMap"],[16,42,10,0],[17,2,11,0],[17,6,11,0,"_trace"],[17,12,11,0],[17,15,11,0,"require"],[17,22,11,0],[17,23,11,0,"_dependencyMap"],[17,37,11,0],[18,2,13,0],[18,8,13,6,"TRACING_DEFAULTS"],[18,24,13,22],[18,27,13,22,"exports"],[18,34,13,22],[18,35,13,22,"TRACING_DEFAULTS"],[18,51,13,22],[18,54,13,25],[19,4,14,2,"idleTimeout"],[19,15,14,13],[19,17,14,15],[19,21,14,19],[20,4,15,2,"finalTimeout"],[20,16,15,14],[20,18,15,16],[20,23,15,21],[21,4,16,2,"childSpanTimeout"],[21,20,16,18],[21,22,16,20],[22,2,17,0],[22,3,17,1],[23,2,19,0],[23,8,19,6,"FINISH_REASON_HEARTBEAT_FAILED"],[23,38,19,36],[23,41,19,39],[23,58,19,56],[24,2,20,0],[24,8,20,6,"FINISH_REASON_IDLE_TIMEOUT"],[24,34,20,32],[24,37,20,35],[24,50,20,48],[25,2,21,0],[25,8,21,6,"FINISH_REASON_FINAL_TIMEOUT"],[25,35,21,33],[25,38,21,36],[25,52,21,50],[26,2,22,0],[26,8,22,6,"FINISH_REASON_EXTERNAL_FINISH"],[26,37,22,35],[26,40,22,38],[26,56,22,54],[28,2,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,2,28,0],[32,11,28,9,"startIdleSpan"],[32,24,28,22,"startIdleSpan"],[32,25,28,23,"startSpanOptions"],[32,41,28,39],[32,43,28,41,"options"],[32,50,28,48],[32,53,28,51],[32,54,28,52],[32,55,28,53],[32,57,28,55],[33,4,29,2],[34,4,30,2],[34,10,30,8,"activities"],[34,20,30,18],[34,23,30,21],[34,27,30,25,"Map"],[34,30,30,28],[34,31,30,29],[34,32,30,30],[36,4,32,2],[37,4,33,2],[37,8,33,6,"_finished"],[37,17,33,15],[37,20,33,18],[37,25,33,23],[39,4,35,2],[40,4,36,2],[40,8,36,6,"_idleTimeoutID"],[40,22,36,20],[42,4,38,2],[43,4,39,2],[43,8,39,6,"_finishReason"],[43,21,39,19],[43,24,39,22,"FINISH_REASON_EXTERNAL_FINISH"],[43,53,39,51],[44,4,41,2],[44,8,41,6,"_autoFinishAllowed"],[44,26,41,24],[44,29,41,27],[44,30,41,28,"options"],[44,37,41,35],[44,38,41,36,"disableAutoFinish"],[44,55,41,53],[45,4,43,2],[45,10,43,8,"_cleanupHooks"],[45,23,43,21],[45,26,43,24],[45,28,43,26],[46,4,45,2],[46,10,45,8],[47,6,46,4,"idleTimeout"],[47,17,46,15],[47,20,46,18,"TRACING_DEFAULTS"],[47,36,46,34],[47,37,46,35,"idleTimeout"],[47,48,46,46],[48,6,47,4,"finalTimeout"],[48,18,47,16],[48,21,47,19,"TRACING_DEFAULTS"],[48,37,47,35],[48,38,47,36,"finalTimeout"],[48,50,47,48],[49,6,48,4,"childSpanTimeout"],[49,22,48,20],[49,25,48,23,"TRACING_DEFAULTS"],[49,41,48,39],[49,42,48,40,"childSpanTimeout"],[49,58,48,56],[50,6,49,4,"beforeSpanEnd"],[51,4,50,2],[51,5,50,3],[51,8,50,6,"options"],[51,15,50,13],[52,4,52,2],[52,10,52,8,"client"],[52,16,52,14],[52,19,52,17],[52,23,52,17,"getClient"],[52,47,52,26],[52,49,52,27],[52,50,52,28],[53,4,54,2],[53,8,54,6],[53,9,54,7,"client"],[53,15,54,13],[53,19,54,17],[53,20,54,18],[53,24,54,18,"hasTracingEnabled"],[53,60,54,35],[53,62,54,36],[53,63,54,37],[53,65,54,39],[54,6,55,4],[54,13,55,11],[54,17,55,15,"SentryNonRecordingSpan"],[54,63,55,37],[54,64,55,38],[54,65,55,39],[55,4,56,2],[56,4,58,2],[56,10,58,8,"scope"],[56,15,58,13],[56,18,58,16],[56,22,58,16,"getCurrentScope"],[56,52,58,31],[56,54,58,32],[56,55,58,33],[57,4,59,2],[57,10,59,8,"previousActiveSpan"],[57,28,59,26],[57,31,59,29],[57,35,59,29,"getActiveSpan"],[57,59,59,42],[57,61,59,43],[57,62,59,44],[58,4,60,2],[58,10,60,8,"span"],[58,14,60,12],[58,17,60,15,"_startIdleSpan"],[58,31,60,29],[58,32,60,30,"startSpanOptions"],[58,48,60,46],[58,49,60,47],[60,4,62,2],[61,4,63,2],[62,4,64,2,"span"],[62,8,64,6],[62,9,64,7,"end"],[62,12,64,10],[62,15,64,13],[62,19,64,17,"Proxy"],[62,24,64,22],[62,25,64,23,"span"],[62,29,64,27],[62,30,64,28,"end"],[62,33,64,31],[62,35,64,33],[63,6,65,4,"apply"],[63,11,65,9,"apply"],[63,12,65,10,"target"],[63,18,65,16],[63,20,65,18,"thisArg"],[63,27,65,25],[63,29,65,27,"args"],[63,33,65,31],[63,35,65,33],[64,8,66,6],[64,12,66,10,"beforeSpanEnd"],[64,25,66,23],[64,27,66,25],[65,10,67,8,"beforeSpanEnd"],[65,23,67,21],[65,24,67,22,"span"],[65,28,67,26],[65,29,67,27],[66,8,68,6],[68,8,70,6],[69,8,71,6],[69,14,71,12],[69,15,71,13,"definedEndTimestamp"],[69,34,71,32],[69,36,71,34],[69,39,71,37,"rest"],[69,43,71,41],[69,44,71,42],[69,47,71,45,"args"],[69,51,71,49],[70,8,72,6],[70,14,72,12,"timestamp"],[70,23,72,21],[70,26,72,24,"definedEndTimestamp"],[70,45,72,43],[70,49,72,47],[70,53,72,47,"timestampInSeconds"],[70,77,72,65],[70,79,72,66],[70,80,72,67],[71,8,73,6],[71,14,73,12,"spanEndTimestamp"],[71,30,73,28],[71,33,73,31],[71,37,73,31,"spanTimeInputToSeconds"],[71,70,73,53],[71,72,73,54,"timestamp"],[71,81,73,63],[71,82,73,64],[73,8,75,6],[74,8,76,6],[74,14,76,12,"spans"],[74,19,76,17],[74,22,76,20],[74,26,76,20,"getSpanDescendants"],[74,55,76,38],[74,57,76,39,"span"],[74,61,76,43],[74,62,76,44],[74,63,76,45,"filter"],[74,69,76,51],[74,70,76,52,"child"],[74,75,76,57],[74,79,76,61,"child"],[74,84,76,66],[74,89,76,71,"span"],[74,93,76,75],[74,94,76,76],[76,8,78,6],[77,8,79,6],[77,12,79,10],[77,13,79,11,"spans"],[77,18,79,16],[77,19,79,17,"length"],[77,25,79,23],[77,27,79,25],[78,10,80,8,"onIdleSpanEnded"],[78,25,80,23],[78,26,80,24,"spanEndTimestamp"],[78,42,80,40],[78,43,80,41],[79,10,81,8],[79,17,81,15,"Reflect"],[79,24,81,22],[79,25,81,23,"apply"],[79,30,81,28],[79,31,81,29,"target"],[79,37,81,35],[79,39,81,37,"thisArg"],[79,46,81,44],[79,48,81,46],[79,49,81,47,"spanEndTimestamp"],[79,65,81,63],[79,67,81,65],[79,70,81,68,"rest"],[79,74,81,72],[79,75,81,73],[79,76,81,74],[80,8,82,6],[81,8,84,6],[81,14,84,12,"childEndTimestamps"],[81,32,84,30],[81,35,84,33,"spans"],[81,40,84,38],[81,41,85,9,"map"],[81,44,85,12],[81,45,85,13,"span"],[81,49,85,17],[81,53,85,21],[81,57,85,21,"spanToJSON"],[81,78,85,31],[81,80,85,32,"span"],[81,84,85,36],[81,85,85,37],[81,86,85,38,"timestamp"],[81,95,85,47],[81,96,85,48],[81,97,86,9,"filter"],[81,103,86,15],[81,104,86,16,"timestamp"],[81,113,86,25],[81,117,86,29],[81,118,86,30],[81,119,86,31,"timestamp"],[81,128,86,40],[81,129,86,41],[82,8,87,6],[82,14,87,12,"latestSpanEndTimestamp"],[82,36,87,34],[82,39,87,37,"childEndTimestamps"],[82,57,87,55],[82,58,87,56,"length"],[82,64,87,62],[82,67,87,65,"Math"],[82,71,87,69],[82,72,87,70,"max"],[82,75,87,73],[82,76,87,74],[82,79,87,77,"childEndTimestamps"],[82,97,87,95],[82,98,87,96],[82,101,87,99,"undefined"],[82,110,87,108],[84,8,89,6],[85,8,90,6],[85,14,90,12,"spanStartTimestamp"],[85,32,90,30],[85,35,90,33],[85,39,90,33,"spanToJSON"],[85,60,90,43],[85,62,90,44,"span"],[85,66,90,48],[85,67,90,49],[85,68,90,50,"start_timestamp"],[85,83,90,65],[87,8,92,6],[88,8,93,6],[89,8,94,6],[90,8,95,6],[91,8,96,6],[92,8,97,6],[92,14,97,12,"endTimestamp"],[92,26,97,24],[92,29,97,27,"Math"],[92,33,97,31],[92,34,97,32,"min"],[92,37,97,35],[92,38,98,8,"spanStartTimestamp"],[92,56,98,26],[92,59,98,29,"spanStartTimestamp"],[92,77,98,47],[92,80,98,50,"finalTimeout"],[92,92,98,62],[92,95,98,65],[92,99,98,69],[92,102,98,72,"Infinity"],[92,110,98,80],[92,112,99,8,"Math"],[92,116,99,12],[92,117,99,13,"max"],[92,120,99,16],[92,121,99,17,"spanStartTimestamp"],[92,139,99,35],[92,143,99,39],[92,144,99,40,"Infinity"],[92,152,99,48],[92,154,99,50,"Math"],[92,158,99,54],[92,159,99,55,"min"],[92,162,99,58],[92,163,99,59,"spanEndTimestamp"],[92,179,99,75],[92,181,99,77,"latestSpanEndTimestamp"],[92,203,99,99],[92,207,99,103,"Infinity"],[92,215,99,111],[92,216,99,112],[92,217,100,6],[92,218,100,7],[93,8,102,6,"onIdleSpanEnded"],[93,23,102,21],[93,24,102,22,"endTimestamp"],[93,36,102,34],[93,37,102,35],[94,8,103,6],[94,15,103,13,"Reflect"],[94,22,103,20],[94,23,103,21,"apply"],[94,28,103,26],[94,29,103,27,"target"],[94,35,103,33],[94,37,103,35,"thisArg"],[94,44,103,42],[94,46,103,44],[94,47,103,45,"endTimestamp"],[94,59,103,57],[94,61,103,59],[94,64,103,62,"rest"],[94,68,103,66],[94,69,103,67],[94,70,103,68],[95,6,104,4],[96,4,105,2],[96,5,105,3],[96,6,105,4],[98,4,107,2],[99,0,108,0],[100,0,109,0],[101,4,110,2],[101,13,110,11,"_cancelIdleTimeout"],[101,31,110,29,"_cancelIdleTimeout"],[101,32,110,29],[101,34,110,32],[102,6,111,4],[102,10,111,8,"_idleTimeoutID"],[102,24,111,22],[102,26,111,24],[103,8,112,6,"clearTimeout"],[103,20,112,18],[103,21,112,19,"_idleTimeoutID"],[103,35,112,33],[103,36,112,34],[104,8,113,6,"_idleTimeoutID"],[104,22,113,20],[104,25,113,23,"undefined"],[104,34,113,32],[105,6,114,4],[106,4,115,2],[108,4,117,2],[109,0,118,0],[110,0,119,0],[111,4,120,2],[111,13,120,11,"_restartIdleTimeout"],[111,32,120,30,"_restartIdleTimeout"],[111,33,120,31,"endTimestamp"],[111,45,120,43],[111,47,120,45],[112,6,121,4,"_cancelIdleTimeout"],[112,24,121,22],[112,25,121,23],[112,26,121,24],[113,6,122,4,"_idleTimeoutID"],[113,20,122,18],[113,23,122,21,"setTimeout"],[113,33,122,31],[113,34,122,32],[113,40,122,38],[114,8,123,6],[114,12,123,10],[114,13,123,11,"_finished"],[114,22,123,20],[114,26,123,24,"activities"],[114,36,123,34],[114,37,123,35,"size"],[114,41,123,39],[114,46,123,44],[114,47,123,45],[114,51,123,49,"_autoFinishAllowed"],[114,69,123,67],[114,71,123,69],[115,10,124,8,"_finishReason"],[115,23,124,21],[115,26,124,24,"FINISH_REASON_IDLE_TIMEOUT"],[115,52,124,50],[116,10,125,8,"span"],[116,14,125,12],[116,15,125,13,"end"],[116,18,125,16],[116,19,125,17,"endTimestamp"],[116,31,125,29],[116,32,125,30],[117,8,126,6],[118,6,127,4],[118,7,127,5],[118,9,127,7,"idleTimeout"],[118,20,127,18],[118,21,127,19],[119,4,128,2],[121,4,130,2],[122,0,131,0],[123,0,132,0],[124,4,133,2],[124,13,133,11,"_restartChildSpanTimeout"],[124,37,133,35,"_restartChildSpanTimeout"],[124,38,133,36,"endTimestamp"],[124,50,133,48],[124,52,133,50],[125,6,134,4,"_idleTimeoutID"],[125,20,134,18],[125,23,134,21,"setTimeout"],[125,33,134,31],[125,34,134,32],[125,40,134,38],[126,8,135,6],[126,12,135,10],[126,13,135,11,"_finished"],[126,22,135,20],[126,26,135,24,"_autoFinishAllowed"],[126,44,135,42],[126,46,135,44],[127,10,136,8,"_finishReason"],[127,23,136,21],[127,26,136,24,"FINISH_REASON_HEARTBEAT_FAILED"],[127,56,136,54],[128,10,137,8,"span"],[128,14,137,12],[128,15,137,13,"end"],[128,18,137,16],[128,19,137,17,"endTimestamp"],[128,31,137,29],[128,32,137,30],[129,8,138,6],[130,6,139,4],[130,7,139,5],[130,9,139,7,"childSpanTimeout"],[130,25,139,23],[130,26,139,24],[131,4,140,2],[133,4,142,2],[134,0,143,0],[135,0,144,0],[136,0,145,0],[137,4,146,2],[137,13,146,11,"_pushActivity"],[137,26,146,24,"_pushActivity"],[137,27,146,25,"spanId"],[137,33,146,31],[137,35,146,33],[138,6,147,4,"_cancelIdleTimeout"],[138,24,147,22],[138,25,147,23],[138,26,147,24],[139,6,148,4,"activities"],[139,16,148,14],[139,17,148,15,"set"],[139,20,148,18],[139,21,148,19,"spanId"],[139,27,148,25],[139,29,148,27],[139,33,148,31],[139,34,148,32],[140,6,150,4],[140,12,150,10,"endTimestamp"],[140,24,150,22],[140,27,150,25],[140,31,150,25,"timestampInSeconds"],[140,55,150,43],[140,57,150,44],[140,58,150,45],[141,6,151,4],[142,6,152,4],[143,6,153,4,"_restartChildSpanTimeout"],[143,30,153,28],[143,31,153,29,"endTimestamp"],[143,43,153,41],[143,46,153,44,"childSpanTimeout"],[143,62,153,60],[143,65,153,63],[143,69,153,67],[143,70,153,68],[144,4,154,2],[146,4,156,2],[147,0,157,0],[148,0,158,0],[149,0,159,0],[150,4,160,2],[150,13,160,11,"_popActivity"],[150,25,160,23,"_popActivity"],[150,26,160,24,"spanId"],[150,32,160,30],[150,34,160,32],[151,6,161,4],[151,10,161,8,"activities"],[151,20,161,18],[151,21,161,19,"has"],[151,24,161,22],[151,25,161,23,"spanId"],[151,31,161,29],[151,32,161,30],[151,34,161,32],[152,8,162,6,"activities"],[152,18,162,16],[152,19,162,17,"delete"],[152,25,162,23],[152,26,162,24,"spanId"],[152,32,162,30],[152,33,162,31],[153,6,163,4],[154,6,165,4],[154,10,165,8,"activities"],[154,20,165,18],[154,21,165,19,"size"],[154,25,165,23],[154,30,165,28],[154,31,165,29],[154,33,165,31],[155,8,166,6],[155,14,166,12,"endTimestamp"],[155,26,166,24],[155,29,166,27],[155,33,166,27,"timestampInSeconds"],[155,57,166,45],[155,59,166,46],[155,60,166,47],[156,8,167,6],[157,8,168,6],[158,8,169,6,"_restartIdleTimeout"],[158,27,169,25],[158,28,169,26,"endTimestamp"],[158,40,169,38],[158,43,169,41,"idleTimeout"],[158,54,169,52],[158,57,169,55],[158,61,169,59],[158,62,169,60],[159,6,170,4],[160,4,171,2],[161,4,173,2],[161,13,173,11,"onIdleSpanEnded"],[161,28,173,26,"onIdleSpanEnded"],[161,29,173,27,"endTimestamp"],[161,41,173,39],[161,43,173,41],[162,6,174,4,"_finished"],[162,15,174,13],[162,18,174,16],[162,22,174,20],[163,6,175,4,"activities"],[163,16,175,14],[163,17,175,15,"clear"],[163,22,175,20],[163,23,175,21],[163,24,175,22],[164,6,177,4,"_cleanupHooks"],[164,19,177,17],[164,20,177,18,"forEach"],[164,27,177,25],[164,28,177,26,"cleanup"],[164,35,177,33],[164,39,177,37,"cleanup"],[164,46,177,44],[164,47,177,45],[164,48,177,46],[164,49,177,47],[165,6,179,4],[165,10,179,4,"_setSpanForScope"],[165,39,179,20],[165,41,179,21,"scope"],[165,46,179,26],[165,48,179,28,"previousActiveSpan"],[165,66,179,46],[165,67,179,47],[166,6,181,4],[166,12,181,10,"spanJSON"],[166,20,181,18],[166,23,181,21],[166,27,181,21,"spanToJSON"],[166,48,181,31],[166,50,181,32,"span"],[166,54,181,36],[166,55,181,37],[167,6,183,4],[167,12,183,10],[168,8,183,12,"start_timestamp"],[168,23,183,27],[168,25,183,29,"startTimestamp"],[169,6,183,44],[169,7,183,45],[169,10,183,48,"spanJSON"],[169,18,183,56],[170,6,184,4],[171,6,185,4],[171,10,185,8],[171,11,185,9,"startTimestamp"],[171,25,185,23],[171,27,185,25],[172,8,186,6],[173,6,187,4],[174,6,189,4],[174,12,189,10,"attributes"],[174,22,189,20],[174,25,189,23,"spanJSON"],[174,33,189,31],[174,34,189,32,"data"],[174,38,189,36],[174,42,189,40],[174,43,189,41],[174,44,189,42],[175,6,190,4],[175,10,190,8],[175,11,190,9,"attributes"],[175,21,190,19],[175,22,190,20,"SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON"],[175,91,190,69],[175,92,190,70],[175,94,190,72],[176,8,191,6,"span"],[176,12,191,10],[176,13,191,11,"setAttribute"],[176,25,191,23],[176,26,191,24,"SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON"],[176,95,191,73],[176,97,191,75,"_finishReason"],[176,110,191,88],[176,111,191,89],[177,6,192,4],[178,6,194,4,"logger"],[178,20,194,10],[178,21,194,11,"log"],[178,24,194,14],[178,25,194,15],[178,49,194,39,"spanJSON"],[178,57,194,47],[178,58,194,48,"op"],[178,60,194,50],[178,72,194,62],[178,73,194,63],[179,6,196,4],[179,12,196,10,"childSpans"],[179,22,196,20],[179,25,196,23],[179,29,196,23,"getSpanDescendants"],[179,58,196,41],[179,60,196,42,"span"],[179,64,196,46],[179,65,196,47],[179,66,196,48,"filter"],[179,72,196,54],[179,73,196,55,"child"],[179,78,196,60],[179,82,196,64,"child"],[179,87,196,69],[179,92,196,74,"span"],[179,96,196,78],[179,97,196,79],[180,6,198,4],[180,10,198,8,"discardedSpans"],[180,24,198,22],[180,27,198,25],[180,28,198,26],[181,6,199,4,"childSpans"],[181,16,199,14],[181,17,199,15,"forEach"],[181,24,199,22],[181,25,199,23,"childSpan"],[181,34,199,32],[181,38,199,36],[182,8,200,6],[183,8,201,6],[183,12,201,10,"childSpan"],[183,21,201,19],[183,22,201,20,"isRecording"],[183,33,201,31],[183,34,201,32],[183,35,201,33],[183,37,201,35],[184,10,202,8,"childSpan"],[184,19,202,17],[184,20,202,18,"setStatus"],[184,29,202,27],[184,30,202,28],[185,12,202,30,"code"],[185,16,202,34],[185,18,202,36,"SPAN_STATUS_ERROR"],[185,47,202,53],[186,12,202,55,"message"],[186,19,202,62],[186,21,202,64],[187,10,202,76],[187,11,202,77],[187,12,202,78],[188,10,203,8,"childSpan"],[188,19,203,17],[188,20,203,18,"end"],[188,23,203,21],[188,24,203,22,"endTimestamp"],[188,36,203,34],[188,37,203,35],[189,10,204,8,"DEBUG_BUILD"],[189,33,204,19],[189,37,205,10,"logger"],[189,51,205,16],[189,52,205,17,"log"],[189,55,205,20],[189,56,205,21],[189,106,205,71],[189,108,205,73,"JSON"],[189,112,205,77],[189,113,205,78,"stringify"],[189,122,205,87],[189,123,205,88,"childSpan"],[189,132,205,97],[189,134,205,99,"undefined"],[189,143,205,108],[189,145,205,110],[189,146,205,111],[189,147,205,112],[189,148,205,113],[190,8,206,6],[191,8,208,6],[191,14,208,12,"childSpanJSON"],[191,27,208,25],[191,30,208,28],[191,34,208,28,"spanToJSON"],[191,55,208,38],[191,57,208,39,"childSpan"],[191,66,208,48],[191,67,208,49],[192,8,209,6],[192,14,209,12],[193,10,209,14,"timestamp"],[193,19,209,23],[193,21,209,25,"childEndTimestamp"],[193,38,209,42],[193,41,209,45],[193,42,209,46],[194,10,209,48,"start_timestamp"],[194,25,209,63],[194,27,209,65,"childStartTimestamp"],[194,46,209,84],[194,49,209,87],[195,8,209,89],[195,9,209,90],[195,12,209,93,"childSpanJSON"],[195,25,209,106],[196,8,211,6],[196,14,211,12,"spanStartedBeforeIdleSpanEnd"],[196,42,211,40],[196,45,211,43,"childStartTimestamp"],[196,64,211,62],[196,68,211,66,"endTimestamp"],[196,80,211,78],[198,8,213,6],[199,8,214,6],[199,14,214,12,"timeoutWithMarginOfError"],[199,38,214,36],[199,41,214,39],[199,42,214,40,"finalTimeout"],[199,54,214,52],[199,57,214,55,"idleTimeout"],[199,68,214,66],[199,72,214,70],[199,76,214,74],[200,8,215,6],[200,14,215,12,"spanEndedBeforeFinalTimeout"],[200,41,215,39],[200,44,215,42,"childEndTimestamp"],[200,61,215,59],[200,64,215,62,"childStartTimestamp"],[200,83,215,81],[200,87,215,85,"timeoutWithMarginOfError"],[200,111,215,109],[201,8,217,6],[201,12,217,10,"DEBUG_BUILD"],[201,35,217,21],[201,37,217,23],[202,10,218,8],[202,16,218,14,"stringifiedSpan"],[202,31,218,29],[202,34,218,32,"JSON"],[202,38,218,36],[202,39,218,37,"stringify"],[202,48,218,46],[202,49,218,47,"childSpan"],[202,58,218,56],[202,60,218,58,"undefined"],[202,69,218,67],[202,71,218,69],[202,72,218,70],[202,73,218,71],[203,10,219,8],[203,14,219,12],[203,15,219,13,"spanStartedBeforeIdleSpanEnd"],[203,43,219,41],[203,45,219,43],[204,12,220,10,"logger"],[204,26,220,16],[204,27,220,17,"log"],[204,30,220,20],[204,31,220,21],[204,105,220,95],[204,107,220,97,"stringifiedSpan"],[204,122,220,112],[204,123,220,113],[205,10,221,8],[205,11,221,9],[205,17,221,15],[205,21,221,19],[205,22,221,20,"spanEndedBeforeFinalTimeout"],[205,49,221,47],[205,51,221,49],[206,12,222,10,"logger"],[206,26,222,16],[206,27,222,17,"log"],[206,30,222,20],[206,31,222,21],[206,106,222,96],[206,108,222,98,"stringifiedSpan"],[206,123,222,113],[206,124,222,114],[207,10,223,8],[208,8,224,6],[209,8,226,6],[209,12,226,10],[209,13,226,11,"spanEndedBeforeFinalTimeout"],[209,40,226,38],[209,44,226,42],[209,45,226,43,"spanStartedBeforeIdleSpanEnd"],[209,73,226,71],[209,75,226,73],[210,10,227,8],[210,14,227,8,"removeChildSpanFromSpan"],[210,48,227,31],[210,50,227,32,"span"],[210,54,227,36],[210,56,227,38,"childSpan"],[210,65,227,47],[210,66,227,48],[211,10,228,8,"discardedSpans"],[211,24,228,22],[211,26,228,24],[212,8,229,6],[213,6,230,4],[213,7,230,5],[213,8,230,6],[214,6,232,4],[214,10,232,8,"discardedSpans"],[214,24,232,22],[214,27,232,25],[214,28,232,26],[214,30,232,28],[215,8,233,6,"span"],[215,12,233,10],[215,13,233,11,"setAttribute"],[215,25,233,23],[215,26,233,24],[215,60,233,58],[215,62,233,60,"discardedSpans"],[215,76,233,74],[215,77,233,75],[216,6,234,4],[217,4,235,2],[218,4,237,2,"_cleanupHooks"],[218,17,237,15],[218,18,237,16,"push"],[218,22,237,20],[218,23,238,4,"client"],[218,29,238,10],[218,30,238,11,"on"],[218,32,238,13],[218,33,238,14],[218,44,238,25],[218,46,238,27,"startedSpan"],[218,57,238,38],[218,61,238,42],[219,6,239,6],[220,6,240,6],[221,6,241,6],[222,6,242,6],[223,6,243,6],[223,10,243,10,"_finished"],[223,19,243,19],[223,23,243,23,"startedSpan"],[223,34,243,34],[223,39,243,39,"span"],[223,43,243,43],[223,47,243,47],[223,48,243,48],[223,49,243,49],[223,53,243,49,"spanToJSON"],[223,74,243,59],[223,76,243,60,"startedSpan"],[223,87,243,71],[223,88,243,72],[223,89,243,73,"timestamp"],[223,98,243,82],[223,100,243,84],[224,8,244,8],[225,6,245,6],[226,6,247,6],[226,12,247,12,"allSpans"],[226,20,247,20],[226,23,247,23],[226,27,247,23,"getSpanDescendants"],[226,56,247,41],[226,58,247,42,"span"],[226,62,247,46],[226,63,247,47],[228,6,249,6],[229,6,250,6],[229,10,250,10,"allSpans"],[229,18,250,18],[229,19,250,19,"includes"],[229,27,250,27],[229,28,250,28,"startedSpan"],[229,39,250,39],[229,40,250,40],[229,42,250,42],[230,8,251,8,"_pushActivity"],[230,21,251,21],[230,22,251,22,"startedSpan"],[230,33,251,33],[230,34,251,34,"spanContext"],[230,45,251,45],[230,46,251,46],[230,47,251,47],[230,48,251,48,"spanId"],[230,54,251,54],[230,55,251,55],[231,6,252,6],[232,4,253,4],[232,5,253,5],[232,6,254,2],[232,7,254,3],[233,4,256,2,"_cleanupHooks"],[233,17,256,15],[233,18,256,16,"push"],[233,22,256,20],[233,23,257,4,"client"],[233,29,257,10],[233,30,257,11,"on"],[233,32,257,13],[233,33,257,14],[233,42,257,23],[233,44,257,25,"endedSpan"],[233,53,257,34],[233,57,257,38],[234,6,258,6],[234,10,258,10,"_finished"],[234,19,258,19],[234,21,258,21],[235,8,259,8],[236,6,260,6],[237,6,262,6,"_popActivity"],[237,18,262,18],[237,19,262,19,"endedSpan"],[237,28,262,28],[237,29,262,29,"spanContext"],[237,40,262,40],[237,41,262,41],[237,42,262,42],[237,43,262,43,"spanId"],[237,49,262,49],[237,50,262,50],[238,4,263,4],[238,5,263,5],[238,6,264,2],[238,7,264,3],[239,4,266,2,"_cleanupHooks"],[239,17,266,15],[239,18,266,16,"push"],[239,22,266,20],[239,23,267,4,"client"],[239,29,267,10],[239,30,267,11,"on"],[239,32,267,13],[239,33,267,14],[239,59,267,40],[239,61,267,42,"spanToAllowAutoFinish"],[239,82,267,63],[239,86,267,67],[240,6,268,6],[240,10,268,10,"spanToAllowAutoFinish"],[240,31,268,31],[240,36,268,36,"span"],[240,40,268,40],[240,42,268,42],[241,8,269,8,"_autoFinishAllowed"],[241,26,269,26],[241,29,269,29],[241,33,269,33],[242,8,270,8,"_restartIdleTimeout"],[242,27,270,27],[242,28,270,28],[242,29,270,29],[243,8,272,8],[243,12,272,12,"activities"],[243,22,272,22],[243,23,272,23,"size"],[243,27,272,27],[243,29,272,29],[244,10,273,10,"_restartChildSpanTimeout"],[244,34,273,34],[244,35,273,35],[244,36,273,36],[245,8,274,8],[246,6,275,6],[247,4,276,4],[247,5,276,5],[247,6,277,2],[247,7,277,3],[249,4,279,2],[250,4,280,2],[250,8,280,6],[250,9,280,7,"options"],[250,16,280,14],[250,17,280,15,"disableAutoFinish"],[250,34,280,32],[250,36,280,34],[251,6,281,4,"_restartIdleTimeout"],[251,25,281,23],[251,26,281,24],[251,27,281,25],[252,4,282,2],[253,4,284,2,"setTimeout"],[253,14,284,12],[253,15,284,13],[253,21,284,19],[254,6,285,4],[254,10,285,8],[254,11,285,9,"_finished"],[254,20,285,18],[254,22,285,20],[255,8,286,6,"span"],[255,12,286,10],[255,13,286,11,"setStatus"],[255,22,286,20],[255,23,286,21],[256,10,286,23,"code"],[256,14,286,27],[256,16,286,29,"SPAN_STATUS_ERROR"],[256,45,286,46],[257,10,286,48,"message"],[257,17,286,55],[257,19,286,57],[258,8,286,77],[258,9,286,78],[258,10,286,79],[259,8,287,6,"_finishReason"],[259,21,287,19],[259,24,287,22,"FINISH_REASON_FINAL_TIMEOUT"],[259,51,287,49],[260,8,288,6,"span"],[260,12,288,10],[260,13,288,11,"end"],[260,16,288,14],[260,17,288,15],[260,18,288,16],[261,6,289,4],[262,4,290,2],[262,5,290,3],[262,7,290,5,"finalTimeout"],[262,19,290,17],[262,20,290,18],[263,4,292,2],[263,11,292,9,"span"],[263,15,292,13],[264,2,293,0],[265,2,295,0],[265,11,295,9,"_startIdleSpan"],[265,25,295,23,"_startIdleSpan"],[265,26,295,24,"options"],[265,33,295,31],[265,35,295,33],[266,4,296,2],[266,10,296,8,"span"],[266,14,296,12],[266,17,296,15],[266,21,296,15,"startInactiveSpan"],[266,45,296,32],[266,47,296,33,"options"],[266,54,296,40],[266,55,296,41],[267,4,298,2],[267,8,298,2,"_setSpanForScope"],[267,37,298,18],[267,39,298,19],[267,43,298,19,"getCurrentScope"],[267,73,298,34],[267,75,298,35],[267,76,298,36],[267,78,298,38,"span"],[267,82,298,42],[267,83,298,43],[268,4,300,2,"DEBUG_BUILD"],[268,27,300,13],[268,31,300,17,"logger"],[268,45,300,23],[268,46,300,24,"log"],[268,49,300,27],[268,50,300,28],[268,90,300,68],[268,91,300,69],[269,4,302,2],[269,11,302,9,"span"],[269,15,302,13],[270,2,303,0],[271,0,303,1],[271,3]],"functionMap":{"names":["<global>","startIdleSpan","Proxy$argument_1.apply","getSpanDescendants.filter$argument_0","spans.map$argument_0","spans.map.filter$argument_0","_cancelIdleTimeout","_restartIdleTimeout","setTimeout$argument_0","_restartChildSpanTimeout","_pushActivity","_popActivity","onIdleSpanEnded","_cleanupHooks.forEach$argument_0","childSpans.forEach$argument_0","client.on$argument_1","_startIdleSpan"],"mappings":"AAA;AC2B;ICqC;oDCW,uBD;aES,kCF;gBGC,wBH;KDkB;EKM;GLK;EMK;gCCE;KDK;GNC;EQK;gCDC;KCK;GRC;ESM;GTQ;EUM;GVW;EWE;0BCI,oBD;uDTmB,uBS;uBEG;KF+B;GXK;2BcG;Kde;yBcI;KdM;0CcI;KdS;aOQ;GPM;CDG;AgBE;ChBQ"}},"type":"js/module"}]}