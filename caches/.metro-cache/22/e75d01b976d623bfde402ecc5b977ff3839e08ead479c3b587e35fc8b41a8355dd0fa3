{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isDOMError = isDOMError;\n  exports.isDOMException = isDOMException;\n  exports.isElement = isElement;\n  exports.isError = isError;\n  exports.isErrorEvent = isErrorEvent;\n  exports.isEvent = isEvent;\n  exports.isInstanceOf = isInstanceOf;\n  exports.isParameterizedString = isParameterizedString;\n  exports.isPlainObject = isPlainObject;\n  exports.isPrimitive = isPrimitive;\n  exports.isRegExp = isRegExp;\n  exports.isString = isString;\n  exports.isSyntheticEvent = isSyntheticEvent;\n  exports.isThenable = isThenable;\n  exports.isVueViewModel = isVueViewModel;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const objectToString = Object.prototype.toString;\n\n  /**\n   * Checks whether given value's type is one of a few Error or Error-like\n   * {@link isError}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isError(wat) {\n    switch (objectToString.call(wat)) {\n      case '[object Error]':\n      case '[object Exception]':\n      case '[object DOMException]':\n      case '[object WebAssembly.Exception]':\n        return true;\n      default:\n        return isInstanceOf(wat, Error);\n    }\n  }\n  /**\n   * Checks whether given value is an instance of the given built-in class.\n   *\n   * @param wat The value to be checked\n   * @param className\n   * @returns A boolean representing the result.\n   */\n  function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n  }\n\n  /**\n   * Checks whether given value's type is ErrorEvent\n   * {@link isErrorEvent}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isErrorEvent(wat) {\n    return isBuiltin(wat, 'ErrorEvent');\n  }\n\n  /**\n   * Checks whether given value's type is DOMError\n   * {@link isDOMError}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isDOMError(wat) {\n    return isBuiltin(wat, 'DOMError');\n  }\n\n  /**\n   * Checks whether given value's type is DOMException\n   * {@link isDOMException}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isDOMException(wat) {\n    return isBuiltin(wat, 'DOMException');\n  }\n\n  /**\n   * Checks whether given value's type is a string\n   * {@link isString}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isString(wat) {\n    return isBuiltin(wat, 'String');\n  }\n\n  /**\n   * Checks whether given string is parameterized\n   * {@link isParameterizedString}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isParameterizedString(wat) {\n    return typeof wat === 'object' && wat !== null && '__sentry_template_string__' in wat && '__sentry_template_values__' in wat;\n  }\n\n  /**\n   * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n   * {@link isPrimitive}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isPrimitive(wat) {\n    return wat === null || isParameterizedString(wat) || typeof wat !== 'object' && typeof wat !== 'function';\n  }\n\n  /**\n   * Checks whether given value's type is an object literal, or a class instance.\n   * {@link isPlainObject}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isPlainObject(wat) {\n    return isBuiltin(wat, 'Object');\n  }\n\n  /**\n   * Checks whether given value's type is an Event instance\n   * {@link isEvent}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isEvent(wat) {\n    return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n  }\n\n  /**\n   * Checks whether given value's type is an Element instance\n   * {@link isElement}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isElement(wat) {\n    return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n  }\n\n  /**\n   * Checks whether given value's type is an regexp\n   * {@link isRegExp}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isRegExp(wat) {\n    return isBuiltin(wat, 'RegExp');\n  }\n\n  /**\n   * Checks whether given value has a then function.\n   * @param wat A value to be checked.\n   */\n  function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === 'function');\n  }\n\n  /**\n   * Checks whether given value's type is a SyntheticEvent\n   * {@link isSyntheticEvent}.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n  }\n\n  /**\n   * Checks whether given value's type is an instance of provided constructor.\n   * {@link isInstanceOf}.\n   *\n   * @param wat A value to be checked.\n   * @param base A constructor to be used in a check.\n   * @returns A boolean representing the result.\n   */\n  function isInstanceOf(wat, base) {\n    try {\n      return wat instanceof base;\n    } catch (_e) {\n      return false;\n    }\n  }\n\n  /**\n   * Checks whether given value's type is a Vue ViewModel.\n   *\n   * @param wat A value to be checked.\n   * @returns A boolean representing the result.\n   */\n  function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === 'object' && wat !== null && (wat.__isVue || wat._isVue));\n  }\n});","lineCount":208,"map":[[20,2,1,0],[21,2,2,0],[21,8,2,6,"objectToString"],[21,22,2,20],[21,25,2,23,"Object"],[21,31,2,29],[21,32,2,30,"prototype"],[21,41,2,39],[21,42,2,40,"toString"],[21,50,2,48],[23,2,4,0],[24,0,5,0],[25,0,6,0],[26,0,7,0],[27,0,8,0],[28,0,9,0],[29,0,10,0],[30,2,11,0],[30,11,11,9,"isError"],[30,18,11,16,"isError"],[30,19,11,17,"wat"],[30,22,11,20],[30,24,11,22],[31,4,12,2],[31,12,12,10,"objectToString"],[31,26,12,24],[31,27,12,25,"call"],[31,31,12,29],[31,32,12,30,"wat"],[31,35,12,33],[31,36,12,34],[32,6,13,4],[32,11,13,9],[32,27,13,25],[33,6,14,4],[33,11,14,9],[33,31,14,29],[34,6,15,4],[34,11,15,9],[34,34,15,32],[35,6,16,4],[35,11,16,9],[35,43,16,41],[36,8,17,6],[36,15,17,13],[36,19,17,17],[37,6,18,4],[38,8,19,6],[38,15,19,13,"isInstanceOf"],[38,27,19,25],[38,28,19,26,"wat"],[38,31,19,29],[38,33,19,31,"Error"],[38,38,19,36],[38,39,19,37],[39,4,20,2],[40,2,21,0],[41,2,22,0],[42,0,23,0],[43,0,24,0],[44,0,25,0],[45,0,26,0],[46,0,27,0],[47,0,28,0],[48,2,29,0],[48,11,29,9,"isBuiltin"],[48,20,29,18,"isBuiltin"],[48,21,29,19,"wat"],[48,24,29,22],[48,26,29,24,"className"],[48,35,29,33],[48,37,29,35],[49,4,30,2],[49,11,30,9,"objectToString"],[49,25,30,23],[49,26,30,24,"call"],[49,30,30,28],[49,31,30,29,"wat"],[49,34,30,32],[49,35,30,33],[49,40,30,38],[49,51,30,49,"className"],[49,60,30,58],[49,63,30,61],[50,2,31,0],[52,2,33,0],[53,0,34,0],[54,0,35,0],[55,0,36,0],[56,0,37,0],[57,0,38,0],[58,0,39,0],[59,2,40,0],[59,11,40,9,"isErrorEvent"],[59,23,40,21,"isErrorEvent"],[59,24,40,22,"wat"],[59,27,40,25],[59,29,40,27],[60,4,41,2],[60,11,41,9,"isBuiltin"],[60,20,41,18],[60,21,41,19,"wat"],[60,24,41,22],[60,26,41,24],[60,38,41,36],[60,39,41,37],[61,2,42,0],[63,2,44,0],[64,0,45,0],[65,0,46,0],[66,0,47,0],[67,0,48,0],[68,0,49,0],[69,0,50,0],[70,2,51,0],[70,11,51,9,"isDOMError"],[70,21,51,19,"isDOMError"],[70,22,51,20,"wat"],[70,25,51,23],[70,27,51,25],[71,4,52,2],[71,11,52,9,"isBuiltin"],[71,20,52,18],[71,21,52,19,"wat"],[71,24,52,22],[71,26,52,24],[71,36,52,34],[71,37,52,35],[72,2,53,0],[74,2,55,0],[75,0,56,0],[76,0,57,0],[77,0,58,0],[78,0,59,0],[79,0,60,0],[80,0,61,0],[81,2,62,0],[81,11,62,9,"isDOMException"],[81,25,62,23,"isDOMException"],[81,26,62,24,"wat"],[81,29,62,27],[81,31,62,29],[82,4,63,2],[82,11,63,9,"isBuiltin"],[82,20,63,18],[82,21,63,19,"wat"],[82,24,63,22],[82,26,63,24],[82,40,63,38],[82,41,63,39],[83,2,64,0],[85,2,66,0],[86,0,67,0],[87,0,68,0],[88,0,69,0],[89,0,70,0],[90,0,71,0],[91,0,72,0],[92,2,73,0],[92,11,73,9,"isString"],[92,19,73,17,"isString"],[92,20,73,18,"wat"],[92,23,73,21],[92,25,73,23],[93,4,74,2],[93,11,74,9,"isBuiltin"],[93,20,74,18],[93,21,74,19,"wat"],[93,24,74,22],[93,26,74,24],[93,34,74,32],[93,35,74,33],[94,2,75,0],[96,2,77,0],[97,0,78,0],[98,0,79,0],[99,0,80,0],[100,0,81,0],[101,0,82,0],[102,0,83,0],[103,2,84,0],[103,11,84,9,"isParameterizedString"],[103,32,84,30,"isParameterizedString"],[103,33,84,31,"wat"],[103,36,84,34],[103,38,84,36],[104,4,85,2],[104,11,86,4],[104,18,86,11,"wat"],[104,21,86,14],[104,26,86,19],[104,34,86,27],[104,38,87,4,"wat"],[104,41,87,7],[104,46,87,12],[104,50,87,16],[104,54,88,4],[104,82,88,32],[104,86,88,36,"wat"],[104,89,88,39],[104,93,89,4],[104,121,89,32],[104,125,89,36,"wat"],[104,128,89,39],[105,2,91,0],[107,2,93,0],[108,0,94,0],[109,0,95,0],[110,0,96,0],[111,0,97,0],[112,0,98,0],[113,0,99,0],[114,2,100,0],[114,11,100,9,"isPrimitive"],[114,22,100,20,"isPrimitive"],[114,23,100,21,"wat"],[114,26,100,24],[114,28,100,26],[115,4,101,2],[115,11,101,9,"wat"],[115,14,101,12],[115,19,101,17],[115,23,101,21],[115,27,101,25,"isParameterizedString"],[115,48,101,46],[115,49,101,47,"wat"],[115,52,101,50],[115,53,101,51],[115,57,101,56],[115,64,101,63,"wat"],[115,67,101,66],[115,72,101,71],[115,80,101,79],[115,84,101,83],[115,91,101,90,"wat"],[115,94,101,93],[115,99,101,98],[115,109,101,109],[116,2,102,0],[118,2,104,0],[119,0,105,0],[120,0,106,0],[121,0,107,0],[122,0,108,0],[123,0,109,0],[124,0,110,0],[125,2,111,0],[125,11,111,9,"isPlainObject"],[125,24,111,22,"isPlainObject"],[125,25,111,23,"wat"],[125,28,111,26],[125,30,111,28],[126,4,112,2],[126,11,112,9,"isBuiltin"],[126,20,112,18],[126,21,112,19,"wat"],[126,24,112,22],[126,26,112,24],[126,34,112,32],[126,35,112,33],[127,2,113,0],[129,2,115,0],[130,0,116,0],[131,0,117,0],[132,0,118,0],[133,0,119,0],[134,0,120,0],[135,0,121,0],[136,2,122,0],[136,11,122,9,"isEvent"],[136,18,122,16,"isEvent"],[136,19,122,17,"wat"],[136,22,122,20],[136,24,122,22],[137,4,123,2],[137,11,123,9],[137,18,123,16,"Event"],[137,23,123,21],[137,28,123,26],[137,39,123,37],[137,43,123,41,"isInstanceOf"],[137,55,123,53],[137,56,123,54,"wat"],[137,59,123,57],[137,61,123,59,"Event"],[137,66,123,64],[137,67,123,65],[138,2,124,0],[140,2,126,0],[141,0,127,0],[142,0,128,0],[143,0,129,0],[144,0,130,0],[145,0,131,0],[146,0,132,0],[147,2,133,0],[147,11,133,9,"isElement"],[147,20,133,18,"isElement"],[147,21,133,19,"wat"],[147,24,133,22],[147,26,133,24],[148,4,134,2],[148,11,134,9],[148,18,134,16,"Element"],[148,25,134,23],[148,30,134,28],[148,41,134,39],[148,45,134,43,"isInstanceOf"],[148,57,134,55],[148,58,134,56,"wat"],[148,61,134,59],[148,63,134,61,"Element"],[148,70,134,68],[148,71,134,69],[149,2,135,0],[151,2,137,0],[152,0,138,0],[153,0,139,0],[154,0,140,0],[155,0,141,0],[156,0,142,0],[157,0,143,0],[158,2,144,0],[158,11,144,9,"isRegExp"],[158,19,144,17,"isRegExp"],[158,20,144,18,"wat"],[158,23,144,21],[158,25,144,23],[159,4,145,2],[159,11,145,9,"isBuiltin"],[159,20,145,18],[159,21,145,19,"wat"],[159,24,145,22],[159,26,145,24],[159,34,145,32],[159,35,145,33],[160,2,146,0],[162,2,148,0],[163,0,149,0],[164,0,150,0],[165,0,151,0],[166,2,152,0],[166,11,152,9,"isThenable"],[166,21,152,19,"isThenable"],[166,22,152,20,"wat"],[166,25,152,23],[166,27,152,25],[167,4,153,2],[168,4,154,2],[168,11,154,9,"Boolean"],[168,18,154,16],[168,19,154,17,"wat"],[168,22,154,20],[168,26,154,24,"wat"],[168,29,154,27],[168,30,154,28,"then"],[168,34,154,32],[168,38,154,36],[168,45,154,43,"wat"],[168,48,154,46],[168,49,154,47,"then"],[168,53,154,51],[168,58,154,56],[168,68,154,66],[168,69,154,67],[169,2,155,0],[171,2,157,0],[172,0,158,0],[173,0,159,0],[174,0,160,0],[175,0,161,0],[176,0,162,0],[177,0,163,0],[178,2,164,0],[178,11,164,9,"isSyntheticEvent"],[178,27,164,25,"isSyntheticEvent"],[178,28,164,26,"wat"],[178,31,164,29],[178,33,164,31],[179,4,165,2],[179,11,165,9,"isPlainObject"],[179,24,165,22],[179,25,165,23,"wat"],[179,28,165,26],[179,29,165,27],[179,33,165,31],[179,46,165,44],[179,50,165,48,"wat"],[179,53,165,51],[179,57,165,55],[179,73,165,71],[179,77,165,75,"wat"],[179,80,165,78],[179,84,165,82],[179,101,165,99],[179,105,165,103,"wat"],[179,108,165,106],[180,2,166,0],[182,2,168,0],[183,0,169,0],[184,0,170,0],[185,0,171,0],[186,0,172,0],[187,0,173,0],[188,0,174,0],[189,0,175,0],[190,2,176,0],[190,11,176,9,"isInstanceOf"],[190,23,176,21,"isInstanceOf"],[190,24,176,22,"wat"],[190,27,176,25],[190,29,176,27,"base"],[190,33,176,31],[190,35,176,33],[191,4,177,2],[191,8,177,6],[192,6,178,4],[192,13,178,11,"wat"],[192,16,178,14],[192,28,178,26,"base"],[192,32,178,30],[193,4,179,2],[193,5,179,3],[193,6,179,4],[193,13,179,11,"_e"],[193,15,179,13],[193,17,179,15],[194,6,180,4],[194,13,180,11],[194,18,180,16],[195,4,181,2],[196,2,182,0],[198,2,184,0],[199,0,185,0],[200,0,186,0],[201,0,187,0],[202,0,188,0],[203,0,189,0],[204,2,190,0],[204,11,190,9,"isVueViewModel"],[204,25,190,23,"isVueViewModel"],[204,26,190,24,"wat"],[204,29,190,27],[204,31,190,29],[205,4,191,2],[206,4,192,2],[206,11,192,9],[206,12,192,10],[206,14,192,12],[206,21,192,19,"wat"],[206,24,192,22],[206,29,192,27],[206,37,192,35],[206,41,192,39,"wat"],[206,44,192,42],[206,49,192,47],[206,53,192,51],[206,58,192,57,"wat"],[206,61,192,60],[206,62,192,63,"__isVue"],[206,69,192,70],[206,73,192,75,"wat"],[206,76,192,78],[206,77,192,81,"_isVue"],[206,83,192,87],[206,84,192,88],[206,85,192,89],[207,2,193,0],[208,0,193,1],[208,3]],"functionMap":{"names":["<global>","isError","isBuiltin","isErrorEvent","isDOMError","isDOMException","isString","isParameterizedString","isPrimitive","isPlainObject","isEvent","isElement","isRegExp","isThenable","isSyntheticEvent","isInstanceOf","isVueViewModel"],"mappings":"AAA;ACU;CDU;AEQ;CFE;AGS;CHE;AIS;CJE;AKS;CLE;AMS;CNE;AOS;CPO;AQS;CRE;ASS;CTE;AUS;CVE;AWS;CXE;AYS;CZE;AaM;CbG;AcS;CdE;AeU;CfM;AgBQ;ChBG"}},"type":"js/module"}]}