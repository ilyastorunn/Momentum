{"dependencies":[{"name":"./utils-hoist/worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"/lA1quQlpOoALnJUBGcie/ONj5k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addMetadataToStackFrames = addMetadataToStackFrames;\n  exports.getMetadataForUrl = getMetadataForUrl;\n  exports.stripMetadataFromStackFrames = stripMetadataFromStackFrames;\n  var _worldwide = require(_dependencyMap[0], \"./utils-hoist/worldwide.js\");\n  /** Keys are source filename/url, values are metadata objects. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const filenameMetadataMap = new Map();\n  /** Set of stack strings that have already been parsed. */\n  const parsedStacks = new Set();\n  function ensureMetadataStacksAreParsed(parser) {\n    if (!_worldwide.GLOBAL_OBJ._sentryModuleMetadata) {\n      return;\n    }\n    for (const stack of Object.keys(_worldwide.GLOBAL_OBJ._sentryModuleMetadata)) {\n      const metadata = _worldwide.GLOBAL_OBJ._sentryModuleMetadata[stack];\n      if (parsedStacks.has(stack)) {\n        continue;\n      }\n\n      // Ensure this stack doesn't get parsed again\n      parsedStacks.add(stack);\n      const frames = parser(stack);\n\n      // Go through the frames starting from the top of the stack and find the first one with a filename\n      for (const frame of frames.reverse()) {\n        if (frame.filename) {\n          // Save the metadata for this filename\n          filenameMetadataMap.set(frame.filename, metadata);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Retrieve metadata for a specific JavaScript file URL.\n   *\n   * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function getMetadataForUrl(parser, filename) {\n    ensureMetadataStacksAreParsed(parser);\n    return filenameMetadataMap.get(filename);\n  }\n\n  /**\n   * Adds metadata to stack frames.\n   *\n   * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n   */\n  function addMetadataToStackFrames(parser, event) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values.forEach(exception => {\n        if (!exception.stacktrace) {\n          return;\n        }\n        for (const frame of exception.stacktrace.frames || []) {\n          if (!frame.filename || frame.module_metadata) {\n            continue;\n          }\n          const metadata = getMetadataForUrl(parser, frame.filename);\n          if (metadata) {\n            frame.module_metadata = metadata;\n          }\n        }\n      });\n    } catch (_) {\n      // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n  }\n\n  /**\n   * Strips metadata from stack frames.\n   */\n  function stripMetadataFromStackFrames(event) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values.forEach(exception => {\n        if (!exception.stacktrace) {\n          return;\n        }\n        for (const frame of exception.stacktrace.frames || []) {\n          delete frame.module_metadata;\n        }\n      });\n    } catch (_) {\n      // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n  }\n});","lineCount":95,"map":[[8,2,1,0],[8,6,1,0,"_worldwide"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,3,0],[10,2,4,0],[11,2,5,0],[11,8,5,6,"filenameMetadataMap"],[11,27,5,25],[11,30,5,28],[11,34,5,32,"Map"],[11,37,5,35],[11,38,5,36],[11,39,5,37],[12,2,6,0],[13,2,7,0],[13,8,7,6,"parsedStacks"],[13,20,7,18],[13,23,7,21],[13,27,7,25,"Set"],[13,30,7,28],[13,31,7,29],[13,32,7,30],[14,2,9,0],[14,11,9,9,"ensureMetadataStacksAreParsed"],[14,40,9,38,"ensureMetadataStacksAreParsed"],[14,41,9,39,"parser"],[14,47,9,45],[14,49,9,47],[15,4,10,2],[15,8,10,6],[15,9,10,7,"GLOBAL_OBJ"],[15,30,10,17],[15,31,10,18,"_sentryModuleMetadata"],[15,52,10,39],[15,54,10,41],[16,6,11,4],[17,4,12,2],[18,4,14,2],[18,9,14,7],[18,15,14,13,"stack"],[18,20,14,18],[18,24,14,22,"Object"],[18,30,14,28],[18,31,14,29,"keys"],[18,35,14,33],[18,36,14,34,"GLOBAL_OBJ"],[18,57,14,44],[18,58,14,45,"_sentryModuleMetadata"],[18,79,14,66],[18,80,14,67],[18,82,14,69],[19,6,15,4],[19,12,15,10,"metadata"],[19,20,15,18],[19,23,15,21,"GLOBAL_OBJ"],[19,44,15,31],[19,45,15,32,"_sentryModuleMetadata"],[19,66,15,53],[19,67,15,54,"stack"],[19,72,15,59],[19,73,15,60],[20,6,17,4],[20,10,17,8,"parsedStacks"],[20,22,17,20],[20,23,17,21,"has"],[20,26,17,24],[20,27,17,25,"stack"],[20,32,17,30],[20,33,17,31],[20,35,17,33],[21,8,18,6],[22,6,19,4],[24,6,21,4],[25,6,22,4,"parsedStacks"],[25,18,22,16],[25,19,22,17,"add"],[25,22,22,20],[25,23,22,21,"stack"],[25,28,22,26],[25,29,22,27],[26,6,24,4],[26,12,24,10,"frames"],[26,18,24,16],[26,21,24,19,"parser"],[26,27,24,25],[26,28,24,26,"stack"],[26,33,24,31],[26,34,24,32],[28,6,26,4],[29,6,27,4],[29,11,27,9],[29,17,27,15,"frame"],[29,22,27,20],[29,26,27,24,"frames"],[29,32,27,30],[29,33,27,31,"reverse"],[29,40,27,38],[29,41,27,39],[29,42,27,40],[29,44,27,42],[30,8,28,6],[30,12,28,10,"frame"],[30,17,28,15],[30,18,28,16,"filename"],[30,26,28,24],[30,28,28,26],[31,10,29,8],[32,10,30,8,"filenameMetadataMap"],[32,29,30,27],[32,30,30,28,"set"],[32,33,30,31],[32,34,30,32,"frame"],[32,39,30,37],[32,40,30,38,"filename"],[32,48,30,46],[32,50,30,48,"metadata"],[32,58,30,56],[32,59,30,57],[33,10,31,8],[34,8,32,6],[35,6,33,4],[36,4,34,2],[37,2,35,0],[39,2,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,2,42,0],[45,2,43,0],[45,11,43,9,"getMetadataForUrl"],[45,28,43,26,"getMetadataForUrl"],[45,29,43,27,"parser"],[45,35,43,33],[45,37,43,35,"filename"],[45,45,43,43],[45,47,43,45],[46,4,44,2,"ensureMetadataStacksAreParsed"],[46,33,44,31],[46,34,44,32,"parser"],[46,40,44,38],[46,41,44,39],[47,4,45,2],[47,11,45,9,"filenameMetadataMap"],[47,30,45,28],[47,31,45,29,"get"],[47,34,45,32],[47,35,45,33,"filename"],[47,43,45,41],[47,44,45,42],[48,2,46,0],[50,2,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,0,52,0],[55,2,53,0],[55,11,53,9,"addMetadataToStackFrames"],[55,35,53,33,"addMetadataToStackFrames"],[55,36,53,34,"parser"],[55,42,53,40],[55,44,53,42,"event"],[55,49,53,47],[55,51,53,49],[56,4,54,2],[56,8,54,6],[57,6,55,4],[58,6,56,4,"event"],[58,11,56,9],[58,12,56,10,"exception"],[58,21,56,19],[58,22,56,20,"values"],[58,28,56,26],[58,29,56,27,"forEach"],[58,36,56,34],[58,37,56,35,"exception"],[58,46,56,44],[58,50,56,48],[59,8,57,6],[59,12,57,10],[59,13,57,11,"exception"],[59,22,57,20],[59,23,57,21,"stacktrace"],[59,33,57,31],[59,35,57,33],[60,10,58,8],[61,8,59,6],[62,8,61,6],[62,13,61,11],[62,19,61,17,"frame"],[62,24,61,22],[62,28,61,26,"exception"],[62,37,61,35],[62,38,61,36,"stacktrace"],[62,48,61,46],[62,49,61,47,"frames"],[62,55,61,53],[62,59,61,57],[62,61,61,59],[62,63,61,61],[63,10,62,8],[63,14,62,12],[63,15,62,13,"frame"],[63,20,62,18],[63,21,62,19,"filename"],[63,29,62,27],[63,33,62,31,"frame"],[63,38,62,36],[63,39,62,37,"module_metadata"],[63,54,62,52],[63,56,62,54],[64,12,63,10],[65,10,64,8],[66,10,66,8],[66,16,66,14,"metadata"],[66,24,66,22],[66,27,66,25,"getMetadataForUrl"],[66,44,66,42],[66,45,66,43,"parser"],[66,51,66,49],[66,53,66,51,"frame"],[66,58,66,56],[66,59,66,57,"filename"],[66,67,66,65],[66,68,66,66],[67,10,68,8],[67,14,68,12,"metadata"],[67,22,68,20],[67,24,68,22],[68,12,69,10,"frame"],[68,17,69,15],[68,18,69,16,"module_metadata"],[68,33,69,31],[68,36,69,34,"metadata"],[68,44,69,42],[69,10,70,8],[70,8,71,6],[71,6,72,4],[71,7,72,5],[71,8,72,6],[72,4,73,2],[72,5,73,3],[72,6,73,4],[72,13,73,11,"_"],[72,14,73,12],[72,16,73,14],[73,6,74,4],[74,4,74,4],[75,2,76,0],[77,2,78,0],[78,0,79,0],[79,0,80,0],[80,2,81,0],[80,11,81,9,"stripMetadataFromStackFrames"],[80,39,81,37,"stripMetadataFromStackFrames"],[80,40,81,38,"event"],[80,45,81,43],[80,47,81,45],[81,4,82,2],[81,8,82,6],[82,6,83,4],[83,6,84,4,"event"],[83,11,84,9],[83,12,84,10,"exception"],[83,21,84,19],[83,22,84,20,"values"],[83,28,84,26],[83,29,84,27,"forEach"],[83,36,84,34],[83,37,84,35,"exception"],[83,46,84,44],[83,50,84,48],[84,8,85,6],[84,12,85,10],[84,13,85,11,"exception"],[84,22,85,20],[84,23,85,21,"stacktrace"],[84,33,85,31],[84,35,85,33],[85,10,86,8],[86,8,87,6],[87,8,89,6],[87,13,89,11],[87,19,89,17,"frame"],[87,24,89,22],[87,28,89,26,"exception"],[87,37,89,35],[87,38,89,36,"stacktrace"],[87,48,89,46],[87,49,89,47,"frames"],[87,55,89,53],[87,59,89,57],[87,61,89,59],[87,63,89,61],[88,10,90,8],[88,17,90,15,"frame"],[88,22,90,20],[88,23,90,21,"module_metadata"],[88,38,90,36],[89,8,91,6],[90,6,92,4],[90,7,92,5],[90,8,92,6],[91,4,93,2],[91,5,93,3],[91,6,93,4],[91,13,93,11,"_"],[91,14,93,12],[91,16,93,14],[92,6,94,4],[93,4,94,4],[94,2,96,0],[95,0,96,1],[95,3]],"functionMap":{"names":["<global>","ensureMetadataStacksAreParsed","getMetadataForUrl","addMetadataToStackFrames","event.exception.values.forEach$argument_0","stripMetadataFromStackFrames"],"mappings":"AAA;ACQ;CD0B;AEQ;CFG;AGO;mCCG;KDgB;CHI;AKK;mCDG;KCQ;CLI"}},"type":"js/module"}]}