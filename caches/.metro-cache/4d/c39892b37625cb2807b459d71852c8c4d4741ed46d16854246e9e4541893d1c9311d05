{"dependencies":[{"name":"../utils-hoist/is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"3x1kguMyd34OmCyltgMzanSUMqM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.handleCallbackErrors = handleCallbackErrors;\n  var _is = require(_dependencyMap[0], \"../utils-hoist/is.js\");\n  /**\n   * Wrap a callback function with error handling.\n   * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n   *\n   * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n   *\n   * If an `onFinally` callback is provided, this will be called when the callback has finished\n   * - so if it returns a promise, once the promise resolved/rejected,\n   * else once the callback has finished executing.\n   * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n   */\n  function handleCallbackErrors(fn, onError,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally = () => {}) {\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = fn();\n    } catch (e) {\n      onError(e);\n      onFinally();\n      throw e;\n    }\n    return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n  }\n\n  /**\n   * Maybe handle a promise rejection.\n   * This expects to be given a value that _may_ be a promise, or any other value.\n   * If it is a promise, and it rejects, it will call the `onError` callback.\n   * Other than this, it will generally return the given value as-is.\n   */\n  function maybeHandlePromiseRejection(value, onError, onFinally) {\n    if ((0, _is.isThenable)(value)) {\n      // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n      return value.then(res => {\n        onFinally();\n        return res;\n      }, e => {\n        onError(e);\n        onFinally();\n        throw e;\n      });\n    }\n    onFinally();\n    return value;\n  }\n});","lineCount":53,"map":[[6,2,1,0],[6,6,1,0,"_is"],[6,9,1,0],[6,12,1,0,"require"],[6,19,1,0],[6,20,1,0,"_dependencyMap"],[6,34,1,0],[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,0],[18,11,14,9,"handleCallbackErrors"],[18,31,14,29,"handleCallbackErrors"],[18,32,17,2,"fn"],[18,34,17,4],[18,36,18,2,"onError"],[18,43,18,9],[19,2,19,2],[20,2,20,2,"onFinally"],[20,11,20,11],[20,14,20,14,"onFinally"],[20,15,20,14],[20,20,20,20],[20,21,20,21],[20,22,20,22],[20,24,21,2],[21,4,22,2],[21,8,22,6,"maybePromiseResult"],[21,26,22,24],[22,4,23,2],[22,8,23,6],[23,6,24,4,"maybePromiseResult"],[23,24,24,22],[23,27,24,25,"fn"],[23,29,24,27],[23,30,24,28],[23,31,24,29],[24,4,25,2],[24,5,25,3],[24,6,25,4],[24,13,25,11,"e"],[24,14,25,12],[24,16,25,14],[25,6,26,4,"onError"],[25,13,26,11],[25,14,26,12,"e"],[25,15,26,13],[25,16,26,14],[26,6,27,4,"onFinally"],[26,15,27,13],[26,16,27,14],[26,17,27,15],[27,6,28,4],[27,12,28,10,"e"],[27,13,28,11],[28,4,29,2],[29,4,31,2],[29,11,31,9,"maybeHandlePromiseRejection"],[29,38,31,36],[29,39,31,37,"maybePromiseResult"],[29,57,31,55],[29,59,31,57,"onError"],[29,66,31,64],[29,68,31,66,"onFinally"],[29,77,31,75],[29,78,31,76],[30,2,32,0],[32,2,34,0],[33,0,35,0],[34,0,36,0],[35,0,37,0],[36,0,38,0],[37,0,39,0],[38,2,40,0],[38,11,40,9,"maybeHandlePromiseRejection"],[38,38,40,36,"maybeHandlePromiseRejection"],[38,39,41,2,"value"],[38,44,41,7],[38,46,42,2,"onError"],[38,53,42,9],[38,55,43,2,"onFinally"],[38,64,43,11],[38,66,44,2],[39,4,45,2],[39,8,45,6],[39,12,45,6,"isThenable"],[39,26,45,16],[39,28,45,17,"value"],[39,33,45,22],[39,34,45,23],[39,36,45,25],[40,6,46,4],[41,6,47,4],[41,13,47,11,"value"],[41,18,47,16],[41,19,47,17,"then"],[41,23,47,21],[41,24,48,6,"res"],[41,27,48,9],[41,31,48,13],[42,8,49,8,"onFinally"],[42,17,49,17],[42,18,49,18],[42,19,49,19],[43,8,50,8],[43,15,50,15,"res"],[43,18,50,18],[44,6,51,6],[44,7,51,7],[44,9,52,6,"e"],[44,10,52,7],[44,14,52,11],[45,8,53,8,"onError"],[45,15,53,15],[45,16,53,16,"e"],[45,17,53,17],[45,18,53,18],[46,8,54,8,"onFinally"],[46,17,54,17],[46,18,54,18],[46,19,54,19],[47,8,55,8],[47,14,55,14,"e"],[47,15,55,15],[48,6,56,6],[48,7,57,4],[48,8,57,5],[49,4,58,2],[50,4,60,2,"onFinally"],[50,13,60,11],[50,14,60,12],[50,15,60,13],[51,4,61,2],[51,11,61,9,"value"],[51,16,61,14],[52,2,62,0],[53,0,62,1],[53,3]],"functionMap":{"names":["<global>","handleCallbackErrors","<anonymous>","maybeHandlePromiseRejection","value.then$argument_0","value.then$argument_1"],"mappings":"AAA;ACa;cCM,QD;CDY;AGQ;MCQ;ODG;MEC;OFI;CHM"}},"type":"js/module"}]}