{"dependencies":[{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":47,"index":47}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}},{"name":"./is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":48},"end":{"line":2,"column":35,"index":83}}],"key":"C6fLnEQPNIdj7xXbougAJ0zoinA=","exportNames":["*"]}},{"name":"./logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":84},"end":{"line":3,"column":37,"index":121}}],"key":"iVYhB1kviQI8ndYBeJYcuS1MqTQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = exports.SENTRY_BAGGAGE_KEY_PREFIX = exports.MAX_BAGGAGE_STRING_LENGTH = exports.BAGGAGE_HEADER_NAME = void 0;\n  exports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;\n  exports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;\n  exports.parseBaggageHeader = parseBaggageHeader;\n  var _debugBuild = require(_dependencyMap[0], \"./debug-build.js\");\n  var _is = require(_dependencyMap[1], \"./is.js\");\n  var _logger = require(_dependencyMap[2], \"./logger.js\");\n  /**\n   * @deprecated Use a `\"baggage\"` string directly\n   */\n  const BAGGAGE_HEADER_NAME = exports.BAGGAGE_HEADER_NAME = 'baggage';\n  const SENTRY_BAGGAGE_KEY_PREFIX = exports.SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n  const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = exports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n  /**\n   * Max length of a serialized baggage string\n   *\n   * https://www.w3.org/TR/baggage/#limits\n   */\n  const MAX_BAGGAGE_STRING_LENGTH = exports.MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n  /**\n   * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n   * from it.\n   *\n   * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n   * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n   */\n  function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader) {\n    const baggageObject = parseBaggageHeader(baggageHeader);\n    if (!baggageObject) {\n      return undefined;\n    }\n\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n      if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n        const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n        acc[nonPrefixedKey] = value;\n      }\n      return acc;\n    }, {});\n\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n      return dynamicSamplingContext;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n   *\n   * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n   * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n   * `undefined` the function will return `undefined`.\n   * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n   * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n   */\n  function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n      return undefined;\n    }\n\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n  }\n\n  /**\n   * Take a baggage header and parse it into an object.\n   */\n  function parseBaggageHeader(baggageHeader) {\n    if (!baggageHeader || !(0, _is.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n      return undefined;\n    }\n    if (Array.isArray(baggageHeader)) {\n      // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n      return baggageHeader.reduce((acc, curr) => {\n        const currBaggageObject = baggageHeaderToObject(curr);\n        Object.entries(currBaggageObject).forEach(([key, value]) => {\n          acc[key] = value;\n        });\n        return acc;\n      }, {});\n    }\n    return baggageHeaderToObject(baggageHeader);\n  }\n\n  /**\n   * Will parse a baggage header, which is a simple key-value map, into a flat object.\n   *\n   * @param baggageHeader The baggage header to parse.\n   * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n   */\n  function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(',').map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n   *\n   * @param object The object to turn into a baggage header.\n   * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n   * is not spec compliant.\n   */\n  function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n      // An empty baggage header is not spec compliant: We return undefined.\n      return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n      const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n      const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n      if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n        return baggageHeader;\n      } else {\n        return newBaggageHeader;\n      }\n    }, '');\n  }\n});","lineCount":143,"map":[[9,2,1,0],[9,6,1,0,"_debugBuild"],[9,17,1,0],[9,20,1,0,"require"],[9,27,1,0],[9,28,1,0,"_dependencyMap"],[9,42,1,0],[10,2,2,0],[10,6,2,0,"_is"],[10,9,2,0],[10,12,2,0,"require"],[10,19,2,0],[10,20,2,0,"_dependencyMap"],[10,34,2,0],[11,2,3,0],[11,6,3,0,"_logger"],[11,13,3,0],[11,16,3,0,"require"],[11,23,3,0],[11,24,3,0,"_dependencyMap"],[11,38,3,0],[12,2,5,0],[13,0,6,0],[14,0,7,0],[15,2,8,0],[15,8,8,6,"BAGGAGE_HEADER_NAME"],[15,27,8,25],[15,30,8,25,"exports"],[15,37,8,25],[15,38,8,25,"BAGGAGE_HEADER_NAME"],[15,57,8,25],[15,60,8,28],[15,69,8,37],[16,2,10,0],[16,8,10,6,"SENTRY_BAGGAGE_KEY_PREFIX"],[16,33,10,31],[16,36,10,31,"exports"],[16,43,10,31],[16,44,10,31,"SENTRY_BAGGAGE_KEY_PREFIX"],[16,69,10,31],[16,72,10,34],[16,81,10,43],[17,2,12,0],[17,8,12,6,"SENTRY_BAGGAGE_KEY_PREFIX_REGEX"],[17,39,12,37],[17,42,12,37,"exports"],[17,49,12,37],[17,50,12,37,"SENTRY_BAGGAGE_KEY_PREFIX_REGEX"],[17,81,12,37],[17,84,12,40],[17,94,12,50],[19,2,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,2,19,0],[24,8,19,6,"MAX_BAGGAGE_STRING_LENGTH"],[24,33,19,31],[24,36,19,31,"exports"],[24,43,19,31],[24,44,19,31,"MAX_BAGGAGE_STRING_LENGTH"],[24,69,19,31],[24,72,19,34],[24,76,19,38],[26,2,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,2,28,0],[33,11,28,9,"baggageHeaderToDynamicSamplingContext"],[33,48,28,46,"baggageHeaderToDynamicSamplingContext"],[34,2,29,2],[35,2,30,2,"baggageHeader"],[35,15,30,15],[35,17,31,2],[36,4,32,2],[36,10,32,8,"baggageObject"],[36,23,32,21],[36,26,32,24,"parseBaggageHeader"],[36,44,32,42],[36,45,32,43,"baggageHeader"],[36,58,32,56],[36,59,32,57],[37,4,34,2],[37,8,34,6],[37,9,34,7,"baggageObject"],[37,22,34,20],[37,24,34,22],[38,6,35,4],[38,13,35,11,"undefined"],[38,22,35,20],[39,4,36,2],[41,4,38,2],[42,4,39,2],[42,10,39,8,"dynamicSamplingContext"],[42,32,39,30],[42,35,39,33,"Object"],[42,41,39,39],[42,42,39,40,"entries"],[42,49,39,47],[42,50,39,48,"baggageObject"],[42,63,39,61],[42,64,39,62],[42,65,39,63,"reduce"],[42,71,39,69],[42,72,39,70],[42,73,39,71,"acc"],[42,76,39,74],[42,78,39,76],[42,79,39,77,"key"],[42,82,39,80],[42,84,39,82,"value"],[42,89,39,87],[42,90,39,88],[42,95,39,93],[43,6,40,4],[43,10,40,8,"key"],[43,13,40,11],[43,14,40,12,"match"],[43,19,40,17],[43,20,40,18,"SENTRY_BAGGAGE_KEY_PREFIX_REGEX"],[43,51,40,49],[43,52,40,50],[43,54,40,52],[44,8,41,6],[44,14,41,12,"nonPrefixedKey"],[44,28,41,26],[44,31,41,29,"key"],[44,34,41,32],[44,35,41,33,"slice"],[44,40,41,38],[44,41,41,39,"SENTRY_BAGGAGE_KEY_PREFIX"],[44,66,41,64],[44,67,41,65,"length"],[44,73,41,71],[44,74,41,72],[45,8,42,6,"acc"],[45,11,42,9],[45,12,42,10,"nonPrefixedKey"],[45,26,42,24],[45,27,42,25],[45,30,42,28,"value"],[45,35,42,33],[46,6,43,4],[47,6,44,4],[47,13,44,11,"acc"],[47,16,44,14],[48,4,45,2],[48,5,45,3],[48,7,45,5],[48,8,45,6],[48,9,45,7],[48,10,45,8],[50,4,47,2],[51,4,48,2],[52,4,49,2],[52,8,49,6,"Object"],[52,14,49,12],[52,15,49,13,"keys"],[52,19,49,17],[52,20,49,18,"dynamicSamplingContext"],[52,42,49,40],[52,43,49,41],[52,44,49,42,"length"],[52,50,49,48],[52,53,49,51],[52,54,49,52],[52,56,49,54],[53,6,50,4],[53,13,50,11,"dynamicSamplingContext"],[53,35,50,33],[54,4,51,2],[54,5,51,3],[54,11,51,9],[55,6,52,4],[55,13,52,11,"undefined"],[55,22,52,20],[56,4,53,2],[57,2,54,0],[59,2,56,0],[60,0,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,0,61,0],[65,0,62,0],[66,0,63,0],[67,0,64,0],[68,2,65,0],[68,11,65,9,"dynamicSamplingContextToSentryBaggageHeader"],[68,54,65,52,"dynamicSamplingContextToSentryBaggageHeader"],[69,2,66,2],[70,2,67,2,"dynamicSamplingContext"],[70,24,67,24],[70,26,68,2],[71,4,69,2],[71,8,69,6],[71,9,69,7,"dynamicSamplingContext"],[71,31,69,29],[71,33,69,31],[72,6,70,4],[72,13,70,11,"undefined"],[72,22,70,20],[73,4,71,2],[75,4,73,2],[76,4,74,2],[76,10,74,8,"sentryPrefixedDSC"],[76,27,74,25],[76,30,74,28,"Object"],[76,36,74,34],[76,37,74,35,"entries"],[76,44,74,42],[76,45,74,43,"dynamicSamplingContext"],[76,67,74,65],[76,68,74,66],[76,69,74,67,"reduce"],[76,75,74,73],[76,76,75,4],[76,77,75,5,"acc"],[76,80,75,8],[76,82,75,10],[76,83,75,11,"dscKey"],[76,89,75,17],[76,91,75,19,"dscValue"],[76,99,75,27],[76,100,75,28],[76,105,75,33],[77,6,76,6],[77,10,76,10,"dscValue"],[77,18,76,18],[77,20,76,20],[78,8,77,8,"acc"],[78,11,77,11],[78,12,77,12],[78,15,77,15,"SENTRY_BAGGAGE_KEY_PREFIX"],[78,40,77,40],[78,43,77,43,"dscKey"],[78,49,77,49],[78,51,77,51],[78,52,77,52],[78,55,77,55,"dscValue"],[78,63,77,63],[79,6,78,6],[80,6,79,6],[80,13,79,13,"acc"],[80,16,79,16],[81,4,80,4],[81,5,80,5],[81,7,81,4],[81,8,81,5],[81,9,82,2],[81,10,82,3],[82,4,84,2],[82,11,84,9,"objectToBaggageHeader"],[82,32,84,30],[82,33,84,31,"sentryPrefixedDSC"],[82,50,84,48],[82,51,84,49],[83,2,85,0],[85,2,87,0],[86,0,88,0],[87,0,89,0],[88,2,90,0],[88,11,90,9,"parseBaggageHeader"],[88,29,90,27,"parseBaggageHeader"],[88,30,91,2,"baggageHeader"],[88,43,91,15],[88,45,92,2],[89,4,93,2],[89,8,93,6],[89,9,93,7,"baggageHeader"],[89,22,93,20],[89,26,93,25],[89,27,93,26],[89,31,93,26,"isString"],[89,43,93,34],[89,45,93,35,"baggageHeader"],[89,58,93,48],[89,59,93,49],[89,63,93,53],[89,64,93,54,"Array"],[89,69,93,59],[89,70,93,60,"isArray"],[89,77,93,67],[89,78,93,68,"baggageHeader"],[89,91,93,81],[89,92,93,83],[89,94,93,85],[90,6,94,4],[90,13,94,11,"undefined"],[90,22,94,20],[91,4,95,2],[92,4,97,2],[92,8,97,6,"Array"],[92,13,97,11],[92,14,97,12,"isArray"],[92,21,97,19],[92,22,97,20,"baggageHeader"],[92,35,97,33],[92,36,97,34],[92,38,97,36],[93,6,98,4],[94,6,99,4],[94,13,99,11,"baggageHeader"],[94,26,99,24],[94,27,99,25,"reduce"],[94,33,99,31],[94,34,99,32],[94,35,99,33,"acc"],[94,38,99,36],[94,40,99,38,"curr"],[94,44,99,42],[94,49,99,47],[95,8,100,6],[95,14,100,12,"currBaggageObject"],[95,31,100,29],[95,34,100,32,"baggageHeaderToObject"],[95,55,100,53],[95,56,100,54,"curr"],[95,60,100,58],[95,61,100,59],[96,8,101,6,"Object"],[96,14,101,12],[96,15,101,13,"entries"],[96,22,101,20],[96,23,101,21,"currBaggageObject"],[96,40,101,38],[96,41,101,39],[96,42,101,40,"forEach"],[96,49,101,47],[96,50,101,48],[96,51,101,49],[96,52,101,50,"key"],[96,55,101,53],[96,57,101,55,"value"],[96,62,101,60],[96,63,101,61],[96,68,101,66],[97,10,102,8,"acc"],[97,13,102,11],[97,14,102,12,"key"],[97,17,102,15],[97,18,102,16],[97,21,102,19,"value"],[97,26,102,24],[98,8,103,6],[98,9,103,7],[98,10,103,8],[99,8,104,6],[99,15,104,13,"acc"],[99,18,104,16],[100,6,105,4],[100,7,105,5],[100,9,105,7],[100,10,105,8],[100,11,105,9],[100,12,105,10],[101,4,106,2],[102,4,108,2],[102,11,108,9,"baggageHeaderToObject"],[102,32,108,30],[102,33,108,31,"baggageHeader"],[102,46,108,44],[102,47,108,45],[103,2,109,0],[105,2,111,0],[106,0,112,0],[107,0,113,0],[108,0,114,0],[109,0,115,0],[110,0,116,0],[111,2,117,0],[111,11,117,9,"baggageHeaderToObject"],[111,32,117,30,"baggageHeaderToObject"],[111,33,117,31,"baggageHeader"],[111,46,117,44],[111,48,117,46],[112,4,118,2],[112,11,118,9,"baggageHeader"],[112,24,118,22],[112,25,119,5,"split"],[112,30,119,10],[112,31,119,11],[112,34,119,14],[112,35,119,15],[112,36,120,5,"map"],[112,39,120,8],[112,40,120,9,"baggageEntry"],[112,52,120,21],[112,56,120,25,"baggageEntry"],[112,68,120,37],[112,69,120,38,"split"],[112,74,120,43],[112,75,120,44],[112,78,120,47],[112,79,120,48],[112,80,120,49,"map"],[112,83,120,52],[112,84,120,53,"keyOrValue"],[112,94,120,63],[112,98,120,67,"decodeURIComponent"],[112,116,120,85],[112,117,120,86,"keyOrValue"],[112,127,120,96],[112,128,120,97,"trim"],[112,132,120,101],[112,133,120,102],[112,134,120,103],[112,135,120,104],[112,136,120,105],[112,137,120,106],[112,138,121,5,"reduce"],[112,144,121,11],[112,145,121,12],[112,146,121,13,"acc"],[112,149,121,16],[112,151,121,18],[112,152,121,19,"key"],[112,155,121,22],[112,157,121,24,"value"],[112,162,121,29],[112,163,121,30],[112,168,121,35],[113,6,122,6],[113,10,122,10,"key"],[113,13,122,13],[113,17,122,17,"value"],[113,22,122,22],[113,24,122,24],[114,8,123,8,"acc"],[114,11,123,11],[114,12,123,12,"key"],[114,15,123,15],[114,16,123,16],[114,19,123,19,"value"],[114,24,123,24],[115,6,124,6],[116,6,125,6],[116,13,125,13,"acc"],[116,16,125,16],[117,4,126,4],[117,5,126,5],[117,7,126,7],[117,8,126,8],[117,9,126,9],[117,10,126,10],[118,2,127,0],[120,2,129,0],[121,0,130,0],[122,0,131,0],[123,0,132,0],[124,0,133,0],[125,0,134,0],[126,0,135,0],[127,2,136,0],[127,11,136,9,"objectToBaggageHeader"],[127,32,136,30,"objectToBaggageHeader"],[127,33,136,31,"object"],[127,39,136,37],[127,41,136,39],[128,4,137,2],[128,8,137,6,"Object"],[128,14,137,12],[128,15,137,13,"keys"],[128,19,137,17],[128,20,137,18,"object"],[128,26,137,24],[128,27,137,25],[128,28,137,26,"length"],[128,34,137,32],[128,39,137,37],[128,40,137,38],[128,42,137,40],[129,6,138,4],[130,6,139,4],[130,13,139,11,"undefined"],[130,22,139,20],[131,4,140,2],[132,4,142,2],[132,11,142,9,"Object"],[132,17,142,15],[132,18,142,16,"entries"],[132,25,142,23],[132,26,142,24,"object"],[132,32,142,30],[132,33,142,31],[132,34,142,32,"reduce"],[132,40,142,38],[132,41,142,39],[132,42,142,40,"baggageHeader"],[132,55,142,53],[132,57,142,55],[132,58,142,56,"objectKey"],[132,67,142,65],[132,69,142,67,"objectValue"],[132,80,142,78],[132,81,142,79],[132,83,142,81,"currentIndex"],[132,95,142,93],[132,100,142,98],[133,6,143,4],[133,12,143,10,"baggageEntry"],[133,24,143,22],[133,27,143,25],[133,30,143,28,"encodeURIComponent"],[133,48,143,46],[133,49,143,47,"objectKey"],[133,58,143,56],[133,59,143,57],[133,63,143,61,"encodeURIComponent"],[133,81,143,79],[133,82,143,80,"objectValue"],[133,93,143,91],[133,94,143,92],[133,96,143,94],[134,6,144,4],[134,12,144,10,"newBaggageHeader"],[134,28,144,26],[134,31,144,29,"currentIndex"],[134,43,144,41],[134,48,144,46],[134,49,144,47],[134,52,144,50,"baggageEntry"],[134,64,144,62],[134,67,144,65],[134,70,144,68,"baggageHeader"],[134,83,144,81],[134,87,144,85,"baggageEntry"],[134,99,144,97],[134,101,144,99],[135,6,145,4],[135,10,145,8,"newBaggageHeader"],[135,26,145,24],[135,27,145,25,"length"],[135,33,145,31],[135,36,145,34,"MAX_BAGGAGE_STRING_LENGTH"],[135,61,145,59],[135,63,145,61],[136,8,146,6,"DEBUG_BUILD"],[136,31,146,17],[136,35,147,8,"logger"],[136,49,147,14],[136,50,147,15,"warn"],[136,54,147,19],[136,55,148,10],[136,74,148,29,"objectKey"],[136,83,148,38],[136,97,148,52,"objectValue"],[136,108,148,63],[136,166,149,8],[136,167,149,9],[137,8,150,6],[137,15,150,13,"baggageHeader"],[137,28,150,26],[138,6,151,4],[138,7,151,5],[138,13,151,11],[139,8,152,6],[139,15,152,13,"newBaggageHeader"],[139,31,152,29],[140,6,153,4],[141,4,154,2],[141,5,154,3],[141,7,154,5],[141,9,154,7],[141,10,154,8],[142,2,155,0],[143,0,155,1],[143,3]],"functionMap":{"names":["<global>","baggageHeaderToDynamicSamplingContext","Object.entries.reduce$argument_0","dynamicSamplingContextToSentryBaggageHeader","parseBaggageHeader","baggageHeader.reduce$argument_0","Object.entries.forEach$argument_0","baggageHeaderToObject","baggageHeader.split.map$argument_0","baggageEntry.split.map$argument_0","baggageHeader.split.map.reduce$argument_0","objectToBaggageHeader"],"mappings":"AAA;AC2B;sECW;GDM;CDS;AGW;IDU;KCK;CHK;AIK;gCCS;gDCE;ODE;KDE;CJI;AOQ;SCG,4CC,mDD,CD;YGC;KHK;CPC;AWS;uCTM;GSY;CXC"}},"type":"js/module"}]}