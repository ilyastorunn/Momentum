{"dependencies":[{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":50,"index":99}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseSampleRate = parseSampleRate;\n  var _debugBuild = require(_dependencyMap[0], \"../debug-build.js\");\n  var _logger = require(_dependencyMap[1], \"../utils-hoist/logger.js\");\n  /**\n   * Parse a sample rate from a given value.\n   * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n   * If a string is passed, we try to convert it to a number.\n   *\n   * Any invalid sample rate will return `undefined`.\n   */\n  function parseSampleRate(sampleRate) {\n    if (typeof sampleRate === 'boolean') {\n      return Number(sampleRate);\n    }\n    const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n    if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(sampleRate)} of type ${JSON.stringify(typeof sampleRate)}.`);\n      return undefined;\n    }\n    return rate;\n  }\n});","lineCount":26,"map":[[6,2,1,0],[6,6,1,0,"_debugBuild"],[6,17,1,0],[6,20,1,0,"require"],[6,27,1,0],[6,28,1,0,"_dependencyMap"],[6,42,1,0],[7,2,2,0],[7,6,2,0,"_logger"],[7,13,2,0],[7,16,2,0,"require"],[7,23,2,0],[7,24,2,0,"_dependencyMap"],[7,38,2,0],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,2,11,0],[15,11,11,9,"parseSampleRate"],[15,26,11,24,"parseSampleRate"],[15,27,11,25,"sampleRate"],[15,37,11,35],[15,39,11,37],[16,4,12,2],[16,8,12,6],[16,15,12,13,"sampleRate"],[16,25,12,23],[16,30,12,28],[16,39,12,37],[16,41,12,39],[17,6,13,4],[17,13,13,11,"Number"],[17,19,13,17],[17,20,13,18,"sampleRate"],[17,30,13,28],[17,31,13,29],[18,4,14,2],[19,4,16,2],[19,10,16,8,"rate"],[19,14,16,12],[19,17,16,15],[19,24,16,22,"sampleRate"],[19,34,16,32],[19,39,16,37],[19,47,16,45],[19,50,16,48,"parseFloat"],[19,60,16,58],[19,61,16,59,"sampleRate"],[19,71,16,69],[19,72,16,70],[19,75,16,73,"sampleRate"],[19,85,16,83],[20,4,17,2],[20,8,17,6],[20,15,17,13,"rate"],[20,19,17,17],[20,24,17,22],[20,32,17,30],[20,36,17,34,"isNaN"],[20,41,17,39],[20,42,17,40,"rate"],[20,46,17,44],[20,47,17,45],[20,51,17,49,"rate"],[20,55,17,53],[20,58,17,56],[20,59,17,57],[20,63,17,61,"rate"],[20,67,17,65],[20,70,17,68],[20,71,17,69],[20,73,17,71],[21,6,18,4,"DEBUG_BUILD"],[21,29,18,15],[21,33,19,6,"logger"],[21,47,19,12],[21,48,19,13,"warn"],[21,52,19,17],[21,53,20,8],[21,159,20,114,"JSON"],[21,163,20,118],[21,164,20,119,"stringify"],[21,173,20,128],[21,174,21,10,"sampleRate"],[21,184,22,8],[21,185,22,9],[21,197,22,21,"JSON"],[21,201,22,25],[21,202,22,26,"stringify"],[21,211,22,35],[21,212,22,36],[21,219,22,43,"sampleRate"],[21,229,22,53],[21,230,22,54],[21,233,23,6],[21,234,23,7],[22,6,24,4],[22,13,24,11,"undefined"],[22,22,24,20],[23,4,25,2],[24,4,27,2],[24,11,27,9,"rate"],[24,15,27,13],[25,2,28,0],[26,0,28,1],[26,3]],"functionMap":{"names":["<global>","parseSampleRate"],"mappings":"AAA;ACU;CDiB"}},"type":"js/module"}]}