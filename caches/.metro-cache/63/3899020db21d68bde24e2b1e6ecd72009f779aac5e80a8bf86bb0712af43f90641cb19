{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createSyntheticError = createSyntheticError;\n  exports.getFramesToPop = getFramesToPop;\n  exports.isErrorLike = isErrorLike;\n  // Sentry Stack Parser is skipping lines not frames\n  // https://github.com/getsentry/sentry-javascript/blob/739d904342aaf9327312f409952f14ceff4ae1ab/packages/utils/src/stacktrace.ts#L23\n  // 1 for first line with the Error message\n  const SENTRY_STACK_PARSER_OFFSET = 1;\n  const REMOVE_ERROR_CREATION_FRAMES = 2 + SENTRY_STACK_PARSER_OFFSET;\n  /**\n   * Creates synthetic trace. By default pops 2 frames - `createSyntheticError` and the caller\n   */\n  function createSyntheticError(framesToPop = 0) {\n    const error = new Error();\n    error.framesToPop = framesToPop + REMOVE_ERROR_CREATION_FRAMES; // Skip createSyntheticError's own stack frame.\n    return error;\n  }\n  /**\n   * Returns the number of frames to pop from the stack trace.\n   * @param error ExtendedError\n   */\n  function getFramesToPop(error) {\n    return error.framesToPop !== undefined ? error.framesToPop : 0;\n  }\n  /**\n   * Check if `potentialError` is an object with string stack property.\n   */\n  function isErrorLike(potentialError) {\n    return potentialError !== null && typeof potentialError === 'object' && 'stack' in potentialError && typeof potentialError.stack === 'string';\n  }\n});","lineCount":34,"map":[[8,2,1,0],[9,2,2,0],[10,2,3,0],[11,2,4,0],[11,8,4,6,"SENTRY_STACK_PARSER_OFFSET"],[11,34,4,32],[11,37,4,35],[11,38,4,36],[12,2,5,0],[12,8,5,6,"REMOVE_ERROR_CREATION_FRAMES"],[12,36,5,34],[12,39,5,37],[12,40,5,38],[12,43,5,41,"SENTRY_STACK_PARSER_OFFSET"],[12,69,5,67],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,2,9,7],[16,11,9,16,"createSyntheticError"],[16,31,9,36,"createSyntheticError"],[16,32,9,37,"framesToPop"],[16,43,9,48],[16,46,9,51],[16,47,9,52],[16,49,9,54],[17,4,10,4],[17,10,10,10,"error"],[17,15,10,15],[17,18,10,18],[17,22,10,22,"Error"],[17,27,10,27],[17,28,10,28],[17,29,10,29],[18,4,11,4,"error"],[18,9,11,9],[18,10,11,10,"framesToPop"],[18,21,11,21],[18,24,11,24,"framesToPop"],[18,35,11,35],[18,38,11,38,"REMOVE_ERROR_CREATION_FRAMES"],[18,66,11,66],[18,67,11,67],[18,68,11,68],[19,4,12,4],[19,11,12,11,"error"],[19,16,12,16],[20,2,13,0],[21,2,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,2,18,7],[25,11,18,16,"getFramesToPop"],[25,25,18,30,"getFramesToPop"],[25,26,18,31,"error"],[25,31,18,36],[25,33,18,38],[26,4,19,4],[26,11,19,11,"error"],[26,16,19,16],[26,17,19,17,"framesToPop"],[26,28,19,28],[26,33,19,33,"undefined"],[26,42,19,42],[26,45,19,45,"error"],[26,50,19,50],[26,51,19,51,"framesToPop"],[26,62,19,62],[26,65,19,65],[26,66,19,66],[27,2,20,0],[28,2,21,0],[29,0,22,0],[30,0,23,0],[31,2,24,7],[31,11,24,16,"isErrorLike"],[31,22,24,27,"isErrorLike"],[31,23,24,28,"potentialError"],[31,37,24,42],[31,39,24,44],[32,4,25,4],[32,11,25,12,"potentialError"],[32,25,25,26],[32,30,25,31],[32,34,25,35],[32,38,26,8],[32,45,26,15,"potentialError"],[32,59,26,29],[32,64,26,34],[32,72,26,42],[32,76,27,8],[32,83,27,15],[32,87,27,19,"potentialError"],[32,101,27,33],[32,105,28,8],[32,112,28,15,"potentialError"],[32,126,28,29],[32,127,28,30,"stack"],[32,132,28,35],[32,137,28,40],[32,145,28,48],[33,2,29,0],[34,0,29,1],[34,3]],"functionMap":{"names":["<global>","createSyntheticError","getFramesToPop","isErrorLike"],"mappings":"AAA;OCQ;CDI;OEK;CFE;OGI;CHK"}},"type":"js/module"}]}