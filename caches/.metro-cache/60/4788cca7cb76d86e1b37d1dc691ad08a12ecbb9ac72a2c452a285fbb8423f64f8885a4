{"dependencies":[{"name":"../lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":681},"end":{"line":10,"column":51,"index":732}}],"key":"waQwSI03ELOcvO96++KD0MVyAp4=","exportNames":["*"]}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":733},"end":{"line":11,"column":47,"index":780}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"]}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":781},"end":{"line":12,"column":54,"index":835}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"]}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":836},"end":{"line":13,"column":46,"index":882}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _constants = require(_dependencyMap[0], \"../lib/constants\");\n  var _errors = require(_dependencyMap[1], \"../lib/errors\");\n  var _fetch = require(_dependencyMap[2], \"../lib/fetch\");\n  var _helpers = require(_dependencyMap[3], \"../lib/helpers\");\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  class StorageBucketApi {\n    constructor(url, headers = {}, fetch, opts) {\n      const baseUrl = new URL(url);\n      // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n      // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n      if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\n        const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\n        if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n          baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\n        }\n      }\n      this.url = baseUrl.href;\n      this.headers = Object.assign(Object.assign({}, _constants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/bucket`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/bucket/${id}`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n     *   - default bucket type is `STANDARD`\n     */\n    createBucket(id, options = {\n      public: false\n    }) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/bucket`, {\n            id,\n            name: id,\n            type: options.type,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.put)(this.fetch, `${this.url}/bucket/${id}`, {\n            id,\n            name: id,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.remove)(this.fetch, `${this.url}/bucket/${id}`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n  exports.default = StorageBucketApi;\n});","lineCount":241,"map":[[6,2,10,0],[6,6,10,0,"_constants"],[6,16,10,0],[6,19,10,0,"require"],[6,26,10,0],[6,27,10,0,"_dependencyMap"],[6,41,10,0],[7,2,11,0],[7,6,11,0,"_errors"],[7,13,11,0],[7,16,11,0,"require"],[7,23,11,0],[7,24,11,0,"_dependencyMap"],[7,38,11,0],[8,2,12,0],[8,6,12,0,"_fetch"],[8,12,12,0],[8,15,12,0,"require"],[8,22,12,0],[8,23,12,0,"_dependencyMap"],[8,37,12,0],[9,2,13,0],[9,6,13,0,"_helpers"],[9,14,13,0],[9,17,13,0,"require"],[9,24,13,0],[9,25,13,0,"_dependencyMap"],[9,39,13,0],[10,2,1,0],[10,6,1,4,"__awaiter"],[10,15,1,13],[10,18,1,17],[10,22,1,21],[10,26,1,25],[10,30,1,29],[10,31,1,30,"__awaiter"],[10,40,1,39],[10,44,1,44],[10,54,1,54,"thisArg"],[10,61,1,61],[10,63,1,63,"_arguments"],[10,73,1,73],[10,75,1,75,"P"],[10,76,1,76],[10,78,1,78,"generator"],[10,87,1,87],[10,89,1,89],[11,4,2,4],[11,13,2,13,"adopt"],[11,18,2,18,"adopt"],[11,19,2,19,"value"],[11,24,2,24],[11,26,2,26],[12,6,2,28],[12,13,2,35,"value"],[12,18,2,40],[12,30,2,52,"P"],[12,31,2,53],[12,34,2,56,"value"],[12,39,2,61],[12,42,2,64],[12,46,2,68,"P"],[12,47,2,69],[12,48,2,70],[12,58,2,80,"resolve"],[12,65,2,87],[12,67,2,89],[13,8,2,91,"resolve"],[13,15,2,98],[13,16,2,99,"value"],[13,21,2,104],[13,22,2,105],[14,6,2,107],[14,7,2,108],[14,8,2,109],[15,4,2,111],[16,4,3,4],[16,11,3,11],[16,16,3,16,"P"],[16,17,3,17],[16,22,3,22,"P"],[16,23,3,23],[16,26,3,26,"Promise"],[16,33,3,33],[16,34,3,34],[16,36,3,36],[16,46,3,46,"resolve"],[16,53,3,53],[16,55,3,55,"reject"],[16,61,3,61],[16,63,3,63],[17,6,4,8],[17,15,4,17,"fulfilled"],[17,24,4,26,"fulfilled"],[17,25,4,27,"value"],[17,30,4,32],[17,32,4,34],[18,8,4,36],[18,12,4,40],[19,10,4,42,"step"],[19,14,4,46],[19,15,4,47,"generator"],[19,24,4,56],[19,25,4,57,"next"],[19,29,4,61],[19,30,4,62,"value"],[19,35,4,67],[19,36,4,68],[19,37,4,69],[20,8,4,71],[20,9,4,72],[20,10,4,73],[20,17,4,80,"e"],[20,18,4,81],[20,20,4,83],[21,10,4,85,"reject"],[21,16,4,91],[21,17,4,92,"e"],[21,18,4,93],[21,19,4,94],[22,8,4,96],[23,6,4,98],[24,6,5,8],[24,15,5,17,"rejected"],[24,23,5,25,"rejected"],[24,24,5,26,"value"],[24,29,5,31],[24,31,5,33],[25,8,5,35],[25,12,5,39],[26,10,5,41,"step"],[26,14,5,45],[26,15,5,46,"generator"],[26,24,5,55],[26,25,5,56],[26,32,5,63],[26,33,5,64],[26,34,5,65,"value"],[26,39,5,70],[26,40,5,71],[26,41,5,72],[27,8,5,74],[27,9,5,75],[27,10,5,76],[27,17,5,83,"e"],[27,18,5,84],[27,20,5,86],[28,10,5,88,"reject"],[28,16,5,94],[28,17,5,95,"e"],[28,18,5,96],[28,19,5,97],[29,8,5,99],[30,6,5,101],[31,6,6,8],[31,15,6,17,"step"],[31,19,6,21,"step"],[31,20,6,22,"result"],[31,26,6,28],[31,28,6,30],[32,8,6,32,"result"],[32,14,6,38],[32,15,6,39,"done"],[32,19,6,43],[32,22,6,46,"resolve"],[32,29,6,53],[32,30,6,54,"result"],[32,36,6,60],[32,37,6,61,"value"],[32,42,6,66],[32,43,6,67],[32,46,6,70,"adopt"],[32,51,6,75],[32,52,6,76,"result"],[32,58,6,82],[32,59,6,83,"value"],[32,64,6,88],[32,65,6,89],[32,66,6,90,"then"],[32,70,6,94],[32,71,6,95,"fulfilled"],[32,80,6,104],[32,82,6,106,"rejected"],[32,90,6,114],[32,91,6,115],[33,6,6,117],[34,6,7,8,"step"],[34,10,7,12],[34,11,7,13],[34,12,7,14,"generator"],[34,21,7,23],[34,24,7,26,"generator"],[34,33,7,35],[34,34,7,36,"apply"],[34,39,7,41],[34,40,7,42,"thisArg"],[34,47,7,49],[34,49,7,51,"_arguments"],[34,59,7,61],[34,63,7,65],[34,65,7,67],[34,66,7,68],[34,68,7,70,"next"],[34,72,7,74],[34,73,7,75],[34,74,7,76],[34,75,7,77],[35,4,8,4],[35,5,8,5],[35,6,8,6],[36,2,9,0],[36,3,9,1],[37,2,14,15],[37,8,14,21,"StorageBucketApi"],[37,24,14,37],[37,25,14,38],[38,4,15,4,"constructor"],[38,15,15,15,"constructor"],[38,16,15,16,"url"],[38,19,15,19],[38,21,15,21,"headers"],[38,28,15,28],[38,31,15,31],[38,32,15,32],[38,33,15,33],[38,35,15,35,"fetch"],[38,40,15,40],[38,42,15,42,"opts"],[38,46,15,46],[38,48,15,48],[39,6,16,8],[39,12,16,14,"baseUrl"],[39,19,16,21],[39,22,16,24],[39,26,16,28,"URL"],[39,29,16,31],[39,30,16,32,"url"],[39,33,16,35],[39,34,16,36],[40,6,17,8],[41,6,18,8],[42,6,19,8],[42,10,19,12,"opts"],[42,14,19,16],[42,19,19,21],[42,23,19,25],[42,27,19,29,"opts"],[42,31,19,33],[42,36,19,38],[42,41,19,43],[42,42,19,44],[42,45,19,47],[42,50,19,52],[42,51,19,53],[42,54,19,56,"opts"],[42,58,19,60],[42,59,19,61,"useNewHostname"],[42,73,19,75],[42,75,19,77],[43,8,20,12],[43,14,20,18,"isSupabaseHost"],[43,28,20,32],[43,31,20,35],[43,55,20,59],[43,56,20,60,"test"],[43,60,20,64],[43,61,20,65,"baseUrl"],[43,68,20,72],[43,69,20,73,"hostname"],[43,77,20,81],[43,78,20,82],[44,8,21,12],[44,12,21,16,"isSupabaseHost"],[44,26,21,30],[44,30,21,34],[44,31,21,35,"baseUrl"],[44,38,21,42],[44,39,21,43,"hostname"],[44,47,21,51],[44,48,21,52,"includes"],[44,56,21,60],[44,57,21,61],[44,76,21,80],[44,77,21,81],[44,79,21,83],[45,10,22,16,"baseUrl"],[45,17,22,23],[45,18,22,24,"hostname"],[45,26,22,32],[45,29,22,35,"baseUrl"],[45,36,22,42],[45,37,22,43,"hostname"],[45,45,22,51],[45,46,22,52,"replace"],[45,53,22,59],[45,54,22,60],[45,65,22,71],[45,67,22,73],[45,86,22,92],[45,87,22,93],[46,8,23,12],[47,6,24,8],[48,6,25,8],[48,10,25,12],[48,11,25,13,"url"],[48,14,25,16],[48,17,25,19,"baseUrl"],[48,24,25,26],[48,25,25,27,"href"],[48,29,25,31],[49,6,26,8],[49,10,26,12],[49,11,26,13,"headers"],[49,18,26,20],[49,21,26,23,"Object"],[49,27,26,29],[49,28,26,30,"assign"],[49,34,26,36],[49,35,26,37,"Object"],[49,41,26,43],[49,42,26,44,"assign"],[49,48,26,50],[49,49,26,51],[49,50,26,52],[49,51,26,53],[49,53,26,55,"DEFAULT_HEADERS"],[49,79,26,70],[49,80,26,71],[49,82,26,73,"headers"],[49,89,26,80],[49,90,26,81],[50,6,27,8],[50,10,27,12],[50,11,27,13,"fetch"],[50,16,27,18],[50,19,27,21],[50,23,27,21,"resolveFetch"],[50,44,27,33],[50,46,27,34,"fetch"],[50,51,27,39],[50,52,27,40],[51,4,28,4],[52,4,29,4],[53,0,30,0],[54,0,31,0],[55,4,32,4,"listBuckets"],[55,15,32,15,"listBuckets"],[55,16,32,15],[55,18,32,18],[56,6,33,8],[56,13,33,15,"__awaiter"],[56,22,33,24],[56,23,33,25],[56,27,33,29],[56,29,33,31],[56,34,33,36],[56,35,33,37],[56,37,33,39],[56,42,33,44],[56,43,33,45],[56,45,33,47],[56,58,33,60],[57,8,34,12],[57,12,34,16],[58,10,35,16],[58,16,35,22,"data"],[58,20,35,26],[58,23,35,29],[58,29,35,35],[58,33,35,35,"get"],[58,43,35,38],[58,45,35,39],[58,49,35,43],[58,50,35,44,"fetch"],[58,55,35,49],[58,57,35,51],[58,60,35,54],[58,64,35,58],[58,65,35,59,"url"],[58,68,35,62],[58,77,35,71],[58,79,35,73],[59,12,35,75,"headers"],[59,19,35,82],[59,21,35,84],[59,25,35,88],[59,26,35,89,"headers"],[60,10,35,97],[60,11,35,98],[60,12,35,99],[61,10,36,16],[61,17,36,23],[62,12,36,25,"data"],[62,16,36,29],[63,12,36,31,"error"],[63,17,36,36],[63,19,36,38],[64,10,36,43],[64,11,36,44],[65,8,37,12],[65,9,37,13],[65,10,38,12],[65,17,38,19,"error"],[65,22,38,24],[65,24,38,26],[66,10,39,16],[66,14,39,20],[66,18,39,20,"isStorageError"],[66,40,39,34],[66,42,39,35,"error"],[66,47,39,40],[66,48,39,41],[66,50,39,43],[67,12,40,20],[67,19,40,27],[68,14,40,29,"data"],[68,18,40,33],[68,20,40,35],[68,24,40,39],[69,14,40,41,"error"],[70,12,40,47],[70,13,40,48],[71,10,41,16],[72,10,42,16],[72,16,42,22,"error"],[72,21,42,27],[73,8,43,12],[74,6,44,8],[74,7,44,9],[74,8,44,10],[75,4,45,4],[76,4,46,4],[77,0,47,0],[78,0,48,0],[79,0,49,0],[80,0,50,0],[81,4,51,4,"getBucket"],[81,13,51,13,"getBucket"],[81,14,51,14,"id"],[81,16,51,16],[81,18,51,18],[82,6,52,8],[82,13,52,15,"__awaiter"],[82,22,52,24],[82,23,52,25],[82,27,52,29],[82,29,52,31],[82,34,52,36],[82,35,52,37],[82,37,52,39],[82,42,52,44],[82,43,52,45],[82,45,52,47],[82,58,52,60],[83,8,53,12],[83,12,53,16],[84,10,54,16],[84,16,54,22,"data"],[84,20,54,26],[84,23,54,29],[84,29,54,35],[84,33,54,35,"get"],[84,43,54,38],[84,45,54,39],[84,49,54,43],[84,50,54,44,"fetch"],[84,55,54,49],[84,57,54,51],[84,60,54,54],[84,64,54,58],[84,65,54,59,"url"],[84,68,54,62],[84,79,54,73,"id"],[84,81,54,75],[84,83,54,77],[84,85,54,79],[85,12,54,81,"headers"],[85,19,54,88],[85,21,54,90],[85,25,54,94],[85,26,54,95,"headers"],[86,10,54,103],[86,11,54,104],[86,12,54,105],[87,10,55,16],[87,17,55,23],[88,12,55,25,"data"],[88,16,55,29],[89,12,55,31,"error"],[89,17,55,36],[89,19,55,38],[90,10,55,43],[90,11,55,44],[91,8,56,12],[91,9,56,13],[91,10,57,12],[91,17,57,19,"error"],[91,22,57,24],[91,24,57,26],[92,10,58,16],[92,14,58,20],[92,18,58,20,"isStorageError"],[92,40,58,34],[92,42,58,35,"error"],[92,47,58,40],[92,48,58,41],[92,50,58,43],[93,12,59,20],[93,19,59,27],[94,14,59,29,"data"],[94,18,59,33],[94,20,59,35],[94,24,59,39],[95,14,59,41,"error"],[96,12,59,47],[96,13,59,48],[97,10,60,16],[98,10,61,16],[98,16,61,22,"error"],[98,21,61,27],[99,8,62,12],[100,6,63,8],[100,7,63,9],[100,8,63,10],[101,4,64,4],[102,4,65,4],[103,0,66,0],[104,0,67,0],[105,0,68,0],[106,0,69,0],[107,0,70,0],[108,0,71,0],[109,0,72,0],[110,0,73,0],[111,0,74,0],[112,0,75,0],[113,0,76,0],[114,0,77,0],[115,0,78,0],[116,0,79,0],[117,4,80,4,"createBucket"],[117,16,80,16,"createBucket"],[117,17,80,17,"id"],[117,19,80,19],[117,21,80,21,"options"],[117,28,80,28],[117,31,80,31],[118,6,81,8,"public"],[118,12,81,14],[118,14,81,16],[119,4,82,4],[119,5,82,5],[119,7,82,7],[120,6,83,8],[120,13,83,15,"__awaiter"],[120,22,83,24],[120,23,83,25],[120,27,83,29],[120,29,83,31],[120,34,83,36],[120,35,83,37],[120,37,83,39],[120,42,83,44],[120,43,83,45],[120,45,83,47],[120,58,83,60],[121,8,84,12],[121,12,84,16],[122,10,85,16],[122,16,85,22,"data"],[122,20,85,26],[122,23,85,29],[122,29,85,35],[122,33,85,35,"post"],[122,44,85,39],[122,46,85,40],[122,50,85,44],[122,51,85,45,"fetch"],[122,56,85,50],[122,58,85,52],[122,61,85,55],[122,65,85,59],[122,66,85,60,"url"],[122,69,85,63],[122,78,85,72],[122,80,85,74],[123,12,86,20,"id"],[123,14,86,22],[124,12,87,20,"name"],[124,16,87,24],[124,18,87,26,"id"],[124,20,87,28],[125,12,88,20,"type"],[125,16,88,24],[125,18,88,26,"options"],[125,25,88,33],[125,26,88,34,"type"],[125,30,88,38],[126,12,89,20,"public"],[126,18,89,26],[126,20,89,28,"options"],[126,27,89,35],[126,28,89,36,"public"],[126,34,89,42],[127,12,90,20,"file_size_limit"],[127,27,90,35],[127,29,90,37,"options"],[127,36,90,44],[127,37,90,45,"fileSizeLimit"],[127,50,90,58],[128,12,91,20,"allowed_mime_types"],[128,30,91,38],[128,32,91,40,"options"],[128,39,91,47],[128,40,91,48,"allowedMimeTypes"],[129,10,92,16],[129,11,92,17],[129,13,92,19],[130,12,92,21,"headers"],[130,19,92,28],[130,21,92,30],[130,25,92,34],[130,26,92,35,"headers"],[131,10,92,43],[131,11,92,44],[131,12,92,45],[132,10,93,16],[132,17,93,23],[133,12,93,25,"data"],[133,16,93,29],[134,12,93,31,"error"],[134,17,93,36],[134,19,93,38],[135,10,93,43],[135,11,93,44],[136,8,94,12],[136,9,94,13],[136,10,95,12],[136,17,95,19,"error"],[136,22,95,24],[136,24,95,26],[137,10,96,16],[137,14,96,20],[137,18,96,20,"isStorageError"],[137,40,96,34],[137,42,96,35,"error"],[137,47,96,40],[137,48,96,41],[137,50,96,43],[138,12,97,20],[138,19,97,27],[139,14,97,29,"data"],[139,18,97,33],[139,20,97,35],[139,24,97,39],[140,14,97,41,"error"],[141,12,97,47],[141,13,97,48],[142,10,98,16],[143,10,99,16],[143,16,99,22,"error"],[143,21,99,27],[144,8,100,12],[145,6,101,8],[145,7,101,9],[145,8,101,10],[146,4,102,4],[147,4,103,4],[148,0,104,0],[149,0,105,0],[150,0,106,0],[151,0,107,0],[152,0,108,0],[153,0,109,0],[154,0,110,0],[155,0,111,0],[156,0,112,0],[157,0,113,0],[158,0,114,0],[159,4,115,4,"updateBucket"],[159,16,115,16,"updateBucket"],[159,17,115,17,"id"],[159,19,115,19],[159,21,115,21,"options"],[159,28,115,28],[159,30,115,30],[160,6,116,8],[160,13,116,15,"__awaiter"],[160,22,116,24],[160,23,116,25],[160,27,116,29],[160,29,116,31],[160,34,116,36],[160,35,116,37],[160,37,116,39],[160,42,116,44],[160,43,116,45],[160,45,116,47],[160,58,116,60],[161,8,117,12],[161,12,117,16],[162,10,118,16],[162,16,118,22,"data"],[162,20,118,26],[162,23,118,29],[162,29,118,35],[162,33,118,35,"put"],[162,43,118,38],[162,45,118,39],[162,49,118,43],[162,50,118,44,"fetch"],[162,55,118,49],[162,57,118,51],[162,60,118,54],[162,64,118,58],[162,65,118,59,"url"],[162,68,118,62],[162,79,118,73,"id"],[162,81,118,75],[162,83,118,77],[162,85,118,79],[163,12,119,20,"id"],[163,14,119,22],[164,12,120,20,"name"],[164,16,120,24],[164,18,120,26,"id"],[164,20,120,28],[165,12,121,20,"public"],[165,18,121,26],[165,20,121,28,"options"],[165,27,121,35],[165,28,121,36,"public"],[165,34,121,42],[166,12,122,20,"file_size_limit"],[166,27,122,35],[166,29,122,37,"options"],[166,36,122,44],[166,37,122,45,"fileSizeLimit"],[166,50,122,58],[167,12,123,20,"allowed_mime_types"],[167,30,123,38],[167,32,123,40,"options"],[167,39,123,47],[167,40,123,48,"allowedMimeTypes"],[168,10,124,16],[168,11,124,17],[168,13,124,19],[169,12,124,21,"headers"],[169,19,124,28],[169,21,124,30],[169,25,124,34],[169,26,124,35,"headers"],[170,10,124,43],[170,11,124,44],[170,12,124,45],[171,10,125,16],[171,17,125,23],[172,12,125,25,"data"],[172,16,125,29],[173,12,125,31,"error"],[173,17,125,36],[173,19,125,38],[174,10,125,43],[174,11,125,44],[175,8,126,12],[175,9,126,13],[175,10,127,12],[175,17,127,19,"error"],[175,22,127,24],[175,24,127,26],[176,10,128,16],[176,14,128,20],[176,18,128,20,"isStorageError"],[176,40,128,34],[176,42,128,35,"error"],[176,47,128,40],[176,48,128,41],[176,50,128,43],[177,12,129,20],[177,19,129,27],[178,14,129,29,"data"],[178,18,129,33],[178,20,129,35],[178,24,129,39],[179,14,129,41,"error"],[180,12,129,47],[180,13,129,48],[181,10,130,16],[182,10,131,16],[182,16,131,22,"error"],[182,21,131,27],[183,8,132,12],[184,6,133,8],[184,7,133,9],[184,8,133,10],[185,4,134,4],[186,4,135,4],[187,0,136,0],[188,0,137,0],[189,0,138,0],[190,0,139,0],[191,4,140,4,"emptyBucket"],[191,15,140,15,"emptyBucket"],[191,16,140,16,"id"],[191,18,140,18],[191,20,140,20],[192,6,141,8],[192,13,141,15,"__awaiter"],[192,22,141,24],[192,23,141,25],[192,27,141,29],[192,29,141,31],[192,34,141,36],[192,35,141,37],[192,37,141,39],[192,42,141,44],[192,43,141,45],[192,45,141,47],[192,58,141,60],[193,8,142,12],[193,12,142,16],[194,10,143,16],[194,16,143,22,"data"],[194,20,143,26],[194,23,143,29],[194,29,143,35],[194,33,143,35,"post"],[194,44,143,39],[194,46,143,40],[194,50,143,44],[194,51,143,45,"fetch"],[194,56,143,50],[194,58,143,52],[194,61,143,55],[194,65,143,59],[194,66,143,60,"url"],[194,69,143,63],[194,80,143,74,"id"],[194,82,143,76],[194,90,143,84],[194,92,143,86],[194,93,143,87],[194,94,143,88],[194,96,143,90],[195,12,143,92,"headers"],[195,19,143,99],[195,21,143,101],[195,25,143,105],[195,26,143,106,"headers"],[196,10,143,114],[196,11,143,115],[196,12,143,116],[197,10,144,16],[197,17,144,23],[198,12,144,25,"data"],[198,16,144,29],[199,12,144,31,"error"],[199,17,144,36],[199,19,144,38],[200,10,144,43],[200,11,144,44],[201,8,145,12],[201,9,145,13],[201,10,146,12],[201,17,146,19,"error"],[201,22,146,24],[201,24,146,26],[202,10,147,16],[202,14,147,20],[202,18,147,20,"isStorageError"],[202,40,147,34],[202,42,147,35,"error"],[202,47,147,40],[202,48,147,41],[202,50,147,43],[203,12,148,20],[203,19,148,27],[204,14,148,29,"data"],[204,18,148,33],[204,20,148,35],[204,24,148,39],[205,14,148,41,"error"],[206,12,148,47],[206,13,148,48],[207,10,149,16],[208,10,150,16],[208,16,150,22,"error"],[208,21,150,27],[209,8,151,12],[210,6,152,8],[210,7,152,9],[210,8,152,10],[211,4,153,4],[212,4,154,4],[213,0,155,0],[214,0,156,0],[215,0,157,0],[216,0,158,0],[217,0,159,0],[218,4,160,4,"deleteBucket"],[218,16,160,16,"deleteBucket"],[218,17,160,17,"id"],[218,19,160,19],[218,21,160,21],[219,6,161,8],[219,13,161,15,"__awaiter"],[219,22,161,24],[219,23,161,25],[219,27,161,29],[219,29,161,31],[219,34,161,36],[219,35,161,37],[219,37,161,39],[219,42,161,44],[219,43,161,45],[219,45,161,47],[219,58,161,60],[220,8,162,12],[220,12,162,16],[221,10,163,16],[221,16,163,22,"data"],[221,20,163,26],[221,23,163,29],[221,29,163,35],[221,33,163,35,"remove"],[221,46,163,41],[221,48,163,42],[221,52,163,46],[221,53,163,47,"fetch"],[221,58,163,52],[221,60,163,54],[221,63,163,57],[221,67,163,61],[221,68,163,62,"url"],[221,71,163,65],[221,82,163,76,"id"],[221,84,163,78],[221,86,163,80],[221,88,163,82],[221,89,163,83],[221,90,163,84],[221,92,163,86],[222,12,163,88,"headers"],[222,19,163,95],[222,21,163,97],[222,25,163,101],[222,26,163,102,"headers"],[223,10,163,110],[223,11,163,111],[223,12,163,112],[224,10,164,16],[224,17,164,23],[225,12,164,25,"data"],[225,16,164,29],[226,12,164,31,"error"],[226,17,164,36],[226,19,164,38],[227,10,164,43],[227,11,164,44],[228,8,165,12],[228,9,165,13],[228,10,166,12],[228,17,166,19,"error"],[228,22,166,24],[228,24,166,26],[229,10,167,16],[229,14,167,20],[229,18,167,20,"isStorageError"],[229,40,167,34],[229,42,167,35,"error"],[229,47,167,40],[229,48,167,41],[229,50,167,43],[230,12,168,20],[230,19,168,27],[231,14,168,29,"data"],[231,18,168,33],[231,20,168,35],[231,24,168,39],[232,14,168,41,"error"],[233,12,168,47],[233,13,168,48],[234,10,169,16],[235,10,170,16],[235,16,170,22,"error"],[235,21,170,27],[236,8,171,12],[237,6,172,8],[237,7,172,9],[237,8,172,10],[238,4,173,4],[239,2,174,0],[240,2,174,1,"exports"],[240,9,174,1],[240,10,174,1,"default"],[240,17,174,1],[240,20,174,1,"StorageBucketApi"],[240,36,174,1],[241,0,174,1],[241,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageBucketApi","constructor","listBuckets","__awaiter$argument_3","getBucket","createBucket","updateBucket","emptyBucket","deleteBucket"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;eOK;ICC;KDa;IEI;+CCC;SDW;KFC;IIM;+CDC;SCW;KJC;IKgB;+CFG;SEkB;KLC;IMa;+CHC;SGiB;KNC;IOM;+CJC;SIW;KPC;IQO;+CLC;SKW;KRC;CPC"}},"type":"js/module"}]}