{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.UNKNOWN_FUNCTION = void 0;\n  exports.createStackParser = createStackParser;\n  exports.getFramesFromEvent = getFramesFromEvent;\n  exports.getFunctionName = getFunctionName;\n  exports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;\n  exports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;\n  const STACKTRACE_FRAME_LIMIT = 50;\n  const UNKNOWN_FUNCTION = exports.UNKNOWN_FUNCTION = '?';\n  // Used to sanitize webpack (error: *) wrapped stack errors\n  const WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\n  const STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n  /**\n   * Creates a stack parser with the supplied line parsers\n   *\n   * StackFrames are returned in the correct order for Sentry Exception\n   * frames and with Sentry SDK internal frames removed from the top and bottom\n   *\n   */\n  function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n    return (stack, skipFirstLines = 0, framesToPop = 0) => {\n      const frames = [];\n      const lines = stack.split('\\n');\n      for (let i = skipFirstLines; i < lines.length; i++) {\n        const line = lines[i];\n        // Ignore lines over 1kb as they are unlikely to be stack frames.\n        // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n        // input size. Huge strings can result in hangs/Denial of Service:\n        // https://github.com/getsentry/sentry-javascript/issues/2286\n        if (line.length > 1024) {\n          continue;\n        }\n\n        // https://github.com/getsentry/sentry-javascript/issues/5459\n        // Remove webpack (error: *) wrappers\n        const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n        // https://github.com/getsentry/sentry-javascript/issues/7813\n        // Skip Error: lines\n        if (cleanedLine.match(/\\S*Error: /)) {\n          continue;\n        }\n        for (const parser of sortedParsers) {\n          const frame = parser(cleanedLine);\n          if (frame) {\n            frames.push(frame);\n            break;\n          }\n        }\n        if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n          break;\n        }\n      }\n      return stripSentryFramesAndReverse(frames.slice(framesToPop));\n    };\n  }\n\n  /**\n   * Gets a stack parser implementation from Options.stackParser\n   * @see Options\n   *\n   * If options contains an array of line parsers, it is converted into a parser\n   */\n  function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n      return createStackParser(...stackParser);\n    }\n    return stackParser;\n  }\n\n  /**\n   * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n   * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n   * function that caused the crash is the last frame in the array.\n   * @hidden\n   */\n  function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n      return [];\n    }\n    const localStack = Array.from(stack);\n\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n\n      // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n      // is produced within the hub itself, making it:\n      //\n      //   Sentry.captureException()\n      //   getCurrentHub().captureException()\n      //\n      // instead of just the top `Sentry` call itself.\n      // This forces us to possibly strip an additional frame in the exact same was as above.\n      if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n        localStack.pop();\n      }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n      ...frame,\n      filename: frame.filename || getLastStackFrame(localStack).filename,\n      function: frame.function || UNKNOWN_FUNCTION\n    }));\n  }\n  function getLastStackFrame(arr) {\n    return arr[arr.length - 1] || {};\n  }\n  const defaultFunctionName = '<anonymous>';\n\n  /**\n   * Safely extract function name from itself\n   */\n  function getFunctionName(fn) {\n    try {\n      if (!fn || typeof fn !== 'function') {\n        return defaultFunctionName;\n      }\n      return fn.name || defaultFunctionName;\n    } catch (e) {\n      // Just accessing custom props in some Selenium environments\n      // can cause a \"Permission denied\" exception (see raven-js#495).\n      return defaultFunctionName;\n    }\n  }\n\n  /**\n   * Get's stack frames from an event without needing to check for undefined properties.\n   */\n  function getFramesFromEvent(event) {\n    const exception = event.exception;\n    if (exception) {\n      const frames = [];\n      try {\n        // @ts-expect-error Object could be undefined\n        exception.values.forEach(value => {\n          // @ts-expect-error Value could be undefined\n          if (value.stacktrace.frames) {\n            // @ts-expect-error Value could be undefined\n            frames.push(...value.stacktrace.frames);\n          }\n        });\n        return frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    }\n    return undefined;\n  }\n});","lineCount":162,"map":[[11,2,1,0],[11,8,1,6,"STACKTRACE_FRAME_LIMIT"],[11,30,1,28],[11,33,1,31],[11,35,1,33],[12,2,2,0],[12,8,2,6,"UNKNOWN_FUNCTION"],[12,24,2,22],[12,27,2,22,"exports"],[12,34,2,22],[12,35,2,22,"UNKNOWN_FUNCTION"],[12,51,2,22],[12,54,2,25],[12,57,2,28],[13,2,3,0],[14,2,4,0],[14,8,4,6,"WEBPACK_ERROR_REGEXP"],[14,28,4,26],[14,31,4,29],[14,48,4,46],[15,2,5,0],[15,8,5,6,"STRIP_FRAME_REGEXP"],[15,26,5,24],[15,29,5,27],[15,62,5,60],[17,2,7,0],[18,0,8,0],[19,0,9,0],[20,0,10,0],[21,0,11,0],[22,0,12,0],[23,0,13,0],[24,2,14,0],[24,11,14,9,"createStackParser"],[24,28,14,26,"createStackParser"],[24,29,14,27],[24,32,14,30,"parsers"],[24,39,14,37],[24,41,14,39],[25,4,15,2],[25,10,15,8,"sortedParsers"],[25,23,15,21],[25,26,15,24,"parsers"],[25,33,15,31],[25,34,15,32,"sort"],[25,38,15,36],[25,39,15,37],[25,40,15,38,"a"],[25,41,15,39],[25,43,15,41,"b"],[25,44,15,42],[25,49,15,47,"a"],[25,50,15,48],[25,51,15,49],[25,52,15,50],[25,53,15,51],[25,56,15,54,"b"],[25,57,15,55],[25,58,15,56],[25,59,15,57],[25,60,15,58],[25,61,15,59],[25,62,15,60,"map"],[25,65,15,63],[25,66,15,64,"p"],[25,67,15,65],[25,71,15,69,"p"],[25,72,15,70],[25,73,15,71],[25,74,15,72],[25,75,15,73],[25,76,15,74],[26,4,17,2],[26,11,17,9],[26,12,17,10,"stack"],[26,17,17,15],[26,19,17,17,"skipFirstLines"],[26,33,17,31],[26,36,17,34],[26,37,17,35],[26,39,17,37,"framesToPop"],[26,50,17,48],[26,53,17,51],[26,54,17,52],[26,59,17,57],[27,6,18,4],[27,12,18,10,"frames"],[27,18,18,16],[27,21,18,19],[27,23,18,21],[28,6,19,4],[28,12,19,10,"lines"],[28,17,19,15],[28,20,19,18,"stack"],[28,25,19,23],[28,26,19,24,"split"],[28,31,19,29],[28,32,19,30],[28,36,19,34],[28,37,19,35],[29,6,21,4],[29,11,21,9],[29,15,21,13,"i"],[29,16,21,14],[29,19,21,17,"skipFirstLines"],[29,33,21,31],[29,35,21,33,"i"],[29,36,21,34],[29,39,21,37,"lines"],[29,44,21,42],[29,45,21,43,"length"],[29,51,21,49],[29,53,21,51,"i"],[29,54,21,52],[29,56,21,54],[29,58,21,56],[30,8,22,6],[30,14,22,12,"line"],[30,18,22,16],[30,21,22,19,"lines"],[30,26,22,24],[30,27,22,25,"i"],[30,28,22,26],[30,29,22,27],[31,8,23,6],[32,8,24,6],[33,8,25,6],[34,8,26,6],[35,8,27,6],[35,12,27,10,"line"],[35,16,27,14],[35,17,27,15,"length"],[35,23,27,21],[35,26,27,24],[35,30,27,28],[35,32,27,30],[36,10,28,8],[37,8,29,6],[39,8,31,6],[40,8,32,6],[41,8,33,6],[41,14,33,12,"cleanedLine"],[41,25,33,23],[41,28,33,26,"WEBPACK_ERROR_REGEXP"],[41,48,33,46],[41,49,33,47,"test"],[41,53,33,51],[41,54,33,52,"line"],[41,58,33,56],[41,59,33,57],[41,62,33,60,"line"],[41,66,33,64],[41,67,33,65,"replace"],[41,74,33,72],[41,75,33,73,"WEBPACK_ERROR_REGEXP"],[41,95,33,93],[41,97,33,95],[41,101,33,99],[41,102,33,100],[41,105,33,103,"line"],[41,109,33,107],[43,8,35,6],[44,8,36,6],[45,8,37,6],[45,12,37,10,"cleanedLine"],[45,23,37,21],[45,24,37,22,"match"],[45,29,37,27],[45,30,37,28],[45,42,37,40],[45,43,37,41],[45,45,37,43],[46,10,38,8],[47,8,39,6],[48,8,41,6],[48,13,41,11],[48,19,41,17,"parser"],[48,25,41,23],[48,29,41,27,"sortedParsers"],[48,42,41,40],[48,44,41,42],[49,10,42,8],[49,16,42,14,"frame"],[49,21,42,19],[49,24,42,22,"parser"],[49,30,42,28],[49,31,42,29,"cleanedLine"],[49,42,42,40],[49,43,42,41],[50,10,44,8],[50,14,44,12,"frame"],[50,19,44,17],[50,21,44,19],[51,12,45,10,"frames"],[51,18,45,16],[51,19,45,17,"push"],[51,23,45,21],[51,24,45,22,"frame"],[51,29,45,27],[51,30,45,28],[52,12,46,10],[53,10,47,8],[54,8,48,6],[55,8,50,6],[55,12,50,10,"frames"],[55,18,50,16],[55,19,50,17,"length"],[55,25,50,23],[55,29,50,27,"STACKTRACE_FRAME_LIMIT"],[55,51,50,49],[55,54,50,52,"framesToPop"],[55,65,50,63],[55,67,50,65],[56,10,51,8],[57,8,52,6],[58,6,53,4],[59,6,55,4],[59,13,55,11,"stripSentryFramesAndReverse"],[59,40,55,38],[59,41,55,39,"frames"],[59,47,55,45],[59,48,55,46,"slice"],[59,53,55,51],[59,54,55,52,"framesToPop"],[59,65,55,63],[59,66,55,64],[59,67,55,65],[60,4,56,2],[60,5,56,3],[61,2,57,0],[63,2,59,0],[64,0,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,2,65,0],[69,11,65,9,"stackParserFromStackParserOptions"],[69,44,65,42,"stackParserFromStackParserOptions"],[69,45,65,43,"stackParser"],[69,56,65,54],[69,58,65,56],[70,4,66,2],[70,8,66,6,"Array"],[70,13,66,11],[70,14,66,12,"isArray"],[70,21,66,19],[70,22,66,20,"stackParser"],[70,33,66,31],[70,34,66,32],[70,36,66,34],[71,6,67,4],[71,13,67,11,"createStackParser"],[71,30,67,28],[71,31,67,29],[71,34,67,32,"stackParser"],[71,45,67,43],[71,46,67,44],[72,4,68,2],[73,4,69,2],[73,11,69,9,"stackParser"],[73,22,69,20],[74,2,70,0],[76,2,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,0,76,0],[81,0,77,0],[82,2,78,0],[82,11,78,9,"stripSentryFramesAndReverse"],[82,38,78,36,"stripSentryFramesAndReverse"],[82,39,78,37,"stack"],[82,44,78,42],[82,46,78,44],[83,4,79,2],[83,8,79,6],[83,9,79,7,"stack"],[83,14,79,12],[83,15,79,13,"length"],[83,21,79,19],[83,23,79,21],[84,6,80,4],[84,13,80,11],[84,15,80,13],[85,4,81,2],[86,4,83,2],[86,10,83,8,"localStack"],[86,20,83,18],[86,23,83,21,"Array"],[86,28,83,26],[86,29,83,27,"from"],[86,33,83,31],[86,34,83,32,"stack"],[86,39,83,37],[86,40,83,38],[88,4,85,2],[89,4,86,2],[89,8,86,6],[89,23,86,21],[89,24,86,22,"test"],[89,28,86,26],[89,29,86,27,"getLastStackFrame"],[89,46,86,44],[89,47,86,45,"localStack"],[89,57,86,55],[89,58,86,56],[89,59,86,57,"function"],[89,67,86,65],[89,71,86,69],[89,73,86,71],[89,74,86,72],[89,76,86,74],[90,6,87,4,"localStack"],[90,16,87,14],[90,17,87,15,"pop"],[90,20,87,18],[90,21,87,19],[90,22,87,20],[91,4,88,2],[93,4,90,2],[94,4,91,2,"localStack"],[94,14,91,12],[94,15,91,13,"reverse"],[94,22,91,20],[94,23,91,21],[94,24,91,22],[96,4,93,2],[97,4,94,2],[97,8,94,6,"STRIP_FRAME_REGEXP"],[97,26,94,24],[97,27,94,25,"test"],[97,31,94,29],[97,32,94,30,"getLastStackFrame"],[97,49,94,47],[97,50,94,48,"localStack"],[97,60,94,58],[97,61,94,59],[97,62,94,60,"function"],[97,70,94,68],[97,74,94,72],[97,76,94,74],[97,77,94,75],[97,79,94,77],[98,6,95,4,"localStack"],[98,16,95,14],[98,17,95,15,"pop"],[98,20,95,18],[98,21,95,19],[98,22,95,20],[100,6,97,4],[101,6,98,4],[102,6,99,4],[103,6,100,4],[104,6,101,4],[105,6,102,4],[106,6,103,4],[107,6,104,4],[108,6,105,4],[108,10,105,8,"STRIP_FRAME_REGEXP"],[108,28,105,26],[108,29,105,27,"test"],[108,33,105,31],[108,34,105,32,"getLastStackFrame"],[108,51,105,49],[108,52,105,50,"localStack"],[108,62,105,60],[108,63,105,61],[108,64,105,62,"function"],[108,72,105,70],[108,76,105,74],[108,78,105,76],[108,79,105,77],[108,81,105,79],[109,8,106,6,"localStack"],[109,18,106,16],[109,19,106,17,"pop"],[109,22,106,20],[109,23,106,21],[109,24,106,22],[110,6,107,4],[111,4,108,2],[112,4,110,2],[112,11,110,9,"localStack"],[112,21,110,19],[112,22,110,20,"slice"],[112,27,110,25],[112,28,110,26],[112,29,110,27],[112,31,110,29,"STACKTRACE_FRAME_LIMIT"],[112,53,110,51],[112,54,110,52],[112,55,110,53,"map"],[112,58,110,56],[112,59,110,57,"frame"],[112,64,110,62],[112,69,110,67],[113,6,111,4],[113,9,111,7,"frame"],[113,14,111,12],[114,6,112,4,"filename"],[114,14,112,12],[114,16,112,14,"frame"],[114,21,112,19],[114,22,112,20,"filename"],[114,30,112,28],[114,34,112,32,"getLastStackFrame"],[114,51,112,49],[114,52,112,50,"localStack"],[114,62,112,60],[114,63,112,61],[114,64,112,62,"filename"],[114,72,112,70],[115,6,113,4,"function"],[115,14,113,12],[115,16,113,14,"frame"],[115,21,113,19],[115,22,113,20,"function"],[115,30,113,28],[115,34,113,32,"UNKNOWN_FUNCTION"],[116,4,114,2],[116,5,114,3],[116,6,114,4],[116,7,114,5],[117,2,115,0],[118,2,117,0],[118,11,117,9,"getLastStackFrame"],[118,28,117,26,"getLastStackFrame"],[118,29,117,27,"arr"],[118,32,117,30],[118,34,117,32],[119,4,118,2],[119,11,118,9,"arr"],[119,14,118,12],[119,15,118,13,"arr"],[119,18,118,16],[119,19,118,17,"length"],[119,25,118,23],[119,28,118,26],[119,29,118,27],[119,30,118,28],[119,34,118,32],[119,35,118,33],[119,36,118,34],[120,2,119,0],[121,2,121,0],[121,8,121,6,"defaultFunctionName"],[121,27,121,25],[121,30,121,28],[121,43,121,41],[123,2,123,0],[124,0,124,0],[125,0,125,0],[126,2,126,0],[126,11,126,9,"getFunctionName"],[126,26,126,24,"getFunctionName"],[126,27,126,25,"fn"],[126,29,126,27],[126,31,126,29],[127,4,127,2],[127,8,127,6],[128,6,128,4],[128,10,128,8],[128,11,128,9,"fn"],[128,13,128,11],[128,17,128,15],[128,24,128,22,"fn"],[128,26,128,24],[128,31,128,29],[128,41,128,39],[128,43,128,41],[129,8,129,6],[129,15,129,13,"defaultFunctionName"],[129,34,129,32],[130,6,130,4],[131,6,131,4],[131,13,131,11,"fn"],[131,15,131,13],[131,16,131,14,"name"],[131,20,131,18],[131,24,131,22,"defaultFunctionName"],[131,43,131,41],[132,4,132,2],[132,5,132,3],[132,6,132,4],[132,13,132,11,"e"],[132,14,132,12],[132,16,132,14],[133,6,133,4],[134,6,134,4],[135,6,135,4],[135,13,135,11,"defaultFunctionName"],[135,32,135,30],[136,4,136,2],[137,2,137,0],[139,2,139,0],[140,0,140,0],[141,0,141,0],[142,2,142,0],[142,11,142,9,"getFramesFromEvent"],[142,29,142,27,"getFramesFromEvent"],[142,30,142,28,"event"],[142,35,142,33],[142,37,142,35],[143,4,143,2],[143,10,143,8,"exception"],[143,19,143,17],[143,22,143,20,"event"],[143,27,143,25],[143,28,143,26,"exception"],[143,37,143,35],[144,4,145,2],[144,8,145,6,"exception"],[144,17,145,15],[144,19,145,17],[145,6,146,4],[145,12,146,10,"frames"],[145,18,146,16],[145,21,146,19],[145,23,146,21],[146,6,147,4],[146,10,147,8],[147,8,148,6],[148,8,149,6,"exception"],[148,17,149,15],[148,18,149,16,"values"],[148,24,149,22],[148,25,149,23,"forEach"],[148,32,149,30],[148,33,149,31,"value"],[148,38,149,36],[148,42,149,40],[149,10,150,8],[150,10,151,8],[150,14,151,12,"value"],[150,19,151,17],[150,20,151,18,"stacktrace"],[150,30,151,28],[150,31,151,29,"frames"],[150,37,151,35],[150,39,151,37],[151,12,152,10],[152,12,153,10,"frames"],[152,18,153,16],[152,19,153,17,"push"],[152,23,153,21],[152,24,153,22],[152,27,153,25,"value"],[152,32,153,30],[152,33,153,31,"stacktrace"],[152,43,153,41],[152,44,153,42,"frames"],[152,50,153,48],[152,51,153,49],[153,10,154,8],[154,8,155,6],[154,9,155,7],[154,10,155,8],[155,8,156,6],[155,15,156,13,"frames"],[155,21,156,19],[156,6,157,4],[156,7,157,5],[156,8,157,6],[156,15,157,13,"_oO"],[156,18,157,16],[156,20,157,18],[157,8,158,6],[157,15,158,13,"undefined"],[157,24,158,22],[158,6,159,4],[159,4,160,2],[160,4,161,2],[160,11,161,9,"undefined"],[160,20,161,18],[161,2,162,0],[162,0,162,1],[162,3]],"functionMap":{"names":["<global>","createStackParser","parsers.sort$argument_0","parsers.sort.map$argument_0","<anonymous>","stackParserFromStackParserOptions","stripSentryFramesAndReverse","localStack.slice.map$argument_0","getLastStackFrame","getFunctionName","getFramesFromEvent","exception.values.forEach$argument_0"],"mappings":"AAA;ACa;qCCC,qBD,ME,SF;SGE;GHuC;CDC;AKQ;CLK;AMQ;yDCgC;IDI;CNC;AQE;CRE;ASO;CTW;AUK;+BCO;ODM;CVO"}},"type":"js/module"}]}