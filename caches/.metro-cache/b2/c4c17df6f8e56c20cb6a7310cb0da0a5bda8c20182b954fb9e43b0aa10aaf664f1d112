{"dependencies":[{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":54},"end":{"line":2,"column":103,"index":157}}],"key":"K7iI+PRtR1yDAq2Cd5P/ht8ORfQ=","exportNames":["*"]}},{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":158},"end":{"line":3,"column":47,"index":205}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}},{"name":"./session.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":206},"end":{"line":4,"column":72,"index":278}}],"key":"XxHRjRg/KGl5WP5S0nFEZ7EbLjw=","exportNames":["*"]}},{"name":"./utils-hoist/is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":279},"end":{"line":5,"column":49,"index":328}}],"key":"yjiG2n7bd9NbF7ogEaNNARkwswM=","exportNames":["*"]}},{"name":"./utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":329},"end":{"line":6,"column":49,"index":378}}],"key":"stoPaR3Pn8Ep3TScuCh6EHiT7Fo=","exportNames":["*"]}},{"name":"./utils-hoist/misc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":379},"end":{"line":7,"column":46,"index":425}}],"key":"4J8iL1cu5xJLfk84TOyyT/H2FWI=","exportNames":["*"]}},{"name":"./utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":426},"end":{"line":8,"column":59,"index":485}}],"key":"CDYXZ+Iu2qXN5epbbNjMwVJRDIA=","exportNames":["*"]}},{"name":"./utils-hoist/worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":486},"end":{"line":9,"column":56,"index":542}}],"key":"/lA1quQlpOoALnJUBGcie/ONj5k=","exportNames":["*"]}},{"name":"./utils/prepareEvent.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":543},"end":{"line":10,"column":73,"index":616}}],"key":"cn2ITLSdj8XGsdwE3lNEuOC8y9U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addEventProcessor = addEventProcessor;\n  exports.captureCheckIn = captureCheckIn;\n  exports.captureEvent = captureEvent;\n  exports.captureException = captureException;\n  exports.captureMessage = captureMessage;\n  exports.captureSession = captureSession;\n  exports.close = close;\n  exports.endSession = endSession;\n  exports.flush = flush;\n  exports.isEnabled = isEnabled;\n  exports.isInitialized = isInitialized;\n  exports.lastEventId = lastEventId;\n  exports.setContext = setContext;\n  exports.setExtra = setExtra;\n  exports.setExtras = setExtras;\n  exports.setTag = setTag;\n  exports.setTags = setTags;\n  exports.setUser = setUser;\n  exports.startSession = startSession;\n  exports.withMonitor = withMonitor;\n  var _constants = require(_dependencyMap[0], \"./constants.js\");\n  var _currentScopes = require(_dependencyMap[1], \"./currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[2], \"./debug-build.js\");\n  var _session = require(_dependencyMap[3], \"./session.js\");\n  var _is = require(_dependencyMap[4], \"./utils-hoist/is.js\");\n  var _logger = require(_dependencyMap[5], \"./utils-hoist/logger.js\");\n  var _misc = require(_dependencyMap[6], \"./utils-hoist/misc.js\");\n  var _time = require(_dependencyMap[7], \"./utils-hoist/time.js\");\n  var _worldwide = require(_dependencyMap[8], \"./utils-hoist/worldwide.js\");\n  var _prepareEvent = require(_dependencyMap[9], \"./utils/prepareEvent.js\");\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */\n  function captureException(exception, hint) {\n    return (0, _currentScopes.getCurrentScope)().captureException(exception, (0, _prepareEvent.parseEventHintOrCaptureContext)(hint));\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * @param message The message to send to Sentry.\n   * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n   * @returns the id of the captured message.\n   */\n  function captureMessage(message, captureContext) {\n    // This is necessary to provide explicit scopes upgrade, without changing the original\n    // arity of the `captureMessage(message, level)` method.\n    const level = typeof captureContext === 'string' ? captureContext : undefined;\n    const context = typeof captureContext !== 'string' ? {\n      captureContext\n    } : undefined;\n    return (0, _currentScopes.getCurrentScope)().captureMessage(message, level, context);\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * @param event The event to send to Sentry.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */\n  function captureEvent(event, hint) {\n    return (0, _currentScopes.getCurrentScope)().captureEvent(event, hint);\n  }\n\n  /**\n   * Sets context data with the given name.\n   * @param name of the context\n   * @param context Any kind of data. This data will be normalized.\n   */\n  function setContext(name, context) {\n    (0, _currentScopes.getIsolationScope)().setContext(name, context);\n  }\n\n  /**\n   * Set an object that will be merged sent as extra data with the event.\n   * @param extras Extras object to merge into current context.\n   */\n  function setExtras(extras) {\n    (0, _currentScopes.getIsolationScope)().setExtras(extras);\n  }\n\n  /**\n   * Set key:value that will be sent as extra data with the event.\n   * @param key String of extra\n   * @param extra Any kind of data. This data will be normalized.\n   */\n  function setExtra(key, extra) {\n    (0, _currentScopes.getIsolationScope)().setExtra(key, extra);\n  }\n\n  /**\n   * Set an object that will be merged sent as tags data with the event.\n   * @param tags Tags context object to merge into current context.\n   */\n  function setTags(tags) {\n    (0, _currentScopes.getIsolationScope)().setTags(tags);\n  }\n\n  /**\n   * Set key:value that will be sent as tags data with the event.\n   *\n   * Can also be used to unset a tag, by passing `undefined`.\n   *\n   * @param key String key of tag\n   * @param value Value of tag\n   */\n  function setTag(key, value) {\n    (0, _currentScopes.getIsolationScope)().setTag(key, value);\n  }\n\n  /**\n   * Updates user context information for future events.\n   *\n   * @param user User context object to be set in the current context. Pass `null` to unset the user.\n   */\n  function setUser(user) {\n    (0, _currentScopes.getIsolationScope)().setUser(user);\n  }\n\n  /**\n   * The last error event id of the isolation scope.\n   *\n   * Warning: This function really returns the last recorded error event id on the current\n   * isolation scope. If you call this function after handling a certain error and another error\n   * is captured in between, the last one is returned instead of the one you might expect.\n   * Also, ids of events that were never sent to Sentry (for example because\n   * they were dropped in `beforeSend`) could be returned.\n   *\n   * @returns The last event id of the isolation scope.\n   */\n  function lastEventId() {\n    return (0, _currentScopes.getIsolationScope)().lastEventId();\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  function captureCheckIn(checkIn, upsertMonitorConfig) {\n    const scope = (0, _currentScopes.getCurrentScope)();\n    const client = (0, _currentScopes.getClient)();\n    if (!client) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn('Cannot capture check-in. No client defined.');\n    } else if (!client.captureCheckIn) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n    } else {\n      return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n    }\n    return (0, _misc.uuid4)();\n  }\n\n  /**\n   * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n   *\n   * @param monitorSlug The distinct slug of the monitor.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  function withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n    const checkInId = captureCheckIn({\n      monitorSlug,\n      status: 'in_progress'\n    }, upsertMonitorConfig);\n    const now = (0, _time.timestampInSeconds)();\n    function finishCheckIn(status) {\n      captureCheckIn({\n        monitorSlug,\n        status,\n        checkInId,\n        duration: (0, _time.timestampInSeconds)() - now\n      });\n    }\n    return (0, _currentScopes.withIsolationScope)(() => {\n      let maybePromiseResult;\n      try {\n        maybePromiseResult = callback();\n      } catch (e) {\n        finishCheckIn('error');\n        throw e;\n      }\n      if ((0, _is.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(() => {\n          finishCheckIn('ok');\n        }, e => {\n          finishCheckIn('error');\n          throw e;\n        });\n      } else {\n        finishCheckIn('ok');\n      }\n      return maybePromiseResult;\n    });\n  }\n\n  /**\n   * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n   *\n   * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n   * the client to wait until all events are sent before resolving the promise.\n   * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n   * doesn't (or if there's no client defined).\n   */\n  async function flush(timeout) {\n    const client = (0, _currentScopes.getClient)();\n    if (client) {\n      return client.flush(timeout);\n    }\n    _debugBuild.DEBUG_BUILD && _logger.logger.warn('Cannot flush events. No client defined.');\n    return Promise.resolve(false);\n  }\n\n  /**\n   * Call `close()` on the current client, if there is one. See {@link Client.close}.\n   *\n   * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n   * parameter will cause the client to wait until all events are sent before disabling itself.\n   * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n   * doesn't (or if there's no client defined).\n   */\n  async function close(timeout) {\n    const client = (0, _currentScopes.getClient)();\n    if (client) {\n      return client.close(timeout);\n    }\n    _debugBuild.DEBUG_BUILD && _logger.logger.warn('Cannot flush events and disable SDK. No client defined.');\n    return Promise.resolve(false);\n  }\n\n  /**\n   * Returns true if Sentry has been properly initialized.\n   */\n  function isInitialized() {\n    return !!(0, _currentScopes.getClient)();\n  }\n\n  /** If the SDK is initialized & enabled. */\n  function isEnabled() {\n    const client = (0, _currentScopes.getClient)();\n    return !!client && client.getOptions().enabled !== false && !!client.getTransport();\n  }\n\n  /**\n   * Add an event processor.\n   * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n   * context will have the processor applied.\n   */\n  function addEventProcessor(callback) {\n    (0, _currentScopes.getIsolationScope)().addEventProcessor(callback);\n  }\n\n  /**\n   * Start a session on the current isolation scope.\n   *\n   * @param context (optional) additional properties to be applied to the returned session object\n   *\n   * @returns the new active session\n   */\n  function startSession(context) {\n    const client = (0, _currentScopes.getClient)();\n    const isolationScope = (0, _currentScopes.getIsolationScope)();\n    const currentScope = (0, _currentScopes.getCurrentScope)();\n    const {\n      release,\n      environment = _constants.DEFAULT_ENVIRONMENT\n    } = client && client.getOptions() || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const {\n      userAgent\n    } = _worldwide.GLOBAL_OBJ.navigator || {};\n    const session = (0, _session.makeSession)({\n      release,\n      environment,\n      user: currentScope.getUser() || isolationScope.getUser(),\n      ...(userAgent && {\n        userAgent\n      }),\n      ...context\n    });\n\n    // End existing session if there's one\n    const currentSession = isolationScope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      (0, _session.updateSession)(currentSession, {\n        status: 'exited'\n      });\n    }\n    endSession();\n\n    // Afterwards we set the new session on the scope\n    isolationScope.setSession(session);\n\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession(session);\n    return session;\n  }\n\n  /**\n   * End the session on the current isolation scope.\n   */\n  function endSession() {\n    const isolationScope = (0, _currentScopes.getIsolationScope)();\n    const currentScope = (0, _currentScopes.getCurrentScope)();\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session) {\n      (0, _session.closeSession)(session);\n    }\n    _sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    isolationScope.setSession();\n\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession();\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  function _sendSessionUpdate() {\n    const isolationScope = (0, _currentScopes.getIsolationScope)();\n    const currentScope = (0, _currentScopes.getCurrentScope)();\n    const client = (0, _currentScopes.getClient)();\n    // TODO (v8): Remove currentScope and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session && client) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Sends the current session on the scope to Sentry\n   *\n   * @param end If set the session will be marked as exited and removed from the scope.\n   *            Defaults to `false`.\n   */\n  function captureSession(end = false) {\n    // both send the update and pull the session from the scope\n    if (end) {\n      endSession();\n      return;\n    }\n\n    // only send the update\n    _sendSessionUpdate();\n  }\n});","lineCount":362,"map":[[25,2,1,0],[25,6,1,0,"_constants"],[25,16,1,0],[25,19,1,0,"require"],[25,26,1,0],[25,27,1,0,"_dependencyMap"],[25,41,1,0],[26,2,2,0],[26,6,2,0,"_currentScopes"],[26,20,2,0],[26,23,2,0,"require"],[26,30,2,0],[26,31,2,0,"_dependencyMap"],[26,45,2,0],[27,2,3,0],[27,6,3,0,"_debugBuild"],[27,17,3,0],[27,20,3,0,"require"],[27,27,3,0],[27,28,3,0,"_dependencyMap"],[27,42,3,0],[28,2,4,0],[28,6,4,0,"_session"],[28,14,4,0],[28,17,4,0,"require"],[28,24,4,0],[28,25,4,0,"_dependencyMap"],[28,39,4,0],[29,2,5,0],[29,6,5,0,"_is"],[29,9,5,0],[29,12,5,0,"require"],[29,19,5,0],[29,20,5,0,"_dependencyMap"],[29,34,5,0],[30,2,6,0],[30,6,6,0,"_logger"],[30,13,6,0],[30,16,6,0,"require"],[30,23,6,0],[30,24,6,0,"_dependencyMap"],[30,38,6,0],[31,2,7,0],[31,6,7,0,"_misc"],[31,11,7,0],[31,14,7,0,"require"],[31,21,7,0],[31,22,7,0,"_dependencyMap"],[31,36,7,0],[32,2,8,0],[32,6,8,0,"_time"],[32,11,8,0],[32,14,8,0,"require"],[32,21,8,0],[32,22,8,0,"_dependencyMap"],[32,36,8,0],[33,2,9,0],[33,6,9,0,"_worldwide"],[33,16,9,0],[33,19,9,0,"require"],[33,26,9,0],[33,27,9,0,"_dependencyMap"],[33,41,9,0],[34,2,10,0],[34,6,10,0,"_prepareEvent"],[34,19,10,0],[34,22,10,0,"require"],[34,29,10,0],[34,30,10,0,"_dependencyMap"],[34,44,10,0],[35,2,12,0],[36,0,13,0],[37,0,14,0],[38,0,15,0],[39,0,16,0],[40,0,17,0],[41,0,18,0],[42,2,19,0],[42,11,19,9,"captureException"],[42,27,19,25,"captureException"],[42,28,19,26,"exception"],[42,37,19,35],[42,39,19,37,"hint"],[42,43,19,41],[42,45,19,43],[43,4,20,2],[43,11,20,9],[43,15,20,9,"getCurrentScope"],[43,45,20,24],[43,47,20,25],[43,48,20,26],[43,49,20,27,"captureException"],[43,65,20,43],[43,66,20,44,"exception"],[43,75,20,53],[43,77,20,55],[43,81,20,55,"parseEventHintOrCaptureContext"],[43,125,20,85],[43,127,20,86,"hint"],[43,131,20,90],[43,132,20,91],[43,133,20,92],[44,2,21,0],[46,2,23,0],[47,0,24,0],[48,0,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,2,30,0],[53,11,30,9,"captureMessage"],[53,25,30,23,"captureMessage"],[53,26,30,24,"message"],[53,33,30,31],[53,35,30,33,"captureContext"],[53,49,30,47],[53,51,30,49],[54,4,31,2],[55,4,32,2],[56,4,33,2],[56,10,33,8,"level"],[56,15,33,13],[56,18,33,16],[56,25,33,23,"captureContext"],[56,39,33,37],[56,44,33,42],[56,52,33,50],[56,55,33,53,"captureContext"],[56,69,33,67],[56,72,33,70,"undefined"],[56,81,33,79],[57,4,34,2],[57,10,34,8,"context"],[57,17,34,15],[57,20,34,18],[57,27,34,25,"captureContext"],[57,41,34,39],[57,46,34,44],[57,54,34,52],[57,57,34,55],[58,6,34,57,"captureContext"],[59,4,34,72],[59,5,34,73],[59,8,34,76,"undefined"],[59,17,34,85],[60,4,35,2],[60,11,35,9],[60,15,35,9,"getCurrentScope"],[60,45,35,24],[60,47,35,25],[60,48,35,26],[60,49,35,27,"captureMessage"],[60,63,35,41],[60,64,35,42,"message"],[60,71,35,49],[60,73,35,51,"level"],[60,78,35,56],[60,80,35,58,"context"],[60,87,35,65],[60,88,35,66],[61,2,36,0],[63,2,38,0],[64,0,39,0],[65,0,40,0],[66,0,41,0],[67,0,42,0],[68,0,43,0],[69,0,44,0],[70,2,45,0],[70,11,45,9,"captureEvent"],[70,23,45,21,"captureEvent"],[70,24,45,22,"event"],[70,29,45,27],[70,31,45,29,"hint"],[70,35,45,33],[70,37,45,35],[71,4,46,2],[71,11,46,9],[71,15,46,9,"getCurrentScope"],[71,45,46,24],[71,47,46,25],[71,48,46,26],[71,49,46,27,"captureEvent"],[71,61,46,39],[71,62,46,40,"event"],[71,67,46,45],[71,69,46,47,"hint"],[71,73,46,51],[71,74,46,52],[72,2,47,0],[74,2,49,0],[75,0,50,0],[76,0,51,0],[77,0,52,0],[78,0,53,0],[79,2,54,0],[79,11,54,9,"setContext"],[79,21,54,19,"setContext"],[79,22,54,20,"name"],[79,26,54,24],[79,28,54,26,"context"],[79,35,54,33],[79,37,54,35],[80,4,55,2],[80,8,55,2,"getIsolationScope"],[80,40,55,19],[80,42,55,20],[80,43,55,21],[80,44,55,22,"setContext"],[80,54,55,32],[80,55,55,33,"name"],[80,59,55,37],[80,61,55,39,"context"],[80,68,55,46],[80,69,55,47],[81,2,56,0],[83,2,58,0],[84,0,59,0],[85,0,60,0],[86,0,61,0],[87,2,62,0],[87,11,62,9,"setExtras"],[87,20,62,18,"setExtras"],[87,21,62,19,"extras"],[87,27,62,25],[87,29,62,27],[88,4,63,2],[88,8,63,2,"getIsolationScope"],[88,40,63,19],[88,42,63,20],[88,43,63,21],[88,44,63,22,"setExtras"],[88,53,63,31],[88,54,63,32,"extras"],[88,60,63,38],[88,61,63,39],[89,2,64,0],[91,2,66,0],[92,0,67,0],[93,0,68,0],[94,0,69,0],[95,0,70,0],[96,2,71,0],[96,11,71,9,"setExtra"],[96,19,71,17,"setExtra"],[96,20,71,18,"key"],[96,23,71,21],[96,25,71,23,"extra"],[96,30,71,28],[96,32,71,30],[97,4,72,2],[97,8,72,2,"getIsolationScope"],[97,40,72,19],[97,42,72,20],[97,43,72,21],[97,44,72,22,"setExtra"],[97,52,72,30],[97,53,72,31,"key"],[97,56,72,34],[97,58,72,36,"extra"],[97,63,72,41],[97,64,72,42],[98,2,73,0],[100,2,75,0],[101,0,76,0],[102,0,77,0],[103,0,78,0],[104,2,79,0],[104,11,79,9,"setTags"],[104,18,79,16,"setTags"],[104,19,79,17,"tags"],[104,23,79,21],[104,25,79,23],[105,4,80,2],[105,8,80,2,"getIsolationScope"],[105,40,80,19],[105,42,80,20],[105,43,80,21],[105,44,80,22,"setTags"],[105,51,80,29],[105,52,80,30,"tags"],[105,56,80,34],[105,57,80,35],[106,2,81,0],[108,2,83,0],[109,0,84,0],[110,0,85,0],[111,0,86,0],[112,0,87,0],[113,0,88,0],[114,0,89,0],[115,0,90,0],[116,2,91,0],[116,11,91,9,"setTag"],[116,17,91,15,"setTag"],[116,18,91,16,"key"],[116,21,91,19],[116,23,91,21,"value"],[116,28,91,26],[116,30,91,28],[117,4,92,2],[117,8,92,2,"getIsolationScope"],[117,40,92,19],[117,42,92,20],[117,43,92,21],[117,44,92,22,"setTag"],[117,50,92,28],[117,51,92,29,"key"],[117,54,92,32],[117,56,92,34,"value"],[117,61,92,39],[117,62,92,40],[118,2,93,0],[120,2,95,0],[121,0,96,0],[122,0,97,0],[123,0,98,0],[124,0,99,0],[125,2,100,0],[125,11,100,9,"setUser"],[125,18,100,16,"setUser"],[125,19,100,17,"user"],[125,23,100,21],[125,25,100,23],[126,4,101,2],[126,8,101,2,"getIsolationScope"],[126,40,101,19],[126,42,101,20],[126,43,101,21],[126,44,101,22,"setUser"],[126,51,101,29],[126,52,101,30,"user"],[126,56,101,34],[126,57,101,35],[127,2,102,0],[129,2,104,0],[130,0,105,0],[131,0,106,0],[132,0,107,0],[133,0,108,0],[134,0,109,0],[135,0,110,0],[136,0,111,0],[137,0,112,0],[138,0,113,0],[139,0,114,0],[140,2,115,0],[140,11,115,9,"lastEventId"],[140,22,115,20,"lastEventId"],[140,23,115,20],[140,25,115,23],[141,4,116,2],[141,11,116,9],[141,15,116,9,"getIsolationScope"],[141,47,116,26],[141,49,116,27],[141,50,116,28],[141,51,116,29,"lastEventId"],[141,62,116,40],[141,63,116,41],[141,64,116,42],[142,2,117,0],[144,2,119,0],[145,0,120,0],[146,0,121,0],[147,0,122,0],[148,0,123,0],[149,0,124,0],[150,0,125,0],[151,2,126,0],[151,11,126,9,"captureCheckIn"],[151,25,126,23,"captureCheckIn"],[151,26,126,24,"checkIn"],[151,33,126,31],[151,35,126,33,"upsertMonitorConfig"],[151,54,126,52],[151,56,126,54],[152,4,127,2],[152,10,127,8,"scope"],[152,15,127,13],[152,18,127,16],[152,22,127,16,"getCurrentScope"],[152,52,127,31],[152,54,127,32],[152,55,127,33],[153,4,128,2],[153,10,128,8,"client"],[153,16,128,14],[153,19,128,17],[153,23,128,17,"getClient"],[153,47,128,26],[153,49,128,27],[153,50,128,28],[154,4,129,2],[154,8,129,6],[154,9,129,7,"client"],[154,15,129,13],[154,17,129,15],[155,6,130,4,"DEBUG_BUILD"],[155,29,130,15],[155,33,130,19,"logger"],[155,47,130,25],[155,48,130,26,"warn"],[155,52,130,30],[155,53,130,31],[155,98,130,76],[155,99,130,77],[156,4,131,2],[156,5,131,3],[156,11,131,9],[156,15,131,13],[156,16,131,14,"client"],[156,22,131,20],[156,23,131,21,"captureCheckIn"],[156,37,131,35],[156,39,131,37],[157,6,132,4,"DEBUG_BUILD"],[157,29,132,15],[157,33,132,19,"logger"],[157,47,132,25],[157,48,132,26,"warn"],[157,52,132,30],[157,53,132,31],[157,122,132,100],[157,123,132,101],[158,4,133,2],[158,5,133,3],[158,11,133,9],[159,6,134,4],[159,13,134,11,"client"],[159,19,134,17],[159,20,134,18,"captureCheckIn"],[159,34,134,32],[159,35,134,33,"checkIn"],[159,42,134,40],[159,44,134,42,"upsertMonitorConfig"],[159,63,134,61],[159,65,134,63,"scope"],[159,70,134,68],[159,71,134,69],[160,4,135,2],[161,4,137,2],[161,11,137,9],[161,15,137,9,"uuid4"],[161,26,137,14],[161,28,137,15],[161,29,137,16],[162,2,138,0],[164,2,140,0],[165,0,141,0],[166,0,142,0],[167,0,143,0],[168,0,144,0],[169,0,145,0],[170,0,146,0],[171,2,147,0],[171,11,147,9,"withMonitor"],[171,22,147,20,"withMonitor"],[171,23,148,2,"monitorSlug"],[171,34,148,13],[171,36,149,2,"callback"],[171,44,149,10],[171,46,150,2,"upsertMonitorConfig"],[171,65,150,21],[171,67,151,2],[172,4,152,2],[172,10,152,8,"checkInId"],[172,19,152,17],[172,22,152,20,"captureCheckIn"],[172,36,152,34],[172,37,152,35],[173,6,152,37,"monitorSlug"],[173,17,152,48],[174,6,152,50,"status"],[174,12,152,56],[174,14,152,58],[175,4,152,72],[175,5,152,73],[175,7,152,75,"upsertMonitorConfig"],[175,26,152,94],[175,27,152,95],[176,4,153,2],[176,10,153,8,"now"],[176,13,153,11],[176,16,153,14],[176,20,153,14,"timestampInSeconds"],[176,44,153,32],[176,46,153,33],[176,47,153,34],[177,4,155,2],[177,13,155,11,"finishCheckIn"],[177,26,155,24,"finishCheckIn"],[177,27,155,25,"status"],[177,33,155,31],[177,35,155,33],[178,6,156,4,"captureCheckIn"],[178,20,156,18],[178,21,156,19],[179,8,156,21,"monitorSlug"],[179,19,156,32],[180,8,156,34,"status"],[180,14,156,40],[181,8,156,42,"checkInId"],[181,17,156,51],[182,8,156,53,"duration"],[182,16,156,61],[182,18,156,63],[182,22,156,63,"timestampInSeconds"],[182,46,156,81],[182,48,156,82],[182,49,156,83],[182,52,156,86,"now"],[183,6,156,90],[183,7,156,91],[183,8,156,92],[184,4,157,2],[185,4,159,2],[185,11,159,9],[185,15,159,9,"withIsolationScope"],[185,48,159,27],[185,50,159,28],[185,56,159,34],[186,6,160,4],[186,10,160,8,"maybePromiseResult"],[186,28,160,26],[187,6,161,4],[187,10,161,8],[188,8,162,6,"maybePromiseResult"],[188,26,162,24],[188,29,162,27,"callback"],[188,37,162,35],[188,38,162,36],[188,39,162,37],[189,6,163,4],[189,7,163,5],[189,8,163,6],[189,15,163,13,"e"],[189,16,163,14],[189,18,163,16],[190,8,164,6,"finishCheckIn"],[190,21,164,19],[190,22,164,20],[190,29,164,27],[190,30,164,28],[191,8,165,6],[191,14,165,12,"e"],[191,15,165,13],[192,6,166,4],[193,6,168,4],[193,10,168,8],[193,14,168,8,"isThenable"],[193,28,168,18],[193,30,168,19,"maybePromiseResult"],[193,48,168,37],[193,49,168,38],[193,51,168,40],[194,8,169,6,"Promise"],[194,15,169,13],[194,16,169,14,"resolve"],[194,23,169,21],[194,24,169,22,"maybePromiseResult"],[194,42,169,40],[194,43,169,41],[194,44,169,42,"then"],[194,48,169,46],[194,49,170,8],[194,55,170,14],[195,10,171,10,"finishCheckIn"],[195,23,171,23],[195,24,171,24],[195,28,171,28],[195,29,171,29],[196,8,172,8],[196,9,172,9],[196,11,173,8,"e"],[196,12,173,9],[196,16,173,13],[197,10,174,10,"finishCheckIn"],[197,23,174,23],[197,24,174,24],[197,31,174,31],[197,32,174,32],[198,10,175,10],[198,16,175,16,"e"],[198,17,175,17],[199,8,176,8],[199,9,177,6],[199,10,177,7],[200,6,178,4],[200,7,178,5],[200,13,178,11],[201,8,179,6,"finishCheckIn"],[201,21,179,19],[201,22,179,20],[201,26,179,24],[201,27,179,25],[202,6,180,4],[203,6,182,4],[203,13,182,11,"maybePromiseResult"],[203,31,182,29],[204,4,183,2],[204,5,183,3],[204,6,183,4],[205,2,184,0],[207,2,186,0],[208,0,187,0],[209,0,188,0],[210,0,189,0],[211,0,190,0],[212,0,191,0],[213,0,192,0],[214,0,193,0],[215,2,194,0],[215,17,194,15,"flush"],[215,22,194,20,"flush"],[215,23,194,21,"timeout"],[215,30,194,28],[215,32,194,30],[216,4,195,2],[216,10,195,8,"client"],[216,16,195,14],[216,19,195,17],[216,23,195,17,"getClient"],[216,47,195,26],[216,49,195,27],[216,50,195,28],[217,4,196,2],[217,8,196,6,"client"],[217,14,196,12],[217,16,196,14],[218,6,197,4],[218,13,197,11,"client"],[218,19,197,17],[218,20,197,18,"flush"],[218,25,197,23],[218,26,197,24,"timeout"],[218,33,197,31],[218,34,197,32],[219,4,198,2],[220,4,199,2,"DEBUG_BUILD"],[220,27,199,13],[220,31,199,17,"logger"],[220,45,199,23],[220,46,199,24,"warn"],[220,50,199,28],[220,51,199,29],[220,92,199,70],[220,93,199,71],[221,4,200,2],[221,11,200,9,"Promise"],[221,18,200,16],[221,19,200,17,"resolve"],[221,26,200,24],[221,27,200,25],[221,32,200,30],[221,33,200,31],[222,2,201,0],[224,2,203,0],[225,0,204,0],[226,0,205,0],[227,0,206,0],[228,0,207,0],[229,0,208,0],[230,0,209,0],[231,0,210,0],[232,2,211,0],[232,17,211,15,"close"],[232,22,211,20,"close"],[232,23,211,21,"timeout"],[232,30,211,28],[232,32,211,30],[233,4,212,2],[233,10,212,8,"client"],[233,16,212,14],[233,19,212,17],[233,23,212,17,"getClient"],[233,47,212,26],[233,49,212,27],[233,50,212,28],[234,4,213,2],[234,8,213,6,"client"],[234,14,213,12],[234,16,213,14],[235,6,214,4],[235,13,214,11,"client"],[235,19,214,17],[235,20,214,18,"close"],[235,25,214,23],[235,26,214,24,"timeout"],[235,33,214,31],[235,34,214,32],[236,4,215,2],[237,4,216,2,"DEBUG_BUILD"],[237,27,216,13],[237,31,216,17,"logger"],[237,45,216,23],[237,46,216,24,"warn"],[237,50,216,28],[237,51,216,29],[237,108,216,86],[237,109,216,87],[238,4,217,2],[238,11,217,9,"Promise"],[238,18,217,16],[238,19,217,17,"resolve"],[238,26,217,24],[238,27,217,25],[238,32,217,30],[238,33,217,31],[239,2,218,0],[241,2,220,0],[242,0,221,0],[243,0,222,0],[244,2,223,0],[244,11,223,9,"isInitialized"],[244,24,223,22,"isInitialized"],[244,25,223,22],[244,27,223,25],[245,4,224,2],[245,11,224,9],[245,12,224,10],[245,13,224,11],[245,17,224,11,"getClient"],[245,41,224,20],[245,43,224,21],[245,44,224,22],[246,2,225,0],[248,2,227,0],[249,2,228,0],[249,11,228,9,"isEnabled"],[249,20,228,18,"isEnabled"],[249,21,228,18],[249,23,228,21],[250,4,229,2],[250,10,229,8,"client"],[250,16,229,14],[250,19,229,17],[250,23,229,17,"getClient"],[250,47,229,26],[250,49,229,27],[250,50,229,28],[251,4,230,2],[251,11,230,9],[251,12,230,10],[251,13,230,11,"client"],[251,19,230,17],[251,23,230,21,"client"],[251,29,230,27],[251,30,230,28,"getOptions"],[251,40,230,38],[251,41,230,39],[251,42,230,40],[251,43,230,41,"enabled"],[251,50,230,48],[251,55,230,53],[251,60,230,58],[251,64,230,62],[251,65,230,63],[251,66,230,64,"client"],[251,72,230,70],[251,73,230,71,"getTransport"],[251,85,230,83],[251,86,230,84],[251,87,230,85],[252,2,231,0],[254,2,233,0],[255,0,234,0],[256,0,235,0],[257,0,236,0],[258,0,237,0],[259,2,238,0],[259,11,238,9,"addEventProcessor"],[259,28,238,26,"addEventProcessor"],[259,29,238,27,"callback"],[259,37,238,35],[259,39,238,37],[260,4,239,2],[260,8,239,2,"getIsolationScope"],[260,40,239,19],[260,42,239,20],[260,43,239,21],[260,44,239,22,"addEventProcessor"],[260,61,239,39],[260,62,239,40,"callback"],[260,70,239,48],[260,71,239,49],[261,2,240,0],[263,2,242,0],[264,0,243,0],[265,0,244,0],[266,0,245,0],[267,0,246,0],[268,0,247,0],[269,0,248,0],[270,2,249,0],[270,11,249,9,"startSession"],[270,23,249,21,"startSession"],[270,24,249,22,"context"],[270,31,249,29],[270,33,249,31],[271,4,250,2],[271,10,250,8,"client"],[271,16,250,14],[271,19,250,17],[271,23,250,17,"getClient"],[271,47,250,26],[271,49,250,27],[271,50,250,28],[272,4,251,2],[272,10,251,8,"isolationScope"],[272,24,251,22],[272,27,251,25],[272,31,251,25,"getIsolationScope"],[272,63,251,42],[272,65,251,43],[272,66,251,44],[273,4,252,2],[273,10,252,8,"currentScope"],[273,22,252,20],[273,25,252,23],[273,29,252,23,"getCurrentScope"],[273,59,252,38],[273,61,252,39],[273,62,252,40],[274,4,254,2],[274,10,254,8],[275,6,254,10,"release"],[275,13,254,17],[276,6,254,19,"environment"],[276,17,254,30],[276,20,254,33,"DEFAULT_ENVIRONMENT"],[277,4,254,53],[277,5,254,54],[277,8,254,58,"client"],[277,14,254,64],[277,18,254,68,"client"],[277,24,254,74],[277,25,254,75,"getOptions"],[277,35,254,85],[277,36,254,86],[277,37,254,87],[277,41,254,92],[277,42,254,93],[277,43,254,94],[279,4,256,2],[280,4,257,2],[280,10,257,8],[281,6,257,10,"userAgent"],[282,4,257,20],[282,5,257,21],[282,8,257,24,"GLOBAL_OBJ"],[282,29,257,34],[282,30,257,35,"navigator"],[282,39,257,44],[282,43,257,48],[282,44,257,49],[282,45,257,50],[283,4,259,2],[283,10,259,8,"session"],[283,17,259,15],[283,20,259,18],[283,24,259,18,"makeSession"],[283,44,259,29],[283,46,259,30],[284,6,260,4,"release"],[284,13,260,11],[285,6,261,4,"environment"],[285,17,261,15],[286,6,262,4,"user"],[286,10,262,8],[286,12,262,10,"currentScope"],[286,24,262,22],[286,25,262,23,"getUser"],[286,32,262,30],[286,33,262,31],[286,34,262,32],[286,38,262,36,"isolationScope"],[286,52,262,50],[286,53,262,51,"getUser"],[286,60,262,58],[286,61,262,59],[286,62,262,60],[287,6,263,4],[287,10,263,8,"userAgent"],[287,19,263,17],[287,23,263,21],[288,8,263,23,"userAgent"],[289,6,263,33],[289,7,263,34],[289,8,263,35],[290,6,264,4],[290,9,264,7,"context"],[291,4,265,2],[291,5,265,3],[291,6,265,4],[293,4,267,2],[294,4,268,2],[294,10,268,8,"currentSession"],[294,24,268,22],[294,27,268,25,"isolationScope"],[294,41,268,39],[294,42,268,40,"getSession"],[294,52,268,50],[294,53,268,51],[294,54,268,52],[295,4,269,2],[295,8,269,6,"currentSession"],[295,22,269,20],[295,26,269,24,"currentSession"],[295,40,269,38],[295,41,269,39,"status"],[295,47,269,45],[295,52,269,50],[295,56,269,54],[295,58,269,56],[296,6,270,4],[296,10,270,4,"updateSession"],[296,32,270,17],[296,34,270,18,"currentSession"],[296,48,270,32],[296,50,270,34],[297,8,270,36,"status"],[297,14,270,42],[297,16,270,44],[298,6,270,53],[298,7,270,54],[298,8,270,55],[299,4,271,2],[300,4,273,2,"endSession"],[300,14,273,12],[300,15,273,13],[300,16,273,14],[302,4,275,2],[303,4,276,2,"isolationScope"],[303,18,276,16],[303,19,276,17,"setSession"],[303,29,276,27],[303,30,276,28,"session"],[303,37,276,35],[303,38,276,36],[305,4,278,2],[306,4,279,2],[307,4,280,2,"currentScope"],[307,16,280,14],[307,17,280,15,"setSession"],[307,27,280,25],[307,28,280,26,"session"],[307,35,280,33],[307,36,280,34],[308,4,282,2],[308,11,282,9,"session"],[308,18,282,16],[309,2,283,0],[311,2,285,0],[312,0,286,0],[313,0,287,0],[314,2,288,0],[314,11,288,9,"endSession"],[314,21,288,19,"endSession"],[314,22,288,19],[314,24,288,22],[315,4,289,2],[315,10,289,8,"isolationScope"],[315,24,289,22],[315,27,289,25],[315,31,289,25,"getIsolationScope"],[315,63,289,42],[315,65,289,43],[315,66,289,44],[316,4,290,2],[316,10,290,8,"currentScope"],[316,22,290,20],[316,25,290,23],[316,29,290,23,"getCurrentScope"],[316,59,290,38],[316,61,290,39],[316,62,290,40],[317,4,292,2],[317,10,292,8,"session"],[317,17,292,15],[317,20,292,18,"currentScope"],[317,32,292,30],[317,33,292,31,"getSession"],[317,43,292,41],[317,44,292,42],[317,45,292,43],[317,49,292,47,"isolationScope"],[317,63,292,61],[317,64,292,62,"getSession"],[317,74,292,72],[317,75,292,73],[317,76,292,74],[318,4,293,2],[318,8,293,6,"session"],[318,15,293,13],[318,17,293,15],[319,6,294,4],[319,10,294,4,"closeSession"],[319,31,294,16],[319,33,294,17,"session"],[319,40,294,24],[319,41,294,25],[320,4,295,2],[321,4,296,2,"_sendSessionUpdate"],[321,22,296,20],[321,23,296,21],[321,24,296,22],[323,4,298,2],[324,4,299,2,"isolationScope"],[324,18,299,16],[324,19,299,17,"setSession"],[324,29,299,27],[324,30,299,28],[324,31,299,29],[326,4,301,2],[327,4,302,2],[328,4,303,2,"currentScope"],[328,16,303,14],[328,17,303,15,"setSession"],[328,27,303,25],[328,28,303,26],[328,29,303,27],[329,2,304,0],[331,2,306,0],[332,0,307,0],[333,0,308,0],[334,2,309,0],[334,11,309,9,"_sendSessionUpdate"],[334,29,309,27,"_sendSessionUpdate"],[334,30,309,27],[334,32,309,30],[335,4,310,2],[335,10,310,8,"isolationScope"],[335,24,310,22],[335,27,310,25],[335,31,310,25,"getIsolationScope"],[335,63,310,42],[335,65,310,43],[335,66,310,44],[336,4,311,2],[336,10,311,8,"currentScope"],[336,22,311,20],[336,25,311,23],[336,29,311,23,"getCurrentScope"],[336,59,311,38],[336,61,311,39],[336,62,311,40],[337,4,312,2],[337,10,312,8,"client"],[337,16,312,14],[337,19,312,17],[337,23,312,17,"getClient"],[337,47,312,26],[337,49,312,27],[337,50,312,28],[338,4,313,2],[339,4,314,2],[340,4,315,2],[340,10,315,8,"session"],[340,17,315,15],[340,20,315,18,"currentScope"],[340,32,315,30],[340,33,315,31,"getSession"],[340,43,315,41],[340,44,315,42],[340,45,315,43],[340,49,315,47,"isolationScope"],[340,63,315,61],[340,64,315,62,"getSession"],[340,74,315,72],[340,75,315,73],[340,76,315,74],[341,4,316,2],[341,8,316,6,"session"],[341,15,316,13],[341,19,316,17,"client"],[341,25,316,23],[341,27,316,25],[342,6,317,4,"client"],[342,12,317,10],[342,13,317,11,"captureSession"],[342,27,317,25],[342,28,317,26,"session"],[342,35,317,33],[342,36,317,34],[343,4,318,2],[344,2,319,0],[346,2,321,0],[347,0,322,0],[348,0,323,0],[349,0,324,0],[350,0,325,0],[351,0,326,0],[352,2,327,0],[352,11,327,9,"captureSession"],[352,25,327,23,"captureSession"],[352,26,327,24,"end"],[352,29,327,27],[352,32,327,30],[352,37,327,35],[352,39,327,37],[353,4,328,2],[354,4,329,2],[354,8,329,6,"end"],[354,11,329,9],[354,13,329,11],[355,6,330,4,"endSession"],[355,16,330,14],[355,17,330,15],[355,18,330,16],[356,6,331,4],[357,4,332,2],[359,4,334,2],[360,4,335,2,"_sendSessionUpdate"],[360,22,335,20],[360,23,335,21],[360,24,335,22],[361,2,336,0],[362,0,336,1],[362,3]],"functionMap":{"names":["<global>","captureException","captureMessage","captureEvent","setContext","setExtras","setExtra","setTags","setTag","setUser","lastEventId","captureCheckIn","withMonitor","finishCheckIn","withIsolationScope$argument_0","Promise.resolve.then$argument_0","Promise.resolve.then$argument_1","flush","close","isInitialized","isEnabled","addEventProcessor","startSession","endSession","_sendSessionUpdate","captureSession"],"mappings":"AAA;ACkB;CDE;AES;CFM;AGS;CHE;AIO;CJE;AKM;CLE;AMO;CNE;AOM;CPE;AQU;CRE;ASO;CTE;AUa;CVE;AWS;CXY;AYS;ECQ;GDE;4BEE;QCW;SDE;QEC;SFG;GFO;CZC;AiBU;CjBO;AkBU;ClBO;AmBK;CnBE;AoBG;CpBG;AqBO;CrBE;AsBS;CtBkC;AuBK;CvBgB;AwBK;CxBU;AyBQ;CzBS"}},"type":"js/module"}]}