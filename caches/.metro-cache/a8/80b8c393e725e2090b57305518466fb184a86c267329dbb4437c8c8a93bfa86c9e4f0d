{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.utf8ToBytes = utf8ToBytes;\n  // Adapted from https://github.com/feross/buffer/blob/795bbb5bda1b39f1370ebd784bea6107b087e3a7/index.js#L1956\n  // The MIT License (MIT)\n  // Copyright (c) Feross Aboukhadijeh, and other contributors.\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the \"Software\"), to deal\n  // in the Software without restriction, including without limitation the rights\n  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  // copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n  // The above copyright notice and this permission notice shall be included in\n  // all copies or substantial portions of the Software.\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  // THE SOFTWARE.\n  /* eslint-disable */\n  /**\n   * Convert a string to a byte array\n   */\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for (let i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i);\n      // is surrogate component\n      if (codePoint > 0xd7ff && codePoint < 0xe000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xdbff) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n            continue;\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n            continue;\n          }\n          // valid lead\n          leadSurrogate = codePoint;\n          continue;\n        }\n        // 2 leads in a row\n        if (codePoint < 0xdc00) {\n          if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n          leadSurrogate = codePoint;\n          continue;\n        }\n        // valid surrogate pair\n        codePoint = (leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n      }\n      leadSurrogate = null;\n      // encode utf8\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break;\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break;\n        bytes.push(codePoint >> 0x6 | 0xc0, codePoint & 0x3f | 0x80);\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break;\n        bytes.push(codePoint >> 0xc | 0xe0, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break;\n        bytes.push(codePoint >> 0x12 | 0xf0, codePoint >> 0xc & 0x3f | 0x80, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n      } else {\n        throw new Error('Invalid code point');\n      }\n    }\n    return bytes;\n  }\n});","lineCount":86,"map":[[6,2,1,0],[7,2,2,0],[8,2,3,0],[9,2,4,0],[10,2,5,0],[11,2,6,0],[12,2,7,0],[13,2,8,0],[14,2,9,0],[15,2,10,0],[16,2,11,0],[17,2,12,0],[18,2,13,0],[19,2,14,0],[20,2,15,0],[21,2,16,0],[22,2,17,0],[23,2,18,0],[24,2,19,0],[25,2,20,0],[26,0,21,0],[27,0,22,0],[28,2,23,7],[28,11,23,16,"utf8ToBytes"],[28,22,23,27,"utf8ToBytes"],[28,23,23,28,"string"],[28,29,23,34],[28,31,23,36,"units"],[28,36,23,41],[28,38,23,43],[29,4,24,4,"units"],[29,9,24,9],[29,12,24,12,"units"],[29,17,24,17],[29,21,24,21,"Infinity"],[29,29,24,29],[30,4,25,4],[30,8,25,8,"codePoint"],[30,17,25,17],[31,4,26,4],[31,10,26,10,"length"],[31,16,26,16],[31,19,26,19,"string"],[31,25,26,25],[31,26,26,26,"length"],[31,32,26,32],[32,4,27,4],[32,8,27,8,"leadSurrogate"],[32,21,27,21],[32,24,27,24],[32,28,27,28],[33,4,28,4],[33,10,28,10,"bytes"],[33,15,28,15],[33,18,28,18],[33,20,28,20],[34,4,29,4],[34,9,29,9],[34,13,29,13,"i"],[34,14,29,14],[34,17,29,17],[34,18,29,18],[34,20,29,20,"i"],[34,21,29,21],[34,24,29,24,"length"],[34,30,29,30],[34,32,29,32],[34,34,29,34,"i"],[34,35,29,35],[34,37,29,37],[35,6,30,8,"codePoint"],[35,15,30,17],[35,18,30,20,"string"],[35,24,30,26],[35,25,30,27,"charCodeAt"],[35,35,30,37],[35,36,30,38,"i"],[35,37,30,39],[35,38,30,40],[36,6,31,8],[37,6,32,8],[37,10,32,12,"codePoint"],[37,19,32,21],[37,22,32,24],[37,28,32,30],[37,32,32,34,"codePoint"],[37,41,32,43],[37,44,32,46],[37,50,32,52],[37,52,32,54],[38,8,33,12],[39,8,34,12],[39,12,34,16],[39,13,34,17,"leadSurrogate"],[39,26,34,30],[39,28,34,32],[40,10,35,16],[41,10,36,16],[41,14,36,20,"codePoint"],[41,23,36,29],[41,26,36,32],[41,32,36,38],[41,34,36,40],[42,12,37,20],[43,12,38,20],[43,16,38,24],[43,17,38,25,"units"],[43,22,38,30],[43,26,38,34],[43,27,38,35],[43,31,38,39],[43,32,38,40],[43,33,38,41],[43,35,39,24,"bytes"],[43,40,39,29],[43,41,39,30,"push"],[43,45,39,34],[43,46,39,35],[43,50,39,39],[43,52,39,41],[43,56,39,45],[43,58,39,47],[43,62,39,51],[43,63,39,52],[44,12,40,20],[45,10,41,16],[45,11,41,17],[45,17,42,21],[45,21,42,25,"i"],[45,22,42,26],[45,25,42,29],[45,26,42,30],[45,31,42,35,"length"],[45,37,42,41],[45,39,42,43],[46,12,43,20],[47,12,44,20],[47,16,44,24],[47,17,44,25,"units"],[47,22,44,30],[47,26,44,34],[47,27,44,35],[47,31,44,39],[47,32,44,40],[47,33,44,41],[47,35,45,24,"bytes"],[47,40,45,29],[47,41,45,30,"push"],[47,45,45,34],[47,46,45,35],[47,50,45,39],[47,52,45,41],[47,56,45,45],[47,58,45,47],[47,62,45,51],[47,63,45,52],[48,12,46,20],[49,10,47,16],[50,10,48,16],[51,10,49,16,"leadSurrogate"],[51,23,49,29],[51,26,49,32,"codePoint"],[51,35,49,41],[52,10,50,16],[53,8,51,12],[54,8,52,12],[55,8,53,12],[55,12,53,16,"codePoint"],[55,21,53,25],[55,24,53,28],[55,30,53,34],[55,32,53,36],[56,10,54,16],[56,14,54,20],[56,15,54,21,"units"],[56,20,54,26],[56,24,54,30],[56,25,54,31],[56,29,54,35],[56,30,54,36],[56,31,54,37],[56,33,55,20,"bytes"],[56,38,55,25],[56,39,55,26,"push"],[56,43,55,30],[56,44,55,31],[56,48,55,35],[56,50,55,37],[56,54,55,41],[56,56,55,43],[56,60,55,47],[56,61,55,48],[57,10,56,16,"leadSurrogate"],[57,23,56,29],[57,26,56,32,"codePoint"],[57,35,56,41],[58,10,57,16],[59,8,58,12],[60,8,59,12],[61,8,60,12,"codePoint"],[61,17,60,21],[61,20,60,24],[61,21,60,27,"leadSurrogate"],[61,34,60,40],[61,37,60,43],[61,43,60,49],[61,47,60,54],[61,49,60,56],[61,52,60,61,"codePoint"],[61,61,60,70],[61,64,60,73],[61,70,60,80],[61,74,60,84],[61,81,60,91],[62,6,61,8],[62,7,61,9],[62,13,62,13],[62,17,62,17,"leadSurrogate"],[62,30,62,30],[62,32,62,32],[63,8,63,12],[64,8,64,12],[64,12,64,16],[64,13,64,17,"units"],[64,18,64,22],[64,22,64,26],[64,23,64,27],[64,27,64,31],[64,28,64,32],[64,29,64,33],[64,31,65,16,"bytes"],[64,36,65,21],[64,37,65,22,"push"],[64,41,65,26],[64,42,65,27],[64,46,65,31],[64,48,65,33],[64,52,65,37],[64,54,65,39],[64,58,65,43],[64,59,65,44],[65,6,66,8],[66,6,67,8,"leadSurrogate"],[66,19,67,21],[66,22,67,24],[66,26,67,28],[67,6,68,8],[68,6,69,8],[68,10,69,12,"codePoint"],[68,19,69,21],[68,22,69,24],[68,26,69,28],[68,28,69,30],[69,8,70,12],[69,12,70,16],[69,13,70,17,"units"],[69,18,70,22],[69,22,70,26],[69,23,70,27],[69,27,70,31],[69,28,70,32],[69,30,71,16],[70,8,72,12,"bytes"],[70,13,72,17],[70,14,72,18,"push"],[70,18,72,22],[70,19,72,23,"codePoint"],[70,28,72,32],[70,29,72,33],[71,6,73,8],[71,7,73,9],[71,13,74,13],[71,17,74,17,"codePoint"],[71,26,74,26],[71,29,74,29],[71,34,74,34],[71,36,74,36],[72,8,75,12],[72,12,75,16],[72,13,75,17,"units"],[72,18,75,22],[72,22,75,26],[72,23,75,27],[72,27,75,31],[72,28,75,32],[72,30,76,16],[73,8,77,12,"bytes"],[73,13,77,17],[73,14,77,18,"push"],[73,18,77,22],[73,19,77,24,"codePoint"],[73,28,77,33],[73,32,77,37],[73,35,77,40],[73,38,77,44],[73,42,77,48],[73,44,77,51,"codePoint"],[73,53,77,60],[73,56,77,63],[73,60,77,67],[73,63,77,71],[73,67,77,75],[73,68,77,76],[74,6,78,8],[74,7,78,9],[74,13,79,13],[74,17,79,17,"codePoint"],[74,26,79,26],[74,29,79,29],[74,36,79,36],[74,38,79,38],[75,8,80,12],[75,12,80,16],[75,13,80,17,"units"],[75,18,80,22],[75,22,80,26],[75,23,80,27],[75,27,80,31],[75,28,80,32],[75,30,81,16],[76,8,82,12,"bytes"],[76,13,82,17],[76,14,82,18,"push"],[76,18,82,22],[76,19,82,24,"codePoint"],[76,28,82,33],[76,32,82,37],[76,35,82,40],[76,38,82,44],[76,42,82,48],[76,44,82,52,"codePoint"],[76,53,82,61],[76,57,82,65],[76,60,82,68],[76,63,82,72],[76,67,82,76],[76,70,82,80],[76,74,82,84],[76,76,82,87,"codePoint"],[76,85,82,96],[76,88,82,99],[76,92,82,103],[76,95,82,107],[76,99,82,111],[76,100,82,112],[77,6,83,8],[77,7,83,9],[77,13,84,13],[77,17,84,17,"codePoint"],[77,26,84,26],[77,29,84,29],[77,37,84,37],[77,39,84,39],[78,8,85,12],[78,12,85,16],[78,13,85,17,"units"],[78,18,85,22],[78,22,85,26],[78,23,85,27],[78,27,85,31],[78,28,85,32],[78,30,86,16],[79,8,87,12,"bytes"],[79,13,87,17],[79,14,87,18,"push"],[79,18,87,22],[79,19,87,24,"codePoint"],[79,28,87,33],[79,32,87,37],[79,36,87,41],[79,39,87,45],[79,43,87,49],[79,45,87,53,"codePoint"],[79,54,87,62],[79,58,87,66],[79,61,87,69],[79,64,87,73],[79,68,87,77],[79,71,87,81],[79,75,87,85],[79,77,87,89,"codePoint"],[79,86,87,98],[79,90,87,102],[79,93,87,105],[79,96,87,109],[79,100,87,113],[79,103,87,117],[79,107,87,121],[79,109,87,124,"codePoint"],[79,118,87,133],[79,121,87,136],[79,125,87,140],[79,128,87,144],[79,132,87,148],[79,133,87,149],[80,6,88,8],[80,7,88,9],[80,13,89,13],[81,8,90,12],[81,14,90,18],[81,18,90,22,"Error"],[81,23,90,27],[81,24,90,28],[81,44,90,48],[81,45,90,49],[82,6,91,8],[83,4,92,4],[84,4,93,4],[84,11,93,11,"bytes"],[84,16,93,16],[85,2,94,0],[86,0,94,1],[86,3]],"functionMap":{"names":["<global>","utf8ToBytes"],"mappings":"AAA;OCsB;CDuE"}},"type":"js/module"}]}