{"dependencies":[{"name":"@sentry-internal/browser-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":161,"index":161}}],"key":"NhwjGxy6N7nYR3SR4JfgASTvmbA=","exportNames":["*"]}},{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":162},"end":{"line":2,"column":369,"index":531}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../helpers.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":532},"end":{"line":3,"column":39,"index":571}}],"key":"xGB1RU1bemGAHq3E44EIR7oSA2c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultRequestInstrumentationOptions = void 0;\n  exports.instrumentOutgoingRequests = instrumentOutgoingRequests;\n  exports.shouldAttachHeaders = shouldAttachHeaders;\n  exports.xhrCallback = xhrCallback;\n  var _browserUtils = require(_dependencyMap[0], \"@sentry-internal/browser-utils\");\n  var _core = require(_dependencyMap[1], \"@sentry/core\");\n  var _helpers = require(_dependencyMap[2], \"../helpers.js\");\n  /** Options for Request Instrumentation */\n\n  const responseToSpanId = new WeakMap();\n  const spanIdToEndTimestamp = new Map();\n  const defaultRequestInstrumentationOptions = exports.defaultRequestInstrumentationOptions = {\n    traceFetch: true,\n    traceXHR: true,\n    enableHTTPTimings: true,\n    trackFetchStreamPerformance: false\n  };\n\n  /** Registers span creators for xhr and fetch requests  */\n  function instrumentOutgoingRequests(client, _options) {\n    const {\n      traceFetch,\n      traceXHR,\n      trackFetchStreamPerformance,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      tracePropagationTargets\n    } = {\n      traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n      traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n      trackFetchStreamPerformance: defaultRequestInstrumentationOptions.trackFetchStreamPerformance,\n      ..._options\n    };\n    const shouldCreateSpan = typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : _ => true;\n    const shouldAttachHeadersWithTargets = url => shouldAttachHeaders(url, tracePropagationTargets);\n    const spans = {};\n    if (traceFetch) {\n      // Keeping track of http requests, whose body payloads resolved later than the initial resolved request\n      // e.g. streaming using server sent events (SSE)\n      client.addEventProcessor(event => {\n        if (event.type === 'transaction' && event.spans) {\n          event.spans.forEach(span => {\n            if (span.op === 'http.client') {\n              const updatedTimestamp = spanIdToEndTimestamp.get(span.span_id);\n              if (updatedTimestamp) {\n                span.timestamp = updatedTimestamp / 1000;\n                spanIdToEndTimestamp.delete(span.span_id);\n              }\n            }\n          });\n        }\n        return event;\n      });\n      if (trackFetchStreamPerformance) {\n        (0, _core.addFetchEndInstrumentationHandler)(handlerData => {\n          if (handlerData.response) {\n            const span = responseToSpanId.get(handlerData.response);\n            if (span && handlerData.endTimestamp) {\n              spanIdToEndTimestamp.set(span, handlerData.endTimestamp);\n            }\n          }\n        });\n      }\n      (0, _core.addFetchInstrumentationHandler)(handlerData => {\n        const createdSpan = (0, _core.instrumentFetchRequest)(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n        if (handlerData.response && handlerData.fetchData.__span) {\n          responseToSpanId.set(handlerData.response, handlerData.fetchData.__span);\n        }\n\n        // We cannot use `window.location` in the generic fetch instrumentation,\n        // but we need it for reliable `server.address` attribute.\n        // so we extend this in here\n        if (createdSpan) {\n          const fullUrl = getFullURL(handlerData.fetchData.url);\n          const host = fullUrl ? (0, _core.parseUrl)(fullUrl).host : undefined;\n          createdSpan.setAttributes({\n            'http.url': fullUrl,\n            'server.address': host\n          });\n        }\n        if (enableHTTPTimings && createdSpan) {\n          addHTTPTimings(createdSpan);\n        }\n      });\n    }\n    if (traceXHR) {\n      (0, _browserUtils.addXhrInstrumentationHandler)(handlerData => {\n        const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n        if (enableHTTPTimings && createdSpan) {\n          addHTTPTimings(createdSpan);\n        }\n      });\n    }\n  }\n  function isPerformanceResourceTiming(entry) {\n    return entry.entryType === 'resource' && 'initiatorType' in entry && typeof entry.nextHopProtocol === 'string' && (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest');\n  }\n\n  /**\n   * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n   * so that when timings hit their per-browser limit they don't need to be removed.\n   *\n   * @param span A span that has yet to be finished, must contain `url` on data.\n   */\n  function addHTTPTimings(span) {\n    const {\n      url\n    } = (0, _core.spanToJSON)(span).data || {};\n    if (!url || typeof url !== 'string') {\n      return;\n    }\n    const cleanup = (0, _browserUtils.addPerformanceInstrumentationHandler)('resource', ({\n      entries\n    }) => {\n      entries.forEach(entry => {\n        if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n          const spanData = resourceTimingEntryToSpanData(entry);\n          spanData.forEach(data => span.setAttribute(...data));\n          // In the next tick, clean this handler up\n          // We have to wait here because otherwise this cleans itself up before it is fully done\n          setTimeout(cleanup);\n        }\n      });\n    });\n  }\n  function getAbsoluteTime(time = 0) {\n    return ((_core.browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n  }\n  function resourceTimingEntryToSpanData(resourceTiming) {\n    const {\n      name,\n      version\n    } = (0, _browserUtils.extractNetworkProtocol)(resourceTiming.nextHopProtocol);\n    const timingSpanData = [];\n    timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n    if (!_core.browserPerformanceTimeOrigin) {\n      return timingSpanData;\n    }\n    return [...timingSpanData, ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)], ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)], ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)], ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)], ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)], ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)], ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)], ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)], ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)], ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)]];\n  }\n\n  /**\n   * A function that determines whether to attach tracing headers to a request.\n   * We only export this function for testing purposes.\n   */\n  function shouldAttachHeaders(targetUrl, tracePropagationTargets) {\n    // window.location.href not being defined is an edge case in the browser but we need to handle it.\n    // Potentially dangerous situations where it may not be defined: Browser Extensions, Web Workers, patching of the location obj\n    const href = _helpers.WINDOW.location && _helpers.WINDOW.location.href;\n    if (!href) {\n      // If there is no window.location.origin, we default to only attaching tracing headers to relative requests, i.e. ones that start with `/`\n      // BIG DISCLAIMER: Users can call URLs with a double slash (fetch(\"//example.com/api\")), this is a shorthand for \"send to the same protocol\",\n      // so we need a to exclude those requests, because they might be cross origin.\n      const isRelativeSameOriginRequest = !!targetUrl.match(/^\\/(?!\\/)/);\n      if (!tracePropagationTargets) {\n        return isRelativeSameOriginRequest;\n      } else {\n        return (0, _core.stringMatchesSomePattern)(targetUrl, tracePropagationTargets);\n      }\n    } else {\n      let resolvedUrl;\n      let currentOrigin;\n\n      // URL parsing may fail, we default to not attaching trace headers in that case.\n      try {\n        resolvedUrl = new URL(targetUrl, href);\n        currentOrigin = new URL(href).origin;\n      } catch (e) {\n        return false;\n      }\n      const isSameOriginRequest = resolvedUrl.origin === currentOrigin;\n      if (!tracePropagationTargets) {\n        return isSameOriginRequest;\n      } else {\n        return (0, _core.stringMatchesSomePattern)(resolvedUrl.toString(), tracePropagationTargets) || isSameOriginRequest && (0, _core.stringMatchesSomePattern)(resolvedUrl.pathname, tracePropagationTargets);\n      }\n    }\n  }\n\n  /**\n   * Create and track xhr request spans\n   *\n   * @returns Span if a span was created, otherwise void.\n   */\n  function xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeaders, spans) {\n    const xhr = handlerData.xhr;\n    const sentryXhrData = xhr && xhr[_browserUtils.SENTRY_XHR_DATA_KEY];\n    if (!xhr || xhr.__sentry_own_request__ || !sentryXhrData) {\n      return undefined;\n    }\n    const shouldCreateSpanResult = (0, _core.hasTracingEnabled)() && shouldCreateSpan(sentryXhrData.url);\n\n    // check first if the request has finished and is tracked by an existing span which should now end\n    if (handlerData.endTimestamp && shouldCreateSpanResult) {\n      const spanId = xhr.__sentry_xhr_span_id__;\n      if (!spanId) return;\n      const span = spans[spanId];\n      if (span && sentryXhrData.status_code !== undefined) {\n        (0, _core.setHttpStatus)(span, sentryXhrData.status_code);\n        span.end();\n\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete spans[spanId];\n      }\n      return undefined;\n    }\n    const fullUrl = getFullURL(sentryXhrData.url);\n    const host = fullUrl ? (0, _core.parseUrl)(fullUrl).host : undefined;\n    const hasParent = !!(0, _core.getActiveSpan)();\n    const span = shouldCreateSpanResult && hasParent ? (0, _core.startInactiveSpan)({\n      name: `${sentryXhrData.method} ${sentryXhrData.url}`,\n      attributes: {\n        type: 'xhr',\n        'http.method': sentryXhrData.method,\n        'http.url': fullUrl,\n        url: sentryXhrData.url,\n        'server.address': host,\n        [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser',\n        [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client'\n      }\n    }) : new _core.SentryNonRecordingSpan();\n    xhr.__sentry_xhr_span_id__ = span.spanContext().spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n    if (shouldAttachHeaders(sentryXhrData.url)) {\n      addTracingHeadersToXhrRequest(xhr,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      (0, _core.hasTracingEnabled)() && hasParent ? span : undefined);\n    }\n    return span;\n  }\n  function addTracingHeadersToXhrRequest(xhr, span) {\n    const {\n      'sentry-trace': sentryTrace,\n      baggage\n    } = (0, _core.getTraceData)({\n      span\n    });\n    if (sentryTrace) {\n      setHeaderOnXhr(xhr, sentryTrace, baggage);\n    }\n  }\n  function setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader('sentry-trace', sentryTraceHeader);\n      if (sentryBaggageHeader) {\n        // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n        // We can therefore simply set a baggage header without checking what was there before\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        xhr.setRequestHeader('baggage', sentryBaggageHeader);\n      }\n    } catch (_) {\n      // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n    }\n  }\n  function getFullURL(url) {\n    try {\n      // By adding a base URL to new URL(), this will also work for relative urls\n      // If `url` is a full URL, the base URL is ignored anyhow\n      const parsed = new URL(url, _helpers.WINDOW.location.origin);\n      return parsed.href;\n    } catch (e2) {\n      return undefined;\n    }\n  }\n});","lineCount":273,"map":[[9,2,1,0],[9,6,1,0,"_browserUtils"],[9,19,1,0],[9,22,1,0,"require"],[9,29,1,0],[9,30,1,0,"_dependencyMap"],[9,44,1,0],[10,2,2,0],[10,6,2,0,"_core"],[10,11,2,0],[10,14,2,0,"require"],[10,21,2,0],[10,22,2,0,"_dependencyMap"],[10,36,2,0],[11,2,3,0],[11,6,3,0,"_helpers"],[11,14,3,0],[11,17,3,0,"require"],[11,24,3,0],[11,25,3,0,"_dependencyMap"],[11,39,3,0],[12,2,5,0],[14,2,7,0],[14,8,7,6,"responseToSpanId"],[14,24,7,22],[14,27,7,25],[14,31,7,29,"WeakMap"],[14,38,7,36],[14,39,7,37],[14,40,7,38],[15,2,8,0],[15,8,8,6,"spanIdToEndTimestamp"],[15,28,8,26],[15,31,8,29],[15,35,8,33,"Map"],[15,38,8,36],[15,39,8,37],[15,40,8,38],[16,2,10,0],[16,8,10,6,"defaultRequestInstrumentationOptions"],[16,44,10,42],[16,47,10,42,"exports"],[16,54,10,42],[16,55,10,42,"defaultRequestInstrumentationOptions"],[16,91,10,42],[16,94,10,45],[17,4,11,2,"traceFetch"],[17,14,11,12],[17,16,11,14],[17,20,11,18],[18,4,12,2,"traceXHR"],[18,12,12,10],[18,14,12,12],[18,18,12,16],[19,4,13,2,"enableHTTPTimings"],[19,21,13,19],[19,23,13,21],[19,27,13,25],[20,4,14,2,"trackFetchStreamPerformance"],[20,31,14,29],[20,33,14,31],[21,2,15,0],[21,3,15,1],[23,2,17,0],[24,2,18,0],[24,11,18,9,"instrumentOutgoingRequests"],[24,37,18,35,"instrumentOutgoingRequests"],[24,38,18,36,"client"],[24,44,18,42],[24,46,18,44,"_options"],[24,54,18,52],[24,56,18,54],[25,4,19,2],[25,10,19,8],[26,6,20,4,"traceFetch"],[26,16,20,14],[27,6,21,4,"traceXHR"],[27,14,21,12],[28,6,22,4,"trackFetchStreamPerformance"],[28,33,22,31],[29,6,23,4,"shouldCreateSpanForRequest"],[29,32,23,30],[30,6,24,4,"enableHTTPTimings"],[30,23,24,21],[31,6,25,4,"tracePropagationTargets"],[32,4,26,2],[32,5,26,3],[32,8,26,6],[33,6,27,4,"traceFetch"],[33,16,27,14],[33,18,27,16,"defaultRequestInstrumentationOptions"],[33,54,27,52],[33,55,27,53,"traceFetch"],[33,65,27,63],[34,6,28,4,"traceXHR"],[34,14,28,12],[34,16,28,14,"defaultRequestInstrumentationOptions"],[34,52,28,50],[34,53,28,51,"traceXHR"],[34,61,28,59],[35,6,29,4,"trackFetchStreamPerformance"],[35,33,29,31],[35,35,29,33,"defaultRequestInstrumentationOptions"],[35,71,29,69],[35,72,29,70,"trackFetchStreamPerformance"],[35,99,29,97],[36,6,30,4],[36,9,30,7,"_options"],[37,4,31,2],[37,5,31,3],[38,4,33,2],[38,10,33,8,"shouldCreateSpan"],[38,26,33,24],[38,29,34,4],[38,36,34,11,"shouldCreateSpanForRequest"],[38,62,34,37],[38,67,34,42],[38,77,34,52],[38,80,34,55,"shouldCreateSpanForRequest"],[38,106,34,81],[38,109,34,85,"_"],[38,110,34,86],[38,114,34,91],[38,118,34,95],[39,4,36,2],[39,10,36,8,"shouldAttachHeadersWithTargets"],[39,40,36,38],[39,43,36,42,"url"],[39,46,36,45],[39,50,36,50,"shouldAttachHeaders"],[39,69,36,69],[39,70,36,70,"url"],[39,73,36,73],[39,75,36,75,"tracePropagationTargets"],[39,98,36,98],[39,99,36,99],[40,4,38,2],[40,10,38,8,"spans"],[40,15,38,13],[40,18,38,16],[40,19,38,17],[40,20,38,18],[41,4,40,2],[41,8,40,6,"traceFetch"],[41,18,40,16],[41,20,40,18],[42,6,41,4],[43,6,42,4],[44,6,43,4,"client"],[44,12,43,10],[44,13,43,11,"addEventProcessor"],[44,30,43,28],[44,31,43,29,"event"],[44,36,43,34],[44,40,43,38],[45,8,44,6],[45,12,44,10,"event"],[45,17,44,15],[45,18,44,16,"type"],[45,22,44,20],[45,27,44,25],[45,40,44,38],[45,44,44,42,"event"],[45,49,44,47],[45,50,44,48,"spans"],[45,55,44,53],[45,57,44,55],[46,10,45,8,"event"],[46,15,45,13],[46,16,45,14,"spans"],[46,21,45,19],[46,22,45,20,"forEach"],[46,29,45,27],[46,30,45,28,"span"],[46,34,45,32],[46,38,45,36],[47,12,46,10],[47,16,46,14,"span"],[47,20,46,18],[47,21,46,19,"op"],[47,23,46,21],[47,28,46,26],[47,41,46,39],[47,43,46,41],[48,14,47,12],[48,20,47,18,"updatedTimestamp"],[48,36,47,34],[48,39,47,37,"spanIdToEndTimestamp"],[48,59,47,57],[48,60,47,58,"get"],[48,63,47,61],[48,64,47,62,"span"],[48,68,47,66],[48,69,47,67,"span_id"],[48,76,47,74],[48,77,47,75],[49,14,48,12],[49,18,48,16,"updatedTimestamp"],[49,34,48,32],[49,36,48,34],[50,16,49,14,"span"],[50,20,49,18],[50,21,49,19,"timestamp"],[50,30,49,28],[50,33,49,31,"updatedTimestamp"],[50,49,49,47],[50,52,49,50],[50,56,49,54],[51,16,50,14,"spanIdToEndTimestamp"],[51,36,50,34],[51,37,50,35,"delete"],[51,43,50,41],[51,44,50,42,"span"],[51,48,50,46],[51,49,50,47,"span_id"],[51,56,50,54],[51,57,50,55],[52,14,51,12],[53,12,52,10],[54,10,53,8],[54,11,53,9],[54,12,53,10],[55,8,54,6],[56,8,55,6],[56,15,55,13,"event"],[56,20,55,18],[57,6,56,4],[57,7,56,5],[57,8,56,6],[58,6,58,4],[58,10,58,8,"trackFetchStreamPerformance"],[58,37,58,35],[58,39,58,37],[59,8,59,6],[59,12,59,6,"addFetchEndInstrumentationHandler"],[59,51,59,39],[59,53,59,40,"handlerData"],[59,64,59,51],[59,68,59,55],[60,10,60,8],[60,14,60,12,"handlerData"],[60,25,60,23],[60,26,60,24,"response"],[60,34,60,32],[60,36,60,34],[61,12,61,10],[61,18,61,16,"span"],[61,22,61,20],[61,25,61,23,"responseToSpanId"],[61,41,61,39],[61,42,61,40,"get"],[61,45,61,43],[61,46,61,44,"handlerData"],[61,57,61,55],[61,58,61,56,"response"],[61,66,61,64],[61,67,61,65],[62,12,62,10],[62,16,62,14,"span"],[62,20,62,18],[62,24,62,22,"handlerData"],[62,35,62,33],[62,36,62,34,"endTimestamp"],[62,48,62,46],[62,50,62,48],[63,14,63,12,"spanIdToEndTimestamp"],[63,34,63,32],[63,35,63,33,"set"],[63,38,63,36],[63,39,63,37,"span"],[63,43,63,41],[63,45,63,43,"handlerData"],[63,56,63,54],[63,57,63,55,"endTimestamp"],[63,69,63,67],[63,70,63,68],[64,12,64,10],[65,10,65,8],[66,8,66,6],[66,9,66,7],[66,10,66,8],[67,6,67,4],[68,6,69,4],[68,10,69,4,"addFetchInstrumentationHandler"],[68,46,69,34],[68,48,69,35,"handlerData"],[68,59,69,46],[68,63,69,50],[69,8,70,6],[69,14,70,12,"createdSpan"],[69,25,70,23],[69,28,70,26],[69,32,70,26,"instrumentFetchRequest"],[69,60,70,48],[69,62,70,49,"handlerData"],[69,73,70,60],[69,75,70,62,"shouldCreateSpan"],[69,91,70,78],[69,93,70,80,"shouldAttachHeadersWithTargets"],[69,123,70,110],[69,125,70,112,"spans"],[69,130,70,117],[69,131,70,118],[70,8,72,6],[70,12,72,10,"handlerData"],[70,23,72,21],[70,24,72,22,"response"],[70,32,72,30],[70,36,72,34,"handlerData"],[70,47,72,45],[70,48,72,46,"fetchData"],[70,57,72,55],[70,58,72,56,"__span"],[70,64,72,62],[70,66,72,64],[71,10,73,8,"responseToSpanId"],[71,26,73,24],[71,27,73,25,"set"],[71,30,73,28],[71,31,73,29,"handlerData"],[71,42,73,40],[71,43,73,41,"response"],[71,51,73,49],[71,53,73,51,"handlerData"],[71,64,73,62],[71,65,73,63,"fetchData"],[71,74,73,72],[71,75,73,73,"__span"],[71,81,73,79],[71,82,73,80],[72,8,74,6],[74,8,76,6],[75,8,77,6],[76,8,78,6],[77,8,79,6],[77,12,79,10,"createdSpan"],[77,23,79,21],[77,25,79,23],[78,10,80,8],[78,16,80,14,"fullUrl"],[78,23,80,21],[78,26,80,24,"getFullURL"],[78,36,80,34],[78,37,80,35,"handlerData"],[78,48,80,46],[78,49,80,47,"fetchData"],[78,58,80,56],[78,59,80,57,"url"],[78,62,80,60],[78,63,80,61],[79,10,81,8],[79,16,81,14,"host"],[79,20,81,18],[79,23,81,21,"fullUrl"],[79,30,81,28],[79,33,81,31],[79,37,81,31,"parseUrl"],[79,51,81,39],[79,53,81,40,"fullUrl"],[79,60,81,47],[79,61,81,48],[79,62,81,49,"host"],[79,66,81,53],[79,69,81,56,"undefined"],[79,78,81,65],[80,10,82,8,"createdSpan"],[80,21,82,19],[80,22,82,20,"setAttributes"],[80,35,82,33],[80,36,82,34],[81,12,83,10],[81,22,83,20],[81,24,83,22,"fullUrl"],[81,31,83,29],[82,12,84,10],[82,28,84,26],[82,30,84,28,"host"],[83,10,85,8],[83,11,85,9],[83,12,85,10],[84,8,86,6],[85,8,88,6],[85,12,88,10,"enableHTTPTimings"],[85,29,88,27],[85,33,88,31,"createdSpan"],[85,44,88,42],[85,46,88,44],[86,10,89,8,"addHTTPTimings"],[86,24,89,22],[86,25,89,23,"createdSpan"],[86,36,89,34],[86,37,89,35],[87,8,90,6],[88,6,91,4],[88,7,91,5],[88,8,91,6],[89,4,92,2],[90,4,94,2],[90,8,94,6,"traceXHR"],[90,16,94,14],[90,18,94,16],[91,6,95,4],[91,10,95,4,"addXhrInstrumentationHandler"],[91,52,95,32],[91,54,95,33,"handlerData"],[91,65,95,44],[91,69,95,48],[92,8,96,6],[92,14,96,12,"createdSpan"],[92,25,96,23],[92,28,96,26,"xhrCallback"],[92,39,96,37],[92,40,96,38,"handlerData"],[92,51,96,49],[92,53,96,51,"shouldCreateSpan"],[92,69,96,67],[92,71,96,69,"shouldAttachHeadersWithTargets"],[92,101,96,99],[92,103,96,101,"spans"],[92,108,96,106],[92,109,96,107],[93,8,97,6],[93,12,97,10,"enableHTTPTimings"],[93,29,97,27],[93,33,97,31,"createdSpan"],[93,44,97,42],[93,46,97,44],[94,10,98,8,"addHTTPTimings"],[94,24,98,22],[94,25,98,23,"createdSpan"],[94,36,98,34],[94,37,98,35],[95,8,99,6],[96,6,100,4],[96,7,100,5],[96,8,100,6],[97,4,101,2],[98,2,102,0],[99,2,104,0],[99,11,104,9,"isPerformanceResourceTiming"],[99,38,104,36,"isPerformanceResourceTiming"],[99,39,104,37,"entry"],[99,44,104,42],[99,46,104,44],[100,4,105,2],[100,11,106,4,"entry"],[100,16,106,9],[100,17,106,10,"entryType"],[100,26,106,19],[100,31,106,24],[100,41,106,34],[100,45,107,4],[100,60,107,19],[100,64,107,23,"entry"],[100,69,107,28],[100,73,108,4],[100,80,108,12,"entry"],[100,85,108,17],[100,86,108,20,"nextHopProtocol"],[100,101,108,35],[100,106,108,40],[100,114,108,48],[100,119,109,5,"entry"],[100,124,109,10],[100,125,109,11,"initiatorType"],[100,138,109,24],[100,143,109,29],[100,150,109,36],[100,154,109,40,"entry"],[100,159,109,45],[100,160,109,46,"initiatorType"],[100,173,109,59],[100,178,109,64],[100,194,109,80],[100,195,109,81],[101,2,111,0],[103,2,113,0],[104,0,114,0],[105,0,115,0],[106,0,116,0],[107,0,117,0],[108,0,118,0],[109,2,119,0],[109,11,119,9,"addHTTPTimings"],[109,25,119,23,"addHTTPTimings"],[109,26,119,24,"span"],[109,30,119,28],[109,32,119,30],[110,4,120,2],[110,10,120,8],[111,6,120,10,"url"],[112,4,120,14],[112,5,120,15],[112,8,120,18],[112,12,120,18,"spanToJSON"],[112,28,120,28],[112,30,120,29,"span"],[112,34,120,33],[112,35,120,34],[112,36,120,35,"data"],[112,40,120,39],[112,44,120,43],[112,45,120,44],[112,46,120,45],[113,4,122,2],[113,8,122,6],[113,9,122,7,"url"],[113,12,122,10],[113,16,122,14],[113,23,122,21,"url"],[113,26,122,24],[113,31,122,29],[113,39,122,37],[113,41,122,39],[114,6,123,4],[115,4,124,2],[116,4,126,2],[116,10,126,8,"cleanup"],[116,17,126,15],[116,20,126,18],[116,24,126,18,"addPerformanceInstrumentationHandler"],[116,74,126,54],[116,76,126,55],[116,86,126,65],[116,88,126,67],[116,89,126,68],[117,6,126,70,"entries"],[118,4,126,78],[118,5,126,79],[118,10,126,84],[119,6,127,4,"entries"],[119,13,127,11],[119,14,127,12,"forEach"],[119,21,127,19],[119,22,127,20,"entry"],[119,27,127,25],[119,31,127,29],[120,8,128,6],[120,12,128,10,"isPerformanceResourceTiming"],[120,39,128,37],[120,40,128,38,"entry"],[120,45,128,43],[120,46,128,44],[120,50,128,48,"entry"],[120,55,128,53],[120,56,128,54,"name"],[120,60,128,58],[120,61,128,59,"endsWith"],[120,69,128,67],[120,70,128,68,"url"],[120,73,128,71],[120,74,128,72],[120,76,128,74],[121,10,129,8],[121,16,129,14,"spanData"],[121,24,129,22],[121,27,129,25,"resourceTimingEntryToSpanData"],[121,56,129,54],[121,57,129,55,"entry"],[121,62,129,60],[121,63,129,61],[122,10,130,8,"spanData"],[122,18,130,16],[122,19,130,17,"forEach"],[122,26,130,24],[122,27,130,25,"data"],[122,31,130,29],[122,35,130,33,"span"],[122,39,130,37],[122,40,130,38,"setAttribute"],[122,52,130,50],[122,53,130,51],[122,56,130,54,"data"],[122,60,130,58],[122,61,130,59],[122,62,130,60],[123,10,131,8],[124,10,132,8],[125,10,133,8,"setTimeout"],[125,20,133,18],[125,21,133,19,"cleanup"],[125,28,133,26],[125,29,133,27],[126,8,134,6],[127,6,135,4],[127,7,135,5],[127,8,135,6],[128,4,136,2],[128,5,136,3],[128,6,136,4],[129,2,137,0],[130,2,139,0],[130,11,139,9,"getAbsoluteTime"],[130,26,139,24,"getAbsoluteTime"],[130,27,139,25,"time"],[130,31,139,29],[130,34,139,32],[130,35,139,33],[130,37,139,35],[131,4,140,2],[131,11,140,9],[131,12,140,10],[131,13,140,11,"browserPerformanceTimeOrigin"],[131,47,140,39],[131,51,140,43,"performance"],[131,62,140,54],[131,63,140,55,"timeOrigin"],[131,73,140,65],[131,77,140,69,"time"],[131,81,140,73],[131,85,140,77],[131,89,140,81],[132,2,141,0],[133,2,143,0],[133,11,143,9,"resourceTimingEntryToSpanData"],[133,40,143,38,"resourceTimingEntryToSpanData"],[133,41,143,39,"resourceTiming"],[133,55,143,53],[133,57,143,55],[134,4,144,2],[134,10,144,8],[135,6,144,10,"name"],[135,10,144,14],[136,6,144,16,"version"],[137,4,144,24],[137,5,144,25],[137,8,144,28],[137,12,144,28,"extractNetworkProtocol"],[137,48,144,50],[137,50,144,51,"resourceTiming"],[137,64,144,65],[137,65,144,66,"nextHopProtocol"],[137,80,144,81],[137,81,144,82],[138,4,146,2],[138,10,146,8,"timingSpanData"],[138,24,146,22],[138,27,146,25],[138,29,146,27],[139,4,148,2,"timingSpanData"],[139,18,148,16],[139,19,148,17,"push"],[139,23,148,21],[139,24,148,22],[139,25,148,23],[139,51,148,49],[139,53,148,51,"version"],[139,60,148,58],[139,61,148,59],[139,63,148,61],[139,64,148,62],[139,87,148,85],[139,89,148,87,"name"],[139,93,148,91],[139,94,148,92],[139,95,148,93],[140,4,150,2],[140,8,150,6],[140,9,150,7,"browserPerformanceTimeOrigin"],[140,43,150,35],[140,45,150,37],[141,6,151,4],[141,13,151,11,"timingSpanData"],[141,27,151,25],[142,4,152,2],[143,4,153,2],[143,11,153,9],[143,12,154,4],[143,15,154,7,"timingSpanData"],[143,29,154,21],[143,31,155,4],[143,32,155,5],[143,61,155,34],[143,63,155,36,"getAbsoluteTime"],[143,78,155,51],[143,79,155,52,"resourceTiming"],[143,93,155,66],[143,94,155,67,"redirectStart"],[143,107,155,80],[143,108,155,81],[143,109,155,82],[143,111,156,4],[143,112,156,5],[143,138,156,31],[143,140,156,33,"getAbsoluteTime"],[143,155,156,48],[143,156,156,49,"resourceTiming"],[143,170,156,63],[143,171,156,64,"fetchStart"],[143,181,156,74],[143,182,156,75],[143,183,156,76],[143,185,157,4],[143,186,157,5],[143,220,157,39],[143,222,157,41,"getAbsoluteTime"],[143,237,157,56],[143,238,157,57,"resourceTiming"],[143,252,157,71],[143,253,157,72,"domainLookupStart"],[143,270,157,89],[143,271,157,90],[143,272,157,91],[143,274,158,4],[143,275,158,5],[143,307,158,37],[143,309,158,39,"getAbsoluteTime"],[143,324,158,54],[143,325,158,55,"resourceTiming"],[143,339,158,69],[143,340,158,70,"domainLookupEnd"],[143,355,158,85],[143,356,158,86],[143,357,158,87],[143,359,159,4],[143,360,159,5],[143,388,159,33],[143,390,159,35,"getAbsoluteTime"],[143,405,159,50],[143,406,159,51,"resourceTiming"],[143,420,159,65],[143,421,159,66,"connectStart"],[143,433,159,78],[143,434,159,79],[143,435,159,80],[143,437,160,4],[143,438,160,5],[143,476,160,43],[143,478,160,45,"getAbsoluteTime"],[143,493,160,60],[143,494,160,61,"resourceTiming"],[143,508,160,75],[143,509,160,76,"secureConnectionStart"],[143,530,160,97],[143,531,160,98],[143,532,160,99],[143,534,161,4],[143,535,161,5],[143,564,161,34],[143,566,161,36,"getAbsoluteTime"],[143,581,161,51],[143,582,161,52,"resourceTiming"],[143,596,161,66],[143,597,161,67,"connectEnd"],[143,607,161,77],[143,608,161,78],[143,609,161,79],[143,611,162,4],[143,612,162,5],[143,640,162,33],[143,642,162,35,"getAbsoluteTime"],[143,657,162,50],[143,658,162,51,"resourceTiming"],[143,672,162,65],[143,673,162,66,"requestStart"],[143,685,162,78],[143,686,162,79],[143,687,162,80],[143,689,163,4],[143,690,163,5],[143,719,163,34],[143,721,163,36,"getAbsoluteTime"],[143,736,163,51],[143,737,163,52,"resourceTiming"],[143,751,163,66],[143,752,163,67,"responseStart"],[143,765,163,80],[143,766,163,81],[143,767,163,82],[143,769,164,4],[143,770,164,5],[143,797,164,32],[143,799,164,34,"getAbsoluteTime"],[143,814,164,49],[143,815,164,50,"resourceTiming"],[143,829,164,64],[143,830,164,65,"responseEnd"],[143,841,164,76],[143,842,164,77],[143,843,164,78],[143,844,165,3],[144,2,166,0],[146,2,168,0],[147,0,169,0],[148,0,170,0],[149,0,171,0],[150,2,172,0],[150,11,172,9,"shouldAttachHeaders"],[150,30,172,28,"shouldAttachHeaders"],[150,31,173,2,"targetUrl"],[150,40,173,11],[150,42,174,2,"tracePropagationTargets"],[150,65,174,25],[150,67,175,2],[151,4,176,2],[152,4,177,2],[153,4,178,2],[153,10,178,8,"href"],[153,14,178,12],[153,17,178,15,"WINDOW"],[153,32,178,21],[153,33,178,22,"location"],[153,41,178,30],[153,45,178,34,"WINDOW"],[153,60,178,40],[153,61,178,41,"location"],[153,69,178,49],[153,70,178,50,"href"],[153,74,178,54],[154,4,180,2],[154,8,180,6],[154,9,180,7,"href"],[154,13,180,11],[154,15,180,13],[155,6,181,4],[156,6,182,4],[157,6,183,4],[158,6,184,4],[158,12,184,10,"isRelativeSameOriginRequest"],[158,39,184,37],[158,42,184,40],[158,43,184,41],[158,44,184,42,"targetUrl"],[158,53,184,51],[158,54,184,52,"match"],[158,59,184,57],[158,60,184,58],[158,71,184,69],[158,72,184,70],[159,6,185,4],[159,10,185,8],[159,11,185,9,"tracePropagationTargets"],[159,34,185,32],[159,36,185,34],[160,8,186,6],[160,15,186,13,"isRelativeSameOriginRequest"],[160,42,186,40],[161,6,187,4],[161,7,187,5],[161,13,187,11],[162,8,188,6],[162,15,188,13],[162,19,188,13,"stringMatchesSomePattern"],[162,49,188,37],[162,51,188,38,"targetUrl"],[162,60,188,47],[162,62,188,49,"tracePropagationTargets"],[162,85,188,72],[162,86,188,73],[163,6,189,4],[164,4,190,2],[164,5,190,3],[164,11,190,9],[165,6,191,4],[165,10,191,8,"resolvedUrl"],[165,21,191,19],[166,6,192,4],[166,10,192,8,"currentOrigin"],[166,23,192,21],[168,6,194,4],[169,6,195,4],[169,10,195,8],[170,8,196,6,"resolvedUrl"],[170,19,196,17],[170,22,196,20],[170,26,196,24,"URL"],[170,29,196,27],[170,30,196,28,"targetUrl"],[170,39,196,37],[170,41,196,39,"href"],[170,45,196,43],[170,46,196,44],[171,8,197,6,"currentOrigin"],[171,21,197,19],[171,24,197,22],[171,28,197,26,"URL"],[171,31,197,29],[171,32,197,30,"href"],[171,36,197,34],[171,37,197,35],[171,38,197,36,"origin"],[171,44,197,42],[172,6,198,4],[172,7,198,5],[172,8,198,6],[172,15,198,13,"e"],[172,16,198,14],[172,18,198,16],[173,8,199,6],[173,15,199,13],[173,20,199,18],[174,6,200,4],[175,6,202,4],[175,12,202,10,"isSameOriginRequest"],[175,31,202,29],[175,34,202,32,"resolvedUrl"],[175,45,202,43],[175,46,202,44,"origin"],[175,52,202,50],[175,57,202,55,"currentOrigin"],[175,70,202,68],[176,6,203,4],[176,10,203,8],[176,11,203,9,"tracePropagationTargets"],[176,34,203,32],[176,36,203,34],[177,8,204,6],[177,15,204,13,"isSameOriginRequest"],[177,34,204,32],[178,6,205,4],[178,7,205,5],[178,13,205,11],[179,8,206,6],[179,15,207,8],[179,19,207,8,"stringMatchesSomePattern"],[179,49,207,32],[179,51,207,33,"resolvedUrl"],[179,62,207,44],[179,63,207,45,"toString"],[179,71,207,53],[179,72,207,54],[179,73,207,55],[179,75,207,57,"tracePropagationTargets"],[179,98,207,80],[179,99,207,81],[179,103,208,9,"isSameOriginRequest"],[179,122,208,28],[179,126,208,32],[179,130,208,32,"stringMatchesSomePattern"],[179,160,208,56],[179,162,208,57,"resolvedUrl"],[179,173,208,68],[179,174,208,69,"pathname"],[179,182,208,77],[179,184,208,79,"tracePropagationTargets"],[179,207,208,102],[179,208,208,104],[180,6,210,4],[181,4,211,2],[182,2,212,0],[184,2,214,0],[185,0,215,0],[186,0,216,0],[187,0,217,0],[188,0,218,0],[189,2,219,0],[189,11,219,9,"xhrCallback"],[189,22,219,20,"xhrCallback"],[189,23,220,2,"handlerData"],[189,34,220,13],[189,36,221,2,"shouldCreateSpan"],[189,52,221,18],[189,54,222,2,"shouldAttachHeaders"],[189,73,222,21],[189,75,223,2,"spans"],[189,80,223,7],[189,82,224,2],[190,4,225,2],[190,10,225,8,"xhr"],[190,13,225,11],[190,16,225,14,"handlerData"],[190,27,225,25],[190,28,225,26,"xhr"],[190,31,225,29],[191,4,226,2],[191,10,226,8,"sentryXhrData"],[191,23,226,21],[191,26,226,24,"xhr"],[191,29,226,27],[191,33,226,31,"xhr"],[191,36,226,34],[191,37,226,35,"SENTRY_XHR_DATA_KEY"],[191,70,226,54],[191,71,226,55],[192,4,228,2],[192,8,228,6],[192,9,228,7,"xhr"],[192,12,228,10],[192,16,228,14,"xhr"],[192,19,228,17],[192,20,228,18,"__sentry_own_request__"],[192,42,228,40],[192,46,228,44],[192,47,228,45,"sentryXhrData"],[192,60,228,58],[192,62,228,60],[193,6,229,4],[193,13,229,11,"undefined"],[193,22,229,20],[194,4,230,2],[195,4,232,2],[195,10,232,8,"shouldCreateSpanResult"],[195,32,232,30],[195,35,232,33],[195,39,232,33,"hasTracingEnabled"],[195,62,232,50],[195,64,232,51],[195,65,232,52],[195,69,232,56,"shouldCreateSpan"],[195,85,232,72],[195,86,232,73,"sentryXhrData"],[195,99,232,86],[195,100,232,87,"url"],[195,103,232,90],[195,104,232,91],[197,4,234,2],[198,4,235,2],[198,8,235,6,"handlerData"],[198,19,235,17],[198,20,235,18,"endTimestamp"],[198,32,235,30],[198,36,235,34,"shouldCreateSpanResult"],[198,58,235,56],[198,60,235,58],[199,6,236,4],[199,12,236,10,"spanId"],[199,18,236,16],[199,21,236,19,"xhr"],[199,24,236,22],[199,25,236,23,"__sentry_xhr_span_id__"],[199,47,236,45],[200,6,237,4],[200,10,237,8],[200,11,237,9,"spanId"],[200,17,237,15],[200,19,237,17],[201,6,239,4],[201,12,239,10,"span"],[201,16,239,14],[201,19,239,17,"spans"],[201,24,239,22],[201,25,239,23,"spanId"],[201,31,239,29],[201,32,239,30],[202,6,240,4],[202,10,240,8,"span"],[202,14,240,12],[202,18,240,16,"sentryXhrData"],[202,31,240,29],[202,32,240,30,"status_code"],[202,43,240,41],[202,48,240,46,"undefined"],[202,57,240,55],[202,59,240,57],[203,8,241,6],[203,12,241,6,"setHttpStatus"],[203,31,241,19],[203,33,241,20,"span"],[203,37,241,24],[203,39,241,26,"sentryXhrData"],[203,52,241,39],[203,53,241,40,"status_code"],[203,64,241,51],[203,65,241,52],[204,8,242,6,"span"],[204,12,242,10],[204,13,242,11,"end"],[204,16,242,14],[204,17,242,15],[204,18,242,16],[206,8,244,6],[207,8,245,6],[207,15,245,13,"spans"],[207,20,245,18],[207,21,245,19,"spanId"],[207,27,245,25],[207,28,245,26],[208,6,246,4],[209,6,247,4],[209,13,247,11,"undefined"],[209,22,247,20],[210,4,248,2],[211,4,250,2],[211,10,250,8,"fullUrl"],[211,17,250,15],[211,20,250,18,"getFullURL"],[211,30,250,28],[211,31,250,29,"sentryXhrData"],[211,44,250,42],[211,45,250,43,"url"],[211,48,250,46],[211,49,250,47],[212,4,251,2],[212,10,251,8,"host"],[212,14,251,12],[212,17,251,15,"fullUrl"],[212,24,251,22],[212,27,251,25],[212,31,251,25,"parseUrl"],[212,45,251,33],[212,47,251,34,"fullUrl"],[212,54,251,41],[212,55,251,42],[212,56,251,43,"host"],[212,60,251,47],[212,63,251,50,"undefined"],[212,72,251,59],[213,4,253,2],[213,10,253,8,"hasParent"],[213,19,253,17],[213,22,253,20],[213,23,253,21],[213,24,253,22],[213,28,253,22,"getActiveSpan"],[213,47,253,35],[213,49,253,36],[213,50,253,37],[214,4,255,2],[214,10,255,8,"span"],[214,14,255,12],[214,17,256,4,"shouldCreateSpanResult"],[214,39,256,26],[214,43,256,30,"hasParent"],[214,52,256,39],[214,55,257,8],[214,59,257,8,"startInactiveSpan"],[214,82,257,25],[214,84,257,26],[215,6,258,10,"name"],[215,10,258,14],[215,12,258,16],[215,15,258,19,"sentryXhrData"],[215,28,258,32],[215,29,258,33,"method"],[215,35,258,39],[215,39,258,43,"sentryXhrData"],[215,52,258,56],[215,53,258,57,"url"],[215,56,258,60],[215,58,258,62],[216,6,259,10,"attributes"],[216,16,259,20],[216,18,259,22],[217,8,260,12,"type"],[217,12,260,16],[217,14,260,18],[217,19,260,23],[218,8,261,12],[218,21,261,25],[218,23,261,27,"sentryXhrData"],[218,36,261,40],[218,37,261,41,"method"],[218,43,261,47],[219,8,262,12],[219,18,262,22],[219,20,262,24,"fullUrl"],[219,27,262,31],[220,8,263,12,"url"],[220,11,263,15],[220,13,263,17,"sentryXhrData"],[220,26,263,30],[220,27,263,31,"url"],[220,30,263,34],[221,8,264,12],[221,24,264,28],[221,26,264,30,"host"],[221,30,264,34],[222,8,265,12],[222,9,265,13,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[222,47,265,45],[222,50,265,48],[222,69,265,67],[223,8,266,12],[223,9,266,13,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[223,43,266,41],[223,46,266,44],[224,6,267,10],[225,4,268,8],[225,5,268,9],[225,6,268,10],[225,9,269,8],[225,13,269,12,"SentryNonRecordingSpan"],[225,41,269,34],[225,42,269,35],[225,43,269,36],[226,4,271,2,"xhr"],[226,7,271,5],[226,8,271,6,"__sentry_xhr_span_id__"],[226,30,271,28],[226,33,271,31,"span"],[226,37,271,35],[226,38,271,36,"spanContext"],[226,49,271,47],[226,50,271,48],[226,51,271,49],[226,52,271,50,"spanId"],[226,58,271,56],[227,4,272,2,"spans"],[227,9,272,7],[227,10,272,8,"xhr"],[227,13,272,11],[227,14,272,12,"__sentry_xhr_span_id__"],[227,36,272,34],[227,37,272,35],[227,40,272,38,"span"],[227,44,272,42],[228,4,274,2],[228,8,274,6,"shouldAttachHeaders"],[228,27,274,25],[228,28,274,26,"sentryXhrData"],[228,41,274,39],[228,42,274,40,"url"],[228,45,274,43],[228,46,274,44],[228,48,274,46],[229,6,275,4,"addTracingHeadersToXhrRequest"],[229,35,275,33],[229,36,276,6,"xhr"],[229,39,276,9],[230,6,277,6],[231,6,278,6],[232,6,279,6],[233,6,280,6],[233,10,280,6,"hasTracingEnabled"],[233,33,280,23],[233,35,280,24],[233,36,280,25],[233,40,280,29,"hasParent"],[233,49,280,38],[233,52,280,41,"span"],[233,56,280,45],[233,59,280,48,"undefined"],[233,68,281,4],[233,69,281,5],[234,4,282,2],[235,4,284,2],[235,11,284,9,"span"],[235,15,284,13],[236,2,285,0],[237,2,287,0],[237,11,287,9,"addTracingHeadersToXhrRequest"],[237,40,287,38,"addTracingHeadersToXhrRequest"],[237,41,287,39,"xhr"],[237,44,287,42],[237,46,287,44,"span"],[237,50,287,48],[237,52,287,50],[238,4,288,2],[238,10,288,8],[239,6,288,10],[239,20,288,24],[239,22,288,26,"sentryTrace"],[239,33,288,37],[240,6,288,39,"baggage"],[241,4,288,47],[241,5,288,48],[241,8,288,51],[241,12,288,51,"getTraceData"],[241,30,288,63],[241,32,288,64],[242,6,288,66,"span"],[243,4,288,71],[243,5,288,72],[243,6,288,73],[244,4,290,2],[244,8,290,6,"sentryTrace"],[244,19,290,17],[244,21,290,19],[245,6,291,4,"setHeaderOnXhr"],[245,20,291,18],[245,21,291,19,"xhr"],[245,24,291,22],[245,26,291,24,"sentryTrace"],[245,37,291,35],[245,39,291,37,"baggage"],[245,46,291,44],[245,47,291,45],[246,4,292,2],[247,2,293,0],[248,2,295,0],[248,11,295,9,"setHeaderOnXhr"],[248,25,295,23,"setHeaderOnXhr"],[248,26,296,2,"xhr"],[248,29,296,5],[248,31,297,2,"sentryTraceHeader"],[248,48,297,19],[248,50,298,2,"sentryBaggageHeader"],[248,69,298,21],[248,71,299,2],[249,4,300,2],[249,8,300,6],[250,6,301,4],[251,6,302,4,"xhr"],[251,9,302,7],[251,10,302,8,"setRequestHeader"],[251,26,302,24],[251,27,302,25],[251,41,302,39],[251,43,302,41,"sentryTraceHeader"],[251,60,302,58],[251,61,302,59],[252,6,303,4],[252,10,303,8,"sentryBaggageHeader"],[252,29,303,27],[252,31,303,29],[253,8,304,6],[254,8,305,6],[255,8,306,6],[256,8,307,6],[257,8,308,6,"xhr"],[257,11,308,9],[257,12,308,10,"setRequestHeader"],[257,28,308,26],[257,29,308,27],[257,38,308,36],[257,40,308,38,"sentryBaggageHeader"],[257,59,308,57],[257,60,308,58],[258,6,309,4],[259,4,310,2],[259,5,310,3],[259,6,310,4],[259,13,310,11,"_"],[259,14,310,12],[259,16,310,14],[260,6,311,4],[261,4,311,4],[262,2,313,0],[263,2,315,0],[263,11,315,9,"getFullURL"],[263,21,315,19,"getFullURL"],[263,22,315,20,"url"],[263,25,315,23],[263,27,315,25],[264,4,316,2],[264,8,316,6],[265,6,317,4],[266,6,318,4],[267,6,319,4],[267,12,319,10,"parsed"],[267,18,319,16],[267,21,319,19],[267,25,319,23,"URL"],[267,28,319,26],[267,29,319,27,"url"],[267,32,319,30],[267,34,319,32,"WINDOW"],[267,49,319,38],[267,50,319,39,"location"],[267,58,319,47],[267,59,319,48,"origin"],[267,65,319,54],[267,66,319,55],[268,6,320,4],[268,13,320,11,"parsed"],[268,19,320,17],[268,20,320,18,"href"],[268,24,320,22],[269,4,321,2],[269,5,321,3],[269,6,321,4],[269,13,321,11,"e2"],[269,15,321,13],[269,17,321,15],[270,6,322,4],[270,13,322,11,"undefined"],[270,22,322,20],[271,4,323,2],[272,2,324,0],[273,0,324,1],[273,3]],"functionMap":{"names":["<global>","instrumentOutgoingRequests","<anonymous>","shouldAttachHeadersWithTargets","client.addEventProcessor$argument_0","event.spans.forEach$argument_0","addFetchEndInstrumentationHandler$argument_0","addFetchInstrumentationHandler$argument_0","addXhrInstrumentationHandler$argument_0","isPerformanceResourceTiming","addHTTPTimings","addPerformanceInstrumentationHandler$argument_1","entries.forEach$argument_0","spanData.forEach$argument_0","getAbsoluteTime","resourceTimingEntryToSpanData","shouldAttachHeaders","xhrCallback","addTracingHeadersToXhrRequest","setHeaderOnXhr","getFullURL"],"mappings":"AAA;ACiB;oFCgB,WD;yCEE,0DF;6BGO;4BCE;SDQ;KHG;wCKG;OLO;mCMG;KNsB;iCOI;KPK;CDE;ASE;CTO;AUQ;mECO;oBCC;yBCG,kCD;KDK;GDC;CVC;AcE;CdE;AeE;CfuB;AgBM;ChBwC;AiBO;CjBkE;AkBE;ClBM;AmBE;CnBkB;AoBE;CpBS"}},"type":"js/module"}]}