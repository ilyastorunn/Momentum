{"dependencies":[{"name":"../integration.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"B8aKvpmafw58aWtupuC7GWTMiwo=","exportNames":["*"]}},{"name":"../utils-hoist/is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":47,"index":102}}],"key":"3x1kguMyd34OmCyltgMzanSUMqM=","exportNames":["*"]}},{"name":"../utils-hoist/string.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":103},"end":{"line":3,"column":52,"index":155}}],"key":"VIkBXyaUAba9sYYSM7VCyUVEn5M=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.applyZodErrorsToEvent = applyZodErrorsToEvent;\n  exports.flattenIssue = flattenIssue;\n  exports.flattenIssuePath = flattenIssuePath;\n  exports.formatIssueMessage = formatIssueMessage;\n  exports.zodErrorsIntegration = void 0;\n  var _integration = require(_dependencyMap[0], \"../integration.js\");\n  var _is = require(_dependencyMap[1], \"../utils-hoist/is.js\");\n  var _string = require(_dependencyMap[2], \"../utils-hoist/string.js\");\n  const DEFAULT_LIMIT = 10;\n  const INTEGRATION_NAME = 'ZodErrors';\n\n  /**\n   * Simplified ZodIssue type definition\n   */\n\n  function originalExceptionIsZodError(originalException) {\n    return (0, _is.isError)(originalException) && originalException.name === 'ZodError' && Array.isArray(originalException.issues);\n  }\n\n  /**\n   * Formats child objects or arrays to a string\n   * that is preserved when sent to Sentry.\n   *\n   * Without this, we end up with something like this in Sentry:\n   *\n   * [\n   *  [Object],\n   *  [Object],\n   *  [Object],\n   *  [Object]\n   * ]\n   */\n  function flattenIssue(issue) {\n    return {\n      ...issue,\n      path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n      keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n      unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined\n    };\n  }\n\n  /**\n   * Takes ZodError issue path array and returns a flattened version as a string.\n   * This makes it easier to display paths within a Sentry error message.\n   *\n   * Array indexes are normalized to reduce duplicate entries\n   *\n   * @param path ZodError issue path\n   * @returns flattened path\n   *\n   * @example\n   * flattenIssuePath([0, 'foo', 1, 'bar']) // -> '<array>.foo.<array>.bar'\n   */\n  function flattenIssuePath(path) {\n    return path.map(p => {\n      if (typeof p === 'number') {\n        return '<array>';\n      } else {\n        return p;\n      }\n    }).join('.');\n  }\n\n  /**\n   * Zod error message is a stringified version of ZodError.issues\n   * This doesn't display well in the Sentry UI. Replace it with something shorter.\n   */\n  function formatIssueMessage(zodError) {\n    const errorKeyMap = new Set();\n    for (const iss of zodError.issues) {\n      const issuePath = flattenIssuePath(iss.path);\n      if (issuePath.length > 0) {\n        errorKeyMap.add(issuePath);\n      }\n    }\n    const errorKeys = Array.from(errorKeyMap);\n    if (errorKeys.length === 0) {\n      // If there are no keys, then we're likely validating the root\n      // variable rather than a key within an object. This attempts\n      // to extract what type it was that failed to validate.\n      // For example, z.string().parse(123) would return \"string\" here.\n      let rootExpectedType = 'variable';\n      if (zodError.issues.length > 0) {\n        const iss = zodError.issues[0];\n        if (iss !== undefined && 'expected' in iss && typeof iss.expected === 'string') {\n          rootExpectedType = iss.expected;\n        }\n      }\n      return `Failed to validate ${rootExpectedType}`;\n    }\n    return `Failed to validate keys: ${(0, _string.truncate)(errorKeys.join(', '), 100)}`;\n  }\n\n  /**\n   * Applies ZodError issues to an event extra and replaces the error message\n   */\n  function applyZodErrorsToEvent(limit, saveZodIssuesAsAttachment = false, event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !hint.originalException || !originalExceptionIsZodError(hint.originalException) || hint.originalException.issues.length === 0) {\n      return event;\n    }\n    try {\n      const issuesToFlatten = saveZodIssuesAsAttachment ? hint.originalException.issues : hint.originalException.issues.slice(0, limit);\n      const flattenedIssues = issuesToFlatten.map(flattenIssue);\n      if (saveZodIssuesAsAttachment) {\n        // Sometimes having the full error details can be helpful.\n        // Attachments have much higher limits, so we can include the full list of issues.\n        if (!Array.isArray(hint.attachments)) {\n          hint.attachments = [];\n        }\n        hint.attachments.push({\n          filename: 'zod_issues.json',\n          data: JSON.stringify({\n            issues: flattenedIssues\n          })\n        });\n      }\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          values: [{\n            ...event.exception.values[0],\n            value: formatIssueMessage(hint.originalException)\n          }, ...event.exception.values.slice(1)]\n        },\n        extra: {\n          ...event.extra,\n          'zoderror.issues': flattenedIssues.slice(0, limit)\n        }\n      };\n    } catch (e) {\n      // Hopefully we never throw errors here, but record it\n      // with the event just in case.\n      return {\n        ...event,\n        extra: {\n          ...event.extra,\n          'zoderrors sentry integration parse error': {\n            message: 'an exception was thrown while processing ZodError within applyZodErrorsToEvent()',\n            error: e instanceof Error ? `${e.name}: ${e.message}\\n${e.stack}` : 'unknown'\n          }\n        }\n      };\n    }\n  }\n  const _zodErrorsIntegration = (options = {}) => {\n    const limit = typeof options.limit === 'undefined' ? DEFAULT_LIMIT : options.limit;\n    return {\n      name: INTEGRATION_NAME,\n      processEvent(originalEvent, hint) {\n        const processedEvent = applyZodErrorsToEvent(limit, options.saveZodIssuesAsAttachment, originalEvent, hint);\n        return processedEvent;\n      }\n    };\n  };\n\n  /**\n   * Sentry integration to process Zod errors, making them easier to work with in Sentry.\n   */\n  const zodErrorsIntegration = exports.zodErrorsIntegration = (0, _integration.defineIntegration)(_zodErrorsIntegration);\n});","lineCount":165,"map":[[10,2,1,0],[10,6,1,0,"_integration"],[10,18,1,0],[10,21,1,0,"require"],[10,28,1,0],[10,29,1,0,"_dependencyMap"],[10,43,1,0],[11,2,2,0],[11,6,2,0,"_is"],[11,9,2,0],[11,12,2,0,"require"],[11,19,2,0],[11,20,2,0,"_dependencyMap"],[11,34,2,0],[12,2,3,0],[12,6,3,0,"_string"],[12,13,3,0],[12,16,3,0,"require"],[12,23,3,0],[12,24,3,0,"_dependencyMap"],[12,38,3,0],[13,2,5,0],[13,8,5,6,"DEFAULT_LIMIT"],[13,21,5,19],[13,24,5,22],[13,26,5,24],[14,2,6,0],[14,8,6,6,"INTEGRATION_NAME"],[14,24,6,22],[14,27,6,25],[14,38,6,36],[16,2,8,0],[17,0,9,0],[18,0,10,0],[20,2,12,0],[20,11,12,9,"originalExceptionIsZodError"],[20,38,12,36,"originalExceptionIsZodError"],[20,39,12,37,"originalException"],[20,56,12,54],[20,58,12,56],[21,4,13,2],[21,11,14,4],[21,15,14,4,"isError"],[21,26,14,11],[21,28,14,12,"originalException"],[21,45,14,29],[21,46,14,30],[21,50,15,4,"originalException"],[21,67,15,21],[21,68,15,22,"name"],[21,72,15,26],[21,77,15,31],[21,87,15,41],[21,91,16,4,"Array"],[21,96,16,9],[21,97,16,10,"isArray"],[21,104,16,17],[21,105,16,19,"originalException"],[21,122,16,36],[21,123,16,39,"issues"],[21,129,16,45],[21,130,16,46],[22,2,18,0],[24,2,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,2,33,0],[37,11,33,9,"flattenIssue"],[37,23,33,21,"flattenIssue"],[37,24,33,22,"issue"],[37,29,33,27],[37,31,33,29],[38,4,34,2],[38,11,34,9],[39,6,35,4],[39,9,35,7,"issue"],[39,14,35,12],[40,6,36,4,"path"],[40,10,36,8],[40,12,36,10],[40,18,36,16],[40,22,36,20,"issue"],[40,27,36,25],[40,31,36,29,"Array"],[40,36,36,34],[40,37,36,35,"isArray"],[40,44,36,42],[40,45,36,43,"issue"],[40,50,36,48],[40,51,36,49,"path"],[40,55,36,53],[40,56,36,54],[40,59,36,57,"issue"],[40,64,36,62],[40,65,36,63,"path"],[40,69,36,67],[40,70,36,68,"join"],[40,74,36,72],[40,75,36,73],[40,78,36,76],[40,79,36,77],[40,82,36,80,"undefined"],[40,91,36,89],[41,6,37,4,"keys"],[41,10,37,8],[41,12,37,10],[41,18,37,16],[41,22,37,20,"issue"],[41,27,37,25],[41,30,37,28,"JSON"],[41,34,37,32],[41,35,37,33,"stringify"],[41,44,37,42],[41,45,37,43,"issue"],[41,50,37,48],[41,51,37,49,"keys"],[41,55,37,53],[41,56,37,54],[41,59,37,57,"undefined"],[41,68,37,66],[42,6,38,4,"unionErrors"],[42,17,38,15],[42,19,38,17],[42,32,38,30],[42,36,38,34,"issue"],[42,41,38,39],[42,44,38,42,"JSON"],[42,48,38,46],[42,49,38,47,"stringify"],[42,58,38,56],[42,59,38,57,"issue"],[42,64,38,62],[42,65,38,63,"unionErrors"],[42,76,38,74],[42,77,38,75],[42,80,38,78,"undefined"],[43,4,39,2],[43,5,39,3],[44,2,40,0],[46,2,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,2,54,0],[58,11,54,9,"flattenIssuePath"],[58,27,54,25,"flattenIssuePath"],[58,28,54,26,"path"],[58,32,54,30],[58,34,54,32],[59,4,55,2],[59,11,55,9,"path"],[59,15,55,13],[59,16,56,5,"map"],[59,19,56,8],[59,20,56,9,"p"],[59,21,56,10],[59,25,56,14],[60,6,57,6],[60,10,57,10],[60,17,57,17,"p"],[60,18,57,18],[60,23,57,23],[60,31,57,31],[60,33,57,33],[61,8,58,8],[61,15,58,15],[61,24,58,24],[62,6,59,6],[62,7,59,7],[62,13,59,13],[63,8,60,8],[63,15,60,15,"p"],[63,16,60,16],[64,6,61,6],[65,4,62,4],[65,5,62,5],[65,6,62,6],[65,7,63,5,"join"],[65,11,63,9],[65,12,63,10],[65,15,63,13],[65,16,63,14],[66,2,64,0],[68,2,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,2,70,0],[72,11,70,9,"formatIssueMessage"],[72,29,70,27,"formatIssueMessage"],[72,30,70,28,"zodError"],[72,38,70,36],[72,40,70,38],[73,4,71,2],[73,10,71,8,"errorKeyMap"],[73,21,71,19],[73,24,71,22],[73,28,71,26,"Set"],[73,31,71,29],[73,32,71,30],[73,33,71,31],[74,4,72,2],[74,9,72,7],[74,15,72,13,"iss"],[74,18,72,16],[74,22,72,20,"zodError"],[74,30,72,28],[74,31,72,29,"issues"],[74,37,72,35],[74,39,72,37],[75,6,73,4],[75,12,73,10,"issuePath"],[75,21,73,19],[75,24,73,22,"flattenIssuePath"],[75,40,73,38],[75,41,73,39,"iss"],[75,44,73,42],[75,45,73,43,"path"],[75,49,73,47],[75,50,73,48],[76,6,74,4],[76,10,74,8,"issuePath"],[76,19,74,17],[76,20,74,18,"length"],[76,26,74,24],[76,29,74,27],[76,30,74,28],[76,32,74,30],[77,8,75,6,"errorKeyMap"],[77,19,75,17],[77,20,75,18,"add"],[77,23,75,21],[77,24,75,22,"issuePath"],[77,33,75,31],[77,34,75,32],[78,6,76,4],[79,4,77,2],[80,4,79,2],[80,10,79,8,"errorKeys"],[80,19,79,17],[80,22,79,20,"Array"],[80,27,79,25],[80,28,79,26,"from"],[80,32,79,30],[80,33,79,31,"errorKeyMap"],[80,44,79,42],[80,45,79,43],[81,4,80,2],[81,8,80,6,"errorKeys"],[81,17,80,15],[81,18,80,16,"length"],[81,24,80,22],[81,29,80,27],[81,30,80,28],[81,32,80,30],[82,6,81,4],[83,6,82,4],[84,6,83,4],[85,6,84,4],[86,6,85,4],[86,10,85,8,"rootExpectedType"],[86,26,85,24],[86,29,85,27],[86,39,85,37],[87,6,86,4],[87,10,86,8,"zodError"],[87,18,86,16],[87,19,86,17,"issues"],[87,25,86,23],[87,26,86,24,"length"],[87,32,86,30],[87,35,86,33],[87,36,86,34],[87,38,86,36],[88,8,87,6],[88,14,87,12,"iss"],[88,17,87,15],[88,20,87,18,"zodError"],[88,28,87,26],[88,29,87,27,"issues"],[88,35,87,33],[88,36,87,34],[88,37,87,35],[88,38,87,36],[89,8,88,6],[89,12,88,10,"iss"],[89,15,88,13],[89,20,88,18,"undefined"],[89,29,88,27],[89,33,88,31],[89,43,88,41],[89,47,88,45,"iss"],[89,50,88,48],[89,54,88,52],[89,61,88,59,"iss"],[89,64,88,62],[89,65,88,63,"expected"],[89,73,88,71],[89,78,88,76],[89,86,88,84],[89,88,88,86],[90,10,89,8,"rootExpectedType"],[90,26,89,24],[90,29,89,27,"iss"],[90,32,89,30],[90,33,89,31,"expected"],[90,41,89,39],[91,8,90,6],[92,6,91,4],[93,6,92,4],[93,13,92,11],[93,35,92,33,"rootExpectedType"],[93,51,92,49],[93,53,92,51],[94,4,93,2],[95,4,94,2],[95,11,94,9],[95,39,94,37],[95,43,94,37,"truncate"],[95,59,94,45],[95,61,94,46,"errorKeys"],[95,70,94,55],[95,71,94,56,"join"],[95,75,94,60],[95,76,94,61],[95,80,94,65],[95,81,94,66],[95,83,94,68],[95,86,94,71],[95,87,94,72],[95,89,94,74],[96,2,95,0],[98,2,97,0],[99,0,98,0],[100,0,99,0],[101,2,100,0],[101,11,100,9,"applyZodErrorsToEvent"],[101,32,100,30,"applyZodErrorsToEvent"],[101,33,101,2,"limit"],[101,38,101,7],[101,40,102,2,"saveZodIssuesAsAttachment"],[101,65,102,27],[101,68,102,30],[101,73,102,35],[101,75,103,2,"event"],[101,80,103,7],[101,82,104,2,"hint"],[101,86,104,6],[101,88,105,2],[102,4,106,2],[102,8,107,4],[102,9,107,5,"event"],[102,14,107,10],[102,15,107,11,"exception"],[102,24,107,20],[102,28,108,4],[102,29,108,5,"event"],[102,34,108,10],[102,35,108,11,"exception"],[102,44,108,20],[102,45,108,21,"values"],[102,51,108,27],[102,55,109,4],[102,56,109,5,"hint"],[102,60,109,9],[102,64,110,4],[102,65,110,5,"hint"],[102,69,110,9],[102,70,110,10,"originalException"],[102,87,110,27],[102,91,111,4],[102,92,111,5,"originalExceptionIsZodError"],[102,119,111,32],[102,120,111,33,"hint"],[102,124,111,37],[102,125,111,38,"originalException"],[102,142,111,55],[102,143,111,56],[102,147,112,4,"hint"],[102,151,112,8],[102,152,112,9,"originalException"],[102,169,112,26],[102,170,112,27,"issues"],[102,176,112,33],[102,177,112,34,"length"],[102,183,112,40],[102,188,112,45],[102,189,112,46],[102,191,113,4],[103,6,114,4],[103,13,114,11,"event"],[103,18,114,16],[104,4,115,2],[105,4,117,2],[105,8,117,6],[106,6,118,4],[106,12,118,10,"issuesToFlatten"],[106,27,118,25],[106,30,118,28,"saveZodIssuesAsAttachment"],[106,55,118,53],[106,58,119,8,"hint"],[106,62,119,12],[106,63,119,13,"originalException"],[106,80,119,30],[106,81,119,31,"issues"],[106,87,119,37],[106,90,120,8,"hint"],[106,94,120,12],[106,95,120,13,"originalException"],[106,112,120,30],[106,113,120,31,"issues"],[106,119,120,37],[106,120,120,38,"slice"],[106,125,120,43],[106,126,120,44],[106,127,120,45],[106,129,120,47,"limit"],[106,134,120,52],[106,135,120,53],[107,6,121,4],[107,12,121,10,"flattenedIssues"],[107,27,121,25],[107,30,121,28,"issuesToFlatten"],[107,45,121,43],[107,46,121,44,"map"],[107,49,121,47],[107,50,121,48,"flattenIssue"],[107,62,121,60],[107,63,121,61],[108,6,123,4],[108,10,123,8,"saveZodIssuesAsAttachment"],[108,35,123,33],[108,37,123,35],[109,8,124,6],[110,8,125,6],[111,8,126,6],[111,12,126,10],[111,13,126,11,"Array"],[111,18,126,16],[111,19,126,17,"isArray"],[111,26,126,24],[111,27,126,25,"hint"],[111,31,126,29],[111,32,126,30,"attachments"],[111,43,126,41],[111,44,126,42],[111,46,126,44],[112,10,127,8,"hint"],[112,14,127,12],[112,15,127,13,"attachments"],[112,26,127,24],[112,29,127,27],[112,31,127,29],[113,8,128,6],[114,8,129,6,"hint"],[114,12,129,10],[114,13,129,11,"attachments"],[114,24,129,22],[114,25,129,23,"push"],[114,29,129,27],[114,30,129,28],[115,10,130,8,"filename"],[115,18,130,16],[115,20,130,18],[115,37,130,35],[116,10,131,8,"data"],[116,14,131,12],[116,16,131,14,"JSON"],[116,20,131,18],[116,21,131,19,"stringify"],[116,30,131,28],[116,31,131,29],[117,12,132,10,"issues"],[117,18,132,16],[117,20,132,18,"flattenedIssues"],[118,10,133,8],[118,11,133,9],[119,8,134,6],[119,9,134,7],[119,10,134,8],[120,6,135,4],[121,6,137,4],[121,13,137,11],[122,8,138,6],[122,11,138,9,"event"],[122,16,138,14],[123,8,139,6,"exception"],[123,17,139,15],[123,19,139,17],[124,10,140,8],[124,13,140,11,"event"],[124,18,140,16],[124,19,140,17,"exception"],[124,28,140,26],[125,10,141,8,"values"],[125,16,141,14],[125,18,141,16],[125,19,142,10],[126,12,143,12],[126,15,143,15,"event"],[126,20,143,20],[126,21,143,21,"exception"],[126,30,143,30],[126,31,143,31,"values"],[126,37,143,37],[126,38,143,38],[126,39,143,39],[126,40,143,40],[127,12,144,12,"value"],[127,17,144,17],[127,19,144,19,"formatIssueMessage"],[127,37,144,37],[127,38,144,38,"hint"],[127,42,144,42],[127,43,144,43,"originalException"],[127,60,144,60],[128,10,145,10],[128,11,145,11],[128,13,146,10],[128,16,146,13,"event"],[128,21,146,18],[128,22,146,19,"exception"],[128,31,146,28],[128,32,146,29,"values"],[128,38,146,35],[128,39,146,36,"slice"],[128,44,146,41],[128,45,146,42],[128,46,146,43],[128,47,146,44],[129,8,148,6],[129,9,148,7],[130,8,149,6,"extra"],[130,13,149,11],[130,15,149,13],[131,10,150,8],[131,13,150,11,"event"],[131,18,150,16],[131,19,150,17,"extra"],[131,24,150,22],[132,10,151,8],[132,27,151,25],[132,29,151,27,"flattenedIssues"],[132,44,151,42],[132,45,151,43,"slice"],[132,50,151,48],[132,51,151,49],[132,52,151,50],[132,54,151,52,"limit"],[132,59,151,57],[133,8,152,6],[134,6,153,4],[134,7,153,5],[135,4,154,2],[135,5,154,3],[135,6,154,4],[135,13,154,11,"e"],[135,14,154,12],[135,16,154,14],[136,6,155,4],[137,6,156,4],[138,6,157,4],[138,13,157,11],[139,8,158,6],[139,11,158,9,"event"],[139,16,158,14],[140,8,159,6,"extra"],[140,13,159,11],[140,15,159,13],[141,10,160,8],[141,13,160,11,"event"],[141,18,160,16],[141,19,160,17,"extra"],[141,24,160,22],[142,10,161,8],[142,52,161,50],[142,54,161,52],[143,12,162,10,"message"],[143,19,162,17],[143,21,162,19],[143,103,162,101],[144,12,163,10,"error"],[144,17,163,15],[144,19,163,17,"e"],[144,20,163,18],[144,32,163,30,"Error"],[144,37,163,35],[144,40,163,38],[144,43,163,41,"e"],[144,44,163,42],[144,45,163,43,"name"],[144,49,163,47],[144,54,163,52,"e"],[144,55,163,53],[144,56,163,54,"message"],[144,63,163,61],[144,68,163,66,"e"],[144,69,163,67],[144,70,163,68,"stack"],[144,75,163,73],[144,77,163,75],[144,80,163,78],[145,10,164,8],[146,8,165,6],[147,6,166,4],[147,7,166,5],[148,4,167,2],[149,2,168,0],[150,2,170,0],[150,8,170,6,"_zodErrorsIntegration"],[150,29,170,27],[150,32,170,31,"_zodErrorsIntegration"],[150,33,170,32,"options"],[150,40,170,39],[150,43,170,42],[150,44,170,43],[150,45,170,44],[150,50,170,49],[151,4,171,2],[151,10,171,8,"limit"],[151,15,171,13],[151,18,171,16],[151,25,171,23,"options"],[151,32,171,30],[151,33,171,31,"limit"],[151,38,171,36],[151,43,171,41],[151,54,171,52],[151,57,171,55,"DEFAULT_LIMIT"],[151,70,171,68],[151,73,171,71,"options"],[151,80,171,78],[151,81,171,79,"limit"],[151,86,171,84],[152,4,173,2],[152,11,173,9],[153,6,174,4,"name"],[153,10,174,8],[153,12,174,10,"INTEGRATION_NAME"],[153,28,174,26],[154,6,175,4,"processEvent"],[154,18,175,16,"processEvent"],[154,19,175,17,"originalEvent"],[154,32,175,30],[154,34,175,32,"hint"],[154,38,175,36],[154,40,175,38],[155,8,176,6],[155,14,176,12,"processedEvent"],[155,28,176,26],[155,31,176,29,"applyZodErrorsToEvent"],[155,52,176,50],[155,53,176,51,"limit"],[155,58,176,56],[155,60,176,58,"options"],[155,67,176,65],[155,68,176,66,"saveZodIssuesAsAttachment"],[155,93,176,91],[155,95,176,93,"originalEvent"],[155,108,176,106],[155,110,176,108,"hint"],[155,114,176,112],[155,115,176,113],[156,8,177,6],[156,15,177,13,"processedEvent"],[156,29,177,27],[157,6,178,4],[158,4,179,2],[158,5,179,3],[159,2,180,0],[159,3,180,2],[161,2,182,0],[162,0,183,0],[163,0,184,0],[164,2,185,0],[164,8,185,6,"zodErrorsIntegration"],[164,28,185,26],[164,31,185,26,"exports"],[164,38,185,26],[164,39,185,26,"zodErrorsIntegration"],[164,59,185,26],[164,62,185,29],[164,66,185,29,"defineIntegration"],[164,96,185,46],[164,98,185,47,"_zodErrorsIntegration"],[164,119,185,68],[164,120,185,69],[165,0,185,70],[165,3]],"functionMap":{"names":["<global>","originalExceptionIsZodError","flattenIssue","flattenIssuePath","path.map$argument_0","formatIssueMessage","applyZodErrorsToEvent","_zodErrorsIntegration","processEvent"],"mappings":"AAA;ACW;CDM;AEe;CFO;AGc;SCE;KDM;CHE;AKM;CLyB;AMK;CNoE;+BOE;ICK;KDG;CPE"}},"type":"js/module"}]}