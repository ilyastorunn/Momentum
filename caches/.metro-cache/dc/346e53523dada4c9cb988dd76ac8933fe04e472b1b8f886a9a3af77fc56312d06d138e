{"dependencies":[{"name":"../integration.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"B8aKvpmafw58aWtupuC7GWTMiwo=","exportNames":["*"]}},{"name":"../metadata.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":88,"index":143}}],"key":"e+GcWU7PM4jYDq7rLAthu62vi9g=","exportNames":["*"]}},{"name":"../utils-hoist/envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":144},"end":{"line":3,"column":65,"index":209}}],"key":"/wcaZSbu8ehBqhp+Lmxp451SsSA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.moduleMetadataIntegration = void 0;\n  var _integration = require(_dependencyMap[0], \"../integration.js\");\n  var _metadata = require(_dependencyMap[1], \"../metadata.js\");\n  var _envelope = require(_dependencyMap[2], \"../utils-hoist/envelope.js\");\n  /**\n   * Adds module metadata to stack frames.\n   *\n   * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n   *\n   * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n   * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n   * our sources\n   */\n  const moduleMetadataIntegration = exports.moduleMetadataIntegration = (0, _integration.defineIntegration)(() => {\n    return {\n      name: 'ModuleMetadata',\n      setup(client) {\n        // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n        client.on('beforeEnvelope', envelope => {\n          (0, _envelope.forEachEnvelopeItem)(envelope, (item, type) => {\n            if (type === 'event') {\n              const event = Array.isArray(item) ? item[1] : undefined;\n              if (event) {\n                (0, _metadata.stripMetadataFromStackFrames)(event);\n                item[1] = event;\n              }\n            }\n          });\n        });\n        client.on('applyFrameMetadata', event => {\n          // Only apply stack frame metadata to error events\n          if (event.type) {\n            return;\n          }\n          const stackParser = client.getOptions().stackParser;\n          (0, _metadata.addMetadataToStackFrames)(stackParser, event);\n        });\n      }\n    };\n  });\n});","lineCount":45,"map":[[6,2,1,0],[6,6,1,0,"_integration"],[6,18,1,0],[6,21,1,0,"require"],[6,28,1,0],[6,29,1,0,"_dependencyMap"],[6,43,1,0],[7,2,2,0],[7,6,2,0,"_metadata"],[7,15,2,0],[7,18,2,0,"require"],[7,25,2,0],[7,26,2,0,"_dependencyMap"],[7,40,2,0],[8,2,3,0],[8,6,3,0,"_envelope"],[8,15,3,0],[8,18,3,0,"require"],[8,25,3,0],[8,26,3,0,"_dependencyMap"],[8,40,3,0],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,0],[18,8,14,6,"moduleMetadataIntegration"],[18,33,14,31],[18,36,14,31,"exports"],[18,43,14,31],[18,44,14,31,"moduleMetadataIntegration"],[18,69,14,31],[18,72,14,34],[18,76,14,34,"defineIntegration"],[18,106,14,51],[18,108,14,52],[18,114,14,58],[19,4,15,2],[19,11,15,9],[20,6,16,4,"name"],[20,10,16,8],[20,12,16,10],[20,28,16,26],[21,6,17,4,"setup"],[21,11,17,9,"setup"],[21,12,17,10,"client"],[21,18,17,16],[21,20,17,18],[22,8,18,6],[23,8,19,6,"client"],[23,14,19,12],[23,15,19,13,"on"],[23,17,19,15],[23,18,19,16],[23,34,19,32],[23,36,19,34,"envelope"],[23,44,19,42],[23,48,19,46],[24,10,20,8],[24,14,20,8,"forEachEnvelopeItem"],[24,43,20,27],[24,45,20,28,"envelope"],[24,53,20,36],[24,55,20,38],[24,56,20,39,"item"],[24,60,20,43],[24,62,20,45,"type"],[24,66,20,49],[24,71,20,54],[25,12,21,10],[25,16,21,14,"type"],[25,20,21,18],[25,25,21,23],[25,32,21,30],[25,34,21,32],[26,14,22,12],[26,20,22,18,"event"],[26,25,22,23],[26,28,22,26,"Array"],[26,33,22,31],[26,34,22,32,"isArray"],[26,41,22,39],[26,42,22,40,"item"],[26,46,22,44],[26,47,22,45],[26,50,22,49,"item"],[26,54,22,53],[26,55,22,56],[26,56,22,57],[26,57,22,58],[26,60,22,61,"undefined"],[26,69,22,70],[27,14,24,12],[27,18,24,16,"event"],[27,23,24,21],[27,25,24,23],[28,16,25,14],[28,20,25,14,"stripMetadataFromStackFrames"],[28,58,25,42],[28,60,25,43,"event"],[28,65,25,48],[28,66,25,49],[29,16,26,14,"item"],[29,20,26,18],[29,21,26,19],[29,22,26,20],[29,23,26,21],[29,26,26,24,"event"],[29,31,26,29],[30,14,27,12],[31,12,28,10],[32,10,29,8],[32,11,29,9],[32,12,29,10],[33,8,30,6],[33,9,30,7],[33,10,30,8],[34,8,32,6,"client"],[34,14,32,12],[34,15,32,13,"on"],[34,17,32,15],[34,18,32,16],[34,38,32,36],[34,40,32,38,"event"],[34,45,32,43],[34,49,32,47],[35,10,33,8],[36,10,34,8],[36,14,34,12,"event"],[36,19,34,17],[36,20,34,18,"type"],[36,24,34,22],[36,26,34,24],[37,12,35,10],[38,10,36,8],[39,10,38,8],[39,16,38,14,"stackParser"],[39,27,38,25],[39,30,38,28,"client"],[39,36,38,34],[39,37,38,35,"getOptions"],[39,47,38,45],[39,48,38,46],[39,49,38,47],[39,50,38,48,"stackParser"],[39,61,38,59],[40,10,39,8],[40,14,39,8,"addMetadataToStackFrames"],[40,48,39,32],[40,50,39,33,"stackParser"],[40,61,39,44],[40,63,39,46,"event"],[40,68,39,51],[40,69,39,52],[41,8,40,6],[41,9,40,7],[41,10,40,8],[42,6,41,4],[43,4,42,2],[43,5,42,3],[44,2,43,0],[44,3,43,1],[44,4,43,2],[45,0,43,3],[45,3]],"functionMap":{"names":["<global>","defineIntegration$argument_0","setup","client.on$argument_1","forEachEnvelopeItem$argument_1"],"mappings":"AAA;oDCa;ICG;kCCE;sCCC;SDS;ODC;sCCE;ODQ;KDC;CDE"}},"type":"js/module"}]}