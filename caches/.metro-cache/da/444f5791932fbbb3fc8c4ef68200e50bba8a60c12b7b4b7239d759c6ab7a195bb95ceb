{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":48,"index":104}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"./web-vitals/getCLS.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":105},"end":{"line":3,"column":47,"index":152}}],"key":"Qin+L6B5pQ2ty30ibdhAE6gpMbw=","exportNames":["*"]}},{"name":"./web-vitals/getFID.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":47,"index":200}}],"key":"+JGjeIc2kcoY6gMA0NHCb7jGuIA=","exportNames":["*"]}},{"name":"./web-vitals/getINP.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":201},"end":{"line":5,"column":47,"index":248}}],"key":"KXBc+PXCMrV556dOAsBCfOI5AeU=","exportNames":["*"]}},{"name":"./web-vitals/getLCP.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":249},"end":{"line":6,"column":47,"index":296}}],"key":"fPGiqFd1hYYtG/gBb3HKNcc0ODs=","exportNames":["*"]}},{"name":"./web-vitals/lib/observe.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":297},"end":{"line":7,"column":54,"index":351}}],"key":"P2PrRPXGDypAdLEzDnc6mVUdGi0=","exportNames":["*"]}},{"name":"./web-vitals/onTTFB.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":352},"end":{"line":8,"column":48,"index":400}}],"key":"67U7e/O9e+4DdXG4efVNFaMfXHk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addClsInstrumentationHandler = addClsInstrumentationHandler;\n  exports.addFidInstrumentationHandler = addFidInstrumentationHandler;\n  exports.addInpInstrumentationHandler = addInpInstrumentationHandler;\n  exports.addLcpInstrumentationHandler = addLcpInstrumentationHandler;\n  exports.addPerformanceInstrumentationHandler = addPerformanceInstrumentationHandler;\n  exports.addTtfbInstrumentationHandler = addTtfbInstrumentationHandler;\n  exports.isPerformanceEventTiming = isPerformanceEventTiming;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  var _getCLS = require(_dependencyMap[2], \"./web-vitals/getCLS.js\");\n  var _getFID = require(_dependencyMap[3], \"./web-vitals/getFID.js\");\n  var _getINP = require(_dependencyMap[4], \"./web-vitals/getINP.js\");\n  var _getLCP = require(_dependencyMap[5], \"./web-vitals/getLCP.js\");\n  var _observe = require(_dependencyMap[6], \"./web-vitals/lib/observe.js\");\n  var _onTTFB = require(_dependencyMap[7], \"./web-vitals/onTTFB.js\");\n  const handlers = {};\n  const instrumented = {};\n  let _previousCls;\n  let _previousFid;\n  let _previousLcp;\n  let _previousTtfb;\n  let _previousInp;\n\n  /**\n   * Add a callback that will be triggered when a CLS metric is available.\n   * Returns a cleanup callback which can be called to remove the instrumentation handler.\n   *\n   * Pass `stopOnCallback = true` to stop listening for CLS when the cleanup callback is called.\n   * This will lead to the CLS being finalized and frozen.\n   */\n  function addClsInstrumentationHandler(callback, stopOnCallback = false) {\n    return addMetricObserver('cls', callback, instrumentCls, _previousCls, stopOnCallback);\n  }\n\n  /**\n   * Add a callback that will be triggered when a LCP metric is available.\n   * Returns a cleanup callback which can be called to remove the instrumentation handler.\n   *\n   * Pass `stopOnCallback = true` to stop listening for LCP when the cleanup callback is called.\n   * This will lead to the LCP being finalized and frozen.\n   */\n  function addLcpInstrumentationHandler(callback, stopOnCallback = false) {\n    return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp, stopOnCallback);\n  }\n\n  /**\n   * Add a callback that will be triggered when a FID metric is available.\n   * Returns a cleanup callback which can be called to remove the instrumentation handler.\n   */\n  function addFidInstrumentationHandler(callback) {\n    return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n  }\n\n  /**\n   * Add a callback that will be triggered when a FID metric is available.\n   */\n  function addTtfbInstrumentationHandler(callback) {\n    return addMetricObserver('ttfb', callback, instrumentTtfb, _previousTtfb);\n  }\n\n  /**\n   * Add a callback that will be triggered when a INP metric is available.\n   * Returns a cleanup callback which can be called to remove the instrumentation handler.\n   */\n  function addInpInstrumentationHandler(callback) {\n    return addMetricObserver('inp', callback, instrumentInp, _previousInp);\n  }\n\n  /**\n   * Add a callback that will be triggered when a performance observer is triggered,\n   * and receives the entries of the observer.\n   * Returns a cleanup callback which can be called to remove the instrumentation handler.\n   */\n  function addPerformanceInstrumentationHandler(type, callback) {\n    addHandler(type, callback);\n    if (!instrumented[type]) {\n      instrumentPerformanceObserver(type);\n      instrumented[type] = true;\n    }\n    return getCleanupCallback(type, callback);\n  }\n\n  /** Trigger all handlers of a given type. */\n  function triggerHandlers(type, data) {\n    const typeHandlers = handlers[type];\n    if (!typeHandlers || !typeHandlers.length) {\n      return;\n    }\n    for (const handler of typeHandlers) {\n      try {\n        handler(data);\n      } catch (e) {\n        _debugBuild.DEBUG_BUILD && _core.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${(0, _core.getFunctionName)(handler)}\\nError:`, e);\n      }\n    }\n  }\n  function instrumentCls() {\n    return (0, _getCLS.onCLS)(metric => {\n      triggerHandlers('cls', {\n        metric\n      });\n      _previousCls = metric;\n    },\n    // We want the callback to be called whenever the CLS value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    {\n      reportAllChanges: true\n    });\n  }\n  function instrumentFid() {\n    return (0, _getFID.onFID)(metric => {\n      triggerHandlers('fid', {\n        metric\n      });\n      _previousFid = metric;\n    });\n  }\n  function instrumentLcp() {\n    return (0, _getLCP.onLCP)(metric => {\n      triggerHandlers('lcp', {\n        metric\n      });\n      _previousLcp = metric;\n    },\n    // We want the callback to be called whenever the LCP value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    {\n      reportAllChanges: true\n    });\n  }\n  function instrumentTtfb() {\n    return (0, _onTTFB.onTTFB)(metric => {\n      triggerHandlers('ttfb', {\n        metric\n      });\n      _previousTtfb = metric;\n    });\n  }\n  function instrumentInp() {\n    return (0, _getINP.onINP)(metric => {\n      triggerHandlers('inp', {\n        metric\n      });\n      _previousInp = metric;\n    });\n  }\n  function addMetricObserver(type, callback, instrumentFn, previousValue, stopOnCallback = false) {\n    addHandler(type, callback);\n    let stopListening;\n    if (!instrumented[type]) {\n      stopListening = instrumentFn();\n      instrumented[type] = true;\n    }\n    if (previousValue) {\n      callback({\n        metric: previousValue\n      });\n    }\n    return getCleanupCallback(type, callback, stopOnCallback ? stopListening : undefined);\n  }\n  function instrumentPerformanceObserver(type) {\n    const options = {};\n\n    // Special per-type options we want to use\n    if (type === 'event') {\n      options.durationThreshold = 0;\n    }\n    (0, _observe.observe)(type, entries => {\n      triggerHandlers(type, {\n        entries\n      });\n    }, options);\n  }\n  function addHandler(type, handler) {\n    handlers[type] = handlers[type] || [];\n    handlers[type].push(handler);\n  }\n\n  // Get a callback which can be called to remove the instrumentation handler\n  function getCleanupCallback(type, callback, stopListening) {\n    return () => {\n      if (stopListening) {\n        stopListening();\n      }\n      const typeHandlers = handlers[type];\n      if (!typeHandlers) {\n        return;\n      }\n      const index = typeHandlers.indexOf(callback);\n      if (index !== -1) {\n        typeHandlers.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Check if a PerformanceEntry is a PerformanceEventTiming by checking for the `duration` property.\n   */\n  function isPerformanceEventTiming(entry) {\n    return 'duration' in entry;\n  }\n});","lineCount":206,"map":[[12,2,1,0],[12,6,1,0,"_core"],[12,11,1,0],[12,14,1,0,"require"],[12,21,1,0],[12,22,1,0,"_dependencyMap"],[12,36,1,0],[13,2,2,0],[13,6,2,0,"_debugBuild"],[13,17,2,0],[13,20,2,0,"require"],[13,27,2,0],[13,28,2,0,"_dependencyMap"],[13,42,2,0],[14,2,3,0],[14,6,3,0,"_getCLS"],[14,13,3,0],[14,16,3,0,"require"],[14,23,3,0],[14,24,3,0,"_dependencyMap"],[14,38,3,0],[15,2,4,0],[15,6,4,0,"_getFID"],[15,13,4,0],[15,16,4,0,"require"],[15,23,4,0],[15,24,4,0,"_dependencyMap"],[15,38,4,0],[16,2,5,0],[16,6,5,0,"_getINP"],[16,13,5,0],[16,16,5,0,"require"],[16,23,5,0],[16,24,5,0,"_dependencyMap"],[16,38,5,0],[17,2,6,0],[17,6,6,0,"_getLCP"],[17,13,6,0],[17,16,6,0,"require"],[17,23,6,0],[17,24,6,0,"_dependencyMap"],[17,38,6,0],[18,2,7,0],[18,6,7,0,"_observe"],[18,14,7,0],[18,17,7,0,"require"],[18,24,7,0],[18,25,7,0,"_dependencyMap"],[18,39,7,0],[19,2,8,0],[19,6,8,0,"_onTTFB"],[19,13,8,0],[19,16,8,0,"require"],[19,23,8,0],[19,24,8,0,"_dependencyMap"],[19,38,8,0],[20,2,10,0],[20,8,10,6,"handlers"],[20,16,10,14],[20,19,10,17],[20,20,10,18],[20,21,10,19],[21,2,11,0],[21,8,11,6,"instrumented"],[21,20,11,18],[21,23,11,21],[21,24,11,22],[21,25,11,23],[22,2,13,0],[22,6,13,4,"_previousCls"],[22,18,13,16],[23,2,14,0],[23,6,14,4,"_previousFid"],[23,18,14,16],[24,2,15,0],[24,6,15,4,"_previousLcp"],[24,18,15,16],[25,2,16,0],[25,6,16,4,"_previousTtfb"],[25,19,16,17],[26,2,17,0],[26,6,17,4,"_previousInp"],[26,18,17,16],[28,2,19,0],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[35,2,26,0],[35,11,26,9,"addClsInstrumentationHandler"],[35,39,26,37,"addClsInstrumentationHandler"],[35,40,27,2,"callback"],[35,48,27,10],[35,50,28,2,"stopOnCallback"],[35,64,28,16],[35,67,28,19],[35,72,28,24],[35,74,29,2],[36,4,30,2],[36,11,30,9,"addMetricObserver"],[36,28,30,26],[36,29,30,27],[36,34,30,32],[36,36,30,34,"callback"],[36,44,30,42],[36,46,30,44,"instrumentCls"],[36,59,30,57],[36,61,30,59,"_previousCls"],[36,73,30,71],[36,75,30,73,"stopOnCallback"],[36,89,30,87],[36,90,30,88],[37,2,31,0],[39,2,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,2,40,0],[46,11,40,9,"addLcpInstrumentationHandler"],[46,39,40,37,"addLcpInstrumentationHandler"],[46,40,41,2,"callback"],[46,48,41,10],[46,50,42,2,"stopOnCallback"],[46,64,42,16],[46,67,42,19],[46,72,42,24],[46,74,43,2],[47,4,44,2],[47,11,44,9,"addMetricObserver"],[47,28,44,26],[47,29,44,27],[47,34,44,32],[47,36,44,34,"callback"],[47,44,44,42],[47,46,44,44,"instrumentLcp"],[47,59,44,57],[47,61,44,59,"_previousLcp"],[47,73,44,71],[47,75,44,73,"stopOnCallback"],[47,89,44,87],[47,90,44,88],[48,2,45,0],[50,2,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,2,51,0],[54,11,51,9,"addFidInstrumentationHandler"],[54,39,51,37,"addFidInstrumentationHandler"],[54,40,51,38,"callback"],[54,48,51,46],[54,50,51,48],[55,4,52,2],[55,11,52,9,"addMetricObserver"],[55,28,52,26],[55,29,52,27],[55,34,52,32],[55,36,52,34,"callback"],[55,44,52,42],[55,46,52,44,"instrumentFid"],[55,59,52,57],[55,61,52,59,"_previousFid"],[55,73,52,71],[55,74,52,72],[56,2,53,0],[58,2,55,0],[59,0,56,0],[60,0,57,0],[61,2,58,0],[61,11,58,9,"addTtfbInstrumentationHandler"],[61,40,58,38,"addTtfbInstrumentationHandler"],[61,41,58,39,"callback"],[61,49,58,47],[61,51,58,49],[62,4,59,2],[62,11,59,9,"addMetricObserver"],[62,28,59,26],[62,29,59,27],[62,35,59,33],[62,37,59,35,"callback"],[62,45,59,43],[62,47,59,45,"instrumentTtfb"],[62,61,59,59],[62,63,59,61,"_previousTtfb"],[62,76,59,74],[62,77,59,75],[63,2,60,0],[65,2,62,0],[66,0,63,0],[67,0,64,0],[68,0,65,0],[69,2,66,0],[69,11,66,9,"addInpInstrumentationHandler"],[69,39,66,37,"addInpInstrumentationHandler"],[69,40,67,2,"callback"],[69,48,67,10],[69,50,68,2],[70,4,69,2],[70,11,69,9,"addMetricObserver"],[70,28,69,26],[70,29,69,27],[70,34,69,32],[70,36,69,34,"callback"],[70,44,69,42],[70,46,69,44,"instrumentInp"],[70,59,69,57],[70,61,69,59,"_previousInp"],[70,73,69,71],[70,74,69,72],[71,2,70,0],[73,2,72,0],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,0,76,0],[78,2,77,0],[78,11,77,9,"addPerformanceInstrumentationHandler"],[78,47,77,45,"addPerformanceInstrumentationHandler"],[78,48,78,2,"type"],[78,52,78,6],[78,54,79,2,"callback"],[78,62,79,10],[78,64,80,2],[79,4,81,2,"addHandler"],[79,14,81,12],[79,15,81,13,"type"],[79,19,81,17],[79,21,81,19,"callback"],[79,29,81,27],[79,30,81,28],[80,4,83,2],[80,8,83,6],[80,9,83,7,"instrumented"],[80,21,83,19],[80,22,83,20,"type"],[80,26,83,24],[80,27,83,25],[80,29,83,27],[81,6,84,4,"instrumentPerformanceObserver"],[81,35,84,33],[81,36,84,34,"type"],[81,40,84,38],[81,41,84,39],[82,6,85,4,"instrumented"],[82,18,85,16],[82,19,85,17,"type"],[82,23,85,21],[82,24,85,22],[82,27,85,25],[82,31,85,29],[83,4,86,2],[84,4,88,2],[84,11,88,9,"getCleanupCallback"],[84,29,88,27],[84,30,88,28,"type"],[84,34,88,32],[84,36,88,34,"callback"],[84,44,88,42],[84,45,88,43],[85,2,89,0],[87,2,91,0],[88,2,92,0],[88,11,92,9,"triggerHandlers"],[88,26,92,24,"triggerHandlers"],[88,27,92,25,"type"],[88,31,92,29],[88,33,92,31,"data"],[88,37,92,35],[88,39,92,37],[89,4,93,2],[89,10,93,8,"typeHandlers"],[89,22,93,20],[89,25,93,23,"handlers"],[89,33,93,31],[89,34,93,32,"type"],[89,38,93,36],[89,39,93,37],[90,4,95,2],[90,8,95,6],[90,9,95,7,"typeHandlers"],[90,21,95,19],[90,25,95,23],[90,26,95,24,"typeHandlers"],[90,38,95,36],[90,39,95,37,"length"],[90,45,95,43],[90,47,95,45],[91,6,96,4],[92,4,97,2],[93,4,99,2],[93,9,99,7],[93,15,99,13,"handler"],[93,22,99,20],[93,26,99,24,"typeHandlers"],[93,38,99,36],[93,40,99,38],[94,6,100,4],[94,10,100,8],[95,8,101,6,"handler"],[95,15,101,13],[95,16,101,14,"data"],[95,20,101,18],[95,21,101,19],[96,6,102,4],[96,7,102,5],[96,8,102,6],[96,15,102,13,"e"],[96,16,102,14],[96,18,102,16],[97,8,103,6,"DEBUG_BUILD"],[97,31,103,17],[97,35,104,8,"logger"],[97,47,104,14],[97,48,104,15,"error"],[97,53,104,20],[97,54,105,10],[97,112,105,68,"type"],[97,116,105,72],[97,127,105,83],[97,131,105,83,"getFunctionName"],[97,152,105,98],[97,154,105,99,"handler"],[97,161,105,106],[97,162,105,107],[97,172,105,117],[97,174,106,10,"e"],[97,175,107,8],[97,176,107,9],[98,6,108,4],[99,4,109,2],[100,2,110,0],[101,2,112,0],[101,11,112,9,"instrumentCls"],[101,24,112,22,"instrumentCls"],[101,25,112,22],[101,27,112,25],[102,4,113,2],[102,11,113,9],[102,15,113,9,"onCLS"],[102,28,113,14],[102,30,114,4,"metric"],[102,36,114,10],[102,40,114,14],[103,6,115,6,"triggerHandlers"],[103,21,115,21],[103,22,115,22],[103,27,115,27],[103,29,115,29],[104,8,116,8,"metric"],[105,6,117,6],[105,7,117,7],[105,8,117,8],[106,6,118,6,"_previousCls"],[106,18,118,18],[106,21,118,21,"metric"],[106,27,118,27],[107,4,119,4],[107,5,119,5],[108,4,120,4],[109,4,121,4],[110,4,122,4],[111,6,122,6,"reportAllChanges"],[111,22,122,22],[111,24,122,24],[112,4,122,29],[112,5,123,2],[112,6,123,3],[113,2,124,0],[114,2,126,0],[114,11,126,9,"instrumentFid"],[114,24,126,22,"instrumentFid"],[114,25,126,22],[114,27,126,25],[115,4,127,2],[115,11,127,9],[115,15,127,9,"onFID"],[115,28,127,14],[115,30,127,15,"metric"],[115,36,127,21],[115,40,127,25],[116,6,128,4,"triggerHandlers"],[116,21,128,19],[116,22,128,20],[116,27,128,25],[116,29,128,27],[117,8,129,6,"metric"],[118,6,130,4],[118,7,130,5],[118,8,130,6],[119,6,131,4,"_previousFid"],[119,18,131,16],[119,21,131,19,"metric"],[119,27,131,25],[120,4,132,2],[120,5,132,3],[120,6,132,4],[121,2,133,0],[122,2,135,0],[122,11,135,9,"instrumentLcp"],[122,24,135,22,"instrumentLcp"],[122,25,135,22],[122,27,135,25],[123,4,136,2],[123,11,136,9],[123,15,136,9,"onLCP"],[123,28,136,14],[123,30,137,4,"metric"],[123,36,137,10],[123,40,137,14],[124,6,138,6,"triggerHandlers"],[124,21,138,21],[124,22,138,22],[124,27,138,27],[124,29,138,29],[125,8,139,8,"metric"],[126,6,140,6],[126,7,140,7],[126,8,140,8],[127,6,141,6,"_previousLcp"],[127,18,141,18],[127,21,141,21,"metric"],[127,27,141,27],[128,4,142,4],[128,5,142,5],[129,4,143,4],[130,4,144,4],[131,4,145,4],[132,6,145,6,"reportAllChanges"],[132,22,145,22],[132,24,145,24],[133,4,145,29],[133,5,146,2],[133,6,146,3],[134,2,147,0],[135,2,149,0],[135,11,149,9,"instrumentTtfb"],[135,25,149,23,"instrumentTtfb"],[135,26,149,23],[135,28,149,26],[136,4,150,2],[136,11,150,9],[136,15,150,9,"onTTFB"],[136,29,150,15],[136,31,150,16,"metric"],[136,37,150,22],[136,41,150,26],[137,6,151,4,"triggerHandlers"],[137,21,151,19],[137,22,151,20],[137,28,151,26],[137,30,151,28],[138,8,152,6,"metric"],[139,6,153,4],[139,7,153,5],[139,8,153,6],[140,6,154,4,"_previousTtfb"],[140,19,154,17],[140,22,154,20,"metric"],[140,28,154,26],[141,4,155,2],[141,5,155,3],[141,6,155,4],[142,2,156,0],[143,2,158,0],[143,11,158,9,"instrumentInp"],[143,24,158,22,"instrumentInp"],[143,25,158,22],[143,27,158,25],[144,4,159,2],[144,11,159,9],[144,15,159,9,"onINP"],[144,28,159,14],[144,30,159,15,"metric"],[144,36,159,21],[144,40,159,25],[145,6,160,4,"triggerHandlers"],[145,21,160,19],[145,22,160,20],[145,27,160,25],[145,29,160,27],[146,8,161,6,"metric"],[147,6,162,4],[147,7,162,5],[147,8,162,6],[148,6,163,4,"_previousInp"],[148,18,163,16],[148,21,163,19,"metric"],[148,27,163,25],[149,4,164,2],[149,5,164,3],[149,6,164,4],[150,2,165,0],[151,2,167,0],[151,11,167,9,"addMetricObserver"],[151,28,167,26,"addMetricObserver"],[151,29,168,2,"type"],[151,33,168,6],[151,35,169,2,"callback"],[151,43,169,10],[151,45,170,2,"instrumentFn"],[151,57,170,14],[151,59,171,2,"previousValue"],[151,72,171,15],[151,74,172,2,"stopOnCallback"],[151,88,172,16],[151,91,172,19],[151,96,172,24],[151,98,173,2],[152,4,174,2,"addHandler"],[152,14,174,12],[152,15,174,13,"type"],[152,19,174,17],[152,21,174,19,"callback"],[152,29,174,27],[152,30,174,28],[153,4,176,2],[153,8,176,6,"stopListening"],[153,21,176,19],[154,4,178,2],[154,8,178,6],[154,9,178,7,"instrumented"],[154,21,178,19],[154,22,178,20,"type"],[154,26,178,24],[154,27,178,25],[154,29,178,27],[155,6,179,4,"stopListening"],[155,19,179,17],[155,22,179,20,"instrumentFn"],[155,34,179,32],[155,35,179,33],[155,36,179,34],[156,6,180,4,"instrumented"],[156,18,180,16],[156,19,180,17,"type"],[156,23,180,21],[156,24,180,22],[156,27,180,25],[156,31,180,29],[157,4,181,2],[158,4,183,2],[158,8,183,6,"previousValue"],[158,21,183,19],[158,23,183,21],[159,6,184,4,"callback"],[159,14,184,12],[159,15,184,13],[160,8,184,15,"metric"],[160,14,184,21],[160,16,184,23,"previousValue"],[161,6,184,37],[161,7,184,38],[161,8,184,39],[162,4,185,2],[163,4,187,2],[163,11,187,9,"getCleanupCallback"],[163,29,187,27],[163,30,187,28,"type"],[163,34,187,32],[163,36,187,34,"callback"],[163,44,187,42],[163,46,187,44,"stopOnCallback"],[163,60,187,58],[163,63,187,61,"stopListening"],[163,76,187,74],[163,79,187,77,"undefined"],[163,88,187,86],[163,89,187,87],[164,2,188,0],[165,2,190,0],[165,11,190,9,"instrumentPerformanceObserver"],[165,40,190,38,"instrumentPerformanceObserver"],[165,41,190,39,"type"],[165,45,190,43],[165,47,190,45],[166,4,191,2],[166,10,191,8,"options"],[166,17,191,15],[166,20,191,18],[166,21,191,19],[166,22,191,20],[168,4,193,2],[169,4,194,2],[169,8,194,6,"type"],[169,12,194,10],[169,17,194,15],[169,24,194,22],[169,26,194,24],[170,6,195,4,"options"],[170,13,195,11],[170,14,195,12,"durationThreshold"],[170,31,195,29],[170,34,195,32],[170,35,195,33],[171,4,196,2],[172,4,198,2],[172,8,198,2,"observe"],[172,24,198,9],[172,26,199,4,"type"],[172,30,199,8],[172,32,200,4,"entries"],[172,39,200,11],[172,43,200,15],[173,6,201,6,"triggerHandlers"],[173,21,201,21],[173,22,201,22,"type"],[173,26,201,26],[173,28,201,28],[174,8,201,30,"entries"],[175,6,201,38],[175,7,201,39],[175,8,201,40],[176,4,202,4],[176,5,202,5],[176,7,203,4,"options"],[176,14,204,2],[176,15,204,3],[177,2,205,0],[178,2,207,0],[178,11,207,9,"addHandler"],[178,21,207,19,"addHandler"],[178,22,207,20,"type"],[178,26,207,24],[178,28,207,26,"handler"],[178,35,207,33],[178,37,207,35],[179,4,208,2,"handlers"],[179,12,208,10],[179,13,208,11,"type"],[179,17,208,15],[179,18,208,16],[179,21,208,19,"handlers"],[179,29,208,27],[179,30,208,28,"type"],[179,34,208,32],[179,35,208,33],[179,39,208,37],[179,41,208,39],[180,4,209,3,"handlers"],[180,12,209,11],[180,13,209,12,"type"],[180,17,209,16],[180,18,209,17],[180,19,209,20,"push"],[180,23,209,24],[180,24,209,25,"handler"],[180,31,209,32],[180,32,209,33],[181,2,210,0],[183,2,212,0],[184,2,213,0],[184,11,213,9,"getCleanupCallback"],[184,29,213,27,"getCleanupCallback"],[184,30,214,2,"type"],[184,34,214,6],[184,36,215,2,"callback"],[184,44,215,10],[184,46,216,2,"stopListening"],[184,59,216,15],[184,61,217,2],[185,4,218,2],[185,11,218,9],[185,17,218,15],[186,6,219,4],[186,10,219,8,"stopListening"],[186,23,219,21],[186,25,219,23],[187,8,220,6,"stopListening"],[187,21,220,19],[187,22,220,20],[187,23,220,21],[188,6,221,4],[189,6,223,4],[189,12,223,10,"typeHandlers"],[189,24,223,22],[189,27,223,25,"handlers"],[189,35,223,33],[189,36,223,34,"type"],[189,40,223,38],[189,41,223,39],[190,6,225,4],[190,10,225,8],[190,11,225,9,"typeHandlers"],[190,23,225,21],[190,25,225,23],[191,8,226,6],[192,6,227,4],[193,6,229,4],[193,12,229,10,"index"],[193,17,229,15],[193,20,229,18,"typeHandlers"],[193,32,229,30],[193,33,229,31,"indexOf"],[193,40,229,38],[193,41,229,39,"callback"],[193,49,229,47],[193,50,229,48],[194,6,230,4],[194,10,230,8,"index"],[194,15,230,13],[194,20,230,18],[194,21,230,19],[194,22,230,20],[194,24,230,22],[195,8,231,6,"typeHandlers"],[195,20,231,18],[195,21,231,19,"splice"],[195,27,231,25],[195,28,231,26,"index"],[195,33,231,31],[195,35,231,33],[195,36,231,34],[195,37,231,35],[196,6,232,4],[197,4,233,2],[197,5,233,3],[198,2,234,0],[200,2,236,0],[201,0,237,0],[202,0,238,0],[203,2,239,0],[203,11,239,9,"isPerformanceEventTiming"],[203,35,239,33,"isPerformanceEventTiming"],[203,36,239,34,"entry"],[203,41,239,39],[203,43,239,41],[204,4,240,2],[204,11,240,9],[204,21,240,19],[204,25,240,23,"entry"],[204,30,240,28],[205,2,241,0],[206,0,241,1],[206,3]],"functionMap":{"names":["<global>","addClsInstrumentationHandler","addLcpInstrumentationHandler","addFidInstrumentationHandler","addTtfbInstrumentationHandler","addInpInstrumentationHandler","addPerformanceInstrumentationHandler","triggerHandlers","instrumentCls","onCLS$argument_0","instrumentFid","onFID$argument_0","instrumentLcp","onLCP$argument_0","instrumentTtfb","onTTFB$argument_0","instrumentInp","onINP$argument_0","addMetricObserver","instrumentPerformanceObserver","observe$argument_1","addHandler","getCleanupCallback","<anonymous>","isPerformanceEventTiming"],"mappings":"AAA;ACyB;CDK;AES;CFK;AGM;CHE;AIK;CJE;AKM;CLI;AMO;CNY;AOG;CPkB;AQE;ICE;KDK;CRK;AUE;eCC;GDK;CVC;AYE;ICE;KDK;CZK;AcE;gBCC;GDK;CdC;AgBE;eCC;GDK;ChBC;AkBE;ClBqB;AmBE;ICU;KDE;CnBG;AqBE;CrBG;AsBG;SCK;GDe;CtBC;AwBK;CxBE"}},"type":"js/module"}]}