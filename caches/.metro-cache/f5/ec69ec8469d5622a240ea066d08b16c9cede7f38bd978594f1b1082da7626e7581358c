{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":83,"index":83}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/AppState","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"JfCM6WRyn2619+pzBJhEHd1+SSw=","exportNames":["*"]}},{"name":"../../measurements","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":87,"index":212}}],"key":"lcS7FZbbebCH+gHq+3UiyCTpqEs=","exportNames":["*"]}},{"name":"../../utils/span","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":213},"end":{"line":4,"column":46,"index":259}}],"key":"jhPoHliZ6ZEw7FF55IpVbRP9XdE=","exportNames":["*"]}},{"name":"../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":260},"end":{"line":5,"column":91,"index":351}}],"key":"mL7nJyZhzUYx+zMcIt1cBzVuRps=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stallTrackingIntegration = void 0;\n  var _core = require(_dependencyMap[1], \"@sentry/core\");\n  var _AppState = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/AppState\"));\n  var _measurements = require(_dependencyMap[3], \"../../measurements\");\n  var _span = require(_dependencyMap[4], \"../../utils/span\");\n  var _utils = require(_dependencyMap[5], \"../utils\");\n  const INTEGRATION_NAME = 'StallTracking';\n  /** Margin of error of 20ms */\n  const MARGIN_OF_ERROR_SECONDS = 0.02;\n  /** How long between each iteration in the event loop tracker timeout */\n  const LOOP_TIMEOUT_INTERVAL_MS = 50;\n  /** Limit for how many transactions the stall tracker will track at a time to prevent leaks due to transactions not being finished */\n  const MAX_RUNNING_TRANSACTIONS = 10;\n  /**\n   * Stall measurement tracker inspired by the `JSEventLoopWatchdog` used internally in React Native:\n   * https://github.com/facebook/react-native/blob/006f5afe120c290a37cf6ff896748fbc062bf7ed/Libraries/Interaction/JSEventLoopWatchdog.js\n   *\n   * However, we modified the interval implementation to instead have a fixed loop timeout interval of `LOOP_TIMEOUT_INTERVAL_MS`.\n   * We then would consider that iteration a stall when the total time for that interval to run is greater than `LOOP_TIMEOUT_INTERVAL_MS + minimumStallThreshold`\n   */\n  const stallTrackingIntegration = ({\n    minimumStallThresholdMs = 50\n  } = {}) => {\n    const statsByRootSpan = new Map();\n    const state = {\n      isTracking: false,\n      timeout: null,\n      isBackground: false,\n      lastIntervalMs: 0,\n      totalStallTime: 0,\n      stallCount: 0,\n      backgroundEventListener: appState => {\n        if (appState === 'active') {\n          state.isBackground = false;\n          if (state.timeout != null) {\n            state.lastIntervalMs = (0, _core.timestampInSeconds)() * 1000;\n            state.iteration();\n          }\n        } else {\n          state.isBackground = true;\n          state.timeout !== null && clearTimeout(state.timeout);\n        }\n      },\n      iteration: () => {\n        var _a;\n        const now = (0, _core.timestampInSeconds)() * 1000;\n        const totalTimeTaken = now - state.lastIntervalMs;\n        if (totalTimeTaken >= LOOP_TIMEOUT_INTERVAL_MS + minimumStallThresholdMs) {\n          const stallTime = totalTimeTaken - LOOP_TIMEOUT_INTERVAL_MS;\n          state.stallCount += 1;\n          state.totalStallTime += stallTime;\n          for (const [transaction, value] of statsByRootSpan.entries()) {\n            const longestStallTime = Math.max((_a = value.longestStallTime) !== null && _a !== void 0 ? _a : 0, stallTime);\n            statsByRootSpan.set(transaction, Object.assign(Object.assign({}, value), {\n              longestStallTime\n            }));\n          }\n        }\n        state.lastIntervalMs = now;\n        if (state.isTracking && !state.isBackground) {\n          state.timeout = setTimeout(state.iteration, LOOP_TIMEOUT_INTERVAL_MS);\n        }\n      }\n    };\n    const setup = client => {\n      client.on('spanStart', _onSpanStart);\n      client.on('spanEnd', _onSpanEnd);\n    };\n    const _onSpanStart = rootSpan => {\n      if (!(0, _span.isRootSpan)(rootSpan)) {\n        return;\n      }\n      if (statsByRootSpan.has(rootSpan)) {\n        _core.logger.error('[StallTracking] Tried to start stall tracking on a transaction already being tracked. Measurements might be lost.');\n        return;\n      }\n      _startTracking();\n      statsByRootSpan.set(rootSpan, {\n        longestStallTime: 0,\n        atTimestamp: null,\n        atStart: _getCurrentStats(rootSpan)\n      });\n      _flushLeakedTransactions();\n    };\n    const _onSpanEnd = rootSpan => {\n      if (!(0, _span.isRootSpan)(rootSpan)) {\n        return _onChildSpanEnd(rootSpan);\n      }\n      const transactionStats = statsByRootSpan.get(rootSpan);\n      if (!transactionStats) {\n        // Transaction has been flushed out somehow, we return null.\n        _core.logger.log('[StallTracking] Stall measurements were not added to transaction due to exceeding the max count.');\n        statsByRootSpan.delete(rootSpan);\n        _shouldStopTracking();\n        return;\n      }\n      // The endTimestamp is always set, but type-wise it's optional\n      // https://github.com/getsentry/sentry-javascript/blob/38bd57b0785c97c413f36f89ff931d927e469078/packages/core/src/tracing/sentrySpan.ts#L170\n      const endTimestamp = (0, _core.spanToJSON)(rootSpan).timestamp;\n      let statsOnFinish;\n      if ((0, _utils.isNearToNow)(endTimestamp)) {\n        statsOnFinish = _getCurrentStats(rootSpan);\n      } else {\n        // The idleSpan in JS V8 is always trimmed to the last span's endTimestamp (timestamp).\n        // The unfinished child spans are removed from the root span after the `spanEnd` event.\n        const latestChildSpanEnd = (0, _utils.getLatestChildSpanEndTimestamp)(rootSpan);\n        if (latestChildSpanEnd !== endTimestamp) {\n          _core.logger.log('[StallTracking] Stall measurements not added due to a custom `endTimestamp` (root end is not equal to the latest child span end).');\n        }\n        if (!transactionStats.atTimestamp) {\n          _core.logger.log('[StallTracking] Stall measurements not added due to `endTimestamp` not being close to now. And no previous stats from child end were found.');\n        }\n        if (latestChildSpanEnd === endTimestamp && transactionStats.atTimestamp) {\n          statsOnFinish = transactionStats.atTimestamp.stats;\n        }\n      }\n      statsByRootSpan.delete(rootSpan);\n      _shouldStopTracking();\n      if (!statsOnFinish) {\n        if (typeof endTimestamp !== 'undefined') {\n          _core.logger.log('[StallTracking] Stall measurements not added due to `endTimestamp` not being close to now.', 'endTimestamp', endTimestamp, 'now', (0, _core.timestampInSeconds)());\n        }\n        return;\n      }\n      (0, _utils.setSpanMeasurement)(rootSpan, _measurements.STALL_COUNT, statsOnFinish.stall_count.value - transactionStats.atStart.stall_count.value, transactionStats.atStart.stall_count.unit);\n      (0, _utils.setSpanMeasurement)(rootSpan, _measurements.STALL_TOTAL_TIME, statsOnFinish.stall_total_time.value - transactionStats.atStart.stall_total_time.value, transactionStats.atStart.stall_total_time.unit);\n      (0, _utils.setSpanMeasurement)(rootSpan, _measurements.STALL_LONGEST_TIME, statsOnFinish.stall_longest_time.value, statsOnFinish.stall_longest_time.unit);\n    };\n    const _onChildSpanEnd = childSpan => {\n      const rootSpan = (0, _core.getRootSpan)(childSpan);\n      const finalEndTimestamp = (0, _core.spanToJSON)(childSpan).timestamp;\n      if (finalEndTimestamp) {\n        _markSpanFinish(rootSpan, finalEndTimestamp);\n      }\n    };\n    /**\n     * Logs the finish time of the span for use in `trimEnd: true` transactions.\n     */\n    const _markSpanFinish = (rootSpan, childSpanEndTime) => {\n      const previousStats = statsByRootSpan.get(rootSpan);\n      if (previousStats) {\n        if (Math.abs((0, _core.timestampInSeconds)() - childSpanEndTime) > MARGIN_OF_ERROR_SECONDS) {\n          _core.logger.log('[StallTracking] Span end not logged due to end timestamp being outside the margin of error from now.');\n          if (previousStats.atTimestamp && previousStats.atTimestamp.timestamp < childSpanEndTime) {\n            // We also need to delete the stat for the last span, as the transaction would be trimmed to this span not the last one.\n            statsByRootSpan.set(rootSpan, Object.assign(Object.assign({}, previousStats), {\n              atTimestamp: null\n            }));\n          }\n        } else {\n          statsByRootSpan.set(rootSpan, Object.assign(Object.assign({}, previousStats), {\n            atTimestamp: {\n              timestamp: childSpanEndTime,\n              stats: _getCurrentStats(rootSpan)\n            }\n          }));\n        }\n      }\n    };\n    /**\n     * Get the current stats for a transaction at a given time.\n     */\n    const _getCurrentStats = span => {\n      var _a, _b;\n      return {\n        stall_count: {\n          value: state.stallCount,\n          unit: 'none'\n        },\n        stall_total_time: {\n          value: state.totalStallTime,\n          unit: 'millisecond'\n        },\n        stall_longest_time: {\n          value: (_b = (_a = statsByRootSpan.get(span)) === null || _a === void 0 ? void 0 : _a.longestStallTime) !== null && _b !== void 0 ? _b : 0,\n          unit: 'millisecond'\n        }\n      };\n    };\n    /**\n     * Start tracking stalls\n     */\n    const _startTracking = () => {\n      if (!state.isTracking) {\n        state.isTracking = true;\n        state.lastIntervalMs = Math.floor((0, _core.timestampInSeconds)() * 1000);\n        state.iteration();\n      }\n    };\n    /**\n     * Stops the stall tracking interval and calls reset().\n     */\n    const _stopTracking = () => {\n      state.isTracking = false;\n      if (state.timeout !== null) {\n        clearTimeout(state.timeout);\n        state.timeout = null;\n      }\n      _reset();\n    };\n    /**\n     * Will stop tracking if there are no more transactions.\n     */\n    const _shouldStopTracking = () => {\n      if (statsByRootSpan.size === 0) {\n        _stopTracking();\n      }\n    };\n    /**\n     * Clears all the collected stats\n     */\n    const _reset = () => {\n      state.stallCount = 0;\n      state.totalStallTime = 0;\n      state.lastIntervalMs = 0;\n      statsByRootSpan.clear();\n    };\n    /**\n     * Deletes leaked transactions (Earliest transactions when we have more than MAX_RUNNING_TRANSACTIONS transactions.)\n     */\n    const _flushLeakedTransactions = () => {\n      if (statsByRootSpan.size > MAX_RUNNING_TRANSACTIONS) {\n        let counter = 0;\n        const len = statsByRootSpan.size - MAX_RUNNING_TRANSACTIONS;\n        const transactions = statsByRootSpan.keys();\n        for (const t of transactions) {\n          if (counter >= len) break;\n          counter += 1;\n          statsByRootSpan.delete(t);\n        }\n      }\n    };\n    // Avoids throwing any error if using React Native on a environment that doesn't implement AppState.\n    if (_AppState.default === null || _AppState.default === void 0 ? void 0 : _AppState.default.isAvailable) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      _AppState.default.addEventListener('change', state.backgroundEventListener);\n    }\n    return {\n      name: INTEGRATION_NAME,\n      setup,\n      /** For testing only @private */\n      _internalState: state\n    };\n  };\n  exports.stallTrackingIntegration = stallTrackingIntegration;\n});","lineCount":251,"map":[[7,2,1,0],[7,6,1,0,"_core"],[7,11,1,0],[7,14,1,0,"require"],[7,21,1,0],[7,22,1,0,"_dependencyMap"],[7,36,1,0],[8,2,1,83],[8,6,1,83,"_AppState"],[8,15,1,83],[8,18,1,83,"_interopRequireDefault"],[8,40,1,83],[8,41,1,83,"require"],[8,48,1,83],[8,49,1,83,"_dependencyMap"],[8,63,1,83],[9,2,3,0],[9,6,3,0,"_measurements"],[9,19,3,0],[9,22,3,0,"require"],[9,29,3,0],[9,30,3,0,"_dependencyMap"],[9,44,3,0],[10,2,4,0],[10,6,4,0,"_span"],[10,11,4,0],[10,14,4,0,"require"],[10,21,4,0],[10,22,4,0,"_dependencyMap"],[10,36,4,0],[11,2,5,0],[11,6,5,0,"_utils"],[11,12,5,0],[11,15,5,0,"require"],[11,22,5,0],[11,23,5,0,"_dependencyMap"],[11,37,5,0],[12,2,6,0],[12,8,6,6,"INTEGRATION_NAME"],[12,24,6,22],[12,27,6,25],[12,42,6,40],[13,2,7,0],[14,2,8,0],[14,8,8,6,"MARGIN_OF_ERROR_SECONDS"],[14,31,8,29],[14,34,8,32],[14,38,8,36],[15,2,9,0],[16,2,10,0],[16,8,10,6,"LOOP_TIMEOUT_INTERVAL_MS"],[16,32,10,30],[16,35,10,33],[16,37,10,35],[17,2,11,0],[18,2,12,0],[18,8,12,6,"MAX_RUNNING_TRANSACTIONS"],[18,32,12,30],[18,35,12,33],[18,37,12,35],[19,2,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,2,20,7],[26,8,20,13,"stallTrackingIntegration"],[26,32,20,37],[26,35,20,40,"stallTrackingIntegration"],[26,36,20,41],[27,4,20,43,"minimumStallThresholdMs"],[27,27,20,66],[27,30,20,69],[28,2,20,73],[28,3,20,74],[28,6,20,77],[28,7,20,78],[28,8,20,79],[28,13,20,84],[29,4,21,4],[29,10,21,10,"statsByRootSpan"],[29,25,21,25],[29,28,21,28],[29,32,21,32,"Map"],[29,35,21,35],[29,36,21,36],[29,37,21,37],[30,4,22,4],[30,10,22,10,"state"],[30,15,22,15],[30,18,22,18],[31,6,23,8,"isTracking"],[31,16,23,18],[31,18,23,20],[31,23,23,25],[32,6,24,8,"timeout"],[32,13,24,15],[32,15,24,17],[32,19,24,21],[33,6,25,8,"isBackground"],[33,18,25,20],[33,20,25,22],[33,25,25,27],[34,6,26,8,"lastIntervalMs"],[34,20,26,22],[34,22,26,24],[34,23,26,25],[35,6,27,8,"totalStallTime"],[35,20,27,22],[35,22,27,24],[35,23,27,25],[36,6,28,8,"stallCount"],[36,16,28,18],[36,18,28,20],[36,19,28,21],[37,6,29,8,"backgroundEventListener"],[37,29,29,31],[37,31,29,34,"appState"],[37,39,29,42],[37,43,29,47],[38,8,30,12],[38,12,30,16,"appState"],[38,20,30,24],[38,25,30,29],[38,33,30,37],[38,35,30,39],[39,10,31,16,"state"],[39,15,31,21],[39,16,31,22,"isBackground"],[39,28,31,34],[39,31,31,37],[39,36,31,42],[40,10,32,16],[40,14,32,20,"state"],[40,19,32,25],[40,20,32,26,"timeout"],[40,27,32,33],[40,31,32,37],[40,35,32,41],[40,37,32,43],[41,12,33,20,"state"],[41,17,33,25],[41,18,33,26,"lastIntervalMs"],[41,32,33,40],[41,35,33,43],[41,39,33,43,"timestampInSeconds"],[41,63,33,61],[41,65,33,62],[41,66,33,63],[41,69,33,66],[41,73,33,70],[42,12,34,20,"state"],[42,17,34,25],[42,18,34,26,"iteration"],[42,27,34,35],[42,28,34,36],[42,29,34,37],[43,10,35,16],[44,8,36,12],[44,9,36,13],[44,15,37,17],[45,10,38,16,"state"],[45,15,38,21],[45,16,38,22,"isBackground"],[45,28,38,34],[45,31,38,37],[45,35,38,41],[46,10,39,16,"state"],[46,15,39,21],[46,16,39,22,"timeout"],[46,23,39,29],[46,28,39,34],[46,32,39,38],[46,36,39,42,"clearTimeout"],[46,48,39,54],[46,49,39,55,"state"],[46,54,39,60],[46,55,39,61,"timeout"],[46,62,39,68],[46,63,39,69],[47,8,40,12],[48,6,41,8],[48,7,41,9],[49,6,42,8,"iteration"],[49,15,42,17],[49,17,42,19,"iteration"],[49,18,42,19],[49,23,42,25],[50,8,43,12],[50,12,43,16,"_a"],[50,14,43,18],[51,8,44,12],[51,14,44,18,"now"],[51,17,44,21],[51,20,44,24],[51,24,44,24,"timestampInSeconds"],[51,48,44,42],[51,50,44,43],[51,51,44,44],[51,54,44,47],[51,58,44,51],[52,8,45,12],[52,14,45,18,"totalTimeTaken"],[52,28,45,32],[52,31,45,35,"now"],[52,34,45,38],[52,37,45,41,"state"],[52,42,45,46],[52,43,45,47,"lastIntervalMs"],[52,57,45,61],[53,8,46,12],[53,12,46,16,"totalTimeTaken"],[53,26,46,30],[53,30,46,34,"LOOP_TIMEOUT_INTERVAL_MS"],[53,54,46,58],[53,57,46,61,"minimumStallThresholdMs"],[53,80,46,84],[53,82,46,86],[54,10,47,16],[54,16,47,22,"stallTime"],[54,25,47,31],[54,28,47,34,"totalTimeTaken"],[54,42,47,48],[54,45,47,51,"LOOP_TIMEOUT_INTERVAL_MS"],[54,69,47,75],[55,10,48,16,"state"],[55,15,48,21],[55,16,48,22,"stallCount"],[55,26,48,32],[55,30,48,36],[55,31,48,37],[56,10,49,16,"state"],[56,15,49,21],[56,16,49,22,"totalStallTime"],[56,30,49,36],[56,34,49,40,"stallTime"],[56,43,49,49],[57,10,50,16],[57,15,50,21],[57,21,50,27],[57,22,50,28,"transaction"],[57,33,50,39],[57,35,50,41,"value"],[57,40,50,46],[57,41,50,47],[57,45,50,51,"statsByRootSpan"],[57,60,50,66],[57,61,50,67,"entries"],[57,68,50,74],[57,69,50,75],[57,70,50,76],[57,72,50,78],[58,12,51,20],[58,18,51,26,"longestStallTime"],[58,34,51,42],[58,37,51,45,"Math"],[58,41,51,49],[58,42,51,50,"max"],[58,45,51,53],[58,46,51,54],[58,47,51,55,"_a"],[58,49,51,57],[58,52,51,60,"value"],[58,57,51,65],[58,58,51,66,"longestStallTime"],[58,74,51,82],[58,80,51,88],[58,84,51,92],[58,88,51,96,"_a"],[58,90,51,98],[58,95,51,103],[58,100,51,108],[58,101,51,109],[58,104,51,112,"_a"],[58,106,51,114],[58,109,51,117],[58,110,51,118],[58,112,51,120,"stallTime"],[58,121,51,129],[58,122,51,130],[59,12,52,20,"statsByRootSpan"],[59,27,52,35],[59,28,52,36,"set"],[59,31,52,39],[59,32,52,40,"transaction"],[59,43,52,51],[59,45,52,53,"Object"],[59,51,52,59],[59,52,52,60,"assign"],[59,58,52,66],[59,59,52,67,"Object"],[59,65,52,73],[59,66,52,74,"assign"],[59,72,52,80],[59,73,52,81],[59,74,52,82],[59,75,52,83],[59,77,52,85,"value"],[59,82,52,90],[59,83,52,91],[59,85,52,93],[60,14,52,95,"longestStallTime"],[61,12,52,112],[61,13,52,113],[61,14,52,114],[61,15,52,115],[62,10,53,16],[63,8,54,12],[64,8,55,12,"state"],[64,13,55,17],[64,14,55,18,"lastIntervalMs"],[64,28,55,32],[64,31,55,35,"now"],[64,34,55,38],[65,8,56,12],[65,12,56,16,"state"],[65,17,56,21],[65,18,56,22,"isTracking"],[65,28,56,32],[65,32,56,36],[65,33,56,37,"state"],[65,38,56,42],[65,39,56,43,"isBackground"],[65,51,56,55],[65,53,56,57],[66,10,57,16,"state"],[66,15,57,21],[66,16,57,22,"timeout"],[66,23,57,29],[66,26,57,32,"setTimeout"],[66,36,57,42],[66,37,57,43,"state"],[66,42,57,48],[66,43,57,49,"iteration"],[66,52,57,58],[66,54,57,60,"LOOP_TIMEOUT_INTERVAL_MS"],[66,78,57,84],[66,79,57,85],[67,8,58,12],[68,6,59,8],[69,4,60,4],[69,5,60,5],[70,4,61,4],[70,10,61,10,"setup"],[70,15,61,15],[70,18,61,19,"client"],[70,24,61,25],[70,28,61,30],[71,6,62,8,"client"],[71,12,62,14],[71,13,62,15,"on"],[71,15,62,17],[71,16,62,18],[71,27,62,29],[71,29,62,31,"_onSpanStart"],[71,41,62,43],[71,42,62,44],[72,6,63,8,"client"],[72,12,63,14],[72,13,63,15,"on"],[72,15,63,17],[72,16,63,18],[72,25,63,27],[72,27,63,29,"_onSpanEnd"],[72,37,63,39],[72,38,63,40],[73,4,64,4],[73,5,64,5],[74,4,65,4],[74,10,65,10,"_onSpanStart"],[74,22,65,22],[74,25,65,26,"rootSpan"],[74,33,65,34],[74,37,65,39],[75,6,66,8],[75,10,66,12],[75,11,66,13],[75,15,66,13,"isRootSpan"],[75,31,66,23],[75,33,66,24,"rootSpan"],[75,41,66,32],[75,42,66,33],[75,44,66,35],[76,8,67,12],[77,6,68,8],[78,6,69,8],[78,10,69,12,"statsByRootSpan"],[78,25,69,27],[78,26,69,28,"has"],[78,29,69,31],[78,30,69,32,"rootSpan"],[78,38,69,40],[78,39,69,41],[78,41,69,43],[79,8,70,12,"logger"],[79,20,70,18],[79,21,70,19,"error"],[79,26,70,24],[79,27,70,25],[79,142,70,140],[79,143,70,141],[80,8,71,12],[81,6,72,8],[82,6,73,8,"_startTracking"],[82,20,73,22],[82,21,73,23],[82,22,73,24],[83,6,74,8,"statsByRootSpan"],[83,21,74,23],[83,22,74,24,"set"],[83,25,74,27],[83,26,74,28,"rootSpan"],[83,34,74,36],[83,36,74,38],[84,8,75,12,"longestStallTime"],[84,24,75,28],[84,26,75,30],[84,27,75,31],[85,8,76,12,"atTimestamp"],[85,19,76,23],[85,21,76,25],[85,25,76,29],[86,8,77,12,"atStart"],[86,15,77,19],[86,17,77,21,"_getCurrentStats"],[86,33,77,37],[86,34,77,38,"rootSpan"],[86,42,77,46],[87,6,78,8],[87,7,78,9],[87,8,78,10],[88,6,79,8,"_flushLeakedTransactions"],[88,30,79,32],[88,31,79,33],[88,32,79,34],[89,4,80,4],[89,5,80,5],[90,4,81,4],[90,10,81,10,"_onSpanEnd"],[90,20,81,20],[90,23,81,24,"rootSpan"],[90,31,81,32],[90,35,81,37],[91,6,82,8],[91,10,82,12],[91,11,82,13],[91,15,82,13,"isRootSpan"],[91,31,82,23],[91,33,82,24,"rootSpan"],[91,41,82,32],[91,42,82,33],[91,44,82,35],[92,8,83,12],[92,15,83,19,"_onChildSpanEnd"],[92,30,83,34],[92,31,83,35,"rootSpan"],[92,39,83,43],[92,40,83,44],[93,6,84,8],[94,6,85,8],[94,12,85,14,"transactionStats"],[94,28,85,30],[94,31,85,33,"statsByRootSpan"],[94,46,85,48],[94,47,85,49,"get"],[94,50,85,52],[94,51,85,53,"rootSpan"],[94,59,85,61],[94,60,85,62],[95,6,86,8],[95,10,86,12],[95,11,86,13,"transactionStats"],[95,27,86,29],[95,29,86,31],[96,8,87,12],[97,8,88,12,"logger"],[97,20,88,18],[97,21,88,19,"log"],[97,24,88,22],[97,25,88,23],[97,123,88,121],[97,124,88,122],[98,8,89,12,"statsByRootSpan"],[98,23,89,27],[98,24,89,28,"delete"],[98,30,89,34],[98,31,89,35,"rootSpan"],[98,39,89,43],[98,40,89,44],[99,8,90,12,"_shouldStopTracking"],[99,27,90,31],[99,28,90,32],[99,29,90,33],[100,8,91,12],[101,6,92,8],[102,6,93,8],[103,6,94,8],[104,6,95,8],[104,12,95,14,"endTimestamp"],[104,24,95,26],[104,27,95,29],[104,31,95,29,"spanToJSON"],[104,47,95,39],[104,49,95,40,"rootSpan"],[104,57,95,48],[104,58,95,49],[104,59,95,50,"timestamp"],[104,68,95,59],[105,6,96,8],[105,10,96,12,"statsOnFinish"],[105,23,96,25],[106,6,97,8],[106,10,97,12],[106,14,97,12,"isNearToNow"],[106,32,97,23],[106,34,97,24,"endTimestamp"],[106,46,97,36],[106,47,97,37],[106,49,97,39],[107,8,98,12,"statsOnFinish"],[107,21,98,25],[107,24,98,28,"_getCurrentStats"],[107,40,98,44],[107,41,98,45,"rootSpan"],[107,49,98,53],[107,50,98,54],[108,6,99,8],[108,7,99,9],[108,13,100,13],[109,8,101,12],[110,8,102,12],[111,8,103,12],[111,14,103,18,"latestChildSpanEnd"],[111,32,103,36],[111,35,103,39],[111,39,103,39,"getLatestChildSpanEndTimestamp"],[111,76,103,69],[111,78,103,70,"rootSpan"],[111,86,103,78],[111,87,103,79],[112,8,104,12],[112,12,104,16,"latestChildSpanEnd"],[112,30,104,34],[112,35,104,39,"endTimestamp"],[112,47,104,51],[112,49,104,53],[113,10,105,16,"logger"],[113,22,105,22],[113,23,105,23,"log"],[113,26,105,26],[113,27,105,27],[113,158,105,158],[113,159,105,159],[114,8,106,12],[115,8,107,12],[115,12,107,16],[115,13,107,17,"transactionStats"],[115,29,107,33],[115,30,107,34,"atTimestamp"],[115,41,107,45],[115,43,107,47],[116,10,108,16,"logger"],[116,22,108,22],[116,23,108,23,"log"],[116,26,108,26],[116,27,108,27],[116,168,108,168],[116,169,108,169],[117,8,109,12],[118,8,110,12],[118,12,110,16,"latestChildSpanEnd"],[118,30,110,34],[118,35,110,39,"endTimestamp"],[118,47,110,51],[118,51,110,55,"transactionStats"],[118,67,110,71],[118,68,110,72,"atTimestamp"],[118,79,110,83],[118,81,110,85],[119,10,111,16,"statsOnFinish"],[119,23,111,29],[119,26,111,32,"transactionStats"],[119,42,111,48],[119,43,111,49,"atTimestamp"],[119,54,111,60],[119,55,111,61,"stats"],[119,60,111,66],[120,8,112,12],[121,6,113,8],[122,6,114,8,"statsByRootSpan"],[122,21,114,23],[122,22,114,24,"delete"],[122,28,114,30],[122,29,114,31,"rootSpan"],[122,37,114,39],[122,38,114,40],[123,6,115,8,"_shouldStopTracking"],[123,25,115,27],[123,26,115,28],[123,27,115,29],[124,6,116,8],[124,10,116,12],[124,11,116,13,"statsOnFinish"],[124,24,116,26],[124,26,116,28],[125,8,117,12],[125,12,117,16],[125,19,117,23,"endTimestamp"],[125,31,117,35],[125,36,117,40],[125,47,117,51],[125,49,117,53],[126,10,118,16,"logger"],[126,22,118,22],[126,23,118,23,"log"],[126,26,118,26],[126,27,118,27],[126,119,118,119],[126,121,118,121],[126,135,118,135],[126,137,118,137,"endTimestamp"],[126,149,118,149],[126,151,118,151],[126,156,118,156],[126,158,118,158],[126,162,118,158,"timestampInSeconds"],[126,186,118,176],[126,188,118,177],[126,189,118,178],[126,190,118,179],[127,8,119,12],[128,8,120,12],[129,6,121,8],[130,6,122,8],[130,10,122,8,"setSpanMeasurement"],[130,35,122,26],[130,37,122,27,"rootSpan"],[130,45,122,35],[130,47,122,37,"STALL_COUNT"],[130,72,122,48],[130,74,122,50,"statsOnFinish"],[130,87,122,63],[130,88,122,64,"stall_count"],[130,99,122,75],[130,100,122,76,"value"],[130,105,122,81],[130,108,122,84,"transactionStats"],[130,124,122,100],[130,125,122,101,"atStart"],[130,132,122,108],[130,133,122,109,"stall_count"],[130,144,122,120],[130,145,122,121,"value"],[130,150,122,126],[130,152,122,128,"transactionStats"],[130,168,122,144],[130,169,122,145,"atStart"],[130,176,122,152],[130,177,122,153,"stall_count"],[130,188,122,164],[130,189,122,165,"unit"],[130,193,122,169],[130,194,122,170],[131,6,123,8],[131,10,123,8,"setSpanMeasurement"],[131,35,123,26],[131,37,123,27,"rootSpan"],[131,45,123,35],[131,47,123,37,"STALL_TOTAL_TIME"],[131,77,123,53],[131,79,123,55,"statsOnFinish"],[131,92,123,68],[131,93,123,69,"stall_total_time"],[131,109,123,85],[131,110,123,86,"value"],[131,115,123,91],[131,118,123,94,"transactionStats"],[131,134,123,110],[131,135,123,111,"atStart"],[131,142,123,118],[131,143,123,119,"stall_total_time"],[131,159,123,135],[131,160,123,136,"value"],[131,165,123,141],[131,167,123,143,"transactionStats"],[131,183,123,159],[131,184,123,160,"atStart"],[131,191,123,167],[131,192,123,168,"stall_total_time"],[131,208,123,184],[131,209,123,185,"unit"],[131,213,123,189],[131,214,123,190],[132,6,124,8],[132,10,124,8,"setSpanMeasurement"],[132,35,124,26],[132,37,124,27,"rootSpan"],[132,45,124,35],[132,47,124,37,"STALL_LONGEST_TIME"],[132,79,124,55],[132,81,124,57,"statsOnFinish"],[132,94,124,70],[132,95,124,71,"stall_longest_time"],[132,113,124,89],[132,114,124,90,"value"],[132,119,124,95],[132,121,124,97,"statsOnFinish"],[132,134,124,110],[132,135,124,111,"stall_longest_time"],[132,153,124,129],[132,154,124,130,"unit"],[132,158,124,134],[132,159,124,135],[133,4,125,4],[133,5,125,5],[134,4,126,4],[134,10,126,10,"_onChildSpanEnd"],[134,25,126,25],[134,28,126,29,"childSpan"],[134,37,126,38],[134,41,126,43],[135,6,127,8],[135,12,127,14,"rootSpan"],[135,20,127,22],[135,23,127,25],[135,27,127,25,"getRootSpan"],[135,44,127,36],[135,46,127,37,"childSpan"],[135,55,127,46],[135,56,127,47],[136,6,128,8],[136,12,128,14,"finalEndTimestamp"],[136,29,128,31],[136,32,128,34],[136,36,128,34,"spanToJSON"],[136,52,128,44],[136,54,128,45,"childSpan"],[136,63,128,54],[136,64,128,55],[136,65,128,56,"timestamp"],[136,74,128,65],[137,6,129,8],[137,10,129,12,"finalEndTimestamp"],[137,27,129,29],[137,29,129,31],[138,8,130,12,"_markSpanFinish"],[138,23,130,27],[138,24,130,28,"rootSpan"],[138,32,130,36],[138,34,130,38,"finalEndTimestamp"],[138,51,130,55],[138,52,130,56],[139,6,131,8],[140,4,132,4],[140,5,132,5],[141,4,133,4],[142,0,134,0],[143,0,135,0],[144,4,136,4],[144,10,136,10,"_markSpanFinish"],[144,25,136,25],[144,28,136,28,"_markSpanFinish"],[144,29,136,29,"rootSpan"],[144,37,136,37],[144,39,136,39,"childSpanEndTime"],[144,55,136,55],[144,60,136,60],[145,6,137,8],[145,12,137,14,"previousStats"],[145,25,137,27],[145,28,137,30,"statsByRootSpan"],[145,43,137,45],[145,44,137,46,"get"],[145,47,137,49],[145,48,137,50,"rootSpan"],[145,56,137,58],[145,57,137,59],[146,6,138,8],[146,10,138,12,"previousStats"],[146,23,138,25],[146,25,138,27],[147,8,139,12],[147,12,139,16,"Math"],[147,16,139,20],[147,17,139,21,"abs"],[147,20,139,24],[147,21,139,25],[147,25,139,25,"timestampInSeconds"],[147,49,139,43],[147,51,139,44],[147,52,139,45],[147,55,139,48,"childSpanEndTime"],[147,71,139,64],[147,72,139,65],[147,75,139,68,"MARGIN_OF_ERROR_SECONDS"],[147,98,139,91],[147,100,139,93],[148,10,140,16,"logger"],[148,22,140,22],[148,23,140,23,"log"],[148,26,140,26],[148,27,140,27],[148,129,140,129],[148,130,140,130],[149,10,141,16],[149,14,141,20,"previousStats"],[149,27,141,33],[149,28,141,34,"atTimestamp"],[149,39,141,45],[149,43,141,49,"previousStats"],[149,56,141,62],[149,57,141,63,"atTimestamp"],[149,68,141,74],[149,69,141,75,"timestamp"],[149,78,141,84],[149,81,141,87,"childSpanEndTime"],[149,97,141,103],[149,99,141,105],[150,12,142,20],[151,12,143,20,"statsByRootSpan"],[151,27,143,35],[151,28,143,36,"set"],[151,31,143,39],[151,32,143,40,"rootSpan"],[151,40,143,48],[151,42,143,50,"Object"],[151,48,143,56],[151,49,143,57,"assign"],[151,55,143,63],[151,56,143,64,"Object"],[151,62,143,70],[151,63,143,71,"assign"],[151,69,143,77],[151,70,143,78],[151,71,143,79],[151,72,143,80],[151,74,143,82,"previousStats"],[151,87,143,95],[151,88,143,96],[151,90,143,98],[152,14,143,100,"atTimestamp"],[152,25,143,111],[152,27,143,113],[153,12,143,118],[153,13,143,119],[153,14,143,120],[153,15,143,121],[154,10,144,16],[155,8,145,12],[155,9,145,13],[155,15,146,17],[156,10,147,16,"statsByRootSpan"],[156,25,147,31],[156,26,147,32,"set"],[156,29,147,35],[156,30,147,36,"rootSpan"],[156,38,147,44],[156,40,147,46,"Object"],[156,46,147,52],[156,47,147,53,"assign"],[156,53,147,59],[156,54,147,60,"Object"],[156,60,147,66],[156,61,147,67,"assign"],[156,67,147,73],[156,68,147,74],[156,69,147,75],[156,70,147,76],[156,72,147,78,"previousStats"],[156,85,147,91],[156,86,147,92],[156,88,147,94],[157,12,147,96,"atTimestamp"],[157,23,147,107],[157,25,147,109],[158,14,148,24,"timestamp"],[158,23,148,33],[158,25,148,35,"childSpanEndTime"],[158,41,148,51],[159,14,149,24,"stats"],[159,19,149,29],[159,21,149,31,"_getCurrentStats"],[159,37,149,47],[159,38,149,48,"rootSpan"],[159,46,149,56],[160,12,150,20],[161,10,150,22],[161,11,150,23],[161,12,150,24],[161,13,150,25],[162,8,151,12],[163,6,152,8],[164,4,153,4],[164,5,153,5],[165,4,154,4],[166,0,155,0],[167,0,156,0],[168,4,157,4],[168,10,157,10,"_getCurrentStats"],[168,26,157,26],[168,29,157,30,"span"],[168,33,157,34],[168,37,157,39],[169,6,158,8],[169,10,158,12,"_a"],[169,12,158,14],[169,14,158,16,"_b"],[169,16,158,18],[170,6,159,8],[170,13,159,15],[171,8,160,12,"stall_count"],[171,19,160,23],[171,21,160,25],[172,10,160,27,"value"],[172,15,160,32],[172,17,160,34,"state"],[172,22,160,39],[172,23,160,40,"stallCount"],[172,33,160,50],[173,10,160,52,"unit"],[173,14,160,56],[173,16,160,58],[174,8,160,65],[174,9,160,66],[175,8,161,12,"stall_total_time"],[175,24,161,28],[175,26,161,30],[176,10,161,32,"value"],[176,15,161,37],[176,17,161,39,"state"],[176,22,161,44],[176,23,161,45,"totalStallTime"],[176,37,161,59],[177,10,161,61,"unit"],[177,14,161,65],[177,16,161,67],[178,8,161,81],[178,9,161,82],[179,8,162,12,"stall_longest_time"],[179,26,162,30],[179,28,162,32],[180,10,163,16,"value"],[180,15,163,21],[180,17,163,23],[180,18,163,24,"_b"],[180,20,163,26],[180,23,163,29],[180,24,163,30,"_a"],[180,26,163,32],[180,29,163,35,"statsByRootSpan"],[180,44,163,50],[180,45,163,51,"get"],[180,48,163,54],[180,49,163,55,"span"],[180,53,163,59],[180,54,163,60],[180,60,163,66],[180,64,163,70],[180,68,163,74,"_a"],[180,70,163,76],[180,75,163,81],[180,80,163,86],[180,81,163,87],[180,84,163,90],[180,89,163,95],[180,90,163,96],[180,93,163,99,"_a"],[180,95,163,101],[180,96,163,102,"longestStallTime"],[180,112,163,118],[180,118,163,124],[180,122,163,128],[180,126,163,132,"_b"],[180,128,163,134],[180,133,163,139],[180,138,163,144],[180,139,163,145],[180,142,163,148,"_b"],[180,144,163,150],[180,147,163,153],[180,148,163,154],[181,10,164,16,"unit"],[181,14,164,20],[181,16,164,22],[182,8,165,12],[183,6,166,8],[183,7,166,9],[184,4,167,4],[184,5,167,5],[185,4,168,4],[186,0,169,0],[187,0,170,0],[188,4,171,4],[188,10,171,10,"_startTracking"],[188,24,171,24],[188,27,171,27,"_startTracking"],[188,28,171,27],[188,33,171,33],[189,6,172,8],[189,10,172,12],[189,11,172,13,"state"],[189,16,172,18],[189,17,172,19,"isTracking"],[189,27,172,29],[189,29,172,31],[190,8,173,12,"state"],[190,13,173,17],[190,14,173,18,"isTracking"],[190,24,173,28],[190,27,173,31],[190,31,173,35],[191,8,174,12,"state"],[191,13,174,17],[191,14,174,18,"lastIntervalMs"],[191,28,174,32],[191,31,174,35,"Math"],[191,35,174,39],[191,36,174,40,"floor"],[191,41,174,45],[191,42,174,46],[191,46,174,46,"timestampInSeconds"],[191,70,174,64],[191,72,174,65],[191,73,174,66],[191,76,174,69],[191,80,174,73],[191,81,174,74],[192,8,175,12,"state"],[192,13,175,17],[192,14,175,18,"iteration"],[192,23,175,27],[192,24,175,28],[192,25,175,29],[193,6,176,8],[194,4,177,4],[194,5,177,5],[195,4,178,4],[196,0,179,0],[197,0,180,0],[198,4,181,4],[198,10,181,10,"_stopTracking"],[198,23,181,23],[198,26,181,26,"_stopTracking"],[198,27,181,26],[198,32,181,32],[199,6,182,8,"state"],[199,11,182,13],[199,12,182,14,"isTracking"],[199,22,182,24],[199,25,182,27],[199,30,182,32],[200,6,183,8],[200,10,183,12,"state"],[200,15,183,17],[200,16,183,18,"timeout"],[200,23,183,25],[200,28,183,30],[200,32,183,34],[200,34,183,36],[201,8,184,12,"clearTimeout"],[201,20,184,24],[201,21,184,25,"state"],[201,26,184,30],[201,27,184,31,"timeout"],[201,34,184,38],[201,35,184,39],[202,8,185,12,"state"],[202,13,185,17],[202,14,185,18,"timeout"],[202,21,185,25],[202,24,185,28],[202,28,185,32],[203,6,186,8],[204,6,187,8,"_reset"],[204,12,187,14],[204,13,187,15],[204,14,187,16],[205,4,188,4],[205,5,188,5],[206,4,189,4],[207,0,190,0],[208,0,191,0],[209,4,192,4],[209,10,192,10,"_shouldStopTracking"],[209,29,192,29],[209,32,192,32,"_shouldStopTracking"],[209,33,192,32],[209,38,192,38],[210,6,193,8],[210,10,193,12,"statsByRootSpan"],[210,25,193,27],[210,26,193,28,"size"],[210,30,193,32],[210,35,193,37],[210,36,193,38],[210,38,193,40],[211,8,194,12,"_stopTracking"],[211,21,194,25],[211,22,194,26],[211,23,194,27],[212,6,195,8],[213,4,196,4],[213,5,196,5],[214,4,197,4],[215,0,198,0],[216,0,199,0],[217,4,200,4],[217,10,200,10,"_reset"],[217,16,200,16],[217,19,200,19,"_reset"],[217,20,200,19],[217,25,200,25],[218,6,201,8,"state"],[218,11,201,13],[218,12,201,14,"stallCount"],[218,22,201,24],[218,25,201,27],[218,26,201,28],[219,6,202,8,"state"],[219,11,202,13],[219,12,202,14,"totalStallTime"],[219,26,202,28],[219,29,202,31],[219,30,202,32],[220,6,203,8,"state"],[220,11,203,13],[220,12,203,14,"lastIntervalMs"],[220,26,203,28],[220,29,203,31],[220,30,203,32],[221,6,204,8,"statsByRootSpan"],[221,21,204,23],[221,22,204,24,"clear"],[221,27,204,29],[221,28,204,30],[221,29,204,31],[222,4,205,4],[222,5,205,5],[223,4,206,4],[224,0,207,0],[225,0,208,0],[226,4,209,4],[226,10,209,10,"_flushLeakedTransactions"],[226,34,209,34],[226,37,209,37,"_flushLeakedTransactions"],[226,38,209,37],[226,43,209,43],[227,6,210,8],[227,10,210,12,"statsByRootSpan"],[227,25,210,27],[227,26,210,28,"size"],[227,30,210,32],[227,33,210,35,"MAX_RUNNING_TRANSACTIONS"],[227,57,210,59],[227,59,210,61],[228,8,211,12],[228,12,211,16,"counter"],[228,19,211,23],[228,22,211,26],[228,23,211,27],[229,8,212,12],[229,14,212,18,"len"],[229,17,212,21],[229,20,212,24,"statsByRootSpan"],[229,35,212,39],[229,36,212,40,"size"],[229,40,212,44],[229,43,212,47,"MAX_RUNNING_TRANSACTIONS"],[229,67,212,71],[230,8,213,12],[230,14,213,18,"transactions"],[230,26,213,30],[230,29,213,33,"statsByRootSpan"],[230,44,213,48],[230,45,213,49,"keys"],[230,49,213,53],[230,50,213,54],[230,51,213,55],[231,8,214,12],[231,13,214,17],[231,19,214,23,"t"],[231,20,214,24],[231,24,214,28,"transactions"],[231,36,214,40],[231,38,214,42],[232,10,215,16],[232,14,215,20,"counter"],[232,21,215,27],[232,25,215,31,"len"],[232,28,215,34],[232,30,216,20],[233,10,217,16,"counter"],[233,17,217,23],[233,21,217,27],[233,22,217,28],[234,10,218,16,"statsByRootSpan"],[234,25,218,31],[234,26,218,32,"delete"],[234,32,218,38],[234,33,218,39,"t"],[234,34,218,40],[234,35,218,41],[235,8,219,12],[236,6,220,8],[237,4,221,4],[237,5,221,5],[238,4,222,4],[239,4,223,4],[239,8,223,8,"AppState"],[239,25,223,16],[239,30,223,21],[239,34,223,25],[239,38,223,29,"AppState"],[239,55,223,37],[239,60,223,42],[239,65,223,47],[239,66,223,48],[239,69,223,51],[239,74,223,56],[239,75,223,57],[239,78,223,60,"AppState"],[239,95,223,68],[239,96,223,69,"isAvailable"],[239,107,223,80],[239,109,223,82],[240,6,224,8],[241,6,225,8,"AppState"],[241,23,225,16],[241,24,225,17,"addEventListener"],[241,40,225,33],[241,41,225,34],[241,49,225,42],[241,51,225,44,"state"],[241,56,225,49],[241,57,225,50,"backgroundEventListener"],[241,80,225,73],[241,81,225,74],[242,4,226,4],[243,4,227,4],[243,11,227,11],[244,6,228,8,"name"],[244,10,228,12],[244,12,228,14,"INTEGRATION_NAME"],[244,28,228,30],[245,6,229,8,"setup"],[245,11,229,13],[246,6,230,8],[247,6,231,8,"_internalState"],[247,20,231,22],[247,22,231,24,"state"],[248,4,232,4],[248,5,232,5],[249,2,233,0],[249,3,233,1],[250,2,233,2,"exports"],[250,9,233,2],[250,10,233,2,"stallTrackingIntegration"],[250,34,233,2],[250,37,233,2,"stallTrackingIntegration"],[250,61,233,2],[251,0,233,2],[251,3]],"functionMap":{"names":["<global>","stallTrackingIntegration","state.backgroundEventListener","state.iteration","setup","_onSpanStart","_onSpanEnd","_onChildSpanEnd","_markSpanFinish","_getCurrentStats","_startTracking","_stopTracking","_shouldStopTracking","_reset","_flushLeakedTransactions"],"mappings":"AAA;wCCmB;iCCS;SDY;mBEC;SFiB;kBGE;KHG;yBIC;KJe;uBKC;KL4C;4BMC;KNM;4BOI;KPiB;6BQI;KRU;2BSI;KTM;0BUI;KVO;gCWI;KXI;mBYI;KZK;qCaI;KbY;CDY"}},"type":"js/module"}]}