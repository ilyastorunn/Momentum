{"dependencies":[{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":61},"end":{"line":2,"column":72,"index":133}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":134},"end":{"line":3,"column":85,"index":219}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":220},"end":{"line":4,"column":56,"index":276}}],"key":"0U0ajOOVGGoJhSEMGqMaN0tiYVA=","exportNames":["*"]}},{"name":"./instance.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":43,"index":320}}],"key":"ie2xhWeGKlSNq8uTJRpmOiu22S4=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":321},"end":{"line":6,"column":89,"index":410}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.MetricsAggregator = void 0;\n  var _time = require(_dependencyMap[0], \"../utils-hoist/time.js\");\n  var _spanUtils = require(_dependencyMap[1], \"../utils/spanUtils.js\");\n  var _constants = require(_dependencyMap[2], \"./constants.js\");\n  var _envelope = require(_dependencyMap[3], \"./envelope.js\");\n  var _instance = require(_dependencyMap[4], \"./instance.js\");\n  var _utils = require(_dependencyMap[5], \"./utils.js\");\n  /**\n   * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n   */\n  class MetricsAggregator {\n    // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n    // when the aggregator is garbage collected.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n    // Different metrics have different weights. We use this to limit the number of metrics\n    // that we store in memory.\n\n    // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n    // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n    // That shift is determined once per startup to create jittering.\n\n    // An SDK is required to perform force flushing ahead of scheduled time if the memory\n    // pressure is too high. There is no rule for this other than that SDKs should be tracking\n    // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n    // distribution is a float per emission).\n    //\n    // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n\n    constructor(_client) {\n      this._client = _client;\n      this._buckets = new Map();\n      this._bucketsTotalWeight = 0;\n      this._interval = setInterval(() => this._flush(), _constants.DEFAULT_FLUSH_INTERVAL);\n      if (this._interval.unref) {\n        this._interval.unref();\n      }\n      this._flushShift = Math.floor(Math.random() * _constants.DEFAULT_FLUSH_INTERVAL / 1000);\n      this._forceFlush = false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = (0, _time.timestampInSeconds)()) {\n      const timestamp = Math.floor(maybeFloatTimestamp);\n      const name = (0, _utils.sanitizeMetricKey)(unsanitizedName);\n      const tags = (0, _utils.sanitizeTags)(unsanitizedTags);\n      const unit = (0, _utils.sanitizeUnit)(unsanitizedUnit);\n      const bucketKey = (0, _utils.getBucketKey)(metricType, name, unit, tags);\n      let bucketItem = this._buckets.get(bucketKey);\n      // If this is a set metric, we need to calculate the delta from the previous weight.\n      const previousWeight = bucketItem && metricType === _constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n      if (bucketItem) {\n        bucketItem.metric.add(value);\n        // TODO(abhi): Do we need this check?\n        if (bucketItem.timestamp < timestamp) {\n          bucketItem.timestamp = timestamp;\n        }\n      } else {\n        bucketItem = {\n          // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n          metric: new _instance.METRIC_MAP[metricType](value),\n          timestamp,\n          metricType,\n          name,\n          unit,\n          tags\n        };\n        this._buckets.set(bucketKey, bucketItem);\n      }\n\n      // If value is a string, it's a set metric so calculate the delta from the previous weight.\n      const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n      (0, _spanUtils.updateMetricSummaryOnActiveSpan)(metricType, name, val, unit, unsanitizedTags, bucketKey);\n\n      // We need to keep track of the total weight of the buckets so that we can\n      // flush them when we exceed the max weight.\n      this._bucketsTotalWeight += bucketItem.metric.weight;\n      if (this._bucketsTotalWeight >= _constants.MAX_WEIGHT) {\n        this.flush();\n      }\n    }\n\n    /**\n     * Flushes the current metrics to the transport via the transport.\n     */\n    flush() {\n      this._forceFlush = true;\n      this._flush();\n    }\n\n    /**\n     * Shuts down metrics aggregator and clears all metrics.\n     */\n    close() {\n      this._forceFlush = true;\n      clearInterval(this._interval);\n      this._flush();\n    }\n\n    /**\n     * Flushes the buckets according to the internal state of the aggregator.\n     * If it is a force flush, which happens on shutdown, it will flush all buckets.\n     * Otherwise, it will only flush buckets that are older than the flush interval,\n     * and according to the flush shift.\n     *\n     * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n     */\n    _flush() {\n      // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n      // running at the same time.\n      // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n      // This path eliminates the need for checking for timestamps since we're forcing a flush.\n      // Remember to reset the flag, or it will always flush all metrics.\n      if (this._forceFlush) {\n        this._forceFlush = false;\n        this._bucketsTotalWeight = 0;\n        this._captureMetrics(this._buckets);\n        this._buckets.clear();\n        return;\n      }\n      const cutoffSeconds = Math.floor((0, _time.timestampInSeconds)()) - _constants.DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n      // TODO(@anonrig): Optimization opportunity.\n      // Convert this map to an array and store key in the bucketItem.\n      const flushedBuckets = new Map();\n      for (const [key, bucket] of this._buckets) {\n        if (bucket.timestamp <= cutoffSeconds) {\n          flushedBuckets.set(key, bucket);\n          this._bucketsTotalWeight -= bucket.metric.weight;\n        }\n      }\n      for (const [key] of flushedBuckets) {\n        this._buckets.delete(key);\n      }\n      this._captureMetrics(flushedBuckets);\n    }\n\n    /**\n     * Only captures a subset of the buckets passed to this function.\n     * @param flushedBuckets\n     */\n    _captureMetrics(flushedBuckets) {\n      if (flushedBuckets.size > 0) {\n        // TODO(@anonrig): Optimization opportunity.\n        // This copy operation can be avoided if we store the key in the bucketItem.\n        const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n        (0, _envelope.captureAggregateMetrics)(this._client, buckets);\n      }\n    }\n  }\n  exports.MetricsAggregator = MetricsAggregator;\n});","lineCount":159,"map":[[6,2,1,0],[6,6,1,0,"_time"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,2,0],[7,6,2,0,"_spanUtils"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_constants"],[8,16,3,0],[8,19,3,0,"require"],[8,26,3,0],[8,27,3,0,"_dependencyMap"],[8,41,3,0],[9,2,4,0],[9,6,4,0,"_envelope"],[9,15,4,0],[9,18,4,0,"require"],[9,25,4,0],[9,26,4,0,"_dependencyMap"],[9,40,4,0],[10,2,5,0],[10,6,5,0,"_instance"],[10,15,5,0],[10,18,5,0,"require"],[10,25,5,0],[10,26,5,0,"_dependencyMap"],[10,40,5,0],[11,2,6,0],[11,6,6,0,"_utils"],[11,12,6,0],[11,15,6,0,"require"],[11,22,6,0],[11,23,6,0,"_dependencyMap"],[11,37,6,0],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,2,11,0],[15,8,11,6,"MetricsAggregator"],[15,25,11,23],[15,26,11,25],[16,4,12,2],[17,4,13,2],[18,4,14,2],[20,4,16,2],[21,4,17,2],[23,4,19,2],[25,4,21,2],[26,4,22,2],[28,4,24,2],[29,4,25,2],[30,4,26,2],[31,4,27,2],[32,4,28,2],[33,4,29,2],[35,4,31,3,"constructor"],[35,15,31,14,"constructor"],[35,16,31,17,"_client"],[35,23,31,24],[35,25,31,26],[36,6,31,27],[36,10,31,31],[36,11,31,32,"_client"],[36,18,31,39],[36,21,31,42,"_client"],[36,28,31,49],[37,6,32,4],[37,10,32,8],[37,11,32,9,"_buckets"],[37,19,32,17],[37,22,32,20],[37,26,32,24,"Map"],[37,29,32,27],[37,30,32,28],[37,31,32,29],[38,6,33,4],[38,10,33,8],[38,11,33,9,"_bucketsTotalWeight"],[38,30,33,28],[38,33,33,31],[38,34,33,32],[39,6,35,4],[39,10,35,8],[39,11,35,9,"_interval"],[39,20,35,18],[39,23,35,21,"setInterval"],[39,34,35,32],[39,35,35,33],[39,41,35,39],[39,45,35,43],[39,46,35,44,"_flush"],[39,52,35,50],[39,53,35,51],[39,54,35,52],[39,56,35,54,"DEFAULT_FLUSH_INTERVAL"],[39,89,35,76],[39,90,35,77],[40,6,36,4],[40,10,36,8],[40,14,36,12],[40,15,36,13,"_interval"],[40,24,36,22],[40,25,36,23,"unref"],[40,30,36,28],[40,32,36,30],[41,8,37,6],[41,12,37,10],[41,13,37,11,"_interval"],[41,22,37,20],[41,23,37,21,"unref"],[41,28,37,26],[41,29,37,27],[41,30,37,28],[42,6,38,4],[43,6,40,4],[43,10,40,8],[43,11,40,9,"_flushShift"],[43,22,40,20],[43,25,40,23,"Math"],[43,29,40,27],[43,30,40,28,"floor"],[43,35,40,33],[43,36,40,35,"Math"],[43,40,40,39],[43,41,40,40,"random"],[43,47,40,46],[43,48,40,47],[43,49,40,48],[43,52,40,51,"DEFAULT_FLUSH_INTERVAL"],[43,85,40,73],[43,88,40,77],[43,92,40,81],[43,93,40,82],[44,6,41,4],[44,10,41,8],[44,11,41,9,"_forceFlush"],[44,22,41,20],[44,25,41,23],[44,30,41,28],[45,4,42,2],[47,4,44,2],[48,0,45,0],[49,0,46,0],[50,4,47,3,"add"],[50,7,47,6,"add"],[50,8,48,4,"metricType"],[50,18,48,14],[50,20,49,4,"unsanitizedName"],[50,35,49,19],[50,37,50,4,"value"],[50,42,50,9],[50,44,51,4,"unsanitizedUnit"],[50,59,51,19],[50,62,51,22],[50,68,51,28],[50,70,52,4,"unsanitizedTags"],[50,85,52,19],[50,88,52,22],[50,89,52,23],[50,90,52,24],[50,92,53,4,"maybeFloatTimestamp"],[50,111,53,23],[50,114,53,26],[50,118,53,26,"timestampInSeconds"],[50,142,53,44],[50,144,53,45],[50,145,53,46],[50,147,54,4],[51,6,55,4],[51,12,55,10,"timestamp"],[51,21,55,19],[51,24,55,22,"Math"],[51,28,55,26],[51,29,55,27,"floor"],[51,34,55,32],[51,35,55,33,"maybeFloatTimestamp"],[51,54,55,52],[51,55,55,53],[52,6,56,4],[52,12,56,10,"name"],[52,16,56,14],[52,19,56,17],[52,23,56,17,"sanitizeMetricKey"],[52,47,56,34],[52,49,56,35,"unsanitizedName"],[52,64,56,50],[52,65,56,51],[53,6,57,4],[53,12,57,10,"tags"],[53,16,57,14],[53,19,57,17],[53,23,57,17,"sanitizeTags"],[53,42,57,29],[53,44,57,30,"unsanitizedTags"],[53,59,57,45],[53,60,57,46],[54,6,58,4],[54,12,58,10,"unit"],[54,16,58,14],[54,19,58,17],[54,23,58,17,"sanitizeUnit"],[54,42,58,29],[54,44,58,30,"unsanitizedUnit"],[54,59,58,46],[54,60,58,47],[55,6,60,4],[55,12,60,10,"bucketKey"],[55,21,60,19],[55,24,60,22],[55,28,60,22,"getBucketKey"],[55,47,60,34],[55,49,60,35,"metricType"],[55,59,60,45],[55,61,60,47,"name"],[55,65,60,51],[55,67,60,53,"unit"],[55,71,60,57],[55,73,60,59,"tags"],[55,77,60,63],[55,78,60,64],[56,6,62,4],[56,10,62,8,"bucketItem"],[56,20,62,18],[56,23,62,21],[56,27,62,25],[56,28,62,26,"_buckets"],[56,36,62,34],[56,37,62,35,"get"],[56,40,62,38],[56,41,62,39,"bucketKey"],[56,50,62,48],[56,51,62,49],[57,6,63,4],[58,6,64,4],[58,12,64,10,"previousWeight"],[58,26,64,24],[58,29,64,27,"bucketItem"],[58,39,64,37],[58,43,64,41,"metricType"],[58,53,64,51],[58,58,64,56,"SET_METRIC_TYPE"],[58,84,64,71],[58,87,64,74,"bucketItem"],[58,97,64,84],[58,98,64,85,"metric"],[58,104,64,91],[58,105,64,92,"weight"],[58,111,64,98],[58,114,64,101],[58,115,64,102],[59,6,66,4],[59,10,66,8,"bucketItem"],[59,20,66,18],[59,22,66,20],[60,8,67,6,"bucketItem"],[60,18,67,16],[60,19,67,17,"metric"],[60,25,67,23],[60,26,67,24,"add"],[60,29,67,27],[60,30,67,28,"value"],[60,35,67,33],[60,36,67,34],[61,8,68,6],[62,8,69,6],[62,12,69,10,"bucketItem"],[62,22,69,20],[62,23,69,21,"timestamp"],[62,32,69,30],[62,35,69,33,"timestamp"],[62,44,69,42],[62,46,69,44],[63,10,70,8,"bucketItem"],[63,20,70,18],[63,21,70,19,"timestamp"],[63,30,70,28],[63,33,70,31,"timestamp"],[63,42,70,40],[64,8,71,6],[65,6,72,4],[65,7,72,5],[65,13,72,11],[66,8,73,6,"bucketItem"],[66,18,73,16],[66,21,73,19],[67,10,74,8],[68,10,75,8,"metric"],[68,16,75,14],[68,18,75,16],[68,22,75,20,"METRIC_MAP"],[68,42,75,30],[68,43,75,31,"metricType"],[68,53,75,41],[68,54,75,42],[68,55,75,43,"value"],[68,60,75,48],[68,61,75,49],[69,10,76,8,"timestamp"],[69,19,76,17],[70,10,77,8,"metricType"],[70,20,77,18],[71,10,78,8,"name"],[71,14,78,12],[72,10,79,8,"unit"],[72,14,79,12],[73,10,80,8,"tags"],[74,8,81,6],[74,9,81,7],[75,8,82,6],[75,12,82,10],[75,13,82,11,"_buckets"],[75,21,82,19],[75,22,82,20,"set"],[75,25,82,23],[75,26,82,24,"bucketKey"],[75,35,82,33],[75,37,82,35,"bucketItem"],[75,47,82,45],[75,48,82,46],[76,6,83,4],[78,6,85,4],[79,6,86,4],[79,12,86,10,"val"],[79,15,86,13],[79,18,86,16],[79,25,86,23,"value"],[79,30,86,28],[79,35,86,33],[79,43,86,41],[79,46,86,44,"bucketItem"],[79,56,86,54],[79,57,86,55,"metric"],[79,63,86,61],[79,64,86,62,"weight"],[79,70,86,68],[79,73,86,71,"previousWeight"],[79,87,86,85],[79,90,86,88,"value"],[79,95,86,93],[80,6,87,4],[80,10,87,4,"updateMetricSummaryOnActiveSpan"],[80,52,87,35],[80,54,87,36,"metricType"],[80,64,87,46],[80,66,87,48,"name"],[80,70,87,52],[80,72,87,54,"val"],[80,75,87,57],[80,77,87,59,"unit"],[80,81,87,63],[80,83,87,65,"unsanitizedTags"],[80,98,87,80],[80,100,87,82,"bucketKey"],[80,109,87,91],[80,110,87,92],[82,6,89,4],[83,6,90,4],[84,6,91,4],[84,10,91,8],[84,11,91,9,"_bucketsTotalWeight"],[84,30,91,28],[84,34,91,32,"bucketItem"],[84,44,91,42],[84,45,91,43,"metric"],[84,51,91,49],[84,52,91,50,"weight"],[84,58,91,56],[85,6,93,4],[85,10,93,8],[85,14,93,12],[85,15,93,13,"_bucketsTotalWeight"],[85,34,93,32],[85,38,93,36,"MAX_WEIGHT"],[85,59,93,46],[85,61,93,48],[86,8,94,6],[86,12,94,10],[86,13,94,11,"flush"],[86,18,94,16],[86,19,94,17],[86,20,94,18],[87,6,95,4],[88,4,96,2],[90,4,98,2],[91,0,99,0],[92,0,100,0],[93,4,101,3,"flush"],[93,9,101,8,"flush"],[93,10,101,8],[93,12,101,11],[94,6,102,4],[94,10,102,8],[94,11,102,9,"_forceFlush"],[94,22,102,20],[94,25,102,23],[94,29,102,27],[95,6,103,4],[95,10,103,8],[95,11,103,9,"_flush"],[95,17,103,15],[95,18,103,16],[95,19,103,17],[96,4,104,2],[98,4,106,2],[99,0,107,0],[100,0,108,0],[101,4,109,3,"close"],[101,9,109,8,"close"],[101,10,109,8],[101,12,109,11],[102,6,110,4],[102,10,110,8],[102,11,110,9,"_forceFlush"],[102,22,110,20],[102,25,110,23],[102,29,110,27],[103,6,111,4,"clearInterval"],[103,19,111,17],[103,20,111,18],[103,24,111,22],[103,25,111,23,"_interval"],[103,34,111,32],[103,35,111,33],[104,6,112,4],[104,10,112,8],[104,11,112,9,"_flush"],[104,17,112,15],[104,18,112,16],[104,19,112,17],[105,4,113,2],[107,4,115,2],[108,0,116,0],[109,0,117,0],[110,0,118,0],[111,0,119,0],[112,0,120,0],[113,0,121,0],[114,0,122,0],[115,4,123,3,"_flush"],[115,10,123,9,"_flush"],[115,11,123,9],[115,13,123,12],[116,6,124,4],[117,6,125,4],[118,6,126,4],[120,6,128,4],[121,6,129,4],[122,6,130,4],[122,10,130,8],[122,14,130,12],[122,15,130,13,"_forceFlush"],[122,26,130,24],[122,28,130,26],[123,8,131,6],[123,12,131,10],[123,13,131,11,"_forceFlush"],[123,24,131,22],[123,27,131,25],[123,32,131,30],[124,8,132,6],[124,12,132,10],[124,13,132,11,"_bucketsTotalWeight"],[124,32,132,30],[124,35,132,33],[124,36,132,34],[125,8,133,6],[125,12,133,10],[125,13,133,11,"_captureMetrics"],[125,28,133,26],[125,29,133,27],[125,33,133,31],[125,34,133,32,"_buckets"],[125,42,133,40],[125,43,133,41],[126,8,134,6],[126,12,134,10],[126,13,134,11,"_buckets"],[126,21,134,19],[126,22,134,20,"clear"],[126,27,134,25],[126,28,134,26],[126,29,134,27],[127,8,135,6],[128,6,136,4],[129,6,137,4],[129,12,137,10,"cutoffSeconds"],[129,25,137,23],[129,28,137,26,"Math"],[129,32,137,30],[129,33,137,31,"floor"],[129,38,137,36],[129,39,137,37],[129,43,137,37,"timestampInSeconds"],[129,67,137,55],[129,69,137,56],[129,70,137,57],[129,71,137,58],[129,74,137,61,"DEFAULT_FLUSH_INTERVAL"],[129,107,137,83],[129,110,137,86],[129,114,137,90],[129,117,137,93],[129,121,137,97],[129,122,137,98,"_flushShift"],[129,133,137,109],[130,6,138,4],[131,6,139,4],[132,6,140,4],[132,12,140,10,"flushedBuckets"],[132,26,140,24],[132,29,140,27],[132,33,140,31,"Map"],[132,36,140,34],[132,37,140,35],[132,38,140,36],[133,6,141,4],[133,11,141,9],[133,17,141,15],[133,18,141,16,"key"],[133,21,141,19],[133,23,141,21,"bucket"],[133,29,141,27],[133,30,141,28],[133,34,141,32],[133,38,141,36],[133,39,141,37,"_buckets"],[133,47,141,45],[133,49,141,47],[134,8,142,6],[134,12,142,10,"bucket"],[134,18,142,16],[134,19,142,17,"timestamp"],[134,28,142,26],[134,32,142,30,"cutoffSeconds"],[134,45,142,43],[134,47,142,45],[135,10,143,8,"flushedBuckets"],[135,24,143,22],[135,25,143,23,"set"],[135,28,143,26],[135,29,143,27,"key"],[135,32,143,30],[135,34,143,32,"bucket"],[135,40,143,38],[135,41,143,39],[136,10,144,8],[136,14,144,12],[136,15,144,13,"_bucketsTotalWeight"],[136,34,144,32],[136,38,144,36,"bucket"],[136,44,144,42],[136,45,144,43,"metric"],[136,51,144,49],[136,52,144,50,"weight"],[136,58,144,56],[137,8,145,6],[138,6,146,4],[139,6,148,4],[139,11,148,9],[139,17,148,15],[139,18,148,16,"key"],[139,21,148,19],[139,22,148,20],[139,26,148,24,"flushedBuckets"],[139,40,148,38],[139,42,148,40],[140,8,149,6],[140,12,149,10],[140,13,149,11,"_buckets"],[140,21,149,19],[140,22,149,20,"delete"],[140,28,149,26],[140,29,149,27,"key"],[140,32,149,30],[140,33,149,31],[141,6,150,4],[142,6,152,4],[142,10,152,8],[142,11,152,9,"_captureMetrics"],[142,26,152,24],[142,27,152,25,"flushedBuckets"],[142,41,152,39],[142,42,152,40],[143,4,153,2],[145,4,155,2],[146,0,156,0],[147,0,157,0],[148,0,158,0],[149,4,159,3,"_captureMetrics"],[149,19,159,18,"_captureMetrics"],[149,20,159,19,"flushedBuckets"],[149,34,159,33],[149,36,159,35],[150,6,160,4],[150,10,160,8,"flushedBuckets"],[150,24,160,22],[150,25,160,23,"size"],[150,29,160,27],[150,32,160,30],[150,33,160,31],[150,35,160,33],[151,8,161,6],[152,8,162,6],[153,8,163,6],[153,14,163,12,"buckets"],[153,21,163,19],[153,24,163,22,"Array"],[153,29,163,27],[153,30,163,28,"from"],[153,34,163,32],[153,35,163,33,"flushedBuckets"],[153,49,163,47],[153,50,163,48],[153,51,163,49,"map"],[153,54,163,52],[153,55,163,53],[153,56,163,54],[153,59,163,57,"bucketItem"],[153,69,163,67],[153,70,163,68],[153,75,163,73,"bucketItem"],[153,85,163,83],[153,86,163,84],[154,8,164,6],[154,12,164,6,"captureAggregateMetrics"],[154,45,164,29],[154,47,164,30],[154,51,164,34],[154,52,164,35,"_client"],[154,59,164,42],[154,61,164,44,"buckets"],[154,68,164,51],[154,69,164,52],[155,6,165,4],[156,4,166,2],[157,2,167,0],[158,2,167,1,"exports"],[158,9,167,1],[158,10,167,1,"MetricsAggregator"],[158,27,167,1],[158,30,167,1,"MetricsAggregator"],[158,47,167,1],[159,0,167,1],[159,3]],"functionMap":{"names":["<global>","MetricsAggregator","MetricsAggregator#constructor","setInterval$argument_0","MetricsAggregator#add","MetricsAggregator#flush","MetricsAggregator#close","MetricsAggregator#_flush","MetricsAggregator#_captureMetrics","Array.from.map$argument_0"],"mappings":"AAA;ACU;GCoB;iCCI,mBD;GDO;GGK;GHiD;GIK;GJG;GKK;GLI;GMU;GN8B;GOM;qDCI,8BD;GPG;CDC"}},"type":"js/module"}]}