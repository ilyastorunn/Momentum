{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._optionalChain = _optionalChain;\n  /**\n   * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n   * descriptors, and functions.\n   *\n   * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n   * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n   *\n   * @param ops Array result of expression conversion\n   * @returns The value of the expression\n   */\n  function _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      // by checking for loose equality to `null`, we catch both `null` and `undefined`\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n        return;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n\n  // Sucrase version\n  // function _optionalChain(ops) {\n  //   let lastAccessLHS = undefined;\n  //   let value = ops[0];\n  //   let i = 1;\n  //   while (i < ops.length) {\n  //     const op = ops[i];\n  //     const fn = ops[i + 1];\n  //     i += 2;\n  //     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n  //       return undefined;\n  //     }\n  //     if (op === 'access' || op === 'optionalAccess') {\n  //       lastAccessLHS = value;\n  //       value = fn(value);\n  //     } else if (op === 'call' || op === 'optionalCall') {\n  //       value = fn((...args) => value.call(lastAccessLHS, ...args));\n  //       lastAccessLHS = undefined;\n  //     }\n  //   }\n  //   return value;\n  // }\n});","lineCount":62,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,2,11,0],[16,11,11,9,"_optionalChain"],[16,25,11,23,"_optionalChain"],[16,26,11,24,"ops"],[16,29,11,27],[16,31,11,29],[17,4,12,2],[17,8,12,6,"lastAccessLHS"],[17,21,12,19],[17,24,12,22,"undefined"],[17,33,12,31],[18,4,13,2],[18,8,13,6,"value"],[18,13,13,11],[18,16,13,14,"ops"],[18,19,13,17],[18,20,13,18],[18,21,13,19],[18,22,13,20],[19,4,14,2],[19,8,14,6,"i"],[19,9,14,7],[19,12,14,10],[19,13,14,11],[20,4,15,2],[20,11,15,9,"i"],[20,12,15,10],[20,15,15,13,"ops"],[20,18,15,16],[20,19,15,17,"length"],[20,25,15,23],[20,27,15,25],[21,6,16,4],[21,12,16,10,"op"],[21,14,16,12],[21,17,16,15,"ops"],[21,20,16,18],[21,21,16,19,"i"],[21,22,16,20],[21,23,16,21],[22,6,17,4],[22,12,17,10,"fn"],[22,14,17,12],[22,17,17,15,"ops"],[22,20,17,18],[22,21,17,19,"i"],[22,22,17,20],[22,25,17,23],[22,26,17,24],[22,27,17,25],[23,6,18,4,"i"],[23,7,18,5],[23,11,18,9],[23,12,18,10],[24,6,19,4],[25,6,20,4],[25,10,20,8],[25,11,20,9,"op"],[25,13,20,11],[25,18,20,16],[25,34,20,32],[25,38,20,36,"op"],[25,40,20,38],[25,45,20,43],[25,59,20,57],[25,64,20,62,"value"],[25,69,20,67],[25,73,20,71],[25,77,20,75],[25,79,20,77],[26,8,21,6],[27,8,22,6],[28,6,23,4],[29,6,24,4],[29,10,24,8,"op"],[29,12,24,10],[29,17,24,15],[29,25,24,23],[29,29,24,27,"op"],[29,31,24,29],[29,36,24,34],[29,52,24,50],[29,54,24,52],[30,8,25,6,"lastAccessLHS"],[30,21,25,19],[30,24,25,22,"value"],[30,29,25,27],[31,8,26,6,"value"],[31,13,26,11],[31,16,26,14,"fn"],[31,18,26,16],[31,19,26,17,"value"],[31,24,26,22],[31,25,26,23],[32,6,27,4],[32,7,27,5],[32,13,27,11],[32,17,27,15,"op"],[32,19,27,17],[32,24,27,22],[32,30,27,28],[32,34,27,32,"op"],[32,36,27,34],[32,41,27,39],[32,55,27,53],[32,57,27,55],[33,8,28,6,"value"],[33,13,28,11],[33,16,28,14,"fn"],[33,18,28,16],[33,19,28,17],[33,20,28,18],[33,23,28,21,"args"],[33,27,28,25],[33,32,28,31,"value"],[33,37,28,36],[33,38,28,39,"call"],[33,42,28,43],[33,43,28,44,"lastAccessLHS"],[33,56,28,57],[33,58,28,59],[33,61,28,62,"args"],[33,65,28,66],[33,66,28,67],[33,67,28,68],[34,8,29,6,"lastAccessLHS"],[34,21,29,19],[34,24,29,22,"undefined"],[34,33,29,31],[35,6,30,4],[36,4,31,2],[37,4,32,2],[37,11,32,9,"value"],[37,16,32,14],[38,2,33,0],[40,2,35,0],[41,2,36,0],[42,2,37,0],[43,2,38,0],[44,2,39,0],[45,2,40,0],[46,2,41,0],[47,2,42,0],[48,2,43,0],[49,2,44,0],[50,2,45,0],[51,2,46,0],[52,2,47,0],[53,2,48,0],[54,2,49,0],[55,2,50,0],[56,2,51,0],[57,2,52,0],[58,2,53,0],[59,2,54,0],[60,2,55,0],[61,2,56,0],[62,0,56,0],[62,3]],"functionMap":{"names":["<global>","_optionalChain","fn$argument_0"],"mappings":"AAA;ACU;iBCiB,kDD;CDK"}},"type":"js/module"}]}