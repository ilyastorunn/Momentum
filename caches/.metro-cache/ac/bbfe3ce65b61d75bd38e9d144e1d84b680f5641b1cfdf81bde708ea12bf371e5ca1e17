{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.observe = void 0;\n  /*\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     https://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * Takes a performance entry type and a callback function, and creates a\n   * `PerformanceObserver` instance that will observe the specified entry type\n   * with buffering enabled and call the callback _for each entry_.\n   *\n   * This function also feature-detects entry support and wraps the logic in a\n   * try/catch to avoid errors in unsupporting browsers.\n   */\n  const observe = (type, callback, opts) => {\n    try {\n      if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n        const po = new PerformanceObserver(list => {\n          // Delay by a microtask to workaround a bug in Safari where the\n          // callback is invoked immediately, rather than in a separate task.\n          // See: https://github.com/GoogleChrome/web-vitals/issues/277\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          Promise.resolve().then(() => {\n            callback(list.getEntries());\n          });\n        });\n        po.observe(Object.assign({\n          type,\n          buffered: true\n        }, opts || {}));\n        return po;\n      }\n    } catch (e) {\n      // Do nothing.\n    }\n    return;\n  };\n  exports.observe = observe;\n});","lineCount":54,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[22,2,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,2,25,0],[30,8,25,6,"observe"],[30,15,25,13],[30,18,25,16,"observe"],[30,19,26,2,"type"],[30,23,26,6],[30,25,27,2,"callback"],[30,33,27,10],[30,35,28,2,"opts"],[30,39,28,6],[30,44,29,5],[31,4,30,2],[31,8,30,6],[32,6,31,4],[32,10,31,8,"PerformanceObserver"],[32,29,31,27],[32,30,31,28,"supportedEntryTypes"],[32,49,31,47],[32,50,31,48,"includes"],[32,58,31,56],[32,59,31,57,"type"],[32,63,31,61],[32,64,31,62],[32,66,31,64],[33,8,32,6],[33,14,32,12,"po"],[33,16,32,14],[33,19,32,17],[33,23,32,21,"PerformanceObserver"],[33,42,32,40],[33,43,32,41,"list"],[33,47,32,45],[33,51,32,49],[34,10,33,8],[35,10,34,8],[36,10,35,8],[37,10,36,8],[38,10,37,8,"Promise"],[38,17,37,15],[38,18,37,16,"resolve"],[38,25,37,23],[38,26,37,24],[38,27,37,25],[38,28,37,26,"then"],[38,32,37,30],[38,33,37,31],[38,39,37,37],[39,12,38,10,"callback"],[39,20,38,18],[39,21,38,19,"list"],[39,25,38,23],[39,26,38,24,"getEntries"],[39,36,38,34],[39,37,38,35],[39,38,38,37],[39,39,38,38],[40,10,39,8],[40,11,39,9],[40,12,39,10],[41,8,40,6],[41,9,40,7],[41,10,40,8],[42,8,41,6,"po"],[42,10,41,8],[42,11,41,9,"observe"],[42,18,41,16],[42,19,42,8,"Object"],[42,25,42,14],[42,26,42,15,"assign"],[42,32,42,21],[42,33,43,10],[43,10,44,12,"type"],[43,14,44,16],[44,10,45,12,"buffered"],[44,18,45,20],[44,20,45,22],[45,8,46,10],[45,9,46,11],[45,11,47,10,"opts"],[45,15,47,14],[45,19,47,18],[45,20,47,19],[45,21,48,8],[45,22,49,6],[45,23,49,7],[46,8,50,6],[46,15,50,13,"po"],[46,17,50,15],[47,6,51,4],[48,4,52,2],[48,5,52,3],[48,6,52,4],[48,13,52,11,"e"],[48,14,52,12],[48,16,52,14],[49,6,53,4],[50,4,53,4],[51,4,55,2],[52,2,56,0],[52,3,56,1],[53,2,56,2,"exports"],[53,9,56,2],[53,10,56,2,"observe"],[53,17,56,2],[53,20,56,2,"observe"],[53,27,56,2],[54,0,56,2],[54,3]],"functionMap":{"names":["<global>","observe","PerformanceObserver$argument_0","Promise.resolve.then$argument_0"],"mappings":"AAA;gBCwB;yCCO;+BCK;SDE;ODC;CDgB"}},"type":"js/module"}]}