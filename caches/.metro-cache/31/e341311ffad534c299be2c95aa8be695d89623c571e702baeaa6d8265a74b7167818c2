{"dependencies":[{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":47,"index":47}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}},{"name":"./logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":48},"end":{"line":2,"column":53,"index":101}}],"key":"iVYhB1kviQI8ndYBeJYcuS1MqTQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.dsnFromString = dsnFromString;\n  exports.dsnToString = dsnToString;\n  exports.makeDsn = makeDsn;\n  var _debugBuild = require(_dependencyMap[0], \"./debug-build.js\");\n  var _logger = require(_dependencyMap[1], \"./logger.js\");\n  /** Regular expression used to parse a Dsn. */\n  const DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n  function isValidProtocol(protocol) {\n    return protocol === 'http' || protocol === 'https';\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  function dsnToString(dsn, withPassword = false) {\n    const {\n      host,\n      path,\n      pass,\n      port,\n      projectId,\n      protocol,\n      publicKey\n    } = dsn;\n    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` + `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`;\n  }\n\n  /**\n   * Parses a Dsn from a given string.\n   *\n   * @param str A Dsn as string\n   * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n   */\n  function dsnFromString(str) {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n      // This should be logged to the console\n      (0, _logger.consoleSandbox)(() => {\n        // eslint-disable-next-line no-console\n        console.error(`Invalid Sentry Dsn: ${str}`);\n      });\n      return undefined;\n    }\n    const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n    return dsnFromComponents({\n      host,\n      pass,\n      path,\n      projectId,\n      port,\n      protocol: protocol,\n      publicKey\n    });\n  }\n  function dsnFromComponents(components) {\n    return {\n      protocol: components.protocol,\n      publicKey: components.publicKey || '',\n      pass: components.pass || '',\n      host: components.host,\n      port: components.port || '',\n      path: components.path || '',\n      projectId: components.projectId\n    };\n  }\n  function validateDsn(dsn) {\n    if (!_debugBuild.DEBUG_BUILD) {\n      return true;\n    }\n    const {\n      port,\n      projectId,\n      protocol\n    } = dsn;\n    const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n    const hasMissingRequiredComponent = requiredComponents.find(component => {\n      if (!dsn[component]) {\n        _logger.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n        return true;\n      }\n      return false;\n    });\n    if (hasMissingRequiredComponent) {\n      return false;\n    }\n    if (!projectId.match(/^\\d+$/)) {\n      _logger.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n      return false;\n    }\n    if (!isValidProtocol(protocol)) {\n      _logger.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n      return false;\n    }\n    if (port && isNaN(parseInt(port, 10))) {\n      _logger.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n   * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n   */\n  function makeDsn(from) {\n    const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n    if (!components || !validateDsn(components)) {\n      return undefined;\n    }\n    return components;\n  }\n});","lineCount":135,"map":[[8,2,1,0],[8,6,1,0,"_debugBuild"],[8,17,1,0],[8,20,1,0,"require"],[8,27,1,0],[8,28,1,0,"_dependencyMap"],[8,42,1,0],[9,2,2,0],[9,6,2,0,"_logger"],[9,13,2,0],[9,16,2,0,"require"],[9,23,2,0],[9,24,2,0,"_dependencyMap"],[9,38,2,0],[10,2,4,0],[11,2,5,0],[11,8,5,6,"DSN_REGEX"],[11,17,5,15],[11,20,5,18],[11,85,5,83],[12,2,7,0],[12,11,7,9,"isValidProtocol"],[12,26,7,24,"isValidProtocol"],[12,27,7,25,"protocol"],[12,35,7,33],[12,37,7,35],[13,4,8,2],[13,11,8,9,"protocol"],[13,19,8,17],[13,24,8,22],[13,30,8,28],[13,34,8,32,"protocol"],[13,42,8,40],[13,47,8,45],[13,54,8,52],[14,2,9,0],[16,2,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,2,20,0],[25,11,20,9,"dsnToString"],[25,22,20,20,"dsnToString"],[25,23,20,21,"dsn"],[25,26,20,24],[25,28,20,26,"withPassword"],[25,40,20,38],[25,43,20,41],[25,48,20,46],[25,50,20,48],[26,4,21,2],[26,10,21,8],[27,6,21,10,"host"],[27,10,21,14],[28,6,21,16,"path"],[28,10,21,20],[29,6,21,22,"pass"],[29,10,21,26],[30,6,21,28,"port"],[30,10,21,32],[31,6,21,34,"projectId"],[31,15,21,43],[32,6,21,45,"protocol"],[32,14,21,53],[33,6,21,55,"publicKey"],[34,4,21,65],[34,5,21,66],[34,8,21,69,"dsn"],[34,11,21,72],[35,4,22,2],[35,11,23,4],[35,14,23,7,"protocol"],[35,22,23,15],[35,28,23,21,"publicKey"],[35,37,23,30],[35,40,23,33,"withPassword"],[35,52,23,45],[35,56,23,49,"pass"],[35,60,23,53],[35,63,23,56],[35,67,23,60,"pass"],[35,71,23,64],[35,73,23,66],[35,76,23,69],[35,78,23,71],[35,80,23,73],[35,83,24,4],[35,87,24,8,"host"],[35,91,24,12],[35,94,24,15,"port"],[35,98,24,19],[35,101,24,22],[35,105,24,26,"port"],[35,109,24,30],[35,111,24,32],[35,114,24,35],[35,116,24,37],[35,120,24,41,"path"],[35,124,24,45],[35,127,24,48],[35,130,24,51,"path"],[35,134,24,55],[35,137,24,58],[35,140,24,61,"path"],[35,144,24,65],[35,147,24,68,"projectId"],[35,156,24,77],[35,158,24,79],[36,2,26,0],[38,2,28,0],[39,0,29,0],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,0,33,0],[44,2,34,0],[44,11,34,9,"dsnFromString"],[44,24,34,22,"dsnFromString"],[44,25,34,23,"str"],[44,28,34,26],[44,30,34,28],[45,4,35,2],[45,10,35,8,"match"],[45,15,35,13],[45,18,35,16,"DSN_REGEX"],[45,27,35,25],[45,28,35,26,"exec"],[45,32,35,30],[45,33,35,31,"str"],[45,36,35,34],[45,37,35,35],[46,4,37,2],[46,8,37,6],[46,9,37,7,"match"],[46,14,37,12],[46,16,37,14],[47,6,38,4],[48,6,39,4],[48,10,39,4,"consoleSandbox"],[48,32,39,18],[48,34,39,19],[48,40,39,25],[49,8,40,6],[50,8,41,6,"console"],[50,15,41,13],[50,16,41,14,"error"],[50,21,41,19],[50,22,41,20],[50,45,41,43,"str"],[50,48,41,46],[50,50,41,48],[50,51,41,49],[51,6,42,4],[51,7,42,5],[51,8,42,6],[52,6,43,4],[52,13,43,11,"undefined"],[52,22,43,20],[53,4,44,2],[54,4,46,2],[54,10,46,8],[54,11,46,9,"protocol"],[54,19,46,17],[54,21,46,19,"publicKey"],[54,30,46,28],[54,32,46,30,"pass"],[54,36,46,34],[54,39,46,37],[54,41,46,39],[54,43,46,41,"host"],[54,47,46,45],[54,50,46,48],[54,52,46,50],[54,54,46,52,"port"],[54,58,46,56],[54,61,46,59],[54,63,46,61],[54,65,46,63,"lastPath"],[54,73,46,71],[54,76,46,74],[54,78,46,76],[54,79,46,77],[54,82,46,80,"match"],[54,87,46,85],[54,88,46,86,"slice"],[54,93,46,91],[54,94,46,92],[54,95,46,93],[54,96,46,94],[55,4,47,2],[55,8,47,6,"path"],[55,12,47,10],[55,15,47,13],[55,17,47,15],[56,4,48,2],[56,8,48,6,"projectId"],[56,17,48,15],[56,20,48,18,"lastPath"],[56,28,48,26],[57,4,50,2],[57,10,50,8,"split"],[57,15,50,13],[57,18,50,16,"projectId"],[57,27,50,25],[57,28,50,26,"split"],[57,33,50,31],[57,34,50,32],[57,37,50,35],[57,38,50,36],[58,4,51,2],[58,8,51,6,"split"],[58,13,51,11],[58,14,51,12,"length"],[58,20,51,18],[58,23,51,21],[58,24,51,22],[58,26,51,24],[59,6,52,4,"path"],[59,10,52,8],[59,13,52,11,"split"],[59,18,52,16],[59,19,52,17,"slice"],[59,24,52,22],[59,25,52,23],[59,26,52,24],[59,28,52,26],[59,29,52,27],[59,30,52,28],[59,31,52,29],[59,32,52,30,"join"],[59,36,52,34],[59,37,52,35],[59,40,52,38],[59,41,52,39],[60,6,53,4,"projectId"],[60,15,53,13],[60,18,53,16,"split"],[60,23,53,21],[60,24,53,22,"pop"],[60,27,53,25],[60,28,53,26],[60,29,53,27],[61,4,54,2],[62,4,56,2],[62,8,56,6,"projectId"],[62,17,56,15],[62,19,56,17],[63,6,57,4],[63,12,57,10,"projectMatch"],[63,24,57,22],[63,27,57,25,"projectId"],[63,36,57,34],[63,37,57,35,"match"],[63,42,57,40],[63,43,57,41],[63,49,57,47],[63,50,57,48],[64,6,58,4],[64,10,58,8,"projectMatch"],[64,22,58,20],[64,24,58,22],[65,8,59,6,"projectId"],[65,17,59,15],[65,20,59,18,"projectMatch"],[65,32,59,30],[65,33,59,31],[65,34,59,32],[65,35,59,33],[66,6,60,4],[67,4,61,2],[68,4,63,2],[68,11,63,9,"dsnFromComponents"],[68,28,63,26],[68,29,63,27],[69,6,63,29,"host"],[69,10,63,33],[70,6,63,35,"pass"],[70,10,63,39],[71,6,63,41,"path"],[71,10,63,45],[72,6,63,47,"projectId"],[72,15,63,56],[73,6,63,58,"port"],[73,10,63,62],[74,6,63,64,"protocol"],[74,14,63,72],[74,16,63,74,"protocol"],[74,24,63,82],[75,6,63,85,"publicKey"],[76,4,63,95],[76,5,63,96],[76,6,63,97],[77,2,64,0],[78,2,66,0],[78,11,66,9,"dsnFromComponents"],[78,28,66,26,"dsnFromComponents"],[78,29,66,27,"components"],[78,39,66,37],[78,41,66,39],[79,4,67,2],[79,11,67,9],[80,6,68,4,"protocol"],[80,14,68,12],[80,16,68,14,"components"],[80,26,68,24],[80,27,68,25,"protocol"],[80,35,68,33],[81,6,69,4,"publicKey"],[81,15,69,13],[81,17,69,15,"components"],[81,27,69,25],[81,28,69,26,"publicKey"],[81,37,69,35],[81,41,69,39],[81,43,69,41],[82,6,70,4,"pass"],[82,10,70,8],[82,12,70,10,"components"],[82,22,70,20],[82,23,70,21,"pass"],[82,27,70,25],[82,31,70,29],[82,33,70,31],[83,6,71,4,"host"],[83,10,71,8],[83,12,71,10,"components"],[83,22,71,20],[83,23,71,21,"host"],[83,27,71,25],[84,6,72,4,"port"],[84,10,72,8],[84,12,72,10,"components"],[84,22,72,20],[84,23,72,21,"port"],[84,27,72,25],[84,31,72,29],[84,33,72,31],[85,6,73,4,"path"],[85,10,73,8],[85,12,73,10,"components"],[85,22,73,20],[85,23,73,21,"path"],[85,27,73,25],[85,31,73,29],[85,33,73,31],[86,6,74,4,"projectId"],[86,15,74,13],[86,17,74,15,"components"],[86,27,74,25],[86,28,74,26,"projectId"],[87,4,75,2],[87,5,75,3],[88,2,76,0],[89,2,78,0],[89,11,78,9,"validateDsn"],[89,22,78,20,"validateDsn"],[89,23,78,21,"dsn"],[89,26,78,24],[89,28,78,26],[90,4,79,2],[90,8,79,6],[90,9,79,7,"DEBUG_BUILD"],[90,32,79,18],[90,34,79,20],[91,6,80,4],[91,13,80,11],[91,17,80,15],[92,4,81,2],[93,4,83,2],[93,10,83,8],[94,6,83,10,"port"],[94,10,83,14],[95,6,83,16,"projectId"],[95,15,83,25],[96,6,83,27,"protocol"],[97,4,83,36],[97,5,83,37],[97,8,83,40,"dsn"],[97,11,83,43],[98,4,85,2],[98,10,85,8,"requiredComponents"],[98,28,85,26],[98,31,85,29],[98,32,85,30],[98,42,85,40],[98,44,85,42],[98,55,85,53],[98,57,85,55],[98,63,85,61],[98,65,85,63],[98,76,85,74],[98,77,85,75],[99,4,86,2],[99,10,86,8,"hasMissingRequiredComponent"],[99,37,86,35],[99,40,86,38,"requiredComponents"],[99,58,86,56],[99,59,86,57,"find"],[99,63,86,61],[99,64,86,62,"component"],[99,73,86,71],[99,77,86,75],[100,6,87,4],[100,10,87,8],[100,11,87,9,"dsn"],[100,14,87,12],[100,15,87,13,"component"],[100,24,87,22],[100,25,87,23],[100,27,87,25],[101,8,88,6,"logger"],[101,22,88,12],[101,23,88,13,"error"],[101,28,88,18],[101,29,88,19],[101,52,88,42,"component"],[101,61,88,51],[101,71,88,61],[101,72,88,62],[102,8,89,6],[102,15,89,13],[102,19,89,17],[103,6,90,4],[104,6,91,4],[104,13,91,11],[104,18,91,16],[105,4,92,2],[105,5,92,3],[105,6,92,4],[106,4,94,2],[106,8,94,6,"hasMissingRequiredComponent"],[106,35,94,33],[106,37,94,35],[107,6,95,4],[107,13,95,11],[107,18,95,16],[108,4,96,2],[109,4,98,2],[109,8,98,6],[109,9,98,7,"projectId"],[109,18,98,16],[109,19,98,17,"match"],[109,24,98,22],[109,25,98,23],[109,32,98,30],[109,33,98,31],[109,35,98,33],[110,6,99,4,"logger"],[110,20,99,10],[110,21,99,11,"error"],[110,26,99,16],[110,27,99,17],[110,68,99,58,"projectId"],[110,77,99,67],[110,79,99,69],[110,80,99,70],[111,6,100,4],[111,13,100,11],[111,18,100,16],[112,4,101,2],[113,4,103,2],[113,8,103,6],[113,9,103,7,"isValidProtocol"],[113,24,103,22],[113,25,103,23,"protocol"],[113,33,103,31],[113,34,103,32],[113,36,103,34],[114,6,104,4,"logger"],[114,20,104,10],[114,21,104,11,"error"],[114,26,104,16],[114,27,104,17],[114,67,104,57,"protocol"],[114,75,104,65],[114,77,104,67],[114,78,104,68],[115,6,105,4],[115,13,105,11],[115,18,105,16],[116,4,106,2],[117,4,108,2],[117,8,108,6,"port"],[117,12,108,10],[117,16,108,14,"isNaN"],[117,21,108,19],[117,22,108,20,"parseInt"],[117,30,108,28],[117,31,108,29,"port"],[117,35,108,33],[117,37,108,35],[117,39,108,37],[117,40,108,38],[117,41,108,39],[117,43,108,41],[118,6,109,4,"logger"],[118,20,109,10],[118,21,109,11,"error"],[118,26,109,16],[118,27,109,17],[118,63,109,53,"port"],[118,67,109,57],[118,69,109,59],[118,70,109,60],[119,6,110,4],[119,13,110,11],[119,18,110,16],[120,4,111,2],[121,4,113,2],[121,11,113,9],[121,15,113,13],[122,2,114,0],[124,2,116,0],[125,0,117,0],[126,0,118,0],[127,0,119,0],[128,2,120,0],[128,11,120,9,"makeDsn"],[128,18,120,16,"makeDsn"],[128,19,120,17,"from"],[128,23,120,21],[128,25,120,23],[129,4,121,2],[129,10,121,8,"components"],[129,20,121,18],[129,23,121,21],[129,30,121,28,"from"],[129,34,121,32],[129,39,121,37],[129,47,121,45],[129,50,121,48,"dsnFromString"],[129,63,121,61],[129,64,121,62,"from"],[129,68,121,66],[129,69,121,67],[129,72,121,70,"dsnFromComponents"],[129,89,121,87],[129,90,121,88,"from"],[129,94,121,92],[129,95,121,93],[130,4,122,2],[130,8,122,6],[130,9,122,7,"components"],[130,19,122,17],[130,23,122,21],[130,24,122,22,"validateDsn"],[130,35,122,33],[130,36,122,34,"components"],[130,46,122,44],[130,47,122,45],[130,49,122,47],[131,6,123,4],[131,13,123,11,"undefined"],[131,22,123,20],[132,4,124,2],[133,4,125,2],[133,11,125,9,"components"],[133,21,125,19],[134,2,126,0],[135,0,126,1],[135,3]],"functionMap":{"names":["<global>","isValidProtocol","dsnToString","dsnFromString","consoleSandbox$argument_0","dsnFromComponents","validateDsn","requiredComponents.find$argument_0","makeDsn"],"mappings":"AAA;ACM;CDE;AEW;CFM;AGQ;mBCK;KDG;CHsB;AKE;CLU;AME;8DCQ;GDM;CNsB;AQM;CRM"}},"type":"js/module"}]}