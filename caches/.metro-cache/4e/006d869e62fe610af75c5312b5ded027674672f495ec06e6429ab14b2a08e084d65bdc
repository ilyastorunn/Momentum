{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":115,"index":115}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":116},"end":{"line":2,"column":37,"index":153}}],"key":"8cLkkKYebhz8179+ortY3/pylDg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addClickKeypressInstrumentationHandler = addClickKeypressInstrumentationHandler;\n  exports.instrumentDOM = instrumentDOM;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _types = require(_dependencyMap[1], \"../types.js\");\n  const DEBOUNCE_DURATION = 1000;\n  let debounceTimerID;\n  let lastCapturedEventType;\n  let lastCapturedEventTargetId;\n\n  /**\n   * Add an instrumentation handler for when a click or a keypress happens.\n   *\n   * Use at your own risk, this might break without changelog notice, only used internally.\n   * @hidden\n   */\n  function addClickKeypressInstrumentationHandler(handler) {\n    const type = 'dom';\n    (0, _core.addHandler)(type, handler);\n    (0, _core.maybeInstrument)(type, instrumentDOM);\n  }\n\n  /** Exported for tests only. */\n  function instrumentDOM() {\n    if (!_types.WINDOW.document) {\n      return;\n    }\n\n    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n    // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n    const triggerDOMHandler = _core.triggerHandlers.bind(null, 'dom');\n    const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n    _types.WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n    _types.WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n    // guaranteed to fire at least once.)\n    ['EventTarget', 'Node'].forEach(target => {\n      const globalObject = _types.WINDOW;\n      const targetObj = globalObject[target];\n      const proto = targetObj && targetObj.prototype;\n\n      // eslint-disable-next-line no-prototype-builtins\n      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n        return;\n      }\n      (0, _core.fill)(proto, 'addEventListener', function (originalAddEventListener) {\n        return function (type, listener, options) {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const handlers = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type] = handlers[type] || {\n                refCount: 0\n              };\n              if (!handlerForType.handler) {\n                const handler = makeDOMEventHandler(triggerDOMHandler);\n                handlerForType.handler = handler;\n                originalAddEventListener.call(this, type, handler, options);\n              }\n              handlerForType.refCount++;\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n            }\n          }\n          return originalAddEventListener.call(this, type, listener, options);\n        };\n      });\n      (0, _core.fill)(proto, 'removeEventListener', function (originalRemoveEventListener) {\n        return function (type, listener, options) {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const handlers = this.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete this.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n            }\n          }\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      });\n    });\n  }\n\n  /**\n   * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n   */\n  function isSimilarToLastCapturedEvent(event) {\n    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n    if (event.type !== lastCapturedEventType) {\n      return false;\n    }\n    try {\n      // If both events have the same type, it's still possible that actions were performed on different targets.\n      // e.g. 2 clicks on different buttons.\n      if (!event.target || event.target._sentryId !== lastCapturedEventTargetId) {\n        return false;\n      }\n    } catch (e) {\n      // just accessing `target` property can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/sentry-javascript/issues/838\n    }\n\n    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n    // to which an event listener was attached), we treat them as the same action, as we want to capture\n    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n    return true;\n  }\n\n  /**\n   * Decide whether an event should be captured.\n   * @param event event to be captured\n   */\n  function shouldSkipDOMEvent(eventType, target) {\n    // We are only interested in filtering `keypress` events for now.\n    if (eventType !== 'keypress') {\n      return false;\n    }\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Wraps addEventListener to capture UI breadcrumbs\n   */\n  function makeDOMEventHandler(handler, globalListener = false) {\n    return event => {\n      // It's possible this handler might trigger multiple times for the same\n      // event (e.g. event propagation through node ancestors).\n      // Ignore if we've already captured that event.\n      if (!event || event['_sentryCaptured']) {\n        return;\n      }\n      const target = getEventTarget(event);\n\n      // We always want to skip _some_ events.\n      if (shouldSkipDOMEvent(event.type, target)) {\n        return;\n      }\n\n      // Mark event as \"seen\"\n      (0, _core.addNonEnumerableProperty)(event, '_sentryCaptured', true);\n      if (target && !target._sentryId) {\n        // Add UUID to event target so we can identify if\n        (0, _core.addNonEnumerableProperty)(target, '_sentryId', (0, _core.uuid4)());\n      }\n      const name = event.type === 'keypress' ? 'input' : event.type;\n\n      // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n      // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n      // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n      if (!isSimilarToLastCapturedEvent(event)) {\n        const handlerData = {\n          event,\n          name,\n          global: globalListener\n        };\n        handler(handlerData);\n        lastCapturedEventType = event.type;\n        lastCapturedEventTargetId = target ? target._sentryId : undefined;\n      }\n\n      // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n      clearTimeout(debounceTimerID);\n      debounceTimerID = _types.WINDOW.setTimeout(() => {\n        lastCapturedEventTargetId = undefined;\n        lastCapturedEventType = undefined;\n      }, DEBOUNCE_DURATION);\n    };\n  }\n  function getEventTarget(event) {\n    try {\n      return event.target;\n    } catch (e) {\n      // just accessing `target` property can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/sentry-javascript/issues/838\n      return null;\n    }\n  }\n});","lineCount":210,"map":[[7,2,1,0],[7,6,1,0,"_core"],[7,11,1,0],[7,14,1,0,"require"],[7,21,1,0],[7,22,1,0,"_dependencyMap"],[7,36,1,0],[8,2,2,0],[8,6,2,0,"_types"],[8,12,2,0],[8,15,2,0,"require"],[8,22,2,0],[8,23,2,0,"_dependencyMap"],[8,37,2,0],[9,2,4,0],[9,8,4,6,"DEBOUNCE_DURATION"],[9,25,4,23],[9,28,4,26],[9,32,4,30],[10,2,6,0],[10,6,6,4,"debounceTimerID"],[10,21,6,19],[11,2,7,0],[11,6,7,4,"lastCapturedEventType"],[11,27,7,25],[12,2,8,0],[12,6,8,4,"lastCapturedEventTargetId"],[12,31,8,29],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,11,16,9,"addClickKeypressInstrumentationHandler"],[20,49,16,47,"addClickKeypressInstrumentationHandler"],[20,50,16,48,"handler"],[20,57,16,55],[20,59,16,57],[21,4,17,2],[21,10,17,8,"type"],[21,14,17,12],[21,17,17,15],[21,22,17,20],[22,4,18,2],[22,8,18,2,"addHandler"],[22,24,18,12],[22,26,18,13,"type"],[22,30,18,17],[22,32,18,19,"handler"],[22,39,18,26],[22,40,18,27],[23,4,19,2],[23,8,19,2,"maybeInstrument"],[23,29,19,17],[23,31,19,18,"type"],[23,35,19,22],[23,37,19,24,"instrumentDOM"],[23,50,19,37],[23,51,19,38],[24,2,20,0],[26,2,22,0],[27,2,23,0],[27,11,23,9,"instrumentDOM"],[27,24,23,22,"instrumentDOM"],[27,25,23,22],[27,27,23,25],[28,4,24,2],[28,8,24,6],[28,9,24,7,"WINDOW"],[28,22,24,13],[28,23,24,14,"document"],[28,31,24,22],[28,33,24,24],[29,6,25,4],[30,4,26,2],[32,4,28,2],[33,4,29,2],[34,4,30,2],[35,4,31,2],[35,10,31,8,"triggerDOMHandler"],[35,27,31,25],[35,30,31,28,"triggerHandlers"],[35,51,31,43],[35,52,31,44,"bind"],[35,56,31,48],[35,57,31,49],[35,61,31,53],[35,63,31,55],[35,68,31,60],[35,69,31,61],[36,4,32,2],[36,10,32,8,"globalDOMEventHandler"],[36,31,32,29],[36,34,32,32,"makeDOMEventHandler"],[36,53,32,51],[36,54,32,52,"triggerDOMHandler"],[36,71,32,69],[36,73,32,71],[36,77,32,75],[36,78,32,76],[37,4,33,2,"WINDOW"],[37,17,33,8],[37,18,33,9,"document"],[37,26,33,17],[37,27,33,18,"addEventListener"],[37,43,33,34],[37,44,33,35],[37,51,33,42],[37,53,33,44,"globalDOMEventHandler"],[37,74,33,65],[37,76,33,67],[37,81,33,72],[37,82,33,73],[38,4,34,2,"WINDOW"],[38,17,34,8],[38,18,34,9,"document"],[38,26,34,17],[38,27,34,18,"addEventListener"],[38,43,34,34],[38,44,34,35],[38,54,34,45],[38,56,34,47,"globalDOMEventHandler"],[38,77,34,68],[38,79,34,70],[38,84,34,75],[38,85,34,76],[40,4,36,2],[41,4,37,2],[42,4,38,2],[43,4,39,2],[44,4,40,2],[45,4,41,2],[45,5,41,3],[45,18,41,16],[45,20,41,18],[45,26,41,24],[45,27,41,25],[45,28,41,26,"forEach"],[45,35,41,33],[45,36,41,35,"target"],[45,42,41,41],[45,46,41,46],[46,6,42,4],[46,12,42,10,"globalObject"],[46,24,42,22],[46,27,42,25,"WINDOW"],[46,40,42,31],[47,6,43,4],[47,12,43,10,"targetObj"],[47,21,43,19],[47,24,43,22,"globalObject"],[47,36,43,34],[47,37,43,35,"target"],[47,43,43,41],[47,44,43,42],[48,6,44,4],[48,12,44,10,"proto"],[48,17,44,15],[48,20,44,18,"targetObj"],[48,29,44,27],[48,33,44,31,"targetObj"],[48,42,44,40],[48,43,44,41,"prototype"],[48,52,44,50],[50,6,46,4],[51,6,47,4],[51,10,47,8],[51,11,47,9,"proto"],[51,16,47,14],[51,20,47,18],[51,21,47,19,"proto"],[51,26,47,24],[51,27,47,25,"hasOwnProperty"],[51,41,47,39],[51,45,47,43],[51,46,47,44,"proto"],[51,51,47,49],[51,52,47,50,"hasOwnProperty"],[51,66,47,64],[51,67,47,65],[51,85,47,83],[51,86,47,84],[51,88,47,86],[52,8,48,6],[53,6,49,4],[54,6,51,4],[54,10,51,4,"fill"],[54,20,51,8],[54,22,51,9,"proto"],[54,27,51,14],[54,29,51,16],[54,47,51,34],[54,49,51,36],[54,59,51,46,"originalAddEventListener"],[54,83,51,70],[54,85,51,72],[55,8,52,6],[55,15,52,13],[55,25,52,24,"type"],[55,29,52,28],[55,31,52,30,"listener"],[55,39,52,38],[55,41,52,40,"options"],[55,48,52,47],[55,50,52,49],[56,10,53,8],[56,14,53,12,"type"],[56,18,53,16],[56,23,53,21],[56,30,53,28],[56,34,53,32,"type"],[56,38,53,36],[56,42,53,40],[56,52,53,50],[56,54,53,52],[57,12,54,10],[57,16,54,14],[58,14,55,12],[58,20,55,18,"handlers"],[58,28,55,26],[58,31,55,30],[58,35,55,34],[58,36,55,35,"__sentry_instrumentation_handlers__"],[58,71,55,70],[58,74,56,14],[58,78,56,18],[58,79,56,19,"__sentry_instrumentation_handlers__"],[58,114,56,54],[58,118,56,58],[58,119,56,59],[58,120,56,61],[59,14,57,12],[59,20,57,18,"handlerForType"],[59,34,57,32],[59,37,57,36,"handlers"],[59,45,57,44],[59,46,57,45,"type"],[59,50,57,49],[59,51,57,50],[59,54,57,53,"handlers"],[59,62,57,61],[59,63,57,62,"type"],[59,67,57,66],[59,68,57,67],[59,72,57,71],[60,16,57,73,"refCount"],[60,24,57,81],[60,26,57,83],[61,14,57,85],[61,15,57,87],[62,14,59,12],[62,18,59,16],[62,19,59,17,"handlerForType"],[62,33,59,31],[62,34,59,32,"handler"],[62,41,59,39],[62,43,59,41],[63,16,60,14],[63,22,60,20,"handler"],[63,29,60,27],[63,32,60,30,"makeDOMEventHandler"],[63,51,60,49],[63,52,60,50,"triggerDOMHandler"],[63,69,60,67],[63,70,60,68],[64,16,61,14,"handlerForType"],[64,30,61,28],[64,31,61,29,"handler"],[64,38,61,36],[64,41,61,39,"handler"],[64,48,61,46],[65,16,62,14,"originalAddEventListener"],[65,40,62,38],[65,41,62,39,"call"],[65,45,62,43],[65,46,62,44],[65,50,62,48],[65,52,62,50,"type"],[65,56,62,54],[65,58,62,56,"handler"],[65,65,62,63],[65,67,62,65,"options"],[65,74,62,72],[65,75,62,73],[66,14,63,12],[67,14,65,12,"handlerForType"],[67,28,65,26],[67,29,65,27,"refCount"],[67,37,65,35],[67,39,65,37],[68,12,66,10],[68,13,66,11],[68,14,66,12],[68,21,66,19,"e"],[68,22,66,20],[68,24,66,22],[69,14,67,12],[70,14,68,12],[71,12,68,12],[72,10,70,8],[73,10,72,8],[73,17,72,15,"originalAddEventListener"],[73,41,72,39],[73,42,72,40,"call"],[73,46,72,44],[73,47,72,45],[73,51,72,49],[73,53,72,51,"type"],[73,57,72,55],[73,59,72,57,"listener"],[73,67,72,65],[73,69,72,67,"options"],[73,76,72,74],[73,77,72,75],[74,8,73,6],[74,9,73,7],[75,6,74,4],[75,7,74,5],[75,8,74,6],[76,6,76,4],[76,10,76,4,"fill"],[76,20,76,8],[76,22,77,6,"proto"],[76,27,77,11],[76,29,78,6],[76,50,78,27],[76,52,79,6],[76,62,79,16,"originalRemoveEventListener"],[76,89,79,43],[76,91,79,45],[77,8,80,8],[77,15,80,15],[77,25,80,26,"type"],[77,29,80,30],[77,31,80,32,"listener"],[77,39,80,40],[77,41,80,42,"options"],[77,48,80,49],[77,50,80,51],[78,10,81,10],[78,14,81,14,"type"],[78,18,81,18],[78,23,81,23],[78,30,81,30],[78,34,81,34,"type"],[78,38,81,38],[78,42,81,42],[78,52,81,52],[78,54,81,54],[79,12,82,12],[79,16,82,16],[80,14,83,14],[80,20,83,20,"handlers"],[80,28,83,28],[80,31,83,31],[80,35,83,35],[80,36,83,36,"__sentry_instrumentation_handlers__"],[80,71,83,71],[80,75,83,75],[80,76,83,76],[80,77,83,77],[81,14,84,14],[81,20,84,20,"handlerForType"],[81,34,84,34],[81,37,84,37,"handlers"],[81,45,84,45],[81,46,84,46,"type"],[81,50,84,50],[81,51,84,51],[82,14,86,14],[82,18,86,18,"handlerForType"],[82,32,86,32],[82,34,86,34],[83,16,87,16,"handlerForType"],[83,30,87,30],[83,31,87,31,"refCount"],[83,39,87,39],[83,41,87,41],[84,16,88,16],[85,16,89,16],[85,20,89,20,"handlerForType"],[85,34,89,34],[85,35,89,35,"refCount"],[85,43,89,43],[85,47,89,47],[85,48,89,48],[85,50,89,50],[86,18,90,18,"originalRemoveEventListener"],[86,45,90,45],[86,46,90,46,"call"],[86,50,90,50],[86,51,90,51],[86,55,90,55],[86,57,90,57,"type"],[86,61,90,61],[86,63,90,63,"handlerForType"],[86,77,90,77],[86,78,90,78,"handler"],[86,85,90,85],[86,87,90,87,"options"],[86,94,90,94],[86,95,90,95],[87,18,91,18,"handlerForType"],[87,32,91,32],[87,33,91,33,"handler"],[87,40,91,40],[87,43,91,43,"undefined"],[87,52,91,52],[88,18,92,18],[88,25,92,25,"handlers"],[88,33,92,33],[88,34,92,34,"type"],[88,38,92,38],[88,39,92,39],[88,40,92,40],[88,41,92,41],[89,16,93,16],[91,16,95,16],[92,16,96,16],[92,20,96,20,"Object"],[92,26,96,26],[92,27,96,27,"keys"],[92,31,96,31],[92,32,96,32,"handlers"],[92,40,96,40],[92,41,96,41],[92,42,96,42,"length"],[92,48,96,48],[92,53,96,53],[92,54,96,54],[92,56,96,56],[93,18,97,18],[93,25,97,25],[93,29,97,29],[93,30,97,30,"__sentry_instrumentation_handlers__"],[93,65,97,65],[94,16,98,16],[95,14,99,14],[96,12,100,12],[96,13,100,13],[96,14,100,14],[96,21,100,21,"e"],[96,22,100,22],[96,24,100,24],[97,14,101,14],[98,14,102,14],[99,12,102,14],[100,10,104,10],[101,10,106,10],[101,17,106,17,"originalRemoveEventListener"],[101,44,106,44],[101,45,106,45,"call"],[101,49,106,49],[101,50,106,50],[101,54,106,54],[101,56,106,56,"type"],[101,60,106,60],[101,62,106,62,"listener"],[101,70,106,70],[101,72,106,72,"options"],[101,79,106,79],[101,80,106,80],[102,8,107,8],[102,9,107,9],[103,6,108,6],[103,7,109,4],[103,8,109,5],[104,4,110,2],[104,5,110,3],[104,6,110,4],[105,2,111,0],[107,2,113,0],[108,0,114,0],[109,0,115,0],[110,2,116,0],[110,11,116,9,"isSimilarToLastCapturedEvent"],[110,39,116,37,"isSimilarToLastCapturedEvent"],[110,40,116,38,"event"],[110,45,116,43],[110,47,116,45],[111,4,117,2],[112,4,118,2],[112,8,118,6,"event"],[112,13,118,11],[112,14,118,12,"type"],[112,18,118,16],[112,23,118,21,"lastCapturedEventType"],[112,44,118,42],[112,46,118,44],[113,6,119,4],[113,13,119,11],[113,18,119,16],[114,4,120,2],[115,4,122,2],[115,8,122,6],[116,6,123,4],[117,6,124,4],[118,6,125,4],[118,10,125,8],[118,11,125,9,"event"],[118,16,125,14],[118,17,125,15,"target"],[118,23,125,21],[118,27,125,26,"event"],[118,32,125,31],[118,33,125,32,"target"],[118,39,125,38],[118,40,125,41,"_sentryId"],[118,49,125,50],[118,54,125,55,"lastCapturedEventTargetId"],[118,79,125,80],[118,81,125,82],[119,8,126,6],[119,15,126,13],[119,20,126,18],[120,6,127,4],[121,4,128,2],[121,5,128,3],[121,6,128,4],[121,13,128,11,"e"],[121,14,128,12],[121,16,128,14],[122,6,129,4],[123,6,130,4],[124,4,130,4],[126,4,133,2],[127,4,134,2],[128,4,135,2],[129,4,136,2],[129,11,136,9],[129,15,136,13],[130,2,137,0],[132,2,139,0],[133,0,140,0],[134,0,141,0],[135,0,142,0],[136,2,143,0],[136,11,143,9,"shouldSkipDOMEvent"],[136,29,143,27,"shouldSkipDOMEvent"],[136,30,143,28,"eventType"],[136,39,143,37],[136,41,143,39,"target"],[136,47,143,45],[136,49,143,47],[137,4,144,2],[138,4,145,2],[138,8,145,6,"eventType"],[138,17,145,15],[138,22,145,20],[138,32,145,30],[138,34,145,32],[139,6,146,4],[139,13,146,11],[139,18,146,16],[140,4,147,2],[141,4,149,2],[141,8,149,6],[141,9,149,7,"target"],[141,15,149,13],[141,19,149,17],[141,20,149,18,"target"],[141,26,149,24],[141,27,149,25,"tagName"],[141,34,149,32],[141,36,149,34],[142,6,150,4],[142,13,150,11],[142,17,150,15],[143,4,151,2],[145,4,153,2],[146,4,154,2],[147,4,155,2],[147,8,155,6,"target"],[147,14,155,12],[147,15,155,13,"tagName"],[147,22,155,20],[147,27,155,25],[147,34,155,32],[147,38,155,36,"target"],[147,44,155,42],[147,45,155,43,"tagName"],[147,52,155,50],[147,57,155,55],[147,67,155,65],[147,71,155,69,"target"],[147,77,155,75],[147,78,155,76,"isContentEditable"],[147,95,155,93],[147,97,155,95],[148,6,156,4],[148,13,156,11],[148,18,156,16],[149,4,157,2],[150,4,159,2],[150,11,159,9],[150,15,159,13],[151,2,160,0],[153,2,162,0],[154,0,163,0],[155,0,164,0],[156,2,165,0],[156,11,165,9,"makeDOMEventHandler"],[156,30,165,28,"makeDOMEventHandler"],[156,31,166,2,"handler"],[156,38,166,9],[156,40,167,2,"globalListener"],[156,54,167,16],[156,57,167,19],[156,62,167,24],[156,64,168,2],[157,4,169,2],[157,11,169,10,"event"],[157,16,169,15],[157,20,169,20],[158,6,170,4],[159,6,171,4],[160,6,172,4],[161,6,173,4],[161,10,173,8],[161,11,173,9,"event"],[161,16,173,14],[161,20,173,18,"event"],[161,25,173,23],[161,26,173,24],[161,43,173,41],[161,44,173,42],[161,46,173,44],[162,8,174,6],[163,6,175,4],[164,6,177,4],[164,12,177,10,"target"],[164,18,177,16],[164,21,177,19,"getEventTarget"],[164,35,177,33],[164,36,177,34,"event"],[164,41,177,39],[164,42,177,40],[166,6,179,4],[167,6,180,4],[167,10,180,8,"shouldSkipDOMEvent"],[167,28,180,26],[167,29,180,27,"event"],[167,34,180,32],[167,35,180,33,"type"],[167,39,180,37],[167,41,180,39,"target"],[167,47,180,45],[167,48,180,46],[167,50,180,48],[168,8,181,6],[169,6,182,4],[171,6,184,4],[172,6,185,4],[172,10,185,4,"addNonEnumerableProperty"],[172,40,185,28],[172,42,185,29,"event"],[172,47,185,34],[172,49,185,36],[172,66,185,53],[172,68,185,55],[172,72,185,59],[172,73,185,60],[173,6,187,4],[173,10,187,8,"target"],[173,16,187,14],[173,20,187,18],[173,21,187,19,"target"],[173,27,187,25],[173,28,187,26,"_sentryId"],[173,37,187,35],[173,39,187,37],[174,8,188,6],[175,8,189,6],[175,12,189,6,"addNonEnumerableProperty"],[175,42,189,30],[175,44,189,31,"target"],[175,50,189,37],[175,52,189,39],[175,63,189,50],[175,65,189,52],[175,69,189,52,"uuid4"],[175,80,189,57],[175,82,189,58],[175,83,189,59],[175,84,189,60],[176,6,190,4],[177,6,192,4],[177,12,192,10,"name"],[177,16,192,14],[177,19,192,17,"event"],[177,24,192,22],[177,25,192,23,"type"],[177,29,192,27],[177,34,192,32],[177,44,192,42],[177,47,192,45],[177,54,192,52],[177,57,192,55,"event"],[177,62,192,60],[177,63,192,61,"type"],[177,67,192,65],[179,6,194,4],[180,6,195,4],[181,6,196,4],[182,6,197,4],[182,10,197,8],[182,11,197,9,"isSimilarToLastCapturedEvent"],[182,39,197,37],[182,40,197,38,"event"],[182,45,197,43],[182,46,197,44],[182,48,197,46],[183,8,198,6],[183,14,198,12,"handlerData"],[183,25,198,23],[183,28,198,26],[184,10,198,28,"event"],[184,15,198,33],[185,10,198,35,"name"],[185,14,198,39],[186,10,198,41,"global"],[186,16,198,47],[186,18,198,49,"globalListener"],[187,8,198,64],[187,9,198,65],[188,8,199,6,"handler"],[188,15,199,13],[188,16,199,14,"handlerData"],[188,27,199,25],[188,28,199,26],[189,8,200,6,"lastCapturedEventType"],[189,29,200,27],[189,32,200,30,"event"],[189,37,200,35],[189,38,200,36,"type"],[189,42,200,40],[190,8,201,6,"lastCapturedEventTargetId"],[190,33,201,31],[190,36,201,34,"target"],[190,42,201,40],[190,45,201,43,"target"],[190,51,201,49],[190,52,201,50,"_sentryId"],[190,61,201,59],[190,64,201,62,"undefined"],[190,73,201,71],[191,6,202,4],[193,6,204,4],[194,6,205,4,"clearTimeout"],[194,18,205,16],[194,19,205,17,"debounceTimerID"],[194,34,205,32],[194,35,205,33],[195,6,206,4,"debounceTimerID"],[195,21,206,19],[195,24,206,22,"WINDOW"],[195,37,206,28],[195,38,206,29,"setTimeout"],[195,48,206,39],[195,49,206,40],[195,55,206,46],[196,8,207,6,"lastCapturedEventTargetId"],[196,33,207,31],[196,36,207,34,"undefined"],[196,45,207,43],[197,8,208,6,"lastCapturedEventType"],[197,29,208,27],[197,32,208,30,"undefined"],[197,41,208,39],[198,6,209,4],[198,7,209,5],[198,9,209,7,"DEBOUNCE_DURATION"],[198,26,209,24],[198,27,209,25],[199,4,210,2],[199,5,210,3],[200,2,211,0],[201,2,213,0],[201,11,213,9,"getEventTarget"],[201,25,213,23,"getEventTarget"],[201,26,213,24,"event"],[201,31,213,29],[201,33,213,31],[202,4,214,2],[202,8,214,6],[203,6,215,4],[203,13,215,11,"event"],[203,18,215,16],[203,19,215,17,"target"],[203,25,215,23],[204,4,216,2],[204,5,216,3],[204,6,216,4],[204,13,216,11,"e"],[204,14,216,12],[204,16,216,14],[205,6,217,4],[206,6,218,4],[207,6,219,4],[207,13,219,11],[207,17,219,15],[208,4,220,2],[209,2,221,0],[210,0,221,1],[210,3]],"functionMap":{"names":["<global>","addClickKeypressInstrumentationHandler","instrumentDOM","forEach$argument_0","fill$argument_2","<anonymous>","isSimilarToLastCapturedEvent","shouldSkipDOMEvent","makeDOMEventHandler","WINDOW.setTimeout$argument_0","getEventTarget"],"mappings":"AAA;ACe;CDI;AEG;kCCkB;oCCU;aCC;ODqB;KDC;MCK;eCC;SD2B;ODC;GDE;CFC;AMK;CNqB;AOM;CPiB;AQK;SHI;wCIqC;KJG;GGC;CRC;AUE;CVQ"}},"type":"js/module"}]}