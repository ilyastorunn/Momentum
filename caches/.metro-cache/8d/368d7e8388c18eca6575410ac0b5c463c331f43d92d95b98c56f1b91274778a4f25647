{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.LRUMap = void 0;\n  /** A simple Least Recently Used map */\n  class LRUMap {\n    constructor(_maxSize) {\n      this._maxSize = _maxSize;\n      this._cache = new Map();\n    }\n\n    /** Get the current size of the cache */\n    get size() {\n      return this._cache.size;\n    }\n\n    /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n    get(key) {\n      const value = this._cache.get(key);\n      if (value === undefined) {\n        return undefined;\n      }\n      // Remove and re-insert to update the order\n      this._cache.delete(key);\n      this._cache.set(key, value);\n      return value;\n    }\n\n    /** Insert an entry and evict an older entry if we've reached maxSize */\n    set(key, value) {\n      if (this._cache.size >= this._maxSize) {\n        // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n        this._cache.delete(this._cache.keys().next().value);\n      }\n      this._cache.set(key, value);\n    }\n\n    /** Remove an entry and return the entry if it was in the cache */\n    remove(key) {\n      const value = this._cache.get(key);\n      if (value) {\n        this._cache.delete(key);\n      }\n      return value;\n    }\n\n    /** Clear all entries */\n    clear() {\n      this._cache.clear();\n    }\n\n    /** Get all the keys */\n    keys() {\n      return Array.from(this._cache.keys());\n    }\n\n    /** Get all the values */\n    values() {\n      const values = [];\n      this._cache.forEach(value => values.push(value));\n      return values;\n    }\n  }\n  exports.LRUMap = LRUMap;\n});","lineCount":66,"map":[[6,2,1,0],[7,2,2,0],[7,8,2,6,"LRUMap"],[7,14,2,12],[7,15,2,13],[8,4,4,3,"constructor"],[8,15,4,14,"constructor"],[8,16,4,17,"_maxSize"],[8,24,4,25],[8,26,4,27],[9,6,4,28],[9,10,4,32],[9,11,4,33,"_maxSize"],[9,19,4,41],[9,22,4,44,"_maxSize"],[9,30,4,52],[10,6,5,4],[10,10,5,8],[10,11,5,9,"_cache"],[10,17,5,15],[10,20,5,18],[10,24,5,22,"Map"],[10,27,5,25],[10,28,5,26],[10,29,5,27],[11,4,6,2],[13,4,8,2],[14,4,9,3],[14,8,9,7,"size"],[14,12,9,11,"size"],[14,13,9,11],[14,15,9,14],[15,6,10,4],[15,13,10,11],[15,17,10,15],[15,18,10,16,"_cache"],[15,24,10,22],[15,25,10,23,"size"],[15,29,10,27],[16,4,11,2],[18,4,13,2],[19,4,14,3,"get"],[19,7,14,6,"get"],[19,8,14,7,"key"],[19,11,14,10],[19,13,14,12],[20,6,15,4],[20,12,15,10,"value"],[20,17,15,15],[20,20,15,18],[20,24,15,22],[20,25,15,23,"_cache"],[20,31,15,29],[20,32,15,30,"get"],[20,35,15,33],[20,36,15,34,"key"],[20,39,15,37],[20,40,15,38],[21,6,16,4],[21,10,16,8,"value"],[21,15,16,13],[21,20,16,18,"undefined"],[21,29,16,27],[21,31,16,29],[22,8,17,6],[22,15,17,13,"undefined"],[22,24,17,22],[23,6,18,4],[24,6,19,4],[25,6,20,4],[25,10,20,8],[25,11,20,9,"_cache"],[25,17,20,15],[25,18,20,16,"delete"],[25,24,20,22],[25,25,20,23,"key"],[25,28,20,26],[25,29,20,27],[26,6,21,4],[26,10,21,8],[26,11,21,9,"_cache"],[26,17,21,15],[26,18,21,16,"set"],[26,21,21,19],[26,22,21,20,"key"],[26,25,21,23],[26,27,21,25,"value"],[26,32,21,30],[26,33,21,31],[27,6,22,4],[27,13,22,11,"value"],[27,18,22,16],[28,4,23,2],[30,4,25,2],[31,4,26,3,"set"],[31,7,26,6,"set"],[31,8,26,7,"key"],[31,11,26,10],[31,13,26,12,"value"],[31,18,26,17],[31,20,26,19],[32,6,27,4],[32,10,27,8],[32,14,27,12],[32,15,27,13,"_cache"],[32,21,27,19],[32,22,27,20,"size"],[32,26,27,24],[32,30,27,28],[32,34,27,32],[32,35,27,33,"_maxSize"],[32,43,27,41],[32,45,27,43],[33,8,28,6],[34,8,29,6],[34,12,29,10],[34,13,29,11,"_cache"],[34,19,29,17],[34,20,29,18,"delete"],[34,26,29,24],[34,27,29,25],[34,31,29,29],[34,32,29,30,"_cache"],[34,38,29,36],[34,39,29,37,"keys"],[34,43,29,41],[34,44,29,42],[34,45,29,43],[34,46,29,44,"next"],[34,50,29,48],[34,51,29,49],[34,52,29,50],[34,53,29,51,"value"],[34,58,29,56],[34,59,29,57],[35,6,30,4],[36,6,31,4],[36,10,31,8],[36,11,31,9,"_cache"],[36,17,31,15],[36,18,31,16,"set"],[36,21,31,19],[36,22,31,20,"key"],[36,25,31,23],[36,27,31,25,"value"],[36,32,31,30],[36,33,31,31],[37,4,32,2],[39,4,34,2],[40,4,35,3,"remove"],[40,10,35,9,"remove"],[40,11,35,10,"key"],[40,14,35,13],[40,16,35,15],[41,6,36,4],[41,12,36,10,"value"],[41,17,36,15],[41,20,36,18],[41,24,36,22],[41,25,36,23,"_cache"],[41,31,36,29],[41,32,36,30,"get"],[41,35,36,33],[41,36,36,34,"key"],[41,39,36,37],[41,40,36,38],[42,6,37,4],[42,10,37,8,"value"],[42,15,37,13],[42,17,37,15],[43,8,38,6],[43,12,38,10],[43,13,38,11,"_cache"],[43,19,38,17],[43,20,38,18,"delete"],[43,26,38,24],[43,27,38,25,"key"],[43,30,38,28],[43,31,38,29],[44,6,39,4],[45,6,40,4],[45,13,40,11,"value"],[45,18,40,16],[46,4,41,2],[48,4,43,2],[49,4,44,3,"clear"],[49,9,44,8,"clear"],[49,10,44,8],[49,12,44,11],[50,6,45,4],[50,10,45,8],[50,11,45,9,"_cache"],[50,17,45,15],[50,18,45,16,"clear"],[50,23,45,21],[50,24,45,22],[50,25,45,23],[51,4,46,2],[53,4,48,2],[54,4,49,3,"keys"],[54,8,49,7,"keys"],[54,9,49,7],[54,11,49,10],[55,6,50,4],[55,13,50,11,"Array"],[55,18,50,16],[55,19,50,17,"from"],[55,23,50,21],[55,24,50,22],[55,28,50,26],[55,29,50,27,"_cache"],[55,35,50,33],[55,36,50,34,"keys"],[55,40,50,38],[55,41,50,39],[55,42,50,40],[55,43,50,41],[56,4,51,2],[58,4,53,2],[59,4,54,3,"values"],[59,10,54,9,"values"],[59,11,54,9],[59,13,54,12],[60,6,55,4],[60,12,55,10,"values"],[60,18,55,16],[60,21,55,19],[60,23,55,21],[61,6,56,4],[61,10,56,8],[61,11,56,9,"_cache"],[61,17,56,15],[61,18,56,16,"forEach"],[61,25,56,23],[61,26,56,24,"value"],[61,31,56,29],[61,35,56,33,"values"],[61,41,56,39],[61,42,56,40,"push"],[61,46,56,44],[61,47,56,45,"value"],[61,52,56,50],[61,53,56,51],[61,54,56,52],[62,6,57,4],[62,13,57,11,"values"],[62,19,57,17],[63,4,58,2],[64,2,59,0],[65,2,59,1,"exports"],[65,9,59,1],[65,10,59,1,"LRUMap"],[65,16,59,1],[65,19,59,1,"LRUMap"],[65,25,59,1],[66,0,59,1],[66,3]],"functionMap":{"names":["<global>","LRUMap","LRUMap#constructor","LRUMap#get__size","LRUMap#get","LRUMap#set","LRUMap#remove","LRUMap#clear","LRUMap#keys","LRUMap#values","_cache.forEach$argument_0"],"mappings":"AAA;ACC;GCE;GDE;GEG;GFE;GGG;GHS;GIG;GJM;GKG;GLM;GMG;GNE;GOG;GPE;GQG;wBCE,2BD;GRE;CDC"}},"type":"js/module"}]}