{"dependencies":[{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../utils-hoist/envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":132,"index":181}}],"key":"/wcaZSbu8ehBqhp+Lmxp451SsSA=","exportNames":["*"]}},{"name":"../utils-hoist/error.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":182},"end":{"line":3,"column":54,"index":236}}],"key":"cArvazqWlXbkF+hGqvEi1pZXFIY=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":237},"end":{"line":4,"column":50,"index":287}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/promisebuffer.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":288},"end":{"line":5,"column":68,"index":356}}],"key":"vzFLnW6zV7N8N5FSGzIS+u1KesY=","exportNames":["*"]}},{"name":"../utils-hoist/ratelimit.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":357},"end":{"line":6,"column":78,"index":435}}],"key":"QKl3AY+Byd/ne5UTXVfoXbCF3Uo=","exportNames":["*"]}},{"name":"../utils-hoist/syncpromise.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":436},"end":{"line":7,"column":68,"index":504}}],"key":"Abz9yhk2BrWqSoaj2hciRgIoino=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_TRANSPORT_BUFFER_SIZE = void 0;\n  exports.createTransport = createTransport;\n  var _debugBuild = require(_dependencyMap[0], \"../debug-build.js\");\n  var _envelope = require(_dependencyMap[1], \"../utils-hoist/envelope.js\");\n  var _error = require(_dependencyMap[2], \"../utils-hoist/error.js\");\n  var _logger = require(_dependencyMap[3], \"../utils-hoist/logger.js\");\n  var _promisebuffer = require(_dependencyMap[4], \"../utils-hoist/promisebuffer.js\");\n  var _ratelimit = require(_dependencyMap[5], \"../utils-hoist/ratelimit.js\");\n  var _syncpromise = require(_dependencyMap[6], \"../utils-hoist/syncpromise.js\");\n  const DEFAULT_TRANSPORT_BUFFER_SIZE = exports.DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n  /**\n   * Creates an instance of a Sentry `Transport`\n   *\n   * @param options\n   * @param makeRequest\n   */\n  function createTransport(options, makeRequest, buffer = (0, _promisebuffer.makePromiseBuffer)(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {\n    let rateLimits = {};\n    const flush = timeout => buffer.drain(timeout);\n    function send(envelope) {\n      const filteredEnvelopeItems = [];\n\n      // Drop rate limited items from envelope\n      (0, _envelope.forEachEnvelopeItem)(envelope, (item, type) => {\n        const dataCategory = (0, _envelope.envelopeItemTypeToDataCategory)(type);\n        if ((0, _ratelimit.isRateLimited)(rateLimits, dataCategory)) {\n          const event = getEventForEnvelopeItem(item, type);\n          options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n        } else {\n          filteredEnvelopeItems.push(item);\n        }\n      });\n\n      // Skip sending if envelope is empty after filtering out rate limited events\n      if (filteredEnvelopeItems.length === 0) {\n        return (0, _syncpromise.resolvedSyncPromise)({});\n      }\n      const filteredEnvelope = (0, _envelope.createEnvelope)(envelope[0], filteredEnvelopeItems);\n\n      // Creates client report for each item in an envelope\n      const recordEnvelopeLoss = reason => {\n        (0, _envelope.forEachEnvelopeItem)(filteredEnvelope, (item, type) => {\n          const event = getEventForEnvelopeItem(item, type);\n          options.recordDroppedEvent(reason, (0, _envelope.envelopeItemTypeToDataCategory)(type), event);\n        });\n      };\n      const requestTask = () => makeRequest({\n        body: (0, _envelope.serializeEnvelope)(filteredEnvelope)\n      }).then(response => {\n        // We don't want to throw on NOK responses, but we want to at least log them\n        if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n          _debugBuild.DEBUG_BUILD && _logger.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n        }\n        rateLimits = (0, _ratelimit.updateRateLimits)(rateLimits, response);\n        return response;\n      }, error => {\n        recordEnvelopeLoss('network_error');\n        throw error;\n      });\n      return buffer.add(requestTask).then(result => result, error => {\n        if (error instanceof _error.SentryError) {\n          _debugBuild.DEBUG_BUILD && _logger.logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return (0, _syncpromise.resolvedSyncPromise)({});\n        } else {\n          throw error;\n        }\n      });\n    }\n    return {\n      send,\n      flush\n    };\n  }\n  function getEventForEnvelopeItem(item, type) {\n    if (type !== 'event' && type !== 'transaction') {\n      return undefined;\n    }\n    return Array.isArray(item) ? item[1] : undefined;\n  }\n});","lineCount":86,"map":[[7,2,1,0],[7,6,1,0,"_debugBuild"],[7,17,1,0],[7,20,1,0,"require"],[7,27,1,0],[7,28,1,0,"_dependencyMap"],[7,42,1,0],[8,2,2,0],[8,6,2,0,"_envelope"],[8,15,2,0],[8,18,2,0,"require"],[8,25,2,0],[8,26,2,0,"_dependencyMap"],[8,40,2,0],[9,2,3,0],[9,6,3,0,"_error"],[9,12,3,0],[9,15,3,0,"require"],[9,22,3,0],[9,23,3,0,"_dependencyMap"],[9,37,3,0],[10,2,4,0],[10,6,4,0,"_logger"],[10,13,4,0],[10,16,4,0,"require"],[10,23,4,0],[10,24,4,0,"_dependencyMap"],[10,38,4,0],[11,2,5,0],[11,6,5,0,"_promisebuffer"],[11,20,5,0],[11,23,5,0,"require"],[11,30,5,0],[11,31,5,0,"_dependencyMap"],[11,45,5,0],[12,2,6,0],[12,6,6,0,"_ratelimit"],[12,16,6,0],[12,19,6,0,"require"],[12,26,6,0],[12,27,6,0,"_dependencyMap"],[12,41,6,0],[13,2,7,0],[13,6,7,0,"_syncpromise"],[13,18,7,0],[13,21,7,0,"require"],[13,28,7,0],[13,29,7,0,"_dependencyMap"],[13,43,7,0],[14,2,9,0],[14,8,9,6,"DEFAULT_TRANSPORT_BUFFER_SIZE"],[14,37,9,35],[14,40,9,35,"exports"],[14,47,9,35],[14,48,9,35,"DEFAULT_TRANSPORT_BUFFER_SIZE"],[14,77,9,35],[14,80,9,38],[14,82,9,40],[16,2,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,2,17,0],[22,11,17,9,"createTransport"],[22,26,17,24,"createTransport"],[22,27,18,2,"options"],[22,34,18,9],[22,36,19,2,"makeRequest"],[22,47,19,13],[22,49,20,2,"buffer"],[22,55,20,8],[22,58,20,11],[22,62,20,11,"makePromiseBuffer"],[22,94,20,28],[22,96,21,4,"options"],[22,103,21,11],[22,104,21,12,"bufferSize"],[22,114,21,22],[22,118,21,26,"DEFAULT_TRANSPORT_BUFFER_SIZE"],[22,147,22,2],[22,148,22,3],[22,150,23,2],[23,4,24,2],[23,8,24,6,"rateLimits"],[23,18,24,16],[23,21,24,19],[23,22,24,20],[23,23,24,21],[24,4,25,2],[24,10,25,8,"flush"],[24,15,25,13],[24,18,25,17,"timeout"],[24,25,25,24],[24,29,25,29,"buffer"],[24,35,25,35],[24,36,25,36,"drain"],[24,41,25,41],[24,42,25,42,"timeout"],[24,49,25,49],[24,50,25,50],[25,4,27,2],[25,13,27,11,"send"],[25,17,27,15,"send"],[25,18,27,16,"envelope"],[25,26,27,24],[25,28,27,26],[26,6,28,4],[26,12,28,10,"filteredEnvelopeItems"],[26,33,28,31],[26,36,28,34],[26,38,28,36],[28,6,30,4],[29,6,31,4],[29,10,31,4,"forEachEnvelopeItem"],[29,39,31,23],[29,41,31,24,"envelope"],[29,49,31,32],[29,51,31,34],[29,52,31,35,"item"],[29,56,31,39],[29,58,31,41,"type"],[29,62,31,45],[29,67,31,50],[30,8,32,6],[30,14,32,12,"dataCategory"],[30,26,32,24],[30,29,32,27],[30,33,32,27,"envelopeItemTypeToDataCategory"],[30,73,32,57],[30,75,32,58,"type"],[30,79,32,62],[30,80,32,63],[31,8,33,6],[31,12,33,10],[31,16,33,10,"isRateLimited"],[31,40,33,23],[31,42,33,24,"rateLimits"],[31,52,33,34],[31,54,33,36,"dataCategory"],[31,66,33,48],[31,67,33,49],[31,69,33,51],[32,10,34,8],[32,16,34,14,"event"],[32,21,34,19],[32,24,34,22,"getEventForEnvelopeItem"],[32,47,34,45],[32,48,34,46,"item"],[32,52,34,50],[32,54,34,52,"type"],[32,58,34,56],[32,59,34,57],[33,10,35,8,"options"],[33,17,35,15],[33,18,35,16,"recordDroppedEvent"],[33,36,35,34],[33,37,35,35],[33,56,35,54],[33,58,35,56,"dataCategory"],[33,70,35,68],[33,72,35,70,"event"],[33,77,35,75],[33,78,35,76],[34,8,36,6],[34,9,36,7],[34,15,36,13],[35,10,37,8,"filteredEnvelopeItems"],[35,31,37,29],[35,32,37,30,"push"],[35,36,37,34],[35,37,37,35,"item"],[35,41,37,39],[35,42,37,40],[36,8,38,6],[37,6,39,4],[37,7,39,5],[37,8,39,6],[39,6,41,4],[40,6,42,4],[40,10,42,8,"filteredEnvelopeItems"],[40,31,42,29],[40,32,42,30,"length"],[40,38,42,36],[40,43,42,41],[40,44,42,42],[40,46,42,44],[41,8,43,6],[41,15,43,13],[41,19,43,13,"resolvedSyncPromise"],[41,51,43,32],[41,53,43,33],[41,54,43,34],[41,55,43,35],[41,56,43,36],[42,6,44,4],[43,6,46,4],[43,12,46,10,"filteredEnvelope"],[43,28,46,26],[43,31,46,29],[43,35,46,29,"createEnvelope"],[43,59,46,43],[43,61,46,44,"envelope"],[43,69,46,52],[43,70,46,53],[43,71,46,54],[43,72,46,55],[43,74,46,57,"filteredEnvelopeItems"],[43,95,46,79],[43,96,46,80],[45,6,48,4],[46,6,49,4],[46,12,49,10,"recordEnvelopeLoss"],[46,30,49,28],[46,33,49,32,"reason"],[46,39,49,38],[46,43,49,43],[47,8,50,6],[47,12,50,6,"forEachEnvelopeItem"],[47,41,50,25],[47,43,50,26,"filteredEnvelope"],[47,59,50,42],[47,61,50,44],[47,62,50,45,"item"],[47,66,50,49],[47,68,50,51,"type"],[47,72,50,55],[47,77,50,60],[48,10,51,8],[48,16,51,14,"event"],[48,21,51,19],[48,24,51,22,"getEventForEnvelopeItem"],[48,47,51,45],[48,48,51,46,"item"],[48,52,51,50],[48,54,51,52,"type"],[48,58,51,56],[48,59,51,57],[49,10,52,8,"options"],[49,17,52,15],[49,18,52,16,"recordDroppedEvent"],[49,36,52,34],[49,37,52,35,"reason"],[49,43,52,41],[49,45,52,43],[49,49,52,43,"envelopeItemTypeToDataCategory"],[49,89,52,73],[49,91,52,74,"type"],[49,95,52,78],[49,96,52,79],[49,98,52,81,"event"],[49,103,52,86],[49,104,52,87],[50,8,53,6],[50,9,53,7],[50,10,53,8],[51,6,54,4],[51,7,54,5],[52,6,56,4],[52,12,56,10,"requestTask"],[52,23,56,21],[52,26,56,24,"requestTask"],[52,27,56,24],[52,32,57,6,"makeRequest"],[52,43,57,17],[52,44,57,18],[53,8,57,20,"body"],[53,12,57,24],[53,14,57,26],[53,18,57,26,"serializeEnvelope"],[53,45,57,43],[53,47,57,44,"filteredEnvelope"],[53,63,57,60],[54,6,57,62],[54,7,57,63],[54,8,57,64],[54,9,57,65,"then"],[54,13,57,69],[54,14,58,8,"response"],[54,22,58,16],[54,26,58,20],[55,8,59,10],[56,8,60,10],[56,12,60,14,"response"],[56,20,60,22],[56,21,60,23,"statusCode"],[56,31,60,33],[56,36,60,38,"undefined"],[56,45,60,47],[56,50,60,52,"response"],[56,58,60,60],[56,59,60,61,"statusCode"],[56,69,60,71],[56,72,60,74],[56,75,60,77],[56,79,60,81,"response"],[56,87,60,89],[56,88,60,90,"statusCode"],[56,98,60,100],[56,102,60,104],[56,105,60,107],[56,106,60,108],[56,108,60,110],[57,10,61,12,"DEBUG_BUILD"],[57,33,61,23],[57,37,61,27,"logger"],[57,51,61,33],[57,52,61,34,"warn"],[57,56,61,38],[57,57,61,39],[57,94,61,76,"response"],[57,102,61,84],[57,103,61,85,"statusCode"],[57,113,61,95],[57,130,61,112],[57,131,61,113],[58,8,62,10],[59,8,64,10,"rateLimits"],[59,18,64,20],[59,21,64,23],[59,25,64,23,"updateRateLimits"],[59,52,64,39],[59,54,64,40,"rateLimits"],[59,64,64,50],[59,66,64,52,"response"],[59,74,64,60],[59,75,64,61],[60,8,65,10],[60,15,65,17,"response"],[60,23,65,25],[61,6,66,8],[61,7,66,9],[61,9,67,8,"error"],[61,14,67,13],[61,18,67,17],[62,8,68,10,"recordEnvelopeLoss"],[62,26,68,28],[62,27,68,29],[62,42,68,44],[62,43,68,45],[63,8,69,10],[63,14,69,16,"error"],[63,19,69,21],[64,6,70,8],[64,7,71,6],[64,8,71,7],[65,6,73,4],[65,13,73,11,"buffer"],[65,19,73,17],[65,20,73,18,"add"],[65,23,73,21],[65,24,73,22,"requestTask"],[65,35,73,33],[65,36,73,34],[65,37,73,35,"then"],[65,41,73,39],[65,42,74,6,"result"],[65,48,74,12],[65,52,74,16,"result"],[65,58,74,22],[65,60,75,6,"error"],[65,65,75,11],[65,69,75,15],[66,8,76,8],[66,12,76,12,"error"],[66,17,76,17],[66,29,76,29,"SentryError"],[66,47,76,40],[66,49,76,42],[67,10,77,10,"DEBUG_BUILD"],[67,33,77,21],[67,37,77,25,"logger"],[67,51,77,31],[67,52,77,32,"error"],[67,57,77,37],[67,58,77,38],[67,105,77,85],[67,106,77,86],[68,10,78,10,"recordEnvelopeLoss"],[68,28,78,28],[68,29,78,29],[68,45,78,45],[68,46,78,46],[69,10,79,10],[69,17,79,17],[69,21,79,17,"resolvedSyncPromise"],[69,53,79,36],[69,55,79,37],[69,56,79,38],[69,57,79,39],[69,58,79,40],[70,8,80,8],[70,9,80,9],[70,15,80,15],[71,10,81,10],[71,16,81,16,"error"],[71,21,81,21],[72,8,82,8],[73,6,83,6],[73,7,84,4],[73,8,84,5],[74,4,85,2],[75,4,87,2],[75,11,87,9],[76,6,88,4,"send"],[76,10,88,8],[77,6,89,4,"flush"],[78,4,90,2],[78,5,90,3],[79,2,91,0],[80,2,93,0],[80,11,93,9,"getEventForEnvelopeItem"],[80,34,93,32,"getEventForEnvelopeItem"],[80,35,93,33,"item"],[80,39,93,37],[80,41,93,39,"type"],[80,45,93,43],[80,47,93,45],[81,4,94,2],[81,8,94,6,"type"],[81,12,94,10],[81,17,94,15],[81,24,94,22],[81,28,94,26,"type"],[81,32,94,30],[81,37,94,35],[81,50,94,48],[81,52,94,50],[82,6,95,4],[82,13,95,11,"undefined"],[82,22,95,20],[83,4,96,2],[84,4,98,2],[84,11,98,9,"Array"],[84,16,98,14],[84,17,98,15,"isArray"],[84,24,98,22],[84,25,98,23,"item"],[84,29,98,27],[84,30,98,28],[84,33,98,32,"item"],[84,37,98,36],[84,38,98,39],[84,39,98,40],[84,40,98,41],[84,43,98,44,"undefined"],[84,52,98,53],[85,2,99,0],[86,0,99,1],[86,3]],"functionMap":{"names":["<global>","createTransport","flush","send","forEachEnvelopeItem$argument_1","recordEnvelopeLoss","requestTask","makeRequest.then$argument_0","makeRequest.then$argument_1","buffer.add.then$argument_0","buffer.add.then$argument_1","getEventForEnvelopeItem"],"mappings":"AAA;ACgB;gBCQ,kCD;EEE;kCCI;KDQ;+BEU;4CDC;OCG;KFC;wBGE;QCE;SDQ;QEC;SFG;OHC;MMG,gBN;MOC;OPQ;GFE;CDM;AWE;CXM"}},"type":"js/module"}]}