{"dependencies":[{"name":"../../types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"W1BH0a3HSCo8tOLXH7X+m5FGigs=","exportNames":["*"]}},{"name":"./lib/bindReporter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":53,"index":94}}],"key":"yZXTUsWh1M46DyxIbZ88NUHRymg=","exportNames":["*"]}},{"name":"./lib/getActivationStart.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":95},"end":{"line":3,"column":65,"index":160}}],"key":"GdWeY/Ul63HmG3e9yq4TWUwqk0M=","exportNames":["*"]}},{"name":"./lib/getVisibilityWatcher.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":161},"end":{"line":4,"column":69,"index":230}}],"key":"nHtaM9v//YlxGAv+O3W06C++qp8=","exportNames":["*"]}},{"name":"./lib/initMetric.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":49,"index":280}}],"key":"3h8m+kvAV2o3xN93IHHrmBqzs4s=","exportNames":["*"]}},{"name":"./lib/observe.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":281},"end":{"line":6,"column":43,"index":324}}],"key":"Cz2RoRvLyGQyofIDJmcgFo6dicM=","exportNames":["*"]}},{"name":"./lib/onHidden.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":325},"end":{"line":7,"column":45,"index":370}}],"key":"Me8dIXVCoQX50hAKyNiBvASIs+8=","exportNames":["*"]}},{"name":"./lib/runOnce.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":371},"end":{"line":8,"column":43,"index":414}}],"key":"bwPHkAH8Ixo/Lbt+Aw9KJe855Jk=","exportNames":["*"]}},{"name":"./lib/whenActivated.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":415},"end":{"line":9,"column":55,"index":470}}],"key":"ZUHRzyG92JJbjB1/O2ptt6DviqY=","exportNames":["*"]}},{"name":"./lib/whenIdle.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":471},"end":{"line":10,"column":45,"index":516}}],"key":"zrrBLWRm5MIj+zH+s2UusPup9Jw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.onLCP = exports.LCPThresholds = void 0;\n  var _types = require(_dependencyMap[0], \"../../types.js\");\n  var _bindReporter = require(_dependencyMap[1], \"./lib/bindReporter.js\");\n  var _getActivationStart = require(_dependencyMap[2], \"./lib/getActivationStart.js\");\n  var _getVisibilityWatcher = require(_dependencyMap[3], \"./lib/getVisibilityWatcher.js\");\n  var _initMetric = require(_dependencyMap[4], \"./lib/initMetric.js\");\n  var _observe = require(_dependencyMap[5], \"./lib/observe.js\");\n  var _onHidden = require(_dependencyMap[6], \"./lib/onHidden.js\");\n  var _runOnce = require(_dependencyMap[7], \"./lib/runOnce.js\");\n  var _whenActivated = require(_dependencyMap[8], \"./lib/whenActivated.js\");\n  var _whenIdle = require(_dependencyMap[9], \"./lib/whenIdle.js\");\n  /*\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     https://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\n  const LCPThresholds = exports.LCPThresholds = [2500, 4000];\n  const reportedMetricIDs = {};\n\n  /**\n   * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n   * calls the `callback` function once the value is ready (along with the\n   * relevant `largest-contentful-paint` performance entry used to determine the\n   * value). The reported value is a `DOMHighResTimeStamp`.\n   *\n   * If the `reportAllChanges` configuration option is set to `true`, the\n   * `callback` function will be called any time a new `largest-contentful-paint`\n   * performance entry is dispatched, or once the final value of the metric has\n   * been determined.\n   */\n  const onLCP = (onReport, opts = {}) => {\n    (0, _whenActivated.whenActivated)(() => {\n      const visibilityWatcher = (0, _getVisibilityWatcher.getVisibilityWatcher)();\n      const metric = (0, _initMetric.initMetric)('LCP');\n      let report;\n      const handleEntries = entries => {\n        // If reportAllChanges is set then call this function for each entry,\n        // otherwise only consider the last one.\n        if (!opts.reportAllChanges) {\n          // eslint-disable-next-line no-param-reassign\n          entries = entries.slice(-1);\n        }\n        entries.forEach(entry => {\n          // Only report if the page wasn't hidden prior to LCP.\n          if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n            // The startTime attribute returns the value of the renderTime if it is\n            // not 0, and the value of the loadTime otherwise. The activationStart\n            // reference is used because LCP should be relative to page activation\n            // rather than navigation start if the page was pre-rendered. But in cases\n            // where `activationStart` occurs after the LCP, this time should be\n            // clamped at 0.\n            metric.value = Math.max(entry.startTime - (0, _getActivationStart.getActivationStart)(), 0);\n            metric.entries = [entry];\n            report();\n          }\n        });\n      };\n      const po = (0, _observe.observe)('largest-contentful-paint', handleEntries);\n      if (po) {\n        report = (0, _bindReporter.bindReporter)(onReport, metric, LCPThresholds, opts.reportAllChanges);\n        const stopListening = (0, _runOnce.runOnce)(() => {\n          if (!reportedMetricIDs[metric.id]) {\n            handleEntries(po.takeRecords());\n            po.disconnect();\n            reportedMetricIDs[metric.id] = true;\n            report(true);\n          }\n        });\n\n        // Stop listening after input. Note: while scrolling is an input that\n        // stops LCP observation, it's unreliable since it can be programmatically\n        // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n        ['keydown', 'click'].forEach(type => {\n          // Wrap in a setTimeout so the callback is run in a separate task\n          // to avoid extending the keyboard/click handler to reduce INP impact\n          // https://github.com/GoogleChrome/web-vitals/issues/383\n          if (_types.WINDOW.document) {\n            addEventListener(type, () => (0, _whenIdle.whenIdle)(stopListening), {\n              once: true,\n              capture: true\n            });\n          }\n        });\n        (0, _onHidden.onHidden)(stopListening);\n      }\n    });\n  };\n  exports.onLCP = onLCP;\n});","lineCount":105,"map":[[6,2,1,0],[6,6,1,0,"_types"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_bindReporter"],[7,19,2,0],[7,22,2,0,"require"],[7,29,2,0],[7,30,2,0,"_dependencyMap"],[7,44,2,0],[8,2,3,0],[8,6,3,0,"_getActivationStart"],[8,25,3,0],[8,28,3,0,"require"],[8,35,3,0],[8,36,3,0,"_dependencyMap"],[8,50,3,0],[9,2,4,0],[9,6,4,0,"_getVisibilityWatcher"],[9,27,4,0],[9,30,4,0,"require"],[9,37,4,0],[9,38,4,0,"_dependencyMap"],[9,52,4,0],[10,2,5,0],[10,6,5,0,"_initMetric"],[10,17,5,0],[10,20,5,0,"require"],[10,27,5,0],[10,28,5,0,"_dependencyMap"],[10,42,5,0],[11,2,6,0],[11,6,6,0,"_observe"],[11,14,6,0],[11,17,6,0,"require"],[11,24,6,0],[11,25,6,0,"_dependencyMap"],[11,39,6,0],[12,2,7,0],[12,6,7,0,"_onHidden"],[12,15,7,0],[12,18,7,0,"require"],[12,25,7,0],[12,26,7,0,"_dependencyMap"],[12,40,7,0],[13,2,8,0],[13,6,8,0,"_runOnce"],[13,14,8,0],[13,17,8,0,"require"],[13,24,8,0],[13,25,8,0,"_dependencyMap"],[13,39,8,0],[14,2,9,0],[14,6,9,0,"_whenActivated"],[14,20,9,0],[14,23,9,0,"require"],[14,30,9,0],[14,31,9,0,"_dependencyMap"],[14,45,9,0],[15,2,10,0],[15,6,10,0,"_whenIdle"],[15,15,10,0],[15,18,10,0,"require"],[15,25,10,0],[15,26,10,0,"_dependencyMap"],[15,40,10,0],[16,2,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[32,2,29,0],[33,2,30,0],[33,8,30,6,"LCPThresholds"],[33,21,30,19],[33,24,30,19,"exports"],[33,31,30,19],[33,32,30,19,"LCPThresholds"],[33,45,30,19],[33,48,30,22],[33,49,30,23],[33,53,30,27],[33,55,30,29],[33,59,30,33],[33,60,30,34],[34,2,32,0],[34,8,32,6,"reportedMetricIDs"],[34,25,32,23],[34,28,32,26],[34,29,32,27],[34,30,32,28],[36,2,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,0,44,0],[47,2,45,0],[47,8,45,6,"onLCP"],[47,13,45,11],[47,16,45,14,"onLCP"],[47,17,45,15,"onReport"],[47,25,45,23],[47,27,45,25,"opts"],[47,31,45,29],[47,34,45,32],[47,35,45,33],[47,36,45,34],[47,41,45,39],[48,4,46,2],[48,8,46,2,"whenActivated"],[48,36,46,15],[48,38,46,16],[48,44,46,22],[49,6,47,4],[49,12,47,10,"visibilityWatcher"],[49,29,47,27],[49,32,47,30],[49,36,47,30,"getVisibilityWatcher"],[49,78,47,50],[49,80,47,51],[49,81,47,52],[50,6,48,4],[50,12,48,10,"metric"],[50,18,48,16],[50,21,48,19],[50,25,48,19,"initMetric"],[50,47,48,29],[50,49,48,30],[50,54,48,35],[50,55,48,36],[51,6,49,4],[51,10,49,8,"report"],[51,16,49,14],[52,6,51,4],[52,12,51,10,"handleEntries"],[52,25,51,23],[52,28,51,27,"entries"],[52,35,51,34],[52,39,51,39],[53,8,52,6],[54,8,53,6],[55,8,54,6],[55,12,54,10],[55,13,54,11,"opts"],[55,17,54,15],[55,18,54,16,"reportAllChanges"],[55,34,54,32],[55,36,54,34],[56,10,55,8],[57,10,56,8,"entries"],[57,17,56,15],[57,20,56,18,"entries"],[57,27,56,25],[57,28,56,26,"slice"],[57,33,56,31],[57,34,56,32],[57,35,56,33],[57,36,56,34],[57,37,56,35],[58,8,57,6],[59,8,59,6,"entries"],[59,15,59,13],[59,16,59,14,"forEach"],[59,23,59,21],[59,24,59,22,"entry"],[59,29,59,27],[59,33,59,31],[60,10,60,8],[61,10,61,8],[61,14,61,12,"entry"],[61,19,61,17],[61,20,61,18,"startTime"],[61,29,61,27],[61,32,61,30,"visibilityWatcher"],[61,49,61,47],[61,50,61,48,"firstHiddenTime"],[61,65,61,63],[61,67,61,65],[62,12,62,10],[63,12,63,10],[64,12,64,10],[65,12,65,10],[66,12,66,10],[67,12,67,10],[68,12,68,10,"metric"],[68,18,68,16],[68,19,68,17,"value"],[68,24,68,22],[68,27,68,25,"Math"],[68,31,68,29],[68,32,68,30,"max"],[68,35,68,33],[68,36,68,34,"entry"],[68,41,68,39],[68,42,68,40,"startTime"],[68,51,68,49],[68,54,68,52],[68,58,68,52,"getActivationStart"],[68,96,68,70],[68,98,68,71],[68,99,68,72],[68,101,68,74],[68,102,68,75],[68,103,68,76],[69,12,69,10,"metric"],[69,18,69,16],[69,19,69,17,"entries"],[69,26,69,24],[69,29,69,27],[69,30,69,28,"entry"],[69,35,69,33],[69,36,69,34],[70,12,70,10,"report"],[70,18,70,16],[70,19,70,17],[70,20,70,18],[71,10,71,8],[72,8,72,6],[72,9,72,7],[72,10,72,8],[73,6,73,4],[73,7,73,5],[74,6,75,4],[74,12,75,10,"po"],[74,14,75,12],[74,17,75,15],[74,21,75,15,"observe"],[74,37,75,22],[74,39,75,23],[74,65,75,49],[74,67,75,51,"handleEntries"],[74,80,75,64],[74,81,75,65],[75,6,77,4],[75,10,77,8,"po"],[75,12,77,10],[75,14,77,12],[76,8,78,6,"report"],[76,14,78,12],[76,17,78,15],[76,21,78,15,"bindReporter"],[76,47,78,27],[76,49,78,28,"onReport"],[76,57,78,36],[76,59,78,38,"metric"],[76,65,78,44],[76,67,78,46,"LCPThresholds"],[76,80,78,59],[76,82,78,61,"opts"],[76,86,78,65],[76,87,78,66,"reportAllChanges"],[76,103,78,82],[76,104,78,83],[77,8,80,6],[77,14,80,12,"stopListening"],[77,27,80,25],[77,30,80,28],[77,34,80,28,"runOnce"],[77,50,80,35],[77,52,80,36],[77,58,80,42],[78,10,81,8],[78,14,81,12],[78,15,81,13,"reportedMetricIDs"],[78,32,81,30],[78,33,81,31,"metric"],[78,39,81,37],[78,40,81,38,"id"],[78,42,81,40],[78,43,81,41],[78,45,81,43],[79,12,82,10,"handleEntries"],[79,25,82,23],[79,26,82,24,"po"],[79,28,82,26],[79,29,82,27,"takeRecords"],[79,40,82,38],[79,41,82,39],[79,42,82,41],[79,43,82,42],[80,12,83,10,"po"],[80,14,83,12],[80,15,83,13,"disconnect"],[80,25,83,23],[80,26,83,24],[80,27,83,25],[81,12,84,10,"reportedMetricIDs"],[81,29,84,27],[81,30,84,28,"metric"],[81,36,84,34],[81,37,84,35,"id"],[81,39,84,37],[81,40,84,38],[81,43,84,41],[81,47,84,45],[82,12,85,10,"report"],[82,18,85,16],[82,19,85,17],[82,23,85,21],[82,24,85,22],[83,10,86,8],[84,8,87,6],[84,9,87,7],[84,10,87,8],[86,8,89,6],[87,8,90,6],[88,8,91,6],[89,8,92,6],[89,9,92,7],[89,18,92,16],[89,20,92,18],[89,27,92,25],[89,28,92,26],[89,29,92,27,"forEach"],[89,36,92,34],[89,37,92,35,"type"],[89,41,92,39],[89,45,92,43],[90,10,93,8],[91,10,94,8],[92,10,95,8],[93,10,96,8],[93,14,96,12,"WINDOW"],[93,27,96,18],[93,28,96,19,"document"],[93,36,96,27],[93,38,96,29],[94,12,97,10,"addEventListener"],[94,28,97,26],[94,29,97,27,"type"],[94,33,97,31],[94,35,97,33],[94,41,97,39],[94,45,97,39,"whenIdle"],[94,63,97,47],[94,65,97,48,"stopListening"],[94,78,97,62],[94,79,97,63],[94,81,97,65],[95,14,98,12,"once"],[95,18,98,16],[95,20,98,18],[95,24,98,22],[96,14,99,12,"capture"],[96,21,99,19],[96,23,99,21],[97,12,100,10],[97,13,100,11],[97,14,100,12],[98,10,101,8],[99,8,102,6],[99,9,102,7],[99,10,102,8],[100,8,104,6],[100,12,104,6,"onHidden"],[100,30,104,14],[100,32,104,15,"stopListening"],[100,45,104,28],[100,46,104,29],[101,6,105,4],[102,4,106,2],[102,5,106,3],[102,6,106,4],[103,2,107,0],[103,3,107,1],[104,2,107,2,"exports"],[104,9,107,2],[104,10,107,2,"onLCP"],[104,15,107,2],[104,18,107,2,"onLCP"],[104,23,107,2],[105,0,107,2],[105,3]],"functionMap":{"names":["<global>","onLCP","whenActivated$argument_0","handleEntries","entries.forEach$argument_0","runOnce$argument_0","forEach$argument_0","addEventListener$argument_1"],"mappings":"AAA;cC4C;gBCC;0BCK;sBCQ;ODa;KDC;oCGO;OHO;mCIK;iCCK,8BD;OJK;GDI;CDC"}},"type":"js/module"}]}