{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._nullishCoalesce = _nullishCoalesce;\n  // https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n  //\n  // The MIT License (MIT)\n  //\n  // Copyright (c) 2012-2018 various contributors (see AUTHORS)\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the \"Software\"), to deal\n  // in the Software without restriction, including without limitation the rights\n  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  // copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included in all\n  // copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  // SOFTWARE.\n\n  /**\n   * Polyfill for the nullish coalescing operator (`??`).\n   *\n   * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n   * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n   *\n   * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n   *\n   * @param lhs The value of the expression to the left of the `??`\n   * @param rhsFn A function returning the value of the expression to the right of the `??`\n   * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n   */\n  function _nullishCoalesce(lhs, rhsFn) {\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    return lhs != null ? lhs : rhsFn();\n  }\n\n  // Sucrase version:\n  // function _nullishCoalesce(lhs, rhsFn) {\n  //   if (lhs != null) {\n  //     return lhs;\n  //   } else {\n  //     return rhsFn();\n  //   }\n  // }\n});","lineCount":55,"map":[[6,2,1,0],[7,2,2,0],[8,2,3,0],[9,2,4,0],[10,2,5,0],[11,2,6,0],[12,2,7,0],[13,2,8,0],[14,2,9,0],[15,2,10,0],[16,2,11,0],[17,2,12,0],[18,2,13,0],[19,2,14,0],[20,2,15,0],[21,2,16,0],[22,2,17,0],[23,2,18,0],[24,2,19,0],[25,2,20,0],[26,2,21,0],[27,2,22,0],[28,2,23,0],[30,2,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,2,37,0],[42,11,37,9,"_nullishCoalesce"],[42,27,37,25,"_nullishCoalesce"],[42,28,37,26,"lhs"],[42,31,37,29],[42,33,37,31,"rhsFn"],[42,38,37,36],[42,40,37,38],[43,4,38,2],[44,4,39,2],[44,11,39,9,"lhs"],[44,14,39,12],[44,18,39,16],[44,22,39,20],[44,25,39,23,"lhs"],[44,28,39,26],[44,31,39,29,"rhsFn"],[44,36,39,34],[44,37,39,35],[44,38,39,36],[45,2,40,0],[47,2,42,0],[48,2,43,0],[49,2,44,0],[50,2,45,0],[51,2,46,0],[52,2,47,0],[53,2,48,0],[54,2,49,0],[55,0,49,0],[55,3]],"functionMap":{"names":["<global>","_nullishCoalesce"],"mappings":"AAA;ACoC;CDG"}},"type":"js/module"}]}