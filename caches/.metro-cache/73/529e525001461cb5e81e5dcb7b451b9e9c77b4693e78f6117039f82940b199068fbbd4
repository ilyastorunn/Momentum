{"dependencies":[{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":66},"end":{"line":2,"column":48,"index":114}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":115},"end":{"line":3,"column":52,"index":167}}],"key":"9QrrKomI3Ne27fOeKN9sw9V56fg=","exportNames":["*"]}},{"name":"../metrics/metric-summary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":168},"end":{"line":4,"column":75,"index":243}}],"key":"SgD8iidLO9LqRs+nZfdnbn+DJQA=","exportNames":["*"]}},{"name":"../semanticAttributes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":244},"end":{"line":5,"column":250,"index":494}}],"key":"Ovsn9ORXEwSazI36ru//KBDD8LQ=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":495},"end":{"line":6,"column":50,"index":545}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":546},"end":{"line":7,"column":61,"index":607}}],"key":"IWRGqGXR51VGNaoabCqwsNvBzK0=","exportNames":["*"]}},{"name":"../utils-hoist/propagationContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":608},"end":{"line":8,"column":87,"index":695}}],"key":"acTMSbYB3Ip99hQ+0SCJ99493GM=","exportNames":["*"]}},{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":696},"end":{"line":9,"column":60,"index":756}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":757},"end":{"line":10,"column":194,"index":951}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./dynamicSamplingContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":952},"end":{"line":11,"column":80,"index":1032}}],"key":"8KGumsjxSOLk/SYXIEAvTlUL2ZI=","exportNames":["*"]}},{"name":"./logSpans.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":1033},"end":{"line":12,"column":43,"index":1076}}],"key":"pjbMKgT12NHQhSaWy64GGjRJ9sU=","exportNames":["*"]}},{"name":"./measurement.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":1077},"end":{"line":13,"column":61,"index":1138}}],"key":"BZJYf12YlCqjvw8CmrSdsvRBdiY=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":1139},"end":{"line":14,"column":53,"index":1192}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SentrySpan = void 0;\n  var _currentScopes = require(_dependencyMap[0], \"../currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  var _envelope = require(_dependencyMap[2], \"../envelope.js\");\n  var _metricSummary = require(_dependencyMap[3], \"../metrics/metric-summary.js\");\n  var _semanticAttributes = require(_dependencyMap[4], \"../semanticAttributes.js\");\n  var _logger = require(_dependencyMap[5], \"../utils-hoist/logger.js\");\n  var _object = require(_dependencyMap[6], \"../utils-hoist/object.js\");\n  var _propagationContext = require(_dependencyMap[7], \"../utils-hoist/propagationContext.js\");\n  var _time2 = require(_dependencyMap[8], \"../utils-hoist/time.js\");\n  var _spanUtils = require(_dependencyMap[9], \"../utils/spanUtils.js\");\n  var _dynamicSamplingContext = require(_dependencyMap[10], \"./dynamicSamplingContext.js\");\n  var _logSpans = require(_dependencyMap[11], \"./logSpans.js\");\n  var _measurement = require(_dependencyMap[12], \"./measurement.js\");\n  var _utils = require(_dependencyMap[13], \"./utils.js\");\n  const MAX_SPAN_COUNT = 1000;\n\n  /**\n   * Span contains all data about a span\n   */\n  class SentrySpan {\n    /** Epoch timestamp in seconds when the span started. */\n\n    /** Epoch timestamp in seconds when the span ended. */\n\n    /** Internal keeper of the status */\n\n    /** The timed events added to this span. */\n\n    /** if true, treat span as a standalone span (not part of a transaction) */\n\n    /**\n     * You should never call the constructor manually, always use `Sentry.startSpan()`\n     * or other span methods.\n     * @internal\n     * @hideconstructor\n     * @hidden\n     */\n    constructor(spanContext = {}) {\n      this._traceId = spanContext.traceId || (0, _propagationContext.generateTraceId)();\n      this._spanId = spanContext.spanId || (0, _propagationContext.generateSpanId)();\n      this._startTime = spanContext.startTimestamp || (0, _time2.timestampInSeconds)();\n      this._attributes = {};\n      this.setAttributes({\n        [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n        [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n        ...spanContext.attributes\n      });\n      this._name = spanContext.name;\n      if (spanContext.parentSpanId) {\n        this._parentSpanId = spanContext.parentSpanId;\n      }\n      // We want to include booleans as well here\n      if ('sampled' in spanContext) {\n        this._sampled = spanContext.sampled;\n      }\n      if (spanContext.endTimestamp) {\n        this._endTime = spanContext.endTimestamp;\n      }\n      this._events = [];\n      this._isStandaloneSpan = spanContext.isStandalone;\n\n      // If the span is already ended, ensure we finalize the span immediately\n      if (this._endTime) {\n        this._onSpanEnded();\n      }\n    }\n\n    /**\n     * This should generally not be used,\n     * but it is needed for being compliant with the OTEL Span interface.\n     *\n     * @hidden\n     * @internal\n     */\n    addLink(_link) {\n      return this;\n    }\n\n    /**\n     * This should generally not be used,\n     * but it is needed for being compliant with the OTEL Span interface.\n     *\n     * @hidden\n     * @internal\n     */\n    addLinks(_links) {\n      return this;\n    }\n\n    /**\n     * This should generally not be used,\n     * but it is needed for being compliant with the OTEL Span interface.\n     *\n     * @hidden\n     * @internal\n     */\n    recordException(_exception, _time) {\n      // noop\n    }\n\n    /** @inheritdoc */\n    spanContext() {\n      const {\n        _spanId: spanId,\n        _traceId: traceId,\n        _sampled: sampled\n      } = this;\n      return {\n        spanId,\n        traceId,\n        traceFlags: sampled ? _spanUtils.TRACE_FLAG_SAMPLED : _spanUtils.TRACE_FLAG_NONE\n      };\n    }\n\n    /** @inheritdoc */\n    setAttribute(key, value) {\n      if (value === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._attributes[key];\n      } else {\n        this._attributes[key] = value;\n      }\n      return this;\n    }\n\n    /** @inheritdoc */\n    setAttributes(attributes) {\n      Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n      return this;\n    }\n\n    /**\n     * This should generally not be used,\n     * but we need it for browser tracing where we want to adjust the start time afterwards.\n     * USE THIS WITH CAUTION!\n     *\n     * @hidden\n     * @internal\n     */\n    updateStartTime(timeInput) {\n      this._startTime = (0, _spanUtils.spanTimeInputToSeconds)(timeInput);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setStatus(value) {\n      this._status = value;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateName(name) {\n      this._name = name;\n      this.setAttribute(_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n      return this;\n    }\n\n    /** @inheritdoc */\n    end(endTimestamp) {\n      // If already ended, skip\n      if (this._endTime) {\n        return;\n      }\n      this._endTime = (0, _spanUtils.spanTimeInputToSeconds)(endTimestamp);\n      (0, _logSpans.logSpanEnd)(this);\n      this._onSpanEnded();\n    }\n\n    /**\n     * Get JSON representation of this span.\n     *\n     * @hidden\n     * @internal This method is purely for internal purposes and should not be used outside\n     * of SDK code. If you need to get a JSON representation of a span,\n     * use `spanToJSON(span)` instead.\n     */\n    getSpanJSON() {\n      return (0, _object.dropUndefinedKeys)({\n        data: this._attributes,\n        description: this._name,\n        op: this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n        parent_span_id: this._parentSpanId,\n        span_id: this._spanId,\n        start_timestamp: this._startTime,\n        status: (0, _spanUtils.getStatusMessage)(this._status),\n        timestamp: this._endTime,\n        trace_id: this._traceId,\n        origin: this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n        _metrics_summary: (0, _metricSummary.getMetricSummaryJsonForSpan)(this),\n        profile_id: this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID],\n        exclusive_time: this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],\n        measurements: (0, _measurement.timedEventsToMeasurements)(this._events),\n        is_segment: this._isStandaloneSpan && (0, _spanUtils.getRootSpan)(this) === this || undefined,\n        segment_id: this._isStandaloneSpan ? (0, _spanUtils.getRootSpan)(this).spanContext().spanId : undefined\n      });\n    }\n\n    /** @inheritdoc */\n    isRecording() {\n      return !this._endTime && !!this._sampled;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    addEvent(name, attributesOrStartTime, startTime) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.log('[Tracing] Adding an event to span:', name);\n      const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || (0, _time2.timestampInSeconds)();\n      const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n      const event = {\n        name,\n        time: (0, _spanUtils.spanTimeInputToSeconds)(time),\n        attributes\n      };\n      this._events.push(event);\n      return this;\n    }\n\n    /**\n     * This method should generally not be used,\n     * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n     * USE THIS WITH CAUTION!\n     * @internal\n     * @hidden\n     * @experimental\n     */\n    isStandaloneSpan() {\n      return !!this._isStandaloneSpan;\n    }\n\n    /** Emit `spanEnd` when the span is ended. */\n    _onSpanEnded() {\n      const client = (0, _currentScopes.getClient)();\n      if (client) {\n        client.emit('spanEnd', this);\n      }\n\n      // A segment span is basically the root span of a local span tree.\n      // So for now, this is either what we previously refer to as the root span,\n      // or a standalone span.\n      const isSegmentSpan = this._isStandaloneSpan || this === (0, _spanUtils.getRootSpan)(this);\n      if (!isSegmentSpan) {\n        return;\n      }\n\n      // if this is a standalone span, we send it immediately\n      if (this._isStandaloneSpan) {\n        if (this._sampled) {\n          sendSpanEnvelope((0, _envelope.createSpanEnvelope)([this], client));\n        } else {\n          _debugBuild.DEBUG_BUILD && _logger.logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n          if (client) {\n            client.recordDroppedEvent('sample_rate', 'span');\n          }\n        }\n        return;\n      }\n      const transactionEvent = this._convertSpanToTransaction();\n      if (transactionEvent) {\n        const scope = (0, _utils.getCapturedScopesOnSpan)(this).scope || (0, _currentScopes.getCurrentScope)();\n        scope.captureEvent(transactionEvent);\n      }\n    }\n\n    /**\n     * Finish the transaction & prepare the event to send to Sentry.\n     */\n    _convertSpanToTransaction() {\n      // We can only convert finished spans\n      if (!isFullFinishedSpan((0, _spanUtils.spanToJSON)(this))) {\n        return undefined;\n      }\n      if (!this._name) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n        this._name = '<unlabeled transaction>';\n      }\n      const {\n        scope: capturedSpanScope,\n        isolationScope: capturedSpanIsolationScope\n      } = (0, _utils.getCapturedScopesOnSpan)(this);\n      const scope = capturedSpanScope || (0, _currentScopes.getCurrentScope)();\n      const client = scope.getClient() || (0, _currentScopes.getClient)();\n      if (this._sampled !== true) {\n        // At this point if `sampled !== true` we want to discard the transaction.\n        _debugBuild.DEBUG_BUILD && _logger.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'transaction');\n        }\n        return undefined;\n      }\n\n      // The transaction span itself as well as any potential standalone spans should be filtered out\n      const finishedSpans = (0, _spanUtils.getSpanDescendants)(this).filter(span => span !== this && !isStandaloneSpan(span));\n      const spans = finishedSpans.map(span => (0, _spanUtils.spanToJSON)(span)).filter(isFullFinishedSpan);\n      const source = this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n      // remove internal root span attributes we don't need to send.\n      /* eslint-disable @typescript-eslint/no-dynamic-delete */\n      delete this._attributes[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n      spans.forEach(span => {\n        span.data && delete span.data[_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n      });\n      // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n      const transaction = {\n        contexts: {\n          trace: (0, _spanUtils.spanToTransactionTraceContext)(this)\n        },\n        spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans,\n        start_timestamp: this._startTime,\n        timestamp: this._endTime,\n        transaction: this._name,\n        type: 'transaction',\n        sdkProcessingMetadata: {\n          capturedSpanScope,\n          capturedSpanIsolationScope,\n          ...(0, _object.dropUndefinedKeys)({\n            dynamicSamplingContext: (0, _dynamicSamplingContext.getDynamicSamplingContextFromSpan)(this)\n          })\n        },\n        _metrics_summary: (0, _metricSummary.getMetricSummaryJsonForSpan)(this),\n        ...(source && {\n          transaction_info: {\n            source\n          }\n        })\n      };\n      const measurements = (0, _measurement.timedEventsToMeasurements)(this._events);\n      const hasMeasurements = measurements && Object.keys(measurements).length;\n      if (hasMeasurements) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.log('[Measurements] Adding measurements to transaction event', JSON.stringify(measurements, undefined, 2));\n        transaction.measurements = measurements;\n      }\n      return transaction;\n    }\n  }\n  exports.SentrySpan = SentrySpan;\n  function isSpanTimeInput(value) {\n    return value && typeof value === 'number' || value instanceof Date || Array.isArray(value);\n  }\n\n  // We want to filter out any incomplete SpanJSON objects\n  function isFullFinishedSpan(input) {\n    return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n  }\n\n  /** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\n  function isStandaloneSpan(span) {\n    return span instanceof SentrySpan && span.isStandaloneSpan();\n  }\n\n  /**\n   * Sends a `SpanEnvelope`.\n   *\n   * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n   * the envelope will not be sent either.\n   */\n  function sendSpanEnvelope(envelope) {\n    const client = (0, _currentScopes.getClient)();\n    if (!client) {\n      return;\n    }\n    const spanItems = envelope[1];\n    if (!spanItems || spanItems.length === 0) {\n      client.recordDroppedEvent('before_send', 'span');\n      return;\n    }\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    client.sendEnvelope(envelope);\n  }\n});","lineCount":384,"map":[[6,2,1,0],[6,6,1,0,"_currentScopes"],[6,20,1,0],[6,23,1,0,"require"],[6,30,1,0],[6,31,1,0,"_dependencyMap"],[6,45,1,0],[7,2,2,0],[7,6,2,0,"_debugBuild"],[7,17,2,0],[7,20,2,0,"require"],[7,27,2,0],[7,28,2,0,"_dependencyMap"],[7,42,2,0],[8,2,3,0],[8,6,3,0,"_envelope"],[8,15,3,0],[8,18,3,0,"require"],[8,25,3,0],[8,26,3,0,"_dependencyMap"],[8,40,3,0],[9,2,4,0],[9,6,4,0,"_metricSummary"],[9,20,4,0],[9,23,4,0,"require"],[9,30,4,0],[9,31,4,0,"_dependencyMap"],[9,45,4,0],[10,2,5,0],[10,6,5,0,"_semanticAttributes"],[10,25,5,0],[10,28,5,0,"require"],[10,35,5,0],[10,36,5,0,"_dependencyMap"],[10,50,5,0],[11,2,6,0],[11,6,6,0,"_logger"],[11,13,6,0],[11,16,6,0,"require"],[11,23,6,0],[11,24,6,0,"_dependencyMap"],[11,38,6,0],[12,2,7,0],[12,6,7,0,"_object"],[12,13,7,0],[12,16,7,0,"require"],[12,23,7,0],[12,24,7,0,"_dependencyMap"],[12,38,7,0],[13,2,8,0],[13,6,8,0,"_propagationContext"],[13,25,8,0],[13,28,8,0,"require"],[13,35,8,0],[13,36,8,0,"_dependencyMap"],[13,50,8,0],[14,2,9,0],[14,6,9,0,"_time2"],[14,12,9,0],[14,15,9,0,"require"],[14,22,9,0],[14,23,9,0,"_dependencyMap"],[14,37,9,0],[15,2,10,0],[15,6,10,0,"_spanUtils"],[15,16,10,0],[15,19,10,0,"require"],[15,26,10,0],[15,27,10,0,"_dependencyMap"],[15,41,10,0],[16,2,11,0],[16,6,11,0,"_dynamicSamplingContext"],[16,29,11,0],[16,32,11,0,"require"],[16,39,11,0],[16,40,11,0,"_dependencyMap"],[16,54,11,0],[17,2,12,0],[17,6,12,0,"_logSpans"],[17,15,12,0],[17,18,12,0,"require"],[17,25,12,0],[17,26,12,0,"_dependencyMap"],[17,40,12,0],[18,2,13,0],[18,6,13,0,"_measurement"],[18,18,13,0],[18,21,13,0,"require"],[18,28,13,0],[18,29,13,0,"_dependencyMap"],[18,43,13,0],[19,2,14,0],[19,6,14,0,"_utils"],[19,12,14,0],[19,15,14,0,"require"],[19,22,14,0],[19,23,14,0,"_dependencyMap"],[19,37,14,0],[20,2,16,0],[20,8,16,6,"MAX_SPAN_COUNT"],[20,22,16,20],[20,25,16,23],[20,29,16,27],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,2,21,0],[25,8,21,6,"SentrySpan"],[25,18,21,16],[25,19,21,18],[26,4,23,2],[28,4,25,2],[30,4,27,2],[32,4,29,2],[34,4,31,2],[36,4,33,2],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,4,40,3,"constructor"],[43,15,40,14,"constructor"],[43,16,40,15,"spanContext"],[43,27,40,26],[43,30,40,29],[43,31,40,30],[43,32,40,31],[43,34,40,33],[44,6,41,4],[44,10,41,8],[44,11,41,9,"_traceId"],[44,19,41,17],[44,22,41,20,"spanContext"],[44,33,41,31],[44,34,41,32,"traceId"],[44,41,41,39],[44,45,41,43],[44,49,41,43,"generateTraceId"],[44,84,41,58],[44,86,41,59],[44,87,41,60],[45,6,42,4],[45,10,42,8],[45,11,42,9,"_spanId"],[45,18,42,16],[45,21,42,19,"spanContext"],[45,32,42,30],[45,33,42,31,"spanId"],[45,39,42,37],[45,43,42,41],[45,47,42,41,"generateSpanId"],[45,81,42,55],[45,83,42,56],[45,84,42,57],[46,6,43,4],[46,10,43,8],[46,11,43,9,"_startTime"],[46,21,43,19],[46,24,43,22,"spanContext"],[46,35,43,33],[46,36,43,34,"startTimestamp"],[46,50,43,48],[46,54,43,52],[46,58,43,52,"timestampInSeconds"],[46,83,43,70],[46,85,43,71],[46,86,43,72],[47,6,45,4],[47,10,45,8],[47,11,45,9,"_attributes"],[47,22,45,20],[47,25,45,23],[47,26,45,24],[47,27,45,25],[48,6,46,4],[48,10,46,8],[48,11,46,9,"setAttributes"],[48,24,46,22],[48,25,46,23],[49,8,47,6],[49,9,47,7,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[49,61,47,39],[49,64,47,42],[49,72,47,50],[50,8,48,6],[50,9,48,7,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[50,57,48,35],[50,60,48,38,"spanContext"],[50,71,48,49],[50,72,48,50,"op"],[50,74,48,52],[51,8,49,6],[51,11,49,9,"spanContext"],[51,22,49,20],[51,23,49,21,"attributes"],[52,6,50,4],[52,7,50,5],[52,8,50,6],[53,6,52,4],[53,10,52,8],[53,11,52,9,"_name"],[53,16,52,14],[53,19,52,17,"spanContext"],[53,30,52,28],[53,31,52,29,"name"],[53,35,52,33],[54,6,54,4],[54,10,54,8,"spanContext"],[54,21,54,19],[54,22,54,20,"parentSpanId"],[54,34,54,32],[54,36,54,34],[55,8,55,6],[55,12,55,10],[55,13,55,11,"_parentSpanId"],[55,26,55,24],[55,29,55,27,"spanContext"],[55,40,55,38],[55,41,55,39,"parentSpanId"],[55,53,55,51],[56,6,56,4],[57,6,57,4],[58,6,58,4],[58,10,58,8],[58,19,58,17],[58,23,58,21,"spanContext"],[58,34,58,32],[58,36,58,34],[59,8,59,6],[59,12,59,10],[59,13,59,11,"_sampled"],[59,21,59,19],[59,24,59,22,"spanContext"],[59,35,59,33],[59,36,59,34,"sampled"],[59,43,59,41],[60,6,60,4],[61,6,61,4],[61,10,61,8,"spanContext"],[61,21,61,19],[61,22,61,20,"endTimestamp"],[61,34,61,32],[61,36,61,34],[62,8,62,6],[62,12,62,10],[62,13,62,11,"_endTime"],[62,21,62,19],[62,24,62,22,"spanContext"],[62,35,62,33],[62,36,62,34,"endTimestamp"],[62,48,62,46],[63,6,63,4],[64,6,65,4],[64,10,65,8],[64,11,65,9,"_events"],[64,18,65,16],[64,21,65,19],[64,23,65,21],[65,6,67,4],[65,10,67,8],[65,11,67,9,"_isStandaloneSpan"],[65,28,67,26],[65,31,67,29,"spanContext"],[65,42,67,40],[65,43,67,41,"isStandalone"],[65,55,67,53],[67,6,69,4],[68,6,70,4],[68,10,70,8],[68,14,70,12],[68,15,70,13,"_endTime"],[68,23,70,21],[68,25,70,23],[69,8,71,6],[69,12,71,10],[69,13,71,11,"_onSpanEnded"],[69,25,71,23],[69,26,71,24],[69,27,71,25],[70,6,72,4],[71,4,73,2],[73,4,75,2],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,0,79,0],[78,0,80,0],[79,0,81,0],[80,4,82,3,"addLink"],[80,11,82,10,"addLink"],[80,12,82,11,"_link"],[80,17,82,16],[80,19,82,18],[81,6,83,4],[81,13,83,11],[81,17,83,15],[82,4,84,2],[84,4,86,2],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,90,0],[89,0,91,0],[90,0,92,0],[91,4,93,3,"addLinks"],[91,12,93,11,"addLinks"],[91,13,93,12,"_links"],[91,19,93,18],[91,21,93,20],[92,6,94,4],[92,13,94,11],[92,17,94,15],[93,4,95,2],[95,4,97,2],[96,0,98,0],[97,0,99,0],[98,0,100,0],[99,0,101,0],[100,0,102,0],[101,0,103,0],[102,4,104,3,"recordException"],[102,19,104,18,"recordException"],[102,20,104,19,"_exception"],[102,30,104,29],[102,32,104,31,"_time"],[102,37,104,36],[102,39,104,38],[103,6,105,4],[104,4,105,4],[106,4,108,2],[107,4,109,3,"spanContext"],[107,15,109,14,"spanContext"],[107,16,109,14],[107,18,109,17],[108,6,110,4],[108,12,110,10],[109,8,110,12,"_spanId"],[109,15,110,19],[109,17,110,21,"spanId"],[109,23,110,27],[110,8,110,29,"_traceId"],[110,16,110,37],[110,18,110,39,"traceId"],[110,25,110,46],[111,8,110,48,"_sampled"],[111,16,110,56],[111,18,110,58,"sampled"],[112,6,110,66],[112,7,110,67],[112,10,110,70],[112,14,110,74],[113,6,111,4],[113,13,111,11],[114,8,112,6,"spanId"],[114,14,112,12],[115,8,113,6,"traceId"],[115,15,113,13],[116,8,114,6,"traceFlags"],[116,18,114,16],[116,20,114,18,"sampled"],[116,27,114,25],[116,30,114,28,"TRACE_FLAG_SAMPLED"],[116,59,114,46],[116,62,114,49,"TRACE_FLAG_NONE"],[117,6,115,4],[117,7,115,5],[118,4,116,2],[120,4,118,2],[121,4,119,3,"setAttribute"],[121,16,119,15,"setAttribute"],[121,17,119,16,"key"],[121,20,119,19],[121,22,119,21,"value"],[121,27,119,26],[121,29,119,28],[122,6,120,4],[122,10,120,8,"value"],[122,15,120,13],[122,20,120,18,"undefined"],[122,29,120,27],[122,31,120,29],[123,8,121,6],[124,8,122,6],[124,15,122,13],[124,19,122,17],[124,20,122,18,"_attributes"],[124,31,122,29],[124,32,122,30,"key"],[124,35,122,33],[124,36,122,34],[125,6,123,4],[125,7,123,5],[125,13,123,11],[126,8,124,6],[126,12,124,10],[126,13,124,11,"_attributes"],[126,24,124,22],[126,25,124,23,"key"],[126,28,124,26],[126,29,124,27],[126,32,124,30,"value"],[126,37,124,35],[127,6,125,4],[128,6,127,4],[128,13,127,11],[128,17,127,15],[129,4,128,2],[131,4,130,2],[132,4,131,3,"setAttributes"],[132,17,131,16,"setAttributes"],[132,18,131,17,"attributes"],[132,28,131,27],[132,30,131,29],[133,6,132,4,"Object"],[133,12,132,10],[133,13,132,11,"keys"],[133,17,132,15],[133,18,132,16,"attributes"],[133,28,132,26],[133,29,132,27],[133,30,132,28,"forEach"],[133,37,132,35],[133,38,132,36,"key"],[133,41,132,39],[133,45,132,43],[133,49,132,47],[133,50,132,48,"setAttribute"],[133,62,132,60],[133,63,132,61,"key"],[133,66,132,64],[133,68,132,66,"attributes"],[133,78,132,76],[133,79,132,77,"key"],[133,82,132,80],[133,83,132,81],[133,84,132,82],[133,85,132,83],[134,6,133,4],[134,13,133,11],[134,17,133,15],[135,4,134,2],[137,4,136,2],[138,0,137,0],[139,0,138,0],[140,0,139,0],[141,0,140,0],[142,0,141,0],[143,0,142,0],[144,0,143,0],[145,4,144,3,"updateStartTime"],[145,19,144,18,"updateStartTime"],[145,20,144,19,"timeInput"],[145,29,144,28],[145,31,144,30],[146,6,145,4],[146,10,145,8],[146,11,145,9,"_startTime"],[146,21,145,19],[146,24,145,22],[146,28,145,22,"spanTimeInputToSeconds"],[146,61,145,44],[146,63,145,45,"timeInput"],[146,72,145,54],[146,73,145,55],[147,4,146,2],[149,4,148,2],[150,0,149,0],[151,0,150,0],[152,4,151,3,"setStatus"],[152,13,151,12,"setStatus"],[152,14,151,13,"value"],[152,19,151,18],[152,21,151,20],[153,6,152,4],[153,10,152,8],[153,11,152,9,"_status"],[153,18,152,16],[153,21,152,19,"value"],[153,26,152,24],[154,6,153,4],[154,13,153,11],[154,17,153,15],[155,4,154,2],[157,4,156,2],[158,0,157,0],[159,0,158,0],[160,4,159,3,"updateName"],[160,14,159,13,"updateName"],[160,15,159,14,"name"],[160,19,159,18],[160,21,159,20],[161,6,160,4],[161,10,160,8],[161,11,160,9,"_name"],[161,16,160,14],[161,19,160,17,"name"],[161,23,160,21],[162,6,161,4],[162,10,161,8],[162,11,161,9,"setAttribute"],[162,23,161,21],[162,24,161,22,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[162,76,161,54],[162,78,161,56],[162,86,161,64],[162,87,161,65],[163,6,162,4],[163,13,162,11],[163,17,162,15],[164,4,163,2],[166,4,165,2],[167,4,166,3,"end"],[167,7,166,6,"end"],[167,8,166,7,"endTimestamp"],[167,20,166,19],[167,22,166,21],[168,6,167,4],[169,6,168,4],[169,10,168,8],[169,14,168,12],[169,15,168,13,"_endTime"],[169,23,168,21],[169,25,168,23],[170,8,169,6],[171,6,170,4],[172,6,172,4],[172,10,172,8],[172,11,172,9,"_endTime"],[172,19,172,17],[172,22,172,20],[172,26,172,20,"spanTimeInputToSeconds"],[172,59,172,42],[172,61,172,43,"endTimestamp"],[172,73,172,55],[172,74,172,56],[173,6,173,4],[173,10,173,4,"logSpanEnd"],[173,30,173,14],[173,32,173,15],[173,36,173,19],[173,37,173,20],[174,6,175,4],[174,10,175,8],[174,11,175,9,"_onSpanEnded"],[174,23,175,21],[174,24,175,22],[174,25,175,23],[175,4,176,2],[177,4,178,2],[178,0,179,0],[179,0,180,0],[180,0,181,0],[181,0,182,0],[182,0,183,0],[183,0,184,0],[184,0,185,0],[185,4,186,3,"getSpanJSON"],[185,15,186,14,"getSpanJSON"],[185,16,186,14],[185,18,186,17],[186,6,187,4],[186,13,187,11],[186,17,187,11,"dropUndefinedKeys"],[186,42,187,28],[186,44,187,29],[187,8,188,6,"data"],[187,12,188,10],[187,14,188,12],[187,18,188,16],[187,19,188,17,"_attributes"],[187,30,188,28],[188,8,189,6,"description"],[188,19,189,17],[188,21,189,19],[188,25,189,23],[188,26,189,24,"_name"],[188,31,189,29],[189,8,190,6,"op"],[189,10,190,8],[189,12,190,10],[189,16,190,14],[189,17,190,15,"_attributes"],[189,28,190,26],[189,29,190,27,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[189,77,190,55],[189,78,190,56],[190,8,191,6,"parent_span_id"],[190,22,191,20],[190,24,191,22],[190,28,191,26],[190,29,191,27,"_parentSpanId"],[190,42,191,40],[191,8,192,6,"span_id"],[191,15,192,13],[191,17,192,15],[191,21,192,19],[191,22,192,20,"_spanId"],[191,29,192,27],[192,8,193,6,"start_timestamp"],[192,23,193,21],[192,25,193,23],[192,29,193,27],[192,30,193,28,"_startTime"],[192,40,193,38],[193,8,194,6,"status"],[193,14,194,12],[193,16,194,14],[193,20,194,14,"getStatusMessage"],[193,47,194,30],[193,49,194,31],[193,53,194,35],[193,54,194,36,"_status"],[193,61,194,43],[193,62,194,44],[194,8,195,6,"timestamp"],[194,17,195,15],[194,19,195,17],[194,23,195,21],[194,24,195,22,"_endTime"],[194,32,195,30],[195,8,196,6,"trace_id"],[195,16,196,14],[195,18,196,16],[195,22,196,20],[195,23,196,21,"_traceId"],[195,31,196,29],[196,8,197,6,"origin"],[196,14,197,12],[196,16,197,14],[196,20,197,18],[196,21,197,19,"_attributes"],[196,32,197,30],[196,33,197,31,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[196,85,197,63],[196,86,197,64],[197,8,198,6,"_metrics_summary"],[197,24,198,22],[197,26,198,24],[197,30,198,24,"getMetricSummaryJsonForSpan"],[197,72,198,51],[197,74,198,52],[197,78,198,56],[197,79,198,57],[198,8,199,6,"profile_id"],[198,18,199,16],[198,20,199,18],[198,24,199,22],[198,25,199,23,"_attributes"],[198,36,199,34],[198,37,199,35,"SEMANTIC_ATTRIBUTE_PROFILE_ID"],[198,86,199,64],[198,87,199,65],[199,8,200,6,"exclusive_time"],[199,22,200,20],[199,24,200,22],[199,28,200,26],[199,29,200,27,"_attributes"],[199,40,200,38],[199,41,200,39,"SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME"],[199,94,200,72],[199,95,200,73],[200,8,201,6,"measurements"],[200,20,201,18],[200,22,201,20],[200,26,201,20,"timedEventsToMeasurements"],[200,64,201,45],[200,66,201,46],[200,70,201,50],[200,71,201,51,"_events"],[200,78,201,58],[200,79,201,59],[201,8,202,6,"is_segment"],[201,18,202,16],[201,20,202,19],[201,24,202,23],[201,25,202,24,"_isStandaloneSpan"],[201,42,202,41],[201,46,202,45],[201,50,202,45,"getRootSpan"],[201,72,202,56],[201,74,202,57],[201,78,202,61],[201,79,202,62],[201,84,202,67],[201,88,202,71],[201,92,202,76,"undefined"],[201,101,202,85],[202,8,203,6,"segment_id"],[202,18,203,16],[202,20,203,18],[202,24,203,22],[202,25,203,23,"_isStandaloneSpan"],[202,42,203,40],[202,45,203,43],[202,49,203,43,"getRootSpan"],[202,71,203,54],[202,73,203,55],[202,77,203,59],[202,78,203,60],[202,79,203,61,"spanContext"],[202,90,203,72],[202,91,203,73],[202,92,203,74],[202,93,203,75,"spanId"],[202,99,203,81],[202,102,203,84,"undefined"],[203,6,204,4],[203,7,204,5],[203,8,204,6],[204,4,205,2],[206,4,207,2],[207,4,208,3,"isRecording"],[207,15,208,14,"isRecording"],[207,16,208,14],[207,18,208,17],[208,6,209,4],[208,13,209,11],[208,14,209,12],[208,18,209,16],[208,19,209,17,"_endTime"],[208,27,209,25],[208,31,209,29],[208,32,209,30],[208,33,209,31],[208,37,209,35],[208,38,209,36,"_sampled"],[208,46,209,44],[209,4,210,2],[211,4,212,2],[212,0,213,0],[213,0,214,0],[214,4,215,3,"addEvent"],[214,12,215,11,"addEvent"],[214,13,216,4,"name"],[214,17,216,8],[214,19,217,4,"attributesOrStartTime"],[214,40,217,25],[214,42,218,4,"startTime"],[214,51,218,13],[214,53,219,4],[215,6,220,4,"DEBUG_BUILD"],[215,29,220,15],[215,33,220,19,"logger"],[215,47,220,25],[215,48,220,26,"log"],[215,51,220,29],[215,52,220,30],[215,88,220,66],[215,90,220,68,"name"],[215,94,220,72],[215,95,220,73],[216,6,222,4],[216,12,222,10,"time"],[216,16,222,14],[216,19,222,17,"isSpanTimeInput"],[216,34,222,32],[216,35,222,33,"attributesOrStartTime"],[216,56,222,54],[216,57,222,55],[216,60,222,58,"attributesOrStartTime"],[216,81,222,79],[216,84,222,82,"startTime"],[216,93,222,91],[216,97,222,95],[216,101,222,95,"timestampInSeconds"],[216,126,222,113],[216,128,222,114],[216,129,222,115],[217,6,223,4],[217,12,223,10,"attributes"],[217,22,223,20],[217,25,223,23,"isSpanTimeInput"],[217,40,223,38],[217,41,223,39,"attributesOrStartTime"],[217,62,223,60],[217,63,223,61],[217,66,223,64],[217,67,223,65],[217,68,223,66],[217,71,223,69,"attributesOrStartTime"],[217,92,223,90],[217,96,223,94],[217,97,223,95],[217,98,223,96],[218,6,225,4],[218,12,225,10,"event"],[218,17,225,15],[218,20,225,18],[219,8,226,6,"name"],[219,12,226,10],[220,8,227,6,"time"],[220,12,227,10],[220,14,227,12],[220,18,227,12,"spanTimeInputToSeconds"],[220,51,227,34],[220,53,227,35,"time"],[220,57,227,39],[220,58,227,40],[221,8,228,6,"attributes"],[222,6,229,4],[222,7,229,5],[223,6,231,4],[223,10,231,8],[223,11,231,9,"_events"],[223,18,231,16],[223,19,231,17,"push"],[223,23,231,21],[223,24,231,22,"event"],[223,29,231,27],[223,30,231,28],[224,6,233,4],[224,13,233,11],[224,17,233,15],[225,4,234,2],[227,4,236,2],[228,0,237,0],[229,0,238,0],[230,0,239,0],[231,0,240,0],[232,0,241,0],[233,0,242,0],[234,0,243,0],[235,4,244,3,"isStandaloneSpan"],[235,20,244,19,"isStandaloneSpan"],[235,21,244,19],[235,23,244,22],[236,6,245,4],[236,13,245,11],[236,14,245,12],[236,15,245,13],[236,19,245,17],[236,20,245,18,"_isStandaloneSpan"],[236,37,245,35],[237,4,246,2],[239,4,248,2],[240,4,249,3,"_onSpanEnded"],[240,16,249,15,"_onSpanEnded"],[240,17,249,15],[240,19,249,18],[241,6,250,4],[241,12,250,10,"client"],[241,18,250,16],[241,21,250,19],[241,25,250,19,"getClient"],[241,49,250,28],[241,51,250,29],[241,52,250,30],[242,6,251,4],[242,10,251,8,"client"],[242,16,251,14],[242,18,251,16],[243,8,252,6,"client"],[243,14,252,12],[243,15,252,13,"emit"],[243,19,252,17],[243,20,252,18],[243,29,252,27],[243,31,252,29],[243,35,252,33],[243,36,252,34],[244,6,253,4],[246,6,255,4],[247,6,256,4],[248,6,257,4],[249,6,258,4],[249,12,258,10,"isSegmentSpan"],[249,25,258,23],[249,28,258,26],[249,32,258,30],[249,33,258,31,"_isStandaloneSpan"],[249,50,258,48],[249,54,258,52],[249,58,258,56],[249,63,258,61],[249,67,258,61,"getRootSpan"],[249,89,258,72],[249,91,258,73],[249,95,258,77],[249,96,258,78],[250,6,260,4],[250,10,260,8],[250,11,260,9,"isSegmentSpan"],[250,24,260,22],[250,26,260,24],[251,8,261,6],[252,6,262,4],[254,6,264,4],[255,6,265,4],[255,10,265,8],[255,14,265,12],[255,15,265,13,"_isStandaloneSpan"],[255,32,265,30],[255,34,265,32],[256,8,266,6],[256,12,266,10],[256,16,266,14],[256,17,266,15,"_sampled"],[256,25,266,23],[256,27,266,25],[257,10,267,8,"sendSpanEnvelope"],[257,26,267,24],[257,27,267,25],[257,31,267,25,"createSpanEnvelope"],[257,59,267,43],[257,61,267,44],[257,62,267,45],[257,66,267,49],[257,67,267,50],[257,69,267,52,"client"],[257,75,267,58],[257,76,267,59],[257,77,267,60],[258,8,268,6],[258,9,268,7],[258,15,268,13],[259,10,269,8,"DEBUG_BUILD"],[259,33,269,19],[259,37,270,10,"logger"],[259,51,270,16],[259,52,270,17,"log"],[259,55,270,20],[259,56,270,21],[259,142,270,107],[259,143,270,108],[260,10,271,8],[260,14,271,12,"client"],[260,20,271,18],[260,22,271,20],[261,12,272,10,"client"],[261,18,272,16],[261,19,272,17,"recordDroppedEvent"],[261,37,272,35],[261,38,272,36],[261,51,272,49],[261,53,272,51],[261,59,272,57],[261,60,272,58],[262,10,273,8],[263,8,274,6],[264,8,275,6],[265,6,276,4],[266,6,278,4],[266,12,278,10,"transactionEvent"],[266,28,278,26],[266,31,278,29],[266,35,278,33],[266,36,278,34,"_convertSpanToTransaction"],[266,61,278,59],[266,62,278,60],[266,63,278,61],[267,6,279,4],[267,10,279,8,"transactionEvent"],[267,26,279,24],[267,28,279,26],[268,8,280,6],[268,14,280,12,"scope"],[268,19,280,17],[268,22,280,20],[268,26,280,20,"getCapturedScopesOnSpan"],[268,56,280,43],[268,58,280,44],[268,62,280,48],[268,63,280,49],[268,64,280,50,"scope"],[268,69,280,55],[268,73,280,59],[268,77,280,59,"getCurrentScope"],[268,107,280,74],[268,109,280,75],[268,110,280,76],[269,8,281,6,"scope"],[269,13,281,11],[269,14,281,12,"captureEvent"],[269,26,281,24],[269,27,281,25,"transactionEvent"],[269,43,281,41],[269,44,281,42],[270,6,282,4],[271,4,283,2],[273,4,285,2],[274,0,286,0],[275,0,287,0],[276,4,288,3,"_convertSpanToTransaction"],[276,29,288,28,"_convertSpanToTransaction"],[276,30,288,28],[276,32,288,31],[277,6,289,4],[278,6,290,4],[278,10,290,8],[278,11,290,9,"isFullFinishedSpan"],[278,29,290,27],[278,30,290,28],[278,34,290,28,"spanToJSON"],[278,55,290,38],[278,57,290,39],[278,61,290,43],[278,62,290,44],[278,63,290,45],[278,65,290,47],[279,8,291,6],[279,15,291,13,"undefined"],[279,24,291,22],[280,6,292,4],[281,6,294,4],[281,10,294,8],[281,11,294,9],[281,15,294,13],[281,16,294,14,"_name"],[281,21,294,19],[281,23,294,21],[282,8,295,6,"DEBUG_BUILD"],[282,31,295,17],[282,35,295,21,"logger"],[282,49,295,27],[282,50,295,28,"warn"],[282,54,295,32],[282,55,295,33],[282,124,295,102],[282,125,295,103],[283,8,296,6],[283,12,296,10],[283,13,296,11,"_name"],[283,18,296,16],[283,21,296,19],[283,46,296,44],[284,6,297,4],[285,6,299,4],[285,12,299,10],[286,8,299,12,"scope"],[286,13,299,17],[286,15,299,19,"capturedSpanScope"],[286,32,299,36],[287,8,299,38,"isolationScope"],[287,22,299,52],[287,24,299,54,"capturedSpanIsolationScope"],[288,6,299,81],[288,7,299,82],[288,10,299,85],[288,14,299,85,"getCapturedScopesOnSpan"],[288,44,299,108],[288,46,299,109],[288,50,299,113],[288,51,299,114],[289,6,300,4],[289,12,300,10,"scope"],[289,17,300,15],[289,20,300,18,"capturedSpanScope"],[289,37,300,35],[289,41,300,39],[289,45,300,39,"getCurrentScope"],[289,75,300,54],[289,77,300,55],[289,78,300,56],[290,6,301,4],[290,12,301,10,"client"],[290,18,301,16],[290,21,301,19,"scope"],[290,26,301,24],[290,27,301,25,"getClient"],[290,36,301,34],[290,37,301,35],[290,38,301,36],[290,42,301,40],[290,46,301,40,"getClient"],[290,70,301,49],[290,72,301,50],[290,73,301,51],[291,6,303,4],[291,10,303,8],[291,14,303,12],[291,15,303,13,"_sampled"],[291,23,303,21],[291,28,303,26],[291,32,303,30],[291,34,303,32],[292,8,304,6],[293,8,305,6,"DEBUG_BUILD"],[293,31,305,17],[293,35,305,21,"logger"],[293,49,305,27],[293,50,305,28,"log"],[293,53,305,31],[293,54,305,32],[293,136,305,114],[293,137,305,115],[294,8,307,6],[294,12,307,10,"client"],[294,18,307,16],[294,20,307,18],[295,10,308,8,"client"],[295,16,308,14],[295,17,308,15,"recordDroppedEvent"],[295,35,308,33],[295,36,308,34],[295,49,308,47],[295,51,308,49],[295,64,308,62],[295,65,308,63],[296,8,309,6],[297,8,311,6],[297,15,311,13,"undefined"],[297,24,311,22],[298,6,312,4],[300,6,314,4],[301,6,315,4],[301,12,315,10,"finishedSpans"],[301,25,315,23],[301,28,315,26],[301,32,315,26,"getSpanDescendants"],[301,61,315,44],[301,63,315,45],[301,67,315,49],[301,68,315,50],[301,69,315,51,"filter"],[301,75,315,57],[301,76,315,58,"span"],[301,80,315,62],[301,84,315,66,"span"],[301,88,315,70],[301,93,315,75],[301,97,315,79],[301,101,315,83],[301,102,315,84,"isStandaloneSpan"],[301,118,315,100],[301,119,315,101,"span"],[301,123,315,105],[301,124,315,106],[301,125,315,107],[302,6,317,4],[302,12,317,10,"spans"],[302,17,317,15],[302,20,317,18,"finishedSpans"],[302,33,317,31],[302,34,317,32,"map"],[302,37,317,35],[302,38,317,36,"span"],[302,42,317,40],[302,46,317,44],[302,50,317,44,"spanToJSON"],[302,71,317,54],[302,73,317,55,"span"],[302,77,317,59],[302,78,317,60],[302,79,317,61],[302,80,317,62,"filter"],[302,86,317,68],[302,87,317,69,"isFullFinishedSpan"],[302,105,317,87],[302,106,317,88],[303,6,319,4],[303,12,319,10,"source"],[303,18,319,16],[303,21,319,19],[303,25,319,23],[303,26,319,24,"_attributes"],[303,37,319,35],[303,38,319,36,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[303,90,319,68],[303,91,319,69],[305,6,321,4],[306,6,322,4],[307,6,323,4],[307,13,323,11],[307,17,323,15],[307,18,323,16,"_attributes"],[307,29,323,27],[307,30,323,28,"SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME"],[307,92,323,70],[307,93,323,71],[308,6,324,4,"spans"],[308,11,324,9],[308,12,324,10,"forEach"],[308,19,324,17],[308,20,324,18,"span"],[308,24,324,22],[308,28,324,26],[309,8,325,6,"span"],[309,12,325,10],[309,13,325,11,"data"],[309,17,325,15],[309,21,325,19],[309,28,325,26,"span"],[309,32,325,30],[309,33,325,31,"data"],[309,37,325,35],[309,38,325,36,"SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME"],[309,100,325,78],[309,101,325,79],[310,6,326,4],[310,7,326,5],[310,8,326,6],[311,6,327,4],[313,6,329,4],[313,12,329,10,"transaction"],[313,23,329,21],[313,26,329,24],[314,8,330,6,"contexts"],[314,16,330,14],[314,18,330,16],[315,10,331,8,"trace"],[315,15,331,13],[315,17,331,15],[315,21,331,15,"spanToTransactionTraceContext"],[315,61,331,44],[315,63,331,45],[315,67,331,49],[316,8,332,6],[316,9,332,7],[317,8,333,6,"spans"],[317,13,333,11],[318,8,334,8],[319,8,335,8],[320,8,336,8,"spans"],[320,13,336,13],[320,14,336,14,"length"],[320,20,336,20],[320,23,336,23,"MAX_SPAN_COUNT"],[320,37,336,37],[320,40,337,12,"spans"],[320,45,337,17],[320,46,337,18,"sort"],[320,50,337,22],[320,51,337,23],[320,52,337,24,"a"],[320,53,337,25],[320,55,337,27,"b"],[320,56,337,28],[320,61,337,33,"a"],[320,62,337,34],[320,63,337,35,"start_timestamp"],[320,78,337,50],[320,81,337,53,"b"],[320,82,337,54],[320,83,337,55,"start_timestamp"],[320,98,337,70],[320,99,337,71],[320,100,337,72,"slice"],[320,105,337,77],[320,106,337,78],[320,107,337,79],[320,109,337,81,"MAX_SPAN_COUNT"],[320,123,337,95],[320,124,337,96],[320,127,338,12,"spans"],[320,132,338,17],[321,8,339,6,"start_timestamp"],[321,23,339,21],[321,25,339,23],[321,29,339,27],[321,30,339,28,"_startTime"],[321,40,339,38],[322,8,340,6,"timestamp"],[322,17,340,15],[322,19,340,17],[322,23,340,21],[322,24,340,22,"_endTime"],[322,32,340,30],[323,8,341,6,"transaction"],[323,19,341,17],[323,21,341,19],[323,25,341,23],[323,26,341,24,"_name"],[323,31,341,29],[324,8,342,6,"type"],[324,12,342,10],[324,14,342,12],[324,27,342,25],[325,8,343,6,"sdkProcessingMetadata"],[325,29,343,27],[325,31,343,29],[326,10,344,8,"capturedSpanScope"],[326,27,344,25],[327,10,345,8,"capturedSpanIsolationScope"],[327,36,345,34],[328,10,346,8],[328,13,346,11],[328,17,346,11,"dropUndefinedKeys"],[328,42,346,28],[328,44,346,29],[329,12,347,10,"dynamicSamplingContext"],[329,34,347,32],[329,36,347,34],[329,40,347,34,"getDynamicSamplingContextFromSpan"],[329,97,347,67],[329,99,347,68],[329,103,347,72],[330,10,348,8],[330,11,348,9],[331,8,349,6],[331,9,349,7],[332,8,350,6,"_metrics_summary"],[332,24,350,22],[332,26,350,24],[332,30,350,24,"getMetricSummaryJsonForSpan"],[332,72,350,51],[332,74,350,52],[332,78,350,56],[332,79,350,57],[333,8,351,6],[333,12,351,10,"source"],[333,18,351,16],[333,22,351,20],[334,10,352,8,"transaction_info"],[334,26,352,24],[334,28,352,26],[335,12,353,10,"source"],[336,10,354,8],[337,8,355,6],[337,9,355,7],[338,6,356,4],[338,7,356,5],[339,6,358,4],[339,12,358,10,"measurements"],[339,24,358,22],[339,27,358,25],[339,31,358,25,"timedEventsToMeasurements"],[339,69,358,50],[339,71,358,51],[339,75,358,55],[339,76,358,56,"_events"],[339,83,358,63],[339,84,358,64],[340,6,359,4],[340,12,359,10,"hasMeasurements"],[340,27,359,25],[340,30,359,28,"measurements"],[340,42,359,40],[340,46,359,44,"Object"],[340,52,359,50],[340,53,359,51,"keys"],[340,57,359,55],[340,58,359,56,"measurements"],[340,70,359,68],[340,71,359,69],[340,72,359,70,"length"],[340,78,359,76],[341,6,361,4],[341,10,361,8,"hasMeasurements"],[341,25,361,23],[341,27,361,25],[342,8,362,6,"DEBUG_BUILD"],[342,31,362,17],[342,35,363,8,"logger"],[342,49,363,14],[342,50,363,15,"log"],[342,53,363,18],[342,54,364,10],[342,111,364,67],[342,113,365,10,"JSON"],[342,117,365,14],[342,118,365,15,"stringify"],[342,127,365,24],[342,128,365,25,"measurements"],[342,140,365,37],[342,142,365,39,"undefined"],[342,151,365,48],[342,153,365,50],[342,154,365,51],[342,155,366,8],[342,156,366,9],[343,8,367,6,"transaction"],[343,19,367,17],[343,20,367,18,"measurements"],[343,32,367,30],[343,35,367,33,"measurements"],[343,47,367,45],[344,6,368,4],[345,6,370,4],[345,13,370,11,"transaction"],[345,24,370,22],[346,4,371,2],[347,2,372,0],[348,2,372,1,"exports"],[348,9,372,1],[348,10,372,1,"SentrySpan"],[348,20,372,1],[348,23,372,1,"SentrySpan"],[348,33,372,1],[349,2,374,0],[349,11,374,9,"isSpanTimeInput"],[349,26,374,24,"isSpanTimeInput"],[349,27,374,25,"value"],[349,32,374,30],[349,34,374,32],[350,4,375,2],[350,11,375,10,"value"],[350,16,375,15],[350,20,375,19],[350,27,375,26,"value"],[350,32,375,31],[350,37,375,36],[350,45,375,44],[350,49,375,49,"value"],[350,54,375,54],[350,66,375,66,"Date"],[350,70,375,70],[350,74,375,74,"Array"],[350,79,375,79],[350,80,375,80,"isArray"],[350,87,375,87],[350,88,375,88,"value"],[350,93,375,93],[350,94,375,94],[351,2,376,0],[353,2,378,0],[354,2,379,0],[354,11,379,9,"isFullFinishedSpan"],[354,29,379,27,"isFullFinishedSpan"],[354,30,379,28,"input"],[354,35,379,33],[354,37,379,35],[355,4,380,2],[355,11,380,9],[355,12,380,10],[355,13,380,11,"input"],[355,18,380,16],[355,19,380,17,"start_timestamp"],[355,34,380,32],[355,38,380,36],[355,39,380,37],[355,40,380,38,"input"],[355,45,380,43],[355,46,380,44,"timestamp"],[355,55,380,53],[355,59,380,57],[355,60,380,58],[355,61,380,59,"input"],[355,66,380,64],[355,67,380,65,"span_id"],[355,74,380,72],[355,78,380,76],[355,79,380,77],[355,80,380,78,"input"],[355,85,380,83],[355,86,380,84,"trace_id"],[355,94,380,92],[356,2,381,0],[358,2,383,0],[359,2,384,0],[359,11,384,9,"isStandaloneSpan"],[359,27,384,25,"isStandaloneSpan"],[359,28,384,26,"span"],[359,32,384,30],[359,34,384,32],[360,4,385,2],[360,11,385,9,"span"],[360,15,385,13],[360,27,385,25,"SentrySpan"],[360,37,385,35],[360,41,385,39,"span"],[360,45,385,43],[360,46,385,44,"isStandaloneSpan"],[360,62,385,60],[360,63,385,61],[360,64,385,62],[361,2,386,0],[363,2,388,0],[364,0,389,0],[365,0,390,0],[366,0,391,0],[367,0,392,0],[368,0,393,0],[369,2,394,0],[369,11,394,9,"sendSpanEnvelope"],[369,27,394,25,"sendSpanEnvelope"],[369,28,394,26,"envelope"],[369,36,394,34],[369,38,394,36],[370,4,395,2],[370,10,395,8,"client"],[370,16,395,14],[370,19,395,17],[370,23,395,17,"getClient"],[370,47,395,26],[370,49,395,27],[370,50,395,28],[371,4,396,2],[371,8,396,6],[371,9,396,7,"client"],[371,15,396,13],[371,17,396,15],[372,6,397,4],[373,4,398,2],[374,4,400,2],[374,10,400,8,"spanItems"],[374,19,400,17],[374,22,400,20,"envelope"],[374,30,400,28],[374,31,400,29],[374,32,400,30],[374,33,400,31],[375,4,401,2],[375,8,401,6],[375,9,401,7,"spanItems"],[375,18,401,16],[375,22,401,20,"spanItems"],[375,31,401,29],[375,32,401,30,"length"],[375,38,401,36],[375,43,401,41],[375,44,401,42],[375,46,401,44],[376,6,402,4,"client"],[376,12,402,10],[376,13,402,11,"recordDroppedEvent"],[376,31,402,29],[376,32,402,30],[376,45,402,43],[376,47,402,45],[376,53,402,51],[376,54,402,52],[377,6,403,4],[378,4,404,2],[380,4,406,2],[381,4,407,2],[382,4,408,2,"client"],[382,10,408,8],[382,11,408,9,"sendEnvelope"],[382,23,408,21],[382,24,408,22,"envelope"],[382,32,408,30],[382,33,408,31],[383,2,409,0],[384,0,409,1],[384,3]],"functionMap":{"names":["<global>","SentrySpan","SentrySpan#constructor","SentrySpan#addLink","SentrySpan#addLinks","SentrySpan#recordException","SentrySpan#spanContext","SentrySpan#setAttribute","SentrySpan#setAttributes","Object.keys.forEach$argument_0","SentrySpan#updateStartTime","SentrySpan#setStatus","SentrySpan#updateName","SentrySpan#end","SentrySpan#getSpanJSON","SentrySpan#isRecording","SentrySpan#addEvent","SentrySpan#isStandaloneSpan","SentrySpan#_onSpanEnded","SentrySpan#_convertSpanToTransaction","getSpanDescendants.filter$argument_0","finishedSpans.map$argument_0","spans.forEach$argument_0","spans.sort$argument_0","isSpanTimeInput","isFullFinishedSpan","isStandaloneSpan","sendSpanEnvelope"],"mappings":"AAA;ACoB;GCmB;GDiC;GES;GFE;GGS;GHE;GIS;GJE;GKG;GLO;GMG;GNS;GOG;oCCC,8CD;GPE;GSU;GTE;GUK;GVG;GWK;GXI;GYG;GZU;GaU;GbmB;GcG;GdE;GeK;GfmB;GgBU;GhBE;GiBG;GjBkC;GkBK;0DC2B,gDD;oCEE,wBF;kBGO;KHE;uBIW,+CJ;GlBkC;CDC;AwBE;CxBE;AyBG;CzBE;A0BG;C1BE;A2BQ;C3Be"}},"type":"js/module"}]}