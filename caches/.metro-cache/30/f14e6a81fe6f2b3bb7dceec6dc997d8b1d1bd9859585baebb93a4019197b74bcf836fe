{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.AsyncExpiringMap = void 0;\n  /**\n   * A Map that automatically removes entries after their TTL has expired.\n   *\n   * The map is Promise-aware, meaning it will start TTL countdown only after the promise has resolved.\n   */\n  class AsyncExpiringMap {\n    constructor({\n      cleanupInterval = 5000,\n      ttl = 2000\n    } = {}) {\n      this._ttl = ttl;\n      this._map = new Map();\n      this._cleanupIntervalMs = cleanupInterval;\n      this.startCleanup();\n    }\n    /**\n     * Set a key-value pair.\n     */\n    set(key, promise) {\n      if (!this._cleanupInterval) {\n        this.startCleanup();\n      }\n      if (typeof promise !== 'object' || !('then' in promise)) {\n        this._map.set(key, {\n          value: promise,\n          expiresAt: Date.now() + this._ttl,\n          promise: null\n        });\n        return;\n      }\n      const entry = {\n        value: undefined,\n        expiresAt: null,\n        promise\n      };\n      this._map.set(key, entry);\n      promise.then(value => {\n        entry.value = value;\n        entry.expiresAt = Date.now() + this._ttl;\n        entry.promise = null;\n      }, () => {\n        entry.expiresAt = Date.now() + this._ttl;\n        entry.promise = null;\n      });\n    }\n    /**\n     * Pops a key-value pair.\n     */\n    pop(key) {\n      const entry = this.get(key);\n      this._map.delete(key);\n      return entry;\n    }\n    /**\n     * Get a value by key.\n     *\n     * If the values is expired it will be returned and removed from the map.\n     */\n    get(key) {\n      const entry = this._map.get(key);\n      if (!entry) {\n        return undefined;\n      }\n      if (entry.promise) {\n        return entry.promise;\n      }\n      if (entry.expiresAt && entry.expiresAt <= Date.now()) {\n        this._map.delete(key);\n      }\n      return entry.value;\n    }\n    /**\n     * Check if a key exists in the map.\n     *\n     * If the key is expired it's not present in the map.\n     */\n    has(key) {\n      const entry = this._map.get(key);\n      if (!entry) {\n        return false;\n      }\n      if (entry.promise) {\n        return true;\n      }\n      if (entry.expiresAt && entry.expiresAt <= Date.now()) {\n        this._map.delete(key);\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Get the remaining time to live of a key.\n     */\n    ttl(key) {\n      const entry = this._map.get(key);\n      if (entry && entry.expiresAt) {\n        const remainingTime = entry.expiresAt - Date.now();\n        return remainingTime > 0 ? remainingTime : 0;\n      }\n      return undefined;\n    }\n    /**\n     * Remove expired entries.\n     */\n    cleanup() {\n      const now = Date.now();\n      for (const [key, entry] of this._map.entries()) {\n        if (entry.expiresAt && entry.expiresAt <= now) {\n          this._map.delete(key);\n        }\n      }\n      const size = this._map.size;\n      if (!size) {\n        this.stopCleanup();\n      }\n    }\n    /**\n     * Clear all entries.\n     */\n    clear() {\n      clearInterval(this._cleanupInterval);\n      this._map.clear();\n    }\n    /**\n     * Stop the cleanup interval.\n     */\n    stopCleanup() {\n      clearInterval(this._cleanupInterval);\n    }\n    /**\n     * Start the cleanup interval.\n     */\n    startCleanup() {\n      this._cleanupInterval = setInterval(() => this.cleanup(), this._cleanupIntervalMs);\n    }\n  }\n  exports.AsyncExpiringMap = AsyncExpiringMap;\n});","lineCount":143,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,2,6,7],[11,8,6,13,"AsyncExpiringMap"],[11,24,6,29],[11,25,6,30],[12,4,7,4,"constructor"],[12,15,7,15,"constructor"],[12,16,7,16],[13,6,7,18,"cleanupInterval"],[13,21,7,33],[13,24,7,36],[13,28,7,40],[14,6,7,42,"ttl"],[14,9,7,45],[14,12,7,48],[15,4,7,54],[15,5,7,55],[15,8,7,58],[15,9,7,59],[15,10,7,60],[15,12,7,62],[16,6,8,8],[16,10,8,12],[16,11,8,13,"_ttl"],[16,15,8,17],[16,18,8,20,"ttl"],[16,21,8,23],[17,6,9,8],[17,10,9,12],[17,11,9,13,"_map"],[17,15,9,17],[17,18,9,20],[17,22,9,24,"Map"],[17,25,9,27],[17,26,9,28],[17,27,9,29],[18,6,10,8],[18,10,10,12],[18,11,10,13,"_cleanupIntervalMs"],[18,29,10,31],[18,32,10,34,"cleanupInterval"],[18,47,10,49],[19,6,11,8],[19,10,11,12],[19,11,11,13,"startCleanup"],[19,23,11,25],[19,24,11,26],[19,25,11,27],[20,4,12,4],[21,4,13,4],[22,0,14,0],[23,0,15,0],[24,4,16,4,"set"],[24,7,16,7,"set"],[24,8,16,8,"key"],[24,11,16,11],[24,13,16,13,"promise"],[24,20,16,20],[24,22,16,22],[25,6,17,8],[25,10,17,12],[25,11,17,13],[25,15,17,17],[25,16,17,18,"_cleanupInterval"],[25,32,17,34],[25,34,17,36],[26,8,18,12],[26,12,18,16],[26,13,18,17,"startCleanup"],[26,25,18,29],[26,26,18,30],[26,27,18,31],[27,6,19,8],[28,6,20,8],[28,10,20,12],[28,17,20,19,"promise"],[28,24,20,26],[28,29,20,31],[28,37,20,39],[28,41,20,43],[28,43,20,45],[28,49,20,51],[28,53,20,55,"promise"],[28,60,20,62],[28,61,20,63],[28,63,20,65],[29,8,21,12],[29,12,21,16],[29,13,21,17,"_map"],[29,17,21,21],[29,18,21,22,"set"],[29,21,21,25],[29,22,21,26,"key"],[29,25,21,29],[29,27,21,31],[30,10,21,33,"value"],[30,15,21,38],[30,17,21,40,"promise"],[30,24,21,47],[31,10,21,49,"expiresAt"],[31,19,21,58],[31,21,21,60,"Date"],[31,25,21,64],[31,26,21,65,"now"],[31,29,21,68],[31,30,21,69],[31,31,21,70],[31,34,21,73],[31,38,21,77],[31,39,21,78,"_ttl"],[31,43,21,82],[32,10,21,84,"promise"],[32,17,21,91],[32,19,21,93],[33,8,21,98],[33,9,21,99],[33,10,21,100],[34,8,22,12],[35,6,23,8],[36,6,24,8],[36,12,24,14,"entry"],[36,17,24,19],[36,20,24,22],[37,8,25,12,"value"],[37,13,25,17],[37,15,25,19,"undefined"],[37,24,25,28],[38,8,26,12,"expiresAt"],[38,17,26,21],[38,19,26,23],[38,23,26,27],[39,8,27,12,"promise"],[40,6,28,8],[40,7,28,9],[41,6,29,8],[41,10,29,12],[41,11,29,13,"_map"],[41,15,29,17],[41,16,29,18,"set"],[41,19,29,21],[41,20,29,22,"key"],[41,23,29,25],[41,25,29,27,"entry"],[41,30,29,32],[41,31,29,33],[42,6,30,8,"promise"],[42,13,30,15],[42,14,30,16,"then"],[42,18,30,20],[42,19,30,21,"value"],[42,24,30,26],[42,28,30,30],[43,8,31,12,"entry"],[43,13,31,17],[43,14,31,18,"value"],[43,19,31,23],[43,22,31,26,"value"],[43,27,31,31],[44,8,32,12,"entry"],[44,13,32,17],[44,14,32,18,"expiresAt"],[44,23,32,27],[44,26,32,30,"Date"],[44,30,32,34],[44,31,32,35,"now"],[44,34,32,38],[44,35,32,39],[44,36,32,40],[44,39,32,43],[44,43,32,47],[44,44,32,48,"_ttl"],[44,48,32,52],[45,8,33,12,"entry"],[45,13,33,17],[45,14,33,18,"promise"],[45,21,33,25],[45,24,33,28],[45,28,33,32],[46,6,34,8],[46,7,34,9],[46,9,34,11],[46,15,34,17],[47,8,35,12,"entry"],[47,13,35,17],[47,14,35,18,"expiresAt"],[47,23,35,27],[47,26,35,30,"Date"],[47,30,35,34],[47,31,35,35,"now"],[47,34,35,38],[47,35,35,39],[47,36,35,40],[47,39,35,43],[47,43,35,47],[47,44,35,48,"_ttl"],[47,48,35,52],[48,8,36,12,"entry"],[48,13,36,17],[48,14,36,18,"promise"],[48,21,36,25],[48,24,36,28],[48,28,36,32],[49,6,37,8],[49,7,37,9],[49,8,37,10],[50,4,38,4],[51,4,39,4],[52,0,40,0],[53,0,41,0],[54,4,42,4,"pop"],[54,7,42,7,"pop"],[54,8,42,8,"key"],[54,11,42,11],[54,13,42,13],[55,6,43,8],[55,12,43,14,"entry"],[55,17,43,19],[55,20,43,22],[55,24,43,26],[55,25,43,27,"get"],[55,28,43,30],[55,29,43,31,"key"],[55,32,43,34],[55,33,43,35],[56,6,44,8],[56,10,44,12],[56,11,44,13,"_map"],[56,15,44,17],[56,16,44,18,"delete"],[56,22,44,24],[56,23,44,25,"key"],[56,26,44,28],[56,27,44,29],[57,6,45,8],[57,13,45,15,"entry"],[57,18,45,20],[58,4,46,4],[59,4,47,4],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,4,52,4,"get"],[64,7,52,7,"get"],[64,8,52,8,"key"],[64,11,52,11],[64,13,52,13],[65,6,53,8],[65,12,53,14,"entry"],[65,17,53,19],[65,20,53,22],[65,24,53,26],[65,25,53,27,"_map"],[65,29,53,31],[65,30,53,32,"get"],[65,33,53,35],[65,34,53,36,"key"],[65,37,53,39],[65,38,53,40],[66,6,54,8],[66,10,54,12],[66,11,54,13,"entry"],[66,16,54,18],[66,18,54,20],[67,8,55,12],[67,15,55,19,"undefined"],[67,24,55,28],[68,6,56,8],[69,6,57,8],[69,10,57,12,"entry"],[69,15,57,17],[69,16,57,18,"promise"],[69,23,57,25],[69,25,57,27],[70,8,58,12],[70,15,58,19,"entry"],[70,20,58,24],[70,21,58,25,"promise"],[70,28,58,32],[71,6,59,8],[72,6,60,8],[72,10,60,12,"entry"],[72,15,60,17],[72,16,60,18,"expiresAt"],[72,25,60,27],[72,29,60,31,"entry"],[72,34,60,36],[72,35,60,37,"expiresAt"],[72,44,60,46],[72,48,60,50,"Date"],[72,52,60,54],[72,53,60,55,"now"],[72,56,60,58],[72,57,60,59],[72,58,60,60],[72,60,60,62],[73,8,61,12],[73,12,61,16],[73,13,61,17,"_map"],[73,17,61,21],[73,18,61,22,"delete"],[73,24,61,28],[73,25,61,29,"key"],[73,28,61,32],[73,29,61,33],[74,6,62,8],[75,6,63,8],[75,13,63,15,"entry"],[75,18,63,20],[75,19,63,21,"value"],[75,24,63,26],[76,4,64,4],[77,4,65,4],[78,0,66,0],[79,0,67,0],[80,0,68,0],[81,0,69,0],[82,4,70,4,"has"],[82,7,70,7,"has"],[82,8,70,8,"key"],[82,11,70,11],[82,13,70,13],[83,6,71,8],[83,12,71,14,"entry"],[83,17,71,19],[83,20,71,22],[83,24,71,26],[83,25,71,27,"_map"],[83,29,71,31],[83,30,71,32,"get"],[83,33,71,35],[83,34,71,36,"key"],[83,37,71,39],[83,38,71,40],[84,6,72,8],[84,10,72,12],[84,11,72,13,"entry"],[84,16,72,18],[84,18,72,20],[85,8,73,12],[85,15,73,19],[85,20,73,24],[86,6,74,8],[87,6,75,8],[87,10,75,12,"entry"],[87,15,75,17],[87,16,75,18,"promise"],[87,23,75,25],[87,25,75,27],[88,8,76,12],[88,15,76,19],[88,19,76,23],[89,6,77,8],[90,6,78,8],[90,10,78,12,"entry"],[90,15,78,17],[90,16,78,18,"expiresAt"],[90,25,78,27],[90,29,78,31,"entry"],[90,34,78,36],[90,35,78,37,"expiresAt"],[90,44,78,46],[90,48,78,50,"Date"],[90,52,78,54],[90,53,78,55,"now"],[90,56,78,58],[90,57,78,59],[90,58,78,60],[90,60,78,62],[91,8,79,12],[91,12,79,16],[91,13,79,17,"_map"],[91,17,79,21],[91,18,79,22,"delete"],[91,24,79,28],[91,25,79,29,"key"],[91,28,79,32],[91,29,79,33],[92,8,80,12],[92,15,80,19],[92,20,80,24],[93,6,81,8],[94,6,82,8],[94,13,82,15],[94,17,82,19],[95,4,83,4],[96,4,84,4],[97,0,85,0],[98,0,86,0],[99,4,87,4,"ttl"],[99,7,87,7,"ttl"],[99,8,87,8,"key"],[99,11,87,11],[99,13,87,13],[100,6,88,8],[100,12,88,14,"entry"],[100,17,88,19],[100,20,88,22],[100,24,88,26],[100,25,88,27,"_map"],[100,29,88,31],[100,30,88,32,"get"],[100,33,88,35],[100,34,88,36,"key"],[100,37,88,39],[100,38,88,40],[101,6,89,8],[101,10,89,12,"entry"],[101,15,89,17],[101,19,89,21,"entry"],[101,24,89,26],[101,25,89,27,"expiresAt"],[101,34,89,36],[101,36,89,38],[102,8,90,12],[102,14,90,18,"remainingTime"],[102,27,90,31],[102,30,90,34,"entry"],[102,35,90,39],[102,36,90,40,"expiresAt"],[102,45,90,49],[102,48,90,52,"Date"],[102,52,90,56],[102,53,90,57,"now"],[102,56,90,60],[102,57,90,61],[102,58,90,62],[103,8,91,12],[103,15,91,19,"remainingTime"],[103,28,91,32],[103,31,91,35],[103,32,91,36],[103,35,91,39,"remainingTime"],[103,48,91,52],[103,51,91,55],[103,52,91,56],[104,6,92,8],[105,6,93,8],[105,13,93,15,"undefined"],[105,22,93,24],[106,4,94,4],[107,4,95,4],[108,0,96,0],[109,0,97,0],[110,4,98,4,"cleanup"],[110,11,98,11,"cleanup"],[110,12,98,11],[110,14,98,14],[111,6,99,8],[111,12,99,14,"now"],[111,15,99,17],[111,18,99,20,"Date"],[111,22,99,24],[111,23,99,25,"now"],[111,26,99,28],[111,27,99,29],[111,28,99,30],[112,6,100,8],[112,11,100,13],[112,17,100,19],[112,18,100,20,"key"],[112,21,100,23],[112,23,100,25,"entry"],[112,28,100,30],[112,29,100,31],[112,33,100,35],[112,37,100,39],[112,38,100,40,"_map"],[112,42,100,44],[112,43,100,45,"entries"],[112,50,100,52],[112,51,100,53],[112,52,100,54],[112,54,100,56],[113,8,101,12],[113,12,101,16,"entry"],[113,17,101,21],[113,18,101,22,"expiresAt"],[113,27,101,31],[113,31,101,35,"entry"],[113,36,101,40],[113,37,101,41,"expiresAt"],[113,46,101,50],[113,50,101,54,"now"],[113,53,101,57],[113,55,101,59],[114,10,102,16],[114,14,102,20],[114,15,102,21,"_map"],[114,19,102,25],[114,20,102,26,"delete"],[114,26,102,32],[114,27,102,33,"key"],[114,30,102,36],[114,31,102,37],[115,8,103,12],[116,6,104,8],[117,6,105,8],[117,12,105,14,"size"],[117,16,105,18],[117,19,105,21],[117,23,105,25],[117,24,105,26,"_map"],[117,28,105,30],[117,29,105,31,"size"],[117,33,105,35],[118,6,106,8],[118,10,106,12],[118,11,106,13,"size"],[118,15,106,17],[118,17,106,19],[119,8,107,12],[119,12,107,16],[119,13,107,17,"stopCleanup"],[119,24,107,28],[119,25,107,29],[119,26,107,30],[120,6,108,8],[121,4,109,4],[122,4,110,4],[123,0,111,0],[124,0,112,0],[125,4,113,4,"clear"],[125,9,113,9,"clear"],[125,10,113,9],[125,12,113,12],[126,6,114,8,"clearInterval"],[126,19,114,21],[126,20,114,22],[126,24,114,26],[126,25,114,27,"_cleanupInterval"],[126,41,114,43],[126,42,114,44],[127,6,115,8],[127,10,115,12],[127,11,115,13,"_map"],[127,15,115,17],[127,16,115,18,"clear"],[127,21,115,23],[127,22,115,24],[127,23,115,25],[128,4,116,4],[129,4,117,4],[130,0,118,0],[131,0,119,0],[132,4,120,4,"stopCleanup"],[132,15,120,15,"stopCleanup"],[132,16,120,15],[132,18,120,18],[133,6,121,8,"clearInterval"],[133,19,121,21],[133,20,121,22],[133,24,121,26],[133,25,121,27,"_cleanupInterval"],[133,41,121,43],[133,42,121,44],[134,4,122,4],[135,4,123,4],[136,0,124,0],[137,0,125,0],[138,4,126,4,"startCleanup"],[138,16,126,16,"startCleanup"],[138,17,126,16],[138,19,126,19],[139,6,127,8],[139,10,127,12],[139,11,127,13,"_cleanupInterval"],[139,27,127,29],[139,30,127,32,"setInterval"],[139,41,127,43],[139,42,127,44],[139,48,127,50],[139,52,127,54],[139,53,127,55,"cleanup"],[139,60,127,62],[139,61,127,63],[139,62,127,64],[139,64,127,66],[139,68,127,70],[139,69,127,71,"_cleanupIntervalMs"],[139,87,127,89],[139,88,127,90],[140,4,128,4],[141,2,129,0],[142,2,129,1,"exports"],[142,9,129,1],[142,10,129,1,"AsyncExpiringMap"],[142,26,129,1],[142,29,129,1,"AsyncExpiringMap"],[142,45,129,1],[143,0,129,1],[143,3]],"functionMap":{"names":["<global>","AsyncExpiringMap","constructor","set","promise.then$argument_0","promise.then$argument_1","pop","get","has","ttl","cleanup","clear","stopCleanup","startCleanup","setInterval$argument_0"],"mappings":"AAA;OCK;ICC;KDK;IEI;qBCc;SDI,EE;SFG;KFC;IKI;KLI;IMM;KNY;IOM;KPa;IQI;KRO;ISI;KTW;IUI;KVG;IWI;KXE;IYI;4CCC,oBD;KZC;CDC"}},"type":"js/module"}]}