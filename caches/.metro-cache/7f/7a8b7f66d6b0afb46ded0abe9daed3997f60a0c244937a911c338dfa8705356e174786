{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getClientIPAddress = getClientIPAddress;\n  exports.ipHeaderNames = void 0;\n  // Vendored / modified from @sergiodxa/remix-utils\n\n  // https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n  // MIT License\n\n  // Copyright (c) 2021 Sergio Xalambr√≠\n\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the \"Software\"), to deal\n  // in the Software without restriction, including without limitation the rights\n  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  // copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n\n  // The above copyright notice and this permission notice shall be included in all\n  // copies or substantial portions of the Software.\n\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  // SOFTWARE.\n\n  // The headers to check, in priority order\n  const ipHeaderNames = exports.ipHeaderNames = ['X-Client-IP', 'X-Forwarded-For', 'Fly-Client-IP', 'CF-Connecting-IP', 'Fastly-Client-Ip', 'True-Client-Ip', 'X-Real-IP', 'X-Cluster-Client-IP', 'X-Forwarded', 'Forwarded-For', 'Forwarded', 'X-Vercel-Forwarded-For'];\n\n  /**\n   * Get the IP address of the client sending a request.\n   *\n   * It receives a Request headers object and use it to get the\n   * IP address from one of the following headers in order.\n   *\n   * If the IP address is valid, it will be returned. Otherwise, null will be\n   * returned.\n   *\n   * If the header values contains more than one IP address, the first valid one\n   * will be returned.\n   */\n  function getClientIPAddress(headers) {\n    // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n    // can take\n    const headerValues = ipHeaderNames.map(headerName => {\n      const rawValue = headers[headerName];\n      const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n      if (headerName === 'Forwarded') {\n        return parseForwardedHeader(value);\n      }\n      return value && value.split(',').map(v => v.trim());\n    });\n\n    // Flatten the array and filter out any falsy entries\n    const flattenedHeaderValues = headerValues.reduce((acc, val) => {\n      if (!val) {\n        return acc;\n      }\n      return acc.concat(val);\n    }, []);\n\n    // Find the first value which is a valid IP address, if any\n    const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n    return ipAddress || null;\n  }\n  function parseForwardedHeader(value) {\n    if (!value) {\n      return null;\n    }\n    for (const part of value.split(';')) {\n      if (part.startsWith('for=')) {\n        return part.slice(4);\n      }\n    }\n    return null;\n  }\n\n  //\n  /**\n   * Custom method instead of importing this from `net` package, as this only exists in node\n   * Accepts:\n   * 127.0.0.1\n   * 192.168.1.1\n   * 192.168.1.255\n   * 255.255.255.255\n   * 10.1.1.1\n   * 0.0.0.0\n   * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n   *\n   * Rejects:\n   * 1.1.1.01\n   * 30.168.1.255.1\n   * 127.1\n   * 192.168.1.256\n   * -1.2.3.4\n   * 1.1.1.1.\n   * 3...3\n   * 192.168.1.099\n   */\n  function isIP(str) {\n    const regex = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n    return regex.test(str);\n  }\n});","lineCount":109,"map":[[7,2,1,0],[9,2,3,0],[10,2,4,0],[12,2,6,0],[14,2,8,0],[15,2,9,0],[16,2,10,0],[17,2,11,0],[18,2,12,0],[19,2,13,0],[21,2,15,0],[22,2,16,0],[24,2,18,0],[25,2,19,0],[26,2,20,0],[27,2,21,0],[28,2,22,0],[29,2,23,0],[30,2,24,0],[32,2,26,0],[33,2,27,0],[33,8,27,6,"ipHeaderNames"],[33,21,27,19],[33,24,27,19,"exports"],[33,31,27,19],[33,32,27,19,"ipHeaderNames"],[33,45,27,19],[33,48,27,22],[33,49,28,2],[33,62,28,15],[33,64,29,2],[33,81,29,19],[33,83,30,2],[33,98,30,17],[33,100,31,2],[33,118,31,20],[33,120,32,2],[33,138,32,20],[33,140,33,2],[33,156,33,18],[33,158,34,2],[33,169,34,13],[33,171,35,2],[33,192,35,23],[33,194,36,2],[33,207,36,15],[33,209,37,2],[33,224,37,17],[33,226,38,2],[33,237,38,13],[33,239,39,2],[33,263,39,26],[33,264,40,1],[35,2,42,0],[36,0,43,0],[37,0,44,0],[38,0,45,0],[39,0,46,0],[40,0,47,0],[41,0,48,0],[42,0,49,0],[43,0,50,0],[44,0,51,0],[45,0,52,0],[46,0,53,0],[47,2,54,0],[47,11,54,9,"getClientIPAddress"],[47,29,54,27,"getClientIPAddress"],[47,30,54,28,"headers"],[47,37,54,35],[47,39,54,37],[48,4,55,2],[49,4,56,2],[50,4,57,2],[50,10,57,8,"headerValues"],[50,22,57,20],[50,25,57,23,"ipHeaderNames"],[50,38,57,36],[50,39,57,37,"map"],[50,42,57,40],[50,43,57,42,"headerName"],[50,53,57,52],[50,57,57,57],[51,6,58,4],[51,12,58,10,"rawValue"],[51,20,58,18],[51,23,58,21,"headers"],[51,30,58,28],[51,31,58,29,"headerName"],[51,41,58,39],[51,42,58,40],[52,6,59,4],[52,12,59,10,"value"],[52,17,59,15],[52,20,59,18,"Array"],[52,25,59,23],[52,26,59,24,"isArray"],[52,33,59,31],[52,34,59,32,"rawValue"],[52,42,59,40],[52,43,59,41],[52,46,59,44,"rawValue"],[52,54,59,52],[52,55,59,53,"join"],[52,59,59,57],[52,60,59,58],[52,63,59,61],[52,64,59,62],[52,67,59,65,"rawValue"],[52,75,59,73],[53,6,61,4],[53,10,61,8,"headerName"],[53,20,61,18],[53,25,61,23],[53,36,61,34],[53,38,61,36],[54,8,62,6],[54,15,62,13,"parseForwardedHeader"],[54,35,62,33],[54,36,62,34,"value"],[54,41,62,39],[54,42,62,40],[55,6,63,4],[56,6,65,4],[56,13,65,11,"value"],[56,18,65,16],[56,22,65,20,"value"],[56,27,65,25],[56,28,65,26,"split"],[56,33,65,31],[56,34,65,32],[56,37,65,35],[56,38,65,36],[56,39,65,37,"map"],[56,42,65,40],[56,43,65,42,"v"],[56,44,65,43],[56,48,65,48,"v"],[56,49,65,49],[56,50,65,50,"trim"],[56,54,65,54],[56,55,65,55],[56,56,65,56],[56,57,65,57],[57,4,66,2],[57,5,66,3],[57,6,66,4],[59,4,68,2],[60,4,69,2],[60,10,69,8,"flattenedHeaderValues"],[60,31,69,29],[60,34,69,32,"headerValues"],[60,46,69,44],[60,47,69,45,"reduce"],[60,53,69,51],[60,54,69,52],[60,55,69,53,"acc"],[60,58,69,56],[60,60,69,58,"val"],[60,63,69,61],[60,68,69,66],[61,6,70,4],[61,10,70,8],[61,11,70,9,"val"],[61,14,70,12],[61,16,70,14],[62,8,71,6],[62,15,71,13,"acc"],[62,18,71,16],[63,6,72,4],[64,6,74,4],[64,13,74,11,"acc"],[64,16,74,14],[64,17,74,15,"concat"],[64,23,74,21],[64,24,74,22,"val"],[64,27,74,25],[64,28,74,26],[65,4,75,2],[65,5,75,3],[65,7,75,5],[65,9,75,7],[65,10,75,8],[67,4,77,2],[68,4,78,2],[68,10,78,8,"ipAddress"],[68,19,78,17],[68,22,78,20,"flattenedHeaderValues"],[68,43,78,41],[68,44,78,42,"find"],[68,48,78,46],[68,49,78,47,"ip"],[68,51,78,49],[68,55,78,53,"ip"],[68,57,78,55],[68,62,78,60],[68,66,78,64],[68,70,78,68,"isIP"],[68,74,78,72],[68,75,78,73,"ip"],[68,77,78,75],[68,78,78,76],[68,79,78,77],[69,4,80,2],[69,11,80,9,"ipAddress"],[69,20,80,18],[69,24,80,22],[69,28,80,26],[70,2,81,0],[71,2,83,0],[71,11,83,9,"parseForwardedHeader"],[71,31,83,29,"parseForwardedHeader"],[71,32,83,30,"value"],[71,37,83,35],[71,39,83,37],[72,4,84,2],[72,8,84,6],[72,9,84,7,"value"],[72,14,84,12],[72,16,84,14],[73,6,85,4],[73,13,85,11],[73,17,85,15],[74,4,86,2],[75,4,88,2],[75,9,88,7],[75,15,88,13,"part"],[75,19,88,17],[75,23,88,21,"value"],[75,28,88,26],[75,29,88,27,"split"],[75,34,88,32],[75,35,88,33],[75,38,88,36],[75,39,88,37],[75,41,88,39],[76,6,89,4],[76,10,89,8,"part"],[76,14,89,12],[76,15,89,13,"startsWith"],[76,25,89,23],[76,26,89,24],[76,32,89,30],[76,33,89,31],[76,35,89,33],[77,8,90,6],[77,15,90,13,"part"],[77,19,90,17],[77,20,90,18,"slice"],[77,25,90,23],[77,26,90,24],[77,27,90,25],[77,28,90,26],[78,6,91,4],[79,4,92,2],[80,4,94,2],[80,11,94,9],[80,15,94,13],[81,2,95,0],[83,2,97,0],[84,2,98,0],[85,0,99,0],[86,0,100,0],[87,0,101,0],[88,0,102,0],[89,0,103,0],[90,0,104,0],[91,0,105,0],[92,0,106,0],[93,0,107,0],[94,0,108,0],[95,0,109,0],[96,0,110,0],[97,0,111,0],[98,0,112,0],[99,0,113,0],[100,0,114,0],[101,0,115,0],[102,0,116,0],[103,0,117,0],[104,0,118,0],[105,2,119,0],[105,11,119,9,"isIP"],[105,15,119,13,"isIP"],[105,16,119,14,"str"],[105,19,119,17],[105,21,119,19],[106,4,120,2],[106,10,120,8,"regex"],[106,15,120,13],[106,18,121,4],[106,1269,121,1255],[107,4,122,2],[107,11,122,9,"regex"],[107,16,122,14],[107,17,122,15,"test"],[107,21,122,19],[107,22,122,20,"str"],[107,25,122,23],[107,26,122,24],[108,2,123,0],[109,0,123,1],[109,3]],"functionMap":{"names":["<global>","getClientIPAddress","ipHeaderNames.map$argument_0","value.split.map$argument_0","headerValues.reduce$argument_0","flattenedHeaderValues.find$argument_0","parseForwardedHeader","isIP"],"mappings":"AAA;ACqD;yCCG;yCCQ,eD;GDC;oDGG;GHM;+CIG,6BJ;CDG;AME;CNY;AOwB;CPI"}},"type":"js/module"}]}