{"dependencies":[{"name":"./api.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"Re30OdQlV9R02P4yj+6oQhoLGws=","exportNames":["*"]}},{"name":"./currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":66},"end":{"line":2,"column":98,"index":164}}],"key":"K7iI+PRtR1yDAq2Cd5P/ht8ORfQ=","exportNames":["*"]}},{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":165},"end":{"line":3,"column":47,"index":212}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}},{"name":"./envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":213},"end":{"line":4,"column":75,"index":288}}],"key":"0U0ajOOVGGoJhSEMGqMaN0tiYVA=","exportNames":["*"]}},{"name":"./integration.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":289},"end":{"line":5,"column":95,"index":384}}],"key":"u+XVZqEVRxCtrJjpeHJ41sHOFeM=","exportNames":["*"]}},{"name":"./session.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":385},"end":{"line":6,"column":45,"index":430}}],"key":"XxHRjRg/KGl5WP5S0nFEZ7EbLjw=","exportNames":["*"]}},{"name":"./tracing/dynamicSamplingContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":431},"end":{"line":7,"column":89,"index":520}}],"key":"a9UVkG/TCcdnJj9beLH2iUxGaco=","exportNames":["*"]}},{"name":"./utils-hoist/clientreport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":521},"end":{"line":8,"column":75,"index":596}}],"key":"noeZEKDsG9psX3fHtBkkZ8aiKiM=","exportNames":["*"]}},{"name":"./utils-hoist/dsn.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":597},"end":{"line":9,"column":60,"index":657}}],"key":"0dkDQ3JT6WMpnFh2RpIJM2X12ZQ=","exportNames":["*"]}},{"name":"./utils-hoist/envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":658},"end":{"line":10,"column":92,"index":750}}],"key":"5Y0d4gJfoiIW4PKXtbONmEGlgVA=","exportNames":["*"]}},{"name":"./utils-hoist/error.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":751},"end":{"line":11,"column":53,"index":804}}],"key":"FdAB4xJUXa/ohIZufe8gn8VaAe0=","exportNames":["*"]}},{"name":"./utils-hoist/is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":805},"end":{"line":12,"column":100,"index":905}}],"key":"yjiG2n7bd9NbF7ogEaNNARkwswM=","exportNames":["*"]}},{"name":"./utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":906},"end":{"line":13,"column":65,"index":971}}],"key":"stoPaR3Pn8Ep3TScuCh6EHiT7Fo=","exportNames":["*"]}},{"name":"./utils-hoist/misc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":972},"end":{"line":14,"column":71,"index":1043}}],"key":"4J8iL1cu5xJLfk84TOyyT/H2FWI=","exportNames":["*"]}},{"name":"./utils-hoist/syncpromise.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":1044},"end":{"line":15,"column":101,"index":1145}}],"key":"gwGYC9zGsq15kFPabL3tTNAvIUc=","exportNames":["*"]}},{"name":"./utils/parseSampleRate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":1146},"end":{"line":16,"column":61,"index":1207}}],"key":"5Mt9h8mKiHrLfBErDer70jrnnSM=","exportNames":["*"]}},{"name":"./utils/prepareEvent.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":1208},"end":{"line":17,"column":55,"index":1263}}],"key":"cn2ITLSdj8XGsdwE3lNEuOC8y9U=","exportNames":["*"]}},{"name":"./utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":1264},"end":{"line":18,"column":59,"index":1323}}],"key":"xliqJNKUR7kbMbGBAOHednh2o/4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BaseClient = void 0;\n  var _api = require(_dependencyMap[0], \"./api.js\");\n  var _currentScopes = require(_dependencyMap[1], \"./currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[2], \"./debug-build.js\");\n  var _envelope = require(_dependencyMap[3], \"./envelope.js\");\n  var _integration = require(_dependencyMap[4], \"./integration.js\");\n  var _session = require(_dependencyMap[5], \"./session.js\");\n  var _dynamicSamplingContext = require(_dependencyMap[6], \"./tracing/dynamicSamplingContext.js\");\n  var _clientreport = require(_dependencyMap[7], \"./utils-hoist/clientreport.js\");\n  var _dsn = require(_dependencyMap[8], \"./utils-hoist/dsn.js\");\n  var _envelope2 = require(_dependencyMap[9], \"./utils-hoist/envelope.js\");\n  var _error = require(_dependencyMap[10], \"./utils-hoist/error.js\");\n  var _is = require(_dependencyMap[11], \"./utils-hoist/is.js\");\n  var _logger = require(_dependencyMap[12], \"./utils-hoist/logger.js\");\n  var _misc = require(_dependencyMap[13], \"./utils-hoist/misc.js\");\n  var _syncpromise = require(_dependencyMap[14], \"./utils-hoist/syncpromise.js\");\n  var _parseSampleRate = require(_dependencyMap[15], \"./utils/parseSampleRate.js\");\n  var _prepareEvent = require(_dependencyMap[16], \"./utils/prepareEvent.js\");\n  var _spanUtils = require(_dependencyMap[17], \"./utils/spanUtils.js\");\n  const ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n  /**\n   * Base implementation for all JavaScript SDK clients.\n   *\n   * Call the constructor with the corresponding options\n   * specific to the client subclass. To access these options later, use\n   * {@link Client.getOptions}.\n   *\n   * If a Dsn is specified in the options, it will be parsed and stored. Use\n   * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n   * invalid, the constructor will throw a {@link SentryException}. Note that\n   * without a valid Dsn, the SDK will not send any events to Sentry.\n   *\n   * Before sending an event, it is passed through\n   * {@link BaseClient._prepareEvent} to add SDK information and scope data\n   * (breadcrumbs and context). To add more custom information, override this\n   * method and extend the resulting prepared event.\n   *\n   * To issue automatically created events (e.g. via instrumentation), use\n   * {@link Client.captureEvent}. It will prepare the event and pass it through\n   * the callback lifecycle. To issue auto-breadcrumbs, use\n   * {@link Client.addBreadcrumb}.\n   *\n   * @example\n   * class NodeClient extends BaseClient<NodeOptions> {\n   *   public constructor(options: NodeOptions) {\n   *     super(options);\n   *   }\n   *\n   *   // ...\n   * }\n   */\n  class BaseClient {\n    /** Options passed to the SDK. */\n\n    /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n    /** Array of set up integrations. */\n\n    /** Number of calls being processed */\n\n    /** Holds flushable  */\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n\n    /**\n     * Initializes this client instance.\n     *\n     * @param options Options for the client.\n     */\n    constructor(options) {\n      this._options = options;\n      this._integrations = {};\n      this._numProcessing = 0;\n      this._outcomes = {};\n      this._hooks = {};\n      this._eventProcessors = [];\n      if (options.dsn) {\n        this._dsn = (0, _dsn.makeDsn)(options.dsn);\n      } else {\n        _debugBuild.DEBUG_BUILD && _logger.logger.warn('No DSN provided, client will not send events.');\n      }\n      if (this._dsn) {\n        const url = (0, _api.getEnvelopeEndpointWithUrlEncodedAuth)(this._dsn, options.tunnel, options._metadata ? options._metadata.sdk : undefined);\n        this._transport = options.transport({\n          tunnel: this._options.tunnel,\n          recordDroppedEvent: this.recordDroppedEvent.bind(this),\n          ...options.transportOptions,\n          url\n        });\n      }\n\n      // TODO(v9): Remove this deprecation warning\n      const tracingOptions = ['enableTracing', 'tracesSampleRate', 'tracesSampler'];\n      const undefinedOption = tracingOptions.find(option => option in options && options[option] == undefined);\n      if (undefinedOption) {\n        (0, _logger.consoleSandbox)(() => {\n          // eslint-disable-next-line no-console\n          console.warn(`[Sentry] Deprecation warning: \\`${undefinedOption}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`);\n        });\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    captureException(exception, hint, scope) {\n      const eventId = (0, _misc.uuid4)();\n\n      // ensure we haven't captured this very object before\n      if ((0, _misc.checkOrSetAlreadyCaught)(exception)) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.log(ALREADY_SEEN_ERROR);\n        return eventId;\n      }\n      const hintWithEventId = {\n        event_id: eventId,\n        ...hint\n      };\n      this._process(this.eventFromException(exception, hintWithEventId).then(event => this._captureEvent(event, hintWithEventId, scope)));\n      return hintWithEventId.event_id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    captureMessage(message, level, hint, currentScope) {\n      const hintWithEventId = {\n        event_id: (0, _misc.uuid4)(),\n        ...hint\n      };\n      const eventMessage = (0, _is.isParameterizedString)(message) ? message : String(message);\n      const promisedEvent = (0, _is.isPrimitive)(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);\n      this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n      return hintWithEventId.event_id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    captureEvent(event, hint, currentScope) {\n      const eventId = (0, _misc.uuid4)();\n\n      // ensure we haven't captured this very object before\n      if (hint && hint.originalException && (0, _misc.checkOrSetAlreadyCaught)(hint.originalException)) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.log(ALREADY_SEEN_ERROR);\n        return eventId;\n      }\n      const hintWithEventId = {\n        event_id: eventId,\n        ...hint\n      };\n      const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n      const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n      this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));\n      return hintWithEventId.event_id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    captureSession(session) {\n      if (!(typeof session.release === 'string')) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.warn('Discarded session because of missing or non-string release');\n      } else {\n        this.sendSession(session);\n        // After sending, we set init false to indicate it's not the first occurrence\n        (0, _session.updateSession)(session, {\n          init: false\n        });\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getDsn() {\n      return this._dsn;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getOptions() {\n      return this._options;\n    }\n\n    /**\n     * @see SdkMetadata\n     *\n     * @return The metadata of the SDK\n     */\n    getSdkMetadata() {\n      return this._options._metadata;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTransport() {\n      return this._transport;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    flush(timeout) {\n      const transport = this._transport;\n      if (transport) {\n        this.emit('flush');\n        return this._isClientDoneProcessing(timeout).then(clientFinished => {\n          return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n        });\n      } else {\n        return (0, _syncpromise.resolvedSyncPromise)(true);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    close(timeout) {\n      return this.flush(timeout).then(result => {\n        this.getOptions().enabled = false;\n        this.emit('close');\n        return result;\n      });\n    }\n\n    /** Get all installed event processors. */\n    getEventProcessors() {\n      return this._eventProcessors;\n    }\n\n    /** @inheritDoc */\n    addEventProcessor(eventProcessor) {\n      this._eventProcessors.push(eventProcessor);\n    }\n\n    /** @inheritdoc */\n    init() {\n      if (this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({\n        name\n      }) => name.startsWith('Spotlight'))) {\n        this._setupIntegrations();\n      }\n    }\n\n    /**\n     * Gets an installed integration by its name.\n     *\n     * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n     */\n    getIntegrationByName(integrationName) {\n      return this._integrations[integrationName];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    addIntegration(integration) {\n      const isAlreadyInstalled = this._integrations[integration.name];\n\n      // This hook takes care of only installing if not already installed\n      (0, _integration.setupIntegration)(this, integration, this._integrations);\n      // Here we need to check manually to make sure to not run this multiple times\n      if (!isAlreadyInstalled) {\n        (0, _integration.afterSetupIntegrations)(this, [integration]);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    sendEvent(event, hint = {}) {\n      this.emit('beforeSendEvent', event, hint);\n      let env = (0, _envelope.createEventEnvelope)(event, this._dsn, this._options._metadata, this._options.tunnel);\n      for (const attachment of hint.attachments || []) {\n        env = (0, _envelope2.addItemToEnvelope)(env, (0, _envelope2.createAttachmentEnvelopeItem)(attachment));\n      }\n      const promise = this.sendEnvelope(env);\n      if (promise) {\n        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    sendSession(session) {\n      const env = (0, _envelope.createSessionEnvelope)(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n      // sendEnvelope should not throw\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.sendEnvelope(env);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    recordDroppedEvent(reason, category, eventOrCount) {\n      if (this._options.sendClientReports) {\n        // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload\n        // If event is passed as third argument, we assume this is a count of 1\n        const count = typeof eventOrCount === 'number' ? eventOrCount : 1;\n\n        // We want to track each category (error, transaction, session, replay_event) separately\n        // but still keep the distinction between different type of outcomes.\n        // We could use nested maps, but it's much easier to read and type this way.\n        // A correct type for map-based implementation if we want to go that route\n        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n        // With typescript 4.1 we could even use template literal types\n        const key = `${reason}:${category}`;\n        _debugBuild.DEBUG_BUILD && _logger.logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n        this._outcomes[key] = (this._outcomes[key] || 0) + count;\n      }\n    }\n\n    // Keep on() & emit() signatures in sync with types' client.ts interface\n    /* eslint-disable @typescript-eslint/unified-signatures */\n\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n    on(hook, callback) {\n      const hooks = this._hooks[hook] = this._hooks[hook] || [];\n\n      // @ts-expect-error We assume the types are correct\n      hooks.push(callback);\n\n      // This function returns a callback execution handler that, when invoked,\n      // deregisters a callback. This is crucial for managing instances where callbacks\n      // need to be unregistered to prevent self-referencing in callback closures,\n      // ensuring proper garbage collection.\n      return () => {\n        // @ts-expect-error We assume the types are correct\n        const cbIndex = hooks.indexOf(callback);\n        if (cbIndex > -1) {\n          hooks.splice(cbIndex, 1);\n        }\n      };\n    }\n\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n    emit(hook, ...rest) {\n      const callbacks = this._hooks[hook];\n      if (callbacks) {\n        callbacks.forEach(callback => callback(...rest));\n      }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    sendEnvelope(envelope) {\n      this.emit('beforeEnvelope', envelope);\n      if (this._isEnabled() && this._transport) {\n        return this._transport.send(envelope).then(null, reason => {\n          _debugBuild.DEBUG_BUILD && _logger.logger.error('Error while sending envelope:', reason);\n          return reason;\n        });\n      }\n      _debugBuild.DEBUG_BUILD && _logger.logger.error('Transport disabled');\n      return (0, _syncpromise.resolvedSyncPromise)({});\n    }\n\n    /* eslint-enable @typescript-eslint/unified-signatures */\n\n    /** Setup integrations for this client. */\n    _setupIntegrations() {\n      const {\n        integrations\n      } = this._options;\n      this._integrations = (0, _integration.setupIntegrations)(this, integrations);\n      (0, _integration.afterSetupIntegrations)(this, integrations);\n    }\n\n    /** Updates existing session based on the provided event */\n    _updateSessionFromEvent(session, event) {\n      let crashed = event.level === 'fatal';\n      let errored = false;\n      const exceptions = event.exception && event.exception.values;\n      if (exceptions) {\n        errored = true;\n        for (const ex of exceptions) {\n          const mechanism = ex.mechanism;\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      }\n\n      // A session is updated and that session update is sent in only one of the two following scenarios:\n      // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n      // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n      const sessionNonTerminal = session.status === 'ok';\n      const shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n      if (shouldUpdateAndSend) {\n        (0, _session.updateSession)(session, {\n          ...(crashed && {\n            status: 'crashed'\n          }),\n          errors: session.errors || Number(errored || crashed)\n        });\n        this.captureSession(session);\n      }\n    }\n\n    /**\n     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n     * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n     *\n     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n     * `true`.\n     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n     * `false` otherwise\n     */\n    _isClientDoneProcessing(timeout) {\n      return new _syncpromise.SyncPromise(resolve => {\n        let ticked = 0;\n        const tick = 1;\n        const interval = setInterval(() => {\n          if (this._numProcessing == 0) {\n            clearInterval(interval);\n            resolve(true);\n          } else {\n            ticked += tick;\n            if (timeout && ticked >= timeout) {\n              clearInterval(interval);\n              resolve(false);\n            }\n          }\n        }, tick);\n      });\n    }\n\n    /** Determines whether this SDK is enabled and a transport is present. */\n    _isEnabled() {\n      return this.getOptions().enabled !== false && this._transport !== undefined;\n    }\n\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param currentScope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n    _prepareEvent(event, hint, currentScope = (0, _currentScopes.getCurrentScope)(), isolationScope = (0, _currentScopes.getIsolationScope)()) {\n      const options = this.getOptions();\n      const integrations = Object.keys(this._integrations);\n      if (!hint.integrations && integrations.length > 0) {\n        hint.integrations = integrations;\n      }\n      this.emit('preprocessEvent', event, hint);\n      if (!event.type) {\n        isolationScope.setLastEventId(event.event_id || hint.event_id);\n      }\n      return (0, _prepareEvent.prepareEvent)(options, event, hint, currentScope, this, isolationScope).then(evt => {\n        if (evt === null) {\n          return evt;\n        }\n        evt.contexts = {\n          trace: (0, _currentScopes.getTraceContextFromScope)(currentScope),\n          ...evt.contexts\n        };\n        const dynamicSamplingContext = (0, _dynamicSamplingContext.getDynamicSamplingContextFromScope)(this, currentScope);\n        evt.sdkProcessingMetadata = {\n          dynamicSamplingContext,\n          ...evt.sdkProcessingMetadata\n        };\n        return evt;\n      });\n    }\n\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n    _captureEvent(event, hint = {}, scope) {\n      return this._processEvent(event, hint, scope).then(finalEvent => {\n        return finalEvent.event_id;\n      }, reason => {\n        if (_debugBuild.DEBUG_BUILD) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          if (reason instanceof _error.SentryError && reason.logLevel === 'log') {\n            _logger.logger.log(reason.message);\n          } else {\n            _logger.logger.warn(reason);\n          }\n        }\n        return undefined;\n      });\n    }\n\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param currentScope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n    _processEvent(event, hint, currentScope) {\n      const options = this.getOptions();\n      const {\n        sampleRate\n      } = options;\n      const isTransaction = isTransactionEvent(event);\n      const isError = isErrorEvent(event);\n      const eventType = event.type || 'error';\n      const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n      // 1.0 === 100% events are sent\n      // 0.0 === 0% events are sent\n      // Sampling for transaction happens somewhere else\n      const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : (0, _parseSampleRate.parseSampleRate)(sampleRate);\n      if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n        this.recordDroppedEvent('sample_rate', 'error', event);\n        return (0, _syncpromise.rejectedSyncPromise)(new _error.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, 'log'));\n      }\n      const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n      const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n      const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n      return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope).then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new _error.SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n        const isInternalException = hint.data && hint.data.__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      }).then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw new _error.SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n        const session = currentScope && currentScope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source\n          };\n        }\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      }).then(null, reason => {\n        if (reason instanceof _error.SentryError) {\n          throw reason;\n        }\n        this.captureException(reason, {\n          data: {\n            __sentry__: true\n          },\n          originalException: reason\n        });\n        throw new _error.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n      });\n    }\n\n    /**\n     * Occupies the client with processing and event\n     */\n    _process(promise) {\n      this._numProcessing++;\n      void promise.then(value => {\n        this._numProcessing--;\n        return value;\n      }, reason => {\n        this._numProcessing--;\n        return reason;\n      });\n    }\n\n    /**\n     * Clears outcomes on this client and returns them.\n     */\n    _clearOutcomes() {\n      const outcomes = this._outcomes;\n      this._outcomes = {};\n      return Object.entries(outcomes).map(([key, quantity]) => {\n        const [reason, category] = key.split(':');\n        return {\n          reason,\n          category,\n          quantity\n        };\n      });\n    }\n\n    /**\n     * Sends client reports as an envelope.\n     */\n    _flushOutcomes() {\n      _debugBuild.DEBUG_BUILD && _logger.logger.log('Flushing outcomes...');\n      const outcomes = this._clearOutcomes();\n      if (outcomes.length === 0) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.log('No outcomes to send');\n        return;\n      }\n\n      // This is really the only place where we want to check for a DSN and only send outcomes then\n      if (!this._dsn) {\n        _debugBuild.DEBUG_BUILD && _logger.logger.log('No dsn provided, will not send outcomes');\n        return;\n      }\n      _debugBuild.DEBUG_BUILD && _logger.logger.log('Sending outcomes:', outcomes);\n      const envelope = (0, _clientreport.createClientReportEnvelope)(outcomes, this._options.tunnel && (0, _dsn.dsnToString)(this._dsn));\n\n      // sendEnvelope should not throw\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.sendEnvelope(envelope);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }\n\n  /**\n   * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n   */\n  exports.BaseClient = BaseClient;\n  function _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n    const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n    if ((0, _is.isThenable)(beforeSendResult)) {\n      return beforeSendResult.then(event => {\n        if (!(0, _is.isPlainObject)(event) && event !== null) {\n          throw new _error.SentryError(invalidValueError);\n        }\n        return event;\n      }, e => {\n        throw new _error.SentryError(`${beforeSendLabel} rejected with ${e}`);\n      });\n    } else if (!(0, _is.isPlainObject)(beforeSendResult) && beforeSendResult !== null) {\n      throw new _error.SentryError(invalidValueError);\n    }\n    return beforeSendResult;\n  }\n\n  /**\n   * Process the matching `beforeSendXXX` callback.\n   */\n  function processBeforeSend(client, options, event, hint) {\n    const {\n      beforeSend,\n      beforeSendTransaction,\n      beforeSendSpan\n    } = options;\n    if (isErrorEvent(event) && beforeSend) {\n      return beforeSend(event, hint);\n    }\n    if (isTransactionEvent(event)) {\n      if (event.spans && beforeSendSpan) {\n        const processedSpans = [];\n        for (const span of event.spans) {\n          const processedSpan = beforeSendSpan(span);\n          if (processedSpan) {\n            processedSpans.push(processedSpan);\n          } else {\n            (0, _spanUtils.showSpanDropWarning)();\n            client.recordDroppedEvent('before_send', 'span');\n          }\n        }\n        event.spans = processedSpans;\n      }\n      if (beforeSendTransaction) {\n        if (event.spans) {\n          // We store the # of spans before processing in SDK metadata,\n          // so we can compare it afterwards to determine how many spans were dropped\n          const spanCountBefore = event.spans.length;\n          event.sdkProcessingMetadata = {\n            ...event.sdkProcessingMetadata,\n            spanCountBeforeProcessing: spanCountBefore\n          };\n        }\n        return beforeSendTransaction(event, hint);\n      }\n    }\n    return event;\n  }\n  function isErrorEvent(event) {\n    return event.type === undefined;\n  }\n  function isTransactionEvent(event) {\n    return event.type === 'transaction';\n  }\n});","lineCount":742,"map":[[6,2,1,0],[6,6,1,0,"_api"],[6,10,1,0],[6,13,1,0,"require"],[6,20,1,0],[6,21,1,0,"_dependencyMap"],[6,35,1,0],[7,2,2,0],[7,6,2,0,"_currentScopes"],[7,20,2,0],[7,23,2,0,"require"],[7,30,2,0],[7,31,2,0,"_dependencyMap"],[7,45,2,0],[8,2,3,0],[8,6,3,0,"_debugBuild"],[8,17,3,0],[8,20,3,0,"require"],[8,27,3,0],[8,28,3,0,"_dependencyMap"],[8,42,3,0],[9,2,4,0],[9,6,4,0,"_envelope"],[9,15,4,0],[9,18,4,0,"require"],[9,25,4,0],[9,26,4,0,"_dependencyMap"],[9,40,4,0],[10,2,5,0],[10,6,5,0,"_integration"],[10,18,5,0],[10,21,5,0,"require"],[10,28,5,0],[10,29,5,0,"_dependencyMap"],[10,43,5,0],[11,2,6,0],[11,6,6,0,"_session"],[11,14,6,0],[11,17,6,0,"require"],[11,24,6,0],[11,25,6,0,"_dependencyMap"],[11,39,6,0],[12,2,7,0],[12,6,7,0,"_dynamicSamplingContext"],[12,29,7,0],[12,32,7,0,"require"],[12,39,7,0],[12,40,7,0,"_dependencyMap"],[12,54,7,0],[13,2,8,0],[13,6,8,0,"_clientreport"],[13,19,8,0],[13,22,8,0,"require"],[13,29,8,0],[13,30,8,0,"_dependencyMap"],[13,44,8,0],[14,2,9,0],[14,6,9,0,"_dsn"],[14,10,9,0],[14,13,9,0,"require"],[14,20,9,0],[14,21,9,0,"_dependencyMap"],[14,35,9,0],[15,2,10,0],[15,6,10,0,"_envelope2"],[15,16,10,0],[15,19,10,0,"require"],[15,26,10,0],[15,27,10,0,"_dependencyMap"],[15,41,10,0],[16,2,11,0],[16,6,11,0,"_error"],[16,12,11,0],[16,15,11,0,"require"],[16,22,11,0],[16,23,11,0,"_dependencyMap"],[16,37,11,0],[17,2,12,0],[17,6,12,0,"_is"],[17,9,12,0],[17,12,12,0,"require"],[17,19,12,0],[17,20,12,0,"_dependencyMap"],[17,34,12,0],[18,2,13,0],[18,6,13,0,"_logger"],[18,13,13,0],[18,16,13,0,"require"],[18,23,13,0],[18,24,13,0,"_dependencyMap"],[18,38,13,0],[19,2,14,0],[19,6,14,0,"_misc"],[19,11,14,0],[19,14,14,0,"require"],[19,21,14,0],[19,22,14,0,"_dependencyMap"],[19,36,14,0],[20,2,15,0],[20,6,15,0,"_syncpromise"],[20,18,15,0],[20,21,15,0,"require"],[20,28,15,0],[20,29,15,0,"_dependencyMap"],[20,43,15,0],[21,2,16,0],[21,6,16,0,"_parseSampleRate"],[21,22,16,0],[21,25,16,0,"require"],[21,32,16,0],[21,33,16,0,"_dependencyMap"],[21,47,16,0],[22,2,17,0],[22,6,17,0,"_prepareEvent"],[22,19,17,0],[22,22,17,0,"require"],[22,29,17,0],[22,30,17,0,"_dependencyMap"],[22,44,17,0],[23,2,18,0],[23,6,18,0,"_spanUtils"],[23,16,18,0],[23,19,18,0,"require"],[23,26,18,0],[23,27,18,0,"_dependencyMap"],[23,41,18,0],[24,2,20,0],[24,8,20,6,"ALREADY_SEEN_ERROR"],[24,26,20,24],[24,29,20,27],[24,90,20,88],[26,2,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,2,53,0],[57,8,53,6,"BaseClient"],[57,18,53,16],[57,19,53,17],[58,4,54,2],[60,4,56,2],[62,4,58,2],[64,4,60,2],[66,4,62,2],[68,4,64,2],[70,4,66,2],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,4,71,3,"constructor"],[75,15,71,14,"constructor"],[75,16,71,15,"options"],[75,23,71,22],[75,25,71,24],[76,6,72,4],[76,10,72,8],[76,11,72,9,"_options"],[76,19,72,17],[76,22,72,20,"options"],[76,29,72,27],[77,6,73,4],[77,10,73,8],[77,11,73,9,"_integrations"],[77,24,73,22],[77,27,73,25],[77,28,73,26],[77,29,73,27],[78,6,74,4],[78,10,74,8],[78,11,74,9,"_numProcessing"],[78,25,74,23],[78,28,74,26],[78,29,74,27],[79,6,75,4],[79,10,75,8],[79,11,75,9,"_outcomes"],[79,20,75,18],[79,23,75,21],[79,24,75,22],[79,25,75,23],[80,6,76,4],[80,10,76,8],[80,11,76,9,"_hooks"],[80,17,76,15],[80,20,76,18],[80,21,76,19],[80,22,76,20],[81,6,77,4],[81,10,77,8],[81,11,77,9,"_eventProcessors"],[81,27,77,25],[81,30,77,28],[81,32,77,30],[82,6,79,4],[82,10,79,8,"options"],[82,17,79,15],[82,18,79,16,"dsn"],[82,21,79,19],[82,23,79,21],[83,8,80,6],[83,12,80,10],[83,13,80,11,"_dsn"],[83,17,80,15],[83,20,80,18],[83,24,80,18,"makeDsn"],[83,36,80,25],[83,38,80,26,"options"],[83,45,80,33],[83,46,80,34,"dsn"],[83,49,80,37],[83,50,80,38],[84,6,81,4],[84,7,81,5],[84,13,81,11],[85,8,82,6,"DEBUG_BUILD"],[85,31,82,17],[85,35,82,21,"logger"],[85,49,82,27],[85,50,82,28,"warn"],[85,54,82,32],[85,55,82,33],[85,102,82,80],[85,103,82,81],[86,6,83,4],[87,6,85,4],[87,10,85,8],[87,14,85,12],[87,15,85,13,"_dsn"],[87,19,85,17],[87,21,85,19],[88,8,86,6],[88,14,86,12,"url"],[88,17,86,15],[88,20,86,18],[88,24,86,18,"getEnvelopeEndpointWithUrlEncodedAuth"],[88,66,86,55],[88,68,87,8],[88,72,87,12],[88,73,87,13,"_dsn"],[88,77,87,17],[88,79,88,8,"options"],[88,86,88,15],[88,87,88,16,"tunnel"],[88,93,88,22],[88,95,89,8,"options"],[88,102,89,15],[88,103,89,16,"_metadata"],[88,112,89,25],[88,115,89,28,"options"],[88,122,89,35],[88,123,89,36,"_metadata"],[88,132,89,45],[88,133,89,46,"sdk"],[88,136,89,49],[88,139,89,52,"undefined"],[88,148,90,6],[88,149,90,7],[89,8,91,6],[89,12,91,10],[89,13,91,11,"_transport"],[89,23,91,21],[89,26,91,24,"options"],[89,33,91,31],[89,34,91,32,"transport"],[89,43,91,41],[89,44,91,42],[90,10,92,8,"tunnel"],[90,16,92,14],[90,18,92,16],[90,22,92,20],[90,23,92,21,"_options"],[90,31,92,29],[90,32,92,30,"tunnel"],[90,38,92,36],[91,10,93,8,"recordDroppedEvent"],[91,28,93,26],[91,30,93,28],[91,34,93,32],[91,35,93,33,"recordDroppedEvent"],[91,53,93,51],[91,54,93,52,"bind"],[91,58,93,56],[91,59,93,57],[91,63,93,61],[91,64,93,62],[92,10,94,8],[92,13,94,11,"options"],[92,20,94,18],[92,21,94,19,"transportOptions"],[92,37,94,35],[93,10,95,8,"url"],[94,8,96,6],[94,9,96,7],[94,10,96,8],[95,6,97,4],[97,6,99,4],[98,6,100,4],[98,12,100,10,"tracingOptions"],[98,26,100,24],[98,29,100,27],[98,30,100,28],[98,45,100,43],[98,47,100,45],[98,65,100,63],[98,67,100,65],[98,82,100,80],[98,83,100,81],[99,6,101,4],[99,12,101,10,"undefinedOption"],[99,27,101,25],[99,30,101,28,"tracingOptions"],[99,44,101,42],[99,45,101,43,"find"],[99,49,101,47],[99,50,101,48,"option"],[99,56,101,54],[99,60,101,58,"option"],[99,66,101,64],[99,70,101,68,"options"],[99,77,101,75],[99,81,101,79,"options"],[99,88,101,86],[99,89,101,87,"option"],[99,95,101,93],[99,96,101,94],[99,100,101,98,"undefined"],[99,109,101,107],[99,110,101,108],[100,6,102,4],[100,10,102,8,"undefinedOption"],[100,25,102,23],[100,27,102,25],[101,8,103,6],[101,12,103,6,"consoleSandbox"],[101,34,103,20],[101,36,103,21],[101,42,103,27],[102,10,104,8],[103,10,105,8,"console"],[103,17,105,15],[103,18,105,16,"warn"],[103,22,105,20],[103,23,106,10],[103,58,106,45,"undefinedOption"],[103,73,106,60],[103,207,107,8],[103,208,107,9],[104,8,108,6],[104,9,108,7],[104,10,108,8],[105,6,109,4],[106,4,110,2],[108,4,112,2],[109,0,113,0],[110,0,114,0],[111,4,115,3,"captureException"],[111,20,115,19,"captureException"],[111,21,115,20,"exception"],[111,30,115,29],[111,32,115,31,"hint"],[111,36,115,35],[111,38,115,37,"scope"],[111,43,115,42],[111,45,115,44],[112,6,116,4],[112,12,116,10,"eventId"],[112,19,116,17],[112,22,116,20],[112,26,116,20,"uuid4"],[112,37,116,25],[112,39,116,26],[112,40,116,27],[114,6,118,4],[115,6,119,4],[115,10,119,8],[115,14,119,8,"checkOrSetAlreadyCaught"],[115,43,119,31],[115,45,119,32,"exception"],[115,54,119,41],[115,55,119,42],[115,57,119,44],[116,8,120,6,"DEBUG_BUILD"],[116,31,120,17],[116,35,120,21,"logger"],[116,49,120,27],[116,50,120,28,"log"],[116,53,120,31],[116,54,120,32,"ALREADY_SEEN_ERROR"],[116,72,120,50],[116,73,120,51],[117,8,121,6],[117,15,121,13,"eventId"],[117,22,121,20],[118,6,122,4],[119,6,124,4],[119,12,124,10,"hintWithEventId"],[119,27,124,25],[119,30,124,28],[120,8,125,6,"event_id"],[120,16,125,14],[120,18,125,16,"eventId"],[120,25,125,23],[121,8,126,6],[121,11,126,9,"hint"],[122,6,127,4],[122,7,127,5],[123,6,129,4],[123,10,129,8],[123,11,129,9,"_process"],[123,19,129,17],[123,20,130,6],[123,24,130,10],[123,25,130,11,"eventFromException"],[123,43,130,29],[123,44,130,30,"exception"],[123,53,130,39],[123,55,130,41,"hintWithEventId"],[123,70,130,56],[123,71,130,57],[123,72,130,58,"then"],[123,76,130,62],[123,77,130,63,"event"],[123,82,130,68],[123,86,131,8],[123,90,131,12],[123,91,131,13,"_captureEvent"],[123,104,131,26],[123,105,131,27,"event"],[123,110,131,32],[123,112,131,34,"hintWithEventId"],[123,127,131,49],[123,129,131,51,"scope"],[123,134,131,56],[123,135,132,6],[123,136,133,4],[123,137,133,5],[124,6,135,4],[124,13,135,11,"hintWithEventId"],[124,28,135,26],[124,29,135,27,"event_id"],[124,37,135,35],[125,4,136,2],[127,4,138,2],[128,0,139,0],[129,0,140,0],[130,4,141,3,"captureMessage"],[130,18,141,17,"captureMessage"],[130,19,142,4,"message"],[130,26,142,11],[130,28,143,4,"level"],[130,33,143,9],[130,35,144,4,"hint"],[130,39,144,8],[130,41,145,4,"currentScope"],[130,53,145,16],[130,55,146,4],[131,6,147,4],[131,12,147,10,"hintWithEventId"],[131,27,147,25],[131,30,147,28],[132,8,148,6,"event_id"],[132,16,148,14],[132,18,148,16],[132,22,148,16,"uuid4"],[132,33,148,21],[132,35,148,22],[132,36,148,23],[133,8,149,6],[133,11,149,9,"hint"],[134,6,150,4],[134,7,150,5],[135,6,152,4],[135,12,152,10,"eventMessage"],[135,24,152,22],[135,27,152,25],[135,31,152,25,"isParameterizedString"],[135,56,152,46],[135,58,152,47,"message"],[135,65,152,54],[135,66,152,55],[135,69,152,58,"message"],[135,76,152,65],[135,79,152,68,"String"],[135,85,152,74],[135,86,152,75,"message"],[135,93,152,82],[135,94,152,83],[136,6,154,4],[136,12,154,10,"promisedEvent"],[136,25,154,23],[136,28,154,26],[136,32,154,26,"isPrimitive"],[136,47,154,37],[136,49,154,38,"message"],[136,56,154,45],[136,57,154,46],[136,60,155,8],[136,64,155,12],[136,65,155,13,"eventFromMessage"],[136,81,155,29],[136,82,155,30,"eventMessage"],[136,94,155,42],[136,96,155,44,"level"],[136,101,155,49],[136,103,155,51,"hintWithEventId"],[136,118,155,66],[136,119,155,67],[136,122,156,8],[136,126,156,12],[136,127,156,13,"eventFromException"],[136,145,156,31],[136,146,156,32,"message"],[136,153,156,39],[136,155,156,41,"hintWithEventId"],[136,170,156,56],[136,171,156,57],[137,6,158,4],[137,10,158,8],[137,11,158,9,"_process"],[137,19,158,17],[137,20,158,18,"promisedEvent"],[137,33,158,31],[137,34,158,32,"then"],[137,38,158,36],[137,39,158,37,"event"],[137,44,158,42],[137,48,158,46],[137,52,158,50],[137,53,158,51,"_captureEvent"],[137,66,158,64],[137,67,158,65,"event"],[137,72,158,70],[137,74,158,72,"hintWithEventId"],[137,89,158,87],[137,91,158,89,"currentScope"],[137,103,158,101],[137,104,158,102],[137,105,158,103],[137,106,158,104],[138,6,160,4],[138,13,160,11,"hintWithEventId"],[138,28,160,26],[138,29,160,27,"event_id"],[138,37,160,35],[139,4,161,2],[141,4,163,2],[142,0,164,0],[143,0,165,0],[144,4,166,3,"captureEvent"],[144,16,166,15,"captureEvent"],[144,17,166,16,"event"],[144,22,166,21],[144,24,166,23,"hint"],[144,28,166,27],[144,30,166,29,"currentScope"],[144,42,166,41],[144,44,166,43],[145,6,167,4],[145,12,167,10,"eventId"],[145,19,167,17],[145,22,167,20],[145,26,167,20,"uuid4"],[145,37,167,25],[145,39,167,26],[145,40,167,27],[147,6,169,4],[148,6,170,4],[148,10,170,8,"hint"],[148,14,170,12],[148,18,170,16,"hint"],[148,22,170,20],[148,23,170,21,"originalException"],[148,40,170,38],[148,44,170,42],[148,48,170,42,"checkOrSetAlreadyCaught"],[148,77,170,65],[148,79,170,66,"hint"],[148,83,170,70],[148,84,170,71,"originalException"],[148,101,170,88],[148,102,170,89],[148,104,170,91],[149,8,171,6,"DEBUG_BUILD"],[149,31,171,17],[149,35,171,21,"logger"],[149,49,171,27],[149,50,171,28,"log"],[149,53,171,31],[149,54,171,32,"ALREADY_SEEN_ERROR"],[149,72,171,50],[149,73,171,51],[150,8,172,6],[150,15,172,13,"eventId"],[150,22,172,20],[151,6,173,4],[152,6,175,4],[152,12,175,10,"hintWithEventId"],[152,27,175,25],[152,30,175,28],[153,8,176,6,"event_id"],[153,16,176,14],[153,18,176,16,"eventId"],[153,25,176,23],[154,8,177,6],[154,11,177,9,"hint"],[155,6,178,4],[155,7,178,5],[156,6,180,4],[156,12,180,10,"sdkProcessingMetadata"],[156,33,180,31],[156,36,180,34,"event"],[156,41,180,39],[156,42,180,40,"sdkProcessingMetadata"],[156,63,180,61],[156,67,180,65],[156,68,180,66],[156,69,180,67],[157,6,181,4],[157,12,181,10,"capturedSpanScope"],[157,29,181,27],[157,32,181,30,"sdkProcessingMetadata"],[157,53,181,51],[157,54,181,52,"capturedSpanScope"],[157,71,181,69],[158,6,183,4],[158,10,183,8],[158,11,183,9,"_process"],[158,19,183,17],[158,20,183,18],[158,24,183,22],[158,25,183,23,"_captureEvent"],[158,38,183,36],[158,39,183,37,"event"],[158,44,183,42],[158,46,183,44,"hintWithEventId"],[158,61,183,59],[158,63,183,61,"capturedSpanScope"],[158,80,183,78],[158,84,183,82,"currentScope"],[158,96,183,94],[158,97,183,95],[158,98,183,96],[159,6,185,4],[159,13,185,11,"hintWithEventId"],[159,28,185,26],[159,29,185,27,"event_id"],[159,37,185,35],[160,4,186,2],[162,4,188,2],[163,0,189,0],[164,0,190,0],[165,4,191,3,"captureSession"],[165,18,191,17,"captureSession"],[165,19,191,18,"session"],[165,26,191,25],[165,28,191,27],[166,6,192,4],[166,10,192,8],[166,12,192,10],[166,19,192,17,"session"],[166,26,192,24],[166,27,192,25,"release"],[166,34,192,32],[166,39,192,37],[166,47,192,45],[166,48,192,46],[166,50,192,48],[167,8,193,6,"DEBUG_BUILD"],[167,31,193,17],[167,35,193,21,"logger"],[167,49,193,27],[167,50,193,28,"warn"],[167,54,193,32],[167,55,193,33],[167,115,193,93],[167,116,193,94],[168,6,194,4],[168,7,194,5],[168,13,194,11],[169,8,195,6],[169,12,195,10],[169,13,195,11,"sendSession"],[169,24,195,22],[169,25,195,23,"session"],[169,32,195,30],[169,33,195,31],[170,8,196,6],[171,8,197,6],[171,12,197,6,"updateSession"],[171,34,197,19],[171,36,197,20,"session"],[171,43,197,27],[171,45,197,29],[172,10,197,31,"init"],[172,14,197,35],[172,16,197,37],[173,8,197,43],[173,9,197,44],[173,10,197,45],[174,6,198,4],[175,4,199,2],[177,4,201,2],[178,0,202,0],[179,0,203,0],[180,4,204,3,"getDsn"],[180,10,204,9,"getDsn"],[180,11,204,9],[180,13,204,12],[181,6,205,4],[181,13,205,11],[181,17,205,15],[181,18,205,16,"_dsn"],[181,22,205,20],[182,4,206,2],[184,4,208,2],[185,0,209,0],[186,0,210,0],[187,4,211,3,"getOptions"],[187,14,211,13,"getOptions"],[187,15,211,13],[187,17,211,16],[188,6,212,4],[188,13,212,11],[188,17,212,15],[188,18,212,16,"_options"],[188,26,212,24],[189,4,213,2],[191,4,215,2],[192,0,216,0],[193,0,217,0],[194,0,218,0],[195,0,219,0],[196,4,220,3,"getSdkMetadata"],[196,18,220,17,"getSdkMetadata"],[196,19,220,17],[196,21,220,20],[197,6,221,4],[197,13,221,11],[197,17,221,15],[197,18,221,16,"_options"],[197,26,221,24],[197,27,221,25,"_metadata"],[197,36,221,34],[198,4,222,2],[200,4,224,2],[201,0,225,0],[202,0,226,0],[203,4,227,3,"getTransport"],[203,16,227,15,"getTransport"],[203,17,227,15],[203,19,227,18],[204,6,228,4],[204,13,228,11],[204,17,228,15],[204,18,228,16,"_transport"],[204,28,228,26],[205,4,229,2],[207,4,231,2],[208,0,232,0],[209,0,233,0],[210,4,234,3,"flush"],[210,9,234,8,"flush"],[210,10,234,9,"timeout"],[210,17,234,16],[210,19,234,18],[211,6,235,4],[211,12,235,10,"transport"],[211,21,235,19],[211,24,235,22],[211,28,235,26],[211,29,235,27,"_transport"],[211,39,235,37],[212,6,236,4],[212,10,236,8,"transport"],[212,19,236,17],[212,21,236,19],[213,8,237,6],[213,12,237,10],[213,13,237,11,"emit"],[213,17,237,15],[213,18,237,16],[213,25,237,23],[213,26,237,24],[214,8,238,6],[214,15,238,13],[214,19,238,17],[214,20,238,18,"_isClientDoneProcessing"],[214,43,238,41],[214,44,238,42,"timeout"],[214,51,238,49],[214,52,238,50],[214,53,238,51,"then"],[214,57,238,55],[214,58,238,56,"clientFinished"],[214,72,238,70],[214,76,238,74],[215,10,239,8],[215,17,239,15,"transport"],[215,26,239,24],[215,27,239,25,"flush"],[215,32,239,30],[215,33,239,31,"timeout"],[215,40,239,38],[215,41,239,39],[215,42,239,40,"then"],[215,46,239,44],[215,47,239,45,"transportFlushed"],[215,63,239,61],[215,67,239,65,"clientFinished"],[215,81,239,79],[215,85,239,83,"transportFlushed"],[215,101,239,99],[215,102,239,100],[216,8,240,6],[216,9,240,7],[216,10,240,8],[217,6,241,4],[217,7,241,5],[217,13,241,11],[218,8,242,6],[218,15,242,13],[218,19,242,13,"resolvedSyncPromise"],[218,51,242,32],[218,53,242,33],[218,57,242,37],[218,58,242,38],[219,6,243,4],[220,4,244,2],[222,4,246,2],[223,0,247,0],[224,0,248,0],[225,4,249,3,"close"],[225,9,249,8,"close"],[225,10,249,9,"timeout"],[225,17,249,16],[225,19,249,18],[226,6,250,4],[226,13,250,11],[226,17,250,15],[226,18,250,16,"flush"],[226,23,250,21],[226,24,250,22,"timeout"],[226,31,250,29],[226,32,250,30],[226,33,250,31,"then"],[226,37,250,35],[226,38,250,36,"result"],[226,44,250,42],[226,48,250,46],[227,8,251,6],[227,12,251,10],[227,13,251,11,"getOptions"],[227,23,251,21],[227,24,251,22],[227,25,251,23],[227,26,251,24,"enabled"],[227,33,251,31],[227,36,251,34],[227,41,251,39],[228,8,252,6],[228,12,252,10],[228,13,252,11,"emit"],[228,17,252,15],[228,18,252,16],[228,25,252,23],[228,26,252,24],[229,8,253,6],[229,15,253,13,"result"],[229,21,253,19],[230,6,254,4],[230,7,254,5],[230,8,254,6],[231,4,255,2],[233,4,257,2],[234,4,258,3,"getEventProcessors"],[234,22,258,21,"getEventProcessors"],[234,23,258,21],[234,25,258,24],[235,6,259,4],[235,13,259,11],[235,17,259,15],[235,18,259,16,"_eventProcessors"],[235,34,259,32],[236,4,260,2],[238,4,262,2],[239,4,263,3,"addEventProcessor"],[239,21,263,20,"addEventProcessor"],[239,22,263,21,"eventProcessor"],[239,36,263,35],[239,38,263,37],[240,6,264,4],[240,10,264,8],[240,11,264,9,"_eventProcessors"],[240,27,264,25],[240,28,264,26,"push"],[240,32,264,30],[240,33,264,31,"eventProcessor"],[240,47,264,45],[240,48,264,46],[241,4,265,2],[243,4,267,2],[244,4,268,3,"init"],[244,8,268,7,"init"],[244,9,268,7],[244,11,268,10],[245,6,269,4],[245,10,270,6],[245,14,270,10],[245,15,270,11,"_isEnabled"],[245,25,270,21],[245,26,270,22],[245,27,270,23],[246,6,271,6],[247,6,272,6],[248,6,273,6],[249,6,274,6],[250,6,275,6],[251,6,276,6],[251,10,276,10],[251,11,276,11,"_options"],[251,19,276,19],[251,20,276,20,"integrations"],[251,32,276,32],[251,33,276,33,"some"],[251,37,276,37],[251,38,276,38],[251,39,276,39],[252,8,276,41,"name"],[253,6,276,46],[253,7,276,47],[253,12,276,52,"name"],[253,16,276,56],[253,17,276,57,"startsWith"],[253,27,276,67],[253,28,276,68],[253,39,276,79],[253,40,276,80],[253,41,276,81],[253,43,277,6],[254,8,278,6],[254,12,278,10],[254,13,278,11,"_setupIntegrations"],[254,31,278,29],[254,32,278,30],[254,33,278,31],[255,6,279,4],[256,4,280,2],[258,4,282,2],[259,0,283,0],[260,0,284,0],[261,0,285,0],[262,0,286,0],[263,4,287,3,"getIntegrationByName"],[263,24,287,23,"getIntegrationByName"],[263,25,287,24,"integrationName"],[263,40,287,39],[263,42,287,41],[264,6,288,4],[264,13,288,11],[264,17,288,15],[264,18,288,16,"_integrations"],[264,31,288,29],[264,32,288,30,"integrationName"],[264,47,288,45],[264,48,288,46],[265,4,289,2],[267,4,291,2],[268,0,292,0],[269,0,293,0],[270,4,294,3,"addIntegration"],[270,18,294,17,"addIntegration"],[270,19,294,18,"integration"],[270,30,294,29],[270,32,294,31],[271,6,295,4],[271,12,295,10,"isAlreadyInstalled"],[271,30,295,28],[271,33,295,31],[271,37,295,35],[271,38,295,36,"_integrations"],[271,51,295,49],[271,52,295,50,"integration"],[271,63,295,61],[271,64,295,62,"name"],[271,68,295,66],[271,69,295,67],[273,6,297,4],[274,6,298,4],[274,10,298,4,"setupIntegration"],[274,39,298,20],[274,41,298,21],[274,45,298,25],[274,47,298,27,"integration"],[274,58,298,38],[274,60,298,40],[274,64,298,44],[274,65,298,45,"_integrations"],[274,78,298,58],[274,79,298,59],[275,6,299,4],[276,6,300,4],[276,10,300,8],[276,11,300,9,"isAlreadyInstalled"],[276,29,300,27],[276,31,300,29],[277,8,301,6],[277,12,301,6,"afterSetupIntegrations"],[277,47,301,28],[277,49,301,29],[277,53,301,33],[277,55,301,35],[277,56,301,36,"integration"],[277,67,301,47],[277,68,301,48],[277,69,301,49],[278,6,302,4],[279,4,303,2],[281,4,305,2],[282,0,306,0],[283,0,307,0],[284,4,308,3,"sendEvent"],[284,13,308,12,"sendEvent"],[284,14,308,13,"event"],[284,19,308,18],[284,21,308,20,"hint"],[284,25,308,24],[284,28,308,27],[284,29,308,28],[284,30,308,29],[284,32,308,31],[285,6,309,4],[285,10,309,8],[285,11,309,9,"emit"],[285,15,309,13],[285,16,309,14],[285,33,309,31],[285,35,309,33,"event"],[285,40,309,38],[285,42,309,40,"hint"],[285,46,309,44],[285,47,309,45],[286,6,311,4],[286,10,311,8,"env"],[286,13,311,11],[286,16,311,14],[286,20,311,14,"createEventEnvelope"],[286,49,311,33],[286,51,311,34,"event"],[286,56,311,39],[286,58,311,41],[286,62,311,45],[286,63,311,46,"_dsn"],[286,67,311,50],[286,69,311,52],[286,73,311,56],[286,74,311,57,"_options"],[286,82,311,65],[286,83,311,66,"_metadata"],[286,92,311,75],[286,94,311,77],[286,98,311,81],[286,99,311,82,"_options"],[286,107,311,90],[286,108,311,91,"tunnel"],[286,114,311,97],[286,115,311,98],[287,6,313,4],[287,11,313,9],[287,17,313,15,"attachment"],[287,27,313,25],[287,31,313,29,"hint"],[287,35,313,33],[287,36,313,34,"attachments"],[287,47,313,45],[287,51,313,49],[287,53,313,51],[287,55,313,53],[288,8,314,6,"env"],[288,11,314,9],[288,14,314,12],[288,18,314,12,"addItemToEnvelope"],[288,46,314,29],[288,48,314,30,"env"],[288,51,314,33],[288,53,314,35],[288,57,314,35,"createAttachmentEnvelopeItem"],[288,96,314,63],[288,98,314,64,"attachment"],[288,108,314,74],[288,109,314,75],[288,110,314,76],[289,6,315,4],[290,6,317,4],[290,12,317,10,"promise"],[290,19,317,17],[290,22,317,20],[290,26,317,24],[290,27,317,25,"sendEnvelope"],[290,39,317,37],[290,40,317,38,"env"],[290,43,317,41],[290,44,317,42],[291,6,318,4],[291,10,318,8,"promise"],[291,17,318,15],[291,19,318,17],[292,8,319,6,"promise"],[292,15,319,13],[292,16,319,14,"then"],[292,20,319,18],[292,21,319,19,"sendResponse"],[292,33,319,31],[292,37,319,35],[292,41,319,39],[292,42,319,40,"emit"],[292,46,319,44],[292,47,319,45],[292,63,319,61],[292,65,319,63,"event"],[292,70,319,68],[292,72,319,70,"sendResponse"],[292,84,319,82],[292,85,319,83],[292,87,319,85],[292,91,319,89],[292,92,319,90],[293,6,320,4],[294,4,321,2],[296,4,323,2],[297,0,324,0],[298,0,325,0],[299,4,326,3,"sendSession"],[299,15,326,14,"sendSession"],[299,16,326,15,"session"],[299,23,326,22],[299,25,326,24],[300,6,327,4],[300,12,327,10,"env"],[300,15,327,13],[300,18,327,16],[300,22,327,16,"createSessionEnvelope"],[300,53,327,37],[300,55,327,38,"session"],[300,62,327,45],[300,64,327,47],[300,68,327,51],[300,69,327,52,"_dsn"],[300,73,327,56],[300,75,327,58],[300,79,327,62],[300,80,327,63,"_options"],[300,88,327,71],[300,89,327,72,"_metadata"],[300,98,327,81],[300,100,327,83],[300,104,327,87],[300,105,327,88,"_options"],[300,113,327,96],[300,114,327,97,"tunnel"],[300,120,327,103],[300,121,327,104],[302,6,329,4],[303,6,330,4],[304,6,331,4],[304,10,331,8],[304,11,331,9,"sendEnvelope"],[304,23,331,21],[304,24,331,22,"env"],[304,27,331,25],[304,28,331,26],[305,4,332,2],[307,4,334,2],[308,0,335,0],[309,0,336,0],[310,4,337,3,"recordDroppedEvent"],[310,22,337,21,"recordDroppedEvent"],[310,23,337,22,"reason"],[310,29,337,28],[310,31,337,30,"category"],[310,39,337,38],[310,41,337,40,"eventOrCount"],[310,53,337,52],[310,55,337,54],[311,6,338,4],[311,10,338,8],[311,14,338,12],[311,15,338,13,"_options"],[311,23,338,21],[311,24,338,22,"sendClientReports"],[311,41,338,39],[311,43,338,41],[312,8,339,6],[313,8,340,6],[314,8,341,6],[314,14,341,12,"count"],[314,19,341,17],[314,22,341,20],[314,29,341,27,"eventOrCount"],[314,41,341,39],[314,46,341,44],[314,54,341,52],[314,57,341,55,"eventOrCount"],[314,69,341,67],[314,72,341,70],[314,73,341,71],[316,8,343,6],[317,8,344,6],[318,8,345,6],[319,8,346,6],[320,8,347,6],[321,8,348,6],[322,8,349,6],[322,14,349,12,"key"],[322,17,349,15],[322,20,349,18],[322,23,349,21,"reason"],[322,29,349,27],[322,33,349,31,"category"],[322,41,349,39],[322,43,349,41],[323,8,350,6,"DEBUG_BUILD"],[323,31,350,17],[323,35,350,21,"logger"],[323,49,350,27],[323,50,350,28,"log"],[323,53,350,31],[323,54,350,32],[323,77,350,55,"key"],[323,80,350,58],[323,84,350,62,"count"],[323,89,350,67],[323,92,350,70],[323,93,350,71],[323,96,350,74],[323,101,350,79,"count"],[323,106,350,84],[323,115,350,93],[323,118,350,96],[323,120,350,98],[323,122,350,100],[323,123,350,101],[324,8,351,6],[324,12,351,10],[324,13,351,11,"_outcomes"],[324,22,351,20],[324,23,351,21,"key"],[324,26,351,24],[324,27,351,25],[324,30,351,28],[324,31,351,29],[324,35,351,33],[324,36,351,34,"_outcomes"],[324,45,351,43],[324,46,351,44,"key"],[324,49,351,47],[324,50,351,48],[324,54,351,52],[324,55,351,53],[324,59,351,57,"count"],[324,64,351,62],[325,6,352,4],[326,4,353,2],[328,4,355,2],[329,4,356,2],[331,4,358,2],[333,4,360,2],[334,4,361,3,"on"],[334,6,361,5,"on"],[334,7,361,6,"hook"],[334,11,361,10],[334,13,361,12,"callback"],[334,21,361,20],[334,23,361,22],[335,6,362,4],[335,12,362,10,"hooks"],[335,17,362,15],[335,20,362,19],[335,24,362,23],[335,25,362,24,"_hooks"],[335,31,362,30],[335,32,362,31,"hook"],[335,36,362,35],[335,37,362,36],[335,40,362,39],[335,44,362,43],[335,45,362,44,"_hooks"],[335,51,362,50],[335,52,362,51,"hook"],[335,56,362,55],[335,57,362,56],[335,61,362,60],[335,63,362,63],[337,6,364,4],[338,6,365,4,"hooks"],[338,11,365,9],[338,12,365,10,"push"],[338,16,365,14],[338,17,365,15,"callback"],[338,25,365,23],[338,26,365,24],[340,6,367,4],[341,6,368,4],[342,6,369,4],[343,6,370,4],[344,6,371,4],[344,13,371,11],[344,19,371,17],[345,8,372,6],[346,8,373,6],[346,14,373,12,"cbIndex"],[346,21,373,19],[346,24,373,22,"hooks"],[346,29,373,27],[346,30,373,28,"indexOf"],[346,37,373,35],[346,38,373,36,"callback"],[346,46,373,44],[346,47,373,45],[347,8,374,6],[347,12,374,10,"cbIndex"],[347,19,374,17],[347,22,374,20],[347,23,374,21],[347,24,374,22],[347,26,374,24],[348,10,375,8,"hooks"],[348,15,375,13],[348,16,375,14,"splice"],[348,22,375,20],[348,23,375,21,"cbIndex"],[348,30,375,28],[348,32,375,30],[348,33,375,31],[348,34,375,32],[349,8,376,6],[350,6,377,4],[350,7,377,5],[351,4,378,2],[353,4,380,2],[355,4,382,2],[356,4,383,3,"emit"],[356,8,383,7,"emit"],[356,9,383,8,"hook"],[356,13,383,12],[356,15,383,14],[356,18,383,17,"rest"],[356,22,383,21],[356,24,383,23],[357,6,384,4],[357,12,384,10,"callbacks"],[357,21,384,19],[357,24,384,22],[357,28,384,26],[357,29,384,27,"_hooks"],[357,35,384,33],[357,36,384,34,"hook"],[357,40,384,38],[357,41,384,39],[358,6,385,4],[358,10,385,8,"callbacks"],[358,19,385,17],[358,21,385,19],[359,8,386,6,"callbacks"],[359,17,386,15],[359,18,386,16,"forEach"],[359,25,386,23],[359,26,386,24,"callback"],[359,34,386,32],[359,38,386,36,"callback"],[359,46,386,44],[359,47,386,45],[359,50,386,48,"rest"],[359,54,386,52],[359,55,386,53],[359,56,386,54],[360,6,387,4],[361,4,388,2],[363,4,390,2],[364,0,391,0],[365,0,392,0],[366,4,393,3,"sendEnvelope"],[366,16,393,15,"sendEnvelope"],[366,17,393,16,"envelope"],[366,25,393,24],[366,27,393,26],[367,6,394,4],[367,10,394,8],[367,11,394,9,"emit"],[367,15,394,13],[367,16,394,14],[367,32,394,30],[367,34,394,32,"envelope"],[367,42,394,40],[367,43,394,41],[368,6,396,4],[368,10,396,8],[368,14,396,12],[368,15,396,13,"_isEnabled"],[368,25,396,23],[368,26,396,24],[368,27,396,25],[368,31,396,29],[368,35,396,33],[368,36,396,34,"_transport"],[368,46,396,44],[368,48,396,46],[369,8,397,6],[369,15,397,13],[369,19,397,17],[369,20,397,18,"_transport"],[369,30,397,28],[369,31,397,29,"send"],[369,35,397,33],[369,36,397,34,"envelope"],[369,44,397,42],[369,45,397,43],[369,46,397,44,"then"],[369,50,397,48],[369,51,397,49],[369,55,397,53],[369,57,397,55,"reason"],[369,63,397,61],[369,67,397,65],[370,10,398,8,"DEBUG_BUILD"],[370,33,398,19],[370,37,398,23,"logger"],[370,51,398,29],[370,52,398,30,"error"],[370,57,398,35],[370,58,398,36],[370,89,398,67],[370,91,398,69,"reason"],[370,97,398,75],[370,98,398,76],[371,10,399,8],[371,17,399,15,"reason"],[371,23,399,21],[372,8,400,6],[372,9,400,7],[372,10,400,8],[373,6,401,4],[374,6,403,4,"DEBUG_BUILD"],[374,29,403,15],[374,33,403,19,"logger"],[374,47,403,25],[374,48,403,26,"error"],[374,53,403,31],[374,54,403,32],[374,74,403,52],[374,75,403,53],[375,6,405,4],[375,13,405,11],[375,17,405,11,"resolvedSyncPromise"],[375,49,405,30],[375,51,405,31],[375,52,405,32],[375,53,405,33],[375,54,405,34],[376,4,406,2],[378,4,408,2],[380,4,410,2],[381,4,411,3,"_setupIntegrations"],[381,22,411,21,"_setupIntegrations"],[381,23,411,21],[381,25,411,24],[382,6,412,4],[382,12,412,10],[383,8,412,12,"integrations"],[384,6,412,25],[384,7,412,26],[384,10,412,29],[384,14,412,33],[384,15,412,34,"_options"],[384,23,412,42],[385,6,413,4],[385,10,413,8],[385,11,413,9,"_integrations"],[385,24,413,22],[385,27,413,25],[385,31,413,25,"setupIntegrations"],[385,61,413,42],[385,63,413,43],[385,67,413,47],[385,69,413,49,"integrations"],[385,81,413,61],[385,82,413,62],[386,6,414,4],[386,10,414,4,"afterSetupIntegrations"],[386,45,414,26],[386,47,414,27],[386,51,414,31],[386,53,414,33,"integrations"],[386,65,414,45],[386,66,414,46],[387,4,415,2],[389,4,417,2],[390,4,418,3,"_updateSessionFromEvent"],[390,27,418,26,"_updateSessionFromEvent"],[390,28,418,27,"session"],[390,35,418,34],[390,37,418,36,"event"],[390,42,418,41],[390,44,418,43],[391,6,419,4],[391,10,419,8,"crashed"],[391,17,419,15],[391,20,419,18,"event"],[391,25,419,23],[391,26,419,24,"level"],[391,31,419,29],[391,36,419,34],[391,43,419,41],[392,6,420,4],[392,10,420,8,"errored"],[392,17,420,15],[392,20,420,18],[392,25,420,23],[393,6,421,4],[393,12,421,10,"exceptions"],[393,22,421,20],[393,25,421,23,"event"],[393,30,421,28],[393,31,421,29,"exception"],[393,40,421,38],[393,44,421,42,"event"],[393,49,421,47],[393,50,421,48,"exception"],[393,59,421,57],[393,60,421,58,"values"],[393,66,421,64],[394,6,423,4],[394,10,423,8,"exceptions"],[394,20,423,18],[394,22,423,20],[395,8,424,6,"errored"],[395,15,424,13],[395,18,424,16],[395,22,424,20],[396,8,426,6],[396,13,426,11],[396,19,426,17,"ex"],[396,21,426,19],[396,25,426,23,"exceptions"],[396,35,426,33],[396,37,426,35],[397,10,427,8],[397,16,427,14,"mechanism"],[397,25,427,23],[397,28,427,26,"ex"],[397,30,427,28],[397,31,427,29,"mechanism"],[397,40,427,38],[398,10,428,8],[398,14,428,12,"mechanism"],[398,23,428,21],[398,27,428,25,"mechanism"],[398,36,428,34],[398,37,428,35,"handled"],[398,44,428,42],[398,49,428,47],[398,54,428,52],[398,56,428,54],[399,12,429,10,"crashed"],[399,19,429,17],[399,22,429,20],[399,26,429,24],[400,12,430,10],[401,10,431,8],[402,8,432,6],[403,6,433,4],[405,6,435,4],[406,6,436,4],[407,6,437,4],[408,6,438,4],[408,12,438,10,"sessionNonTerminal"],[408,30,438,28],[408,33,438,31,"session"],[408,40,438,38],[408,41,438,39,"status"],[408,47,438,45],[408,52,438,50],[408,56,438,54],[409,6,439,4],[409,12,439,10,"shouldUpdateAndSend"],[409,31,439,29],[409,34,439,33,"sessionNonTerminal"],[409,52,439,51],[409,56,439,55,"session"],[409,63,439,62],[409,64,439,63,"errors"],[409,70,439,69],[409,75,439,74],[409,76,439,75],[409,80,439,81,"sessionNonTerminal"],[409,98,439,99],[409,102,439,103,"crashed"],[409,109,439,111],[410,6,441,4],[410,10,441,8,"shouldUpdateAndSend"],[410,29,441,27],[410,31,441,29],[411,8,442,6],[411,12,442,6,"updateSession"],[411,34,442,19],[411,36,442,20,"session"],[411,43,442,27],[411,45,442,29],[412,10,443,8],[412,14,443,12,"crashed"],[412,21,443,19],[412,25,443,23],[413,12,443,25,"status"],[413,18,443,31],[413,20,443,33],[414,10,443,43],[414,11,443,44],[414,12,443,45],[415,10,444,8,"errors"],[415,16,444,14],[415,18,444,16,"session"],[415,25,444,23],[415,26,444,24,"errors"],[415,32,444,30],[415,36,444,34,"Number"],[415,42,444,40],[415,43,444,41,"errored"],[415,50,444,48],[415,54,444,52,"crashed"],[415,61,444,59],[416,8,445,6],[416,9,445,7],[416,10,445,8],[417,8,446,6],[417,12,446,10],[417,13,446,11,"captureSession"],[417,27,446,25],[417,28,446,26,"session"],[417,35,446,33],[417,36,446,34],[418,6,447,4],[419,4,448,2],[421,4,450,2],[422,0,451,0],[423,0,452,0],[424,0,453,0],[425,0,454,0],[426,0,455,0],[427,0,456,0],[428,0,457,0],[429,0,458,0],[430,0,459,0],[431,4,460,3,"_isClientDoneProcessing"],[431,27,460,26,"_isClientDoneProcessing"],[431,28,460,27,"timeout"],[431,35,460,34],[431,37,460,36],[432,6,461,4],[432,13,461,11],[432,17,461,15,"SyncPromise"],[432,41,461,26],[432,42,461,27,"resolve"],[432,49,461,34],[432,53,461,38],[433,8,462,6],[433,12,462,10,"ticked"],[433,18,462,16],[433,21,462,19],[433,22,462,20],[434,8,463,6],[434,14,463,12,"tick"],[434,18,463,16],[434,21,463,19],[434,22,463,20],[435,8,465,6],[435,14,465,12,"interval"],[435,22,465,20],[435,25,465,23,"setInterval"],[435,36,465,34],[435,37,465,35],[435,43,465,41],[436,10,466,8],[436,14,466,12],[436,18,466,16],[436,19,466,17,"_numProcessing"],[436,33,466,31],[436,37,466,35],[436,38,466,36],[436,40,466,38],[437,12,467,10,"clearInterval"],[437,25,467,23],[437,26,467,24,"interval"],[437,34,467,32],[437,35,467,33],[438,12,468,10,"resolve"],[438,19,468,17],[438,20,468,18],[438,24,468,22],[438,25,468,23],[439,10,469,8],[439,11,469,9],[439,17,469,15],[440,12,470,10,"ticked"],[440,18,470,16],[440,22,470,20,"tick"],[440,26,470,24],[441,12,471,10],[441,16,471,14,"timeout"],[441,23,471,21],[441,27,471,25,"ticked"],[441,33,471,31],[441,37,471,35,"timeout"],[441,44,471,42],[441,46,471,44],[442,14,472,12,"clearInterval"],[442,27,472,25],[442,28,472,26,"interval"],[442,36,472,34],[442,37,472,35],[443,14,473,12,"resolve"],[443,21,473,19],[443,22,473,20],[443,27,473,25],[443,28,473,26],[444,12,474,10],[445,10,475,8],[446,8,476,6],[446,9,476,7],[446,11,476,9,"tick"],[446,15,476,13],[446,16,476,14],[447,6,477,4],[447,7,477,5],[447,8,477,6],[448,4,478,2],[450,4,480,2],[451,4,481,3,"_isEnabled"],[451,14,481,13,"_isEnabled"],[451,15,481,13],[451,17,481,16],[452,6,482,4],[452,13,482,11],[452,17,482,15],[452,18,482,16,"getOptions"],[452,28,482,26],[452,29,482,27],[452,30,482,28],[452,31,482,29,"enabled"],[452,38,482,36],[452,43,482,41],[452,48,482,46],[452,52,482,50],[452,56,482,54],[452,57,482,55,"_transport"],[452,67,482,65],[452,72,482,70,"undefined"],[452,81,482,79],[453,4,483,2],[455,4,485,2],[456,0,486,0],[457,0,487,0],[458,0,488,0],[459,0,489,0],[460,0,490,0],[461,0,491,0],[462,0,492,0],[463,0,493,0],[464,0,494,0],[465,0,495,0],[466,0,496,0],[467,0,497,0],[468,0,498,0],[469,4,499,3,"_prepareEvent"],[469,17,499,16,"_prepareEvent"],[469,18,500,4,"event"],[469,23,500,9],[469,25,501,4,"hint"],[469,29,501,8],[469,31,502,4,"currentScope"],[469,43,502,16],[469,46,502,19],[469,50,502,19,"getCurrentScope"],[469,80,502,34],[469,82,502,35],[469,83,502,36],[469,85,503,4,"isolationScope"],[469,99,503,18],[469,102,503,21],[469,106,503,21,"getIsolationScope"],[469,138,503,38],[469,140,503,39],[469,141,503,40],[469,143,504,4],[470,6,505,4],[470,12,505,10,"options"],[470,19,505,17],[470,22,505,20],[470,26,505,24],[470,27,505,25,"getOptions"],[470,37,505,35],[470,38,505,36],[470,39,505,37],[471,6,506,4],[471,12,506,10,"integrations"],[471,24,506,22],[471,27,506,25,"Object"],[471,33,506,31],[471,34,506,32,"keys"],[471,38,506,36],[471,39,506,37],[471,43,506,41],[471,44,506,42,"_integrations"],[471,57,506,55],[471,58,506,56],[472,6,507,4],[472,10,507,8],[472,11,507,9,"hint"],[472,15,507,13],[472,16,507,14,"integrations"],[472,28,507,26],[472,32,507,30,"integrations"],[472,44,507,42],[472,45,507,43,"length"],[472,51,507,49],[472,54,507,52],[472,55,507,53],[472,57,507,55],[473,8,508,6,"hint"],[473,12,508,10],[473,13,508,11,"integrations"],[473,25,508,23],[473,28,508,26,"integrations"],[473,40,508,38],[474,6,509,4],[475,6,511,4],[475,10,511,8],[475,11,511,9,"emit"],[475,15,511,13],[475,16,511,14],[475,33,511,31],[475,35,511,33,"event"],[475,40,511,38],[475,42,511,40,"hint"],[475,46,511,44],[475,47,511,45],[476,6,513,4],[476,10,513,8],[476,11,513,9,"event"],[476,16,513,14],[476,17,513,15,"type"],[476,21,513,19],[476,23,513,21],[477,8,514,6,"isolationScope"],[477,22,514,20],[477,23,514,21,"setLastEventId"],[477,37,514,35],[477,38,514,36,"event"],[477,43,514,41],[477,44,514,42,"event_id"],[477,52,514,50],[477,56,514,54,"hint"],[477,60,514,58],[477,61,514,59,"event_id"],[477,69,514,67],[477,70,514,68],[478,6,515,4],[479,6,517,4],[479,13,517,11],[479,17,517,11,"prepareEvent"],[479,43,517,23],[479,45,517,24,"options"],[479,52,517,31],[479,54,517,33,"event"],[479,59,517,38],[479,61,517,40,"hint"],[479,65,517,44],[479,67,517,46,"currentScope"],[479,79,517,58],[479,81,517,60],[479,85,517,64],[479,87,517,66,"isolationScope"],[479,101,517,80],[479,102,517,81],[479,103,517,82,"then"],[479,107,517,86],[479,108,517,87,"evt"],[479,111,517,90],[479,115,517,94],[480,8,518,6],[480,12,518,10,"evt"],[480,15,518,13],[480,20,518,18],[480,24,518,22],[480,26,518,24],[481,10,519,8],[481,17,519,15,"evt"],[481,20,519,18],[482,8,520,6],[483,8,522,6,"evt"],[483,11,522,9],[483,12,522,10,"contexts"],[483,20,522,18],[483,23,522,21],[484,10,523,8,"trace"],[484,15,523,13],[484,17,523,15],[484,21,523,15,"getTraceContextFromScope"],[484,60,523,39],[484,62,523,40,"currentScope"],[484,74,523,52],[484,75,523,53],[485,10,524,8],[485,13,524,11,"evt"],[485,16,524,14],[485,17,524,15,"contexts"],[486,8,525,6],[486,9,525,7],[487,8,527,6],[487,14,527,12,"dynamicSamplingContext"],[487,36,527,34],[487,39,527,37],[487,43,527,37,"getDynamicSamplingContextFromScope"],[487,101,527,71],[487,103,527,72],[487,107,527,76],[487,109,527,78,"currentScope"],[487,121,527,90],[487,122,527,91],[488,8,529,6,"evt"],[488,11,529,9],[488,12,529,10,"sdkProcessingMetadata"],[488,33,529,31],[488,36,529,34],[489,10,530,8,"dynamicSamplingContext"],[489,32,530,30],[490,10,531,8],[490,13,531,11,"evt"],[490,16,531,14],[490,17,531,15,"sdkProcessingMetadata"],[491,8,532,6],[491,9,532,7],[492,8,534,6],[492,15,534,13,"evt"],[492,18,534,16],[493,6,535,4],[493,7,535,5],[493,8,535,6],[494,4,536,2],[496,4,538,2],[497,0,539,0],[498,0,540,0],[499,0,541,0],[500,0,542,0],[501,0,543,0],[502,4,544,3,"_captureEvent"],[502,17,544,16,"_captureEvent"],[502,18,544,17,"event"],[502,23,544,22],[502,25,544,24,"hint"],[502,29,544,28],[502,32,544,31],[502,33,544,32],[502,34,544,33],[502,36,544,35,"scope"],[502,41,544,40],[502,43,544,42],[503,6,545,4],[503,13,545,11],[503,17,545,15],[503,18,545,16,"_processEvent"],[503,31,545,29],[503,32,545,30,"event"],[503,37,545,35],[503,39,545,37,"hint"],[503,43,545,41],[503,45,545,43,"scope"],[503,50,545,48],[503,51,545,49],[503,52,545,50,"then"],[503,56,545,54],[503,57,546,6,"finalEvent"],[503,67,546,16],[503,71,546,20],[504,8,547,8],[504,15,547,15,"finalEvent"],[504,25,547,25],[504,26,547,26,"event_id"],[504,34,547,34],[505,6,548,6],[505,7,548,7],[505,9,549,6,"reason"],[505,15,549,12],[505,19,549,16],[506,8,550,8],[506,12,550,12,"DEBUG_BUILD"],[506,35,550,23],[506,37,550,25],[507,10,551,10],[508,10,552,10],[509,10,553,10],[509,14,553,14,"reason"],[509,20,553,20],[509,32,553,32,"SentryError"],[509,50,553,43],[509,54,553,47,"reason"],[509,60,553,53],[509,61,553,54,"logLevel"],[509,69,553,62],[509,74,553,67],[509,79,553,72],[509,81,553,74],[510,12,554,12,"logger"],[510,26,554,18],[510,27,554,19,"log"],[510,30,554,22],[510,31,554,23,"reason"],[510,37,554,29],[510,38,554,30,"message"],[510,45,554,37],[510,46,554,38],[511,10,555,10],[511,11,555,11],[511,17,555,17],[512,12,556,12,"logger"],[512,26,556,18],[512,27,556,19,"warn"],[512,31,556,23],[512,32,556,24,"reason"],[512,38,556,30],[512,39,556,31],[513,10,557,10],[514,8,558,8],[515,8,559,8],[515,15,559,15,"undefined"],[515,24,559,24],[516,6,560,6],[516,7,561,4],[516,8,561,5],[517,4,562,2],[519,4,564,2],[520,0,565,0],[521,0,566,0],[522,0,567,0],[523,0,568,0],[524,0,569,0],[525,0,570,0],[526,0,571,0],[527,0,572,0],[528,0,573,0],[529,0,574,0],[530,0,575,0],[531,0,576,0],[532,4,577,3,"_processEvent"],[532,17,577,16,"_processEvent"],[532,18,577,17,"event"],[532,23,577,22],[532,25,577,24,"hint"],[532,29,577,28],[532,31,577,30,"currentScope"],[532,43,577,42],[532,45,577,44],[533,6,578,4],[533,12,578,10,"options"],[533,19,578,17],[533,22,578,20],[533,26,578,24],[533,27,578,25,"getOptions"],[533,37,578,35],[533,38,578,36],[533,39,578,37],[534,6,579,4],[534,12,579,10],[535,8,579,12,"sampleRate"],[536,6,579,23],[536,7,579,24],[536,10,579,27,"options"],[536,17,579,34],[537,6,581,4],[537,12,581,10,"isTransaction"],[537,25,581,23],[537,28,581,26,"isTransactionEvent"],[537,46,581,44],[537,47,581,45,"event"],[537,52,581,50],[537,53,581,51],[538,6,582,4],[538,12,582,10,"isError"],[538,19,582,17],[538,22,582,20,"isErrorEvent"],[538,34,582,32],[538,35,582,33,"event"],[538,40,582,38],[538,41,582,39],[539,6,583,4],[539,12,583,10,"eventType"],[539,21,583,19],[539,24,583,22,"event"],[539,29,583,27],[539,30,583,28,"type"],[539,34,583,32],[539,38,583,36],[539,45,583,43],[540,6,584,4],[540,12,584,10,"beforeSendLabel"],[540,27,584,25],[540,30,584,28],[540,56,584,54,"eventType"],[540,65,584,63],[540,69,584,67],[542,6,586,4],[543,6,587,4],[544,6,588,4],[545,6,589,4],[545,12,589,10,"parsedSampleRate"],[545,28,589,26],[545,31,589,29],[545,38,589,36,"sampleRate"],[545,48,589,46],[545,53,589,51],[545,64,589,62],[545,67,589,65,"undefined"],[545,76,589,74],[545,79,589,77],[545,83,589,77,"parseSampleRate"],[545,115,589,92],[545,117,589,93,"sampleRate"],[545,127,589,103],[545,128,589,104],[546,6,590,4],[546,10,590,8,"isError"],[546,17,590,15],[546,21,590,19],[546,28,590,26,"parsedSampleRate"],[546,44,590,42],[546,49,590,47],[546,57,590,55],[546,61,590,59,"Math"],[546,65,590,63],[546,66,590,64,"random"],[546,72,590,70],[546,73,590,71],[546,74,590,72],[546,77,590,75,"parsedSampleRate"],[546,93,590,91],[546,95,590,93],[547,8,591,6],[547,12,591,10],[547,13,591,11,"recordDroppedEvent"],[547,31,591,29],[547,32,591,30],[547,45,591,43],[547,47,591,45],[547,54,591,52],[547,56,591,54,"event"],[547,61,591,59],[547,62,591,60],[548,8,592,6],[548,15,592,13],[548,19,592,13,"rejectedSyncPromise"],[548,51,592,32],[548,53,593,8],[548,57,593,12,"SentryError"],[548,75,593,23],[548,76,594,10],[548,160,594,94,"sampleRate"],[548,170,594,104],[548,173,594,107],[548,175,595,10],[548,180,596,8],[548,181,597,6],[548,182,597,7],[549,6,598,4],[550,6,600,4],[550,12,600,10,"dataCategory"],[550,24,600,22],[550,27,600,25,"eventType"],[550,36,600,34],[550,41,600,39],[550,55,600,53],[550,58,600,56],[550,66,600,64],[550,69,600,67,"eventType"],[550,78,600,76],[551,6,602,4],[551,12,602,10,"sdkProcessingMetadata"],[551,33,602,31],[551,36,602,34,"event"],[551,41,602,39],[551,42,602,40,"sdkProcessingMetadata"],[551,63,602,61],[551,67,602,65],[551,68,602,66],[551,69,602,67],[552,6,603,4],[552,12,603,10,"capturedSpanIsolationScope"],[552,38,603,36],[552,41,603,39,"sdkProcessingMetadata"],[552,62,603,60],[552,63,603,61,"capturedSpanIsolationScope"],[552,89,603,87],[553,6,605,4],[553,13,605,11],[553,17,605,15],[553,18,605,16,"_prepareEvent"],[553,31,605,29],[553,32,605,30,"event"],[553,37,605,35],[553,39,605,37,"hint"],[553,43,605,41],[553,45,605,43,"currentScope"],[553,57,605,55],[553,59,605,57,"capturedSpanIsolationScope"],[553,85,605,83],[553,86,605,84],[553,87,606,7,"then"],[553,91,606,11],[553,92,606,12,"prepared"],[553,100,606,20],[553,104,606,24],[554,8,607,8],[554,12,607,12,"prepared"],[554,20,607,20],[554,25,607,25],[554,29,607,29],[554,31,607,31],[555,10,608,10],[555,14,608,14],[555,15,608,15,"recordDroppedEvent"],[555,33,608,33],[555,34,608,34],[555,51,608,51],[555,53,608,53,"dataCategory"],[555,65,608,65],[555,67,608,67,"event"],[555,72,608,72],[555,73,608,73],[556,10,609,10],[556,16,609,16],[556,20,609,20,"SentryError"],[556,38,609,31],[556,39,609,32],[556,97,609,90],[556,99,609,92],[556,104,609,97],[556,105,609,98],[557,8,610,8],[558,8,612,8],[558,14,612,14,"isInternalException"],[558,33,612,33],[558,36,612,36,"hint"],[558,40,612,40],[558,41,612,41,"data"],[558,45,612,45],[558,49,612,50,"hint"],[558,53,612,54],[558,54,612,55,"data"],[558,58,612,59],[558,59,612,62,"__sentry__"],[558,69,612,72],[558,74,612,77],[558,78,612,81],[559,8,613,8],[559,12,613,12,"isInternalException"],[559,31,613,31],[559,33,613,33],[560,10,614,10],[560,17,614,17,"prepared"],[560,25,614,25],[561,8,615,8],[562,8,617,8],[562,14,617,14,"result"],[562,20,617,20],[562,23,617,23,"processBeforeSend"],[562,40,617,40],[562,41,617,41],[562,45,617,45],[562,47,617,47,"options"],[562,54,617,54],[562,56,617,56,"prepared"],[562,64,617,64],[562,66,617,66,"hint"],[562,70,617,70],[562,71,617,71],[563,8,618,8],[563,15,618,15,"_validateBeforeSendResult"],[563,40,618,40],[563,41,618,41,"result"],[563,47,618,47],[563,49,618,49,"beforeSendLabel"],[563,64,618,64],[563,65,618,65],[564,6,619,6],[564,7,619,7],[564,8,619,8],[564,9,620,7,"then"],[564,13,620,11],[564,14,620,12,"processedEvent"],[564,28,620,26],[564,32,620,30],[565,8,621,8],[565,12,621,12,"processedEvent"],[565,26,621,26],[565,31,621,31],[565,35,621,35],[565,37,621,37],[566,10,622,10],[566,14,622,14],[566,15,622,15,"recordDroppedEvent"],[566,33,622,33],[566,34,622,34],[566,47,622,47],[566,49,622,49,"dataCategory"],[566,61,622,61],[566,63,622,63,"event"],[566,68,622,68],[566,69,622,69],[567,10,623,10],[567,14,623,14,"isTransaction"],[567,27,623,27],[567,29,623,29],[568,12,624,12],[568,18,624,18,"spans"],[568,23,624,23],[568,26,624,26,"event"],[568,31,624,31],[568,32,624,32,"spans"],[568,37,624,37],[568,41,624,41],[568,43,624,43],[569,12,625,12],[570,12,626,12],[570,18,626,18,"spanCount"],[570,27,626,27],[570,30,626,30],[570,31,626,31],[570,34,626,34,"spans"],[570,39,626,39],[570,40,626,40,"length"],[570,46,626,46],[571,12,627,12],[571,16,627,16],[571,17,627,17,"recordDroppedEvent"],[571,35,627,35],[571,36,627,36],[571,49,627,49],[571,51,627,51],[571,57,627,57],[571,59,627,59,"spanCount"],[571,68,627,68],[571,69,627,69],[572,10,628,10],[573,10,629,10],[573,16,629,16],[573,20,629,20,"SentryError"],[573,38,629,31],[573,39,629,32],[573,42,629,35,"beforeSendLabel"],[573,57,629,50],[573,99,629,92],[573,101,629,94],[573,106,629,99],[573,107,629,100],[574,8,630,8],[575,8,632,8],[575,14,632,14,"session"],[575,21,632,21],[575,24,632,24,"currentScope"],[575,36,632,36],[575,40,632,40,"currentScope"],[575,52,632,52],[575,53,632,53,"getSession"],[575,63,632,63],[575,64,632,64],[575,65,632,65],[576,8,633,8],[576,12,633,12],[576,13,633,13,"isTransaction"],[576,26,633,26],[576,30,633,30,"session"],[576,37,633,37],[576,39,633,39],[577,10,634,10],[577,14,634,14],[577,15,634,15,"_updateSessionFromEvent"],[577,38,634,38],[577,39,634,39,"session"],[577,46,634,46],[577,48,634,48,"processedEvent"],[577,62,634,62],[577,63,634,63],[578,8,635,8],[579,8,637,8],[579,12,637,12,"isTransaction"],[579,25,637,25],[579,27,637,27],[580,10,638,10],[580,16,638,16,"spanCountBefore"],[580,31,638,31],[580,34,639,13,"processedEvent"],[580,48,639,27],[580,49,639,28,"sdkProcessingMetadata"],[580,70,639,49],[580,74,639,53,"processedEvent"],[580,88,639,67],[580,89,639,68,"sdkProcessingMetadata"],[580,110,639,89],[580,111,639,90,"spanCountBeforeProcessing"],[580,136,639,115],[580,140,640,12],[580,141,640,13],[581,10,641,10],[581,16,641,16,"spanCountAfter"],[581,30,641,30],[581,33,641,33,"processedEvent"],[581,47,641,47],[581,48,641,48,"spans"],[581,53,641,53],[581,56,641,56,"processedEvent"],[581,70,641,70],[581,71,641,71,"spans"],[581,76,641,76],[581,77,641,77,"length"],[581,83,641,83],[581,86,641,86],[581,87,641,87],[582,10,643,10],[582,16,643,16,"droppedSpanCount"],[582,32,643,32],[582,35,643,35,"spanCountBefore"],[582,50,643,50],[582,53,643,53,"spanCountAfter"],[582,67,643,67],[583,10,644,10],[583,14,644,14,"droppedSpanCount"],[583,30,644,30],[583,33,644,33],[583,34,644,34],[583,36,644,36],[584,12,645,12],[584,16,645,16],[584,17,645,17,"recordDroppedEvent"],[584,35,645,35],[584,36,645,36],[584,49,645,49],[584,51,645,51],[584,57,645,57],[584,59,645,59,"droppedSpanCount"],[584,75,645,75],[584,76,645,76],[585,10,646,10],[586,8,647,8],[588,8,649,8],[589,8,650,8],[590,8,651,8],[591,8,652,8],[591,14,652,14,"transactionInfo"],[591,29,652,29],[591,32,652,32,"processedEvent"],[591,46,652,46],[591,47,652,47,"transaction_info"],[591,63,652,63],[592,8,653,8],[592,12,653,12,"isTransaction"],[592,25,653,25],[592,29,653,29,"transactionInfo"],[592,44,653,44],[592,48,653,48,"processedEvent"],[592,62,653,62],[592,63,653,63,"transaction"],[592,74,653,74],[592,79,653,79,"event"],[592,84,653,84],[592,85,653,85,"transaction"],[592,96,653,96],[592,98,653,98],[593,10,654,10],[593,16,654,16,"source"],[593,22,654,22],[593,25,654,25],[593,33,654,33],[594,10,655,10,"processedEvent"],[594,24,655,24],[594,25,655,25,"transaction_info"],[594,41,655,41],[594,44,655,44],[595,12,656,12],[595,15,656,15,"transactionInfo"],[595,30,656,30],[596,12,657,12,"source"],[597,10,658,10],[597,11,658,11],[598,8,659,8],[599,8,661,8],[599,12,661,12],[599,13,661,13,"sendEvent"],[599,22,661,22],[599,23,661,23,"processedEvent"],[599,37,661,37],[599,39,661,39,"hint"],[599,43,661,43],[599,44,661,44],[600,8,662,8],[600,15,662,15,"processedEvent"],[600,29,662,29],[601,6,663,6],[601,7,663,7],[601,8,663,8],[601,9,664,7,"then"],[601,13,664,11],[601,14,664,12],[601,18,664,16],[601,20,664,18,"reason"],[601,26,664,24],[601,30,664,28],[602,8,665,8],[602,12,665,12,"reason"],[602,18,665,18],[602,30,665,30,"SentryError"],[602,48,665,41],[602,50,665,43],[603,10,666,10],[603,16,666,16,"reason"],[603,22,666,22],[604,8,667,8],[605,8,669,8],[605,12,669,12],[605,13,669,13,"captureException"],[605,29,669,29],[605,30,669,30,"reason"],[605,36,669,36],[605,38,669,38],[606,10,670,10,"data"],[606,14,670,14],[606,16,670,16],[607,12,671,12,"__sentry__"],[607,22,671,22],[607,24,671,24],[608,10,672,10],[608,11,672,11],[609,10,673,10,"originalException"],[609,27,673,27],[609,29,673,29,"reason"],[610,8,674,8],[610,9,674,9],[610,10,674,10],[611,8,675,8],[611,14,675,14],[611,18,675,18,"SentryError"],[611,36,675,29],[611,37,676,10],[611,163,676,136,"reason"],[611,169,676,142],[611,171,677,8],[611,172,677,9],[612,6,678,6],[612,7,678,7],[612,8,678,8],[613,4,679,2],[615,4,681,2],[616,0,682,0],[617,0,683,0],[618,4,684,3,"_process"],[618,12,684,11,"_process"],[618,13,684,12,"promise"],[618,20,684,19],[618,22,684,21],[619,6,685,4],[619,10,685,8],[619,11,685,9,"_numProcessing"],[619,25,685,23],[619,27,685,25],[620,6,686,4],[620,11,686,9,"promise"],[620,18,686,16],[620,19,686,17,"then"],[620,23,686,21],[620,24,687,6,"value"],[620,29,687,11],[620,33,687,15],[621,8,688,8],[621,12,688,12],[621,13,688,13,"_numProcessing"],[621,27,688,27],[621,29,688,29],[622,8,689,8],[622,15,689,15,"value"],[622,20,689,20],[623,6,690,6],[623,7,690,7],[623,9,691,6,"reason"],[623,15,691,12],[623,19,691,16],[624,8,692,8],[624,12,692,12],[624,13,692,13,"_numProcessing"],[624,27,692,27],[624,29,692,29],[625,8,693,8],[625,15,693,15,"reason"],[625,21,693,21],[626,6,694,6],[626,7,695,4],[626,8,695,5],[627,4,696,2],[629,4,698,2],[630,0,699,0],[631,0,700,0],[632,4,701,3,"_clearOutcomes"],[632,18,701,17,"_clearOutcomes"],[632,19,701,17],[632,21,701,20],[633,6,702,4],[633,12,702,10,"outcomes"],[633,20,702,18],[633,23,702,21],[633,27,702,25],[633,28,702,26,"_outcomes"],[633,37,702,35],[634,6,703,4],[634,10,703,8],[634,11,703,9,"_outcomes"],[634,20,703,18],[634,23,703,21],[634,24,703,22],[634,25,703,23],[635,6,704,4],[635,13,704,11,"Object"],[635,19,704,17],[635,20,704,18,"entries"],[635,27,704,25],[635,28,704,26,"outcomes"],[635,36,704,34],[635,37,704,35],[635,38,704,36,"map"],[635,41,704,39],[635,42,704,40],[635,43,704,41],[635,44,704,42,"key"],[635,47,704,45],[635,49,704,47,"quantity"],[635,57,704,55],[635,58,704,56],[635,63,704,61],[636,8,705,6],[636,14,705,12],[636,15,705,13,"reason"],[636,21,705,19],[636,23,705,21,"category"],[636,31,705,29],[636,32,705,30],[636,35,705,33,"key"],[636,38,705,36],[636,39,705,37,"split"],[636,44,705,42],[636,45,705,43],[636,48,705,46],[636,49,705,47],[637,8,706,6],[637,15,706,13],[638,10,707,8,"reason"],[638,16,707,14],[639,10,708,8,"category"],[639,18,708,16],[640,10,709,8,"quantity"],[641,8,710,6],[641,9,710,7],[642,6,711,4],[642,7,711,5],[642,8,711,6],[643,4,712,2],[645,4,714,2],[646,0,715,0],[647,0,716,0],[648,4,717,3,"_flushOutcomes"],[648,18,717,17,"_flushOutcomes"],[648,19,717,17],[648,21,717,20],[649,6,718,4,"DEBUG_BUILD"],[649,29,718,15],[649,33,718,19,"logger"],[649,47,718,25],[649,48,718,26,"log"],[649,51,718,29],[649,52,718,30],[649,74,718,52],[649,75,718,53],[650,6,720,4],[650,12,720,10,"outcomes"],[650,20,720,18],[650,23,720,21],[650,27,720,25],[650,28,720,26,"_clearOutcomes"],[650,42,720,40],[650,43,720,41],[650,44,720,42],[651,6,722,4],[651,10,722,8,"outcomes"],[651,18,722,16],[651,19,722,17,"length"],[651,25,722,23],[651,30,722,28],[651,31,722,29],[651,33,722,31],[652,8,723,6,"DEBUG_BUILD"],[652,31,723,17],[652,35,723,21,"logger"],[652,49,723,27],[652,50,723,28,"log"],[652,53,723,31],[652,54,723,32],[652,75,723,53],[652,76,723,54],[653,8,724,6],[654,6,725,4],[656,6,727,4],[657,6,728,4],[657,10,728,8],[657,11,728,9],[657,15,728,13],[657,16,728,14,"_dsn"],[657,20,728,18],[657,22,728,20],[658,8,729,6,"DEBUG_BUILD"],[658,31,729,17],[658,35,729,21,"logger"],[658,49,729,27],[658,50,729,28,"log"],[658,53,729,31],[658,54,729,32],[658,95,729,73],[658,96,729,74],[659,8,730,6],[660,6,731,4],[661,6,733,4,"DEBUG_BUILD"],[661,29,733,15],[661,33,733,19,"logger"],[661,47,733,25],[661,48,733,26,"log"],[661,51,733,29],[661,52,733,30],[661,71,733,49],[661,73,733,51,"outcomes"],[661,81,733,59],[661,82,733,60],[662,6,735,4],[662,12,735,10,"envelope"],[662,20,735,18],[662,23,735,21],[662,27,735,21,"createClientReportEnvelope"],[662,67,735,47],[662,69,735,48,"outcomes"],[662,77,735,56],[662,79,735,58],[662,83,735,62],[662,84,735,63,"_options"],[662,92,735,71],[662,93,735,72,"tunnel"],[662,99,735,78],[662,103,735,82],[662,107,735,82,"dsnToString"],[662,123,735,93],[662,125,735,94],[662,129,735,98],[662,130,735,99,"_dsn"],[662,134,735,103],[662,135,735,104],[662,136,735,105],[664,6,737,4],[665,6,738,4],[666,6,739,4],[666,10,739,8],[666,11,739,9,"sendEnvelope"],[666,23,739,21],[666,24,739,22,"envelope"],[666,32,739,30],[666,33,739,31],[667,4,740,2],[669,4,742,2],[670,0,743,0],[671,0,744,0],[672,2,746,0],[674,2,748,0],[675,0,749,0],[676,0,750,0],[677,2,748,0,"exports"],[677,9,748,0],[677,10,748,0,"BaseClient"],[677,20,748,0],[677,23,748,0,"BaseClient"],[677,33,748,0],[678,2,751,0],[678,11,751,9,"_validateBeforeSendResult"],[678,36,751,34,"_validateBeforeSendResult"],[678,37,752,2,"beforeSendResult"],[678,53,752,18],[678,55,753,2,"beforeSendLabel"],[678,70,753,17],[678,72,754,2],[679,4,755,2],[679,10,755,8,"invalidValueError"],[679,27,755,25],[679,30,755,28],[679,33,755,31,"beforeSendLabel"],[679,48,755,46],[679,89,755,87],[680,4,756,2],[680,8,756,6],[680,12,756,6,"isThenable"],[680,26,756,16],[680,28,756,17,"beforeSendResult"],[680,44,756,33],[680,45,756,34],[680,47,756,36],[681,6,757,4],[681,13,757,11,"beforeSendResult"],[681,29,757,27],[681,30,757,28,"then"],[681,34,757,32],[681,35,758,6,"event"],[681,40,758,11],[681,44,758,15],[682,8,759,8],[682,12,759,12],[682,13,759,13],[682,17,759,13,"isPlainObject"],[682,34,759,26],[682,36,759,27,"event"],[682,41,759,32],[682,42,759,33],[682,46,759,37,"event"],[682,51,759,42],[682,56,759,47],[682,60,759,51],[682,62,759,53],[683,10,760,10],[683,16,760,16],[683,20,760,20,"SentryError"],[683,38,760,31],[683,39,760,32,"invalidValueError"],[683,56,760,49],[683,57,760,50],[684,8,761,8],[685,8,762,8],[685,15,762,15,"event"],[685,20,762,20],[686,6,763,6],[686,7,763,7],[686,9,764,6,"e"],[686,10,764,7],[686,14,764,11],[687,8,765,8],[687,14,765,14],[687,18,765,18,"SentryError"],[687,36,765,29],[687,37,765,30],[687,40,765,33,"beforeSendLabel"],[687,55,765,48],[687,73,765,66,"e"],[687,74,765,67],[687,76,765,69],[687,77,765,70],[688,6,766,6],[688,7,767,4],[688,8,767,5],[689,4,768,2],[689,5,768,3],[689,11,768,9],[689,15,768,13],[689,16,768,14],[689,20,768,14,"isPlainObject"],[689,37,768,27],[689,39,768,28,"beforeSendResult"],[689,55,768,44],[689,56,768,45],[689,60,768,49,"beforeSendResult"],[689,76,768,65],[689,81,768,70],[689,85,768,74],[689,87,768,76],[690,6,769,4],[690,12,769,10],[690,16,769,14,"SentryError"],[690,34,769,25],[690,35,769,26,"invalidValueError"],[690,52,769,43],[690,53,769,44],[691,4,770,2],[692,4,771,2],[692,11,771,9,"beforeSendResult"],[692,27,771,25],[693,2,772,0],[695,2,774,0],[696,0,775,0],[697,0,776,0],[698,2,777,0],[698,11,777,9,"processBeforeSend"],[698,28,777,26,"processBeforeSend"],[698,29,778,2,"client"],[698,35,778,8],[698,37,779,2,"options"],[698,44,779,9],[698,46,780,2,"event"],[698,51,780,7],[698,53,781,2,"hint"],[698,57,781,6],[698,59,782,2],[699,4,783,2],[699,10,783,8],[700,6,783,10,"beforeSend"],[700,16,783,20],[701,6,783,22,"beforeSendTransaction"],[701,27,783,43],[702,6,783,45,"beforeSendSpan"],[703,4,783,60],[703,5,783,61],[703,8,783,64,"options"],[703,15,783,71],[704,4,785,2],[704,8,785,6,"isErrorEvent"],[704,20,785,18],[704,21,785,19,"event"],[704,26,785,24],[704,27,785,25],[704,31,785,29,"beforeSend"],[704,41,785,39],[704,43,785,41],[705,6,786,4],[705,13,786,11,"beforeSend"],[705,23,786,21],[705,24,786,22,"event"],[705,29,786,27],[705,31,786,29,"hint"],[705,35,786,33],[705,36,786,34],[706,4,787,2],[707,4,789,2],[707,8,789,6,"isTransactionEvent"],[707,26,789,24],[707,27,789,25,"event"],[707,32,789,30],[707,33,789,31],[707,35,789,33],[708,6,790,4],[708,10,790,8,"event"],[708,15,790,13],[708,16,790,14,"spans"],[708,21,790,19],[708,25,790,23,"beforeSendSpan"],[708,39,790,37],[708,41,790,39],[709,8,791,6],[709,14,791,12,"processedSpans"],[709,28,791,26],[709,31,791,29],[709,33,791,31],[710,8,792,6],[710,13,792,11],[710,19,792,17,"span"],[710,23,792,21],[710,27,792,25,"event"],[710,32,792,30],[710,33,792,31,"spans"],[710,38,792,36],[710,40,792,38],[711,10,793,8],[711,16,793,14,"processedSpan"],[711,29,793,27],[711,32,793,30,"beforeSendSpan"],[711,46,793,44],[711,47,793,45,"span"],[711,51,793,49],[711,52,793,50],[712,10,794,8],[712,14,794,12,"processedSpan"],[712,27,794,25],[712,29,794,27],[713,12,795,10,"processedSpans"],[713,26,795,24],[713,27,795,25,"push"],[713,31,795,29],[713,32,795,30,"processedSpan"],[713,45,795,43],[713,46,795,44],[714,10,796,8],[714,11,796,9],[714,17,796,15],[715,12,797,10],[715,16,797,10,"showSpanDropWarning"],[715,46,797,29],[715,48,797,30],[715,49,797,31],[716,12,798,10,"client"],[716,18,798,16],[716,19,798,17,"recordDroppedEvent"],[716,37,798,35],[716,38,798,36],[716,51,798,49],[716,53,798,51],[716,59,798,57],[716,60,798,58],[717,10,799,8],[718,8,800,6],[719,8,801,6,"event"],[719,13,801,11],[719,14,801,12,"spans"],[719,19,801,17],[719,22,801,20,"processedSpans"],[719,36,801,34],[720,6,802,4],[721,6,804,4],[721,10,804,8,"beforeSendTransaction"],[721,31,804,29],[721,33,804,31],[722,8,805,6],[722,12,805,10,"event"],[722,17,805,15],[722,18,805,16,"spans"],[722,23,805,21],[722,25,805,23],[723,10,806,8],[724,10,807,8],[725,10,808,8],[725,16,808,14,"spanCountBefore"],[725,31,808,29],[725,34,808,32,"event"],[725,39,808,37],[725,40,808,38,"spans"],[725,45,808,43],[725,46,808,44,"length"],[725,52,808,50],[726,10,809,8,"event"],[726,15,809,13],[726,16,809,14,"sdkProcessingMetadata"],[726,37,809,35],[726,40,809,38],[727,12,810,10],[727,15,810,13,"event"],[727,20,810,18],[727,21,810,19,"sdkProcessingMetadata"],[727,42,810,40],[728,12,811,10,"spanCountBeforeProcessing"],[728,37,811,35],[728,39,811,37,"spanCountBefore"],[729,10,812,8],[729,11,812,9],[730,8,813,6],[731,8,814,6],[731,15,814,13,"beforeSendTransaction"],[731,36,814,34],[731,37,814,35,"event"],[731,42,814,40],[731,44,814,42,"hint"],[731,48,814,46],[731,49,814,47],[732,6,815,4],[733,4,816,2],[734,4,818,2],[734,11,818,9,"event"],[734,16,818,14],[735,2,819,0],[736,2,821,0],[736,11,821,9,"isErrorEvent"],[736,23,821,21,"isErrorEvent"],[736,24,821,22,"event"],[736,29,821,27],[736,31,821,29],[737,4,822,2],[737,11,822,9,"event"],[737,16,822,14],[737,17,822,15,"type"],[737,21,822,19],[737,26,822,24,"undefined"],[737,35,822,33],[738,2,823,0],[739,2,825,0],[739,11,825,9,"isTransactionEvent"],[739,29,825,27,"isTransactionEvent"],[739,30,825,28,"event"],[739,35,825,33],[739,37,825,35],[740,4,826,2],[740,11,826,9,"event"],[740,16,826,14],[740,17,826,15,"type"],[740,21,826,19],[740,26,826,24],[740,39,826,37],[741,2,827,0],[742,0,827,1],[742,3]],"functionMap":{"names":["<global>","BaseClient","BaseClient#constructor","tracingOptions.find$argument_0","consoleSandbox$argument_0","BaseClient#captureException","eventFromException.then$argument_0","BaseClient#captureMessage","promisedEvent.then$argument_0","BaseClient#captureEvent","BaseClient#captureSession","BaseClient#getDsn","BaseClient#getOptions","BaseClient#getSdkMetadata","BaseClient#getTransport","BaseClient#flush","_isClientDoneProcessing.then$argument_0","transport.flush.then$argument_0","BaseClient#close","flush.then$argument_0","BaseClient#getEventProcessors","BaseClient#addEventProcessor","BaseClient#init","_options.integrations.some$argument_0","BaseClient#getIntegrationByName","BaseClient#addIntegration","BaseClient#sendEvent","promise.then$argument_0","BaseClient#sendSession","BaseClient#recordDroppedEvent","BaseClient#on","<anonymous>","BaseClient#emit","callbacks.forEach$argument_0","BaseClient#sendEnvelope","_transport.send.then$argument_1","BaseClient#_setupIntegrations","BaseClient#_updateSessionFromEvent","BaseClient#_isClientDoneProcessing","SyncPromise$argument_0","setInterval$argument_0","BaseClient#_isEnabled","BaseClient#_prepareEvent","prepareEvent.then$argument_0","BaseClient#_captureEvent","_processEvent.then$argument_0","_processEvent.then$argument_1","BaseClient#_processEvent","_prepareEvent.then$argument_0","_prepareEvent.then.then$argument_0","_prepareEvent.then.then.then$argument_1","BaseClient#_process","promise.then$argument_1","BaseClient#_clearOutcomes","Object.entries.map$argument_0","BaseClient#_flushOutcomes","_validateBeforeSendResult","beforeSendResult.then$argument_0","beforeSendResult.then$argument_1","processBeforeSend","isErrorEvent","isTransactionEvent"],"mappings":"AAA;ACoD;GCkB;gDC8B,2DD;qBEE;OFK;GDE;GIK;+DCe;yDDC;GJK;GMK;qCCiB,iED;GNG;GQK;GRoB;GSK;GTQ;GUK;GVE;GWK;GXE;GYO;GZE;GaK;GbE;GcK;wDCI;6CCC,sDD;ODC;GdI;GiBK;oCCC;KDI;GjBC;GmBG;GnBE;GoBG;GpBE;GqBG;sCCQ,0CD;GrBI;GuBO;GvBE;GwBK;GxBS;GyBK;mBCW,gED;GzBE;G2BK;G3BM;G4BK;G5BgB;G6BQ;WCU;KDM;G7BC;G+BK;wBCG,6BD;G/BE;GiCK;uDCI;ODG;GjCM;GmCK;GnCI;GoCG;GpC8B;GqCY;2BCC;mCCI;ODW;KDC;GrCC;GwCG;GxCE;GyCgB;uFCkB;KDkB;GzCC;G2CQ;MCE;ODE;MEC;OFW;G3CE;G8Ce;YC6B;ODa;YEC;OF2C;kBGC;OHc;G9CC;GkDK;MxBG;OwBG;MCC;ODG;GlDE;GoDK;wCCG;KDO;GpDC;GsDK;GtDuB;CDM;AwDK;MCO;ODK;MEC;OFE;CxDM;A2DK;C3D0C;A4DE;C5DE;A6DE;C7DE"}},"type":"js/module"}]}