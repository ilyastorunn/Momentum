{"dependencies":[{"name":"../carrier.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":47,"index":47}}],"key":"/CHWq5A6N7GxVM0vQJS3tsMdXuE=","exportNames":["*"]}},{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":48},"end":{"line":2,"column":95,"index":143}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../asyncContext/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":144},"end":{"line":3,"column":67,"index":211}}],"key":"0lgbsiOKFlLN56kb6TORm/gLqf8=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":212},"end":{"line":4,"column":48,"index":260}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../semanticAttributes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":261},"end":{"line":5,"column":115,"index":376}}],"key":"Ovsn9ORXEwSazI36ru//KBDD8LQ=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":377},"end":{"line":6,"column":50,"index":427}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/propagationContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":428},"end":{"line":7,"column":71,"index":499}}],"key":"acTMSbYB3Ip99hQ+0SCJ99493GM=","exportNames":["*"]}},{"name":"../utils-hoist/tracing.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":500},"end":{"line":8,"column":74,"index":574}}],"key":"A6M78jOorF6ZvWa6FxdnTB6bynQ=","exportNames":["*"]}},{"name":"../utils/handleCallbackErrors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":575},"end":{"line":9,"column":72,"index":647}}],"key":"y2C2MazQzuoczeVtvZJXH2UirDs=","exportNames":["*"]}},{"name":"../utils/hasTracingEnabled.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":648},"end":{"line":10,"column":66,"index":714}}],"key":"SyK4SleOU+9x9l8aHJ9lO4+iDQU=","exportNames":["*"]}},{"name":"../utils/spanOnScope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":715},"end":{"line":11,"column":77,"index":792}}],"key":"y89KJcz9cqvIDyT9JAMyeJm48wg=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":793},"end":{"line":12,"column":123,"index":916}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./dynamicSamplingContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":917},"end":{"line":13,"column":97,"index":1014}}],"key":"8KGumsjxSOLk/SYXIEAvTlUL2ZI=","exportNames":["*"]}},{"name":"./logSpans.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":1015},"end":{"line":14,"column":45,"index":1060}}],"key":"pjbMKgT12NHQhSaWy64GGjRJ9sU=","exportNames":["*"]}},{"name":"./sampling.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":1061},"end":{"line":15,"column":43,"index":1104}}],"key":"4efP59LIIQeRPpu2Pzd7YKAG0T4=","exportNames":["*"]}},{"name":"./sentryNonRecordingSpan.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":1105},"end":{"line":16,"column":69,"index":1174}}],"key":"rJBV9PfB2h47oMRsp2+zRvY6wpk=","exportNames":["*"]}},{"name":"./sentrySpan.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":1175},"end":{"line":17,"column":45,"index":1220}}],"key":"2nJvou0VKMznWZK22YxkoQAJlNw=","exportNames":["*"]}},{"name":"./spanstatus.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":1221},"end":{"line":18,"column":52,"index":1273}}],"key":"Y3Jz0fXFV1VA2c+eEGi4NJg5MfQ=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":19,"column":0,"index":1274},"end":{"line":19,"column":53,"index":1327}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.continueTrace = void 0;\n  exports.startInactiveSpan = startInactiveSpan;\n  exports.startNewTrace = startNewTrace;\n  exports.startSpan = startSpan;\n  exports.startSpanManual = startSpanManual;\n  exports.suppressTracing = suppressTracing;\n  exports.withActiveSpan = withActiveSpan;\n  var _carrier = require(_dependencyMap[0], \"../carrier.js\");\n  var _currentScopes = require(_dependencyMap[1], \"../currentScopes.js\");\n  var _index = require(_dependencyMap[2], \"../asyncContext/index.js\");\n  var _debugBuild = require(_dependencyMap[3], \"../debug-build.js\");\n  var _semanticAttributes = require(_dependencyMap[4], \"../semanticAttributes.js\");\n  var _logger = require(_dependencyMap[5], \"../utils-hoist/logger.js\");\n  var _propagationContext = require(_dependencyMap[6], \"../utils-hoist/propagationContext.js\");\n  var _tracing = require(_dependencyMap[7], \"../utils-hoist/tracing.js\");\n  var _handleCallbackErrors = require(_dependencyMap[8], \"../utils/handleCallbackErrors.js\");\n  var _hasTracingEnabled = require(_dependencyMap[9], \"../utils/hasTracingEnabled.js\");\n  var _spanOnScope = require(_dependencyMap[10], \"../utils/spanOnScope.js\");\n  var _spanUtils = require(_dependencyMap[11], \"../utils/spanUtils.js\");\n  var _dynamicSamplingContext = require(_dependencyMap[12], \"./dynamicSamplingContext.js\");\n  var _logSpans = require(_dependencyMap[13], \"./logSpans.js\");\n  var _sampling = require(_dependencyMap[14], \"./sampling.js\");\n  var _sentryNonRecordingSpan = require(_dependencyMap[15], \"./sentryNonRecordingSpan.js\");\n  var _sentrySpan = require(_dependencyMap[16], \"./sentrySpan.js\");\n  var _spanstatus = require(_dependencyMap[17], \"./spanstatus.js\");\n  var _utils = require(_dependencyMap[18], \"./utils.js\");\n  const SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n  /**\n   * Wraps a function with a transaction/span and finishes the span after the function is done.\n   * The created span is the active span and will be used as parent by other spans created inside the function\n   * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n   *\n   * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n   *\n   * You'll always get a span passed to the callback,\n   * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n   */\n  function startSpan(options, callback) {\n    const acs = getAcs();\n    if (acs.startSpan) {\n      return acs.startSpan(options, callback);\n    }\n    const spanArguments = parseSentrySpanArguments(options);\n    const {\n      forceTransaction,\n      parentSpan: customParentSpan\n    } = options;\n    return (0, _currentScopes.withScope)(options.scope, () => {\n      // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n      const wrapper = getActiveSpanWrapper(customParentSpan);\n      return wrapper(() => {\n        const scope = (0, _currentScopes.getCurrentScope)();\n        const parentSpan = getParentSpan(scope);\n        const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n        const activeSpan = shouldSkipSpan ? new _sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n          parentSpan,\n          spanArguments,\n          forceTransaction,\n          scope\n        });\n        (0, _spanOnScope._setSpanForScope)(scope, activeSpan);\n        return (0, _handleCallbackErrors.handleCallbackErrors)(() => callback(activeSpan), () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const {\n            status\n          } = (0, _spanUtils.spanToJSON)(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({\n              code: _spanstatus.SPAN_STATUS_ERROR,\n              message: 'internal_error'\n            });\n          }\n        }, () => activeSpan.end());\n      });\n    });\n  }\n\n  /**\n   * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n   * after the function is done automatically. You'll have to call `span.end()` manually.\n   *\n   * The created span is the active span and will be used as parent by other spans created inside the function\n   * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n   *\n   * You'll always get a span passed to the callback,\n   * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n   */\n  function startSpanManual(options, callback) {\n    const acs = getAcs();\n    if (acs.startSpanManual) {\n      return acs.startSpanManual(options, callback);\n    }\n    const spanArguments = parseSentrySpanArguments(options);\n    const {\n      forceTransaction,\n      parentSpan: customParentSpan\n    } = options;\n    return (0, _currentScopes.withScope)(options.scope, () => {\n      // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n      const wrapper = getActiveSpanWrapper(customParentSpan);\n      return wrapper(() => {\n        const scope = (0, _currentScopes.getCurrentScope)();\n        const parentSpan = getParentSpan(scope);\n        const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n        const activeSpan = shouldSkipSpan ? new _sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n          parentSpan,\n          spanArguments,\n          forceTransaction,\n          scope\n        });\n        (0, _spanOnScope._setSpanForScope)(scope, activeSpan);\n        function finishAndSetSpan() {\n          activeSpan.end();\n        }\n        return (0, _handleCallbackErrors.handleCallbackErrors)(() => callback(activeSpan, finishAndSetSpan), () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const {\n            status\n          } = (0, _spanUtils.spanToJSON)(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({\n              code: _spanstatus.SPAN_STATUS_ERROR,\n              message: 'internal_error'\n            });\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n   * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n   *\n   * If you want to create a span that is set as active, use {@link startSpan}.\n   *\n   * This function will always return a span,\n   * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n   */\n  function startInactiveSpan(options) {\n    const acs = getAcs();\n    if (acs.startInactiveSpan) {\n      return acs.startInactiveSpan(options);\n    }\n    const spanArguments = parseSentrySpanArguments(options);\n    const {\n      forceTransaction,\n      parentSpan: customParentSpan\n    } = options;\n\n    // If `options.scope` is defined, we use this as as a wrapper,\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = options.scope ? callback => (0, _currentScopes.withScope)(options.scope, callback) : customParentSpan !== undefined ? callback => withActiveSpan(customParentSpan, callback) : callback => callback();\n    return wrapper(() => {\n      const scope = (0, _currentScopes.getCurrentScope)();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      if (shouldSkipSpan) {\n        return new _sentryNonRecordingSpan.SentryNonRecordingSpan();\n      }\n      return createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n    });\n  }\n\n  /**\n   * Continue a trace from `sentry-trace` and `baggage` values.\n   * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n   * and `<meta name=\"baggage\">` HTML tags.\n   *\n   * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n   * be attached to the incoming trace.\n   */\n  const continueTrace = (options, callback) => {\n    const carrier = (0, _carrier.getMainCarrier)();\n    const acs = (0, _index.getAsyncContextStrategy)(carrier);\n    if (acs.continueTrace) {\n      return acs.continueTrace(options, callback);\n    }\n    const {\n      sentryTrace,\n      baggage\n    } = options;\n    return (0, _currentScopes.withScope)(scope => {\n      const propagationContext = (0, _tracing.propagationContextFromHeaders)(sentryTrace, baggage);\n      scope.setPropagationContext(propagationContext);\n      return callback();\n    });\n  };\n\n  /**\n   * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n   * passed `null` to start an entirely new span tree.\n   *\n   * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n   * spans started within the callback will not be attached to a parent span.\n   * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n   * @returns the value returned from the provided callback function.\n   */\n  exports.continueTrace = continueTrace;\n  function withActiveSpan(span, callback) {\n    const acs = getAcs();\n    if (acs.withActiveSpan) {\n      return acs.withActiveSpan(span, callback);\n    }\n    return (0, _currentScopes.withScope)(scope => {\n      (0, _spanOnScope._setSpanForScope)(scope, span || undefined);\n      return callback(scope);\n    });\n  }\n\n  /** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\n  function suppressTracing(callback) {\n    const acs = getAcs();\n    if (acs.suppressTracing) {\n      return acs.suppressTracing(callback);\n    }\n    return (0, _currentScopes.withScope)(scope => {\n      scope.setSDKProcessingMetadata({\n        [SUPPRESS_TRACING_KEY]: true\n      });\n      return callback();\n    });\n  }\n\n  /**\n   * Starts a new trace for the duration of the provided callback. Spans started within the\n   * callback will be part of the new trace instead of a potentially previously started trace.\n   *\n   * Important: Only use this function if you want to override the default trace lifetime and\n   * propagation mechanism of the SDK for the duration and scope of the provided callback.\n   * The newly created trace will also be the root of a new distributed trace, for example if\n   * you make http requests within the callback.\n   * This function might be useful if the operation you want to instrument should not be part\n   * of a potentially ongoing trace.\n   *\n   * Default behavior:\n   * - Server-side: A new trace is started for each incoming request.\n   * - Browser: A new trace is started for each page our route. Navigating to a new route\n   *            or page will automatically create a new trace.\n   */\n  function startNewTrace(callback) {\n    return (0, _currentScopes.withScope)(scope => {\n      scope.setPropagationContext({\n        traceId: (0, _propagationContext.generateTraceId)()\n      });\n      _debugBuild.DEBUG_BUILD && _logger.logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n      return withActiveSpan(null, callback);\n    });\n  }\n  function createChildOrRootSpan({\n    parentSpan,\n    spanArguments,\n    forceTransaction,\n    scope\n  }) {\n    if (!(0, _hasTracingEnabled.hasTracingEnabled)()) {\n      return new _sentryNonRecordingSpan.SentryNonRecordingSpan();\n    }\n    const isolationScope = (0, _currentScopes.getIsolationScope)();\n    let span;\n    if (parentSpan && !forceTransaction) {\n      span = _startChildSpan(parentSpan, scope, spanArguments);\n      (0, _spanUtils.addChildSpanToSpan)(parentSpan, span);\n    } else if (parentSpan) {\n      // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n      const dsc = (0, _dynamicSamplingContext.getDynamicSamplingContextFromSpan)(parentSpan);\n      const {\n        traceId,\n        spanId: parentSpanId\n      } = parentSpan.spanContext();\n      const parentSampled = (0, _spanUtils.spanIsSampled)(parentSpan);\n      span = _startRootSpan({\n        traceId,\n        parentSpanId,\n        ...spanArguments\n      }, scope, parentSampled);\n      (0, _dynamicSamplingContext.freezeDscOnSpan)(span, dsc);\n    } else {\n      const {\n        traceId,\n        dsc,\n        parentSpanId,\n        sampled: parentSampled\n      } = {\n        ...isolationScope.getPropagationContext(),\n        ...scope.getPropagationContext()\n      };\n      span = _startRootSpan({\n        traceId,\n        parentSpanId,\n        ...spanArguments\n      }, scope, parentSampled);\n      if (dsc) {\n        (0, _dynamicSamplingContext.freezeDscOnSpan)(span, dsc);\n      }\n    }\n    (0, _logSpans.logSpanStart)(span);\n    (0, _utils.setCapturedScopesOnSpan)(span, scope, isolationScope);\n    return span;\n  }\n\n  /**\n   * This converts StartSpanOptions to SentrySpanArguments.\n   * For the most part (for now) we accept the same options,\n   * but some of them need to be transformed.\n   */\n  function parseSentrySpanArguments(options) {\n    const exp = options.experimental || {};\n    const initialCtx = {\n      isStandalone: exp.standalone,\n      ...options\n    };\n    if (options.startTime) {\n      const ctx = {\n        ...initialCtx\n      };\n      ctx.startTimestamp = (0, _spanUtils.spanTimeInputToSeconds)(options.startTime);\n      delete ctx.startTime;\n      return ctx;\n    }\n    return initialCtx;\n  }\n  function getAcs() {\n    const carrier = (0, _carrier.getMainCarrier)();\n    return (0, _index.getAsyncContextStrategy)(carrier);\n  }\n  function _startRootSpan(spanArguments, scope, parentSampled) {\n    const client = (0, _currentScopes.getClient)();\n    const options = client && client.getOptions() || {};\n    const {\n      name = '',\n      attributes\n    } = spanArguments;\n    const [sampled, sampleRate] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? [false] : (0, _sampling.sampleSpan)(options, {\n      name,\n      parentSampled,\n      attributes,\n      transactionContext: {\n        name,\n        parentSampled\n      }\n    });\n    const rootSpan = new _sentrySpan.SentrySpan({\n      ...spanArguments,\n      attributes: {\n        [_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n        ...spanArguments.attributes\n      },\n      sampled\n    });\n    if (sampleRate !== undefined) {\n      rootSpan.setAttribute(_semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n    }\n    if (client) {\n      client.emit('spanStart', rootSpan);\n    }\n    return rootSpan;\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * This inherits the sampling decision from the parent span.\n   */\n  function _startChildSpan(parentSpan, scope, spanArguments) {\n    const {\n      spanId,\n      traceId\n    } = parentSpan.spanContext();\n    const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : (0, _spanUtils.spanIsSampled)(parentSpan);\n    const childSpan = sampled ? new _sentrySpan.SentrySpan({\n      ...spanArguments,\n      parentSpanId: spanId,\n      traceId,\n      sampled\n    }) : new _sentryNonRecordingSpan.SentryNonRecordingSpan({\n      traceId\n    });\n    (0, _spanUtils.addChildSpanToSpan)(parentSpan, childSpan);\n    const client = (0, _currentScopes.getClient)();\n    if (client) {\n      client.emit('spanStart', childSpan);\n      // If it has an endTimestamp, it's already ended\n      if (spanArguments.endTimestamp) {\n        client.emit('spanEnd', childSpan);\n      }\n    }\n    return childSpan;\n  }\n  function getParentSpan(scope) {\n    const span = (0, _spanOnScope._getSpanForScope)(scope);\n    if (!span) {\n      return undefined;\n    }\n    const client = (0, _currentScopes.getClient)();\n    const options = client ? client.getOptions() : {};\n    if (options.parentSpanIsAlwaysRootSpan) {\n      return (0, _spanUtils.getRootSpan)(span);\n    }\n    return span;\n  }\n  function getActiveSpanWrapper(parentSpan) {\n    return parentSpan !== undefined ? callback => {\n      return withActiveSpan(parentSpan, callback);\n    } : callback => callback();\n  }\n});","lineCount":416,"map":[[12,2,1,0],[12,6,1,0,"_carrier"],[12,14,1,0],[12,17,1,0,"require"],[12,24,1,0],[12,25,1,0,"_dependencyMap"],[12,39,1,0],[13,2,2,0],[13,6,2,0,"_currentScopes"],[13,20,2,0],[13,23,2,0,"require"],[13,30,2,0],[13,31,2,0,"_dependencyMap"],[13,45,2,0],[14,2,3,0],[14,6,3,0,"_index"],[14,12,3,0],[14,15,3,0,"require"],[14,22,3,0],[14,23,3,0,"_dependencyMap"],[14,37,3,0],[15,2,4,0],[15,6,4,0,"_debugBuild"],[15,17,4,0],[15,20,4,0,"require"],[15,27,4,0],[15,28,4,0,"_dependencyMap"],[15,42,4,0],[16,2,5,0],[16,6,5,0,"_semanticAttributes"],[16,25,5,0],[16,28,5,0,"require"],[16,35,5,0],[16,36,5,0,"_dependencyMap"],[16,50,5,0],[17,2,6,0],[17,6,6,0,"_logger"],[17,13,6,0],[17,16,6,0,"require"],[17,23,6,0],[17,24,6,0,"_dependencyMap"],[17,38,6,0],[18,2,7,0],[18,6,7,0,"_propagationContext"],[18,25,7,0],[18,28,7,0,"require"],[18,35,7,0],[18,36,7,0,"_dependencyMap"],[18,50,7,0],[19,2,8,0],[19,6,8,0,"_tracing"],[19,14,8,0],[19,17,8,0,"require"],[19,24,8,0],[19,25,8,0,"_dependencyMap"],[19,39,8,0],[20,2,9,0],[20,6,9,0,"_handleCallbackErrors"],[20,27,9,0],[20,30,9,0,"require"],[20,37,9,0],[20,38,9,0,"_dependencyMap"],[20,52,9,0],[21,2,10,0],[21,6,10,0,"_hasTracingEnabled"],[21,24,10,0],[21,27,10,0,"require"],[21,34,10,0],[21,35,10,0,"_dependencyMap"],[21,49,10,0],[22,2,11,0],[22,6,11,0,"_spanOnScope"],[22,18,11,0],[22,21,11,0,"require"],[22,28,11,0],[22,29,11,0,"_dependencyMap"],[22,43,11,0],[23,2,12,0],[23,6,12,0,"_spanUtils"],[23,16,12,0],[23,19,12,0,"require"],[23,26,12,0],[23,27,12,0,"_dependencyMap"],[23,41,12,0],[24,2,13,0],[24,6,13,0,"_dynamicSamplingContext"],[24,29,13,0],[24,32,13,0,"require"],[24,39,13,0],[24,40,13,0,"_dependencyMap"],[24,54,13,0],[25,2,14,0],[25,6,14,0,"_logSpans"],[25,15,14,0],[25,18,14,0,"require"],[25,25,14,0],[25,26,14,0,"_dependencyMap"],[25,40,14,0],[26,2,15,0],[26,6,15,0,"_sampling"],[26,15,15,0],[26,18,15,0,"require"],[26,25,15,0],[26,26,15,0,"_dependencyMap"],[26,40,15,0],[27,2,16,0],[27,6,16,0,"_sentryNonRecordingSpan"],[27,29,16,0],[27,32,16,0,"require"],[27,39,16,0],[27,40,16,0,"_dependencyMap"],[27,54,16,0],[28,2,17,0],[28,6,17,0,"_sentrySpan"],[28,17,17,0],[28,20,17,0,"require"],[28,27,17,0],[28,28,17,0,"_dependencyMap"],[28,42,17,0],[29,2,18,0],[29,6,18,0,"_spanstatus"],[29,17,18,0],[29,20,18,0,"require"],[29,27,18,0],[29,28,18,0,"_dependencyMap"],[29,42,18,0],[30,2,19,0],[30,6,19,0,"_utils"],[30,12,19,0],[30,15,19,0,"require"],[30,22,19,0],[30,23,19,0,"_dependencyMap"],[30,37,19,0],[31,2,21,0],[31,8,21,6,"SUPPRESS_TRACING_KEY"],[31,28,21,26],[31,31,21,29],[31,60,21,58],[33,2,23,0],[34,0,24,0],[35,0,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,2,33,0],[43,11,33,9,"startSpan"],[43,20,33,18,"startSpan"],[43,21,33,19,"options"],[43,28,33,26],[43,30,33,28,"callback"],[43,38,33,36],[43,40,33,38],[44,4,34,2],[44,10,34,8,"acs"],[44,13,34,11],[44,16,34,14,"getAcs"],[44,22,34,20],[44,23,34,21],[44,24,34,22],[45,4,35,2],[45,8,35,6,"acs"],[45,11,35,9],[45,12,35,10,"startSpan"],[45,21,35,19],[45,23,35,21],[46,6,36,4],[46,13,36,11,"acs"],[46,16,36,14],[46,17,36,15,"startSpan"],[46,26,36,24],[46,27,36,25,"options"],[46,34,36,32],[46,36,36,34,"callback"],[46,44,36,42],[46,45,36,43],[47,4,37,2],[48,4,39,2],[48,10,39,8,"spanArguments"],[48,23,39,21],[48,26,39,24,"parseSentrySpanArguments"],[48,50,39,48],[48,51,39,49,"options"],[48,58,39,56],[48,59,39,57],[49,4,40,2],[49,10,40,8],[50,6,40,10,"forceTransaction"],[50,22,40,26],[51,6,40,28,"parentSpan"],[51,16,40,38],[51,18,40,40,"customParentSpan"],[52,4,40,57],[52,5,40,58],[52,8,40,61,"options"],[52,15,40,68],[53,4,42,2],[53,11,42,9],[53,15,42,9,"withScope"],[53,39,42,18],[53,41,42,19,"options"],[53,48,42,26],[53,49,42,27,"scope"],[53,54,42,32],[53,56,42,34],[53,62,42,40],[54,6,43,4],[55,6,44,4],[55,12,44,10,"wrapper"],[55,19,44,17],[55,22,44,20,"getActiveSpanWrapper"],[55,42,44,40],[55,43,44,41,"customParentSpan"],[55,59,44,57],[55,60,44,58],[56,6,46,4],[56,13,46,11,"wrapper"],[56,20,46,18],[56,21,46,19],[56,27,46,25],[57,8,47,6],[57,14,47,12,"scope"],[57,19,47,17],[57,22,47,20],[57,26,47,20,"getCurrentScope"],[57,56,47,35],[57,58,47,36],[57,59,47,37],[58,8,48,6],[58,14,48,12,"parentSpan"],[58,24,48,22],[58,27,48,25,"getParentSpan"],[58,40,48,38],[58,41,48,39,"scope"],[58,46,48,44],[58,47,48,45],[59,8,50,6],[59,14,50,12,"shouldSkipSpan"],[59,28,50,26],[59,31,50,29,"options"],[59,38,50,36],[59,39,50,37,"onlyIfParent"],[59,51,50,49],[59,55,50,53],[59,56,50,54,"parentSpan"],[59,66,50,64],[60,8,51,6],[60,14,51,12,"activeSpan"],[60,24,51,22],[60,27,51,25,"shouldSkipSpan"],[60,41,51,39],[60,44,52,10],[60,48,52,14,"SentryNonRecordingSpan"],[60,94,52,36],[60,95,52,37],[60,96,52,38],[60,99,53,10,"createChildOrRootSpan"],[60,120,53,31],[60,121,53,32],[61,10,54,12,"parentSpan"],[61,20,54,22],[62,10,55,12,"spanArguments"],[62,23,55,25],[63,10,56,12,"forceTransaction"],[63,26,56,28],[64,10,57,12,"scope"],[65,8,58,10],[65,9,58,11],[65,10,58,12],[66,8,60,6],[66,12,60,6,"_setSpanForScope"],[66,41,60,22],[66,43,60,23,"scope"],[66,48,60,28],[66,50,60,30,"activeSpan"],[66,60,60,40],[66,61,60,41],[67,8,62,6],[67,15,62,13],[67,19,62,13,"handleCallbackErrors"],[67,61,62,33],[67,63,63,8],[67,69,63,14,"callback"],[67,77,63,22],[67,78,63,23,"activeSpan"],[67,88,63,33],[67,89,63,34],[67,91,64,8],[67,97,64,14],[68,10,65,10],[69,10,66,10],[69,16,66,16],[70,12,66,18,"status"],[71,10,66,25],[71,11,66,26],[71,14,66,29],[71,18,66,29,"spanToJSON"],[71,39,66,39],[71,41,66,40,"activeSpan"],[71,51,66,50],[71,52,66,51],[72,10,67,10],[72,14,67,14,"activeSpan"],[72,24,67,24],[72,25,67,25,"isRecording"],[72,36,67,36],[72,37,67,37],[72,38,67,38],[72,43,67,43],[72,44,67,44,"status"],[72,50,67,50],[72,54,67,54,"status"],[72,60,67,60],[72,65,67,65],[72,69,67,69],[72,70,67,70],[72,72,67,72],[73,12,68,12,"activeSpan"],[73,22,68,22],[73,23,68,23,"setStatus"],[73,32,68,32],[73,33,68,33],[74,14,68,35,"code"],[74,18,68,39],[74,20,68,41,"SPAN_STATUS_ERROR"],[74,49,68,58],[75,14,68,60,"message"],[75,21,68,67],[75,23,68,69],[76,12,68,86],[76,13,68,87],[76,14,68,88],[77,10,69,10],[78,8,70,8],[78,9,70,9],[78,11,71,8],[78,17,71,14,"activeSpan"],[78,27,71,24],[78,28,71,25,"end"],[78,31,71,28],[78,32,71,29],[78,33,72,6],[78,34,72,7],[79,6,73,4],[79,7,73,5],[79,8,73,6],[80,4,74,2],[80,5,74,3],[80,6,74,4],[81,2,75,0],[83,2,77,0],[84,0,78,0],[85,0,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,2,87,0],[93,11,87,9,"startSpanManual"],[93,26,87,24,"startSpanManual"],[93,27,87,25,"options"],[93,34,87,32],[93,36,87,34,"callback"],[93,44,87,42],[93,46,87,44],[94,4,88,2],[94,10,88,8,"acs"],[94,13,88,11],[94,16,88,14,"getAcs"],[94,22,88,20],[94,23,88,21],[94,24,88,22],[95,4,89,2],[95,8,89,6,"acs"],[95,11,89,9],[95,12,89,10,"startSpanManual"],[95,27,89,25],[95,29,89,27],[96,6,90,4],[96,13,90,11,"acs"],[96,16,90,14],[96,17,90,15,"startSpanManual"],[96,32,90,30],[96,33,90,31,"options"],[96,40,90,38],[96,42,90,40,"callback"],[96,50,90,48],[96,51,90,49],[97,4,91,2],[98,4,93,2],[98,10,93,8,"spanArguments"],[98,23,93,21],[98,26,93,24,"parseSentrySpanArguments"],[98,50,93,48],[98,51,93,49,"options"],[98,58,93,56],[98,59,93,57],[99,4,94,2],[99,10,94,8],[100,6,94,10,"forceTransaction"],[100,22,94,26],[101,6,94,28,"parentSpan"],[101,16,94,38],[101,18,94,40,"customParentSpan"],[102,4,94,57],[102,5,94,58],[102,8,94,61,"options"],[102,15,94,68],[103,4,96,2],[103,11,96,9],[103,15,96,9,"withScope"],[103,39,96,18],[103,41,96,19,"options"],[103,48,96,26],[103,49,96,27,"scope"],[103,54,96,32],[103,56,96,34],[103,62,96,40],[104,6,97,4],[105,6,98,4],[105,12,98,10,"wrapper"],[105,19,98,17],[105,22,98,20,"getActiveSpanWrapper"],[105,42,98,40],[105,43,98,41,"customParentSpan"],[105,59,98,57],[105,60,98,58],[106,6,100,4],[106,13,100,11,"wrapper"],[106,20,100,18],[106,21,100,19],[106,27,100,25],[107,8,101,6],[107,14,101,12,"scope"],[107,19,101,17],[107,22,101,20],[107,26,101,20,"getCurrentScope"],[107,56,101,35],[107,58,101,36],[107,59,101,37],[108,8,102,6],[108,14,102,12,"parentSpan"],[108,24,102,22],[108,27,102,25,"getParentSpan"],[108,40,102,38],[108,41,102,39,"scope"],[108,46,102,44],[108,47,102,45],[109,8,104,6],[109,14,104,12,"shouldSkipSpan"],[109,28,104,26],[109,31,104,29,"options"],[109,38,104,36],[109,39,104,37,"onlyIfParent"],[109,51,104,49],[109,55,104,53],[109,56,104,54,"parentSpan"],[109,66,104,64],[110,8,105,6],[110,14,105,12,"activeSpan"],[110,24,105,22],[110,27,105,25,"shouldSkipSpan"],[110,41,105,39],[110,44,106,10],[110,48,106,14,"SentryNonRecordingSpan"],[110,94,106,36],[110,95,106,37],[110,96,106,38],[110,99,107,10,"createChildOrRootSpan"],[110,120,107,31],[110,121,107,32],[111,10,108,12,"parentSpan"],[111,20,108,22],[112,10,109,12,"spanArguments"],[112,23,109,25],[113,10,110,12,"forceTransaction"],[113,26,110,28],[114,10,111,12,"scope"],[115,8,112,10],[115,9,112,11],[115,10,112,12],[116,8,114,6],[116,12,114,6,"_setSpanForScope"],[116,41,114,22],[116,43,114,23,"scope"],[116,48,114,28],[116,50,114,30,"activeSpan"],[116,60,114,40],[116,61,114,41],[117,8,116,6],[117,17,116,15,"finishAndSetSpan"],[117,33,116,31,"finishAndSetSpan"],[117,34,116,31],[117,36,116,34],[118,10,117,8,"activeSpan"],[118,20,117,18],[118,21,117,19,"end"],[118,24,117,22],[118,25,117,23],[118,26,117,24],[119,8,118,6],[120,8,120,6],[120,15,120,13],[120,19,120,13,"handleCallbackErrors"],[120,61,120,33],[120,63,121,8],[120,69,121,14,"callback"],[120,77,121,22],[120,78,121,23,"activeSpan"],[120,88,121,33],[120,90,121,35,"finishAndSetSpan"],[120,106,121,51],[120,107,121,52],[120,109,122,8],[120,115,122,14],[121,10,123,10],[122,10,124,10],[122,16,124,16],[123,12,124,18,"status"],[124,10,124,25],[124,11,124,26],[124,14,124,29],[124,18,124,29,"spanToJSON"],[124,39,124,39],[124,41,124,40,"activeSpan"],[124,51,124,50],[124,52,124,51],[125,10,125,10],[125,14,125,14,"activeSpan"],[125,24,125,24],[125,25,125,25,"isRecording"],[125,36,125,36],[125,37,125,37],[125,38,125,38],[125,43,125,43],[125,44,125,44,"status"],[125,50,125,50],[125,54,125,54,"status"],[125,60,125,60],[125,65,125,65],[125,69,125,69],[125,70,125,70],[125,72,125,72],[126,12,126,12,"activeSpan"],[126,22,126,22],[126,23,126,23,"setStatus"],[126,32,126,32],[126,33,126,33],[127,14,126,35,"code"],[127,18,126,39],[127,20,126,41,"SPAN_STATUS_ERROR"],[127,49,126,58],[128,14,126,60,"message"],[128,21,126,67],[128,23,126,69],[129,12,126,86],[129,13,126,87],[129,14,126,88],[130,10,127,10],[131,8,128,8],[131,9,129,6],[131,10,129,7],[132,6,130,4],[132,7,130,5],[132,8,130,6],[133,4,131,2],[133,5,131,3],[133,6,131,4],[134,2,132,0],[136,2,134,0],[137,0,135,0],[138,0,136,0],[139,0,137,0],[140,0,138,0],[141,0,139,0],[142,0,140,0],[143,0,141,0],[144,0,142,0],[145,2,143,0],[145,11,143,9,"startInactiveSpan"],[145,28,143,26,"startInactiveSpan"],[145,29,143,27,"options"],[145,36,143,34],[145,38,143,36],[146,4,144,2],[146,10,144,8,"acs"],[146,13,144,11],[146,16,144,14,"getAcs"],[146,22,144,20],[146,23,144,21],[146,24,144,22],[147,4,145,2],[147,8,145,6,"acs"],[147,11,145,9],[147,12,145,10,"startInactiveSpan"],[147,29,145,27],[147,31,145,29],[148,6,146,4],[148,13,146,11,"acs"],[148,16,146,14],[148,17,146,15,"startInactiveSpan"],[148,34,146,32],[148,35,146,33,"options"],[148,42,146,40],[148,43,146,41],[149,4,147,2],[150,4,149,2],[150,10,149,8,"spanArguments"],[150,23,149,21],[150,26,149,24,"parseSentrySpanArguments"],[150,50,149,48],[150,51,149,49,"options"],[150,58,149,56],[150,59,149,57],[151,4,150,2],[151,10,150,8],[152,6,150,10,"forceTransaction"],[152,22,150,26],[153,6,150,28,"parentSpan"],[153,16,150,38],[153,18,150,40,"customParentSpan"],[154,4,150,57],[154,5,150,58],[154,8,150,61,"options"],[154,15,150,68],[156,4,152,2],[157,4,153,2],[158,4,154,2],[158,10,154,8,"wrapper"],[158,17,154,15],[158,20,154,18,"options"],[158,27,154,25],[158,28,154,26,"scope"],[158,33,154,31],[158,36,155,7,"callback"],[158,44,155,15],[158,48,155,20],[158,52,155,20,"withScope"],[158,76,155,29],[158,78,155,30,"options"],[158,85,155,37],[158,86,155,38,"scope"],[158,91,155,43],[158,93,155,45,"callback"],[158,101,155,53],[158,102,155,54],[158,105,156,6,"customParentSpan"],[158,121,156,22],[158,126,156,27,"undefined"],[158,135,156,36],[158,138,157,9,"callback"],[158,146,157,17],[158,150,157,22,"withActiveSpan"],[158,164,157,36],[158,165,157,37,"customParentSpan"],[158,181,157,53],[158,183,157,55,"callback"],[158,191,157,63],[158,192,157,64],[158,195,158,9,"callback"],[158,203,158,17],[158,207,158,22,"callback"],[158,215,158,30],[158,216,158,31],[158,217,158,32],[159,4,160,2],[159,11,160,9,"wrapper"],[159,18,160,16],[159,19,160,17],[159,25,160,23],[160,6,161,4],[160,12,161,10,"scope"],[160,17,161,15],[160,20,161,18],[160,24,161,18,"getCurrentScope"],[160,54,161,33],[160,56,161,34],[160,57,161,35],[161,6,162,4],[161,12,162,10,"parentSpan"],[161,22,162,20],[161,25,162,23,"getParentSpan"],[161,38,162,36],[161,39,162,37,"scope"],[161,44,162,42],[161,45,162,43],[162,6,164,4],[162,12,164,10,"shouldSkipSpan"],[162,26,164,24],[162,29,164,27,"options"],[162,36,164,34],[162,37,164,35,"onlyIfParent"],[162,49,164,47],[162,53,164,51],[162,54,164,52,"parentSpan"],[162,64,164,62],[163,6,166,4],[163,10,166,8,"shouldSkipSpan"],[163,24,166,22],[163,26,166,24],[164,8,167,6],[164,15,167,13],[164,19,167,17,"SentryNonRecordingSpan"],[164,65,167,39],[164,66,167,40],[164,67,167,41],[165,6,168,4],[166,6,170,4],[166,13,170,11,"createChildOrRootSpan"],[166,34,170,32],[166,35,170,33],[167,8,171,6,"parentSpan"],[167,18,171,16],[168,8,172,6,"spanArguments"],[168,21,172,19],[169,8,173,6,"forceTransaction"],[169,24,173,22],[170,8,174,6,"scope"],[171,6,175,4],[171,7,175,5],[171,8,175,6],[172,4,176,2],[172,5,176,3],[172,6,176,4],[173,2,177,0],[175,2,179,0],[176,0,180,0],[177,0,181,0],[178,0,182,0],[179,0,183,0],[180,0,184,0],[181,0,185,0],[182,0,186,0],[183,2,187,0],[183,8,187,6,"continueTrace"],[183,21,187,19],[183,24,187,22,"continueTrace"],[183,25,188,2,"options"],[183,32,188,9],[183,34,191,2,"callback"],[183,42,191,10],[183,47,192,5],[184,4,193,2],[184,10,193,8,"carrier"],[184,17,193,15],[184,20,193,18],[184,24,193,18,"getMainCarrier"],[184,47,193,32],[184,49,193,33],[184,50,193,34],[185,4,194,2],[185,10,194,8,"acs"],[185,13,194,11],[185,16,194,14],[185,20,194,14,"getAsyncContextStrategy"],[185,50,194,37],[185,52,194,38,"carrier"],[185,59,194,45],[185,60,194,46],[186,4,195,2],[186,8,195,6,"acs"],[186,11,195,9],[186,12,195,10,"continueTrace"],[186,25,195,23],[186,27,195,25],[187,6,196,4],[187,13,196,11,"acs"],[187,16,196,14],[187,17,196,15,"continueTrace"],[187,30,196,28],[187,31,196,29,"options"],[187,38,196,36],[187,40,196,38,"callback"],[187,48,196,46],[187,49,196,47],[188,4,197,2],[189,4,199,2],[189,10,199,8],[190,6,199,10,"sentryTrace"],[190,17,199,21],[191,6,199,23,"baggage"],[192,4,199,31],[192,5,199,32],[192,8,199,35,"options"],[192,15,199,42],[193,4,201,2],[193,11,201,9],[193,15,201,9,"withScope"],[193,39,201,18],[193,41,201,19,"scope"],[193,46,201,24],[193,50,201,28],[194,6,202,4],[194,12,202,10,"propagationContext"],[194,30,202,28],[194,33,202,31],[194,37,202,31,"propagationContextFromHeaders"],[194,75,202,60],[194,77,202,61,"sentryTrace"],[194,88,202,72],[194,90,202,74,"baggage"],[194,97,202,81],[194,98,202,82],[195,6,203,4,"scope"],[195,11,203,9],[195,12,203,10,"setPropagationContext"],[195,33,203,31],[195,34,203,32,"propagationContext"],[195,52,203,50],[195,53,203,51],[196,6,204,4],[196,13,204,11,"callback"],[196,21,204,19],[196,22,204,20],[196,23,204,21],[197,4,205,2],[197,5,205,3],[197,6,205,4],[198,2,206,0],[198,3,206,1],[200,2,208,0],[201,0,209,0],[202,0,210,0],[203,0,211,0],[204,0,212,0],[205,0,213,0],[206,0,214,0],[207,0,215,0],[208,0,216,0],[209,2,208,0,"exports"],[209,9,208,0],[209,10,208,0,"continueTrace"],[209,23,208,0],[209,26,208,0,"continueTrace"],[209,39,208,0],[210,2,217,0],[210,11,217,9,"withActiveSpan"],[210,25,217,23,"withActiveSpan"],[210,26,217,24,"span"],[210,30,217,28],[210,32,217,30,"callback"],[210,40,217,38],[210,42,217,40],[211,4,218,2],[211,10,218,8,"acs"],[211,13,218,11],[211,16,218,14,"getAcs"],[211,22,218,20],[211,23,218,21],[211,24,218,22],[212,4,219,2],[212,8,219,6,"acs"],[212,11,219,9],[212,12,219,10,"withActiveSpan"],[212,26,219,24],[212,28,219,26],[213,6,220,4],[213,13,220,11,"acs"],[213,16,220,14],[213,17,220,15,"withActiveSpan"],[213,31,220,29],[213,32,220,30,"span"],[213,36,220,34],[213,38,220,36,"callback"],[213,46,220,44],[213,47,220,45],[214,4,221,2],[215,4,223,2],[215,11,223,9],[215,15,223,9,"withScope"],[215,39,223,18],[215,41,223,19,"scope"],[215,46,223,24],[215,50,223,28],[216,6,224,4],[216,10,224,4,"_setSpanForScope"],[216,39,224,20],[216,41,224,21,"scope"],[216,46,224,26],[216,48,224,28,"span"],[216,52,224,32],[216,56,224,36,"undefined"],[216,65,224,45],[216,66,224,46],[217,6,225,4],[217,13,225,11,"callback"],[217,21,225,19],[217,22,225,20,"scope"],[217,27,225,25],[217,28,225,26],[218,4,226,2],[218,5,226,3],[218,6,226,4],[219,2,227,0],[221,2,229,0],[222,2,230,0],[222,11,230,9,"suppressTracing"],[222,26,230,24,"suppressTracing"],[222,27,230,25,"callback"],[222,35,230,33],[222,37,230,35],[223,4,231,2],[223,10,231,8,"acs"],[223,13,231,11],[223,16,231,14,"getAcs"],[223,22,231,20],[223,23,231,21],[223,24,231,22],[224,4,233,2],[224,8,233,6,"acs"],[224,11,233,9],[224,12,233,10,"suppressTracing"],[224,27,233,25],[224,29,233,27],[225,6,234,4],[225,13,234,11,"acs"],[225,16,234,14],[225,17,234,15,"suppressTracing"],[225,32,234,30],[225,33,234,31,"callback"],[225,41,234,39],[225,42,234,40],[226,4,235,2],[227,4,237,2],[227,11,237,9],[227,15,237,9,"withScope"],[227,39,237,18],[227,41,237,19,"scope"],[227,46,237,24],[227,50,237,28],[228,6,238,4,"scope"],[228,11,238,9],[228,12,238,10,"setSDKProcessingMetadata"],[228,36,238,34],[228,37,238,35],[229,8,238,37],[229,9,238,38,"SUPPRESS_TRACING_KEY"],[229,29,238,58],[229,32,238,61],[230,6,238,66],[230,7,238,67],[230,8,238,68],[231,6,239,4],[231,13,239,11,"callback"],[231,21,239,19],[231,22,239,20],[231,23,239,21],[232,4,240,2],[232,5,240,3],[232,6,240,4],[233,2,241,0],[235,2,243,0],[236,0,244,0],[237,0,245,0],[238,0,246,0],[239,0,247,0],[240,0,248,0],[241,0,249,0],[242,0,250,0],[243,0,251,0],[244,0,252,0],[245,0,253,0],[246,0,254,0],[247,0,255,0],[248,0,256,0],[249,0,257,0],[250,0,258,0],[251,2,259,0],[251,11,259,9,"startNewTrace"],[251,24,259,22,"startNewTrace"],[251,25,259,23,"callback"],[251,33,259,31],[251,35,259,33],[252,4,260,2],[252,11,260,9],[252,15,260,9,"withScope"],[252,39,260,18],[252,41,260,19,"scope"],[252,46,260,24],[252,50,260,28],[253,6,261,4,"scope"],[253,11,261,9],[253,12,261,10,"setPropagationContext"],[253,33,261,31],[253,34,261,32],[254,8,261,34,"traceId"],[254,15,261,41],[254,17,261,43],[254,21,261,43,"generateTraceId"],[254,56,261,58],[254,58,261,59],[255,6,261,61],[255,7,261,62],[255,8,261,63],[256,6,262,4,"DEBUG_BUILD"],[256,29,262,15],[256,33,262,19,"logger"],[256,47,262,25],[256,48,262,26,"info"],[256,52,262,30],[256,53,262,31],[256,85,262,63,"scope"],[256,90,262,68],[256,91,262,69,"getPropagationContext"],[256,112,262,90],[256,113,262,91],[256,114,262,92],[256,115,262,93,"traceId"],[256,122,262,100],[256,124,262,102],[256,125,262,103],[257,6,263,4],[257,13,263,11,"withActiveSpan"],[257,27,263,25],[257,28,263,26],[257,32,263,30],[257,34,263,32,"callback"],[257,42,263,40],[257,43,263,41],[258,4,264,2],[258,5,264,3],[258,6,264,4],[259,2,265,0],[260,2,267,0],[260,11,267,9,"createChildOrRootSpan"],[260,32,267,30,"createChildOrRootSpan"],[260,33,267,31],[261,4,268,2,"parentSpan"],[261,14,268,12],[262,4,269,2,"spanArguments"],[262,17,269,15],[263,4,270,2,"forceTransaction"],[263,20,270,18],[264,4,271,2,"scope"],[265,2,272,0],[265,3,272,1],[265,5,274,2],[266,4,275,2],[266,8,275,6],[266,9,275,7],[266,13,275,7,"hasTracingEnabled"],[266,49,275,24],[266,51,275,25],[266,52,275,26],[266,54,275,28],[267,6,276,4],[267,13,276,11],[267,17,276,15,"SentryNonRecordingSpan"],[267,63,276,37],[267,64,276,38],[267,65,276,39],[268,4,277,2],[269,4,279,2],[269,10,279,8,"isolationScope"],[269,24,279,22],[269,27,279,25],[269,31,279,25,"getIsolationScope"],[269,63,279,42],[269,65,279,43],[269,66,279,44],[270,4,281,2],[270,8,281,6,"span"],[270,12,281,10],[271,4,282,2],[271,8,282,6,"parentSpan"],[271,18,282,16],[271,22,282,20],[271,23,282,21,"forceTransaction"],[271,39,282,37],[271,41,282,39],[272,6,283,4,"span"],[272,10,283,8],[272,13,283,11,"_startChildSpan"],[272,28,283,26],[272,29,283,27,"parentSpan"],[272,39,283,37],[272,41,283,39,"scope"],[272,46,283,44],[272,48,283,46,"spanArguments"],[272,61,283,59],[272,62,283,60],[273,6,284,4],[273,10,284,4,"addChildSpanToSpan"],[273,39,284,22],[273,41,284,23,"parentSpan"],[273,51,284,33],[273,53,284,35,"span"],[273,57,284,39],[273,58,284,40],[274,4,285,2],[274,5,285,3],[274,11,285,9],[274,15,285,13,"parentSpan"],[274,25,285,23],[274,27,285,25],[275,6,286,4],[276,6,287,4],[276,12,287,10,"dsc"],[276,15,287,13],[276,18,287,16],[276,22,287,16,"getDynamicSamplingContextFromSpan"],[276,79,287,49],[276,81,287,50,"parentSpan"],[276,91,287,60],[276,92,287,61],[277,6,288,4],[277,12,288,10],[278,8,288,12,"traceId"],[278,15,288,19],[279,8,288,21,"spanId"],[279,14,288,27],[279,16,288,29,"parentSpanId"],[280,6,288,42],[280,7,288,43],[280,10,288,46,"parentSpan"],[280,20,288,56],[280,21,288,57,"spanContext"],[280,32,288,68],[280,33,288,69],[280,34,288,70],[281,6,289,4],[281,12,289,10,"parentSampled"],[281,25,289,23],[281,28,289,26],[281,32,289,26,"spanIsSampled"],[281,56,289,39],[281,58,289,40,"parentSpan"],[281,68,289,50],[281,69,289,51],[282,6,291,4,"span"],[282,10,291,8],[282,13,291,11,"_startRootSpan"],[282,27,291,25],[282,28,292,6],[283,8,293,8,"traceId"],[283,15,293,15],[284,8,294,8,"parentSpanId"],[284,20,294,20],[285,8,295,8],[285,11,295,11,"spanArguments"],[286,6,296,6],[286,7,296,7],[286,9,297,6,"scope"],[286,14,297,11],[286,16,298,6,"parentSampled"],[286,29,299,4],[286,30,299,5],[287,6,301,4],[287,10,301,4,"freezeDscOnSpan"],[287,49,301,19],[287,51,301,20,"span"],[287,55,301,24],[287,57,301,26,"dsc"],[287,60,301,29],[287,61,301,30],[288,4,302,2],[288,5,302,3],[288,11,302,9],[289,6,303,4],[289,12,303,10],[290,8,304,6,"traceId"],[290,15,304,13],[291,8,305,6,"dsc"],[291,11,305,9],[292,8,306,6,"parentSpanId"],[292,20,306,18],[293,8,307,6,"sampled"],[293,15,307,13],[293,17,307,15,"parentSampled"],[294,6,308,4],[294,7,308,5],[294,10,308,8],[295,8,309,6],[295,11,309,9,"isolationScope"],[295,25,309,23],[295,26,309,24,"getPropagationContext"],[295,47,309,45],[295,48,309,46],[295,49,309,47],[296,8,310,6],[296,11,310,9,"scope"],[296,16,310,14],[296,17,310,15,"getPropagationContext"],[296,38,310,36],[296,39,310,37],[297,6,311,4],[297,7,311,5],[298,6,313,4,"span"],[298,10,313,8],[298,13,313,11,"_startRootSpan"],[298,27,313,25],[298,28,314,6],[299,8,315,8,"traceId"],[299,15,315,15],[300,8,316,8,"parentSpanId"],[300,20,316,20],[301,8,317,8],[301,11,317,11,"spanArguments"],[302,6,318,6],[302,7,318,7],[302,9,319,6,"scope"],[302,14,319,11],[302,16,320,6,"parentSampled"],[302,29,321,4],[302,30,321,5],[303,6,323,4],[303,10,323,8,"dsc"],[303,13,323,11],[303,15,323,13],[304,8,324,6],[304,12,324,6,"freezeDscOnSpan"],[304,51,324,21],[304,53,324,22,"span"],[304,57,324,26],[304,59,324,28,"dsc"],[304,62,324,31],[304,63,324,32],[305,6,325,4],[306,4,326,2],[307,4,328,2],[307,8,328,2,"logSpanStart"],[307,30,328,14],[307,32,328,15,"span"],[307,36,328,19],[307,37,328,20],[308,4,330,2],[308,8,330,2,"setCapturedScopesOnSpan"],[308,38,330,25],[308,40,330,26,"span"],[308,44,330,30],[308,46,330,32,"scope"],[308,51,330,37],[308,53,330,39,"isolationScope"],[308,67,330,53],[308,68,330,54],[309,4,332,2],[309,11,332,9,"span"],[309,15,332,13],[310,2,333,0],[312,2,335,0],[313,0,336,0],[314,0,337,0],[315,0,338,0],[316,0,339,0],[317,2,340,0],[317,11,340,9,"parseSentrySpanArguments"],[317,35,340,33,"parseSentrySpanArguments"],[317,36,340,34,"options"],[317,43,340,41],[317,45,340,43],[318,4,341,2],[318,10,341,8,"exp"],[318,13,341,11],[318,16,341,14,"options"],[318,23,341,21],[318,24,341,22,"experimental"],[318,36,341,34],[318,40,341,38],[318,41,341,39],[318,42,341,40],[319,4,342,2],[319,10,342,8,"initialCtx"],[319,20,342,18],[319,23,342,21],[320,6,343,4,"isStandalone"],[320,18,343,16],[320,20,343,18,"exp"],[320,23,343,21],[320,24,343,22,"standalone"],[320,34,343,32],[321,6,344,4],[321,9,344,7,"options"],[322,4,345,2],[322,5,345,3],[323,4,347,2],[323,8,347,6,"options"],[323,15,347,13],[323,16,347,14,"startTime"],[323,25,347,23],[323,27,347,25],[324,6,348,4],[324,12,348,10,"ctx"],[324,15,348,13],[324,18,348,16],[325,8,348,18],[325,11,348,21,"initialCtx"],[326,6,348,32],[326,7,348,33],[327,6,349,4,"ctx"],[327,9,349,7],[327,10,349,8,"startTimestamp"],[327,24,349,22],[327,27,349,25],[327,31,349,25,"spanTimeInputToSeconds"],[327,64,349,47],[327,66,349,48,"options"],[327,73,349,55],[327,74,349,56,"startTime"],[327,83,349,65],[327,84,349,66],[328,6,350,4],[328,13,350,11,"ctx"],[328,16,350,14],[328,17,350,15,"startTime"],[328,26,350,24],[329,6,351,4],[329,13,351,11,"ctx"],[329,16,351,14],[330,4,352,2],[331,4,354,2],[331,11,354,9,"initialCtx"],[331,21,354,19],[332,2,355,0],[333,2,357,0],[333,11,357,9,"getAcs"],[333,17,357,15,"getAcs"],[333,18,357,15],[333,20,357,18],[334,4,358,2],[334,10,358,8,"carrier"],[334,17,358,15],[334,20,358,18],[334,24,358,18,"getMainCarrier"],[334,47,358,32],[334,49,358,33],[334,50,358,34],[335,4,359,2],[335,11,359,9],[335,15,359,9,"getAsyncContextStrategy"],[335,45,359,32],[335,47,359,33,"carrier"],[335,54,359,40],[335,55,359,41],[336,2,360,0],[337,2,362,0],[337,11,362,9,"_startRootSpan"],[337,25,362,23,"_startRootSpan"],[337,26,362,24,"spanArguments"],[337,39,362,37],[337,41,362,39,"scope"],[337,46,362,44],[337,48,362,46,"parentSampled"],[337,61,362,59],[337,63,362,61],[338,4,363,2],[338,10,363,8,"client"],[338,16,363,14],[338,19,363,17],[338,23,363,17,"getClient"],[338,47,363,26],[338,49,363,27],[338,50,363,28],[339,4,364,2],[339,10,364,8,"options"],[339,17,364,15],[339,20,364,19,"client"],[339,26,364,25],[339,30,364,29,"client"],[339,36,364,35],[339,37,364,36,"getOptions"],[339,47,364,46],[339,48,364,47],[339,49,364,48],[339,53,364,53],[339,54,364,54],[339,55,364,55],[340,4,366,2],[340,10,366,8],[341,6,366,10,"name"],[341,10,366,14],[341,13,366,17],[341,15,366,19],[342,6,366,21,"attributes"],[343,4,366,32],[343,5,366,33],[343,8,366,36,"spanArguments"],[343,21,366,49],[344,4,367,2],[344,10,367,8],[344,11,367,9,"sampled"],[344,18,367,16],[344,20,367,18,"sampleRate"],[344,30,367,28],[344,31,367,29],[344,34,367,32,"scope"],[344,39,367,37],[344,40,367,38,"getScopeData"],[344,52,367,50],[344,53,367,51],[344,54,367,52],[344,55,367,53,"sdkProcessingMetadata"],[344,76,367,74],[344,77,367,75,"SUPPRESS_TRACING_KEY"],[344,97,367,95],[344,98,367,96],[344,101,368,6],[344,102,368,7],[344,107,368,12],[344,108,368,13],[344,111,369,6],[344,115,369,6,"sampleSpan"],[344,135,369,16],[344,137,369,17,"options"],[344,144,369,24],[344,146,369,26],[345,6,370,8,"name"],[345,10,370,12],[346,6,371,8,"parentSampled"],[346,19,371,21],[347,6,372,8,"attributes"],[347,16,372,18],[348,6,373,8,"transactionContext"],[348,24,373,26],[348,26,373,28],[349,8,374,10,"name"],[349,12,374,14],[350,8,375,10,"parentSampled"],[351,6,376,8],[352,4,377,6],[352,5,377,7],[352,6,377,8],[353,4,379,2],[353,10,379,8,"rootSpan"],[353,18,379,16],[353,21,379,19],[353,25,379,23,"SentrySpan"],[353,47,379,33],[353,48,379,34],[354,6,380,4],[354,9,380,7,"spanArguments"],[354,22,380,20],[355,6,381,4,"attributes"],[355,16,381,14],[355,18,381,16],[356,8,382,6],[356,9,382,7,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[356,61,382,39],[356,64,382,42],[356,72,382,50],[357,8,383,6],[357,11,383,9,"spanArguments"],[357,24,383,22],[357,25,383,23,"attributes"],[358,6,384,4],[358,7,384,5],[359,6,385,4,"sampled"],[360,4,386,2],[360,5,386,3],[360,6,386,4],[361,4,387,2],[361,8,387,6,"sampleRate"],[361,18,387,16],[361,23,387,21,"undefined"],[361,32,387,30],[361,34,387,32],[362,6,388,4,"rootSpan"],[362,14,388,12],[362,15,388,13,"setAttribute"],[362,27,388,25],[362,28,388,26,"SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE"],[362,85,388,63],[362,87,388,65,"sampleRate"],[362,97,388,75],[362,98,388,76],[363,4,389,2],[364,4,391,2],[364,8,391,6,"client"],[364,14,391,12],[364,16,391,14],[365,6,392,4,"client"],[365,12,392,10],[365,13,392,11,"emit"],[365,17,392,15],[365,18,392,16],[365,29,392,27],[365,31,392,29,"rootSpan"],[365,39,392,37],[365,40,392,38],[366,4,393,2],[367,4,395,2],[367,11,395,9,"rootSpan"],[367,19,395,17],[368,2,396,0],[370,2,398,0],[371,0,399,0],[372,0,400,0],[373,0,401,0],[374,2,402,0],[374,11,402,9,"_startChildSpan"],[374,26,402,24,"_startChildSpan"],[374,27,402,25,"parentSpan"],[374,37,402,35],[374,39,402,37,"scope"],[374,44,402,42],[374,46,402,44,"spanArguments"],[374,59,402,57],[374,61,402,59],[375,4,403,2],[375,10,403,8],[376,6,403,10,"spanId"],[376,12,403,16],[377,6,403,18,"traceId"],[378,4,403,26],[378,5,403,27],[378,8,403,30,"parentSpan"],[378,18,403,40],[378,19,403,41,"spanContext"],[378,30,403,52],[378,31,403,53],[378,32,403,54],[379,4,404,2],[379,10,404,8,"sampled"],[379,17,404,15],[379,20,404,18,"scope"],[379,25,404,23],[379,26,404,24,"getScopeData"],[379,38,404,36],[379,39,404,37],[379,40,404,38],[379,41,404,39,"sdkProcessingMetadata"],[379,62,404,60],[379,63,404,61,"SUPPRESS_TRACING_KEY"],[379,83,404,81],[379,84,404,82],[379,87,404,85],[379,92,404,90],[379,95,404,93],[379,99,404,93,"spanIsSampled"],[379,123,404,106],[379,125,404,107,"parentSpan"],[379,135,404,117],[379,136,404,118],[380,4,406,2],[380,10,406,8,"childSpan"],[380,19,406,17],[380,22,406,20,"sampled"],[380,29,406,27],[380,32,407,6],[380,36,407,10,"SentrySpan"],[380,58,407,20],[380,59,407,21],[381,6,408,8],[381,9,408,11,"spanArguments"],[381,22,408,24],[382,6,409,8,"parentSpanId"],[382,18,409,20],[382,20,409,22,"spanId"],[382,26,409,28],[383,6,410,8,"traceId"],[383,13,410,15],[384,6,411,8,"sampled"],[385,4,412,6],[385,5,412,7],[385,6,412,8],[385,9,413,6],[385,13,413,10,"SentryNonRecordingSpan"],[385,59,413,32],[385,60,413,33],[386,6,413,35,"traceId"],[387,4,413,43],[387,5,413,44],[387,6,413,45],[388,4,415,2],[388,8,415,2,"addChildSpanToSpan"],[388,37,415,20],[388,39,415,21,"parentSpan"],[388,49,415,31],[388,51,415,33,"childSpan"],[388,60,415,42],[388,61,415,43],[389,4,417,2],[389,10,417,8,"client"],[389,16,417,14],[389,19,417,17],[389,23,417,17,"getClient"],[389,47,417,26],[389,49,417,27],[389,50,417,28],[390,4,418,2],[390,8,418,6,"client"],[390,14,418,12],[390,16,418,14],[391,6,419,4,"client"],[391,12,419,10],[391,13,419,11,"emit"],[391,17,419,15],[391,18,419,16],[391,29,419,27],[391,31,419,29,"childSpan"],[391,40,419,38],[391,41,419,39],[392,6,420,4],[393,6,421,4],[393,10,421,8,"spanArguments"],[393,23,421,21],[393,24,421,22,"endTimestamp"],[393,36,421,34],[393,38,421,36],[394,8,422,6,"client"],[394,14,422,12],[394,15,422,13,"emit"],[394,19,422,17],[394,20,422,18],[394,29,422,27],[394,31,422,29,"childSpan"],[394,40,422,38],[394,41,422,39],[395,6,423,4],[396,4,424,2],[397,4,426,2],[397,11,426,9,"childSpan"],[397,20,426,18],[398,2,427,0],[399,2,429,0],[399,11,429,9,"getParentSpan"],[399,24,429,22,"getParentSpan"],[399,25,429,23,"scope"],[399,30,429,28],[399,32,429,30],[400,4,430,2],[400,10,430,8,"span"],[400,14,430,12],[400,17,430,15],[400,21,430,15,"_getSpanForScope"],[400,50,430,31],[400,52,430,32,"scope"],[400,57,430,37],[400,58,430,38],[401,4,432,2],[401,8,432,6],[401,9,432,7,"span"],[401,13,432,11],[401,15,432,13],[402,6,433,4],[402,13,433,11,"undefined"],[402,22,433,20],[403,4,434,2],[404,4,436,2],[404,10,436,8,"client"],[404,16,436,14],[404,19,436,17],[404,23,436,17,"getClient"],[404,47,436,26],[404,49,436,27],[404,50,436,28],[405,4,437,2],[405,10,437,8,"options"],[405,17,437,15],[405,20,437,18,"client"],[405,26,437,24],[405,29,437,27,"client"],[405,35,437,33],[405,36,437,34,"getOptions"],[405,46,437,44],[405,47,437,45],[405,48,437,46],[405,51,437,49],[405,52,437,50],[405,53,437,51],[406,4,438,2],[406,8,438,6,"options"],[406,15,438,13],[406,16,438,14,"parentSpanIsAlwaysRootSpan"],[406,42,438,40],[406,44,438,42],[407,6,439,4],[407,13,439,11],[407,17,439,11,"getRootSpan"],[407,39,439,22],[407,41,439,23,"span"],[407,45,439,27],[407,46,439,28],[408,4,440,2],[409,4,442,2],[409,11,442,9,"span"],[409,15,442,13],[410,2,443,0],[411,2,445,0],[411,11,445,9,"getActiveSpanWrapper"],[411,31,445,29,"getActiveSpanWrapper"],[411,32,445,30,"parentSpan"],[411,42,445,40],[411,44,445,42],[412,4,446,2],[412,11,446,9,"parentSpan"],[412,21,446,19],[412,26,446,24,"undefined"],[412,35,446,33],[412,38,447,7,"callback"],[412,46,447,15],[412,50,447,20],[413,6,448,8],[413,13,448,15,"withActiveSpan"],[413,27,448,29],[413,28,448,30,"parentSpan"],[413,38,448,40],[413,40,448,42,"callback"],[413,48,448,50],[413,49,448,51],[414,4,449,6],[414,5,449,7],[414,8,450,7,"callback"],[414,16,450,15],[414,20,450,20,"callback"],[414,28,450,28],[414,29,450,29],[414,30,450,30],[415,2,451,0],[416,0,451,1],[416,3]],"functionMap":{"names":["<global>","startSpan","withScope$argument_1","wrapper$argument_0","handleCallbackErrors$argument_0","handleCallbackErrors$argument_1","handleCallbackErrors$argument_2","startSpanManual","finishAndSetSpan","startInactiveSpan","<anonymous>","continueTrace","withScope$argument_0","withActiveSpan","suppressTracing","startNewTrace","createChildOrRootSpan","parseSentrySpanArguments","getAcs","_startRootSpan","_startChildSpan","getParentSpan","getActiveSpanWrapper"],"mappings":"AAA;ACgC;kCCS;mBCI;QCiB,0BD;QEC;SFM;QGC,sBH;KDE;GDC;CDC;AOY;kCLS;mBCI;MKgB;OLE;QCG,4CD;QEC;SFM;KDE;GKC;CPC;ASW;MCY,gDD;QCE,wDD;QCC,wBD;iBNE;GMgB;CTC;sBWU;mBCc;GDI;CXC;AaW;mBDM;GCG;CbC;AcG;mBFO;GEG;CdC;AekB;mBHC;GGI;CfC;AgBE;ChBkE;AiBO;CjBe;AkBE;ClBG;AmBE;CnBkC;AoBM;CpByB;AqBE;CrBc;AsBE;MZE;OYE;MZC,wBY;CtBC"}},"type":"js/module"}]}