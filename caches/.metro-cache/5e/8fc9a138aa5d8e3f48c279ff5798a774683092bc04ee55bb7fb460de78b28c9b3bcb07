{"dependencies":[{"name":"./cookie.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"lc7uU+LeAxoBiAtMN6HbBwR6bRs=","exportNames":["*"]}},{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":43},"end":{"line":2,"column":47,"index":90}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}},{"name":"./is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":50,"index":141}}],"key":"C6fLnEQPNIdj7xXbougAJ0zoinA=","exportNames":["*"]}},{"name":"./logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":142},"end":{"line":4,"column":37,"index":179}}],"key":"iVYhB1kviQI8ndYBeJYcuS1MqTQ=","exportNames":["*"]}},{"name":"./normalize.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":180},"end":{"line":5,"column":43,"index":223}}],"key":"QsDZX1nhDolhUZoDvec3s9Hp/ME=","exportNames":["*"]}},{"name":"./object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":224},"end":{"line":6,"column":48,"index":272}}],"key":"c+4yuYP7E2Xh9QIfj2WEKgywjI4=","exportNames":["*"]}},{"name":"./string.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":273},"end":{"line":7,"column":39,"index":312}}],"key":"4SgKKWBRWk0zxI3arZcISee7pnU=","exportNames":["*"]}},{"name":"./url.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":313},"end":{"line":8,"column":52,"index":365}}],"key":"7NcMQWW/4KtgISzEb8GlvOMI30I=","exportNames":["*"]}},{"name":"./vendor/getIpAddress.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":366},"end":{"line":9,"column":77,"index":443}}],"key":"OqYWHsICutcXGeJa+J4q8Q7qKFc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_USER_INCLUDES = void 0;\n  exports.addNormalizedRequestDataToEvent = addNormalizedRequestDataToEvent;\n  exports.addRequestDataToEvent = addRequestDataToEvent;\n  exports.extractPathForTransaction = extractPathForTransaction;\n  exports.extractQueryParamsFromUrl = extractQueryParamsFromUrl;\n  exports.extractRequestData = extractRequestData;\n  exports.headersToDict = headersToDict;\n  exports.httpRequestToRequestData = httpRequestToRequestData;\n  exports.winterCGHeadersToDict = winterCGHeadersToDict;\n  exports.winterCGRequestToRequestData = winterCGRequestToRequestData;\n  var _cookie = require(_dependencyMap[0], \"./cookie.js\");\n  var _debugBuild = require(_dependencyMap[1], \"./debug-build.js\");\n  var _is = require(_dependencyMap[2], \"./is.js\");\n  var _logger = require(_dependencyMap[3], \"./logger.js\");\n  var _normalize = require(_dependencyMap[4], \"./normalize.js\");\n  var _object = require(_dependencyMap[5], \"./object.js\");\n  var _string = require(_dependencyMap[6], \"./string.js\");\n  var _url = require(_dependencyMap[7], \"./url.js\");\n  var _getIpAddress = require(_dependencyMap[8], \"./vendor/getIpAddress.js\");\n  const DEFAULT_INCLUDES = {\n    ip: false,\n    request: true,\n    user: true\n  };\n  const DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n  const DEFAULT_USER_INCLUDES = exports.DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\n  /**\n   * Options deciding what parts of the request to use when enhancing an event\n   */\n\n  /**\n   * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n   * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n   *\n   * Additionally, this function determines and returns the transaction name source\n   *\n   * eg. GET /mountpoint/user/:id\n   *\n   * @param req A request object\n   * @param options What to include in the transaction name (method, path, or a custom route name to be\n   *                used instead of the request's route)\n   *\n   * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n   * @deprecated This method will be removed in v9. It is not in use anymore.\n   */\n  function extractPathForTransaction(req, options = {}) {\n    const method = req.method && req.method.toUpperCase();\n    let path = '';\n    let source = 'url';\n\n    // Check to see if there's a parameterized route we can use (as there is in Express)\n    if (options.customRoute || req.route) {\n      path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n      source = 'route';\n    }\n\n    // Otherwise, just take the original URL\n    else if (req.originalUrl || req.url) {\n      path = (0, _url.stripUrlQueryAndFragment)(req.originalUrl || req.url || '');\n    }\n    let name = '';\n    if (options.method && method) {\n      name += method;\n    }\n    if (options.method && options.path) {\n      name += ' ';\n    }\n    if (options.path && path) {\n      name += path;\n    }\n    return [name, source];\n  }\n  function extractUserData(user, keys) {\n    const extractedUser = {};\n    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n    attributes.forEach(key => {\n      if (user && key in user) {\n        extractedUser[key] = user[key];\n      }\n    });\n    return extractedUser;\n  }\n\n  /**\n   * Normalize data from the request object, accounting for framework differences.\n   *\n   * @param req The request object from which to extract data\n   * @param options.include An optional array of keys to include in the normalized data. Defaults to\n   * DEFAULT_REQUEST_INCLUDES if not provided.\n   * @param options.deps Injected, platform-specific dependencies\n   * @returns An object containing normalized request data\n   *\n   * @deprecated Instead manually normalize the request data into a format that fits `addNormalizedRequestDataToEvent`.\n   */\n  function extractRequestData(req, options = {}) {\n    const {\n      include = DEFAULT_REQUEST_INCLUDES\n    } = options;\n    const requestData = {};\n\n    // headers:\n    //   node, express, koa, nextjs: req.headers\n    const headers = req.headers || {};\n    // method:\n    //   node, express, koa, nextjs: req.method\n    const method = req.method;\n    // host:\n    //   express: req.hostname in > 4 and req.host in < 4\n    //   koa: req.host\n    //   node, nextjs: req.headers.host\n    // Express 4 mistakenly strips off port number from req.host / req.hostname so we can't rely on them\n    // See: https://github.com/expressjs/express/issues/3047#issuecomment-236653223\n    // Also: https://github.com/getsentry/sentry-javascript/issues/1917\n    const host = headers.host || req.hostname || req.host || '<no host>';\n    // protocol:\n    //   node, nextjs: <n/a>\n    //   express, koa: req.protocol\n    const protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    const originalUrl = req.originalUrl || req.url || '';\n    // absolute url\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n    include.forEach(key => {\n      switch (key) {\n        case 'headers':\n          {\n            requestData.headers = headers;\n\n            // Remove the Cookie header in case cookie data should not be included in the event\n            if (!include.includes('cookies')) {\n              delete requestData.headers.cookie;\n            }\n\n            // Remove IP headers in case IP data should not be included in the event\n            if (!include.includes('ip')) {\n              _getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete requestData.headers[ipHeaderName];\n              });\n            }\n            break;\n          }\n        case 'method':\n          {\n            requestData.method = method;\n            break;\n          }\n        case 'url':\n          {\n            requestData.url = absoluteUrl;\n            break;\n          }\n        case 'cookies':\n          {\n            // cookies:\n            //   node, express, koa: req.headers.cookie\n            //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n            requestData.cookies =\n            // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n            // come off in v8\n            req.cookies || headers.cookie && (0, _cookie.parseCookie)(headers.cookie) || {};\n            break;\n          }\n        case 'query_string':\n          {\n            // query string:\n            //   node: req.url (raw)\n            //   express, koa, nextjs: req.query\n            requestData.query_string = extractQueryParams(req);\n            break;\n          }\n        case 'data':\n          {\n            if (method === 'GET' || method === 'HEAD') {\n              break;\n            }\n            // NOTE: As of v8, request is (unless a user sets this manually) ALWAYS a http request\n            // Which does not have a body by default\n            // However, in our http instrumentation, we patch the request to capture the body and store it on the\n            // request as `.body` anyhow\n            // In v9, we may update requestData to only work with plain http requests\n            // body data:\n            //   express, koa, nextjs: req.body\n            //\n            //   when using node by itself, you have to read the incoming stream(see\n            //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n            //   where they're going to store the final result, so they'll have to capture this data themselves\n            const body = req.body;\n            if (body !== undefined) {\n              const stringBody = (0, _is.isString)(body) ? body : (0, _is.isPlainObject)(body) ? JSON.stringify((0, _normalize.normalize)(body)) : (0, _string.truncate)(`${body}`, 1024);\n              if (stringBody) {\n                requestData.data = stringBody;\n              }\n            }\n            break;\n          }\n        default:\n          {\n            if ({}.hasOwnProperty.call(req, key)) {\n              requestData[key] = req[key];\n            }\n          }\n      }\n    });\n    return requestData;\n  }\n\n  /**\n   * Add already normalized request data to an event.\n   * This mutates the passed in event.\n   */\n  function addNormalizedRequestDataToEvent(event, req,\n  // This is non-standard data that is not part of the regular HTTP request\n  additionalData, options) {\n    const include = {\n      ...DEFAULT_INCLUDES,\n      ...(options && options.include)\n    };\n    if (include.request) {\n      const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n      if (include.ip) {\n        includeRequest.push('ip');\n      }\n      const extractedRequestData = extractNormalizedRequestData(req, {\n        include: includeRequest\n      });\n      event.request = {\n        ...event.request,\n        ...extractedRequestData\n      };\n    }\n    if (include.user) {\n      const extractedUser = additionalData.user && (0, _is.isPlainObject)(additionalData.user) ? extractUserData(additionalData.user, include.user) : {};\n      if (Object.keys(extractedUser).length) {\n        event.user = {\n          ...extractedUser,\n          ...event.user\n        };\n      }\n    }\n    if (include.ip) {\n      const ip = req.headers && (0, _getIpAddress.getClientIPAddress)(req.headers) || additionalData.ipAddress;\n      if (ip) {\n        event.user = {\n          ...event.user,\n          ip_address: ip\n        };\n      }\n    }\n  }\n\n  /**\n   * Add data from the given request to the given event\n   *\n   * @param event The event to which the request data will be added\n   * @param req Request object\n   * @param options.include Flags to control what data is included\n   * @param options.deps Injected platform-specific dependencies\n   * @returns The mutated `Event` object\n   *\n   * @deprecated Use `addNormalizedRequestDataToEvent` instead.\n   */\n  function addRequestDataToEvent(event, req, options) {\n    const include = {\n      ...DEFAULT_INCLUDES,\n      ...(options && options.include)\n    };\n    if (include.request) {\n      const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n      if (include.ip) {\n        includeRequest.push('ip');\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const extractedRequestData = extractRequestData(req, {\n        include: includeRequest\n      });\n      event.request = {\n        ...event.request,\n        ...extractedRequestData\n      };\n    }\n    if (include.user) {\n      const extractedUser = req.user && (0, _is.isPlainObject)(req.user) ? extractUserData(req.user, include.user) : {};\n      if (Object.keys(extractedUser).length) {\n        event.user = {\n          ...event.user,\n          ...extractedUser\n        };\n      }\n    }\n\n    // client ip:\n    //   node, nextjs: req.socket.remoteAddress\n    //   express, koa: req.ip\n    //   It may also be sent by proxies as specified in X-Forwarded-For or similar headers\n    if (include.ip) {\n      const ip = req.headers && (0, _getIpAddress.getClientIPAddress)(req.headers) || req.ip || req.socket && req.socket.remoteAddress;\n      if (ip) {\n        event.user = {\n          ...event.user,\n          ip_address: ip\n        };\n      }\n    }\n    return event;\n  }\n  function extractQueryParams(req) {\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    let originalUrl = req.originalUrl || req.url || '';\n    if (!originalUrl) {\n      return;\n    }\n\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n    if (originalUrl.startsWith('/')) {\n      originalUrl = `http://dogs.are.great${originalUrl}`;\n    }\n    try {\n      const queryParams = req.query || new URL(originalUrl).search.slice(1);\n      return queryParams.length ? queryParams : undefined;\n    } catch (e2) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n   * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n   */\n  // TODO(v8): Make this function return undefined when the extraction fails.\n  function winterCGHeadersToDict(winterCGHeaders) {\n    const headers = {};\n    try {\n      winterCGHeaders.forEach((value, key) => {\n        if (typeof value === 'string') {\n          // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n          headers[key] = value;\n        }\n      });\n    } catch (e) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n    }\n    return headers;\n  }\n\n  /**\n   * Convert common request headers to a simple dictionary.\n   */\n  function headersToDict(reqHeaders) {\n    const headers = Object.create(null);\n    try {\n      Object.entries(reqHeaders).forEach(([key, value]) => {\n        if (typeof value === 'string') {\n          headers[key] = value;\n        }\n      });\n    } catch (e) {\n      _debugBuild.DEBUG_BUILD && _logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n    }\n    return headers;\n  }\n\n  /**\n   * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n   */\n  function winterCGRequestToRequestData(req) {\n    const headers = winterCGHeadersToDict(req.headers);\n    return {\n      method: req.method,\n      url: req.url,\n      query_string: extractQueryParamsFromUrl(req.url),\n      headers\n      // TODO: Can we extract body data from the request?\n    };\n  }\n\n  /**\n   * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n   * Instead of allowing `PolymorphicRequest` to be passed,\n   * we want to be more specific and generally require a http.IncomingMessage-like object.\n   */\n  function httpRequestToRequestData(request) {\n    const headers = request.headers || {};\n    const host = headers.host || '<no host>';\n    const protocol = request.socket && request.socket.encrypted ? 'https' : 'http';\n    const originalUrl = request.url || '';\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n\n    // This is non-standard, but may be sometimes set\n    // It may be overwritten later by our own body handling\n    const data = request.body || undefined;\n\n    // This is non-standard, but may be set on e.g. Next.js or Express requests\n    const cookies = request.cookies;\n    return (0, _object.dropUndefinedKeys)({\n      url: absoluteUrl,\n      method: request.method,\n      query_string: extractQueryParamsFromUrl(originalUrl),\n      headers: headersToDict(headers),\n      cookies,\n      data\n    });\n  }\n\n  /** Extract the query params from an URL. */\n  function extractQueryParamsFromUrl(url) {\n    // url is path and query string\n    if (!url) {\n      return;\n    }\n    try {\n      // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n      // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n      const queryParams = new URL(url, 'http://dogs.are.great').search.slice(1);\n      return queryParams.length ? queryParams : undefined;\n    } catch (e3) {\n      return undefined;\n    }\n  }\n  function extractNormalizedRequestData(normalizedRequest, {\n    include\n  }) {\n    const includeKeys = include ? Array.isArray(include) ? include : DEFAULT_REQUEST_INCLUDES : [];\n    const requestData = {};\n    const headers = {\n      ...normalizedRequest.headers\n    };\n    if (includeKeys.includes('headers')) {\n      requestData.headers = headers;\n\n      // Remove the Cookie header in case cookie data should not be included in the event\n      if (!include.includes('cookies')) {\n        delete headers.cookie;\n      }\n\n      // Remove IP headers in case IP data should not be included in the event\n      if (!include.includes('ip')) {\n        _getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete headers[ipHeaderName];\n        });\n      }\n    }\n    if (includeKeys.includes('method')) {\n      requestData.method = normalizedRequest.method;\n    }\n    if (includeKeys.includes('url')) {\n      requestData.url = normalizedRequest.url;\n    }\n    if (includeKeys.includes('cookies')) {\n      const cookies = normalizedRequest.cookies || (headers && headers.cookie ? (0, _cookie.parseCookie)(headers.cookie) : undefined);\n      requestData.cookies = cookies || {};\n    }\n    if (includeKeys.includes('query_string')) {\n      requestData.query_string = normalizedRequest.query_string;\n    }\n    if (includeKeys.includes('data')) {\n      requestData.data = normalizedRequest.data;\n    }\n    return requestData;\n  }\n});","lineCount":473,"map":[[15,2,1,0],[15,6,1,0,"_cookie"],[15,13,1,0],[15,16,1,0,"require"],[15,23,1,0],[15,24,1,0,"_dependencyMap"],[15,38,1,0],[16,2,2,0],[16,6,2,0,"_debugBuild"],[16,17,2,0],[16,20,2,0,"require"],[16,27,2,0],[16,28,2,0,"_dependencyMap"],[16,42,2,0],[17,2,3,0],[17,6,3,0,"_is"],[17,9,3,0],[17,12,3,0,"require"],[17,19,3,0],[17,20,3,0,"_dependencyMap"],[17,34,3,0],[18,2,4,0],[18,6,4,0,"_logger"],[18,13,4,0],[18,16,4,0,"require"],[18,23,4,0],[18,24,4,0,"_dependencyMap"],[18,38,4,0],[19,2,5,0],[19,6,5,0,"_normalize"],[19,16,5,0],[19,19,5,0,"require"],[19,26,5,0],[19,27,5,0,"_dependencyMap"],[19,41,5,0],[20,2,6,0],[20,6,6,0,"_object"],[20,13,6,0],[20,16,6,0,"require"],[20,23,6,0],[20,24,6,0,"_dependencyMap"],[20,38,6,0],[21,2,7,0],[21,6,7,0,"_string"],[21,13,7,0],[21,16,7,0,"require"],[21,23,7,0],[21,24,7,0,"_dependencyMap"],[21,38,7,0],[22,2,8,0],[22,6,8,0,"_url"],[22,10,8,0],[22,13,8,0,"require"],[22,20,8,0],[22,21,8,0,"_dependencyMap"],[22,35,8,0],[23,2,9,0],[23,6,9,0,"_getIpAddress"],[23,19,9,0],[23,22,9,0,"require"],[23,29,9,0],[23,30,9,0,"_dependencyMap"],[23,44,9,0],[24,2,11,0],[24,8,11,6,"DEFAULT_INCLUDES"],[24,24,11,22],[24,27,11,25],[25,4,12,2,"ip"],[25,6,12,4],[25,8,12,6],[25,13,12,11],[26,4,13,2,"request"],[26,11,13,9],[26,13,13,11],[26,17,13,15],[27,4,14,2,"user"],[27,8,14,6],[27,10,14,8],[28,2,15,0],[28,3,15,1],[29,2,16,0],[29,8,16,6,"DEFAULT_REQUEST_INCLUDES"],[29,32,16,30],[29,35,16,33],[29,36,16,34],[29,45,16,43],[29,47,16,45],[29,53,16,51],[29,55,16,53],[29,64,16,62],[29,66,16,64],[29,74,16,72],[29,76,16,74],[29,90,16,88],[29,92,16,90],[29,97,16,95],[29,98,16,96],[30,2,17,0],[30,8,17,6,"DEFAULT_USER_INCLUDES"],[30,29,17,27],[30,32,17,27,"exports"],[30,39,17,27],[30,40,17,27,"DEFAULT_USER_INCLUDES"],[30,61,17,27],[30,64,17,30],[30,65,17,31],[30,69,17,35],[30,71,17,37],[30,81,17,47],[30,83,17,49],[30,90,17,56],[30,91,17,57],[32,2,19,0],[33,0,20,0],[34,0,21,0],[36,2,23,0],[37,0,24,0],[38,0,25,0],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,0,34,0],[48,0,35,0],[49,0,36,0],[50,0,37,0],[51,2,38,0],[51,11,38,9,"extractPathForTransaction"],[51,36,38,34,"extractPathForTransaction"],[51,37,39,2,"req"],[51,40,39,5],[51,42,40,2,"options"],[51,49,40,9],[51,52,40,12],[51,53,40,13],[51,54,40,14],[51,56,41,2],[52,4,42,2],[52,10,42,8,"method"],[52,16,42,14],[52,19,42,17,"req"],[52,22,42,20],[52,23,42,21,"method"],[52,29,42,27],[52,33,42,31,"req"],[52,36,42,34],[52,37,42,35,"method"],[52,43,42,41],[52,44,42,42,"toUpperCase"],[52,55,42,53],[52,56,42,54],[52,57,42,55],[53,4,44,2],[53,8,44,6,"path"],[53,12,44,10],[53,15,44,13],[53,17,44,15],[54,4,45,2],[54,8,45,6,"source"],[54,14,45,12],[54,17,45,15],[54,22,45,20],[56,4,47,2],[57,4,48,2],[57,8,48,6,"options"],[57,15,48,13],[57,16,48,14,"customRoute"],[57,27,48,25],[57,31,48,29,"req"],[57,34,48,32],[57,35,48,33,"route"],[57,40,48,38],[57,42,48,40],[58,6,49,4,"path"],[58,10,49,8],[58,13,49,11,"options"],[58,20,49,18],[58,21,49,19,"customRoute"],[58,32,49,30],[58,36,49,34],[58,39,49,37,"req"],[58,42,49,40],[58,43,49,41,"baseUrl"],[58,50,49,48],[58,54,49,52],[58,56,49,54],[58,59,49,57,"req"],[58,62,49,60],[58,63,49,61,"route"],[58,68,49,66],[58,72,49,70,"req"],[58,75,49,73],[58,76,49,74,"route"],[58,81,49,79],[58,82,49,80,"path"],[58,86,49,84],[58,88,49,86],[59,6,50,4,"source"],[59,12,50,10],[59,15,50,13],[59,22,50,20],[60,4,51,2],[62,4,53,2],[63,4,53,2],[63,9,54,7],[63,13,54,11,"req"],[63,16,54,14],[63,17,54,15,"originalUrl"],[63,28,54,26],[63,32,54,30,"req"],[63,35,54,33],[63,36,54,34,"url"],[63,39,54,37],[63,41,54,39],[64,6,55,4,"path"],[64,10,55,8],[64,13,55,11],[64,17,55,11,"stripUrlQueryAndFragment"],[64,46,55,35],[64,48,55,36,"req"],[64,51,55,39],[64,52,55,40,"originalUrl"],[64,63,55,51],[64,67,55,55,"req"],[64,70,55,58],[64,71,55,59,"url"],[64,74,55,62],[64,78,55,66],[64,80,55,68],[64,81,55,69],[65,4,56,2],[66,4,58,2],[66,8,58,6,"name"],[66,12,58,10],[66,15,58,13],[66,17,58,15],[67,4,59,2],[67,8,59,6,"options"],[67,15,59,13],[67,16,59,14,"method"],[67,22,59,20],[67,26,59,24,"method"],[67,32,59,30],[67,34,59,32],[68,6,60,4,"name"],[68,10,60,8],[68,14,60,12,"method"],[68,20,60,18],[69,4,61,2],[70,4,62,2],[70,8,62,6,"options"],[70,15,62,13],[70,16,62,14,"method"],[70,22,62,20],[70,26,62,24,"options"],[70,33,62,31],[70,34,62,32,"path"],[70,38,62,36],[70,40,62,38],[71,6,63,4,"name"],[71,10,63,8],[71,14,63,12],[71,17,63,15],[72,4,64,2],[73,4,65,2],[73,8,65,6,"options"],[73,15,65,13],[73,16,65,14,"path"],[73,20,65,18],[73,24,65,22,"path"],[73,28,65,26],[73,30,65,28],[74,6,66,4,"name"],[74,10,66,8],[74,14,66,12,"path"],[74,18,66,16],[75,4,67,2],[76,4,69,2],[76,11,69,9],[76,12,69,10,"name"],[76,16,69,14],[76,18,69,16,"source"],[76,24,69,22],[76,25,69,23],[77,2,70,0],[78,2,72,0],[78,11,72,9,"extractUserData"],[78,26,72,24,"extractUserData"],[78,27,73,2,"user"],[78,31,73,6],[78,33,76,2,"keys"],[78,37,76,6],[78,39,77,2],[79,4,78,2],[79,10,78,8,"extractedUser"],[79,23,78,21],[79,26,78,24],[79,27,78,25],[79,28,78,26],[80,4,79,2],[80,10,79,8,"attributes"],[80,20,79,18],[80,23,79,21,"Array"],[80,28,79,26],[80,29,79,27,"isArray"],[80,36,79,34],[80,37,79,35,"keys"],[80,41,79,39],[80,42,79,40],[80,45,79,43,"keys"],[80,49,79,47],[80,52,79,50,"DEFAULT_USER_INCLUDES"],[80,73,79,71],[81,4,81,2,"attributes"],[81,14,81,12],[81,15,81,13,"forEach"],[81,22,81,20],[81,23,81,21,"key"],[81,26,81,24],[81,30,81,28],[82,6,82,4],[82,10,82,8,"user"],[82,14,82,12],[82,18,82,16,"key"],[82,21,82,19],[82,25,82,23,"user"],[82,29,82,27],[82,31,82,29],[83,8,83,6,"extractedUser"],[83,21,83,19],[83,22,83,20,"key"],[83,25,83,23],[83,26,83,24],[83,29,83,27,"user"],[83,33,83,31],[83,34,83,32,"key"],[83,37,83,35],[83,38,83,36],[84,6,84,4],[85,4,85,2],[85,5,85,3],[85,6,85,4],[86,4,87,2],[86,11,87,9,"extractedUser"],[86,24,87,22],[87,2,88,0],[89,2,90,0],[90,0,91,0],[91,0,92,0],[92,0,93,0],[93,0,94,0],[94,0,95,0],[95,0,96,0],[96,0,97,0],[97,0,98,0],[98,0,99,0],[99,0,100,0],[100,2,101,0],[100,11,101,9,"extractRequestData"],[100,29,101,27,"extractRequestData"],[100,30,102,2,"req"],[100,33,102,5],[100,35,103,2,"options"],[100,42,103,9],[100,45,105,3],[100,46,105,4],[100,47,105,5],[100,49,106,2],[101,4,107,2],[101,10,107,8],[102,6,107,10,"include"],[102,13,107,17],[102,16,107,20,"DEFAULT_REQUEST_INCLUDES"],[103,4,107,45],[103,5,107,46],[103,8,107,49,"options"],[103,15,107,56],[104,4,108,2],[104,10,108,8,"requestData"],[104,21,108,19],[104,24,108,22],[104,25,108,23],[104,26,108,24],[106,4,110,2],[107,4,111,2],[108,4,112,2],[108,10,112,8,"headers"],[108,17,112,15],[108,20,112,19,"req"],[108,23,112,22],[108,24,112,23,"headers"],[108,31,112,30],[108,35,112,34],[108,36,112,35],[108,37,112,37],[109,4,115,2],[110,4,116,2],[111,4,117,2],[111,10,117,8,"method"],[111,16,117,14],[111,19,117,17,"req"],[111,22,117,20],[111,23,117,21,"method"],[111,29,117,27],[112,4,118,2],[113,4,119,2],[114,4,120,2],[115,4,121,2],[116,4,122,2],[117,4,123,2],[118,4,124,2],[119,4,125,2],[119,10,125,8,"host"],[119,14,125,12],[119,17,125,15,"headers"],[119,24,125,22],[119,25,125,23,"host"],[119,29,125,27],[119,33,125,31,"req"],[119,36,125,34],[119,37,125,35,"hostname"],[119,45,125,43],[119,49,125,47,"req"],[119,52,125,50],[119,53,125,51,"host"],[119,57,125,55],[119,61,125,59],[119,72,125,70],[120,4,126,2],[121,4,127,2],[122,4,128,2],[123,4,129,2],[123,10,129,8,"protocol"],[123,18,129,16],[123,21,129,19,"req"],[123,24,129,22],[123,25,129,23,"protocol"],[123,33,129,31],[123,38,129,36],[123,45,129,43],[123,49,129,48,"req"],[123,52,129,51],[123,53,129,52,"socket"],[123,59,129,58],[123,63,129,62,"req"],[123,66,129,65],[123,67,129,66,"socket"],[123,73,129,72],[123,74,129,73,"encrypted"],[123,83,129,83],[123,86,129,86],[123,93,129,93],[123,96,129,96],[123,102,129,102],[124,4,130,2],[125,4,131,2],[126,4,132,2],[127,4,133,2],[127,10,133,8,"originalUrl"],[127,21,133,19],[127,24,133,22,"req"],[127,27,133,25],[127,28,133,26,"originalUrl"],[127,39,133,37],[127,43,133,41,"req"],[127,46,133,44],[127,47,133,45,"url"],[127,50,133,48],[127,54,133,52],[127,56,133,54],[128,4,134,2],[129,4,135,2],[129,10,135,8,"absoluteUrl"],[129,21,135,19],[129,24,135,22,"originalUrl"],[129,35,135,33],[129,36,135,34,"startsWith"],[129,46,135,44],[129,47,135,45,"protocol"],[129,55,135,53],[129,56,135,54],[129,59,135,57,"originalUrl"],[129,70,135,68],[129,73,135,71],[129,76,135,74,"protocol"],[129,84,135,82],[129,90,135,88,"host"],[129,94,135,92],[129,97,135,95,"originalUrl"],[129,108,135,106],[129,110,135,108],[130,4,136,2,"include"],[130,11,136,9],[130,12,136,10,"forEach"],[130,19,136,17],[130,20,136,18,"key"],[130,23,136,21],[130,27,136,25],[131,6,137,4],[131,14,137,12,"key"],[131,17,137,15],[132,8,138,6],[132,13,138,11],[132,22,138,20],[133,10,138,22],[134,12,139,8,"requestData"],[134,23,139,19],[134,24,139,20,"headers"],[134,31,139,27],[134,34,139,30,"headers"],[134,41,139,37],[136,12,141,8],[137,12,142,8],[137,16,142,12],[137,17,142,13,"include"],[137,24,142,20],[137,25,142,21,"includes"],[137,33,142,29],[137,34,142,30],[137,43,142,39],[137,44,142,40],[137,46,142,42],[138,14,143,10],[138,21,143,18,"requestData"],[138,32,143,29],[138,33,143,30,"headers"],[138,40,143,37],[138,41,143,40,"cookie"],[138,47,143,46],[139,12,144,8],[141,12,146,8],[142,12,147,8],[142,16,147,12],[142,17,147,13,"include"],[142,24,147,20],[142,25,147,21,"includes"],[142,33,147,29],[142,34,147,30],[142,38,147,34],[142,39,147,35],[142,41,147,37],[143,14,148,10,"ipHeaderNames"],[143,41,148,23],[143,42,148,24,"forEach"],[143,49,148,31],[143,50,148,32,"ipHeaderName"],[143,62,148,44],[143,66,148,48],[144,16,149,12],[145,16,150,12],[145,23,150,20,"requestData"],[145,34,150,31],[145,35,150,32,"headers"],[145,42,150,39],[145,43,150,42,"ipHeaderName"],[145,55,150,54],[145,56,150,55],[146,14,151,10],[146,15,151,11],[146,16,151,12],[147,12,152,8],[148,12,154,8],[149,10,155,6],[150,8,156,6],[150,13,156,11],[150,21,156,19],[151,10,156,21],[152,12,157,8,"requestData"],[152,23,157,19],[152,24,157,20,"method"],[152,30,157,26],[152,33,157,29,"method"],[152,39,157,35],[153,12,158,8],[154,10,159,6],[155,8,160,6],[155,13,160,11],[155,18,160,16],[156,10,160,18],[157,12,161,8,"requestData"],[157,23,161,19],[157,24,161,20,"url"],[157,27,161,23],[157,30,161,26,"absoluteUrl"],[157,41,161,37],[158,12,162,8],[159,10,163,6],[160,8,164,6],[160,13,164,11],[160,22,164,20],[161,10,164,22],[162,12,165,8],[163,12,166,8],[164,12,167,8],[165,12,168,8,"requestData"],[165,23,168,19],[165,24,168,20,"cookies"],[165,31,168,27],[166,12,169,10],[167,12,170,10],[168,12,171,10,"req"],[168,15,171,13],[168,16,171,14,"cookies"],[168,23,171,21],[168,27,171,26,"headers"],[168,34,171,33],[168,35,171,34,"cookie"],[168,41,171,40],[168,45,171,44],[168,49,171,44,"parseCookie"],[168,68,171,55],[168,70,171,56,"headers"],[168,77,171,63],[168,78,171,64,"cookie"],[168,84,171,70],[168,85,171,72],[168,89,171,76],[168,90,171,77],[168,91,171,78],[169,12,172,8],[170,10,173,6],[171,8,174,6],[171,13,174,11],[171,27,174,25],[172,10,174,27],[173,12,175,8],[174,12,176,8],[175,12,177,8],[176,12,178,8,"requestData"],[176,23,178,19],[176,24,178,20,"query_string"],[176,36,178,32],[176,39,178,35,"extractQueryParams"],[176,57,178,53],[176,58,178,54,"req"],[176,61,178,57],[176,62,178,58],[177,12,179,8],[178,10,180,6],[179,8,181,6],[179,13,181,11],[179,19,181,17],[180,10,181,19],[181,12,182,8],[181,16,182,12,"method"],[181,22,182,18],[181,27,182,23],[181,32,182,28],[181,36,182,32,"method"],[181,42,182,38],[181,47,182,43],[181,53,182,49],[181,55,182,51],[182,14,183,10],[183,12,184,8],[184,12,185,8],[185,12,186,8],[186,12,187,8],[187,12,188,8],[188,12,189,8],[189,12,190,8],[190,12,191,8],[191,12,192,8],[192,12,193,8],[193,12,194,8],[194,12,195,8],[195,12,196,8],[195,18,196,14,"body"],[195,22,196,18],[195,25,196,21,"req"],[195,28,196,24],[195,29,196,25,"body"],[195,33,196,29],[196,12,197,8],[196,16,197,12,"body"],[196,20,197,16],[196,25,197,21,"undefined"],[196,34,197,30],[196,36,197,32],[197,14,198,10],[197,20,198,16,"stringBody"],[197,30,198,26],[197,33,198,29],[197,37,198,29,"isString"],[197,49,198,37],[197,51,198,38,"body"],[197,55,198,42],[197,56,198,43],[197,59,199,14,"body"],[197,63,199,18],[197,66,200,14],[197,70,200,14,"isPlainObject"],[197,87,200,27],[197,89,200,28,"body"],[197,93,200,32],[197,94,200,33],[197,97,201,16,"JSON"],[197,101,201,20],[197,102,201,21,"stringify"],[197,111,201,30],[197,112,201,31],[197,116,201,31,"normalize"],[197,136,201,40],[197,138,201,41,"body"],[197,142,201,45],[197,143,201,46],[197,144,201,47],[197,147,202,16],[197,151,202,16,"truncate"],[197,167,202,24],[197,169,202,25],[197,172,202,28,"body"],[197,176,202,32],[197,178,202,34],[197,180,202,36],[197,184,202,40],[197,185,202,41],[198,14,203,10],[198,18,203,14,"stringBody"],[198,28,203,24],[198,30,203,26],[199,16,204,12,"requestData"],[199,27,204,23],[199,28,204,24,"data"],[199,32,204,28],[199,35,204,31,"stringBody"],[199,45,204,41],[200,14,205,10],[201,12,206,8],[202,12,207,8],[203,10,208,6],[204,8,209,6],[205,10,209,15],[206,12,210,8],[206,16,210,12],[206,17,210,13],[206,18,210,14],[206,19,210,15,"hasOwnProperty"],[206,33,210,29],[206,34,210,30,"call"],[206,38,210,34],[206,39,210,35,"req"],[206,42,210,38],[206,44,210,40,"key"],[206,47,210,43],[206,48,210,44],[206,50,210,46],[207,14,211,10,"requestData"],[207,25,211,21],[207,26,211,22,"key"],[207,29,211,25],[207,30,211,26],[207,33,211,30,"req"],[207,36,211,33],[207,37,211,36,"key"],[207,40,211,39],[207,41,211,40],[208,12,212,8],[209,10,213,6],[210,6,214,4],[211,4,215,2],[211,5,215,3],[211,6,215,4],[212,4,217,2],[212,11,217,9,"requestData"],[212,22,217,20],[213,2,218,0],[215,2,220,0],[216,0,221,0],[217,0,222,0],[218,0,223,0],[219,2,224,0],[219,11,224,9,"addNormalizedRequestDataToEvent"],[219,42,224,40,"addNormalizedRequestDataToEvent"],[219,43,225,2,"event"],[219,48,225,7],[219,50,226,2,"req"],[219,53,226,5],[220,2,227,2],[221,2,228,2,"additionalData"],[221,16,228,16],[221,18,229,2,"options"],[221,25,229,9],[221,27,230,2],[222,4,231,2],[222,10,231,8,"include"],[222,17,231,15],[222,20,231,18],[223,6,232,4],[223,9,232,7,"DEFAULT_INCLUDES"],[223,25,232,23],[224,6,233,4],[224,10,233,8,"options"],[224,17,233,15],[224,21,233,19,"options"],[224,28,233,26],[224,29,233,27,"include"],[224,36,233,34],[225,4,234,2],[225,5,234,3],[226,4,236,2],[226,8,236,6,"include"],[226,15,236,13],[226,16,236,14,"request"],[226,23,236,21],[226,25,236,23],[227,6,237,4],[227,12,237,10,"includeRequest"],[227,26,237,24],[227,29,237,27,"Array"],[227,34,237,32],[227,35,237,33,"isArray"],[227,42,237,40],[227,43,237,41,"include"],[227,50,237,48],[227,51,237,49,"request"],[227,58,237,56],[227,59,237,57],[227,62,237,60],[227,63,237,61],[227,66,237,64,"include"],[227,73,237,71],[227,74,237,72,"request"],[227,81,237,79],[227,82,237,80],[227,85,237,83],[227,86,237,84],[227,89,237,87,"DEFAULT_REQUEST_INCLUDES"],[227,113,237,111],[227,114,237,112],[228,6,238,4],[228,10,238,8,"include"],[228,17,238,15],[228,18,238,16,"ip"],[228,20,238,18],[228,22,238,20],[229,8,239,6,"includeRequest"],[229,22,239,20],[229,23,239,21,"push"],[229,27,239,25],[229,28,239,26],[229,32,239,30],[229,33,239,31],[230,6,240,4],[231,6,242,4],[231,12,242,10,"extractedRequestData"],[231,32,242,30],[231,35,242,33,"extractNormalizedRequestData"],[231,63,242,61],[231,64,242,62,"req"],[231,67,242,65],[231,69,242,67],[232,8,242,69,"include"],[232,15,242,76],[232,17,242,78,"includeRequest"],[233,6,242,93],[233,7,242,94],[233,8,242,95],[234,6,244,4,"event"],[234,11,244,9],[234,12,244,10,"request"],[234,19,244,17],[234,22,244,20],[235,8,245,6],[235,11,245,9,"event"],[235,16,245,14],[235,17,245,15,"request"],[235,24,245,22],[236,8,246,6],[236,11,246,9,"extractedRequestData"],[237,6,247,4],[237,7,247,5],[238,4,248,2],[239,4,250,2],[239,8,250,6,"include"],[239,15,250,13],[239,16,250,14,"user"],[239,20,250,18],[239,22,250,20],[240,6,251,4],[240,12,251,10,"extractedUser"],[240,25,251,23],[240,28,252,6,"additionalData"],[240,42,252,20],[240,43,252,21,"user"],[240,47,252,25],[240,51,252,29],[240,55,252,29,"isPlainObject"],[240,72,252,42],[240,74,252,43,"additionalData"],[240,88,252,57],[240,89,252,58,"user"],[240,93,252,62],[240,94,252,63],[240,97,253,10,"extractUserData"],[240,112,253,25],[240,113,253,26,"additionalData"],[240,127,253,40],[240,128,253,41,"user"],[240,132,253,45],[240,134,253,47,"include"],[240,141,253,54],[240,142,253,55,"user"],[240,146,253,59],[240,147,253,60],[240,150,254,10],[240,151,254,11],[240,152,254,12],[241,6,256,4],[241,10,256,8,"Object"],[241,16,256,14],[241,17,256,15,"keys"],[241,21,256,19],[241,22,256,20,"extractedUser"],[241,35,256,33],[241,36,256,34],[241,37,256,35,"length"],[241,43,256,41],[241,45,256,43],[242,8,257,6,"event"],[242,13,257,11],[242,14,257,12,"user"],[242,18,257,16],[242,21,257,19],[243,10,258,8],[243,13,258,11,"extractedUser"],[243,26,258,24],[244,10,259,8],[244,13,259,11,"event"],[244,18,259,16],[244,19,259,17,"user"],[245,8,260,6],[245,9,260,7],[246,6,261,4],[247,4,262,2],[248,4,264,2],[248,8,264,6,"include"],[248,15,264,13],[248,16,264,14,"ip"],[248,18,264,16],[248,20,264,18],[249,6,265,4],[249,12,265,10,"ip"],[249,14,265,12],[249,17,265,16,"req"],[249,20,265,19],[249,21,265,20,"headers"],[249,28,265,27],[249,32,265,31],[249,36,265,31,"getClientIPAddress"],[249,68,265,49],[249,70,265,50,"req"],[249,73,265,53],[249,74,265,54,"headers"],[249,81,265,61],[249,82,265,62],[249,86,265,67,"additionalData"],[249,100,265,81],[249,101,265,82,"ipAddress"],[249,110,265,91],[250,6,266,4],[250,10,266,8,"ip"],[250,12,266,10],[250,14,266,12],[251,8,267,6,"event"],[251,13,267,11],[251,14,267,12,"user"],[251,18,267,16],[251,21,267,19],[252,10,268,8],[252,13,268,11,"event"],[252,18,268,16],[252,19,268,17,"user"],[252,23,268,21],[253,10,269,8,"ip_address"],[253,20,269,18],[253,22,269,20,"ip"],[254,8,270,6],[254,9,270,7],[255,6,271,4],[256,4,272,2],[257,2,273,0],[259,2,275,0],[260,0,276,0],[261,0,277,0],[262,0,278,0],[263,0,279,0],[264,0,280,0],[265,0,281,0],[266,0,282,0],[267,0,283,0],[268,0,284,0],[269,0,285,0],[270,2,286,0],[270,11,286,9,"addRequestDataToEvent"],[270,32,286,30,"addRequestDataToEvent"],[270,33,287,2,"event"],[270,38,287,7],[270,40,288,2,"req"],[270,43,288,5],[270,45,289,2,"options"],[270,52,289,9],[270,54,290,2],[271,4,291,2],[271,10,291,8,"include"],[271,17,291,15],[271,20,291,18],[272,6,292,4],[272,9,292,7,"DEFAULT_INCLUDES"],[272,25,292,23],[273,6,293,4],[273,10,293,8,"options"],[273,17,293,15],[273,21,293,19,"options"],[273,28,293,26],[273,29,293,27,"include"],[273,36,293,34],[274,4,294,2],[274,5,294,3],[275,4,296,2],[275,8,296,6,"include"],[275,15,296,13],[275,16,296,14,"request"],[275,23,296,21],[275,25,296,23],[276,6,297,4],[276,12,297,10,"includeRequest"],[276,26,297,24],[276,29,297,27,"Array"],[276,34,297,32],[276,35,297,33,"isArray"],[276,42,297,40],[276,43,297,41,"include"],[276,50,297,48],[276,51,297,49,"request"],[276,58,297,56],[276,59,297,57],[276,62,297,60],[276,63,297,61],[276,66,297,64,"include"],[276,73,297,71],[276,74,297,72,"request"],[276,81,297,79],[276,82,297,80],[276,85,297,83],[276,86,297,84],[276,89,297,87,"DEFAULT_REQUEST_INCLUDES"],[276,113,297,111],[276,114,297,112],[277,6,298,4],[277,10,298,8,"include"],[277,17,298,15],[277,18,298,16,"ip"],[277,20,298,18],[277,22,298,20],[278,8,299,6,"includeRequest"],[278,22,299,20],[278,23,299,21,"push"],[278,27,299,25],[278,28,299,26],[278,32,299,30],[278,33,299,31],[279,6,300,4],[281,6,302,4],[282,6,303,4],[282,12,303,10,"extractedRequestData"],[282,32,303,30],[282,35,303,33,"extractRequestData"],[282,53,303,51],[282,54,303,52,"req"],[282,57,303,55],[282,59,303,57],[283,8,303,59,"include"],[283,15,303,66],[283,17,303,68,"includeRequest"],[284,6,303,83],[284,7,303,84],[284,8,303,85],[285,6,305,4,"event"],[285,11,305,9],[285,12,305,10,"request"],[285,19,305,17],[285,22,305,20],[286,8,306,6],[286,11,306,9,"event"],[286,16,306,14],[286,17,306,15,"request"],[286,24,306,22],[287,8,307,6],[287,11,307,9,"extractedRequestData"],[288,6,308,4],[288,7,308,5],[289,4,309,2],[290,4,311,2],[290,8,311,6,"include"],[290,15,311,13],[290,16,311,14,"user"],[290,20,311,18],[290,22,311,20],[291,6,312,4],[291,12,312,10,"extractedUser"],[291,25,312,23],[291,28,312,26,"req"],[291,31,312,29],[291,32,312,30,"user"],[291,36,312,34],[291,40,312,38],[291,44,312,38,"isPlainObject"],[291,61,312,51],[291,63,312,52,"req"],[291,66,312,55],[291,67,312,56,"user"],[291,71,312,60],[291,72,312,61],[291,75,312,64,"extractUserData"],[291,90,312,79],[291,91,312,80,"req"],[291,94,312,83],[291,95,312,84,"user"],[291,99,312,88],[291,101,312,90,"include"],[291,108,312,97],[291,109,312,98,"user"],[291,113,312,102],[291,114,312,103],[291,117,312,106],[291,118,312,107],[291,119,312,108],[292,6,314,4],[292,10,314,8,"Object"],[292,16,314,14],[292,17,314,15,"keys"],[292,21,314,19],[292,22,314,20,"extractedUser"],[292,35,314,33],[292,36,314,34],[292,37,314,35,"length"],[292,43,314,41],[292,45,314,43],[293,8,315,6,"event"],[293,13,315,11],[293,14,315,12,"user"],[293,18,315,16],[293,21,315,19],[294,10,316,8],[294,13,316,11,"event"],[294,18,316,16],[294,19,316,17,"user"],[294,23,316,21],[295,10,317,8],[295,13,317,11,"extractedUser"],[296,8,318,6],[296,9,318,7],[297,6,319,4],[298,4,320,2],[300,4,322,2],[301,4,323,2],[302,4,324,2],[303,4,325,2],[304,4,326,2],[304,8,326,6,"include"],[304,15,326,13],[304,16,326,14,"ip"],[304,18,326,16],[304,20,326,18],[305,6,327,4],[305,12,327,10,"ip"],[305,14,327,12],[305,17,327,16,"req"],[305,20,327,19],[305,21,327,20,"headers"],[305,28,327,27],[305,32,327,31],[305,36,327,31,"getClientIPAddress"],[305,68,327,49],[305,70,327,50,"req"],[305,73,327,53],[305,74,327,54,"headers"],[305,81,327,61],[305,82,327,62],[305,86,327,67,"req"],[305,89,327,70],[305,90,327,71,"ip"],[305,92,327,73],[305,96,327,78,"req"],[305,99,327,81],[305,100,327,82,"socket"],[305,106,327,88],[305,110,327,92,"req"],[305,113,327,95],[305,114,327,96,"socket"],[305,120,327,102],[305,121,327,103,"remoteAddress"],[305,134,327,117],[306,6,328,4],[306,10,328,8,"ip"],[306,12,328,10],[306,14,328,12],[307,8,329,6,"event"],[307,13,329,11],[307,14,329,12,"user"],[307,18,329,16],[307,21,329,19],[308,10,330,8],[308,13,330,11,"event"],[308,18,330,16],[308,19,330,17,"user"],[308,23,330,21],[309,10,331,8,"ip_address"],[309,20,331,18],[309,22,331,20,"ip"],[310,8,332,6],[310,9,332,7],[311,6,333,4],[312,4,334,2],[313,4,336,2],[313,11,336,9,"event"],[313,16,336,14],[314,2,337,0],[315,2,339,0],[315,11,339,9,"extractQueryParams"],[315,29,339,27,"extractQueryParams"],[315,30,339,28,"req"],[315,33,339,31],[315,35,339,33],[316,4,340,2],[317,4,341,2],[318,4,342,2],[319,4,343,2],[319,8,343,6,"originalUrl"],[319,19,343,17],[319,22,343,20,"req"],[319,25,343,23],[319,26,343,24,"originalUrl"],[319,37,343,35],[319,41,343,39,"req"],[319,44,343,42],[319,45,343,43,"url"],[319,48,343,46],[319,52,343,50],[319,54,343,52],[320,4,345,2],[320,8,345,6],[320,9,345,7,"originalUrl"],[320,20,345,18],[320,22,345,20],[321,6,346,4],[322,4,347,2],[324,4,349,2],[325,4,350,2],[326,4,351,2],[326,8,351,6,"originalUrl"],[326,19,351,17],[326,20,351,18,"startsWith"],[326,30,351,28],[326,31,351,29],[326,34,351,32],[326,35,351,33],[326,37,351,35],[327,6,352,4,"originalUrl"],[327,17,352,15],[327,20,352,18],[327,44,352,42,"originalUrl"],[327,55,352,53],[327,57,352,55],[328,4,353,2],[329,4,355,2],[329,8,355,6],[330,6,356,4],[330,12,356,10,"queryParams"],[330,23,356,21],[330,26,356,24,"req"],[330,29,356,27],[330,30,356,28,"query"],[330,35,356,33],[330,39,356,37],[330,43,356,41,"URL"],[330,46,356,44],[330,47,356,45,"originalUrl"],[330,58,356,56],[330,59,356,57],[330,60,356,58,"search"],[330,66,356,64],[330,67,356,65,"slice"],[330,72,356,70],[330,73,356,71],[330,74,356,72],[330,75,356,73],[331,6,357,4],[331,13,357,11,"queryParams"],[331,24,357,22],[331,25,357,23,"length"],[331,31,357,29],[331,34,357,32,"queryParams"],[331,45,357,43],[331,48,357,46,"undefined"],[331,57,357,55],[332,4,358,2],[332,5,358,3],[332,6,358,4],[332,13,358,11,"e2"],[332,15,358,13],[332,17,358,15],[333,6,359,4],[333,13,359,11,"undefined"],[333,22,359,20],[334,4,360,2],[335,2,361,0],[337,2,363,0],[338,0,364,0],[339,0,365,0],[340,0,366,0],[341,2,367,0],[342,2,368,0],[342,11,368,9,"winterCGHeadersToDict"],[342,32,368,30,"winterCGHeadersToDict"],[342,33,368,31,"winterCGHeaders"],[342,48,368,46],[342,50,368,48],[343,4,369,2],[343,10,369,8,"headers"],[343,17,369,15],[343,20,369,18],[343,21,369,19],[343,22,369,20],[344,4,370,2],[344,8,370,6],[345,6,371,4,"winterCGHeaders"],[345,21,371,19],[345,22,371,20,"forEach"],[345,29,371,27],[345,30,371,28],[345,31,371,29,"value"],[345,36,371,34],[345,38,371,36,"key"],[345,41,371,39],[345,46,371,44],[346,8,372,6],[346,12,372,10],[346,19,372,17,"value"],[346,24,372,22],[346,29,372,27],[346,37,372,35],[346,39,372,37],[347,10,373,8],[348,10,374,8,"headers"],[348,17,374,15],[348,18,374,16,"key"],[348,21,374,19],[348,22,374,20],[348,25,374,23,"value"],[348,30,374,28],[349,8,375,6],[350,6,376,4],[350,7,376,5],[350,8,376,6],[351,4,377,2],[351,5,377,3],[351,6,377,4],[351,13,377,11,"e"],[351,14,377,12],[351,16,377,14],[352,6,378,4,"DEBUG_BUILD"],[352,29,378,15],[352,33,379,6,"logger"],[352,47,379,12],[352,48,379,13,"warn"],[352,52,379,17],[352,53,379,18],[352,149,379,114],[352,150,379,115],[353,4,380,2],[354,4,382,2],[354,11,382,9,"headers"],[354,18,382,16],[355,2,383,0],[357,2,385,0],[358,0,386,0],[359,0,387,0],[360,2,388,0],[360,11,388,9,"headersToDict"],[360,24,388,22,"headersToDict"],[360,25,388,23,"reqHeaders"],[360,35,388,33],[360,37,388,35],[361,4,389,2],[361,10,389,8,"headers"],[361,17,389,15],[361,20,389,18,"Object"],[361,26,389,24],[361,27,389,25,"create"],[361,33,389,31],[361,34,389,32],[361,38,389,36],[361,39,389,37],[362,4,391,2],[362,8,391,6],[363,6,392,4,"Object"],[363,12,392,10],[363,13,392,11,"entries"],[363,20,392,18],[363,21,392,19,"reqHeaders"],[363,31,392,29],[363,32,392,30],[363,33,392,31,"forEach"],[363,40,392,38],[363,41,392,39],[363,42,392,40],[363,43,392,41,"key"],[363,46,392,44],[363,48,392,46,"value"],[363,53,392,51],[363,54,392,52],[363,59,392,57],[364,8,393,6],[364,12,393,10],[364,19,393,17,"value"],[364,24,393,22],[364,29,393,27],[364,37,393,35],[364,39,393,37],[365,10,394,8,"headers"],[365,17,394,15],[365,18,394,16,"key"],[365,21,394,19],[365,22,394,20],[365,25,394,23,"value"],[365,30,394,28],[366,8,395,6],[367,6,396,4],[367,7,396,5],[367,8,396,6],[368,4,397,2],[368,5,397,3],[368,6,397,4],[368,13,397,11,"e"],[368,14,397,12],[368,16,397,14],[369,6,398,4,"DEBUG_BUILD"],[369,29,398,15],[369,33,399,6,"logger"],[369,47,399,12],[369,48,399,13,"warn"],[369,52,399,17],[369,53,399,18],[369,149,399,114],[369,150,399,115],[370,4,400,2],[371,4,402,2],[371,11,402,9,"headers"],[371,18,402,16],[372,2,403,0],[374,2,405,0],[375,0,406,0],[376,0,407,0],[377,2,408,0],[377,11,408,9,"winterCGRequestToRequestData"],[377,39,408,37,"winterCGRequestToRequestData"],[377,40,408,38,"req"],[377,43,408,41],[377,45,408,43],[378,4,409,2],[378,10,409,8,"headers"],[378,17,409,15],[378,20,409,18,"winterCGHeadersToDict"],[378,41,409,39],[378,42,409,40,"req"],[378,45,409,43],[378,46,409,44,"headers"],[378,53,409,51],[378,54,409,52],[379,4,411,2],[379,11,411,9],[380,6,412,4,"method"],[380,12,412,10],[380,14,412,12,"req"],[380,17,412,15],[380,18,412,16,"method"],[380,24,412,22],[381,6,413,4,"url"],[381,9,413,7],[381,11,413,9,"req"],[381,14,413,12],[381,15,413,13,"url"],[381,18,413,16],[382,6,414,4,"query_string"],[382,18,414,16],[382,20,414,18,"extractQueryParamsFromUrl"],[382,45,414,43],[382,46,414,44,"req"],[382,49,414,47],[382,50,414,48,"url"],[382,53,414,51],[382,54,414,52],[383,6,415,4,"headers"],[384,6,416,4],[385,4,417,2],[385,5,417,3],[386,2,418,0],[388,2,420,0],[389,0,421,0],[390,0,422,0],[391,0,423,0],[392,0,424,0],[393,2,425,0],[393,11,425,9,"httpRequestToRequestData"],[393,35,425,33,"httpRequestToRequestData"],[393,36,425,34,"request"],[393,43,425,41],[393,45,427,2],[394,4,428,2],[394,10,428,8,"headers"],[394,17,428,15],[394,20,428,18,"request"],[394,27,428,25],[394,28,428,26,"headers"],[394,35,428,33],[394,39,428,37],[394,40,428,38],[394,41,428,39],[395,4,429,2],[395,10,429,8,"host"],[395,14,429,12],[395,17,429,15,"headers"],[395,24,429,22],[395,25,429,23,"host"],[395,29,429,27],[395,33,429,31],[395,44,429,42],[396,4,430,2],[396,10,430,8,"protocol"],[396,18,430,16],[396,21,430,19,"request"],[396,28,430,26],[396,29,430,27,"socket"],[396,35,430,33],[396,39,430,38,"request"],[396,46,430,45],[396,47,430,46,"socket"],[396,53,430,52],[396,54,430,55,"encrypted"],[396,63,430,64],[396,66,430,67],[396,73,430,74],[396,76,430,77],[396,82,430,83],[397,4,431,2],[397,10,431,8,"originalUrl"],[397,21,431,19],[397,24,431,22,"request"],[397,31,431,29],[397,32,431,30,"url"],[397,35,431,33],[397,39,431,37],[397,41,431,39],[398,4,432,2],[398,10,432,8,"absoluteUrl"],[398,21,432,19],[398,24,432,22,"originalUrl"],[398,35,432,33],[398,36,432,34,"startsWith"],[398,46,432,44],[398,47,432,45,"protocol"],[398,55,432,53],[398,56,432,54],[398,59,432,57,"originalUrl"],[398,70,432,68],[398,73,432,71],[398,76,432,74,"protocol"],[398,84,432,82],[398,90,432,88,"host"],[398,94,432,92],[398,97,432,95,"originalUrl"],[398,108,432,106],[398,110,432,108],[400,4,434,2],[401,4,435,2],[402,4,436,2],[402,10,436,8,"data"],[402,14,436,12],[402,17,436,16,"request"],[402,24,436,23],[402,25,436,26,"body"],[402,29,436,30],[402,33,436,34,"undefined"],[402,42,436,43],[404,4,438,2],[405,4,439,2],[405,10,439,8,"cookies"],[405,17,439,15],[405,20,439,19,"request"],[405,27,439,26],[405,28,439,29,"cookies"],[405,35,439,36],[406,4,441,2],[406,11,441,9],[406,15,441,9,"dropUndefinedKeys"],[406,40,441,26],[406,42,441,27],[407,6,442,4,"url"],[407,9,442,7],[407,11,442,9,"absoluteUrl"],[407,22,442,20],[408,6,443,4,"method"],[408,12,443,10],[408,14,443,12,"request"],[408,21,443,19],[408,22,443,20,"method"],[408,28,443,26],[409,6,444,4,"query_string"],[409,18,444,16],[409,20,444,18,"extractQueryParamsFromUrl"],[409,45,444,43],[409,46,444,44,"originalUrl"],[409,57,444,55],[409,58,444,56],[410,6,445,4,"headers"],[410,13,445,11],[410,15,445,13,"headersToDict"],[410,28,445,26],[410,29,445,27,"headers"],[410,36,445,34],[410,37,445,35],[411,6,446,4,"cookies"],[411,13,446,11],[412,6,447,4,"data"],[413,4,448,2],[413,5,448,3],[413,6,448,4],[414,2,449,0],[416,2,451,0],[417,2,452,0],[417,11,452,9,"extractQueryParamsFromUrl"],[417,36,452,34,"extractQueryParamsFromUrl"],[417,37,452,35,"url"],[417,40,452,38],[417,42,452,40],[418,4,453,2],[419,4,454,2],[419,8,454,6],[419,9,454,7,"url"],[419,12,454,10],[419,14,454,12],[420,6,455,4],[421,4,456,2],[422,4,458,2],[422,8,458,6],[423,6,459,4],[424,6,460,4],[425,6,461,4],[425,12,461,10,"queryParams"],[425,23,461,21],[425,26,461,24],[425,30,461,28,"URL"],[425,33,461,31],[425,34,461,32,"url"],[425,37,461,35],[425,39,461,37],[425,62,461,60],[425,63,461,61],[425,64,461,62,"search"],[425,70,461,68],[425,71,461,69,"slice"],[425,76,461,74],[425,77,461,75],[425,78,461,76],[425,79,461,77],[426,6,462,4],[426,13,462,11,"queryParams"],[426,24,462,22],[426,25,462,23,"length"],[426,31,462,29],[426,34,462,32,"queryParams"],[426,45,462,43],[426,48,462,46,"undefined"],[426,57,462,55],[427,4,463,2],[427,5,463,3],[427,6,463,4],[427,13,463,11,"e3"],[427,15,463,13],[427,17,463,15],[428,6,464,4],[428,13,464,11,"undefined"],[428,22,464,20],[429,4,465,2],[430,2,466,0],[431,2,468,0],[431,11,468,9,"extractNormalizedRequestData"],[431,39,468,37,"extractNormalizedRequestData"],[431,40,469,2,"normalizedRequest"],[431,57,469,19],[431,59,470,2],[432,4,470,4,"include"],[433,2,470,12],[433,3,470,13],[433,5,471,2],[434,4,472,2],[434,10,472,8,"includeKeys"],[434,21,472,19],[434,24,472,22,"include"],[434,31,472,29],[434,34,472,33,"Array"],[434,39,472,38],[434,40,472,39,"isArray"],[434,47,472,46],[434,48,472,47,"include"],[434,55,472,54],[434,56,472,55],[434,59,472,58,"include"],[434,66,472,65],[434,69,472,68,"DEFAULT_REQUEST_INCLUDES"],[434,93,472,92],[434,96,472,96],[434,98,472,98],[435,4,474,2],[435,10,474,8,"requestData"],[435,21,474,19],[435,24,474,22],[435,25,474,23],[435,26,474,24],[436,4,475,2],[436,10,475,8,"headers"],[436,17,475,15],[436,20,475,18],[437,6,475,20],[437,9,475,23,"normalizedRequest"],[437,26,475,40],[437,27,475,41,"headers"],[438,4,475,49],[438,5,475,50],[439,4,477,2],[439,8,477,6,"includeKeys"],[439,19,477,17],[439,20,477,18,"includes"],[439,28,477,26],[439,29,477,27],[439,38,477,36],[439,39,477,37],[439,41,477,39],[440,6,478,4,"requestData"],[440,17,478,15],[440,18,478,16,"headers"],[440,25,478,23],[440,28,478,26,"headers"],[440,35,478,33],[442,6,480,4],[443,6,481,4],[443,10,481,8],[443,11,481,9,"include"],[443,18,481,16],[443,19,481,17,"includes"],[443,27,481,25],[443,28,481,26],[443,37,481,35],[443,38,481,36],[443,40,481,38],[444,8,482,6],[444,15,482,14,"headers"],[444,22,482,21],[444,23,482,24,"cookie"],[444,29,482,30],[445,6,483,4],[447,6,485,4],[448,6,486,4],[448,10,486,8],[448,11,486,9,"include"],[448,18,486,16],[448,19,486,17,"includes"],[448,27,486,25],[448,28,486,26],[448,32,486,30],[448,33,486,31],[448,35,486,33],[449,8,487,6,"ipHeaderNames"],[449,35,487,19],[449,36,487,20,"forEach"],[449,43,487,27],[449,44,487,28,"ipHeaderName"],[449,56,487,40],[449,60,487,44],[450,10,488,8],[451,10,489,8],[451,17,489,16,"headers"],[451,24,489,23],[451,25,489,26,"ipHeaderName"],[451,37,489,38],[451,38,489,39],[452,8,490,6],[452,9,490,7],[452,10,490,8],[453,6,491,4],[454,4,492,2],[455,4,494,2],[455,8,494,6,"includeKeys"],[455,19,494,17],[455,20,494,18,"includes"],[455,28,494,26],[455,29,494,27],[455,37,494,35],[455,38,494,36],[455,40,494,38],[456,6,495,4,"requestData"],[456,17,495,15],[456,18,495,16,"method"],[456,24,495,22],[456,27,495,25,"normalizedRequest"],[456,44,495,42],[456,45,495,43,"method"],[456,51,495,49],[457,4,496,2],[458,4,498,2],[458,8,498,6,"includeKeys"],[458,19,498,17],[458,20,498,18,"includes"],[458,28,498,26],[458,29,498,27],[458,34,498,32],[458,35,498,33],[458,37,498,35],[459,6,499,4,"requestData"],[459,17,499,15],[459,18,499,16,"url"],[459,21,499,19],[459,24,499,22,"normalizedRequest"],[459,41,499,39],[459,42,499,40,"url"],[459,45,499,43],[460,4,500,2],[461,4,502,2],[461,8,502,6,"includeKeys"],[461,19,502,17],[461,20,502,18,"includes"],[461,28,502,26],[461,29,502,27],[461,38,502,36],[461,39,502,37],[461,41,502,39],[462,6,503,4],[462,12,503,10,"cookies"],[462,19,503,17],[462,22,503,20,"normalizedRequest"],[462,39,503,37],[462,40,503,38,"cookies"],[462,47,503,45],[462,52,503,50,"headers"],[462,59,503,57],[462,63,503,61,"headers"],[462,70,503,68],[462,71,503,69,"cookie"],[462,77,503,75],[462,80,503,78],[462,84,503,78,"parseCookie"],[462,103,503,89],[462,105,503,90,"headers"],[462,112,503,97],[462,113,503,98,"cookie"],[462,119,503,104],[462,120,503,105],[462,123,503,108,"undefined"],[462,132,503,117],[462,133,503,118],[463,6,504,4,"requestData"],[463,17,504,15],[463,18,504,16,"cookies"],[463,25,504,23],[463,28,504,26,"cookies"],[463,35,504,33],[463,39,504,37],[463,40,504,38],[463,41,504,39],[464,4,505,2],[465,4,507,2],[465,8,507,6,"includeKeys"],[465,19,507,17],[465,20,507,18,"includes"],[465,28,507,26],[465,29,507,27],[465,43,507,41],[465,44,507,42],[465,46,507,44],[466,6,508,4,"requestData"],[466,17,508,15],[466,18,508,16,"query_string"],[466,30,508,28],[466,33,508,31,"normalizedRequest"],[466,50,508,48],[466,51,508,49,"query_string"],[466,63,508,61],[467,4,509,2],[468,4,511,2],[468,8,511,6,"includeKeys"],[468,19,511,17],[468,20,511,18,"includes"],[468,28,511,26],[468,29,511,27],[468,35,511,33],[468,36,511,34],[468,38,511,36],[469,6,512,4,"requestData"],[469,17,512,15],[469,18,512,16,"data"],[469,22,512,20],[469,25,512,23,"normalizedRequest"],[469,42,512,40],[469,43,512,41,"data"],[469,47,512,45],[470,4,513,2],[471,4,515,2],[471,11,515,9,"requestData"],[471,22,515,20],[472,2,516,0],[473,0,516,1],[473,3]],"functionMap":{"names":["<global>","extractPathForTransaction","extractUserData","attributes.forEach$argument_0","extractRequestData","include.forEach$argument_0","ipHeaderNames.forEach$argument_0","addNormalizedRequestDataToEvent","addRequestDataToEvent","extractQueryParams","winterCGHeadersToDict","winterCGHeaders.forEach$argument_0","headersToDict","Object.entries.forEach$argument_0","winterCGRequestToRequestData","httpRequestToRequestData","extractQueryParamsFromUrl","extractNormalizedRequestData"],"mappings":"AAA;ACqC;CDgC;AEE;qBCS;GDI;CFG;AIa;kBCmC;gCCY;WDG;GDgE;CJG;AOM;CPiD;AQa;CRmD;ASE;CTsB;AUO;4BCG;KDK;CVO;AYK;uCCI;KDI;CZO;AcK;CdU;AeO;CfwB;AgBG;ChBc;AiBE;4BXmB;OWG;CjB0B"}},"type":"js/module"}]}