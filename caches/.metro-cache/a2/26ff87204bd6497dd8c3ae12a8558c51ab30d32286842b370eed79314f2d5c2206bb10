{"dependencies":[{"name":"../observe.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"Bg3ZFLN2BI2v94qjUhj8Too4FZg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.initInteractionCountPolyfill = exports.getInteractionCount = void 0;\n  var _observe = require(_dependencyMap[0], \"../observe.js\");\n  /*\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     https://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  let interactionCountEstimate = 0;\n  let minKnownInteractionId = Infinity;\n  let maxKnownInteractionId = 0;\n  const updateEstimate = entries => {\n    entries.forEach(e => {\n      if (e.interactionId) {\n        minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n        maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n        interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n      }\n    });\n  };\n  let po;\n\n  /**\n   * Returns the `interactionCount` value using the native API (if available)\n   * or the polyfill estimate in this module.\n   */\n  const getInteractionCount = () => {\n    return po ? interactionCountEstimate : performance.interactionCount || 0;\n  };\n\n  /**\n   * Feature detects native support or initializes the polyfill if needed.\n   */\n  exports.getInteractionCount = getInteractionCount;\n  const initInteractionCountPolyfill = () => {\n    if ('interactionCount' in performance || po) return;\n    po = (0, _observe.observe)('event', updateEstimate, {\n      type: 'event',\n      buffered: true,\n      durationThreshold: 0\n    });\n  };\n  exports.initInteractionCountPolyfill = initInteractionCountPolyfill;\n});","lineCount":58,"map":[[6,2,1,0],[6,6,1,0,"_observe"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[23,2,20,0],[23,6,20,4,"interactionCountEstimate"],[23,30,20,28],[23,33,20,31],[23,34,20,32],[24,2,21,0],[24,6,21,4,"minKnownInteractionId"],[24,27,21,25],[24,30,21,28,"Infinity"],[24,38,21,36],[25,2,22,0],[25,6,22,4,"maxKnownInteractionId"],[25,27,22,25],[25,30,22,28],[25,31,22,29],[26,2,24,0],[26,8,24,6,"updateEstimate"],[26,22,24,20],[26,25,24,24,"entries"],[26,32,24,31],[26,36,24,36],[27,4,25,2,"entries"],[27,11,25,9],[27,12,25,10,"forEach"],[27,19,25,17],[27,20,25,18,"e"],[27,21,25,19],[27,25,25,23],[28,6,26,4],[28,10,26,8,"e"],[28,11,26,9],[28,12,26,10,"interactionId"],[28,25,26,23],[28,27,26,25],[29,8,27,6,"minKnownInteractionId"],[29,29,27,27],[29,32,27,30,"Math"],[29,36,27,34],[29,37,27,35,"min"],[29,40,27,38],[29,41,27,39,"minKnownInteractionId"],[29,62,27,60],[29,64,27,62,"e"],[29,65,27,63],[29,66,27,64,"interactionId"],[29,79,27,77],[29,80,27,78],[30,8,28,6,"maxKnownInteractionId"],[30,29,28,27],[30,32,28,30,"Math"],[30,36,28,34],[30,37,28,35,"max"],[30,40,28,38],[30,41,28,39,"maxKnownInteractionId"],[30,62,28,60],[30,64,28,62,"e"],[30,65,28,63],[30,66,28,64,"interactionId"],[30,79,28,77],[30,80,28,78],[31,8,30,6,"interactionCountEstimate"],[31,32,30,30],[31,35,30,33,"maxKnownInteractionId"],[31,56,30,54],[31,59,30,57],[31,60,30,58,"maxKnownInteractionId"],[31,81,30,79],[31,84,30,82,"minKnownInteractionId"],[31,105,30,103],[31,109,30,107],[31,110,30,108],[31,113,30,111],[31,114,30,112],[31,117,30,115],[31,118,30,116],[32,6,31,4],[33,4,32,2],[33,5,32,3],[33,6,32,4],[34,2,33,0],[34,3,33,1],[35,2,35,0],[35,6,35,4,"po"],[35,8,35,6],[37,2,37,0],[38,0,38,0],[39,0,39,0],[40,0,40,0],[41,2,41,0],[41,8,41,6,"getInteractionCount"],[41,27,41,25],[41,30,41,28,"getInteractionCount"],[41,31,41,28],[41,36,41,34],[42,4,42,2],[42,11,42,9,"po"],[42,13,42,11],[42,16,42,14,"interactionCountEstimate"],[42,40,42,38],[42,43,42,41,"performance"],[42,54,42,52],[42,55,42,53,"interactionCount"],[42,71,42,69],[42,75,42,73],[42,76,42,74],[43,2,43,0],[43,3,43,1],[45,2,45,0],[46,0,46,0],[47,0,47,0],[48,2,45,0,"exports"],[48,9,45,0],[48,10,45,0,"getInteractionCount"],[48,29,45,0],[48,32,45,0,"getInteractionCount"],[48,51,45,0],[49,2,48,0],[49,8,48,6,"initInteractionCountPolyfill"],[49,36,48,34],[49,39,48,37,"initInteractionCountPolyfill"],[49,40,48,37],[49,45,48,43],[50,4,49,2],[50,8,49,6],[50,26,49,24],[50,30,49,28,"performance"],[50,41,49,39],[50,45,49,43,"po"],[50,47,49,45],[50,49,49,47],[51,4,51,2,"po"],[51,6,51,4],[51,9,51,7],[51,13,51,7,"observe"],[51,29,51,14],[51,31,51,15],[51,38,51,22],[51,40,51,24,"updateEstimate"],[51,54,51,38],[51,56,51,40],[52,6,52,4,"type"],[52,10,52,8],[52,12,52,10],[52,19,52,17],[53,6,53,4,"buffered"],[53,14,53,12],[53,16,53,14],[53,20,53,18],[54,6,54,4,"durationThreshold"],[54,23,54,21],[54,25,54,23],[55,4,55,2],[55,5,55,4],[55,6,55,5],[56,2,56,0],[56,3,56,1],[57,2,56,2,"exports"],[57,9,56,2],[57,10,56,2,"initInteractionCountPolyfill"],[57,38,56,2],[57,41,56,2,"initInteractionCountPolyfill"],[57,69,56,2],[58,0,56,2],[58,3]],"functionMap":{"names":["<global>","updateEstimate","entries.forEach$argument_0","getInteractionCount","initInteractionCountPolyfill"],"mappings":"AAA;uBCuB;kBCC;GDO;CDC;4BGQ;CHE;qCIK;CJQ"}},"type":"js/module"}]}