{"dependencies":[{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":49},"end":{"line":2,"column":48,"index":97}}],"key":"rfhktnzi6PvZxT1xtyHWbBktN/w=","exportNames":["*"]}},{"name":"../tracing/errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":98},"end":{"line":3,"column":30,"index":128}}],"key":"Rut4hI3uRhbMUTCkzG60gqQfEAI=","exportNames":["*"]}},{"name":"../utils-hoist/worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":129},"end":{"line":4,"column":65,"index":194}}],"key":"3XwLTKWavtFq2Dntu5m8UVSo4Us=","exportNames":["*"]}},{"name":"../utils-hoist/debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":195},"end":{"line":5,"column":39,"index":234}}],"key":"WCqi4t6fnkZp2zTJh30nWkxWTUc=","exportNames":["*"]}},{"name":"../utils-hoist/logger.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":235},"end":{"line":6,"column":50,"index":285}}],"key":"ntkLGOO3yQLxIuhQNqZB03aOwxw=","exportNames":["*"]}},{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":286},"end":{"line":7,"column":60,"index":346}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":347},"end":{"line":8,"column":79,"index":426}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"../tracing/trace.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":427},"end":{"line":9,"column":54,"index":481}}],"key":"iEwv0Fy5pQnV3+dCxBaqJzshaHs=","exportNames":["*"]}},{"name":"../utils/handleCallbackErrors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":482},"end":{"line":10,"column":72,"index":554}}],"key":"y2C2MazQzuoczeVtvZJXH2UirDs=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":555},"end":{"line":11,"column":115,"index":670}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.metrics = void 0;\n  var _currentScopes = require(_dependencyMap[0], \"../currentScopes.js\");\n  var _debugBuild = require(_dependencyMap[1], \"../debug-build.js\");\n  require(_dependencyMap[2], \"../tracing/errors.js\");\n  var _worldwide = require(_dependencyMap[3], \"../utils-hoist/worldwide.js\");\n  require(_dependencyMap[4], \"../utils-hoist/debug-build.js\");\n  var _logger = require(_dependencyMap[5], \"../utils-hoist/logger.js\");\n  var _time = require(_dependencyMap[6], \"../utils-hoist/time.js\");\n  var _spanUtils = require(_dependencyMap[7], \"../utils/spanUtils.js\");\n  var _trace = require(_dependencyMap[8], \"../tracing/trace.js\");\n  var _handleCallbackErrors = require(_dependencyMap[9], \"../utils/handleCallbackErrors.js\");\n  var _constants = require(_dependencyMap[10], \"./constants.js\");\n  /**\n   * Gets the metrics aggregator for a given client.\n   * @param client The client for which to get the metrics aggregator.\n   * @param Aggregator Optional metrics aggregator class to use to create an aggregator if one does not exist.\n   */\n  function getMetricsAggregatorForClient(client, Aggregator) {\n    const globalMetricsAggregators = (0, _worldwide.getGlobalSingleton)('globalMetricsAggregators', () => new WeakMap());\n    const aggregator = globalMetricsAggregators.get(client);\n    if (aggregator) {\n      return aggregator;\n    }\n    const newAggregator = new Aggregator(client);\n    client.on('flush', () => newAggregator.flush());\n    client.on('close', () => newAggregator.close());\n    globalMetricsAggregators.set(client, newAggregator);\n    return newAggregator;\n  }\n  function addToMetricsAggregator(Aggregator, metricType, name, value, data = {}) {\n    const client = data.client || (0, _currentScopes.getClient)();\n    if (!client) {\n      return;\n    }\n    const span = (0, _spanUtils.getActiveSpan)();\n    const rootSpan = span ? (0, _spanUtils.getRootSpan)(span) : undefined;\n    const transactionName = rootSpan && (0, _spanUtils.spanToJSON)(rootSpan).description;\n    const {\n      unit,\n      tags,\n      timestamp\n    } = data;\n    const {\n      release,\n      environment\n    } = client.getOptions();\n    const metricTags = {};\n    if (release) {\n      metricTags.release = release;\n    }\n    if (environment) {\n      metricTags.environment = environment;\n    }\n    if (transactionName) {\n      metricTags.transaction = transactionName;\n    }\n    _debugBuild.DEBUG_BUILD && _logger.logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n    const aggregator = getMetricsAggregatorForClient(client, Aggregator);\n    aggregator.add(metricType, name, value, unit, {\n      ...metricTags,\n      ...tags\n    }, timestamp);\n  }\n\n  /**\n   * Adds a value to a counter metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function increment(aggregator, name, value = 1, data) {\n    addToMetricsAggregator(aggregator, _constants.COUNTER_METRIC_TYPE, name, ensureNumber(value), data);\n  }\n\n  /**\n   * Adds a value to a distribution metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function distribution(aggregator, name, value, data) {\n    addToMetricsAggregator(aggregator, _constants.DISTRIBUTION_METRIC_TYPE, name, ensureNumber(value), data);\n  }\n\n  /**\n   * Adds a timing metric.\n   * The metric is added as a distribution metric.\n   *\n   * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n   * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function timing(aggregator, name, value, unit = 'second', data) {\n    // callback form\n    if (typeof value === 'function') {\n      const startTime = (0, _time.timestampInSeconds)();\n      return (0, _trace.startSpanManual)({\n        op: 'metrics.timing',\n        name,\n        startTime,\n        onlyIfParent: true\n      }, span => {\n        return (0, _handleCallbackErrors.handleCallbackErrors)(() => value(), () => {\n          // no special error handling necessary\n        }, () => {\n          const endTime = (0, _time.timestampInSeconds)();\n          const timeDiff = endTime - startTime;\n          // eslint-disable-next-line deprecation/deprecation\n          distribution(aggregator, name, timeDiff, {\n            ...data,\n            unit: 'second'\n          });\n          span.end(endTime);\n        });\n      });\n    }\n\n    // value form\n    // eslint-disable-next-line deprecation/deprecation\n    distribution(aggregator, name, value, {\n      ...data,\n      unit\n    });\n  }\n\n  /**\n   * Adds a value to a set metric. Value must be a string or integer.\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function set(aggregator, name, value, data) {\n    addToMetricsAggregator(aggregator, _constants.SET_METRIC_TYPE, name, value, data);\n  }\n\n  /**\n   * Adds a value to a gauge metric\n   *\n   * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n   */\n  function gauge(aggregator, name, value, data) {\n    addToMetricsAggregator(aggregator, _constants.GAUGE_METRIC_TYPE, name, ensureNumber(value), data);\n  }\n\n  /**\n   * The metrics API is used to capture custom metrics in Sentry.\n   *\n   * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n   */\n  const metrics = exports.metrics = {\n    increment,\n    distribution,\n    set,\n    gauge,\n    timing,\n    /**\n     * @ignore This is for internal use only.\n     */\n    getMetricsAggregatorForClient\n  };\n\n  // Although this is typed to be a number, we try to handle strings as well here\n  function ensureNumber(number) {\n    return typeof number === 'string' ? parseInt(number) : number;\n  }\n});","lineCount":168,"map":[[6,2,1,0],[6,6,1,0,"_currentScopes"],[6,20,1,0],[6,23,1,0,"require"],[6,30,1,0],[6,31,1,0,"_dependencyMap"],[6,45,1,0],[7,2,2,0],[7,6,2,0,"_debugBuild"],[7,17,2,0],[7,20,2,0,"require"],[7,27,2,0],[7,28,2,0,"_dependencyMap"],[7,42,2,0],[8,2,3,0,"require"],[8,9,3,0],[8,10,3,0,"_dependencyMap"],[8,24,3,0],[9,2,4,0],[9,6,4,0,"_worldwide"],[9,16,4,0],[9,19,4,0,"require"],[9,26,4,0],[9,27,4,0,"_dependencyMap"],[9,41,4,0],[10,2,5,0,"require"],[10,9,5,0],[10,10,5,0,"_dependencyMap"],[10,24,5,0],[11,2,6,0],[11,6,6,0,"_logger"],[11,13,6,0],[11,16,6,0,"require"],[11,23,6,0],[11,24,6,0,"_dependencyMap"],[11,38,6,0],[12,2,7,0],[12,6,7,0,"_time"],[12,11,7,0],[12,14,7,0,"require"],[12,21,7,0],[12,22,7,0,"_dependencyMap"],[12,36,7,0],[13,2,8,0],[13,6,8,0,"_spanUtils"],[13,16,8,0],[13,19,8,0,"require"],[13,26,8,0],[13,27,8,0,"_dependencyMap"],[13,41,8,0],[14,2,9,0],[14,6,9,0,"_trace"],[14,12,9,0],[14,15,9,0,"require"],[14,22,9,0],[14,23,9,0,"_dependencyMap"],[14,37,9,0],[15,2,10,0],[15,6,10,0,"_handleCallbackErrors"],[15,27,10,0],[15,30,10,0,"require"],[15,37,10,0],[15,38,10,0,"_dependencyMap"],[15,52,10,0],[16,2,11,0],[16,6,11,0,"_constants"],[16,16,11,0],[16,19,11,0,"require"],[16,26,11,0],[16,27,11,0,"_dependencyMap"],[16,41,11,0],[17,2,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,2,18,0],[22,11,18,9,"getMetricsAggregatorForClient"],[22,40,18,38,"getMetricsAggregatorForClient"],[22,41,19,2,"client"],[22,47,19,8],[22,49,20,2,"Aggregator"],[22,59,20,12],[22,61,21,2],[23,4,22,2],[23,10,22,8,"globalMetricsAggregators"],[23,34,22,32],[23,37,22,35],[23,41,22,35,"getGlobalSingleton"],[23,70,22,53],[23,72,23,4],[23,98,23,30],[23,100,24,4],[23,106,24,10],[23,110,24,14,"WeakMap"],[23,117,24,21],[23,118,24,22],[23,119,25,2],[23,120,25,3],[24,4,27,2],[24,10,27,8,"aggregator"],[24,20,27,18],[24,23,27,21,"globalMetricsAggregators"],[24,47,27,45],[24,48,27,46,"get"],[24,51,27,49],[24,52,27,50,"client"],[24,58,27,56],[24,59,27,57],[25,4,28,2],[25,8,28,6,"aggregator"],[25,18,28,16],[25,20,28,18],[26,6,29,4],[26,13,29,11,"aggregator"],[26,23,29,21],[27,4,30,2],[28,4,32,2],[28,10,32,8,"newAggregator"],[28,23,32,21],[28,26,32,24],[28,30,32,28,"Aggregator"],[28,40,32,38],[28,41,32,39,"client"],[28,47,32,45],[28,48,32,46],[29,4,33,2,"client"],[29,10,33,8],[29,11,33,9,"on"],[29,13,33,11],[29,14,33,12],[29,21,33,19],[29,23,33,21],[29,29,33,27,"newAggregator"],[29,42,33,40],[29,43,33,41,"flush"],[29,48,33,46],[29,49,33,47],[29,50,33,48],[29,51,33,49],[30,4,34,2,"client"],[30,10,34,8],[30,11,34,9,"on"],[30,13,34,11],[30,14,34,12],[30,21,34,19],[30,23,34,21],[30,29,34,27,"newAggregator"],[30,42,34,40],[30,43,34,41,"close"],[30,48,34,46],[30,49,34,47],[30,50,34,48],[30,51,34,49],[31,4,35,2,"globalMetricsAggregators"],[31,28,35,26],[31,29,35,27,"set"],[31,32,35,30],[31,33,35,31,"client"],[31,39,35,37],[31,41,35,39,"newAggregator"],[31,54,35,52],[31,55,35,53],[32,4,37,2],[32,11,37,9,"newAggregator"],[32,24,37,22],[33,2,38,0],[34,2,40,0],[34,11,40,9,"addToMetricsAggregator"],[34,33,40,31,"addToMetricsAggregator"],[34,34,41,2,"Aggregator"],[34,44,41,12],[34,46,42,2,"metricType"],[34,56,42,12],[34,58,43,2,"name"],[34,62,43,6],[34,64,44,2,"value"],[34,69,44,7],[34,71,45,2,"data"],[34,75,45,6],[34,78,45,9],[34,79,45,10],[34,80,45,11],[34,82,46,2],[35,4,47,2],[35,10,47,8,"client"],[35,16,47,14],[35,19,47,17,"data"],[35,23,47,21],[35,24,47,22,"client"],[35,30,47,28],[35,34,47,32],[35,38,47,32,"getClient"],[35,62,47,41],[35,64,47,42],[35,65,47,43],[36,4,49,2],[36,8,49,6],[36,9,49,7,"client"],[36,15,49,13],[36,17,49,15],[37,6,50,4],[38,4,51,2],[39,4,53,2],[39,10,53,8,"span"],[39,14,53,12],[39,17,53,15],[39,21,53,15,"getActiveSpan"],[39,45,53,28],[39,47,53,29],[39,48,53,30],[40,4,54,2],[40,10,54,8,"rootSpan"],[40,18,54,16],[40,21,54,19,"span"],[40,25,54,23],[40,28,54,26],[40,32,54,26,"getRootSpan"],[40,54,54,37],[40,56,54,38,"span"],[40,60,54,42],[40,61,54,43],[40,64,54,46,"undefined"],[40,73,54,55],[41,4,55,2],[41,10,55,8,"transactionName"],[41,25,55,23],[41,28,55,26,"rootSpan"],[41,36,55,34],[41,40,55,38],[41,44,55,38,"spanToJSON"],[41,65,55,48],[41,67,55,49,"rootSpan"],[41,75,55,57],[41,76,55,58],[41,77,55,59,"description"],[41,88,55,70],[42,4,57,2],[42,10,57,8],[43,6,57,10,"unit"],[43,10,57,14],[44,6,57,16,"tags"],[44,10,57,20],[45,6,57,22,"timestamp"],[46,4,57,32],[46,5,57,33],[46,8,57,36,"data"],[46,12,57,40],[47,4,58,2],[47,10,58,8],[48,6,58,10,"release"],[48,13,58,17],[49,6,58,19,"environment"],[50,4,58,31],[50,5,58,32],[50,8,58,35,"client"],[50,14,58,41],[50,15,58,42,"getOptions"],[50,25,58,52],[50,26,58,53],[50,27,58,54],[51,4,59,2],[51,10,59,8,"metricTags"],[51,20,59,18],[51,23,59,21],[51,24,59,22],[51,25,59,23],[52,4,60,2],[52,8,60,6,"release"],[52,15,60,13],[52,17,60,15],[53,6,61,4,"metricTags"],[53,16,61,14],[53,17,61,15,"release"],[53,24,61,22],[53,27,61,25,"release"],[53,34,61,32],[54,4,62,2],[55,4,63,2],[55,8,63,6,"environment"],[55,19,63,17],[55,21,63,19],[56,6,64,4,"metricTags"],[56,16,64,14],[56,17,64,15,"environment"],[56,28,64,26],[56,31,64,29,"environment"],[56,42,64,40],[57,4,65,2],[58,4,66,2],[58,8,66,6,"transactionName"],[58,23,66,21],[58,25,66,23],[59,6,67,4,"metricTags"],[59,16,67,14],[59,17,67,15,"transaction"],[59,28,67,26],[59,31,67,29,"transactionName"],[59,46,67,44],[60,4,68,2],[61,4,70,2,"DEBUG_BUILD"],[61,27,70,13],[61,31,70,17,"logger"],[61,45,70,23],[61,46,70,24,"log"],[61,49,70,27],[61,50,70,28],[61,69,70,47,"value"],[61,74,70,52],[61,81,70,59,"metricType"],[61,91,70,69],[61,102,70,80,"name"],[61,106,70,84],[61,108,70,86],[61,109,70,87],[62,4,72,2],[62,10,72,8,"aggregator"],[62,20,72,18],[62,23,72,21,"getMetricsAggregatorForClient"],[62,52,72,50],[62,53,72,51,"client"],[62,59,72,57],[62,61,72,59,"Aggregator"],[62,71,72,69],[62,72,72,70],[63,4,73,2,"aggregator"],[63,14,73,12],[63,15,73,13,"add"],[63,18,73,16],[63,19,73,17,"metricType"],[63,29,73,27],[63,31,73,29,"name"],[63,35,73,33],[63,37,73,35,"value"],[63,42,73,40],[63,44,73,42,"unit"],[63,48,73,46],[63,50,73,48],[64,6,73,50],[64,9,73,53,"metricTags"],[64,19,73,63],[65,6,73,65],[65,9,73,68,"tags"],[66,4,73,73],[66,5,73,74],[66,7,73,76,"timestamp"],[66,16,73,85],[66,17,73,86],[67,2,74,0],[69,2,76,0],[70,0,77,0],[71,0,78,0],[72,0,79,0],[73,0,80,0],[74,2,81,0],[74,11,81,9,"increment"],[74,20,81,18,"increment"],[74,21,81,19,"aggregator"],[74,31,81,29],[74,33,81,31,"name"],[74,37,81,35],[74,39,81,37,"value"],[74,44,81,42],[74,47,81,45],[74,48,81,46],[74,50,81,48,"data"],[74,54,81,52],[74,56,81,54],[75,4,82,2,"addToMetricsAggregator"],[75,26,82,24],[75,27,82,25,"aggregator"],[75,37,82,35],[75,39,82,37,"COUNTER_METRIC_TYPE"],[75,69,82,56],[75,71,82,58,"name"],[75,75,82,62],[75,77,82,64,"ensureNumber"],[75,89,82,76],[75,90,82,77,"value"],[75,95,82,82],[75,96,82,83],[75,98,82,85,"data"],[75,102,82,89],[75,103,82,90],[76,2,83,0],[78,2,85,0],[79,0,86,0],[80,0,87,0],[81,0,88,0],[82,0,89,0],[83,2,90,0],[83,11,90,9,"distribution"],[83,23,90,21,"distribution"],[83,24,90,22,"aggregator"],[83,34,90,32],[83,36,90,34,"name"],[83,40,90,38],[83,42,90,40,"value"],[83,47,90,45],[83,49,90,47,"data"],[83,53,90,51],[83,55,90,53],[84,4,91,2,"addToMetricsAggregator"],[84,26,91,24],[84,27,91,25,"aggregator"],[84,37,91,35],[84,39,91,37,"DISTRIBUTION_METRIC_TYPE"],[84,74,91,61],[84,76,91,63,"name"],[84,80,91,67],[84,82,91,69,"ensureNumber"],[84,94,91,81],[84,95,91,82,"value"],[84,100,91,87],[84,101,91,88],[84,103,91,90,"data"],[84,107,91,94],[84,108,91,95],[85,2,92,0],[87,2,94,0],[88,0,95,0],[89,0,96,0],[90,0,97,0],[91,0,98,0],[92,0,99,0],[93,0,100,0],[94,0,101,0],[95,0,102,0],[96,2,103,0],[96,11,103,9,"timing"],[96,17,103,15,"timing"],[96,18,104,2,"aggregator"],[96,28,104,12],[96,30,105,2,"name"],[96,34,105,6],[96,36,106,2,"value"],[96,41,106,7],[96,43,107,2,"unit"],[96,47,107,6],[96,50,107,9],[96,58,107,17],[96,60,108,2,"data"],[96,64,108,6],[96,66,109,2],[97,4,110,2],[98,4,111,2],[98,8,111,6],[98,15,111,13,"value"],[98,20,111,18],[98,25,111,23],[98,35,111,33],[98,37,111,35],[99,6,112,4],[99,12,112,10,"startTime"],[99,21,112,19],[99,24,112,22],[99,28,112,22,"timestampInSeconds"],[99,52,112,40],[99,54,112,41],[99,55,112,42],[100,6,114,4],[100,13,114,11],[100,17,114,11,"startSpanManual"],[100,39,114,26],[100,41,115,6],[101,8,116,8,"op"],[101,10,116,10],[101,12,116,12],[101,28,116,28],[102,8,117,8,"name"],[102,12,117,12],[103,8,118,8,"startTime"],[103,17,118,17],[104,8,119,8,"onlyIfParent"],[104,20,119,20],[104,22,119,22],[105,6,120,6],[105,7,120,7],[105,9,121,6,"span"],[105,13,121,10],[105,17,121,14],[106,8,122,8],[106,15,122,15],[106,19,122,15,"handleCallbackErrors"],[106,61,122,35],[106,63,123,10],[106,69,123,16,"value"],[106,74,123,21],[106,75,123,22],[106,76,123,23],[106,78,124,10],[106,84,124,16],[107,10,125,12],[108,8,125,12],[108,9,126,11],[108,11,127,10],[108,17,127,16],[109,10,128,12],[109,16,128,18,"endTime"],[109,23,128,25],[109,26,128,28],[109,30,128,28,"timestampInSeconds"],[109,54,128,46],[109,56,128,47],[109,57,128,48],[110,10,129,12],[110,16,129,18,"timeDiff"],[110,24,129,26],[110,27,129,29,"endTime"],[110,34,129,36],[110,37,129,39,"startTime"],[110,46,129,48],[111,10,130,12],[112,10,131,12,"distribution"],[112,22,131,24],[112,23,131,25,"aggregator"],[112,33,131,35],[112,35,131,37,"name"],[112,39,131,41],[112,41,131,43,"timeDiff"],[112,49,131,51],[112,51,131,53],[113,12,131,55],[113,15,131,58,"data"],[113,19,131,62],[114,12,131,64,"unit"],[114,16,131,68],[114,18,131,70],[115,10,131,79],[115,11,131,80],[115,12,131,81],[116,10,132,12,"span"],[116,14,132,16],[116,15,132,17,"end"],[116,18,132,20],[116,19,132,21,"endTime"],[116,26,132,28],[116,27,132,29],[117,8,133,10],[117,9,134,8],[117,10,134,9],[118,6,135,6],[118,7,136,4],[118,8,136,5],[119,4,137,2],[121,4,139,2],[122,4,140,2],[123,4,141,2,"distribution"],[123,16,141,14],[123,17,141,15,"aggregator"],[123,27,141,25],[123,29,141,27,"name"],[123,33,141,31],[123,35,141,33,"value"],[123,40,141,38],[123,42,141,40],[124,6,141,42],[124,9,141,45,"data"],[124,13,141,49],[125,6,141,51,"unit"],[126,4,141,56],[126,5,141,57],[126,6,141,58],[127,2,142,0],[129,2,144,0],[130,0,145,0],[131,0,146,0],[132,0,147,0],[133,0,148,0],[134,2,149,0],[134,11,149,9,"set"],[134,14,149,12,"set"],[134,15,149,13,"aggregator"],[134,25,149,23],[134,27,149,25,"name"],[134,31,149,29],[134,33,149,31,"value"],[134,38,149,36],[134,40,149,38,"data"],[134,44,149,42],[134,46,149,44],[135,4,150,2,"addToMetricsAggregator"],[135,26,150,24],[135,27,150,25,"aggregator"],[135,37,150,35],[135,39,150,37,"SET_METRIC_TYPE"],[135,65,150,52],[135,67,150,54,"name"],[135,71,150,58],[135,73,150,60,"value"],[135,78,150,65],[135,80,150,67,"data"],[135,84,150,71],[135,85,150,72],[136,2,151,0],[138,2,153,0],[139,0,154,0],[140,0,155,0],[141,0,156,0],[142,0,157,0],[143,2,158,0],[143,11,158,9,"gauge"],[143,16,158,14,"gauge"],[143,17,158,15,"aggregator"],[143,27,158,25],[143,29,158,27,"name"],[143,33,158,31],[143,35,158,33,"value"],[143,40,158,38],[143,42,158,40,"data"],[143,46,158,44],[143,48,158,46],[144,4,159,2,"addToMetricsAggregator"],[144,26,159,24],[144,27,159,25,"aggregator"],[144,37,159,35],[144,39,159,37,"GAUGE_METRIC_TYPE"],[144,67,159,54],[144,69,159,56,"name"],[144,73,159,60],[144,75,159,62,"ensureNumber"],[144,87,159,74],[144,88,159,75,"value"],[144,93,159,80],[144,94,159,81],[144,96,159,83,"data"],[144,100,159,87],[144,101,159,88],[145,2,160,0],[147,2,162,0],[148,0,163,0],[149,0,164,0],[150,0,165,0],[151,0,166,0],[152,2,167,0],[152,8,167,6,"metrics"],[152,15,167,13],[152,18,167,13,"exports"],[152,25,167,13],[152,26,167,13,"metrics"],[152,33,167,13],[152,36,167,16],[153,4,168,2,"increment"],[153,13,168,11],[154,4,169,2,"distribution"],[154,16,169,14],[155,4,170,2,"set"],[155,7,170,5],[156,4,171,2,"gauge"],[156,9,171,7],[157,4,172,2,"timing"],[157,10,172,8],[158,4,173,2],[159,0,174,0],[160,0,175,0],[161,4,176,2,"getMetricsAggregatorForClient"],[162,2,177,0],[162,3,177,1],[164,2,179,0],[165,2,180,0],[165,11,180,9,"ensureNumber"],[165,23,180,21,"ensureNumber"],[165,24,180,22,"number"],[165,30,180,28],[165,32,180,30],[166,4,181,2],[166,11,181,9],[166,18,181,16,"number"],[166,24,181,22],[166,29,181,27],[166,37,181,35],[166,40,181,38,"parseInt"],[166,48,181,46],[166,49,181,47,"number"],[166,55,181,53],[166,56,181,54],[166,59,181,57,"number"],[166,65,181,63],[167,2,182,0],[168,0,182,1],[168,3]],"functionMap":{"names":["<global>","getMetricsAggregatorForClient","getGlobalSingleton$argument_1","client.on$argument_1","addToMetricsAggregator","increment","distribution","timing","startSpanManual$argument_1","handleCallbackErrors$argument_0","handleCallbackErrors$argument_1","handleCallbackErrors$argument_2","set","gauge","ensureNumber"],"mappings":"AAA;ACiB;ICM,mBD;qBES,2BF;qBEC,2BF;CDI;AIE;CJkC;AKO;CLE;AMO;CNE;AOW;MCkB;UCE,aD;UEC;WFE;UGC;WHM;ODE;CPO;AYO;CZE;AaO;CbE;AcoB;CdE"}},"type":"js/module"}]}