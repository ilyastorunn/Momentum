{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":681},"end":{"line":10,"column":38,"index":719}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../utils/error","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":720},"end":{"line":11,"column":61,"index":781}}],"key":"08JfAxhwWjN4WA5sLEebhMuO5Lw=","exportNames":["*"]}},{"name":"./debugsymbolicatorutils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":782},"end":{"line":12,"column":102,"index":884}}],"key":"wkpbacU50pXto5nzg4rF6iYjZaI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.debugSymbolicatorIntegration = void 0;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _error = require(_dependencyMap[1], \"../utils/error\");\n  var _debugsymbolicatorutils = require(_dependencyMap[2], \"./debugsymbolicatorutils\");\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  const INTEGRATION_NAME = 'DebugSymbolicator';\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n  const INTERNAL_CALLSITES_REGEX = new RegExp(['ReactNativeRenderer-dev\\\\.js$', 'MessageQueue\\\\.js$'].join('|'));\n  /** Tries to symbolicate the JS stack trace on the device. */\n  const debugSymbolicatorIntegration = () => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce: () => {\n        /* noop */\n      },\n      processEvent\n    };\n  };\n  exports.debugSymbolicatorIntegration = debugSymbolicatorIntegration;\n  function processEvent(event, hint) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (((_a = event.exception) === null || _a === void 0 ? void 0 : _a.values) && (0, _error.isErrorLike)(hint.originalException)) {\n        // originalException is ErrorLike object\n        const errorGroup = getExceptionGroup(hint.originalException);\n        for (const [index, error] of errorGroup.entries()) {\n          const symbolicatedFrames = yield symbolicate(error.stack, (0, _error.getFramesToPop)(error));\n          symbolicatedFrames && replaceExceptionFramesInException(event.exception.values[index], symbolicatedFrames);\n        }\n      } else if (hint.syntheticException && (0, _error.isErrorLike)(hint.syntheticException)) {\n        // syntheticException is Error object\n        const symbolicatedFrames = yield symbolicate(hint.syntheticException.stack, (0, _error.getFramesToPop)(hint.syntheticException));\n        if (event.exception) {\n          symbolicatedFrames && event.exception.values && replaceExceptionFramesInException(event.exception.values[0], symbolicatedFrames);\n        } else if (event.threads) {\n          // RN JS doesn't have threads\n          symbolicatedFrames && replaceThreadFramesInEvent(event, symbolicatedFrames);\n        }\n      }\n      return event;\n    });\n  }\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  function symbolicate(rawStack, skipFirstFrames = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const parsedStack = (0, _debugsymbolicatorutils.parseErrorStack)(rawStack);\n        const prettyStack = yield (0, _debugsymbolicatorutils.symbolicateStackTrace)(parsedStack);\n        if (!prettyStack) {\n          _core.logger.error('React Native DevServer could not symbolicate the stack trace.');\n          return null;\n        }\n        // This has been changed in an react-native version so stack is contained in here\n        const newStack = 'stack' in prettyStack ? prettyStack.stack : prettyStack;\n        // https://github.com/getsentry/sentry-javascript/blob/739d904342aaf9327312f409952f14ceff4ae1ab/packages/utils/src/stacktrace.ts#L23\n        // Match SentryParser which counts lines of stack (-1 for first line with the Error message)\n        const skipFirstAdjustedToSentryStackParser = Math.max(skipFirstFrames - 1, 0);\n        const stackWithoutPoppedFrames = skipFirstAdjustedToSentryStackParser ? newStack.slice(skipFirstAdjustedToSentryStackParser) : newStack;\n        const stackWithoutInternalCallsites = stackWithoutPoppedFrames.filter(frame => frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null);\n        const sentryFrames = yield convertReactNativeFramesToSentryFrames(stackWithoutInternalCallsites);\n        return yield (0, _debugsymbolicatorutils.fetchSourceContext)(sentryFrames);\n      } catch (error) {\n        if (error instanceof Error) {\n          _core.logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n        }\n        return null;\n      }\n    });\n  }\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  function convertReactNativeFramesToSentryFrames(frames) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.all(frames.map(frame => __awaiter(this, void 0, void 0, function* () {\n        let inApp = !!frame.column && !!frame.lineNumber;\n        inApp = inApp && frame.file !== undefined && !frame.file.includes('node_modules') && !frame.file.includes('native code');\n        const newFrame = {\n          lineno: frame.lineNumber,\n          colno: frame.column,\n          filename: frame.file,\n          function: frame.methodName,\n          in_app: inApp\n        };\n        return newFrame;\n      })));\n    });\n  }\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  function replaceExceptionFramesInException(exception, frames) {\n    if (exception === null || exception === void 0 ? void 0 : exception.stacktrace) {\n      exception.stacktrace.frames = frames.reverse();\n    }\n  }\n  /**\n   * Replaces the frames in the thread of a message.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  function replaceThreadFramesInEvent(event, frames) {\n    if (event.threads && event.threads.values && event.threads.values[0] && event.threads.values[0].stacktrace) {\n      event.threads.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n  /**\n   * Return a list containing the original exception and also the cause if found.\n   *\n   * @param originalException The original exception.\n   */\n  function getExceptionGroup(originalException) {\n    const err = originalException;\n    const errorGroup = [];\n    for (let cause = err; (0, _error.isErrorLike)(cause); cause = cause.cause) {\n      errorGroup.push(cause);\n    }\n    return errorGroup;\n  }\n});","lineCount":156,"map":[[6,2,10,0],[6,6,10,0,"_core"],[6,11,10,0],[6,14,10,0,"require"],[6,21,10,0],[6,22,10,0,"_dependencyMap"],[6,36,10,0],[7,2,11,0],[7,6,11,0,"_error"],[7,12,11,0],[7,15,11,0,"require"],[7,22,11,0],[7,23,11,0,"_dependencyMap"],[7,37,11,0],[8,2,12,0],[8,6,12,0,"_debugsymbolicatorutils"],[8,29,12,0],[8,32,12,0,"require"],[8,39,12,0],[8,40,12,0,"_dependencyMap"],[8,54,12,0],[9,2,1,0],[9,6,1,4,"__awaiter"],[9,15,1,13],[9,18,1,17],[9,22,1,21],[9,26,1,25],[9,30,1,29],[9,31,1,30,"__awaiter"],[9,40,1,39],[9,44,1,44],[9,54,1,54,"thisArg"],[9,61,1,61],[9,63,1,63,"_arguments"],[9,73,1,73],[9,75,1,75,"P"],[9,76,1,76],[9,78,1,78,"generator"],[9,87,1,87],[9,89,1,89],[10,4,2,4],[10,13,2,13,"adopt"],[10,18,2,18,"adopt"],[10,19,2,19,"value"],[10,24,2,24],[10,26,2,26],[11,6,2,28],[11,13,2,35,"value"],[11,18,2,40],[11,30,2,52,"P"],[11,31,2,53],[11,34,2,56,"value"],[11,39,2,61],[11,42,2,64],[11,46,2,68,"P"],[11,47,2,69],[11,48,2,70],[11,58,2,80,"resolve"],[11,65,2,87],[11,67,2,89],[12,8,2,91,"resolve"],[12,15,2,98],[12,16,2,99,"value"],[12,21,2,104],[12,22,2,105],[13,6,2,107],[13,7,2,108],[13,8,2,109],[14,4,2,111],[15,4,3,4],[15,11,3,11],[15,16,3,16,"P"],[15,17,3,17],[15,22,3,22,"P"],[15,23,3,23],[15,26,3,26,"Promise"],[15,33,3,33],[15,34,3,34],[15,36,3,36],[15,46,3,46,"resolve"],[15,53,3,53],[15,55,3,55,"reject"],[15,61,3,61],[15,63,3,63],[16,6,4,8],[16,15,4,17,"fulfilled"],[16,24,4,26,"fulfilled"],[16,25,4,27,"value"],[16,30,4,32],[16,32,4,34],[17,8,4,36],[17,12,4,40],[18,10,4,42,"step"],[18,14,4,46],[18,15,4,47,"generator"],[18,24,4,56],[18,25,4,57,"next"],[18,29,4,61],[18,30,4,62,"value"],[18,35,4,67],[18,36,4,68],[18,37,4,69],[19,8,4,71],[19,9,4,72],[19,10,4,73],[19,17,4,80,"e"],[19,18,4,81],[19,20,4,83],[20,10,4,85,"reject"],[20,16,4,91],[20,17,4,92,"e"],[20,18,4,93],[20,19,4,94],[21,8,4,96],[22,6,4,98],[23,6,5,8],[23,15,5,17,"rejected"],[23,23,5,25,"rejected"],[23,24,5,26,"value"],[23,29,5,31],[23,31,5,33],[24,8,5,35],[24,12,5,39],[25,10,5,41,"step"],[25,14,5,45],[25,15,5,46,"generator"],[25,24,5,55],[25,25,5,56],[25,32,5,63],[25,33,5,64],[25,34,5,65,"value"],[25,39,5,70],[25,40,5,71],[25,41,5,72],[26,8,5,74],[26,9,5,75],[26,10,5,76],[26,17,5,83,"e"],[26,18,5,84],[26,20,5,86],[27,10,5,88,"reject"],[27,16,5,94],[27,17,5,95,"e"],[27,18,5,96],[27,19,5,97],[28,8,5,99],[29,6,5,101],[30,6,6,8],[30,15,6,17,"step"],[30,19,6,21,"step"],[30,20,6,22,"result"],[30,26,6,28],[30,28,6,30],[31,8,6,32,"result"],[31,14,6,38],[31,15,6,39,"done"],[31,19,6,43],[31,22,6,46,"resolve"],[31,29,6,53],[31,30,6,54,"result"],[31,36,6,60],[31,37,6,61,"value"],[31,42,6,66],[31,43,6,67],[31,46,6,70,"adopt"],[31,51,6,75],[31,52,6,76,"result"],[31,58,6,82],[31,59,6,83,"value"],[31,64,6,88],[31,65,6,89],[31,66,6,90,"then"],[31,70,6,94],[31,71,6,95,"fulfilled"],[31,80,6,104],[31,82,6,106,"rejected"],[31,90,6,114],[31,91,6,115],[32,6,6,117],[33,6,7,8,"step"],[33,10,7,12],[33,11,7,13],[33,12,7,14,"generator"],[33,21,7,23],[33,24,7,26,"generator"],[33,33,7,35],[33,34,7,36,"apply"],[33,39,7,41],[33,40,7,42,"thisArg"],[33,47,7,49],[33,49,7,51,"_arguments"],[33,59,7,61],[33,63,7,65],[33,65,7,67],[33,66,7,68],[33,68,7,70,"next"],[33,72,7,74],[33,73,7,75],[33,74,7,76],[33,75,7,77],[34,4,8,4],[34,5,8,5],[34,6,8,6],[35,2,9,0],[35,3,9,1],[36,2,13,0],[36,8,13,6,"INTEGRATION_NAME"],[36,24,13,22],[36,27,13,25],[36,46,13,44],[37,2,14,0],[38,2,15,0],[38,8,15,6,"INTERNAL_CALLSITES_REGEX"],[38,32,15,30],[38,35,15,33],[38,39,15,37,"RegExp"],[38,45,15,43],[38,46,15,44],[38,47,15,45],[38,78,15,76],[38,80,15,78],[38,100,15,98],[38,101,15,99],[38,102,15,100,"join"],[38,106,15,104],[38,107,15,105],[38,110,15,108],[38,111,15,109],[38,112,15,110],[39,2,16,0],[40,2,17,7],[40,8,17,13,"debugSymbolicatorIntegration"],[40,36,17,41],[40,39,17,44,"debugSymbolicatorIntegration"],[40,40,17,44],[40,45,17,50],[41,4,18,4],[41,11,18,11],[42,6,19,8,"name"],[42,10,19,12],[42,12,19,14,"INTEGRATION_NAME"],[42,28,19,30],[43,6,20,8,"setupOnce"],[43,15,20,17],[43,17,20,19,"setupOnce"],[43,18,20,19],[43,23,20,25],[44,8,21,12],[45,6,21,12],[45,7,22,9],[46,6,23,8,"processEvent"],[47,4,24,4],[47,5,24,5],[48,2,25,0],[48,3,25,1],[49,2,25,2,"exports"],[49,9,25,2],[49,10,25,2,"debugSymbolicatorIntegration"],[49,38,25,2],[49,41,25,2,"debugSymbolicatorIntegration"],[49,69,25,2],[50,2,26,0],[50,11,26,9,"processEvent"],[50,23,26,21,"processEvent"],[50,24,26,22,"event"],[50,29,26,27],[50,31,26,29,"hint"],[50,35,26,33],[50,37,26,35],[51,4,27,4],[51,8,27,8,"_a"],[51,10,27,10],[52,4,28,4],[52,11,28,11,"__awaiter"],[52,20,28,20],[52,21,28,21],[52,25,28,25],[52,27,28,27],[52,32,28,32],[52,33,28,33],[52,35,28,35],[52,40,28,40],[52,41,28,41],[52,43,28,43],[52,56,28,56],[53,6,29,8],[53,10,29,12],[53,11,29,13],[53,12,29,14,"_a"],[53,14,29,16],[53,17,29,19,"event"],[53,22,29,24],[53,23,29,25,"exception"],[53,32,29,34],[53,38,29,40],[53,42,29,44],[53,46,29,48,"_a"],[53,48,29,50],[53,53,29,55],[53,58,29,60],[53,59,29,61],[53,62,29,64],[53,67,29,69],[53,68,29,70],[53,71,29,73,"_a"],[53,73,29,75],[53,74,29,76,"values"],[53,80,29,82],[53,85,29,87],[53,89,29,87,"isErrorLike"],[53,107,29,98],[53,109,29,99,"hint"],[53,113,29,103],[53,114,29,104,"originalException"],[53,131,29,121],[53,132,29,122],[53,134,29,124],[54,8,30,12],[55,8,31,12],[55,14,31,18,"errorGroup"],[55,24,31,28],[55,27,31,31,"getExceptionGroup"],[55,44,31,48],[55,45,31,49,"hint"],[55,49,31,53],[55,50,31,54,"originalException"],[55,67,31,71],[55,68,31,72],[56,8,32,12],[56,13,32,17],[56,19,32,23],[56,20,32,24,"index"],[56,25,32,29],[56,27,32,31,"error"],[56,32,32,36],[56,33,32,37],[56,37,32,41,"errorGroup"],[56,47,32,51],[56,48,32,52,"entries"],[56,55,32,59],[56,56,32,60],[56,57,32,61],[56,59,32,63],[57,10,33,16],[57,16,33,22,"symbolicatedFrames"],[57,34,33,40],[57,37,33,43],[57,43,33,49,"symbolicate"],[57,54,33,60],[57,55,33,61,"error"],[57,60,33,66],[57,61,33,67,"stack"],[57,66,33,72],[57,68,33,74],[57,72,33,74,"getFramesToPop"],[57,93,33,88],[57,95,33,89,"error"],[57,100,33,94],[57,101,33,95],[57,102,33,96],[58,10,34,16,"symbolicatedFrames"],[58,28,34,34],[58,32,34,38,"replaceExceptionFramesInException"],[58,65,34,71],[58,66,34,72,"event"],[58,71,34,77],[58,72,34,78,"exception"],[58,81,34,87],[58,82,34,88,"values"],[58,88,34,94],[58,89,34,95,"index"],[58,94,34,100],[58,95,34,101],[58,97,34,103,"symbolicatedFrames"],[58,115,34,121],[58,116,34,122],[59,8,35,12],[60,6,36,8],[60,7,36,9],[60,13,37,13],[60,17,37,17,"hint"],[60,21,37,21],[60,22,37,22,"syntheticException"],[60,40,37,40],[60,44,37,44],[60,48,37,44,"isErrorLike"],[60,66,37,55],[60,68,37,56,"hint"],[60,72,37,60],[60,73,37,61,"syntheticException"],[60,91,37,79],[60,92,37,80],[60,94,37,82],[61,8,38,12],[62,8,39,12],[62,14,39,18,"symbolicatedFrames"],[62,32,39,36],[62,35,39,39],[62,41,39,45,"symbolicate"],[62,52,39,56],[62,53,39,57,"hint"],[62,57,39,61],[62,58,39,62,"syntheticException"],[62,76,39,80],[62,77,39,81,"stack"],[62,82,39,86],[62,84,39,88],[62,88,39,88,"getFramesToPop"],[62,109,39,102],[62,111,39,103,"hint"],[62,115,39,107],[62,116,39,108,"syntheticException"],[62,134,39,126],[62,135,39,127],[62,136,39,128],[63,8,40,12],[63,12,40,16,"event"],[63,17,40,21],[63,18,40,22,"exception"],[63,27,40,31],[63,29,40,33],[64,10,41,16,"symbolicatedFrames"],[64,28,41,34],[64,32,42,20,"event"],[64,37,42,25],[64,38,42,26,"exception"],[64,47,42,35],[64,48,42,36,"values"],[64,54,42,42],[64,58,43,20,"replaceExceptionFramesInException"],[64,91,43,53],[64,92,43,54,"event"],[64,97,43,59],[64,98,43,60,"exception"],[64,107,43,69],[64,108,43,70,"values"],[64,114,43,76],[64,115,43,77],[64,116,43,78],[64,117,43,79],[64,119,43,81,"symbolicatedFrames"],[64,137,43,99],[64,138,43,100],[65,8,44,12],[65,9,44,13],[65,15,45,17],[65,19,45,21,"event"],[65,24,45,26],[65,25,45,27,"threads"],[65,32,45,34],[65,34,45,36],[66,10,46,16],[67,10,47,16,"symbolicatedFrames"],[67,28,47,34],[67,32,47,38,"replaceThreadFramesInEvent"],[67,58,47,64],[67,59,47,65,"event"],[67,64,47,70],[67,66,47,72,"symbolicatedFrames"],[67,84,47,90],[67,85,47,91],[68,8,48,12],[69,6,49,8],[70,6,50,8],[70,13,50,15,"event"],[70,18,50,20],[71,4,51,4],[71,5,51,5],[71,6,51,6],[72,2,52,0],[73,2,53,0],[74,0,54,0],[75,0,55,0],[76,0,56,0],[77,2,57,0],[77,11,57,9,"symbolicate"],[77,22,57,20,"symbolicate"],[77,23,57,21,"rawStack"],[77,31,57,29],[77,33,57,31,"skipFirstFrames"],[77,48,57,46],[77,51,57,49],[77,52,57,50],[77,54,57,52],[78,4,58,4],[78,11,58,11,"__awaiter"],[78,20,58,20],[78,21,58,21],[78,25,58,25],[78,27,58,27],[78,32,58,32],[78,33,58,33],[78,35,58,35],[78,40,58,40],[78,41,58,41],[78,43,58,43],[78,56,58,56],[79,6,59,8],[79,10,59,12],[80,8,60,12],[80,14,60,18,"parsedStack"],[80,25,60,29],[80,28,60,32],[80,32,60,32,"parseErrorStack"],[80,71,60,47],[80,73,60,48,"rawStack"],[80,81,60,56],[80,82,60,57],[81,8,61,12],[81,14,61,18,"prettyStack"],[81,25,61,29],[81,28,61,32],[81,34,61,38],[81,38,61,38,"symbolicateStackTrace"],[81,83,61,59],[81,85,61,60,"parsedStack"],[81,96,61,71],[81,97,61,72],[82,8,62,12],[82,12,62,16],[82,13,62,17,"prettyStack"],[82,24,62,28],[82,26,62,30],[83,10,63,16,"logger"],[83,22,63,22],[83,23,63,23,"error"],[83,28,63,28],[83,29,63,29],[83,92,63,92],[83,93,63,93],[84,10,64,16],[84,17,64,23],[84,21,64,27],[85,8,65,12],[86,8,66,12],[87,8,67,12],[87,14,67,18,"newStack"],[87,22,67,26],[87,25,67,29],[87,32,67,36],[87,36,67,40,"prettyStack"],[87,47,67,51],[87,50,67,54,"prettyStack"],[87,61,67,65],[87,62,67,66,"stack"],[87,67,67,71],[87,70,67,74,"prettyStack"],[87,81,67,85],[88,8,68,12],[89,8,69,12],[90,8,70,12],[90,14,70,18,"skipFirstAdjustedToSentryStackParser"],[90,50,70,54],[90,53,70,57,"Math"],[90,57,70,61],[90,58,70,62,"max"],[90,61,70,65],[90,62,70,66,"skipFirstFrames"],[90,77,70,81],[90,80,70,84],[90,81,70,85],[90,83,70,87],[90,84,70,88],[90,85,70,89],[91,8,71,12],[91,14,71,18,"stackWithoutPoppedFrames"],[91,38,71,42],[91,41,71,45,"skipFirstAdjustedToSentryStackParser"],[91,77,71,81],[91,80,72,18,"newStack"],[91,88,72,26],[91,89,72,27,"slice"],[91,94,72,32],[91,95,72,33,"skipFirstAdjustedToSentryStackParser"],[91,131,72,69],[91,132,72,70],[91,135,73,18,"newStack"],[91,143,73,26],[92,8,74,12],[92,14,74,18,"stackWithoutInternalCallsites"],[92,43,74,47],[92,46,74,50,"stackWithoutPoppedFrames"],[92,70,74,74],[92,71,74,75,"filter"],[92,77,74,81],[92,78,74,83,"frame"],[92,83,74,88],[92,87,74,93,"frame"],[92,92,74,98],[92,93,74,99,"file"],[92,97,74,103],[92,101,74,107,"frame"],[92,106,74,112],[92,107,74,113,"file"],[92,111,74,117],[92,112,74,118,"match"],[92,117,74,123],[92,118,74,124,"INTERNAL_CALLSITES_REGEX"],[92,142,74,148],[92,143,74,149],[92,148,74,154],[92,152,74,158],[92,153,74,159],[93,8,75,12],[93,14,75,18,"sentryFrames"],[93,26,75,30],[93,29,75,33],[93,35,75,39,"convertReactNativeFramesToSentryFrames"],[93,73,75,77],[93,74,75,78,"stackWithoutInternalCallsites"],[93,103,75,107],[93,104,75,108],[94,8,76,12],[94,15,76,19],[94,21,76,25],[94,25,76,25,"fetchSourceContext"],[94,67,76,43],[94,69,76,44,"sentryFrames"],[94,81,76,56],[94,82,76,57],[95,6,77,8],[95,7,77,9],[95,8,78,8],[95,15,78,15,"error"],[95,20,78,20],[95,22,78,22],[96,8,79,12],[96,12,79,16,"error"],[96,17,79,21],[96,29,79,33,"Error"],[96,34,79,38],[96,36,79,40],[97,10,80,16,"logger"],[97,22,80,22],[97,23,80,23,"warn"],[97,27,80,27],[97,28,80,28],[97,66,80,66,"error"],[97,71,80,71],[97,72,80,72,"message"],[97,79,80,79],[97,81,80,81],[97,82,80,82],[98,8,81,12],[99,8,82,12],[99,15,82,19],[99,19,82,23],[100,6,83,8],[101,4,84,4],[101,5,84,5],[101,6,84,6],[102,2,85,0],[103,2,86,0],[104,0,87,0],[105,0,88,0],[106,0,89,0],[107,2,90,0],[107,11,90,9,"convertReactNativeFramesToSentryFrames"],[107,49,90,47,"convertReactNativeFramesToSentryFrames"],[107,50,90,48,"frames"],[107,56,90,54],[107,58,90,56],[108,4,91,4],[108,11,91,11,"__awaiter"],[108,20,91,20],[108,21,91,21],[108,25,91,25],[108,27,91,27],[108,32,91,32],[108,33,91,33],[108,35,91,35],[108,40,91,40],[108,41,91,41],[108,43,91,43],[108,56,91,56],[109,6,92,8],[109,13,92,15,"Promise"],[109,20,92,22],[109,21,92,23,"all"],[109,24,92,26],[109,25,92,27,"frames"],[109,31,92,33],[109,32,92,34,"map"],[109,35,92,37],[109,36,92,39,"frame"],[109,41,92,44],[109,45,92,49,"__awaiter"],[109,54,92,58],[109,55,92,59],[109,59,92,63],[109,61,92,65],[109,66,92,70],[109,67,92,71],[109,69,92,73],[109,74,92,78],[109,75,92,79],[109,77,92,81],[109,90,92,94],[110,8,93,12],[110,12,93,16,"inApp"],[110,17,93,21],[110,20,93,24],[110,21,93,25],[110,22,93,26,"frame"],[110,27,93,31],[110,28,93,32,"column"],[110,34,93,38],[110,38,93,42],[110,39,93,43],[110,40,93,44,"frame"],[110,45,93,49],[110,46,93,50,"lineNumber"],[110,56,93,60],[111,8,94,12,"inApp"],[111,13,94,17],[111,16,95,16,"inApp"],[111,21,95,21],[111,25,96,20,"frame"],[111,30,96,25],[111,31,96,26,"file"],[111,35,96,30],[111,40,96,35,"undefined"],[111,49,96,44],[111,53,97,20],[111,54,97,21,"frame"],[111,59,97,26],[111,60,97,27,"file"],[111,64,97,31],[111,65,97,32,"includes"],[111,73,97,40],[111,74,97,41],[111,88,97,55],[111,89,97,56],[111,93,98,20],[111,94,98,21,"frame"],[111,99,98,26],[111,100,98,27,"file"],[111,104,98,31],[111,105,98,32,"includes"],[111,113,98,40],[111,114,98,41],[111,127,98,54],[111,128,98,55],[112,8,99,12],[112,14,99,18,"newFrame"],[112,22,99,26],[112,25,99,29],[113,10,100,16,"lineno"],[113,16,100,22],[113,18,100,24,"frame"],[113,23,100,29],[113,24,100,30,"lineNumber"],[113,34,100,40],[114,10,101,16,"colno"],[114,15,101,21],[114,17,101,23,"frame"],[114,22,101,28],[114,23,101,29,"column"],[114,29,101,35],[115,10,102,16,"filename"],[115,18,102,24],[115,20,102,26,"frame"],[115,25,102,31],[115,26,102,32,"file"],[115,30,102,36],[116,10,103,16,"function"],[116,18,103,24],[116,20,103,26,"frame"],[116,25,103,31],[116,26,103,32,"methodName"],[116,36,103,42],[117,10,104,16,"in_app"],[117,16,104,22],[117,18,104,24,"inApp"],[118,8,105,12],[118,9,105,13],[119,8,106,12],[119,15,106,19,"newFrame"],[119,23,106,27],[120,6,107,8],[120,7,107,9],[120,8,107,10],[120,9,107,11],[120,10,107,12],[121,4,108,4],[121,5,108,5],[121,6,108,6],[122,2,109,0],[123,2,110,0],[124,0,111,0],[125,0,112,0],[126,0,113,0],[127,0,114,0],[128,2,115,0],[128,11,115,9,"replaceExceptionFramesInException"],[128,44,115,42,"replaceExceptionFramesInException"],[128,45,115,43,"exception"],[128,54,115,52],[128,56,115,54,"frames"],[128,62,115,60],[128,64,115,62],[129,4,116,4],[129,8,116,8,"exception"],[129,17,116,17],[129,22,116,22],[129,26,116,26],[129,30,116,30,"exception"],[129,39,116,39],[129,44,116,44],[129,49,116,49],[129,50,116,50],[129,53,116,53],[129,58,116,58],[129,59,116,59],[129,62,116,62,"exception"],[129,71,116,71],[129,72,116,72,"stacktrace"],[129,82,116,82],[129,84,116,84],[130,6,117,8,"exception"],[130,15,117,17],[130,16,117,18,"stacktrace"],[130,26,117,28],[130,27,117,29,"frames"],[130,33,117,35],[130,36,117,38,"frames"],[130,42,117,44],[130,43,117,45,"reverse"],[130,50,117,52],[130,51,117,53],[130,52,117,54],[131,4,118,4],[132,2,119,0],[133,2,120,0],[134,0,121,0],[135,0,122,0],[136,0,123,0],[137,0,124,0],[138,2,125,0],[138,11,125,9,"replaceThreadFramesInEvent"],[138,37,125,35,"replaceThreadFramesInEvent"],[138,38,125,36,"event"],[138,43,125,41],[138,45,125,43,"frames"],[138,51,125,49],[138,53,125,51],[139,4,126,4],[139,8,126,8,"event"],[139,13,126,13],[139,14,126,14,"threads"],[139,21,126,21],[139,25,126,25,"event"],[139,30,126,30],[139,31,126,31,"threads"],[139,38,126,38],[139,39,126,39,"values"],[139,45,126,45],[139,49,126,49,"event"],[139,54,126,54],[139,55,126,55,"threads"],[139,62,126,62],[139,63,126,63,"values"],[139,69,126,69],[139,70,126,70],[139,71,126,71],[139,72,126,72],[139,76,126,76,"event"],[139,81,126,81],[139,82,126,82,"threads"],[139,89,126,89],[139,90,126,90,"values"],[139,96,126,96],[139,97,126,97],[139,98,126,98],[139,99,126,99],[139,100,126,100,"stacktrace"],[139,110,126,110],[139,112,126,112],[140,6,127,8,"event"],[140,11,127,13],[140,12,127,14,"threads"],[140,19,127,21],[140,20,127,22,"values"],[140,26,127,28],[140,27,127,29],[140,28,127,30],[140,29,127,31],[140,30,127,32,"stacktrace"],[140,40,127,42],[140,41,127,43,"frames"],[140,47,127,49],[140,50,127,52,"frames"],[140,56,127,58],[140,57,127,59,"reverse"],[140,64,127,66],[140,65,127,67],[140,66,127,68],[141,4,128,4],[142,2,129,0],[143,2,130,0],[144,0,131,0],[145,0,132,0],[146,0,133,0],[147,0,134,0],[148,2,135,0],[148,11,135,9,"getExceptionGroup"],[148,28,135,26,"getExceptionGroup"],[148,29,135,27,"originalException"],[148,46,135,44],[148,48,135,46],[149,4,136,4],[149,10,136,10,"err"],[149,13,136,13],[149,16,136,16,"originalException"],[149,33,136,33],[150,4,137,4],[150,10,137,10,"errorGroup"],[150,20,137,20],[150,23,137,23],[150,25,137,25],[151,4,138,4],[151,9,138,9],[151,13,138,13,"cause"],[151,18,138,18],[151,21,138,21,"err"],[151,24,138,24],[151,26,138,26],[151,30,138,26,"isErrorLike"],[151,48,138,37],[151,50,138,38,"cause"],[151,55,138,43],[151,56,138,44],[151,58,138,46,"cause"],[151,63,138,51],[151,66,138,54,"cause"],[151,71,138,59],[151,72,138,60,"cause"],[151,77,138,65],[151,79,138,67],[152,6,139,8,"errorGroup"],[152,16,139,18],[152,17,139,19,"push"],[152,21,139,23],[152,22,139,24,"cause"],[152,27,139,29],[152,28,139,30],[153,4,140,4],[154,4,141,4],[154,11,141,11,"errorGroup"],[154,21,141,21],[155,2,142,0],[156,0,142,1],[156,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","debugSymbolicatorIntegration","setupOnce","processEvent","__awaiter$argument_3","symbolicate","stackWithoutPoppedFrames.filter$argument_0","convertReactNativeFramesToSentryFrames","frames.map$argument_0","replaceExceptionFramesInException","replaceThreadFramesInEvent","getExceptionGroup"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;4COQ;mBCG;SDE;CPG;ASC;2CCE;KDuB;CTC;AWK;2CDC;kFEgB,4EF;KCU;CXC;AaK;2CHC;sCIC,2CJ;SIe,CJ;KGC;CbC;AeM;CfI;AgBM;ChBI;AiBM;CjBO"}},"type":"js/module"}]}