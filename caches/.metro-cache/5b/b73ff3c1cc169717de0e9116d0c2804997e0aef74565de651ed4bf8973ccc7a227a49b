{"dependencies":[{"name":"./dsn.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"SYDZ4LotxWU20yw4mwZikBebvJc=","exportNames":["*"]}},{"name":"./normalize.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":40},"end":{"line":2,"column":43,"index":83}}],"key":"QsDZX1nhDolhUZoDvec3s9Hp/ME=","exportNames":["*"]}},{"name":"./object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":84},"end":{"line":3,"column":48,"index":132}}],"key":"c+4yuYP7E2Xh9QIfj2WEKgywjI4=","exportNames":["*"]}},{"name":"./worldwide.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":133},"end":{"line":4,"column":44,"index":177}}],"key":"LZlrQCVO4H3zUFIdbw1eEy4GKGE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addItemToEnvelope = addItemToEnvelope;\n  exports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;\n  exports.createEnvelope = createEnvelope;\n  exports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;\n  exports.createSpanEnvelopeItem = createSpanEnvelopeItem;\n  exports.envelopeContainsItemType = envelopeContainsItemType;\n  exports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;\n  exports.forEachEnvelopeItem = forEachEnvelopeItem;\n  exports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;\n  exports.parseEnvelope = parseEnvelope;\n  exports.serializeEnvelope = serializeEnvelope;\n  var _dsn = require(_dependencyMap[0], \"./dsn.js\");\n  var _normalize = require(_dependencyMap[1], \"./normalize.js\");\n  var _object = require(_dependencyMap[2], \"./object.js\");\n  var _worldwide = require(_dependencyMap[3], \"./worldwide.js\");\n  /**\n   * Creates an envelope.\n   * Make sure to always explicitly provide the generic to this function\n   * so that the envelope types resolve correctly.\n   */\n  function createEnvelope(headers, items = []) {\n    return [headers, items];\n  }\n\n  /**\n   * Add an item to an envelope.\n   * Make sure to always explicitly provide the generic to this function\n   * so that the envelope types resolve correctly.\n   */\n  function addItemToEnvelope(envelope, newItem) {\n    const [headers, items] = envelope;\n    return [headers, [...items, newItem]];\n  }\n\n  /**\n   * Convenience function to loop through the items and item types of an envelope.\n   * (This function was mostly created because working with envelope types is painful at the moment)\n   *\n   * If the callback returns true, the rest of the items will be skipped.\n   */\n  function forEachEnvelopeItem(envelope, callback) {\n    const envelopeItems = envelope[1];\n    for (const envelopeItem of envelopeItems) {\n      const envelopeItemType = envelopeItem[0].type;\n      const result = callback(envelopeItem, envelopeItemType);\n      if (result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if the envelope contains any of the given envelope item types\n   */\n  function envelopeContainsItemType(envelope, types) {\n    return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n  }\n\n  /**\n   * Encode a string to UTF8 array.\n   */\n  function encodeUTF8(input) {\n    return _worldwide.GLOBAL_OBJ.__SENTRY__ && _worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill ? _worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill(input) : new TextEncoder().encode(input);\n  }\n\n  /**\n   * Decode a UTF8 array to string.\n   */\n  function decodeUTF8(input) {\n    return _worldwide.GLOBAL_OBJ.__SENTRY__ && _worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill ? _worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill(input) : new TextDecoder().decode(input);\n  }\n\n  /**\n   * Serializes an envelope.\n   */\n  function serializeEnvelope(envelope) {\n    const [envHeaders, items] = envelope;\n\n    // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n    let parts = JSON.stringify(envHeaders);\n    function append(next) {\n      if (typeof parts === 'string') {\n        parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n      } else {\n        parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n      }\n    }\n    for (const item of items) {\n      const [itemHeaders, payload] = item;\n      append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n      if (typeof payload === 'string' || payload instanceof Uint8Array) {\n        append(payload);\n      } else {\n        let stringifiedPayload;\n        try {\n          stringifiedPayload = JSON.stringify(payload);\n        } catch (e) {\n          // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n          // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n          // performance impact but in this case a performance hit is better than throwing.\n          stringifiedPayload = JSON.stringify((0, _normalize.normalize)(payload));\n        }\n        append(stringifiedPayload);\n      }\n    }\n    return typeof parts === 'string' ? parts : concatBuffers(parts);\n  }\n  function concatBuffers(buffers) {\n    const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const buffer of buffers) {\n      merged.set(buffer, offset);\n      offset += buffer.length;\n    }\n    return merged;\n  }\n\n  /**\n   * Parses an envelope\n   */\n  function parseEnvelope(env) {\n    let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n    function readBinary(length) {\n      const bin = buffer.subarray(0, length);\n      // Replace the buffer with the remaining data excluding trailing newline\n      buffer = buffer.subarray(length + 1);\n      return bin;\n    }\n    function readJson() {\n      let i = buffer.indexOf(0xa);\n      // If we couldn't find a newline, we must have found the end of the buffer\n      if (i < 0) {\n        i = buffer.length;\n      }\n      return JSON.parse(decodeUTF8(readBinary(i)));\n    }\n    const envelopeHeader = readJson();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const items = [];\n    while (buffer.length) {\n      const itemHeader = readJson();\n      const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n      items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n    }\n    return [envelopeHeader, items];\n  }\n\n  /**\n   * Creates envelope item for a single span\n   */\n  function createSpanEnvelopeItem(spanJson) {\n    const spanHeaders = {\n      type: 'span'\n    };\n    return [spanHeaders, spanJson];\n  }\n\n  /**\n   * Creates attachment envelope items\n   */\n  function createAttachmentEnvelopeItem(attachment) {\n    const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n    return [(0, _object.dropUndefinedKeys)({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType\n    }), buffer];\n  }\n  const ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n    session: 'session',\n    sessions: 'session',\n    attachment: 'attachment',\n    transaction: 'transaction',\n    event: 'error',\n    client_report: 'internal',\n    user_report: 'default',\n    profile: 'profile',\n    profile_chunk: 'profile',\n    replay_event: 'replay',\n    replay_recording: 'replay',\n    check_in: 'monitor',\n    feedback: 'feedback',\n    span: 'span',\n    statsd: 'metric_bucket',\n    raw_security: 'security'\n  };\n\n  /**\n   * Maps the type of an envelope item to a data category.\n   */\n  function envelopeItemTypeToDataCategory(type) {\n    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n  }\n\n  /** Extracts the minimal SDK info from the metadata or an events */\n  function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n    if (!metadataOrEvent || !metadataOrEvent.sdk) {\n      return;\n    }\n    const {\n      name,\n      version\n    } = metadataOrEvent.sdk;\n    return {\n      name,\n      version\n    };\n  }\n\n  /**\n   * Creates event envelope headers, based on event, sdk info and tunnel\n   * Note: This function was extracted from the core package to make it available in Replay\n   */\n  function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n    const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n    return {\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && {\n        sdk: sdkInfo\n      }),\n      ...(!!tunnel && dsn && {\n        dsn: (0, _dsn.dsnToString)(dsn)\n      }),\n      ...(dynamicSamplingContext && {\n        trace: (0, _object.dropUndefinedKeys)({\n          ...dynamicSamplingContext\n        })\n      })\n    };\n  }\n});","lineCount":240,"map":[[16,2,1,0],[16,6,1,0,"_dsn"],[16,10,1,0],[16,13,1,0,"require"],[16,20,1,0],[16,21,1,0,"_dependencyMap"],[16,35,1,0],[17,2,2,0],[17,6,2,0,"_normalize"],[17,16,2,0],[17,19,2,0,"require"],[17,26,2,0],[17,27,2,0,"_dependencyMap"],[17,41,2,0],[18,2,3,0],[18,6,3,0,"_object"],[18,13,3,0],[18,16,3,0,"require"],[18,23,3,0],[18,24,3,0,"_dependencyMap"],[18,38,3,0],[19,2,4,0],[19,6,4,0,"_worldwide"],[19,16,4,0],[19,19,4,0,"require"],[19,26,4,0],[19,27,4,0,"_dependencyMap"],[19,41,4,0],[20,2,6,0],[21,0,7,0],[22,0,8,0],[23,0,9,0],[24,0,10,0],[25,2,11,0],[25,11,11,9,"createEnvelope"],[25,25,11,23,"createEnvelope"],[25,26,11,24,"headers"],[25,33,11,31],[25,35,11,33,"items"],[25,40,11,38],[25,43,11,41],[25,45,11,43],[25,47,11,45],[26,4,12,2],[26,11,12,9],[26,12,12,10,"headers"],[26,19,12,17],[26,21,12,19,"items"],[26,26,12,24],[26,27,12,25],[27,2,13,0],[29,2,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,2,20,0],[34,11,20,9,"addItemToEnvelope"],[34,28,20,26,"addItemToEnvelope"],[34,29,20,27,"envelope"],[34,37,20,35],[34,39,20,37,"newItem"],[34,46,20,44],[34,48,20,46],[35,4,21,2],[35,10,21,8],[35,11,21,9,"headers"],[35,18,21,16],[35,20,21,18,"items"],[35,25,21,23],[35,26,21,24],[35,29,21,27,"envelope"],[35,37,21,35],[36,4,22,2],[36,11,22,9],[36,12,22,10,"headers"],[36,19,22,17],[36,21,22,19],[36,22,22,20],[36,25,22,23,"items"],[36,30,22,28],[36,32,22,30,"newItem"],[36,39,22,37],[36,40,22,38],[36,41,22,39],[37,2,23,0],[39,2,25,0],[40,0,26,0],[41,0,27,0],[42,0,28,0],[43,0,29,0],[44,0,30,0],[45,2,31,0],[45,11,31,9,"forEachEnvelopeItem"],[45,30,31,28,"forEachEnvelopeItem"],[45,31,32,2,"envelope"],[45,39,32,10],[45,41,33,2,"callback"],[45,49,33,10],[45,51,34,2],[46,4,35,2],[46,10,35,8,"envelopeItems"],[46,23,35,21],[46,26,35,24,"envelope"],[46,34,35,32],[46,35,35,33],[46,36,35,34],[46,37,35,35],[47,4,37,2],[47,9,37,7],[47,15,37,13,"envelopeItem"],[47,27,37,25],[47,31,37,29,"envelopeItems"],[47,44,37,42],[47,46,37,44],[48,6,38,4],[48,12,38,10,"envelopeItemType"],[48,28,38,26],[48,31,38,29,"envelopeItem"],[48,43,38,41],[48,44,38,42],[48,45,38,43],[48,46,38,44],[48,47,38,45,"type"],[48,51,38,49],[49,6,39,4],[49,12,39,10,"result"],[49,18,39,16],[49,21,39,19,"callback"],[49,29,39,27],[49,30,39,28,"envelopeItem"],[49,42,39,40],[49,44,39,42,"envelopeItemType"],[49,60,39,58],[49,61,39,59],[50,6,41,4],[50,10,41,8,"result"],[50,16,41,14],[50,18,41,16],[51,8,42,6],[51,15,42,13],[51,19,42,17],[52,6,43,4],[53,4,44,2],[54,4,46,2],[54,11,46,9],[54,16,46,14],[55,2,47,0],[57,2,49,0],[58,0,50,0],[59,0,51,0],[60,2,52,0],[60,11,52,9,"envelopeContainsItemType"],[60,35,52,33,"envelopeContainsItemType"],[60,36,52,34,"envelope"],[60,44,52,42],[60,46,52,44,"types"],[60,51,52,49],[60,53,52,51],[61,4,53,2],[61,11,53,9,"forEachEnvelopeItem"],[61,30,53,28],[61,31,53,29,"envelope"],[61,39,53,37],[61,41,53,39],[61,42,53,40,"_"],[61,43,53,41],[61,45,53,43,"type"],[61,49,53,47],[61,54,53,52,"types"],[61,59,53,57],[61,60,53,58,"includes"],[61,68,53,66],[61,69,53,67,"type"],[61,73,53,71],[61,74,53,72],[61,75,53,73],[62,2,54,0],[64,2,56,0],[65,0,57,0],[66,0,58,0],[67,2,59,0],[67,11,59,9,"encodeUTF8"],[67,21,59,19,"encodeUTF8"],[67,22,59,20,"input"],[67,27,59,25],[67,29,59,27],[68,4,60,2],[68,11,60,9,"GLOBAL_OBJ"],[68,32,60,19],[68,33,60,20,"__SENTRY__"],[68,43,60,30],[68,47,60,34,"GLOBAL_OBJ"],[68,68,60,44],[68,69,60,45,"__SENTRY__"],[68,79,60,55],[68,80,60,56,"encodePolyfill"],[68,94,60,70],[68,97,61,6,"GLOBAL_OBJ"],[68,118,61,16],[68,119,61,17,"__SENTRY__"],[68,129,61,27],[68,130,61,28,"encodePolyfill"],[68,144,61,42],[68,145,61,43,"input"],[68,150,61,48],[68,151,61,49],[68,154,62,6],[68,158,62,10,"TextEncoder"],[68,169,62,21],[68,170,62,22],[68,171,62,23],[68,172,62,24,"encode"],[68,178,62,30],[68,179,62,31,"input"],[68,184,62,36],[68,185,62,37],[69,2,63,0],[71,2,65,0],[72,0,66,0],[73,0,67,0],[74,2,68,0],[74,11,68,9,"decodeUTF8"],[74,21,68,19,"decodeUTF8"],[74,22,68,20,"input"],[74,27,68,25],[74,29,68,27],[75,4,69,2],[75,11,69,9,"GLOBAL_OBJ"],[75,32,69,19],[75,33,69,20,"__SENTRY__"],[75,43,69,30],[75,47,69,34,"GLOBAL_OBJ"],[75,68,69,44],[75,69,69,45,"__SENTRY__"],[75,79,69,55],[75,80,69,56,"decodePolyfill"],[75,94,69,70],[75,97,70,6,"GLOBAL_OBJ"],[75,118,70,16],[75,119,70,17,"__SENTRY__"],[75,129,70,27],[75,130,70,28,"decodePolyfill"],[75,144,70,42],[75,145,70,43,"input"],[75,150,70,48],[75,151,70,49],[75,154,71,6],[75,158,71,10,"TextDecoder"],[75,169,71,21],[75,170,71,22],[75,171,71,23],[75,172,71,24,"decode"],[75,178,71,30],[75,179,71,31,"input"],[75,184,71,36],[75,185,71,37],[76,2,72,0],[78,2,74,0],[79,0,75,0],[80,0,76,0],[81,2,77,0],[81,11,77,9,"serializeEnvelope"],[81,28,77,26,"serializeEnvelope"],[81,29,77,27,"envelope"],[81,37,77,35],[81,39,77,37],[82,4,78,2],[82,10,78,8],[82,11,78,9,"envHeaders"],[82,21,78,19],[82,23,78,21,"items"],[82,28,78,26],[82,29,78,27],[82,32,78,30,"envelope"],[82,40,78,38],[84,4,80,2],[85,4,81,2],[85,8,81,6,"parts"],[85,13,81,11],[85,16,81,14,"JSON"],[85,20,81,18],[85,21,81,19,"stringify"],[85,30,81,28],[85,31,81,29,"envHeaders"],[85,41,81,39],[85,42,81,40],[86,4,83,2],[86,13,83,11,"append"],[86,19,83,17,"append"],[86,20,83,18,"next"],[86,24,83,22],[86,26,83,24],[87,6,84,4],[87,10,84,8],[87,17,84,15,"parts"],[87,22,84,20],[87,27,84,25],[87,35,84,33],[87,37,84,35],[88,8,85,6,"parts"],[88,13,85,11],[88,16,85,14],[88,23,85,21,"next"],[88,27,85,25],[88,32,85,30],[88,40,85,38],[88,43,85,41,"parts"],[88,48,85,46],[88,51,85,49,"next"],[88,55,85,53],[88,58,85,56],[88,59,85,57,"encodeUTF8"],[88,69,85,67],[88,70,85,68,"parts"],[88,75,85,73],[88,76,85,74],[88,78,85,76,"next"],[88,82,85,80],[88,83,85,81],[89,6,86,4],[89,7,86,5],[89,13,86,11],[90,8,87,6,"parts"],[90,13,87,11],[90,14,87,12,"push"],[90,18,87,16],[90,19,87,17],[90,26,87,24,"next"],[90,30,87,28],[90,35,87,33],[90,43,87,41],[90,46,87,44,"encodeUTF8"],[90,56,87,54],[90,57,87,55,"next"],[90,61,87,59],[90,62,87,60],[90,65,87,63,"next"],[90,69,87,67],[90,70,87,68],[91,6,88,4],[92,4,89,2],[93,4,91,2],[93,9,91,7],[93,15,91,13,"item"],[93,19,91,17],[93,23,91,21,"items"],[93,28,91,26],[93,30,91,28],[94,6,92,4],[94,12,92,10],[94,13,92,11,"itemHeaders"],[94,24,92,22],[94,26,92,24,"payload"],[94,33,92,31],[94,34,92,32],[94,37,92,35,"item"],[94,41,92,39],[95,6,94,4,"append"],[95,12,94,10],[95,13,94,11],[95,18,94,16,"JSON"],[95,22,94,20],[95,23,94,21,"stringify"],[95,32,94,30],[95,33,94,31,"itemHeaders"],[95,44,94,42],[95,45,94,43],[95,49,94,47],[95,50,94,48],[96,6,96,4],[96,10,96,8],[96,17,96,15,"payload"],[96,24,96,22],[96,29,96,27],[96,37,96,35],[96,41,96,39,"payload"],[96,48,96,46],[96,60,96,58,"Uint8Array"],[96,70,96,68],[96,72,96,70],[97,8,97,6,"append"],[97,14,97,12],[97,15,97,13,"payload"],[97,22,97,20],[97,23,97,21],[98,6,98,4],[98,7,98,5],[98,13,98,11],[99,8,99,6],[99,12,99,10,"stringifiedPayload"],[99,30,99,28],[100,8,100,6],[100,12,100,10],[101,10,101,8,"stringifiedPayload"],[101,28,101,26],[101,31,101,29,"JSON"],[101,35,101,33],[101,36,101,34,"stringify"],[101,45,101,43],[101,46,101,44,"payload"],[101,53,101,51],[101,54,101,52],[102,8,102,6],[102,9,102,7],[102,10,102,8],[102,17,102,15,"e"],[102,18,102,16],[102,20,102,18],[103,10,103,8],[104,10,104,8],[105,10,105,8],[106,10,106,8,"stringifiedPayload"],[106,28,106,26],[106,31,106,29,"JSON"],[106,35,106,33],[106,36,106,34,"stringify"],[106,45,106,43],[106,46,106,44],[106,50,106,44,"normalize"],[106,70,106,53],[106,72,106,54,"payload"],[106,79,106,61],[106,80,106,62],[106,81,106,63],[107,8,107,6],[108,8,108,6,"append"],[108,14,108,12],[108,15,108,13,"stringifiedPayload"],[108,33,108,31],[108,34,108,32],[109,6,109,4],[110,4,110,2],[111,4,112,2],[111,11,112,9],[111,18,112,16,"parts"],[111,23,112,21],[111,28,112,26],[111,36,112,34],[111,39,112,37,"parts"],[111,44,112,42],[111,47,112,45,"concatBuffers"],[111,60,112,58],[111,61,112,59,"parts"],[111,66,112,64],[111,67,112,65],[112,2,113,0],[113,2,115,0],[113,11,115,9,"concatBuffers"],[113,24,115,22,"concatBuffers"],[113,25,115,23,"buffers"],[113,32,115,30],[113,34,115,32],[114,4,116,2],[114,10,116,8,"totalLength"],[114,21,116,19],[114,24,116,22,"buffers"],[114,31,116,29],[114,32,116,30,"reduce"],[114,38,116,36],[114,39,116,37],[114,40,116,38,"acc"],[114,43,116,41],[114,45,116,43,"buf"],[114,48,116,46],[114,53,116,51,"acc"],[114,56,116,54],[114,59,116,57,"buf"],[114,62,116,60],[114,63,116,61,"length"],[114,69,116,67],[114,71,116,69],[114,72,116,70],[114,73,116,71],[115,4,118,2],[115,10,118,8,"merged"],[115,16,118,14],[115,19,118,17],[115,23,118,21,"Uint8Array"],[115,33,118,31],[115,34,118,32,"totalLength"],[115,45,118,43],[115,46,118,44],[116,4,119,2],[116,8,119,6,"offset"],[116,14,119,12],[116,17,119,15],[116,18,119,16],[117,4,120,2],[117,9,120,7],[117,15,120,13,"buffer"],[117,21,120,19],[117,25,120,23,"buffers"],[117,32,120,30],[117,34,120,32],[118,6,121,4,"merged"],[118,12,121,10],[118,13,121,11,"set"],[118,16,121,14],[118,17,121,15,"buffer"],[118,23,121,21],[118,25,121,23,"offset"],[118,31,121,29],[118,32,121,30],[119,6,122,4,"offset"],[119,12,122,10],[119,16,122,14,"buffer"],[119,22,122,20],[119,23,122,21,"length"],[119,29,122,27],[120,4,123,2],[121,4,125,2],[121,11,125,9,"merged"],[121,17,125,15],[122,2,126,0],[124,2,128,0],[125,0,129,0],[126,0,130,0],[127,2,131,0],[127,11,131,9,"parseEnvelope"],[127,24,131,22,"parseEnvelope"],[127,25,131,23,"env"],[127,28,131,26],[127,30,131,28],[128,4,132,2],[128,8,132,6,"buffer"],[128,14,132,12],[128,17,132,15],[128,24,132,22,"env"],[128,27,132,25],[128,32,132,30],[128,40,132,38],[128,43,132,41,"encodeUTF8"],[128,53,132,51],[128,54,132,52,"env"],[128,57,132,55],[128,58,132,56],[128,61,132,59,"env"],[128,64,132,62],[129,4,134,2],[129,13,134,11,"readBinary"],[129,23,134,21,"readBinary"],[129,24,134,22,"length"],[129,30,134,28],[129,32,134,30],[130,6,135,4],[130,12,135,10,"bin"],[130,15,135,13],[130,18,135,16,"buffer"],[130,24,135,22],[130,25,135,23,"subarray"],[130,33,135,31],[130,34,135,32],[130,35,135,33],[130,37,135,35,"length"],[130,43,135,41],[130,44,135,42],[131,6,136,4],[132,6,137,4,"buffer"],[132,12,137,10],[132,15,137,13,"buffer"],[132,21,137,19],[132,22,137,20,"subarray"],[132,30,137,28],[132,31,137,29,"length"],[132,37,137,35],[132,40,137,38],[132,41,137,39],[132,42,137,40],[133,6,138,4],[133,13,138,11,"bin"],[133,16,138,14],[134,4,139,2],[135,4,141,2],[135,13,141,11,"readJson"],[135,21,141,19,"readJson"],[135,22,141,19],[135,24,141,22],[136,6,142,4],[136,10,142,8,"i"],[136,11,142,9],[136,14,142,12,"buffer"],[136,20,142,18],[136,21,142,19,"indexOf"],[136,28,142,26],[136,29,142,27],[136,32,142,30],[136,33,142,31],[137,6,143,4],[138,6,144,4],[138,10,144,8,"i"],[138,11,144,9],[138,14,144,12],[138,15,144,13],[138,17,144,15],[139,8,145,6,"i"],[139,9,145,7],[139,12,145,10,"buffer"],[139,18,145,16],[139,19,145,17,"length"],[139,25,145,23],[140,6,146,4],[141,6,148,4],[141,13,148,11,"JSON"],[141,17,148,15],[141,18,148,16,"parse"],[141,23,148,21],[141,24,148,22,"decodeUTF8"],[141,34,148,32],[141,35,148,33,"readBinary"],[141,45,148,43],[141,46,148,44,"i"],[141,47,148,45],[141,48,148,46],[141,49,148,47],[141,50,148,48],[142,4,149,2],[143,4,151,2],[143,10,151,8,"envelopeHeader"],[143,24,151,22],[143,27,151,25,"readJson"],[143,35,151,33],[143,36,151,34],[143,37,151,35],[144,4,152,2],[145,4,153,2],[145,10,153,8,"items"],[145,15,153,13],[145,18,153,16],[145,20,153,18],[146,4,155,2],[146,11,155,9,"buffer"],[146,17,155,15],[146,18,155,16,"length"],[146,24,155,22],[146,26,155,24],[147,6,156,4],[147,12,156,10,"itemHeader"],[147,22,156,20],[147,25,156,23,"readJson"],[147,33,156,31],[147,34,156,32],[147,35,156,33],[148,6,157,4],[148,12,157,10,"binaryLength"],[148,24,157,22],[148,27,157,25],[148,34,157,32,"itemHeader"],[148,44,157,42],[148,45,157,43,"length"],[148,51,157,49],[148,56,157,54],[148,64,157,62],[148,67,157,65,"itemHeader"],[148,77,157,75],[148,78,157,76,"length"],[148,84,157,82],[148,87,157,85,"undefined"],[148,96,157,94],[149,6,159,4,"items"],[149,11,159,9],[149,12,159,10,"push"],[149,16,159,14],[149,17,159,15],[149,18,159,16,"itemHeader"],[149,28,159,26],[149,30,159,28,"binaryLength"],[149,42,159,40],[149,45,159,43,"readBinary"],[149,55,159,53],[149,56,159,54,"binaryLength"],[149,68,159,66],[149,69,159,67],[149,72,159,70,"readJson"],[149,80,159,78],[149,81,159,79],[149,82,159,80],[149,83,159,81],[149,84,159,82],[150,4,160,2],[151,4,162,2],[151,11,162,9],[151,12,162,10,"envelopeHeader"],[151,26,162,24],[151,28,162,26,"items"],[151,33,162,31],[151,34,162,32],[152,2,163,0],[154,2,165,0],[155,0,166,0],[156,0,167,0],[157,2,168,0],[157,11,168,9,"createSpanEnvelopeItem"],[157,33,168,31,"createSpanEnvelopeItem"],[157,34,168,32,"spanJson"],[157,42,168,40],[157,44,168,42],[158,4,169,2],[158,10,169,8,"spanHeaders"],[158,21,169,19],[158,24,169,22],[159,6,170,4,"type"],[159,10,170,8],[159,12,170,10],[160,4,171,2],[160,5,171,3],[161,4,173,2],[161,11,173,9],[161,12,173,10,"spanHeaders"],[161,23,173,21],[161,25,173,23,"spanJson"],[161,33,173,31],[161,34,173,32],[162,2,174,0],[164,2,176,0],[165,0,177,0],[166,0,178,0],[167,2,179,0],[167,11,179,9,"createAttachmentEnvelopeItem"],[167,39,179,37,"createAttachmentEnvelopeItem"],[167,40,179,38,"attachment"],[167,50,179,48],[167,52,179,50],[168,4,180,2],[168,10,180,8,"buffer"],[168,16,180,14],[168,19,180,17],[168,26,180,24,"attachment"],[168,36,180,34],[168,37,180,35,"data"],[168,41,180,39],[168,46,180,44],[168,54,180,52],[168,57,180,55,"encodeUTF8"],[168,67,180,65],[168,68,180,66,"attachment"],[168,78,180,76],[168,79,180,77,"data"],[168,83,180,81],[168,84,180,82],[168,87,180,85,"attachment"],[168,97,180,95],[168,98,180,96,"data"],[168,102,180,100],[169,4,182,2],[169,11,182,9],[169,12,183,4],[169,16,183,4,"dropUndefinedKeys"],[169,41,183,21],[169,43,183,22],[170,6,184,6,"type"],[170,10,184,10],[170,12,184,12],[170,24,184,24],[171,6,185,6,"length"],[171,12,185,12],[171,14,185,14,"buffer"],[171,20,185,20],[171,21,185,21,"length"],[171,27,185,27],[172,6,186,6,"filename"],[172,14,186,14],[172,16,186,16,"attachment"],[172,26,186,26],[172,27,186,27,"filename"],[172,35,186,35],[173,6,187,6,"content_type"],[173,18,187,18],[173,20,187,20,"attachment"],[173,30,187,30],[173,31,187,31,"contentType"],[173,42,187,42],[174,6,188,6,"attachment_type"],[174,21,188,21],[174,23,188,23,"attachment"],[174,33,188,33],[174,34,188,34,"attachmentType"],[175,4,189,4],[175,5,189,5],[175,6,189,6],[175,8,190,4,"buffer"],[175,14,190,10],[175,15,191,3],[176,2,192,0],[177,2,194,0],[177,8,194,6,"ITEM_TYPE_TO_DATA_CATEGORY_MAP"],[177,38,194,36],[177,41,194,39],[178,4,195,2,"session"],[178,11,195,9],[178,13,195,11],[178,22,195,20],[179,4,196,2,"sessions"],[179,12,196,10],[179,14,196,12],[179,23,196,21],[180,4,197,2,"attachment"],[180,14,197,12],[180,16,197,14],[180,28,197,26],[181,4,198,2,"transaction"],[181,15,198,13],[181,17,198,15],[181,30,198,28],[182,4,199,2,"event"],[182,9,199,7],[182,11,199,9],[182,18,199,16],[183,4,200,2,"client_report"],[183,17,200,15],[183,19,200,17],[183,29,200,27],[184,4,201,2,"user_report"],[184,15,201,13],[184,17,201,15],[184,26,201,24],[185,4,202,2,"profile"],[185,11,202,9],[185,13,202,11],[185,22,202,20],[186,4,203,2,"profile_chunk"],[186,17,203,15],[186,19,203,17],[186,28,203,26],[187,4,204,2,"replay_event"],[187,16,204,14],[187,18,204,16],[187,26,204,24],[188,4,205,2,"replay_recording"],[188,20,205,18],[188,22,205,20],[188,30,205,28],[189,4,206,2,"check_in"],[189,12,206,10],[189,14,206,12],[189,23,206,21],[190,4,207,2,"feedback"],[190,12,207,10],[190,14,207,12],[190,24,207,22],[191,4,208,2,"span"],[191,8,208,6],[191,10,208,8],[191,16,208,14],[192,4,209,2,"statsd"],[192,10,209,8],[192,12,209,10],[192,27,209,25],[193,4,210,2,"raw_security"],[193,16,210,14],[193,18,210,16],[194,2,211,0],[194,3,211,1],[196,2,213,0],[197,0,214,0],[198,0,215,0],[199,2,216,0],[199,11,216,9,"envelopeItemTypeToDataCategory"],[199,41,216,39,"envelopeItemTypeToDataCategory"],[199,42,216,40,"type"],[199,46,216,44],[199,48,216,46],[200,4,217,2],[200,11,217,9,"ITEM_TYPE_TO_DATA_CATEGORY_MAP"],[200,41,217,39],[200,42,217,40,"type"],[200,46,217,44],[200,47,217,45],[201,2,218,0],[203,2,220,0],[204,2,221,0],[204,11,221,9,"getSdkMetadataForEnvelopeHeader"],[204,42,221,40,"getSdkMetadataForEnvelopeHeader"],[204,43,221,41,"metadataOrEvent"],[204,58,221,56],[204,60,221,58],[205,4,222,2],[205,8,222,6],[205,9,222,7,"metadataOrEvent"],[205,24,222,22],[205,28,222,26],[205,29,222,27,"metadataOrEvent"],[205,44,222,42],[205,45,222,43,"sdk"],[205,48,222,46],[205,50,222,48],[206,6,223,4],[207,4,224,2],[208,4,225,2],[208,10,225,8],[209,6,225,10,"name"],[209,10,225,14],[210,6,225,16,"version"],[211,4,225,24],[211,5,225,25],[211,8,225,28,"metadataOrEvent"],[211,23,225,43],[211,24,225,44,"sdk"],[211,27,225,47],[212,4,226,2],[212,11,226,9],[213,6,226,11,"name"],[213,10,226,15],[214,6,226,17,"version"],[215,4,226,25],[215,5,226,26],[216,2,227,0],[218,2,229,0],[219,0,230,0],[220,0,231,0],[221,0,232,0],[222,2,233,0],[222,11,233,9,"createEventEnvelopeHeaders"],[222,37,233,35,"createEventEnvelopeHeaders"],[222,38,234,2,"event"],[222,43,234,7],[222,45,235,2,"sdkInfo"],[222,52,235,9],[222,54,236,2,"tunnel"],[222,60,236,8],[222,62,237,2,"dsn"],[222,65,237,5],[222,67,238,2],[223,4,239,2],[223,10,239,8,"dynamicSamplingContext"],[223,32,239,30],[223,35,239,33,"event"],[223,40,239,38],[223,41,239,39,"sdkProcessingMetadata"],[223,62,239,60],[223,66,239,64,"event"],[223,71,239,69],[223,72,239,70,"sdkProcessingMetadata"],[223,93,239,91],[223,94,239,92,"dynamicSamplingContext"],[223,116,239,114],[224,4,240,2],[224,11,240,9],[225,6,241,4,"event_id"],[225,14,241,12],[225,16,241,14,"event"],[225,21,241,19],[225,22,241,20,"event_id"],[225,30,241,28],[226,6,242,4,"sent_at"],[226,13,242,11],[226,15,242,13],[226,19,242,17,"Date"],[226,23,242,21],[226,24,242,22],[226,25,242,23],[226,26,242,24,"toISOString"],[226,37,242,35],[226,38,242,36],[226,39,242,37],[227,6,243,4],[227,10,243,8,"sdkInfo"],[227,17,243,15],[227,21,243,19],[228,8,243,21,"sdk"],[228,11,243,24],[228,13,243,26,"sdkInfo"],[229,6,243,34],[229,7,243,35],[229,8,243,36],[230,6,244,4],[230,10,244,8],[230,11,244,9],[230,12,244,10,"tunnel"],[230,18,244,16],[230,22,244,20,"dsn"],[230,25,244,23],[230,29,244,27],[231,8,244,29,"dsn"],[231,11,244,32],[231,13,244,34],[231,17,244,34,"dsnToString"],[231,33,244,45],[231,35,244,46,"dsn"],[231,38,244,49],[232,6,244,51],[232,7,244,52],[232,8,244,53],[233,6,245,4],[233,10,245,8,"dynamicSamplingContext"],[233,32,245,30],[233,36,245,34],[234,8,246,6,"trace"],[234,13,246,11],[234,15,246,13],[234,19,246,13,"dropUndefinedKeys"],[234,44,246,30],[234,46,246,31],[235,10,246,33],[235,13,246,36,"dynamicSamplingContext"],[236,8,246,59],[236,9,246,60],[237,6,247,4],[237,7,247,5],[238,4,248,2],[238,5,248,3],[239,2,249,0],[240,0,249,1],[240,3]],"functionMap":{"names":["<global>","createEnvelope","addItemToEnvelope","forEachEnvelopeItem","envelopeContainsItemType","forEachEnvelopeItem$argument_1","encodeUTF8","decodeUTF8","serializeEnvelope","append","concatBuffers","buffers.reduce$argument_0","parseEnvelope","readBinary","readJson","createSpanEnvelopeItem","createAttachmentEnvelopeItem","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","createEventEnvelopeHeaders"],"mappings":"AAA;ACU;CDE;AEO;CFG;AGQ;CHgB;AIK;uCCC,iCD;CJC;AMK;CNI;AOK;CPI;AQK;ECM;GDM;CRwB;AUE;qCCC,8BD;CVU;AYK;ECG;GDK;EEE;GFQ;CZc;AeK;CfM;AgBK;ChBa;AiBwB;CjBE;AkBG;ClBM;AmBM;CnBgB"}},"type":"js/module"}]}