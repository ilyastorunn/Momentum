{"dependencies":[{"name":"./currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"K7iI+PRtR1yDAq2Cd5P/ht8ORfQ=","exportNames":["*"]}},{"name":"./utils-hoist/object.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":60,"index":116}}],"key":"RfsNMlgLcOaD/y3311U8j2nQAiE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SessionFlusher = void 0;\n  var _currentScopes = require(_dependencyMap[0], \"./currentScopes.js\");\n  var _object = require(_dependencyMap[1], \"./utils-hoist/object.js\");\n  /**\n   * @deprecated `SessionFlusher` is deprecated and will be removed in the next major version of the SDK.\n   */\n  // TODO(v9): The goal for the SessionFlusher is to become a stupidly simple mechanism to aggregate \"Sessions\" (actually \"RequestSessions\"). It should probably live directly inside the Http integration/instrumentation.\n  // eslint-disable-next-line deprecation/deprecation\n  class SessionFlusher {\n    // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n    constructor(client, attrs) {\n      this._client = client;\n      this.flushTimeout = 60;\n      this._pendingAggregates = new Map();\n      this._isEnabled = true;\n\n      // Call to setInterval, so that flush is called every 60 seconds.\n      this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n      if (this._intervalId.unref) {\n        this._intervalId.unref();\n      }\n      this._sessionAttrs = attrs;\n    }\n\n    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n    flush() {\n      const sessionAggregates = this.getSessionAggregates();\n      if (sessionAggregates.aggregates.length === 0) {\n        return;\n      }\n      this._pendingAggregates = new Map();\n      this._client.sendSession(sessionAggregates);\n    }\n\n    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n    getSessionAggregates() {\n      const aggregates = Array.from(this._pendingAggregates.values());\n      const sessionAggregates = {\n        attrs: this._sessionAttrs,\n        aggregates\n      };\n      return (0, _object.dropUndefinedKeys)(sessionAggregates);\n    }\n\n    /** JSDoc */\n    close() {\n      clearInterval(this._intervalId);\n      this._isEnabled = false;\n      this.flush();\n    }\n\n    /**\n     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n     * `_incrementSessionStatusCount` along with the start date\n     */\n    incrementSessionStatusCount() {\n      if (!this._isEnabled) {\n        return;\n      }\n      const isolationScope = (0, _currentScopes.getIsolationScope)();\n      // eslint-disable-next-line deprecation/deprecation\n      const requestSession = isolationScope.getRequestSession();\n      if (requestSession && requestSession.status) {\n        this._incrementSessionStatusCount(requestSession.status, new Date());\n        // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n        // case captureRequestSession is called more than once to prevent double count\n        // eslint-disable-next-line deprecation/deprecation\n        isolationScope.setRequestSession(undefined);\n        /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n      }\n    }\n\n    /**\n     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n     * the session received\n     */\n    // eslint-disable-next-line deprecation/deprecation\n    _incrementSessionStatusCount(status, date) {\n      // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n      const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n\n      // corresponds to aggregated sessions in one specific minute bucket\n      // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n      let aggregationCounts = this._pendingAggregates.get(sessionStartedTrunc);\n      if (!aggregationCounts) {\n        aggregationCounts = {\n          started: new Date(sessionStartedTrunc).toISOString()\n        };\n        this._pendingAggregates.set(sessionStartedTrunc, aggregationCounts);\n      }\n      switch (status) {\n        case 'errored':\n          aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n          return aggregationCounts.errored;\n        case 'ok':\n          aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n          return aggregationCounts.exited;\n        default:\n          aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n          return aggregationCounts.crashed;\n      }\n    }\n  }\n  exports.SessionFlusher = SessionFlusher;\n});","lineCount":111,"map":[[6,2,1,0],[6,6,1,0,"_currentScopes"],[6,20,1,0],[6,23,1,0,"require"],[6,30,1,0],[6,31,1,0,"_dependencyMap"],[6,45,1,0],[7,2,2,0],[7,6,2,0,"_object"],[7,13,2,0],[7,16,2,0,"require"],[7,23,2,0],[7,24,2,0,"_dependencyMap"],[7,38,2,0],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,8,9,6,"SessionFlusher"],[13,22,9,20],[13,23,9,22],[14,4,11,2],[16,4,13,3,"constructor"],[16,15,13,14,"constructor"],[16,16,13,15,"client"],[16,22,13,21],[16,24,13,23,"attrs"],[16,29,13,28],[16,31,13,30],[17,6,14,4],[17,10,14,8],[17,11,14,9,"_client"],[17,18,14,16],[17,21,14,19,"client"],[17,27,14,25],[18,6,15,4],[18,10,15,8],[18,11,15,9,"flushTimeout"],[18,23,15,21],[18,26,15,24],[18,28,15,26],[19,6,16,4],[19,10,16,8],[19,11,16,9,"_pendingAggregates"],[19,29,16,27],[19,32,16,30],[19,36,16,34,"Map"],[19,39,16,37],[19,40,16,38],[19,41,16,39],[20,6,17,4],[20,10,17,8],[20,11,17,9,"_isEnabled"],[20,21,17,19],[20,24,17,22],[20,28,17,26],[22,6,19,4],[23,6,20,4],[23,10,20,8],[23,11,20,9,"_intervalId"],[23,22,20,20],[23,25,20,23,"setInterval"],[23,36,20,34],[23,37,20,35],[23,43,20,41],[23,47,20,45],[23,48,20,46,"flush"],[23,53,20,51],[23,54,20,52],[23,55,20,53],[23,57,20,55],[23,61,20,59],[23,62,20,60,"flushTimeout"],[23,74,20,72],[23,77,20,75],[23,81,20,79],[23,82,20,80],[24,6,21,4],[24,10,21,8],[24,14,21,12],[24,15,21,13,"_intervalId"],[24,26,21,24],[24,27,21,25,"unref"],[24,32,21,30],[24,34,21,32],[25,8,22,6],[25,12,22,10],[25,13,22,11,"_intervalId"],[25,24,22,22],[25,25,22,23,"unref"],[25,30,22,28],[25,31,22,29],[25,32,22,30],[26,6,23,4],[27,6,24,4],[27,10,24,8],[27,11,24,9,"_sessionAttrs"],[27,24,24,22],[27,27,24,25,"attrs"],[27,32,24,30],[28,4,25,2],[30,4,27,2],[31,4,28,3,"flush"],[31,9,28,8,"flush"],[31,10,28,8],[31,12,28,11],[32,6,29,4],[32,12,29,10,"sessionAggregates"],[32,29,29,27],[32,32,29,30],[32,36,29,34],[32,37,29,35,"getSessionAggregates"],[32,57,29,55],[32,58,29,56],[32,59,29,57],[33,6,30,4],[33,10,30,8,"sessionAggregates"],[33,27,30,25],[33,28,30,26,"aggregates"],[33,38,30,36],[33,39,30,37,"length"],[33,45,30,43],[33,50,30,48],[33,51,30,49],[33,53,30,51],[34,8,31,6],[35,6,32,4],[36,6,33,4],[36,10,33,8],[36,11,33,9,"_pendingAggregates"],[36,29,33,27],[36,32,33,30],[36,36,33,34,"Map"],[36,39,33,37],[36,40,33,38],[36,41,33,39],[37,6,34,4],[37,10,34,8],[37,11,34,9,"_client"],[37,18,34,16],[37,19,34,17,"sendSession"],[37,30,34,28],[37,31,34,29,"sessionAggregates"],[37,48,34,46],[37,49,34,47],[38,4,35,2],[40,4,37,2],[41,4,38,3,"getSessionAggregates"],[41,24,38,23,"getSessionAggregates"],[41,25,38,23],[41,27,38,26],[42,6,39,4],[42,12,39,10,"aggregates"],[42,22,39,20],[42,25,39,23,"Array"],[42,30,39,28],[42,31,39,29,"from"],[42,35,39,33],[42,36,39,34],[42,40,39,38],[42,41,39,39,"_pendingAggregates"],[42,59,39,57],[42,60,39,58,"values"],[42,66,39,64],[42,67,39,65],[42,68,39,66],[42,69,39,67],[43,6,41,4],[43,12,41,10,"sessionAggregates"],[43,29,41,27],[43,32,41,30],[44,8,42,6,"attrs"],[44,13,42,11],[44,15,42,13],[44,19,42,17],[44,20,42,18,"_sessionAttrs"],[44,33,42,31],[45,8,43,6,"aggregates"],[46,6,44,4],[46,7,44,5],[47,6,45,4],[47,13,45,11],[47,17,45,11,"dropUndefinedKeys"],[47,42,45,28],[47,44,45,29,"sessionAggregates"],[47,61,45,46],[47,62,45,47],[48,4,46,2],[50,4,48,2],[51,4,49,3,"close"],[51,9,49,8,"close"],[51,10,49,8],[51,12,49,11],[52,6,50,4,"clearInterval"],[52,19,50,17],[52,20,50,18],[52,24,50,22],[52,25,50,23,"_intervalId"],[52,36,50,34],[52,37,50,35],[53,6,51,4],[53,10,51,8],[53,11,51,9,"_isEnabled"],[53,21,51,19],[53,24,51,22],[53,29,51,27],[54,6,52,4],[54,10,52,8],[54,11,52,9,"flush"],[54,16,52,14],[54,17,52,15],[54,18,52,16],[55,4,53,2],[57,4,55,2],[58,0,56,0],[59,0,57,0],[60,0,58,0],[61,0,59,0],[62,4,60,3,"incrementSessionStatusCount"],[62,31,60,30,"incrementSessionStatusCount"],[62,32,60,30],[62,34,60,33],[63,6,61,4],[63,10,61,8],[63,11,61,9],[63,15,61,13],[63,16,61,14,"_isEnabled"],[63,26,61,24],[63,28,61,26],[64,8,62,6],[65,6,63,4],[66,6,64,4],[66,12,64,10,"isolationScope"],[66,26,64,24],[66,29,64,27],[66,33,64,27,"getIsolationScope"],[66,65,64,44],[66,67,64,45],[66,68,64,46],[67,6,65,4],[68,6,66,4],[68,12,66,10,"requestSession"],[68,26,66,24],[68,29,66,27,"isolationScope"],[68,43,66,41],[68,44,66,42,"getRequestSession"],[68,61,66,59],[68,62,66,60],[68,63,66,61],[69,6,68,4],[69,10,68,8,"requestSession"],[69,24,68,22],[69,28,68,26,"requestSession"],[69,42,68,40],[69,43,68,41,"status"],[69,49,68,47],[69,51,68,49],[70,8,69,6],[70,12,69,10],[70,13,69,11,"_incrementSessionStatusCount"],[70,41,69,39],[70,42,69,40,"requestSession"],[70,56,69,54],[70,57,69,55,"status"],[70,63,69,61],[70,65,69,63],[70,69,69,67,"Date"],[70,73,69,71],[70,74,69,72],[70,75,69,73],[70,76,69,74],[71,8,70,6],[72,8,71,6],[73,8,72,6],[74,8,73,6,"isolationScope"],[74,22,73,20],[74,23,73,21,"setRequestSession"],[74,40,73,38],[74,41,73,39,"undefined"],[74,50,73,48],[74,51,73,49],[75,8,74,6],[76,6,75,4],[77,4,76,2],[79,4,78,2],[80,0,79,0],[81,0,80,0],[82,0,81,0],[83,4,82,2],[84,4,83,3,"_incrementSessionStatusCount"],[84,32,83,31,"_incrementSessionStatusCount"],[84,33,83,32,"status"],[84,39,83,38],[84,41,83,40,"date"],[84,45,83,44],[84,47,83,46],[85,6,84,4],[86,6,85,4],[86,12,85,10,"sessionStartedTrunc"],[86,31,85,29],[86,34,85,32],[86,38,85,36,"Date"],[86,42,85,40],[86,43,85,41,"date"],[86,47,85,45],[86,48,85,46],[86,49,85,47,"setSeconds"],[86,59,85,57],[86,60,85,58],[86,61,85,59],[86,63,85,61],[86,64,85,62],[86,65,85,63],[88,6,87,4],[89,6,88,4],[90,6,89,4],[90,10,89,8,"aggregationCounts"],[90,27,89,25],[90,30,89,28],[90,34,89,32],[90,35,89,33,"_pendingAggregates"],[90,53,89,51],[90,54,89,52,"get"],[90,57,89,55],[90,58,89,56,"sessionStartedTrunc"],[90,77,89,75],[90,78,89,76],[91,6,90,4],[91,10,90,8],[91,11,90,9,"aggregationCounts"],[91,28,90,26],[91,30,90,28],[92,8,91,6,"aggregationCounts"],[92,25,91,23],[92,28,91,26],[93,10,91,28,"started"],[93,17,91,35],[93,19,91,37],[93,23,91,41,"Date"],[93,27,91,45],[93,28,91,46,"sessionStartedTrunc"],[93,47,91,65],[93,48,91,66],[93,49,91,67,"toISOString"],[93,60,91,78],[93,61,91,79],[94,8,91,81],[94,9,91,82],[95,8,92,6],[95,12,92,10],[95,13,92,11,"_pendingAggregates"],[95,31,92,29],[95,32,92,30,"set"],[95,35,92,33],[95,36,92,34,"sessionStartedTrunc"],[95,55,92,53],[95,57,92,55,"aggregationCounts"],[95,74,92,72],[95,75,92,73],[96,6,93,4],[97,6,95,4],[97,14,95,12,"status"],[97,20,95,18],[98,8,96,6],[98,13,96,11],[98,22,96,20],[99,10,97,8,"aggregationCounts"],[99,27,97,25],[99,28,97,26,"errored"],[99,35,97,33],[99,38,97,36],[99,39,97,37,"aggregationCounts"],[99,56,97,54],[99,57,97,55,"errored"],[99,64,97,62],[99,68,97,66],[99,69,97,67],[99,73,97,71],[99,74,97,72],[100,10,98,8],[100,17,98,15,"aggregationCounts"],[100,34,98,32],[100,35,98,33,"errored"],[100,42,98,40],[101,8,99,6],[101,13,99,11],[101,17,99,15],[102,10,100,8,"aggregationCounts"],[102,27,100,25],[102,28,100,26,"exited"],[102,34,100,32],[102,37,100,35],[102,38,100,36,"aggregationCounts"],[102,55,100,53],[102,56,100,54,"exited"],[102,62,100,60],[102,66,100,64],[102,67,100,65],[102,71,100,69],[102,72,100,70],[103,10,101,8],[103,17,101,15,"aggregationCounts"],[103,34,101,32],[103,35,101,33,"exited"],[103,41,101,39],[104,8,102,6],[105,10,103,8,"aggregationCounts"],[105,27,103,25],[105,28,103,26,"crashed"],[105,35,103,33],[105,38,103,36],[105,39,103,37,"aggregationCounts"],[105,56,103,54],[105,57,103,55,"crashed"],[105,64,103,62],[105,68,103,66],[105,69,103,67],[105,73,103,71],[105,74,103,72],[106,10,104,8],[106,17,104,15,"aggregationCounts"],[106,34,104,32],[106,35,104,33,"crashed"],[106,42,104,40],[107,6,105,4],[108,4,106,2],[109,2,107,0],[110,2,107,1,"exports"],[110,9,107,1],[110,10,107,1,"SessionFlusher"],[110,24,107,1],[110,27,107,1,"SessionFlusher"],[110,41,107,1],[111,0,107,1],[111,3]],"functionMap":{"names":["<global>","SessionFlusher","SessionFlusher#constructor","setInterval$argument_0","SessionFlusher#flush","SessionFlusher#getSessionAggregates","SessionFlusher#close","SessionFlusher#incrementSessionStatusCount","SessionFlusher#_incrementSessionStatusCount"],"mappings":"AAA;ACQ;GCI;mCCO,kBD;GDK;GGG;GHO;GIG;GJQ;GKG;GLI;GMO;GNgB;GOO;GPuB;CDC"}},"type":"js/module"}]}