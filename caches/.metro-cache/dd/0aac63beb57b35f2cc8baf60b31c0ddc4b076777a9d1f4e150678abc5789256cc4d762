{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":286,"index":286}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"../utils/worldwide","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":287},"end":{"line":2,"column":51,"index":338}}],"key":"/9Zkbo5cHZuI/WH8RoGGgsefOs8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.MARGIN_OF_ERROR_SECONDS = void 0;\n  exports.createChildSpanJSON = createChildSpanJSON;\n  exports.createSpanJSON = createSpanJSON;\n  exports.defaultTransactionSource = exports.customTransactionSource = void 0;\n  exports.getBundleStartTimestampMs = getBundleStartTimestampMs;\n  exports.getLatestChildSpanEndTimestamp = getLatestChildSpanEndTimestamp;\n  exports.getTimeOriginMilliseconds = getTimeOriginMilliseconds;\n  exports.isNearToNow = isNearToNow;\n  exports.setSpanDurationAsMeasurement = setSpanDurationAsMeasurement;\n  exports.setSpanDurationAsMeasurementOnSpan = setSpanDurationAsMeasurementOnSpan;\n  exports.setSpanMeasurement = setSpanMeasurement;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _worldwide = require(_dependencyMap[1], \"../utils/worldwide\");\n  const defaultTransactionSource = exports.defaultTransactionSource = 'component';\n  const customTransactionSource = exports.customTransactionSource = 'custom';\n  /**\n   * A margin of error of 50ms is allowed for the async native bridge call.\n   * Anything larger would reduce the accuracy of our frames measurements.\n   */\n  const MARGIN_OF_ERROR_SECONDS = exports.MARGIN_OF_ERROR_SECONDS = 0.05;\n  const timeOriginMilliseconds = Date.now();\n  /**\n   * Returns the timestamp where the JS global scope was initialized.\n   */\n  function getTimeOriginMilliseconds() {\n    return timeOriginMilliseconds;\n  }\n  /**\n   * Determines if the timestamp is now or within the specified margin of error from now.\n   */\n  function isNearToNow(timestamp) {\n    if (!timestamp) {\n      return false;\n    }\n    return Math.abs((0, _core.timestampInSeconds)() - timestamp) <= MARGIN_OF_ERROR_SECONDS;\n  }\n  /**\n   * Sets the duration of the span as a measurement.\n   * Uses `setMeasurement` function from @sentry/core.\n   */\n  function setSpanDurationAsMeasurement(name, span) {\n    const {\n      timestamp: spanEnd,\n      start_timestamp: spanStart\n    } = (0, _core.spanToJSON)(span);\n    if (!spanEnd || !spanStart) {\n      return;\n    }\n    (0, _core.setMeasurement)(name, (spanEnd - spanStart) * 1000, 'millisecond');\n  }\n  /**\n   * Sets the duration of the span as a measurement.\n   * Uses `setMeasurement` function from @sentry/core.\n   */\n  function setSpanDurationAsMeasurementOnSpan(name, span, on) {\n    const {\n      timestamp: spanEnd,\n      start_timestamp: spanStart\n    } = (0, _core.spanToJSON)(span);\n    if (!spanEnd || !spanStart) {\n      return;\n    }\n    setSpanMeasurement(on, name, (spanEnd - spanStart) * 1000, 'millisecond');\n  }\n  /**\n   * Sets measurement on the give span.\n   */\n  function setSpanMeasurement(span, key, value, unit) {\n    span.addEvent(key, {\n      [_core.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [_core.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit\n    });\n  }\n  /**\n   * Returns the latest end timestamp of the child spans of the given span.\n   */\n  function getLatestChildSpanEndTimestamp(span) {\n    const childEndTimestamps = (0, _core.getSpanDescendants)(span).map(span => (0, _core.spanToJSON)(span).timestamp).filter(timestamp => !!timestamp);\n    return childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n  }\n  /**\n   * Returns unix timestamp in ms of the bundle start time.\n   *\n   * If not available, returns undefined.\n   */\n  function getBundleStartTimestampMs() {\n    const bundleStartTime = _worldwide.RN_GLOBAL_OBJ.__BUNDLE_START_TIME__;\n    if (!bundleStartTime) {\n      _core.logger.warn('Missing the bundle start time on the global object.');\n      return undefined;\n    }\n    if (!_worldwide.RN_GLOBAL_OBJ.nativePerformanceNow) {\n      // bundleStartTime is Date.now() in milliseconds\n      return bundleStartTime;\n    }\n    // nativePerformanceNow() is monotonic clock like performance.now()\n    const approxStartingTimeOrigin = Date.now() - _worldwide.RN_GLOBAL_OBJ.nativePerformanceNow();\n    return approxStartingTimeOrigin + bundleStartTime;\n  }\n  /**\n   * Creates valid span JSON object from the given data.\n   */\n  function createSpanJSON(from) {\n    return (0, _core.dropUndefinedKeys)(Object.assign(Object.assign({\n      status: 'ok'\n    }, from), {\n      span_id: from.span_id ? from.span_id : (0, _core.uuid4)().substring(16),\n      trace_id: from.trace_id ? from.trace_id : (0, _core.uuid4)(),\n      data: (0, _core.dropUndefinedKeys)(Object.assign({\n        [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: from.op,\n        [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: from.origin\n      }, from.data ? from.data : {}))\n    }));\n  }\n  const SENTRY_DEFAULT_ORIGIN = 'manual';\n  /**\n   *\n   */\n  function createChildSpanJSON(parent, from) {\n    return createSpanJSON(Object.assign({\n      op: parent.op,\n      trace_id: parent.trace_id,\n      parent_span_id: parent.span_id,\n      origin: parent.origin || SENTRY_DEFAULT_ORIGIN\n    }, from));\n  }\n});","lineCount":131,"map":[[16,2,1,0],[16,6,1,0,"_core"],[16,11,1,0],[16,14,1,0,"require"],[16,21,1,0],[16,22,1,0,"_dependencyMap"],[16,36,1,0],[17,2,2,0],[17,6,2,0,"_worldwide"],[17,16,2,0],[17,19,2,0,"require"],[17,26,2,0],[17,27,2,0,"_dependencyMap"],[17,41,2,0],[18,2,3,7],[18,8,3,13,"defaultTransactionSource"],[18,32,3,37],[18,35,3,37,"exports"],[18,42,3,37],[18,43,3,37,"defaultTransactionSource"],[18,67,3,37],[18,70,3,40],[18,81,3,51],[19,2,4,7],[19,8,4,13,"customTransactionSource"],[19,31,4,36],[19,34,4,36,"exports"],[19,41,4,36],[19,42,4,36,"customTransactionSource"],[19,65,4,36],[19,68,4,39],[19,76,4,47],[20,2,5,0],[21,0,6,0],[22,0,7,0],[23,0,8,0],[24,2,9,7],[24,8,9,13,"MARGIN_OF_ERROR_SECONDS"],[24,31,9,36],[24,34,9,36,"exports"],[24,41,9,36],[24,42,9,36,"MARGIN_OF_ERROR_SECONDS"],[24,65,9,36],[24,68,9,39],[24,72,9,43],[25,2,10,0],[25,8,10,6,"timeOriginMilliseconds"],[25,30,10,28],[25,33,10,31,"Date"],[25,37,10,35],[25,38,10,36,"now"],[25,41,10,39],[25,42,10,40],[25,43,10,41],[26,2,11,0],[27,0,12,0],[28,0,13,0],[29,2,14,7],[29,11,14,16,"getTimeOriginMilliseconds"],[29,36,14,41,"getTimeOriginMilliseconds"],[29,37,14,41],[29,39,14,44],[30,4,15,4],[30,11,15,11,"timeOriginMilliseconds"],[30,33,15,33],[31,2,16,0],[32,2,17,0],[33,0,18,0],[34,0,19,0],[35,2,20,7],[35,11,20,16,"isNearToNow"],[35,22,20,27,"isNearToNow"],[35,23,20,28,"timestamp"],[35,32,20,37],[35,34,20,39],[36,4,21,4],[36,8,21,8],[36,9,21,9,"timestamp"],[36,18,21,18],[36,20,21,20],[37,6,22,8],[37,13,22,15],[37,18,22,20],[38,4,23,4],[39,4,24,4],[39,11,24,11,"Math"],[39,15,24,15],[39,16,24,16,"abs"],[39,19,24,19],[39,20,24,20],[39,24,24,20,"timestampInSeconds"],[39,48,24,38],[39,50,24,39],[39,51,24,40],[39,54,24,43,"timestamp"],[39,63,24,52],[39,64,24,53],[39,68,24,57,"MARGIN_OF_ERROR_SECONDS"],[39,91,24,80],[40,2,25,0],[41,2,26,0],[42,0,27,0],[43,0,28,0],[44,0,29,0],[45,2,30,7],[45,11,30,16,"setSpanDurationAsMeasurement"],[45,39,30,44,"setSpanDurationAsMeasurement"],[45,40,30,45,"name"],[45,44,30,49],[45,46,30,51,"span"],[45,50,30,55],[45,52,30,57],[46,4,31,4],[46,10,31,10],[47,6,31,12,"timestamp"],[47,15,31,21],[47,17,31,23,"spanEnd"],[47,24,31,30],[48,6,31,32,"start_timestamp"],[48,21,31,47],[48,23,31,49,"spanStart"],[49,4,31,59],[49,5,31,60],[49,8,31,63],[49,12,31,63,"spanToJSON"],[49,28,31,73],[49,30,31,74,"span"],[49,34,31,78],[49,35,31,79],[50,4,32,4],[50,8,32,8],[50,9,32,9,"spanEnd"],[50,16,32,16],[50,20,32,20],[50,21,32,21,"spanStart"],[50,30,32,30],[50,32,32,32],[51,6,33,8],[52,4,34,4],[53,4,35,4],[53,8,35,4,"setMeasurement"],[53,28,35,18],[53,30,35,19,"name"],[53,34,35,23],[53,36,35,25],[53,37,35,26,"spanEnd"],[53,44,35,33],[53,47,35,36,"spanStart"],[53,56,35,45],[53,60,35,49],[53,64,35,53],[53,66,35,55],[53,79,35,68],[53,80,35,69],[54,2,36,0],[55,2,37,0],[56,0,38,0],[57,0,39,0],[58,0,40,0],[59,2,41,7],[59,11,41,16,"setSpanDurationAsMeasurementOnSpan"],[59,45,41,50,"setSpanDurationAsMeasurementOnSpan"],[59,46,41,51,"name"],[59,50,41,55],[59,52,41,57,"span"],[59,56,41,61],[59,58,41,63,"on"],[59,60,41,65],[59,62,41,67],[60,4,42,4],[60,10,42,10],[61,6,42,12,"timestamp"],[61,15,42,21],[61,17,42,23,"spanEnd"],[61,24,42,30],[62,6,42,32,"start_timestamp"],[62,21,42,47],[62,23,42,49,"spanStart"],[63,4,42,59],[63,5,42,60],[63,8,42,63],[63,12,42,63,"spanToJSON"],[63,28,42,73],[63,30,42,74,"span"],[63,34,42,78],[63,35,42,79],[64,4,43,4],[64,8,43,8],[64,9,43,9,"spanEnd"],[64,16,43,16],[64,20,43,20],[64,21,43,21,"spanStart"],[64,30,43,30],[64,32,43,32],[65,6,44,8],[66,4,45,4],[67,4,46,4,"setSpanMeasurement"],[67,22,46,22],[67,23,46,23,"on"],[67,25,46,25],[67,27,46,27,"name"],[67,31,46,31],[67,33,46,33],[67,34,46,34,"spanEnd"],[67,41,46,41],[67,44,46,44,"spanStart"],[67,53,46,53],[67,57,46,57],[67,61,46,61],[67,63,46,63],[67,76,46,76],[67,77,46,77],[68,2,47,0],[69,2,48,0],[70,0,49,0],[71,0,50,0],[72,2,51,7],[72,11,51,16,"setSpanMeasurement"],[72,29,51,34,"setSpanMeasurement"],[72,30,51,35,"span"],[72,34,51,39],[72,36,51,41,"key"],[72,39,51,44],[72,41,51,46,"value"],[72,46,51,51],[72,48,51,53,"unit"],[72,52,51,57],[72,54,51,59],[73,4,52,4,"span"],[73,8,52,8],[73,9,52,9,"addEvent"],[73,17,52,17],[73,18,52,18,"key"],[73,21,52,21],[73,23,52,23],[74,6,53,8],[74,7,53,9,"SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE"],[74,56,53,52],[74,59,53,55,"value"],[74,64,53,60],[75,6,54,8],[75,7,54,9,"SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT"],[75,55,54,51],[75,58,54,54,"unit"],[76,4,55,4],[76,5,55,5],[76,6,55,6],[77,2,56,0],[78,2,57,0],[79,0,58,0],[80,0,59,0],[81,2,60,7],[81,11,60,16,"getLatestChildSpanEndTimestamp"],[81,41,60,46,"getLatestChildSpanEndTimestamp"],[81,42,60,47,"span"],[81,46,60,51],[81,48,60,53],[82,4,61,4],[82,10,61,10,"childEndTimestamps"],[82,28,61,28],[82,31,61,31],[82,35,61,31,"getSpanDescendants"],[82,59,61,49],[82,61,61,50,"span"],[82,65,61,54],[82,66,61,55],[82,67,62,9,"map"],[82,70,62,12],[82,71,62,13,"span"],[82,75,62,17],[82,79,62,21],[82,83,62,21,"spanToJSON"],[82,99,62,31],[82,101,62,32,"span"],[82,105,62,36],[82,106,62,37],[82,107,62,38,"timestamp"],[82,116,62,47],[82,117,62,48],[82,118,63,9,"filter"],[82,124,63,15],[82,125,63,16,"timestamp"],[82,134,63,25],[82,138,63,29],[82,139,63,30],[82,140,63,31,"timestamp"],[82,149,63,40],[82,150,63,41],[83,4,64,4],[83,11,64,11,"childEndTimestamps"],[83,29,64,29],[83,30,64,30,"length"],[83,36,64,36],[83,39,64,39,"Math"],[83,43,64,43],[83,44,64,44,"max"],[83,47,64,47],[83,48,64,48],[83,51,64,51,"childEndTimestamps"],[83,69,64,69],[83,70,64,70],[83,73,64,73,"undefined"],[83,82,64,82],[84,2,65,0],[85,2,66,0],[86,0,67,0],[87,0,68,0],[88,0,69,0],[89,0,70,0],[90,2,71,7],[90,11,71,16,"getBundleStartTimestampMs"],[90,36,71,41,"getBundleStartTimestampMs"],[90,37,71,41],[90,39,71,44],[91,4,72,4],[91,10,72,10,"bundleStartTime"],[91,25,72,25],[91,28,72,28,"RN_GLOBAL_OBJ"],[91,52,72,41],[91,53,72,42,"__BUNDLE_START_TIME__"],[91,74,72,63],[92,4,73,4],[92,8,73,8],[92,9,73,9,"bundleStartTime"],[92,24,73,24],[92,26,73,26],[93,6,74,8,"logger"],[93,18,74,14],[93,19,74,15,"warn"],[93,23,74,19],[93,24,74,20],[93,77,74,73],[93,78,74,74],[94,6,75,8],[94,13,75,15,"undefined"],[94,22,75,24],[95,4,76,4],[96,4,77,4],[96,8,77,8],[96,9,77,9,"RN_GLOBAL_OBJ"],[96,33,77,22],[96,34,77,23,"nativePerformanceNow"],[96,54,77,43],[96,56,77,45],[97,6,78,8],[98,6,79,8],[98,13,79,15,"bundleStartTime"],[98,28,79,30],[99,4,80,4],[100,4,81,4],[101,4,82,4],[101,10,82,10,"approxStartingTimeOrigin"],[101,34,82,34],[101,37,82,37,"Date"],[101,41,82,41],[101,42,82,42,"now"],[101,45,82,45],[101,46,82,46],[101,47,82,47],[101,50,82,50,"RN_GLOBAL_OBJ"],[101,74,82,63],[101,75,82,64,"nativePerformanceNow"],[101,95,82,84],[101,96,82,85],[101,97,82,86],[102,4,83,4],[102,11,83,11,"approxStartingTimeOrigin"],[102,35,83,35],[102,38,83,38,"bundleStartTime"],[102,53,83,53],[103,2,84,0],[104,2,85,0],[105,0,86,0],[106,0,87,0],[107,2,88,7],[107,11,88,16,"createSpanJSON"],[107,25,88,30,"createSpanJSON"],[107,26,88,31,"from"],[107,30,88,35],[107,32,88,37],[108,4,89,4],[108,11,89,11],[108,15,89,11,"dropUndefinedKeys"],[108,38,89,28],[108,40,89,29,"Object"],[108,46,89,35],[108,47,89,36,"assign"],[108,53,89,42],[108,54,89,43,"Object"],[108,60,89,49],[108,61,89,50,"assign"],[108,67,89,56],[108,68,89,57],[109,6,89,59,"status"],[109,12,89,65],[109,14,89,67],[110,4,89,72],[110,5,89,73],[110,7,89,75,"from"],[110,11,89,79],[110,12,89,80],[110,14,89,82],[111,6,89,84,"span_id"],[111,13,89,91],[111,15,89,93,"from"],[111,19,89,97],[111,20,89,98,"span_id"],[111,27,89,105],[111,30,89,108,"from"],[111,34,89,112],[111,35,89,113,"span_id"],[111,42,89,120],[111,45,89,123],[111,49,89,123,"uuid4"],[111,60,89,128],[111,62,89,129],[111,63,89,130],[111,64,89,131,"substring"],[111,73,89,140],[111,74,89,141],[111,76,89,143],[111,77,89,144],[112,6,89,146,"trace_id"],[112,14,89,154],[112,16,89,156,"from"],[112,20,89,160],[112,21,89,161,"trace_id"],[112,29,89,169],[112,32,89,172,"from"],[112,36,89,176],[112,37,89,177,"trace_id"],[112,45,89,185],[112,48,89,188],[112,52,89,188,"uuid4"],[112,63,89,193],[112,65,89,194],[112,66,89,195],[113,6,89,197,"data"],[113,10,89,201],[113,12,89,203],[113,16,89,203,"dropUndefinedKeys"],[113,39,89,220],[113,41,89,221,"Object"],[113,47,89,227],[113,48,89,228,"assign"],[113,54,89,234],[113,55,89,235],[114,8,89,237],[114,9,89,238,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[114,43,89,266],[114,46,89,269,"from"],[114,50,89,273],[114,51,89,274,"op"],[114,53,89,276],[115,8,89,278],[115,9,89,279,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[115,47,89,311],[115,50,89,314,"from"],[115,54,89,318],[115,55,89,319,"origin"],[116,6,89,326],[116,7,89,327],[116,9,89,330,"from"],[116,13,89,334],[116,14,89,335,"data"],[116,18,89,339],[116,21,89,342,"from"],[116,25,89,346],[116,26,89,347,"data"],[116,30,89,351],[116,33,89,354],[116,34,89,355],[116,35,89,357],[116,36,89,358],[117,4,89,360],[117,5,89,361],[117,6,89,362],[117,7,89,363],[118,2,90,0],[119,2,91,0],[119,8,91,6,"SENTRY_DEFAULT_ORIGIN"],[119,29,91,27],[119,32,91,30],[119,40,91,38],[120,2,92,0],[121,0,93,0],[122,0,94,0],[123,2,95,7],[123,11,95,16,"createChildSpanJSON"],[123,30,95,35,"createChildSpanJSON"],[123,31,95,36,"parent"],[123,37,95,42],[123,39,95,44,"from"],[123,43,95,48],[123,45,95,50],[124,4,96,4],[124,11,96,11,"createSpanJSON"],[124,25,96,25],[124,26,96,26,"Object"],[124,32,96,32],[124,33,96,33,"assign"],[124,39,96,39],[124,40,96,40],[125,6,96,42,"op"],[125,8,96,44],[125,10,96,46,"parent"],[125,16,96,52],[125,17,96,53,"op"],[125,19,96,55],[126,6,96,57,"trace_id"],[126,14,96,65],[126,16,96,67,"parent"],[126,22,96,73],[126,23,96,74,"trace_id"],[126,31,96,82],[127,6,96,84,"parent_span_id"],[127,20,96,98],[127,22,96,100,"parent"],[127,28,96,106],[127,29,96,107,"span_id"],[127,36,96,114],[128,6,96,116,"origin"],[128,12,96,122],[128,14,96,124,"parent"],[128,20,96,130],[128,21,96,131,"origin"],[128,27,96,137],[128,31,96,141,"SENTRY_DEFAULT_ORIGIN"],[129,4,96,163],[129,5,96,164],[129,7,96,166,"from"],[129,11,96,170],[129,12,96,171],[129,13,96,172],[130,2,97,0],[131,0,97,1],[131,3]],"functionMap":{"names":["<global>","getTimeOriginMilliseconds","isNearToNow","setSpanDurationAsMeasurement","setSpanDurationAsMeasurementOnSpan","setSpanMeasurement","getLatestChildSpanEndTimestamp","getSpanDescendants.map$argument_0","getSpanDescendants.map.filter$argument_0","getBundleStartTimestampMs","createSpanJSON","createChildSpanJSON"],"mappings":"AAA;OCa;CDE;OEI;CFK;OGK;CHM;OIK;CJM;OKI;CLK;OMI;aCE,kCD;gBEC,wBF;CNE;OSM;CTa;OUI;CVE;OWK;CXE"}},"type":"js/module"}]}