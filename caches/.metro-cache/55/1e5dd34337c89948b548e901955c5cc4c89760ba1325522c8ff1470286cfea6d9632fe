{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_RETRY_AFTER = void 0;\n  exports.disabledUntil = disabledUntil;\n  exports.isRateLimited = isRateLimited;\n  exports.parseRetryAfterHeader = parseRetryAfterHeader;\n  exports.updateRateLimits = updateRateLimits;\n  // Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\n  const DEFAULT_RETRY_AFTER = exports.DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n  /**\n   * Extracts Retry-After value from the request header or returns default value\n   * @param header string representation of 'Retry-After' header\n   * @param now current unix timestamp\n   *\n   */\n  function parseRetryAfterHeader(header, now = Date.now()) {\n    const headerDelay = parseInt(`${header}`, 10);\n    if (!isNaN(headerDelay)) {\n      return headerDelay * 1000;\n    }\n    const headerDate = Date.parse(`${header}`);\n    if (!isNaN(headerDate)) {\n      return headerDate - now;\n    }\n    return DEFAULT_RETRY_AFTER;\n  }\n\n  /**\n   * Gets the time that the given category is disabled until for rate limiting.\n   * In case no category-specific limit is set but a general rate limit across all categories is active,\n   * that time is returned.\n   *\n   * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n   */\n  function disabledUntil(limits, dataCategory) {\n    return limits[dataCategory] || limits.all || 0;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  function isRateLimited(limits, dataCategory, now = Date.now()) {\n    return disabledUntil(limits, dataCategory) > now;\n  }\n\n  /**\n   * Update ratelimits from incoming headers.\n   *\n   * @return the updated RateLimits object.\n   */\n  function updateRateLimits(limits, {\n    statusCode,\n    headers\n  }, now = Date.now()) {\n    const updatedRateLimits = {\n      ...limits\n    };\n\n    // \"The name is case-insensitive.\"\n    // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n    const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n    const retryAfterHeader = headers && headers['retry-after'];\n    if (rateLimitHeader) {\n      /**\n       * rate limit headers are of the form\n       *     <header>,<header>,..\n       * where each <header> is of the form\n       *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n       * where\n       *     <retry_after> is a delay in seconds\n       *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n       *         <category>;<category>;...\n       *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n       *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n       *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n       *         Only present if rate limit applies to the metric_bucket data category.\n       */\n      for (const limit of rateLimitHeader.trim().split(',')) {\n        const [retryAfter, categories,,, namespaces] = limit.split(':', 5);\n        const headerDelay = parseInt(retryAfter, 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        if (!categories) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          for (const category of categories.split(';')) {\n            if (category === 'metric_bucket') {\n              // namespaces will be present when category === 'metric_bucket'\n              if (!namespaces || namespaces.split(';').includes('custom')) {\n                updatedRateLimits[category] = now + delay;\n              }\n            } else {\n              updatedRateLimits[category] = now + delay;\n            }\n          }\n        }\n      }\n    } else if (retryAfterHeader) {\n      updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n    } else if (statusCode === 429) {\n      updatedRateLimits.all = now + 60 * 1000;\n    }\n    return updatedRateLimits;\n  }\n});","lineCount":108,"map":[[10,2,1,0],[12,2,3,0],[12,8,3,6,"DEFAULT_RETRY_AFTER"],[12,27,3,25],[12,30,3,25,"exports"],[12,37,3,25],[12,38,3,25,"DEFAULT_RETRY_AFTER"],[12,57,3,25],[12,60,3,28],[12,62,3,30],[12,65,3,33],[12,69,3,37],[12,70,3,38],[12,71,3,39],[14,2,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,0,10,0],[20,2,11,0],[20,11,11,9,"parseRetryAfterHeader"],[20,32,11,30,"parseRetryAfterHeader"],[20,33,11,31,"header"],[20,39,11,37],[20,41,11,39,"now"],[20,44,11,42],[20,47,11,45,"Date"],[20,51,11,49],[20,52,11,50,"now"],[20,55,11,53],[20,56,11,54],[20,57,11,55],[20,59,11,57],[21,4,12,2],[21,10,12,8,"headerDelay"],[21,21,12,19],[21,24,12,22,"parseInt"],[21,32,12,30],[21,33,12,31],[21,36,12,34,"header"],[21,42,12,40],[21,44,12,42],[21,46,12,44],[21,48,12,46],[21,49,12,47],[22,4,13,2],[22,8,13,6],[22,9,13,7,"isNaN"],[22,14,13,12],[22,15,13,13,"headerDelay"],[22,26,13,24],[22,27,13,25],[22,29,13,27],[23,6,14,4],[23,13,14,11,"headerDelay"],[23,24,14,22],[23,27,14,25],[23,31,14,29],[24,4,15,2],[25,4,17,2],[25,10,17,8,"headerDate"],[25,20,17,18],[25,23,17,21,"Date"],[25,27,17,25],[25,28,17,26,"parse"],[25,33,17,31],[25,34,17,32],[25,37,17,35,"header"],[25,43,17,41],[25,45,17,43],[25,46,17,44],[26,4,18,2],[26,8,18,6],[26,9,18,7,"isNaN"],[26,14,18,12],[26,15,18,13,"headerDate"],[26,25,18,23],[26,26,18,24],[26,28,18,26],[27,6,19,4],[27,13,19,11,"headerDate"],[27,23,19,21],[27,26,19,24,"now"],[27,29,19,27],[28,4,20,2],[29,4,22,2],[29,11,22,9,"DEFAULT_RETRY_AFTER"],[29,30,22,28],[30,2,23,0],[32,2,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,2,32,0],[39,11,32,9,"disabledUntil"],[39,24,32,22,"disabledUntil"],[39,25,32,23,"limits"],[39,31,32,29],[39,33,32,31,"dataCategory"],[39,45,32,43],[39,47,32,45],[40,4,33,2],[40,11,33,9,"limits"],[40,17,33,15],[40,18,33,16,"dataCategory"],[40,30,33,28],[40,31,33,29],[40,35,33,33,"limits"],[40,41,33,39],[40,42,33,40,"all"],[40,45,33,43],[40,49,33,47],[40,50,33,48],[41,2,34,0],[43,2,36,0],[44,0,37,0],[45,0,38,0],[46,2,39,0],[46,11,39,9,"isRateLimited"],[46,24,39,22,"isRateLimited"],[46,25,39,23,"limits"],[46,31,39,29],[46,33,39,31,"dataCategory"],[46,45,39,43],[46,47,39,45,"now"],[46,50,39,48],[46,53,39,51,"Date"],[46,57,39,55],[46,58,39,56,"now"],[46,61,39,59],[46,62,39,60],[46,63,39,61],[46,65,39,63],[47,4,40,2],[47,11,40,9,"disabledUntil"],[47,24,40,22],[47,25,40,23,"limits"],[47,31,40,29],[47,33,40,31,"dataCategory"],[47,45,40,43],[47,46,40,44],[47,49,40,47,"now"],[47,52,40,50],[48,2,41,0],[50,2,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,2,48,0],[55,11,48,9,"updateRateLimits"],[55,27,48,25,"updateRateLimits"],[55,28,49,2,"limits"],[55,34,49,8],[55,36,50,2],[56,4,50,4,"statusCode"],[56,14,50,14],[57,4,50,16,"headers"],[58,2,50,24],[58,3,50,25],[58,5,51,2,"now"],[58,8,51,5],[58,11,51,8,"Date"],[58,15,51,12],[58,16,51,13,"now"],[58,19,51,16],[58,20,51,17],[58,21,51,18],[58,23,52,2],[59,4,53,2],[59,10,53,8,"updatedRateLimits"],[59,27,53,25],[59,30,53,28],[60,6,54,4],[60,9,54,7,"limits"],[61,4,55,2],[61,5,55,3],[63,4,57,2],[64,4,58,2],[65,4,59,2],[65,10,59,8,"rateLimitHeader"],[65,25,59,23],[65,28,59,26,"headers"],[65,35,59,33],[65,39,59,37,"headers"],[65,46,59,44],[65,47,59,45],[65,69,59,67],[65,70,59,68],[66,4,60,2],[66,10,60,8,"retryAfterHeader"],[66,26,60,24],[66,29,60,27,"headers"],[66,36,60,34],[66,40,60,38,"headers"],[66,47,60,45],[66,48,60,46],[66,61,60,59],[66,62,60,60],[67,4,62,2],[67,8,62,6,"rateLimitHeader"],[67,23,62,21],[67,25,62,23],[68,6,63,4],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,0,71,0],[77,0,72,0],[78,0,73,0],[79,0,74,0],[80,0,75,0],[81,0,76,0],[82,6,77,4],[82,11,77,9],[82,17,77,15,"limit"],[82,22,77,20],[82,26,77,24,"rateLimitHeader"],[82,41,77,39],[82,42,77,40,"trim"],[82,46,77,44],[82,47,77,45],[82,48,77,46],[82,49,77,47,"split"],[82,54,77,52],[82,55,77,53],[82,58,77,56],[82,59,77,57],[82,61,77,59],[83,8,78,6],[83,14,78,12],[83,15,78,13,"retryAfter"],[83,25,78,23],[83,27,78,25,"categories"],[83,37,78,35],[83,41,78,41,"namespaces"],[83,51,78,51],[83,52,78,52],[83,55,78,55,"limit"],[83,60,78,60],[83,61,78,61,"split"],[83,66,78,66],[83,67,78,67],[83,70,78,70],[83,72,78,72],[83,73,78,73],[83,74,78,74],[84,8,79,6],[84,14,79,12,"headerDelay"],[84,25,79,23],[84,28,79,26,"parseInt"],[84,36,79,34],[84,37,79,35,"retryAfter"],[84,47,79,45],[84,49,79,47],[84,51,79,49],[84,52,79,50],[85,8,80,6],[85,14,80,12,"delay"],[85,19,80,17],[85,22,80,20],[85,23,80,21],[85,24,80,22,"isNaN"],[85,29,80,27],[85,30,80,28,"headerDelay"],[85,41,80,39],[85,42,80,40],[85,45,80,43,"headerDelay"],[85,56,80,54],[85,59,80,57],[85,61,80,59],[85,65,80,63],[85,69,80,67],[85,70,80,68],[85,71,80,69],[86,8,81,6],[86,12,81,10],[86,13,81,11,"categories"],[86,23,81,21],[86,25,81,23],[87,10,82,8,"updatedRateLimits"],[87,27,82,25],[87,28,82,26,"all"],[87,31,82,29],[87,34,82,32,"now"],[87,37,82,35],[87,40,82,38,"delay"],[87,45,82,43],[88,8,83,6],[88,9,83,7],[88,15,83,13],[89,10,84,8],[89,15,84,13],[89,21,84,19,"category"],[89,29,84,27],[89,33,84,31,"categories"],[89,43,84,41],[89,44,84,42,"split"],[89,49,84,47],[89,50,84,48],[89,53,84,51],[89,54,84,52],[89,56,84,54],[90,12,85,10],[90,16,85,14,"category"],[90,24,85,22],[90,29,85,27],[90,44,85,42],[90,46,85,44],[91,14,86,12],[92,14,87,12],[92,18,87,16],[92,19,87,17,"namespaces"],[92,29,87,27],[92,33,87,31,"namespaces"],[92,43,87,41],[92,44,87,42,"split"],[92,49,87,47],[92,50,87,48],[92,53,87,51],[92,54,87,52],[92,55,87,53,"includes"],[92,63,87,61],[92,64,87,62],[92,72,87,70],[92,73,87,71],[92,75,87,73],[93,16,88,14,"updatedRateLimits"],[93,33,88,31],[93,34,88,32,"category"],[93,42,88,40],[93,43,88,41],[93,46,88,44,"now"],[93,49,88,47],[93,52,88,50,"delay"],[93,57,88,55],[94,14,89,12],[95,12,90,10],[95,13,90,11],[95,19,90,17],[96,14,91,12,"updatedRateLimits"],[96,31,91,29],[96,32,91,30,"category"],[96,40,91,38],[96,41,91,39],[96,44,91,42,"now"],[96,47,91,45],[96,50,91,48,"delay"],[96,55,91,53],[97,12,92,10],[98,10,93,8],[99,8,94,6],[100,6,95,4],[101,4,96,2],[101,5,96,3],[101,11,96,9],[101,15,96,13,"retryAfterHeader"],[101,31,96,29],[101,33,96,31],[102,6,97,4,"updatedRateLimits"],[102,23,97,21],[102,24,97,22,"all"],[102,27,97,25],[102,30,97,28,"now"],[102,33,97,31],[102,36,97,34,"parseRetryAfterHeader"],[102,57,97,55],[102,58,97,56,"retryAfterHeader"],[102,74,97,72],[102,76,97,74,"now"],[102,79,97,77],[102,80,97,78],[103,4,98,2],[103,5,98,3],[103,11,98,9],[103,15,98,13,"statusCode"],[103,25,98,23],[103,30,98,28],[103,33,98,31],[103,35,98,33],[104,6,99,4,"updatedRateLimits"],[104,23,99,21],[104,24,99,22,"all"],[104,27,99,25],[104,30,99,28,"now"],[104,33,99,31],[104,36,99,34],[104,38,99,36],[104,41,99,39],[104,45,99,43],[105,4,100,2],[106,4,102,2],[106,11,102,9,"updatedRateLimits"],[106,28,102,26],[107,2,103,0],[108,0,103,1],[108,3]],"functionMap":{"names":["<global>","parseRetryAfterHeader","disabledUntil","isRateLimited","updateRateLimits"],"mappings":"AAA;ACU;CDY;AES;CFE;AGK;CHE;AIO;CJuD"}},"type":"js/module"}]}