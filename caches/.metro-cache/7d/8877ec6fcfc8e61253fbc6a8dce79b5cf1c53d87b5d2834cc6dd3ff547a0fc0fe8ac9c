{"dependencies":[{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"../utils/spanUtils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":61},"end":{"line":2,"column":72,"index":133}}],"key":"UzLeGx1bDOwqjtebNy27AzwV/PI=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":134},"end":{"line":3,"column":81,"index":215}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./envelope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":216},"end":{"line":4,"column":56,"index":272}}],"key":"0U0ajOOVGGoJhSEMGqMaN0tiYVA=","exportNames":["*"]}},{"name":"./instance.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":273},"end":{"line":5,"column":43,"index":316}}],"key":"ie2xhWeGKlSNq8uTJRpmOiu22S4=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":317},"end":{"line":6,"column":89,"index":406}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BrowserMetricsAggregator = void 0;\n  var _time = require(_dependencyMap[0], \"../utils-hoist/time.js\");\n  var _spanUtils = require(_dependencyMap[1], \"../utils/spanUtils.js\");\n  var _constants = require(_dependencyMap[2], \"./constants.js\");\n  var _envelope = require(_dependencyMap[3], \"./envelope.js\");\n  var _instance = require(_dependencyMap[4], \"./instance.js\");\n  var _utils = require(_dependencyMap[5], \"./utils.js\");\n  /**\n   * A simple metrics aggregator that aggregates metrics in memory and flushes them periodically.\n   * Default flush interval is 5 seconds.\n   *\n   * @experimental This API is experimental and might change in the future.\n   */\n  class BrowserMetricsAggregator {\n    // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n    // when the aggregator is garbage collected.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n    constructor(_client) {\n      this._client = _client;\n      this._buckets = new Map();\n      this._interval = setInterval(() => this.flush(), _constants.DEFAULT_BROWSER_FLUSH_INTERVAL);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = (0, _time.timestampInSeconds)()) {\n      const timestamp = Math.floor(maybeFloatTimestamp);\n      const name = (0, _utils.sanitizeMetricKey)(unsanitizedName);\n      const tags = (0, _utils.sanitizeTags)(unsanitizedTags);\n      const unit = (0, _utils.sanitizeUnit)(unsanitizedUnit);\n      const bucketKey = (0, _utils.getBucketKey)(metricType, name, unit, tags);\n      let bucketItem = this._buckets.get(bucketKey);\n      // If this is a set metric, we need to calculate the delta from the previous weight.\n      const previousWeight = bucketItem && metricType === _constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n      if (bucketItem) {\n        bucketItem.metric.add(value);\n        // TODO(abhi): Do we need this check?\n        if (bucketItem.timestamp < timestamp) {\n          bucketItem.timestamp = timestamp;\n        }\n      } else {\n        bucketItem = {\n          // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n          metric: new _instance.METRIC_MAP[metricType](value),\n          timestamp,\n          metricType,\n          name,\n          unit,\n          tags\n        };\n        this._buckets.set(bucketKey, bucketItem);\n      }\n\n      // If value is a string, it's a set metric so calculate the delta from the previous weight.\n      const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n      (0, _spanUtils.updateMetricSummaryOnActiveSpan)(metricType, name, val, unit, unsanitizedTags, bucketKey);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    flush() {\n      // short circuit if buckets are empty.\n      if (this._buckets.size === 0) {\n        return;\n      }\n      const metricBuckets = Array.from(this._buckets.values());\n      (0, _envelope.captureAggregateMetrics)(this._client, metricBuckets);\n      this._buckets.clear();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    close() {\n      clearInterval(this._interval);\n      this.flush();\n    }\n  }\n  exports.BrowserMetricsAggregator = BrowserMetricsAggregator;\n});","lineCount":87,"map":[[6,2,1,0],[6,6,1,0,"_time"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,2,0],[7,6,2,0,"_spanUtils"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_constants"],[8,16,3,0],[8,19,3,0,"require"],[8,26,3,0],[8,27,3,0,"_dependencyMap"],[8,41,3,0],[9,2,4,0],[9,6,4,0,"_envelope"],[9,15,4,0],[9,18,4,0,"require"],[9,25,4,0],[9,26,4,0,"_dependencyMap"],[9,40,4,0],[10,2,5,0],[10,6,5,0,"_instance"],[10,15,5,0],[10,18,5,0,"require"],[10,25,5,0],[10,26,5,0,"_dependencyMap"],[10,40,5,0],[11,2,6,0],[11,6,6,0,"_utils"],[11,12,6,0],[11,15,6,0,"require"],[11,22,6,0],[11,23,6,0,"_dependencyMap"],[11,37,6,0],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,0],[18,8,14,6,"BrowserMetricsAggregator"],[18,32,14,30],[18,33,14,32],[19,4,15,2],[20,4,16,2],[21,4,17,2],[23,4,19,3,"constructor"],[23,15,19,14,"constructor"],[23,16,19,17,"_client"],[23,23,19,24],[23,25,19,26],[24,6,19,27],[24,10,19,31],[24,11,19,32,"_client"],[24,18,19,39],[24,21,19,42,"_client"],[24,28,19,49],[25,6,20,4],[25,10,20,8],[25,11,20,9,"_buckets"],[25,19,20,17],[25,22,20,20],[25,26,20,24,"Map"],[25,29,20,27],[25,30,20,28],[25,31,20,29],[26,6,21,4],[26,10,21,8],[26,11,21,9,"_interval"],[26,20,21,18],[26,23,21,21,"setInterval"],[26,34,21,32],[26,35,21,33],[26,41,21,39],[26,45,21,43],[26,46,21,44,"flush"],[26,51,21,49],[26,52,21,50],[26,53,21,51],[26,55,21,53,"DEFAULT_BROWSER_FLUSH_INTERVAL"],[26,96,21,83],[26,97,21,84],[27,4,22,2],[29,4,24,2],[30,0,25,0],[31,0,26,0],[32,4,27,3,"add"],[32,7,27,6,"add"],[32,8,28,4,"metricType"],[32,18,28,14],[32,20,29,4,"unsanitizedName"],[32,35,29,19],[32,37,30,4,"value"],[32,42,30,9],[32,44,31,4,"unsanitizedUnit"],[32,59,31,19],[32,62,31,22],[32,68,31,28],[32,70,32,4,"unsanitizedTags"],[32,85,32,19],[32,88,32,22],[32,89,32,23],[32,90,32,24],[32,92,33,4,"maybeFloatTimestamp"],[32,111,33,23],[32,114,33,26],[32,118,33,26,"timestampInSeconds"],[32,142,33,44],[32,144,33,45],[32,145,33,46],[32,147,34,4],[33,6,35,4],[33,12,35,10,"timestamp"],[33,21,35,19],[33,24,35,22,"Math"],[33,28,35,26],[33,29,35,27,"floor"],[33,34,35,32],[33,35,35,33,"maybeFloatTimestamp"],[33,54,35,52],[33,55,35,53],[34,6,36,4],[34,12,36,10,"name"],[34,16,36,14],[34,19,36,17],[34,23,36,17,"sanitizeMetricKey"],[34,47,36,34],[34,49,36,35,"unsanitizedName"],[34,64,36,50],[34,65,36,51],[35,6,37,4],[35,12,37,10,"tags"],[35,16,37,14],[35,19,37,17],[35,23,37,17,"sanitizeTags"],[35,42,37,29],[35,44,37,30,"unsanitizedTags"],[35,59,37,45],[35,60,37,46],[36,6,38,4],[36,12,38,10,"unit"],[36,16,38,14],[36,19,38,17],[36,23,38,17,"sanitizeUnit"],[36,42,38,29],[36,44,38,30,"unsanitizedUnit"],[36,59,38,46],[36,60,38,47],[37,6,40,4],[37,12,40,10,"bucketKey"],[37,21,40,19],[37,24,40,22],[37,28,40,22,"getBucketKey"],[37,47,40,34],[37,49,40,35,"metricType"],[37,59,40,45],[37,61,40,47,"name"],[37,65,40,51],[37,67,40,53,"unit"],[37,71,40,57],[37,73,40,59,"tags"],[37,77,40,63],[37,78,40,64],[38,6,42,4],[38,10,42,8,"bucketItem"],[38,20,42,18],[38,23,42,21],[38,27,42,25],[38,28,42,26,"_buckets"],[38,36,42,34],[38,37,42,35,"get"],[38,40,42,38],[38,41,42,39,"bucketKey"],[38,50,42,48],[38,51,42,49],[39,6,43,4],[40,6,44,4],[40,12,44,10,"previousWeight"],[40,26,44,24],[40,29,44,27,"bucketItem"],[40,39,44,37],[40,43,44,41,"metricType"],[40,53,44,51],[40,58,44,56,"SET_METRIC_TYPE"],[40,84,44,71],[40,87,44,74,"bucketItem"],[40,97,44,84],[40,98,44,85,"metric"],[40,104,44,91],[40,105,44,92,"weight"],[40,111,44,98],[40,114,44,101],[40,115,44,102],[41,6,46,4],[41,10,46,8,"bucketItem"],[41,20,46,18],[41,22,46,20],[42,8,47,6,"bucketItem"],[42,18,47,16],[42,19,47,17,"metric"],[42,25,47,23],[42,26,47,24,"add"],[42,29,47,27],[42,30,47,28,"value"],[42,35,47,33],[42,36,47,34],[43,8,48,6],[44,8,49,6],[44,12,49,10,"bucketItem"],[44,22,49,20],[44,23,49,21,"timestamp"],[44,32,49,30],[44,35,49,33,"timestamp"],[44,44,49,42],[44,46,49,44],[45,10,50,8,"bucketItem"],[45,20,50,18],[45,21,50,19,"timestamp"],[45,30,50,28],[45,33,50,31,"timestamp"],[45,42,50,40],[46,8,51,6],[47,6,52,4],[47,7,52,5],[47,13,52,11],[48,8,53,6,"bucketItem"],[48,18,53,16],[48,21,53,19],[49,10,54,8],[50,10,55,8,"metric"],[50,16,55,14],[50,18,55,16],[50,22,55,20,"METRIC_MAP"],[50,42,55,30],[50,43,55,31,"metricType"],[50,53,55,41],[50,54,55,42],[50,55,55,43,"value"],[50,60,55,48],[50,61,55,49],[51,10,56,8,"timestamp"],[51,19,56,17],[52,10,57,8,"metricType"],[52,20,57,18],[53,10,58,8,"name"],[53,14,58,12],[54,10,59,8,"unit"],[54,14,59,12],[55,10,60,8,"tags"],[56,8,61,6],[56,9,61,7],[57,8,62,6],[57,12,62,10],[57,13,62,11,"_buckets"],[57,21,62,19],[57,22,62,20,"set"],[57,25,62,23],[57,26,62,24,"bucketKey"],[57,35,62,33],[57,37,62,35,"bucketItem"],[57,47,62,45],[57,48,62,46],[58,6,63,4],[60,6,65,4],[61,6,66,4],[61,12,66,10,"val"],[61,15,66,13],[61,18,66,16],[61,25,66,23,"value"],[61,30,66,28],[61,35,66,33],[61,43,66,41],[61,46,66,44,"bucketItem"],[61,56,66,54],[61,57,66,55,"metric"],[61,63,66,61],[61,64,66,62,"weight"],[61,70,66,68],[61,73,66,71,"previousWeight"],[61,87,66,85],[61,90,66,88,"value"],[61,95,66,93],[62,6,67,4],[62,10,67,4,"updateMetricSummaryOnActiveSpan"],[62,52,67,35],[62,54,67,36,"metricType"],[62,64,67,46],[62,66,67,48,"name"],[62,70,67,52],[62,72,67,54,"val"],[62,75,67,57],[62,77,67,59,"unit"],[62,81,67,63],[62,83,67,65,"unsanitizedTags"],[62,98,67,80],[62,100,67,82,"bucketKey"],[62,109,67,91],[62,110,67,92],[63,4,68,2],[65,4,70,2],[66,0,71,0],[67,0,72,0],[68,4,73,3,"flush"],[68,9,73,8,"flush"],[68,10,73,8],[68,12,73,11],[69,6,74,4],[70,6,75,4],[70,10,75,8],[70,14,75,12],[70,15,75,13,"_buckets"],[70,23,75,21],[70,24,75,22,"size"],[70,28,75,26],[70,33,75,31],[70,34,75,32],[70,36,75,34],[71,8,76,6],[72,6,77,4],[73,6,79,4],[73,12,79,10,"metricBuckets"],[73,25,79,23],[73,28,79,26,"Array"],[73,33,79,31],[73,34,79,32,"from"],[73,38,79,36],[73,39,79,37],[73,43,79,41],[73,44,79,42,"_buckets"],[73,52,79,50],[73,53,79,51,"values"],[73,59,79,57],[73,60,79,58],[73,61,79,59],[73,62,79,60],[74,6,80,4],[74,10,80,4,"captureAggregateMetrics"],[74,43,80,27],[74,45,80,28],[74,49,80,32],[74,50,80,33,"_client"],[74,57,80,40],[74,59,80,42,"metricBuckets"],[74,72,80,55],[74,73,80,56],[75,6,82,4],[75,10,82,8],[75,11,82,9,"_buckets"],[75,19,82,17],[75,20,82,18,"clear"],[75,25,82,23],[75,26,82,24],[75,27,82,25],[76,4,83,2],[78,4,85,2],[79,0,86,0],[80,0,87,0],[81,4,88,3,"close"],[81,9,88,8,"close"],[81,10,88,8],[81,12,88,11],[82,6,89,4,"clearInterval"],[82,19,89,17],[82,20,89,18],[82,24,89,22],[82,25,89,23,"_interval"],[82,34,89,32],[82,35,89,33],[83,6,90,4],[83,10,90,8],[83,11,90,9,"flush"],[83,16,90,14],[83,17,90,15],[83,18,90,16],[84,4,91,2],[85,2,92,0],[86,2,92,1,"exports"],[86,9,92,1],[86,10,92,1,"BrowserMetricsAggregator"],[86,34,92,1],[86,37,92,1,"BrowserMetricsAggregator"],[86,61,92,1],[87,0,92,1],[87,3]],"functionMap":{"names":["<global>","BrowserMetricsAggregator","BrowserMetricsAggregator#constructor","setInterval$argument_0","BrowserMetricsAggregator#add","BrowserMetricsAggregator#flush","BrowserMetricsAggregator#close"],"mappings":"AAA;ACa;GCK;iCCE,kBD;GDC;GGK;GHyC;GIK;GJU;GKK;GLG;CDC"}},"type":"js/module"}]}