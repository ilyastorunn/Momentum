{"dependencies":[{"name":"./baggage.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":69,"index":69}}],"key":"YLOHW1rZiihehep84TQ0K/MkF3E=","exportNames":["*"]}},{"name":"./propagationContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":70},"end":{"line":2,"column":74,"index":144}}],"key":"GA/devJ0cOJszQ3ERDZQ9PE5g/k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TRACEPARENT_REGEXP = void 0;\n  exports.extractTraceparentData = extractTraceparentData;\n  exports.generateSentryTraceHeader = generateSentryTraceHeader;\n  exports.propagationContextFromHeaders = propagationContextFromHeaders;\n  var _baggage = require(_dependencyMap[0], \"./baggage.js\");\n  var _propagationContext = require(_dependencyMap[1], \"./propagationContext.js\");\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\n  const TRACEPARENT_REGEXP = exports.TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n  // whitespace\n  '([0-9a-f]{32})?' +\n  // trace_id\n  '-?([0-9a-f]{16})?' +\n  // span_id\n  '-?([01])?' +\n  // sampled\n  '[ \\\\t]*$') // whitespace\n  ;\n\n  /**\n   * Extract transaction context data from a `sentry-trace` header.\n   *\n   * @param traceparent Traceparent string\n   *\n   * @returns Object containing data from the header, or undefined if traceparent string is malformed\n   */\n  function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n      return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n      return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  /**\n   * Create a propagation context from incoming headers or\n   * creates a minimal new one if the headers are undefined.\n   */\n  function propagationContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0, _baggage.baggageHeaderToDynamicSamplingContext)(baggage);\n    if (!traceparentData || !traceparentData.traceId) {\n      return {\n        traceId: (0, _propagationContext.generateTraceId)(),\n        spanId: (0, _propagationContext.generateSpanId)()\n      };\n    }\n    const {\n      traceId,\n      parentSpanId,\n      parentSampled\n    } = traceparentData;\n    const virtualSpanId = (0, _propagationContext.generateSpanId)();\n    return {\n      traceId,\n      parentSpanId,\n      spanId: virtualSpanId,\n      sampled: parentSampled,\n      dsc: dynamicSamplingContext || {} // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    };\n  }\n\n  /**\n   * Create sentry-trace header from span context values.\n   */\n  function generateSentryTraceHeader(traceId = (0, _propagationContext.generateTraceId)(), spanId = (0, _propagationContext.generateSpanId)(), sampled) {\n    let sampledString = '';\n    if (sampled !== undefined) {\n      sampledString = sampled ? '-1' : '-0';\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n  }\n});","lineCount":89,"map":[[9,2,1,0],[9,6,1,0,"_baggage"],[9,14,1,0],[9,17,1,0,"require"],[9,24,1,0],[9,25,1,0,"_dependencyMap"],[9,39,1,0],[10,2,2,0],[10,6,2,0,"_propagationContext"],[10,25,2,0],[10,28,2,0,"require"],[10,35,2,0],[10,36,2,0,"_dependencyMap"],[10,50,2,0],[11,2,4,0],[12,2,5,0],[12,8,5,6,"TRACEPARENT_REGEXP"],[12,26,5,24],[12,29,5,24,"exports"],[12,36,5,24],[12,37,5,24,"TRACEPARENT_REGEXP"],[12,55,5,24],[12,58,5,27],[12,62,5,31,"RegExp"],[12,68,5,37],[12,69,6,2],[12,79,6,12],[13,2,6,15],[14,2,7,4],[14,19,7,21],[15,2,7,24],[16,2,8,4],[16,21,8,23],[17,2,8,26],[18,2,9,4],[18,13,9,15],[19,2,9,18],[20,2,10,4],[20,12,11,0],[20,13,11,1],[20,14,10,16],[21,2,11,1],[23,2,13,0],[24,0,14,0],[25,0,15,0],[26,0,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,2,20,0],[30,11,20,9,"extractTraceparentData"],[30,33,20,31,"extractTraceparentData"],[30,34,20,32,"traceparent"],[30,45,20,43],[30,47,20,45],[31,4,21,2],[31,8,21,6],[31,9,21,7,"traceparent"],[31,20,21,18],[31,22,21,20],[32,6,22,4],[32,13,22,11,"undefined"],[32,22,22,20],[33,4,23,2],[34,4,25,2],[34,10,25,8,"matches"],[34,17,25,15],[34,20,25,18,"traceparent"],[34,31,25,29],[34,32,25,30,"match"],[34,37,25,35],[34,38,25,36,"TRACEPARENT_REGEXP"],[34,56,25,54],[34,57,25,55],[35,4,26,2],[35,8,26,6],[35,9,26,7,"matches"],[35,16,26,14],[35,18,26,16],[36,6,27,4],[36,13,27,11,"undefined"],[36,22,27,20],[37,4,28,2],[38,4,30,2],[38,8,30,6,"parentSampled"],[38,21,30,19],[39,4,31,2],[39,8,31,6,"matches"],[39,15,31,13],[39,16,31,14],[39,17,31,15],[39,18,31,16],[39,23,31,21],[39,26,31,24],[39,28,31,26],[40,6,32,4,"parentSampled"],[40,19,32,17],[40,22,32,20],[40,26,32,24],[41,4,33,2],[41,5,33,3],[41,11,33,9],[41,15,33,13,"matches"],[41,22,33,20],[41,23,33,21],[41,24,33,22],[41,25,33,23],[41,30,33,28],[41,33,33,31],[41,35,33,33],[42,6,34,4,"parentSampled"],[42,19,34,17],[42,22,34,20],[42,27,34,25],[43,4,35,2],[44,4,37,2],[44,11,37,9],[45,6,38,4,"traceId"],[45,13,38,11],[45,15,38,13,"matches"],[45,22,38,20],[45,23,38,21],[45,24,38,22],[45,25,38,23],[46,6,39,4,"parentSampled"],[46,19,39,17],[47,6,40,4,"parentSpanId"],[47,18,40,16],[47,20,40,18,"matches"],[47,27,40,25],[47,28,40,26],[47,29,40,27],[48,4,41,2],[48,5,41,3],[49,2,42,0],[51,2,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,2,48,0],[55,11,48,9,"propagationContextFromHeaders"],[55,40,48,38,"propagationContextFromHeaders"],[55,41,49,2,"sentryTrace"],[55,52,49,13],[55,54,50,2,"baggage"],[55,61,50,9],[55,63,51,2],[56,4,52,2],[56,10,52,8,"traceparentData"],[56,25,52,23],[56,28,52,26,"extractTraceparentData"],[56,50,52,48],[56,51,52,49,"sentryTrace"],[56,62,52,60],[56,63,52,61],[57,4,53,2],[57,10,53,8,"dynamicSamplingContext"],[57,32,53,30],[57,35,53,33],[57,39,53,33,"baggageHeaderToDynamicSamplingContext"],[57,85,53,70],[57,87,53,71,"baggage"],[57,94,53,78],[57,95,53,79],[58,4,55,2],[58,8,55,6],[58,9,55,7,"traceparentData"],[58,24,55,22],[58,28,55,26],[58,29,55,27,"traceparentData"],[58,44,55,42],[58,45,55,43,"traceId"],[58,52,55,50],[58,54,55,52],[59,6,56,4],[59,13,56,11],[60,8,56,13,"traceId"],[60,15,56,20],[60,17,56,22],[60,21,56,22,"generateTraceId"],[60,56,56,37],[60,58,56,38],[60,59,56,39],[61,8,56,41,"spanId"],[61,14,56,47],[61,16,56,49],[61,20,56,49,"generateSpanId"],[61,54,56,63],[61,56,56,64],[62,6,56,66],[62,7,56,67],[63,4,57,2],[64,4,59,2],[64,10,59,8],[65,6,59,10,"traceId"],[65,13,59,17],[66,6,59,19,"parentSpanId"],[66,18,59,31],[67,6,59,33,"parentSampled"],[68,4,59,47],[68,5,59,48],[68,8,59,51,"traceparentData"],[68,23,59,66],[69,4,61,2],[69,10,61,8,"virtualSpanId"],[69,23,61,21],[69,26,61,24],[69,30,61,24,"generateSpanId"],[69,64,61,38],[69,66,61,39],[69,67,61,40],[70,4,63,2],[70,11,63,9],[71,6,64,4,"traceId"],[71,13,64,11],[72,6,65,4,"parentSpanId"],[72,18,65,16],[73,6,66,4,"spanId"],[73,12,66,10],[73,14,66,12,"virtualSpanId"],[73,27,66,25],[74,6,67,4,"sampled"],[74,13,67,11],[74,15,67,13,"parentSampled"],[74,28,67,26],[75,6,68,4,"dsc"],[75,9,68,7],[75,11,68,9,"dynamicSamplingContext"],[75,33,68,31],[75,37,68,35],[75,38,68,36],[75,39,68,37],[75,40,68,39],[76,4,69,2],[76,5,69,3],[77,2,70,0],[79,2,72,0],[80,0,73,0],[81,0,74,0],[82,2,75,0],[82,11,75,9,"generateSentryTraceHeader"],[82,36,75,34,"generateSentryTraceHeader"],[82,37,76,2,"traceId"],[82,44,76,9],[82,47,76,12],[82,51,76,12,"generateTraceId"],[82,86,76,27],[82,88,76,28],[82,89,76,29],[82,91,77,2,"spanId"],[82,97,77,8],[82,100,77,11],[82,104,77,11,"generateSpanId"],[82,138,77,25],[82,140,77,26],[82,141,77,27],[82,143,78,2,"sampled"],[82,150,78,9],[82,152,79,2],[83,4,80,2],[83,8,80,6,"sampledString"],[83,21,80,19],[83,24,80,22],[83,26,80,24],[84,4,81,2],[84,8,81,6,"sampled"],[84,15,81,13],[84,20,81,18,"undefined"],[84,29,81,27],[84,31,81,29],[85,6,82,4,"sampledString"],[85,19,82,17],[85,22,82,20,"sampled"],[85,29,82,27],[85,32,82,30],[85,36,82,34],[85,39,82,37],[85,43,82,41],[86,4,83,2],[87,4,84,2],[87,11,84,9],[87,14,84,12,"traceId"],[87,21,84,19],[87,25,84,23,"spanId"],[87,31,84,29],[87,34,84,32,"sampledString"],[87,47,84,45],[87,49,84,47],[88,2,85,0],[89,0,85,1],[89,3]],"functionMap":{"names":["<global>","extractTraceparentData","propagationContextFromHeaders","generateSentryTraceHeader"],"mappings":"AAA;ACmB;CDsB;AEM;CFsB;AGK;CHU"}},"type":"js/module"}]}