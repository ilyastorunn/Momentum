{"dependencies":[{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../currentScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":53,"index":108}}],"key":"4IMzW1L9FGOQbFYVibN4P3pVG0E=","exportNames":["*"]}},{"name":"../eventProcessors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":109},"end":{"line":3,"column":62,"index":171}}],"key":"BAzWJ6CGsA+CFW2rnQht6xNf3a8=","exportNames":["*"]}},{"name":"../scope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":172},"end":{"line":4,"column":36,"index":208}}],"key":"bbqqZVE6uvJ/JsOu3l9LbJk8vzU=","exportNames":["*"]}},{"name":"../utils-hoist/debug-ids.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":209},"end":{"line":5,"column":70,"index":279}}],"key":"t5SF8wnja7OE0hUp61b3XOcG1vk=","exportNames":["*"]}},{"name":"../utils-hoist/misc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":280},"end":{"line":6,"column":70,"index":350}}],"key":"wwSfDYVKBTBksy1GF6UTQX6JR3I=","exportNames":["*"]}},{"name":"../utils-hoist/normalize.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":351},"end":{"line":7,"column":56,"index":407}}],"key":"RZ+I2iXR0yV+iK0qIO5Teki7v88=","exportNames":["*"]}},{"name":"../utils-hoist/string.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":408},"end":{"line":8,"column":52,"index":460}}],"key":"VIkBXyaUAba9sYYSM7VCyUVEn5M=","exportNames":["*"]}},{"name":"../utils-hoist/time.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":461},"end":{"line":9,"column":64,"index":525}}],"key":"Soilqp7l7+uBebnf581kpazCP78=","exportNames":["*"]}},{"name":"./applyScopeDataToEvent.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":526},"end":{"line":10,"column":83,"index":609}}],"key":"NpmZXQGmUa1ugqtqK8T5VjbrkkY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.applyClientOptions = applyClientOptions;\n  exports.applyDebugIds = applyDebugIds;\n  exports.applyDebugMeta = applyDebugMeta;\n  exports.parseEventHintOrCaptureContext = parseEventHintOrCaptureContext;\n  exports.prepareEvent = prepareEvent;\n  var _constants = require(_dependencyMap[0], \"../constants.js\");\n  var _currentScopes = require(_dependencyMap[1], \"../currentScopes.js\");\n  var _eventProcessors = require(_dependencyMap[2], \"../eventProcessors.js\");\n  var _scope = require(_dependencyMap[3], \"../scope.js\");\n  var _debugIds = require(_dependencyMap[4], \"../utils-hoist/debug-ids.js\");\n  var _misc = require(_dependencyMap[5], \"../utils-hoist/misc.js\");\n  var _normalize = require(_dependencyMap[6], \"../utils-hoist/normalize.js\");\n  var _string = require(_dependencyMap[7], \"../utils-hoist/string.js\");\n  var _time = require(_dependencyMap[8], \"../utils-hoist/time.js\");\n  var _applyScopeDataToEvent = require(_dependencyMap[9], \"./applyScopeDataToEvent.js\");\n  /**\n   * This type makes sure that we get either a CaptureContext, OR an EventHint.\n   * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n   * { user: { id: '123' }, mechanism: { handled: false } }\n   */\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   * @hidden\n   */\n  function prepareEvent(options, event, hint, scope, client, isolationScope) {\n    const {\n      normalizeDepth = 3,\n      normalizeMaxBreadth = 1000\n    } = options;\n    const prepared = {\n      ...event,\n      event_id: event.event_id || hint.event_id || (0, _misc.uuid4)(),\n      timestamp: event.timestamp || (0, _time.dateTimestampInSeconds)()\n    };\n    const integrations = hint.integrations || options.integrations.map(i => i.name);\n    applyClientOptions(prepared, options);\n    applyIntegrationsMetadata(prepared, integrations);\n    if (client) {\n      client.emit('applyFrameMetadata', event);\n    }\n\n    // Only put debug IDs onto frames for error events.\n    if (event.type === undefined) {\n      applyDebugIds(prepared, options.stackParser);\n    }\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    const finalScope = getFinalScope(scope, hint.captureContext);\n    if (hint.mechanism) {\n      (0, _misc.addExceptionMechanism)(prepared, hint.mechanism);\n    }\n    const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n    // This should be the last thing called, since we want that\n    // {@link Scope.addEventProcessor} gets the finished prepared event.\n    // Merge scope data together\n    const data = (0, _currentScopes.getGlobalScope)().getScopeData();\n    if (isolationScope) {\n      const isolationData = isolationScope.getScopeData();\n      (0, _applyScopeDataToEvent.mergeScopeData)(data, isolationData);\n    }\n    if (finalScope) {\n      const finalScopeData = finalScope.getScopeData();\n      (0, _applyScopeDataToEvent.mergeScopeData)(data, finalScopeData);\n    }\n    const attachments = [...(hint.attachments || []), ...data.attachments];\n    if (attachments.length) {\n      hint.attachments = attachments;\n    }\n    (0, _applyScopeDataToEvent.applyScopeDataToEvent)(prepared, data);\n    const eventProcessors = [...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors];\n    const result = (0, _eventProcessors.notifyEventProcessors)(eventProcessors, prepared, hint);\n    return result.then(evt => {\n      if (evt) {\n        // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n        // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n        // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n        // any new data\n        applyDebugMeta(evt);\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Enhances event using the client configuration.\n   * It takes care of all \"static\" values like environment, release and `dist`,\n   * as well as truncating overly long values.\n   *\n   * Only exported for tests.\n   *\n   * @param event event instance to be enhanced\n   */\n  function applyClientOptions(event, options) {\n    const {\n      environment,\n      release,\n      dist,\n      maxValueLength = 250\n    } = options;\n\n    // empty strings do not make sense for environment, release, and dist\n    // so we handle them the same as if they were not provided\n    event.environment = event.environment || environment || _constants.DEFAULT_ENVIRONMENT;\n    if (!event.release && release) {\n      event.release = release;\n    }\n    if (!event.dist && dist) {\n      event.dist = dist;\n    }\n    if (event.message) {\n      event.message = (0, _string.truncate)(event.message, maxValueLength);\n    }\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = (0, _string.truncate)(exception.value, maxValueLength);\n    }\n    const request = event.request;\n    if (request && request.url) {\n      request.url = (0, _string.truncate)(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * Puts debug IDs into the stack frames of an error event.\n   */\n  function applyDebugIds(event, stackParser) {\n    // Build a map of filename -> debug_id\n    const filenameDebugIdMap = (0, _debugIds.getFilenameToDebugIdMap)(stackParser);\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values.forEach(exception => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        exception.stacktrace.frames.forEach(frame => {\n          if (filenameDebugIdMap && frame.filename) {\n            frame.debug_id = filenameDebugIdMap[frame.filename];\n          }\n        });\n      });\n    } catch (e) {\n      // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n  }\n\n  /**\n   * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n   */\n  function applyDebugMeta(event) {\n    // Extract debug IDs and filenames from the stack frames on the event.\n    const filenameDebugIdMap = {};\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values.forEach(exception => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        exception.stacktrace.frames.forEach(frame => {\n          if (frame.debug_id) {\n            if (frame.abs_path) {\n              filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n            } else if (frame.filename) {\n              filenameDebugIdMap[frame.filename] = frame.debug_id;\n            }\n            delete frame.debug_id;\n          }\n        });\n      });\n    } catch (e) {\n      // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n    if (Object.keys(filenameDebugIdMap).length === 0) {\n      return;\n    }\n\n    // Fill debug_meta information\n    event.debug_meta = event.debug_meta || {};\n    event.debug_meta.images = event.debug_meta.images || [];\n    const images = event.debug_meta.images;\n    Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n      images.push({\n        type: 'sourcemap',\n        code_file: filename,\n        debug_id\n      });\n    });\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  function applyIntegrationsMetadata(event, integrationNames) {\n    if (integrationNames.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n    }\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  function normalizeEvent(event, depth, maxBreadth) {\n    if (!event) {\n      return null;\n    }\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: (0, _normalize.normalize)(b.data, depth, maxBreadth)\n          })\n        }))\n      }),\n      ...(event.user && {\n        user: (0, _normalize.normalize)(event.user, depth, maxBreadth)\n      }),\n      ...(event.contexts && {\n        contexts: (0, _normalize.normalize)(event.contexts, depth, maxBreadth)\n      }),\n      ...(event.extra && {\n        extra: (0, _normalize.normalize)(event.extra, depth, maxBreadth)\n      })\n    };\n\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n      normalized.contexts.trace = event.contexts.trace;\n\n      // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n      if (event.contexts.trace.data) {\n        normalized.contexts.trace.data = (0, _normalize.normalize)(event.contexts.trace.data, depth, maxBreadth);\n      }\n    }\n\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n      normalized.spans = event.spans.map(span => {\n        return {\n          ...span,\n          ...(span.data && {\n            data: (0, _normalize.normalize)(span.data, depth, maxBreadth)\n          })\n        };\n      });\n    }\n\n    // event.contexts.flags (FeatureFlagContext) stores context for our feature\n    // flag integrations. It has a greater nesting depth than our other typed\n    // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n    // to skip this in case of conflicting, user-provided context.\n    if (event.contexts && event.contexts.flags && normalized.contexts) {\n      normalized.contexts.flags = (0, _normalize.normalize)(event.contexts.flags, 3, maxBreadth);\n    }\n    return normalized;\n  }\n  function getFinalScope(scope, captureContext) {\n    if (!captureContext) {\n      return scope;\n    }\n    const finalScope = scope ? scope.clone() : new _scope.Scope();\n    finalScope.update(captureContext);\n    return finalScope;\n  }\n\n  /**\n   * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n   * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n   */\n  function parseEventHintOrCaptureContext(hint) {\n    if (!hint) {\n      return undefined;\n    }\n\n    // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n    if (hintIsScopeOrFunction(hint)) {\n      return {\n        captureContext: hint\n      };\n    }\n    if (hintIsScopeContext(hint)) {\n      return {\n        captureContext: hint\n      };\n    }\n    return hint;\n  }\n  function hintIsScopeOrFunction(hint) {\n    return hint instanceof _scope.Scope || typeof hint === 'function';\n  }\n  const captureContextKeys = ['user', 'level', 'extra', 'contexts', 'tags', 'fingerprint', 'requestSession', 'propagationContext'];\n  function hintIsScopeContext(hint) {\n    return Object.keys(hint).some(key => captureContextKeys.includes(key));\n  }\n});","lineCount":329,"map":[[10,2,1,0],[10,6,1,0,"_constants"],[10,16,1,0],[10,19,1,0,"require"],[10,26,1,0],[10,27,1,0,"_dependencyMap"],[10,41,1,0],[11,2,2,0],[11,6,2,0,"_currentScopes"],[11,20,2,0],[11,23,2,0,"require"],[11,30,2,0],[11,31,2,0,"_dependencyMap"],[11,45,2,0],[12,2,3,0],[12,6,3,0,"_eventProcessors"],[12,22,3,0],[12,25,3,0,"require"],[12,32,3,0],[12,33,3,0,"_dependencyMap"],[12,47,3,0],[13,2,4,0],[13,6,4,0,"_scope"],[13,12,4,0],[13,15,4,0,"require"],[13,22,4,0],[13,23,4,0,"_dependencyMap"],[13,37,4,0],[14,2,5,0],[14,6,5,0,"_debugIds"],[14,15,5,0],[14,18,5,0,"require"],[14,25,5,0],[14,26,5,0,"_dependencyMap"],[14,40,5,0],[15,2,6,0],[15,6,6,0,"_misc"],[15,11,6,0],[15,14,6,0,"require"],[15,21,6,0],[15,22,6,0,"_dependencyMap"],[15,36,6,0],[16,2,7,0],[16,6,7,0,"_normalize"],[16,16,7,0],[16,19,7,0,"require"],[16,26,7,0],[16,27,7,0,"_dependencyMap"],[16,41,7,0],[17,2,8,0],[17,6,8,0,"_string"],[17,13,8,0],[17,16,8,0,"require"],[17,23,8,0],[17,24,8,0,"_dependencyMap"],[17,38,8,0],[18,2,9,0],[18,6,9,0,"_time"],[18,11,9,0],[18,14,9,0,"require"],[18,21,9,0],[18,22,9,0,"_dependencyMap"],[18,36,9,0],[19,2,10,0],[19,6,10,0,"_applyScopeDataToEvent"],[19,28,10,0],[19,31,10,0,"require"],[19,38,10,0],[19,39,10,0,"_dependencyMap"],[19,53,10,0],[20,2,12,0],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,0,16,0],[26,2,18,0],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,0,31,0],[40,0,32,0],[41,2,33,0],[41,11,33,9,"prepareEvent"],[41,23,33,21,"prepareEvent"],[41,24,34,2,"options"],[41,31,34,9],[41,33,35,2,"event"],[41,38,35,7],[41,40,36,2,"hint"],[41,44,36,6],[41,46,37,2,"scope"],[41,51,37,7],[41,53,38,2,"client"],[41,59,38,8],[41,61,39,2,"isolationScope"],[41,75,39,16],[41,77,40,2],[42,4,41,2],[42,10,41,8],[43,6,41,10,"normalizeDepth"],[43,20,41,24],[43,23,41,27],[43,24,41,28],[44,6,41,30,"normalizeMaxBreadth"],[44,25,41,49],[44,28,41,52],[45,4,41,57],[45,5,41,58],[45,8,41,61,"options"],[45,15,41,68],[46,4,42,2],[46,10,42,8,"prepared"],[46,18,42,16],[46,21,42,19],[47,6,43,4],[47,9,43,7,"event"],[47,14,43,12],[48,6,44,4,"event_id"],[48,14,44,12],[48,16,44,14,"event"],[48,21,44,19],[48,22,44,20,"event_id"],[48,30,44,28],[48,34,44,32,"hint"],[48,38,44,36],[48,39,44,37,"event_id"],[48,47,44,45],[48,51,44,49],[48,55,44,49,"uuid4"],[48,66,44,54],[48,68,44,55],[48,69,44,56],[49,6,45,4,"timestamp"],[49,15,45,13],[49,17,45,15,"event"],[49,22,45,20],[49,23,45,21,"timestamp"],[49,32,45,30],[49,36,45,34],[49,40,45,34,"dateTimestampInSeconds"],[49,68,45,56],[49,70,45,57],[50,4,46,2],[50,5,46,3],[51,4,47,2],[51,10,47,8,"integrations"],[51,22,47,20],[51,25,47,23,"hint"],[51,29,47,27],[51,30,47,28,"integrations"],[51,42,47,40],[51,46,47,44,"options"],[51,53,47,51],[51,54,47,52,"integrations"],[51,66,47,64],[51,67,47,65,"map"],[51,70,47,68],[51,71,47,69,"i"],[51,72,47,70],[51,76,47,74,"i"],[51,77,47,75],[51,78,47,76,"name"],[51,82,47,80],[51,83,47,81],[52,4,49,2,"applyClientOptions"],[52,22,49,20],[52,23,49,21,"prepared"],[52,31,49,29],[52,33,49,31,"options"],[52,40,49,38],[52,41,49,39],[53,4,50,2,"applyIntegrationsMetadata"],[53,29,50,27],[53,30,50,28,"prepared"],[53,38,50,36],[53,40,50,38,"integrations"],[53,52,50,50],[53,53,50,51],[54,4,52,2],[54,8,52,6,"client"],[54,14,52,12],[54,16,52,14],[55,6,53,4,"client"],[55,12,53,10],[55,13,53,11,"emit"],[55,17,53,15],[55,18,53,16],[55,38,53,36],[55,40,53,38,"event"],[55,45,53,43],[55,46,53,44],[56,4,54,2],[58,4,56,2],[59,4,57,2],[59,8,57,6,"event"],[59,13,57,11],[59,14,57,12,"type"],[59,18,57,16],[59,23,57,21,"undefined"],[59,32,57,30],[59,34,57,32],[60,6,58,4,"applyDebugIds"],[60,19,58,17],[60,20,58,18,"prepared"],[60,28,58,26],[60,30,58,28,"options"],[60,37,58,35],[60,38,58,36,"stackParser"],[60,49,58,47],[60,50,58,48],[61,4,59,2],[63,4,61,2],[64,4,62,2],[65,4,63,2],[65,10,63,8,"finalScope"],[65,20,63,18],[65,23,63,21,"getFinalScope"],[65,36,63,34],[65,37,63,35,"scope"],[65,42,63,40],[65,44,63,42,"hint"],[65,48,63,46],[65,49,63,47,"captureContext"],[65,63,63,61],[65,64,63,62],[66,4,65,2],[66,8,65,6,"hint"],[66,12,65,10],[66,13,65,11,"mechanism"],[66,22,65,20],[66,24,65,22],[67,6,66,4],[67,10,66,4,"addExceptionMechanism"],[67,37,66,25],[67,39,66,26,"prepared"],[67,47,66,34],[67,49,66,36,"hint"],[67,53,66,40],[67,54,66,41,"mechanism"],[67,63,66,50],[67,64,66,51],[68,4,67,2],[69,4,69,2],[69,10,69,8,"clientEventProcessors"],[69,31,69,29],[69,34,69,32,"client"],[69,40,69,38],[69,43,69,41,"client"],[69,49,69,47],[69,50,69,48,"getEventProcessors"],[69,68,69,66],[69,69,69,67],[69,70,69,68],[69,73,69,71],[69,75,69,73],[71,4,71,2],[72,4,72,2],[73,4,73,2],[74,4,74,2],[74,10,74,8,"data"],[74,14,74,12],[74,17,74,15],[74,21,74,15,"getGlobalScope"],[74,50,74,29],[74,52,74,30],[74,53,74,31],[74,54,74,32,"getScopeData"],[74,66,74,44],[74,67,74,45],[74,68,74,46],[75,4,76,2],[75,8,76,6,"isolationScope"],[75,22,76,20],[75,24,76,22],[76,6,77,4],[76,12,77,10,"isolationData"],[76,25,77,23],[76,28,77,26,"isolationScope"],[76,42,77,40],[76,43,77,41,"getScopeData"],[76,55,77,53],[76,56,77,54],[76,57,77,55],[77,6,78,4],[77,10,78,4,"mergeScopeData"],[77,47,78,18],[77,49,78,19,"data"],[77,53,78,23],[77,55,78,25,"isolationData"],[77,68,78,38],[77,69,78,39],[78,4,79,2],[79,4,81,2],[79,8,81,6,"finalScope"],[79,18,81,16],[79,20,81,18],[80,6,82,4],[80,12,82,10,"finalScopeData"],[80,26,82,24],[80,29,82,27,"finalScope"],[80,39,82,37],[80,40,82,38,"getScopeData"],[80,52,82,50],[80,53,82,51],[80,54,82,52],[81,6,83,4],[81,10,83,4,"mergeScopeData"],[81,47,83,18],[81,49,83,19,"data"],[81,53,83,23],[81,55,83,25,"finalScopeData"],[81,69,83,39],[81,70,83,40],[82,4,84,2],[83,4,86,2],[83,10,86,8,"attachments"],[83,21,86,19],[83,24,86,22],[83,25,86,23],[83,29,86,27,"hint"],[83,33,86,31],[83,34,86,32,"attachments"],[83,45,86,43],[83,49,86,47],[83,51,86,49],[83,52,86,50],[83,54,86,52],[83,57,86,55,"data"],[83,61,86,59],[83,62,86,60,"attachments"],[83,73,86,71],[83,74,86,72],[84,4,87,2],[84,8,87,6,"attachments"],[84,19,87,17],[84,20,87,18,"length"],[84,26,87,24],[84,28,87,26],[85,6,88,4,"hint"],[85,10,88,8],[85,11,88,9,"attachments"],[85,22,88,20],[85,25,88,23,"attachments"],[85,36,88,34],[86,4,89,2],[87,4,91,2],[87,8,91,2,"applyScopeDataToEvent"],[87,52,91,23],[87,54,91,24,"prepared"],[87,62,91,32],[87,64,91,34,"data"],[87,68,91,38],[87,69,91,39],[88,4,93,2],[88,10,93,8,"eventProcessors"],[88,25,93,23],[88,28,93,26],[88,29,94,4],[88,32,94,7,"clientEventProcessors"],[88,53,94,28],[89,4,95,4],[90,4,96,4],[90,7,96,7,"data"],[90,11,96,11],[90,12,96,12,"eventProcessors"],[90,27,96,27],[90,28,97,3],[91,4,99,2],[91,10,99,8,"result"],[91,16,99,14],[91,19,99,17],[91,23,99,17,"notifyEventProcessors"],[91,61,99,38],[91,63,99,39,"eventProcessors"],[91,78,99,54],[91,80,99,56,"prepared"],[91,88,99,64],[91,90,99,66,"hint"],[91,94,99,70],[91,95,99,71],[92,4,101,2],[92,11,101,9,"result"],[92,17,101,15],[92,18,101,16,"then"],[92,22,101,20],[92,23,101,21,"evt"],[92,26,101,24],[92,30,101,28],[93,6,102,4],[93,10,102,8,"evt"],[93,13,102,11],[93,15,102,13],[94,8,103,6],[95,8,104,6],[96,8,105,6],[97,8,106,6],[98,8,107,6,"applyDebugMeta"],[98,22,107,20],[98,23,107,21,"evt"],[98,26,107,24],[98,27,107,25],[99,6,108,4],[100,6,110,4],[100,10,110,8],[100,17,110,15,"normalizeDepth"],[100,31,110,29],[100,36,110,34],[100,44,110,42],[100,48,110,46,"normalizeDepth"],[100,62,110,60],[100,65,110,63],[100,66,110,64],[100,68,110,66],[101,8,111,6],[101,15,111,13,"normalizeEvent"],[101,29,111,27],[101,30,111,28,"evt"],[101,33,111,31],[101,35,111,33,"normalizeDepth"],[101,49,111,47],[101,51,111,49,"normalizeMaxBreadth"],[101,70,111,68],[101,71,111,69],[102,6,112,4],[103,6,113,4],[103,13,113,11,"evt"],[103,16,113,14],[104,4,114,2],[104,5,114,3],[104,6,114,4],[105,2,115,0],[107,2,117,0],[108,0,118,0],[109,0,119,0],[110,0,120,0],[111,0,121,0],[112,0,122,0],[113,0,123,0],[114,0,124,0],[115,0,125,0],[116,2,126,0],[116,11,126,9,"applyClientOptions"],[116,29,126,27,"applyClientOptions"],[116,30,126,28,"event"],[116,35,126,33],[116,37,126,35,"options"],[116,44,126,42],[116,46,126,44],[117,4,127,2],[117,10,127,8],[118,6,127,10,"environment"],[118,17,127,21],[119,6,127,23,"release"],[119,13,127,30],[120,6,127,32,"dist"],[120,10,127,36],[121,6,127,38,"maxValueLength"],[121,20,127,52],[121,23,127,55],[122,4,127,59],[122,5,127,60],[122,8,127,63,"options"],[122,15,127,70],[124,4,129,2],[125,4,130,2],[126,4,131,2,"event"],[126,9,131,7],[126,10,131,8,"environment"],[126,21,131,19],[126,24,131,22,"event"],[126,29,131,27],[126,30,131,28,"environment"],[126,41,131,39],[126,45,131,43,"environment"],[126,56,131,54],[126,60,131,58,"DEFAULT_ENVIRONMENT"],[126,90,131,77],[127,4,133,2],[127,8,133,6],[127,9,133,7,"event"],[127,14,133,12],[127,15,133,13,"release"],[127,22,133,20],[127,26,133,24,"release"],[127,33,133,31],[127,35,133,33],[128,6,134,4,"event"],[128,11,134,9],[128,12,134,10,"release"],[128,19,134,17],[128,22,134,20,"release"],[128,29,134,27],[129,4,135,2],[130,4,137,2],[130,8,137,6],[130,9,137,7,"event"],[130,14,137,12],[130,15,137,13,"dist"],[130,19,137,17],[130,23,137,21,"dist"],[130,27,137,25],[130,29,137,27],[131,6,138,4,"event"],[131,11,138,9],[131,12,138,10,"dist"],[131,16,138,14],[131,19,138,17,"dist"],[131,23,138,21],[132,4,139,2],[133,4,141,2],[133,8,141,6,"event"],[133,13,141,11],[133,14,141,12,"message"],[133,21,141,19],[133,23,141,21],[134,6,142,4,"event"],[134,11,142,9],[134,12,142,10,"message"],[134,19,142,17],[134,22,142,20],[134,26,142,20,"truncate"],[134,42,142,28],[134,44,142,29,"event"],[134,49,142,34],[134,50,142,35,"message"],[134,57,142,42],[134,59,142,44,"maxValueLength"],[134,73,142,58],[134,74,142,59],[135,4,143,2],[136,4,145,2],[136,10,145,8,"exception"],[136,19,145,17],[136,22,145,20,"event"],[136,27,145,25],[136,28,145,26,"exception"],[136,37,145,35],[136,41,145,39,"event"],[136,46,145,44],[136,47,145,45,"exception"],[136,56,145,54],[136,57,145,55,"values"],[136,63,145,61],[136,67,145,65,"event"],[136,72,145,70],[136,73,145,71,"exception"],[136,82,145,80],[136,83,145,81,"values"],[136,89,145,87],[136,90,145,88],[136,91,145,89],[136,92,145,90],[137,4,146,2],[137,8,146,6,"exception"],[137,17,146,15],[137,21,146,19,"exception"],[137,30,146,28],[137,31,146,29,"value"],[137,36,146,34],[137,38,146,36],[138,6,147,4,"exception"],[138,15,147,13],[138,16,147,14,"value"],[138,21,147,19],[138,24,147,22],[138,28,147,22,"truncate"],[138,44,147,30],[138,46,147,31,"exception"],[138,55,147,40],[138,56,147,41,"value"],[138,61,147,46],[138,63,147,48,"maxValueLength"],[138,77,147,62],[138,78,147,63],[139,4,148,2],[140,4,150,2],[140,10,150,8,"request"],[140,17,150,15],[140,20,150,18,"event"],[140,25,150,23],[140,26,150,24,"request"],[140,33,150,31],[141,4,151,2],[141,8,151,6,"request"],[141,15,151,13],[141,19,151,17,"request"],[141,26,151,24],[141,27,151,25,"url"],[141,30,151,28],[141,32,151,30],[142,6,152,4,"request"],[142,13,152,11],[142,14,152,12,"url"],[142,17,152,15],[142,20,152,18],[142,24,152,18,"truncate"],[142,40,152,26],[142,42,152,27,"request"],[142,49,152,34],[142,50,152,35,"url"],[142,53,152,38],[142,55,152,40,"maxValueLength"],[142,69,152,54],[142,70,152,55],[143,4,153,2],[144,2,154,0],[146,2,156,0],[147,0,157,0],[148,0,158,0],[149,2,159,0],[149,11,159,9,"applyDebugIds"],[149,24,159,22,"applyDebugIds"],[149,25,159,23,"event"],[149,30,159,28],[149,32,159,30,"stackParser"],[149,43,159,41],[149,45,159,43],[150,4,160,2],[151,4,161,2],[151,10,161,8,"filenameDebugIdMap"],[151,28,161,26],[151,31,161,29],[151,35,161,29,"getFilenameToDebugIdMap"],[151,68,161,52],[151,70,161,53,"stackParser"],[151,81,161,64],[151,82,161,65],[152,4,163,2],[152,8,163,6],[153,6,164,4],[154,6,165,4,"event"],[154,11,165,9],[154,12,165,10,"exception"],[154,21,165,19],[154,22,165,20,"values"],[154,28,165,26],[154,29,165,27,"forEach"],[154,36,165,34],[154,37,165,35,"exception"],[154,46,165,44],[154,50,165,48],[155,8,166,6],[156,8,167,6,"exception"],[156,17,167,15],[156,18,167,16,"stacktrace"],[156,28,167,26],[156,29,167,27,"frames"],[156,35,167,33],[156,36,167,34,"forEach"],[156,43,167,41],[156,44,167,42,"frame"],[156,49,167,47],[156,53,167,51],[157,10,168,8],[157,14,168,12,"filenameDebugIdMap"],[157,32,168,30],[157,36,168,34,"frame"],[157,41,168,39],[157,42,168,40,"filename"],[157,50,168,48],[157,52,168,50],[158,12,169,10,"frame"],[158,17,169,15],[158,18,169,16,"debug_id"],[158,26,169,24],[158,29,169,27,"filenameDebugIdMap"],[158,47,169,45],[158,48,169,46,"frame"],[158,53,169,51],[158,54,169,52,"filename"],[158,62,169,60],[158,63,169,61],[159,10,170,8],[160,8,171,6],[160,9,171,7],[160,10,171,8],[161,6,172,4],[161,7,172,5],[161,8,172,6],[162,4,173,2],[162,5,173,3],[162,6,173,4],[162,13,173,11,"e"],[162,14,173,12],[162,16,173,14],[163,6,174,4],[164,4,174,4],[165,2,176,0],[167,2,178,0],[168,0,179,0],[169,0,180,0],[170,2,181,0],[170,11,181,9,"applyDebugMeta"],[170,25,181,23,"applyDebugMeta"],[170,26,181,24,"event"],[170,31,181,29],[170,33,181,31],[171,4,182,2],[172,4,183,2],[172,10,183,8,"filenameDebugIdMap"],[172,28,183,26],[172,31,183,29],[172,32,183,30],[172,33,183,31],[173,4,184,2],[173,8,184,6],[174,6,185,4],[175,6,186,4,"event"],[175,11,186,9],[175,12,186,10,"exception"],[175,21,186,19],[175,22,186,20,"values"],[175,28,186,26],[175,29,186,27,"forEach"],[175,36,186,34],[175,37,186,35,"exception"],[175,46,186,44],[175,50,186,48],[176,8,187,6],[177,8,188,6,"exception"],[177,17,188,15],[177,18,188,16,"stacktrace"],[177,28,188,26],[177,29,188,27,"frames"],[177,35,188,33],[177,36,188,34,"forEach"],[177,43,188,41],[177,44,188,42,"frame"],[177,49,188,47],[177,53,188,51],[178,10,189,8],[178,14,189,12,"frame"],[178,19,189,17],[178,20,189,18,"debug_id"],[178,28,189,26],[178,30,189,28],[179,12,190,10],[179,16,190,14,"frame"],[179,21,190,19],[179,22,190,20,"abs_path"],[179,30,190,28],[179,32,190,30],[180,14,191,12,"filenameDebugIdMap"],[180,32,191,30],[180,33,191,31,"frame"],[180,38,191,36],[180,39,191,37,"abs_path"],[180,47,191,45],[180,48,191,46],[180,51,191,49,"frame"],[180,56,191,54],[180,57,191,55,"debug_id"],[180,65,191,63],[181,12,192,10],[181,13,192,11],[181,19,192,17],[181,23,192,21,"frame"],[181,28,192,26],[181,29,192,27,"filename"],[181,37,192,35],[181,39,192,37],[182,14,193,12,"filenameDebugIdMap"],[182,32,193,30],[182,33,193,31,"frame"],[182,38,193,36],[182,39,193,37,"filename"],[182,47,193,45],[182,48,193,46],[182,51,193,49,"frame"],[182,56,193,54],[182,57,193,55,"debug_id"],[182,65,193,63],[183,12,194,10],[184,12,195,10],[184,19,195,17,"frame"],[184,24,195,22],[184,25,195,23,"debug_id"],[184,33,195,31],[185,10,196,8],[186,8,197,6],[186,9,197,7],[186,10,197,8],[187,6,198,4],[187,7,198,5],[187,8,198,6],[188,4,199,2],[188,5,199,3],[188,6,199,4],[188,13,199,11,"e"],[188,14,199,12],[188,16,199,14],[189,6,200,4],[190,4,200,4],[191,4,203,2],[191,8,203,6,"Object"],[191,14,203,12],[191,15,203,13,"keys"],[191,19,203,17],[191,20,203,18,"filenameDebugIdMap"],[191,38,203,36],[191,39,203,37],[191,40,203,38,"length"],[191,46,203,44],[191,51,203,49],[191,52,203,50],[191,54,203,52],[192,6,204,4],[193,4,205,2],[195,4,207,2],[196,4,208,2,"event"],[196,9,208,7],[196,10,208,8,"debug_meta"],[196,20,208,18],[196,23,208,21,"event"],[196,28,208,26],[196,29,208,27,"debug_meta"],[196,39,208,37],[196,43,208,41],[196,44,208,42],[196,45,208,43],[197,4,209,2,"event"],[197,9,209,7],[197,10,209,8,"debug_meta"],[197,20,209,18],[197,21,209,19,"images"],[197,27,209,25],[197,30,209,28,"event"],[197,35,209,33],[197,36,209,34,"debug_meta"],[197,46,209,44],[197,47,209,45,"images"],[197,53,209,51],[197,57,209,55],[197,59,209,57],[198,4,210,2],[198,10,210,8,"images"],[198,16,210,14],[198,19,210,17,"event"],[198,24,210,22],[198,25,210,23,"debug_meta"],[198,35,210,33],[198,36,210,34,"images"],[198,42,210,40],[199,4,211,2,"Object"],[199,10,211,8],[199,11,211,9,"entries"],[199,18,211,16],[199,19,211,17,"filenameDebugIdMap"],[199,37,211,35],[199,38,211,36],[199,39,211,37,"forEach"],[199,46,211,44],[199,47,211,45],[199,48,211,46],[199,49,211,47,"filename"],[199,57,211,55],[199,59,211,57,"debug_id"],[199,67,211,65],[199,68,211,66],[199,73,211,71],[200,6,212,4,"images"],[200,12,212,10],[200,13,212,11,"push"],[200,17,212,15],[200,18,212,16],[201,8,213,6,"type"],[201,12,213,10],[201,14,213,12],[201,25,213,23],[202,8,214,6,"code_file"],[202,17,214,15],[202,19,214,17,"filename"],[202,27,214,25],[203,8,215,6,"debug_id"],[204,6,216,4],[204,7,216,5],[204,8,216,6],[205,4,217,2],[205,5,217,3],[205,6,217,4],[206,2,218,0],[208,2,220,0],[209,0,221,0],[210,0,222,0],[211,0,223,0],[212,2,224,0],[212,11,224,9,"applyIntegrationsMetadata"],[212,36,224,34,"applyIntegrationsMetadata"],[212,37,224,35,"event"],[212,42,224,40],[212,44,224,42,"integrationNames"],[212,60,224,58],[212,62,224,60],[213,4,225,2],[213,8,225,6,"integrationNames"],[213,24,225,22],[213,25,225,23,"length"],[213,31,225,29],[213,34,225,32],[213,35,225,33],[213,37,225,35],[214,6,226,4,"event"],[214,11,226,9],[214,12,226,10,"sdk"],[214,15,226,13],[214,18,226,16,"event"],[214,23,226,21],[214,24,226,22,"sdk"],[214,27,226,25],[214,31,226,29],[214,32,226,30],[214,33,226,31],[215,6,227,4,"event"],[215,11,227,9],[215,12,227,10,"sdk"],[215,15,227,13],[215,16,227,14,"integrations"],[215,28,227,26],[215,31,227,29],[215,32,227,30],[215,36,227,34,"event"],[215,41,227,39],[215,42,227,40,"sdk"],[215,45,227,43],[215,46,227,44,"integrations"],[215,58,227,56],[215,62,227,60],[215,64,227,62],[215,65,227,63],[215,67,227,65],[215,70,227,68,"integrationNames"],[215,86,227,84],[215,87,227,85],[216,4,228,2],[217,2,229,0],[219,2,231,0],[220,0,232,0],[221,0,233,0],[222,0,234,0],[223,0,235,0],[224,0,236,0],[225,0,237,0],[226,0,238,0],[227,0,239,0],[228,0,240,0],[229,2,241,0],[229,11,241,9,"normalizeEvent"],[229,25,241,23,"normalizeEvent"],[229,26,241,24,"event"],[229,31,241,29],[229,33,241,31,"depth"],[229,38,241,36],[229,40,241,38,"maxBreadth"],[229,50,241,48],[229,52,241,50],[230,4,242,2],[230,8,242,6],[230,9,242,7,"event"],[230,14,242,12],[230,16,242,14],[231,6,243,4],[231,13,243,11],[231,17,243,15],[232,4,244,2],[233,4,246,2],[233,10,246,8,"normalized"],[233,20,246,18],[233,23,246,21],[234,6,247,4],[234,9,247,7,"event"],[234,14,247,12],[235,6,248,4],[235,10,248,8,"event"],[235,15,248,13],[235,16,248,14,"breadcrumbs"],[235,27,248,25],[235,31,248,29],[236,8,249,6,"breadcrumbs"],[236,19,249,17],[236,21,249,19,"event"],[236,26,249,24],[236,27,249,25,"breadcrumbs"],[236,38,249,36],[236,39,249,37,"map"],[236,42,249,40],[236,43,249,41,"b"],[236,44,249,42],[236,49,249,47],[237,10,250,8],[237,13,250,11,"b"],[237,14,250,12],[238,10,251,8],[238,14,251,12,"b"],[238,15,251,13],[238,16,251,14,"data"],[238,20,251,18],[238,24,251,22],[239,12,252,10,"data"],[239,16,252,14],[239,18,252,16],[239,22,252,16,"normalize"],[239,42,252,25],[239,44,252,26,"b"],[239,45,252,27],[239,46,252,28,"data"],[239,50,252,32],[239,52,252,34,"depth"],[239,57,252,39],[239,59,252,41,"maxBreadth"],[239,69,252,51],[240,10,253,8],[240,11,253,9],[241,8,254,6],[241,9,254,7],[241,10,254,8],[242,6,255,4],[242,7,255,5],[242,8,255,6],[243,6,256,4],[243,10,256,8,"event"],[243,15,256,13],[243,16,256,14,"user"],[243,20,256,18],[243,24,256,22],[244,8,257,6,"user"],[244,12,257,10],[244,14,257,12],[244,18,257,12,"normalize"],[244,38,257,21],[244,40,257,22,"event"],[244,45,257,27],[244,46,257,28,"user"],[244,50,257,32],[244,52,257,34,"depth"],[244,57,257,39],[244,59,257,41,"maxBreadth"],[244,69,257,51],[245,6,258,4],[245,7,258,5],[245,8,258,6],[246,6,259,4],[246,10,259,8,"event"],[246,15,259,13],[246,16,259,14,"contexts"],[246,24,259,22],[246,28,259,26],[247,8,260,6,"contexts"],[247,16,260,14],[247,18,260,16],[247,22,260,16,"normalize"],[247,42,260,25],[247,44,260,26,"event"],[247,49,260,31],[247,50,260,32,"contexts"],[247,58,260,40],[247,60,260,42,"depth"],[247,65,260,47],[247,67,260,49,"maxBreadth"],[247,77,260,59],[248,6,261,4],[248,7,261,5],[248,8,261,6],[249,6,262,4],[249,10,262,8,"event"],[249,15,262,13],[249,16,262,14,"extra"],[249,21,262,19],[249,25,262,23],[250,8,263,6,"extra"],[250,13,263,11],[250,15,263,13],[250,19,263,13,"normalize"],[250,39,263,22],[250,41,263,23,"event"],[250,46,263,28],[250,47,263,29,"extra"],[250,52,263,34],[250,54,263,36,"depth"],[250,59,263,41],[250,61,263,43,"maxBreadth"],[250,71,263,53],[251,6,264,4],[251,7,264,5],[252,4,265,2],[252,5,265,3],[254,4,267,2],[255,4,268,2],[256,4,269,2],[257,4,270,2],[258,4,271,2],[259,4,272,2],[260,4,273,2],[261,4,274,2],[261,8,274,6,"event"],[261,13,274,11],[261,14,274,12,"contexts"],[261,22,274,20],[261,26,274,24,"event"],[261,31,274,29],[261,32,274,30,"contexts"],[261,40,274,38],[261,41,274,39,"trace"],[261,46,274,44],[261,50,274,48,"normalized"],[261,60,274,58],[261,61,274,59,"contexts"],[261,69,274,67],[261,71,274,69],[262,6,275,4,"normalized"],[262,16,275,14],[262,17,275,15,"contexts"],[262,25,275,23],[262,26,275,24,"trace"],[262,31,275,29],[262,34,275,32,"event"],[262,39,275,37],[262,40,275,38,"contexts"],[262,48,275,46],[262,49,275,47,"trace"],[262,54,275,52],[264,6,277,4],[265,6,278,4],[265,10,278,8,"event"],[265,15,278,13],[265,16,278,14,"contexts"],[265,24,278,22],[265,25,278,23,"trace"],[265,30,278,28],[265,31,278,29,"data"],[265,35,278,33],[265,37,278,35],[266,8,279,6,"normalized"],[266,18,279,16],[266,19,279,17,"contexts"],[266,27,279,25],[266,28,279,26,"trace"],[266,33,279,31],[266,34,279,32,"data"],[266,38,279,36],[266,41,279,39],[266,45,279,39,"normalize"],[266,65,279,48],[266,67,279,49,"event"],[266,72,279,54],[266,73,279,55,"contexts"],[266,81,279,63],[266,82,279,64,"trace"],[266,87,279,69],[266,88,279,70,"data"],[266,92,279,74],[266,94,279,76,"depth"],[266,99,279,81],[266,101,279,83,"maxBreadth"],[266,111,279,93],[266,112,279,94],[267,6,280,4],[268,4,281,2],[270,4,283,2],[271,4,284,2],[271,8,284,6,"event"],[271,13,284,11],[271,14,284,12,"spans"],[271,19,284,17],[271,21,284,19],[272,6,285,4,"normalized"],[272,16,285,14],[272,17,285,15,"spans"],[272,22,285,20],[272,25,285,23,"event"],[272,30,285,28],[272,31,285,29,"spans"],[272,36,285,34],[272,37,285,35,"map"],[272,40,285,38],[272,41,285,39,"span"],[272,45,285,43],[272,49,285,47],[273,8,286,6],[273,15,286,13],[274,10,287,8],[274,13,287,11,"span"],[274,17,287,15],[275,10,288,8],[275,14,288,12,"span"],[275,18,288,16],[275,19,288,17,"data"],[275,23,288,21],[275,27,288,25],[276,12,289,10,"data"],[276,16,289,14],[276,18,289,16],[276,22,289,16,"normalize"],[276,42,289,25],[276,44,289,26,"span"],[276,48,289,30],[276,49,289,31,"data"],[276,53,289,35],[276,55,289,37,"depth"],[276,60,289,42],[276,62,289,44,"maxBreadth"],[276,72,289,54],[277,10,290,8],[277,11,290,9],[278,8,291,6],[278,9,291,7],[279,6,292,4],[279,7,292,5],[279,8,292,6],[280,4,293,2],[282,4,295,2],[283,4,296,2],[284,4,297,2],[285,4,298,2],[286,4,299,2],[286,8,299,6,"event"],[286,13,299,11],[286,14,299,12,"contexts"],[286,22,299,20],[286,26,299,24,"event"],[286,31,299,29],[286,32,299,30,"contexts"],[286,40,299,38],[286,41,299,39,"flags"],[286,46,299,44],[286,50,299,48,"normalized"],[286,60,299,58],[286,61,299,59,"contexts"],[286,69,299,67],[286,71,299,69],[287,6,300,4,"normalized"],[287,16,300,14],[287,17,300,15,"contexts"],[287,25,300,23],[287,26,300,24,"flags"],[287,31,300,29],[287,34,300,32],[287,38,300,32,"normalize"],[287,58,300,41],[287,60,300,42,"event"],[287,65,300,47],[287,66,300,48,"contexts"],[287,74,300,56],[287,75,300,57,"flags"],[287,80,300,62],[287,82,300,64],[287,83,300,65],[287,85,300,67,"maxBreadth"],[287,95,300,77],[287,96,300,78],[288,4,301,2],[289,4,303,2],[289,11,303,9,"normalized"],[289,21,303,19],[290,2,304,0],[291,2,306,0],[291,11,306,9,"getFinalScope"],[291,24,306,22,"getFinalScope"],[291,25,307,2,"scope"],[291,30,307,7],[291,32,308,2,"captureContext"],[291,46,308,16],[291,48,309,2],[292,4,310,2],[292,8,310,6],[292,9,310,7,"captureContext"],[292,23,310,21],[292,25,310,23],[293,6,311,4],[293,13,311,11,"scope"],[293,18,311,16],[294,4,312,2],[295,4,314,2],[295,10,314,8,"finalScope"],[295,20,314,18],[295,23,314,21,"scope"],[295,28,314,26],[295,31,314,29,"scope"],[295,36,314,34],[295,37,314,35,"clone"],[295,42,314,40],[295,43,314,41],[295,44,314,42],[295,47,314,45],[295,51,314,49,"Scope"],[295,63,314,54],[295,64,314,55],[295,65,314,56],[296,4,315,2,"finalScope"],[296,14,315,12],[296,15,315,13,"update"],[296,21,315,19],[296,22,315,20,"captureContext"],[296,36,315,34],[296,37,315,35],[297,4,316,2],[297,11,316,9,"finalScope"],[297,21,316,19],[298,2,317,0],[300,2,319,0],[301,0,320,0],[302,0,321,0],[303,0,322,0],[304,2,323,0],[304,11,323,9,"parseEventHintOrCaptureContext"],[304,41,323,39,"parseEventHintOrCaptureContext"],[304,42,324,2,"hint"],[304,46,324,6],[304,48,325,2],[305,4,326,2],[305,8,326,6],[305,9,326,7,"hint"],[305,13,326,11],[305,15,326,13],[306,6,327,4],[306,13,327,11,"undefined"],[306,22,327,20],[307,4,328,2],[309,4,330,2],[310,4,331,2],[310,8,331,6,"hintIsScopeOrFunction"],[310,29,331,27],[310,30,331,28,"hint"],[310,34,331,32],[310,35,331,33],[310,37,331,35],[311,6,332,4],[311,13,332,11],[312,8,332,13,"captureContext"],[312,22,332,27],[312,24,332,29,"hint"],[313,6,332,34],[313,7,332,35],[314,4,333,2],[315,4,335,2],[315,8,335,6,"hintIsScopeContext"],[315,26,335,24],[315,27,335,25,"hint"],[315,31,335,29],[315,32,335,30],[315,34,335,32],[316,6,336,4],[316,13,336,11],[317,8,337,6,"captureContext"],[317,22,337,20],[317,24,337,22,"hint"],[318,6,338,4],[318,7,338,5],[319,4,339,2],[320,4,341,2],[320,11,341,9,"hint"],[320,15,341,13],[321,2,342,0],[322,2,344,0],[322,11,344,9,"hintIsScopeOrFunction"],[322,32,344,30,"hintIsScopeOrFunction"],[322,33,345,2,"hint"],[322,37,345,6],[322,39,346,2],[323,4,347,2],[323,11,347,9,"hint"],[323,15,347,13],[323,27,347,25,"Scope"],[323,39,347,30],[323,43,347,34],[323,50,347,41,"hint"],[323,54,347,45],[323,59,347,50],[323,69,347,60],[324,2,348,0],[325,2,350,0],[325,8,350,6,"captureContextKeys"],[325,26,350,24],[325,29,350,27],[325,30,351,2],[325,36,351,8],[325,38,352,2],[325,45,352,9],[325,47,353,2],[325,54,353,9],[325,56,354,2],[325,66,354,12],[325,68,355,2],[325,74,355,8],[325,76,356,2],[325,89,356,15],[325,91,357,2],[325,107,357,18],[325,109,358,2],[325,129,358,22],[325,130,359,1],[326,2,361,0],[326,11,361,9,"hintIsScopeContext"],[326,29,361,27,"hintIsScopeContext"],[326,30,361,28,"hint"],[326,34,361,32],[326,36,361,34],[327,4,362,2],[327,11,362,9,"Object"],[327,17,362,15],[327,18,362,16,"keys"],[327,22,362,20],[327,23,362,21,"hint"],[327,27,362,25],[327,28,362,26],[327,29,362,27,"some"],[327,33,362,31],[327,34,362,32,"key"],[327,37,362,35],[327,41,362,39,"captureContextKeys"],[327,59,362,57],[327,60,362,58,"includes"],[327,68,362,66],[327,69,362,67,"key"],[327,72,362,71],[327,73,362,72],[327,74,362,73],[328,2,363,0],[329,0,363,1],[329,3]],"functionMap":{"names":["<global>","prepareEvent","options.integrations.map$argument_0","result.then$argument_0","applyClientOptions","applyDebugIds","event.exception.values.forEach$argument_0","exception.stacktrace.frames.forEach$argument_0","applyDebugMeta","Object.entries.forEach$argument_0","applyIntegrationsMetadata","normalizeEvent","event.breadcrumbs.map$argument_0","event.spans.map$argument_0","getFinalScope","parseEventHintOrCaptureContext","hintIsScopeOrFunction","hintIsScopeContext","Object.keys.some$argument_0"],"mappings":"AAA;ACgC;qECc,WD;qBEsD;GFa;CDC;AIW;CJ4B;AKK;mCCM;0CCE;ODI;KDC;CLI;AQK;mCFK;0CCE;ODS;KEC;6CCa;GDM;CRC;AUM;CVK;AWY;yCCQ;QDK;uCE+B;KFO;CXY;AcE;CdW;AeM;CfmB;AgBE;ChBI;AiBa;gCCC,wCD;CjBC"}},"type":"js/module"}]}