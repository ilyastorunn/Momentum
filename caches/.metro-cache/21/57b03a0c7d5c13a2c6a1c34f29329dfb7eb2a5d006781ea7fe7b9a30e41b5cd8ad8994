{"dependencies":[{"name":"./is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"C6fLnEQPNIdj7xXbougAJ0zoinA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isMatchingPattern = isMatchingPattern;\n  exports.safeJoin = safeJoin;\n  exports.snipLine = snipLine;\n  exports.stringMatchesSomePattern = stringMatchesSomePattern;\n  exports.truncate = truncate;\n  var _is = require(_dependencyMap[0], \"./is.js\");\n  /**\n   * Truncates given string to the maximum characters count\n   *\n   * @param str An object that contains serializable values\n   * @param max Maximum number of characters in truncated string (0 = unlimited)\n   * @returns string Encoded\n   */\n  function truncate(str, max = 0) {\n    if (typeof str !== 'string' || max === 0) {\n      return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n  }\n\n  /**\n   * This is basically just `trim_line` from\n   * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n   *\n   * @param str An object that contains serializable values\n   * @param max Maximum number of characters in truncated string\n   * @returns string Encoded\n   */\n  function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n      return newLine;\n    }\n    if (colno > lineLength) {\n      // eslint-disable-next-line no-param-reassign\n      colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n      start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n      end = lineLength;\n    }\n    if (end === lineLength) {\n      start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n      newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n      newLine += ' {snip}';\n    }\n    return newLine;\n  }\n\n  /**\n   * Join values in array\n   * @param input array of values to be joined together\n   * @param delimiter string to be placed in-between values\n   * @returns Joined values\n   */\n  function safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n      return '';\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < input.length; i++) {\n      const value = input[i];\n      try {\n        // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n        // console warnings. This happens when a Vue template is rendered with\n        // an undeclared variable, which we try to stringify, ultimately causing\n        // Vue to issue another warning which repeats indefinitely.\n        // see: https://github.com/getsentry/sentry-javascript/pull/8981\n        if ((0, _is.isVueViewModel)(value)) {\n          output.push('[VueViewModel]');\n        } else {\n          output.push(String(value));\n        }\n      } catch (e) {\n        output.push('[value cannot be serialized]');\n      }\n    }\n    return output.join(delimiter);\n  }\n\n  /**\n   * Checks if the given value matches a regex or string\n   *\n   * @param value The string to test\n   * @param pattern Either a regex or a string against which `value` will be matched\n   * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n   * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n   */\n  function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0, _is.isString)(value)) {\n      return false;\n    }\n    if ((0, _is.isRegExp)(pattern)) {\n      return pattern.test(value);\n    }\n    if ((0, _is.isString)(pattern)) {\n      return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n  }\n\n  /**\n   * Test the given string against an array of strings and regexes. By default, string matching is done on a\n   * substring-inclusion basis rather than a strict equality basis\n   *\n   * @param testString The string to test\n   * @param patterns The patterns against which to test the string\n   * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n   * count. If false, `testString` will match a string pattern if it contains that pattern.\n   * @returns\n   */\n  function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n  }\n});","lineCount":130,"map":[[10,2,1,0],[10,6,1,0,"_is"],[10,9,1,0],[10,12,1,0,"require"],[10,19,1,0],[10,20,1,0,"_dependencyMap"],[10,34,1,0],[11,2,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,0,8,0],[17,0,9,0],[18,2,10,0],[18,11,10,9,"truncate"],[18,19,10,17,"truncate"],[18,20,10,18,"str"],[18,23,10,21],[18,25,10,23,"max"],[18,28,10,26],[18,31,10,29],[18,32,10,30],[18,34,10,32],[19,4,11,2],[19,8,11,6],[19,15,11,13,"str"],[19,18,11,16],[19,23,11,21],[19,31,11,29],[19,35,11,33,"max"],[19,38,11,36],[19,43,11,41],[19,44,11,42],[19,46,11,44],[20,6,12,4],[20,13,12,11,"str"],[20,16,12,14],[21,4,13,2],[22,4,14,2],[22,11,14,9,"str"],[22,14,14,12],[22,15,14,13,"length"],[22,21,14,19],[22,25,14,23,"max"],[22,28,14,26],[22,31,14,29,"str"],[22,34,14,32],[22,37,14,35],[22,40,14,38,"str"],[22,43,14,41],[22,44,14,42,"slice"],[22,49,14,47],[22,50,14,48],[22,51,14,49],[22,53,14,51,"max"],[22,56,14,54],[22,57,14,55],[22,62,14,60],[23,2,15,0],[25,2,17,0],[26,0,18,0],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,2,25,0],[33,11,25,9,"snipLine"],[33,19,25,17,"snipLine"],[33,20,25,18,"line"],[33,24,25,22],[33,26,25,24,"colno"],[33,31,25,29],[33,33,25,31],[34,4,26,2],[34,8,26,6,"newLine"],[34,15,26,13],[34,18,26,16,"line"],[34,22,26,20],[35,4,27,2],[35,10,27,8,"lineLength"],[35,20,27,18],[35,23,27,21,"newLine"],[35,30,27,28],[35,31,27,29,"length"],[35,37,27,35],[36,4,28,2],[36,8,28,6,"lineLength"],[36,18,28,16],[36,22,28,20],[36,25,28,23],[36,27,28,25],[37,6,29,4],[37,13,29,11,"newLine"],[37,20,29,18],[38,4,30,2],[39,4,31,2],[39,8,31,6,"colno"],[39,13,31,11],[39,16,31,14,"lineLength"],[39,26,31,24],[39,28,31,26],[40,6,32,4],[41,6,33,4,"colno"],[41,11,33,9],[41,14,33,12,"lineLength"],[41,24,33,22],[42,4,34,2],[43,4,36,2],[43,8,36,6,"start"],[43,13,36,11],[43,16,36,14,"Math"],[43,20,36,18],[43,21,36,19,"max"],[43,24,36,22],[43,25,36,23,"colno"],[43,30,36,28],[43,33,36,31],[43,35,36,33],[43,37,36,35],[43,38,36,36],[43,39,36,37],[44,4,37,2],[44,8,37,6,"start"],[44,13,37,11],[44,16,37,14],[44,17,37,15],[44,19,37,17],[45,6,38,4,"start"],[45,11,38,9],[45,14,38,12],[45,15,38,13],[46,4,39,2],[47,4,41,2],[47,8,41,6,"end"],[47,11,41,9],[47,14,41,12,"Math"],[47,18,41,16],[47,19,41,17,"min"],[47,22,41,20],[47,23,41,21,"start"],[47,28,41,26],[47,31,41,29],[47,34,41,32],[47,36,41,34,"lineLength"],[47,46,41,44],[47,47,41,45],[48,4,42,2],[48,8,42,6,"end"],[48,11,42,9],[48,14,42,12,"lineLength"],[48,24,42,22],[48,27,42,25],[48,28,42,26],[48,30,42,28],[49,6,43,4,"end"],[49,9,43,7],[49,12,43,10,"lineLength"],[49,22,43,20],[50,4,44,2],[51,4,45,2],[51,8,45,6,"end"],[51,11,45,9],[51,16,45,14,"lineLength"],[51,26,45,24],[51,28,45,26],[52,6,46,4,"start"],[52,11,46,9],[52,14,46,12,"Math"],[52,18,46,16],[52,19,46,17,"max"],[52,22,46,20],[52,23,46,21,"end"],[52,26,46,24],[52,29,46,27],[52,32,46,30],[52,34,46,32],[52,35,46,33],[52,36,46,34],[53,4,47,2],[54,4,49,2,"newLine"],[54,11,49,9],[54,14,49,12,"newLine"],[54,21,49,19],[54,22,49,20,"slice"],[54,27,49,25],[54,28,49,26,"start"],[54,33,49,31],[54,35,49,33,"end"],[54,38,49,36],[54,39,49,37],[55,4,50,2],[55,8,50,6,"start"],[55,13,50,11],[55,16,50,14],[55,17,50,15],[55,19,50,17],[56,6,51,4,"newLine"],[56,13,51,11],[56,16,51,14],[56,27,51,25,"newLine"],[56,34,51,32],[56,36,51,34],[57,4,52,2],[58,4,53,2],[58,8,53,6,"end"],[58,11,53,9],[58,14,53,12,"lineLength"],[58,24,53,22],[58,26,53,24],[59,6,54,4,"newLine"],[59,13,54,11],[59,17,54,15],[59,26,54,24],[60,4,55,2],[61,4,57,2],[61,11,57,9,"newLine"],[61,18,57,16],[62,2,58,0],[64,2,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,2,66,0],[70,11,66,9,"safeJoin"],[70,19,66,17,"safeJoin"],[70,20,66,18,"input"],[70,25,66,23],[70,27,66,25,"delimiter"],[70,36,66,34],[70,38,66,36],[71,4,67,2],[71,8,67,6],[71,9,67,7,"Array"],[71,14,67,12],[71,15,67,13,"isArray"],[71,22,67,20],[71,23,67,21,"input"],[71,28,67,26],[71,29,67,27],[71,31,67,29],[72,6,68,4],[72,13,68,11],[72,15,68,13],[73,4,69,2],[74,4,71,2],[74,10,71,8,"output"],[74,16,71,14],[74,19,71,17],[74,21,71,19],[75,4,72,2],[76,4,73,2],[76,9,73,7],[76,13,73,11,"i"],[76,14,73,12],[76,17,73,15],[76,18,73,16],[76,20,73,18,"i"],[76,21,73,19],[76,24,73,22,"input"],[76,29,73,27],[76,30,73,28,"length"],[76,36,73,34],[76,38,73,36,"i"],[76,39,73,37],[76,41,73,39],[76,43,73,41],[77,6,74,4],[77,12,74,10,"value"],[77,17,74,15],[77,20,74,18,"input"],[77,25,74,23],[77,26,74,24,"i"],[77,27,74,25],[77,28,74,26],[78,6,75,4],[78,10,75,8],[79,8,76,6],[80,8,77,6],[81,8,78,6],[82,8,79,6],[83,8,80,6],[84,8,81,6],[84,12,81,10],[84,16,81,10,"isVueViewModel"],[84,34,81,24],[84,36,81,25,"value"],[84,41,81,30],[84,42,81,31],[84,44,81,33],[85,10,82,8,"output"],[85,16,82,14],[85,17,82,15,"push"],[85,21,82,19],[85,22,82,20],[85,38,82,36],[85,39,82,37],[86,8,83,6],[86,9,83,7],[86,15,83,13],[87,10,84,8,"output"],[87,16,84,14],[87,17,84,15,"push"],[87,21,84,19],[87,22,84,20,"String"],[87,28,84,26],[87,29,84,27,"value"],[87,34,84,32],[87,35,84,33],[87,36,84,34],[88,8,85,6],[89,6,86,4],[89,7,86,5],[89,8,86,6],[89,15,86,13,"e"],[89,16,86,14],[89,18,86,16],[90,8,87,6,"output"],[90,14,87,12],[90,15,87,13,"push"],[90,19,87,17],[90,20,87,18],[90,50,87,48],[90,51,87,49],[91,6,88,4],[92,4,89,2],[93,4,91,2],[93,11,91,9,"output"],[93,17,91,15],[93,18,91,16,"join"],[93,22,91,20],[93,23,91,21,"delimiter"],[93,32,91,30],[93,33,91,31],[94,2,92,0],[96,2,94,0],[97,0,95,0],[98,0,96,0],[99,0,97,0],[100,0,98,0],[101,0,99,0],[102,0,100,0],[103,0,101,0],[104,2,102,0],[104,11,102,9,"isMatchingPattern"],[104,28,102,26,"isMatchingPattern"],[104,29,103,2,"value"],[104,34,103,7],[104,36,104,2,"pattern"],[104,43,104,9],[104,45,105,2,"requireExactStringMatch"],[104,68,105,25],[104,71,105,28],[104,76,105,33],[104,78,106,2],[105,4,107,2],[105,8,107,6],[105,9,107,7],[105,13,107,7,"isString"],[105,25,107,15],[105,27,107,16,"value"],[105,32,107,21],[105,33,107,22],[105,35,107,24],[106,6,108,4],[106,13,108,11],[106,18,108,16],[107,4,109,2],[108,4,111,2],[108,8,111,6],[108,12,111,6,"isRegExp"],[108,24,111,14],[108,26,111,15,"pattern"],[108,33,111,22],[108,34,111,23],[108,36,111,25],[109,6,112,4],[109,13,112,11,"pattern"],[109,20,112,18],[109,21,112,19,"test"],[109,25,112,23],[109,26,112,24,"value"],[109,31,112,29],[109,32,112,30],[110,4,113,2],[111,4,114,2],[111,8,114,6],[111,12,114,6,"isString"],[111,24,114,14],[111,26,114,15,"pattern"],[111,33,114,22],[111,34,114,23],[111,36,114,25],[112,6,115,4],[112,13,115,11,"requireExactStringMatch"],[112,36,115,34],[112,39,115,37,"value"],[112,44,115,42],[112,49,115,47,"pattern"],[112,56,115,54],[112,59,115,57,"value"],[112,64,115,62],[112,65,115,63,"includes"],[112,73,115,71],[112,74,115,72,"pattern"],[112,81,115,79],[112,82,115,80],[113,4,116,2],[114,4,118,2],[114,11,118,9],[114,16,118,14],[115,2,119,0],[117,2,121,0],[118,0,122,0],[119,0,123,0],[120,0,124,0],[121,0,125,0],[122,0,126,0],[123,0,127,0],[124,0,128,0],[125,0,129,0],[126,0,130,0],[127,2,131,0],[127,11,131,9,"stringMatchesSomePattern"],[127,35,131,33,"stringMatchesSomePattern"],[127,36,132,2,"testString"],[127,46,132,12],[127,48,133,2,"patterns"],[127,56,133,10],[127,59,133,13],[127,61,133,15],[127,63,134,2,"requireExactStringMatch"],[127,86,134,25],[127,89,134,28],[127,94,134,33],[127,96,135,2],[128,4,136,2],[128,11,136,9,"patterns"],[128,19,136,17],[128,20,136,18,"some"],[128,24,136,22],[128,25,136,23,"pattern"],[128,32,136,30],[128,36,136,34,"isMatchingPattern"],[128,53,136,51],[128,54,136,52,"testString"],[128,64,136,62],[128,66,136,64,"pattern"],[128,73,136,71],[128,75,136,73,"requireExactStringMatch"],[128,98,136,96],[128,99,136,97],[128,100,136,98],[129,2,137,0],[130,0,137,1],[130,3]],"functionMap":{"names":["<global>","truncate","snipLine","safeJoin","isMatchingPattern","stringMatchesSomePattern","patterns.some$argument_0"],"mappings":"AAA;ACS;CDK;AEU;CFiC;AGQ;CH0B;AIU;CJiB;AKY;uBCK,0ED;CLC"}},"type":"js/module"}]}