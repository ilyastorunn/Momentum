{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":54,"index":93}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./hermes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":94},"end":{"line":3,"column":47,"index":141}}],"key":"pIFxWgQeQJn0Jwit27axt2t7DOo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.convertToSentryProfile = convertToSentryProfile;\n  exports.mapSamples = mapSamples;\n  exports.parseHermesJSStackFrame = parseHermesJSStackFrame;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _constants = require(_dependencyMap[1], \"./constants\");\n  var _hermes = require(_dependencyMap[2], \"./hermes\");\n  const PLACEHOLDER_THREAD_ID_STRING = '0';\n  const MS_TO_NS = 1e6;\n  const MAX_PROFILE_DURATION_NS = _constants.MAX_PROFILE_DURATION_MS * MS_TO_NS;\n  const UNKNOWN_STACK_ID = -1;\n  const JS_THREAD_NAME = 'JavaScriptThread';\n  const JS_THREAD_PRIORITY = 1;\n  /**\n   * Converts a Hermes profile to a Sentry profile.\n   *\n   * Maps Hermes samples to Sentry samples.\n   * Maps Hermes stack frames to Sentry frames.\n   * Hermes stack frame is an object representing a function call in the stack\n   * with a link to its parent stack frame. Root of the represented stack tree\n   * is main function call in Hermes that is [root] stack frame.\n   *\n   * @returns Sentry profile or null if no samples are found.\n   */\n  function convertToSentryProfile(hermesProfile) {\n    if (hermesProfile.samples.length === 0) {\n      _core.logger.warn('[Profiling] No samples found in profile.');\n      return null;\n    }\n    const {\n      samples,\n      hermesStacks,\n      jsThreads\n    } = mapSamples(hermesProfile.samples);\n    const {\n      frames,\n      hermesStackFrameIdToSentryFrameIdMap\n    } = mapFrames(hermesProfile.stackFrames);\n    const {\n      stacks,\n      hermesStackToSentryStackMap\n    } = mapStacks(hermesStacks, hermesProfile.stackFrames, hermesStackFrameIdToSentryFrameIdMap);\n    for (const sample of samples) {\n      const sentryStackId = hermesStackToSentryStackMap.get(sample.stack_id);\n      if (sentryStackId === undefined) {\n        _core.logger.error(`[Profiling] Hermes Stack ID ${sample.stack_id} not found when mapping to Sentry Stack ID.`);\n        sample.stack_id = UNKNOWN_STACK_ID;\n      } else {\n        sample.stack_id = sentryStackId;\n      }\n    }\n    const thread_metadata = {};\n    for (const jsThreadId of jsThreads) {\n      thread_metadata[jsThreadId] = {\n        name: JS_THREAD_NAME,\n        priority: JS_THREAD_PRIORITY\n      };\n    }\n    const active_thread_id = Object.keys(thread_metadata)[0] || PLACEHOLDER_THREAD_ID_STRING;\n    return {\n      samples,\n      frames,\n      stacks,\n      thread_metadata,\n      active_thread_id\n    };\n  }\n  /**\n   * Maps Hermes samples to Sentry samples.\n   * Calculates the elapsed time since the first sample based on the absolute timestamps of the Hermes samples.\n   * Hermes stack frame IDs represent the last (leaf, furthest from the main func) frame of the call stack.\n   * @returns the mapped Sentry samples, the set of Hermes stack frame IDs, and the set of JS thread IDs\n   */\n  function mapSamples(hermesSamples, maxElapsedSinceStartNs = MAX_PROFILE_DURATION_NS) {\n    const jsThreads = new Set();\n    const hermesStacks = new Set();\n    const start = Number(hermesSamples[0].ts);\n    const samples = [];\n    for (const hermesSample of hermesSamples) {\n      jsThreads.add(hermesSample.tid);\n      hermesStacks.add(hermesSample.sf);\n      const elapsed_since_start_ns = (Number(hermesSample.ts) - start) * 1e3;\n      if (elapsed_since_start_ns >= maxElapsedSinceStartNs) {\n        _core.logger.warn(`[Profiling] Sample has elapsed time since start ${elapsed_since_start_ns}ns ` + `greater than the max elapsed time ${maxElapsedSinceStartNs}ns.`);\n        break;\n      }\n      samples.push({\n        stack_id: hermesSample.sf,\n        thread_id: hermesSample.tid,\n        elapsed_since_start_ns: elapsed_since_start_ns.toFixed(0)\n      });\n    }\n    return {\n      samples,\n      hermesStacks,\n      jsThreads\n    };\n  }\n  /**\n   * Maps Hermes StackFrames tree represented as an JS object to a Sentry frames array.\n   * Converts line and columns strings to numbers.\n   * @returns the mapped Sentry frames\n   */\n  function mapFrames(hermesStackFrames) {\n    const frames = [];\n    const hermesStackFrameIdToSentryFrameIdMap = new Map();\n    for (const key in hermesStackFrames) {\n      // asc order based on the key is not guaranteed\n      if (!Object.prototype.hasOwnProperty.call(hermesStackFrames, key)) {\n        continue;\n      }\n      hermesStackFrameIdToSentryFrameIdMap.set(Number(key), frames.length);\n      frames.push(parseHermesJSStackFrame(hermesStackFrames[key]));\n    }\n    return {\n      frames,\n      hermesStackFrameIdToSentryFrameIdMap\n    };\n  }\n  /**\n   * Maps Hermes stack frame IDs to Sentry stack arrays.\n   * Hermes stack frame IDs represent the last (leaf, furthest from the main func) frame of the call stack.\n   * @returns the mapped Sentry stacks and a map from Hermes stack IDs to Sentry stack IDs (indices in the stacks array)\n   */\n  function mapStacks(hermesStacks, hermesStackFrames, hermesStackFrameIdToSentryFrameIdMap) {\n    const hermesStackToSentryStackMap = new Map();\n    const stacks = [];\n    for (const hermesStackFunctionFrameId of hermesStacks) {\n      const stackId = stacks.length;\n      hermesStackToSentryStackMap.set(hermesStackFunctionFrameId, stackId);\n      const stack = [];\n      let currentHermesFrameId = hermesStackFunctionFrameId;\n      while (currentHermesFrameId !== undefined) {\n        const sentryFrameId = hermesStackFrameIdToSentryFrameIdMap.get(currentHermesFrameId);\n        sentryFrameId !== undefined && stack.push(sentryFrameId);\n        currentHermesFrameId = hermesStackFrames[currentHermesFrameId] && hermesStackFrames[currentHermesFrameId].parent;\n      }\n      stacks.push(stack);\n    }\n    return {\n      stacks,\n      hermesStackToSentryStackMap\n    };\n  }\n  /**\n   * Parses Hermes StackFrame to Sentry StackFrame.\n   * For native frames only function name is returned, for Hermes bytecode the line and column are calculated.\n   */\n  function parseHermesJSStackFrame(frame) {\n    if (frame.category !== 'JavaScript') {\n      // Native\n      if (frame.name === '[root]') {\n        return {\n          function: frame.name,\n          in_app: false\n        };\n      }\n      return {\n        function: frame.name\n      };\n    }\n    if (frame.funcVirtAddr !== undefined && frame.offset !== undefined) {\n      // Hermes Bytecode\n      return {\n        function: frame.name,\n        abs_path: _hermes.DEFAULT_BUNDLE_NAME,\n        // https://github.com/krystofwoldrich/metro/blob/417e6f276ff9422af6039fc4d1bce41fcf7d9f46/packages/metro-symbolicate/src/Symbolication.js#L298-L301\n        // Hermes lineno is hardcoded 1, currently only one bundle symbolication is supported by metro-symbolicate and thus by us.\n        lineno: 1,\n        // Hermes colno is 0-based, while Sentry is 1-based\n        colno: Number(frame.funcVirtAddr) + Number(frame.offset) + 1\n      };\n    }\n    // JavaScript\n    const indexOfLeftParenthesis = frame.name.indexOf('(');\n    return {\n      function: indexOfLeftParenthesis !== -1 ? frame.name.substring(0, indexOfLeftParenthesis) || undefined : frame.name,\n      abs_path: _hermes.DEFAULT_BUNDLE_NAME,\n      lineno: frame.line !== undefined ? Number(frame.line) : undefined,\n      colno: frame.column !== undefined ? Number(frame.column) : undefined\n    };\n  }\n});","lineCount":186,"map":[[8,2,1,0],[8,6,1,0,"_core"],[8,11,1,0],[8,14,1,0,"require"],[8,21,1,0],[8,22,1,0,"_dependencyMap"],[8,36,1,0],[9,2,2,0],[9,6,2,0,"_constants"],[9,16,2,0],[9,19,2,0,"require"],[9,26,2,0],[9,27,2,0,"_dependencyMap"],[9,41,2,0],[10,2,3,0],[10,6,3,0,"_hermes"],[10,13,3,0],[10,16,3,0,"require"],[10,23,3,0],[10,24,3,0,"_dependencyMap"],[10,38,3,0],[11,2,4,0],[11,8,4,6,"PLACEHOLDER_THREAD_ID_STRING"],[11,36,4,34],[11,39,4,37],[11,42,4,40],[12,2,5,0],[12,8,5,6,"MS_TO_NS"],[12,16,5,14],[12,19,5,17],[12,22,5,20],[13,2,6,0],[13,8,6,6,"MAX_PROFILE_DURATION_NS"],[13,31,6,29],[13,34,6,32,"MAX_PROFILE_DURATION_MS"],[13,68,6,55],[13,71,6,58,"MS_TO_NS"],[13,79,6,66],[14,2,7,0],[14,8,7,6,"UNKNOWN_STACK_ID"],[14,24,7,22],[14,27,7,25],[14,28,7,26],[14,29,7,27],[15,2,8,0],[15,8,8,6,"JS_THREAD_NAME"],[15,22,8,20],[15,25,8,23],[15,43,8,41],[16,2,9,0],[16,8,9,6,"JS_THREAD_PRIORITY"],[16,26,9,24],[16,29,9,27],[16,30,9,28],[17,2,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,2,21,7],[28,11,21,16,"convertToSentryProfile"],[28,33,21,38,"convertToSentryProfile"],[28,34,21,39,"hermesProfile"],[28,47,21,52],[28,49,21,54],[29,4,22,4],[29,8,22,8,"hermesProfile"],[29,21,22,21],[29,22,22,22,"samples"],[29,29,22,29],[29,30,22,30,"length"],[29,36,22,36],[29,41,22,41],[29,42,22,42],[29,44,22,44],[30,6,23,8,"logger"],[30,18,23,14],[30,19,23,15,"warn"],[30,23,23,19],[30,24,23,20],[30,66,23,62],[30,67,23,63],[31,6,24,8],[31,13,24,15],[31,17,24,19],[32,4,25,4],[33,4,26,4],[33,10,26,10],[34,6,26,12,"samples"],[34,13,26,19],[35,6,26,21,"hermesStacks"],[35,18,26,33],[36,6,26,35,"jsThreads"],[37,4,26,45],[37,5,26,46],[37,8,26,49,"mapSamples"],[37,18,26,59],[37,19,26,60,"hermesProfile"],[37,32,26,73],[37,33,26,74,"samples"],[37,40,26,81],[37,41,26,82],[38,4,27,4],[38,10,27,10],[39,6,27,12,"frames"],[39,12,27,18],[40,6,27,20,"hermesStackFrameIdToSentryFrameIdMap"],[41,4,27,57],[41,5,27,58],[41,8,27,61,"mapFrames"],[41,17,27,70],[41,18,27,71,"hermesProfile"],[41,31,27,84],[41,32,27,85,"stackFrames"],[41,43,27,96],[41,44,27,97],[42,4,28,4],[42,10,28,10],[43,6,28,12,"stacks"],[43,12,28,18],[44,6,28,20,"hermesStackToSentryStackMap"],[45,4,28,48],[45,5,28,49],[45,8,28,52,"mapStacks"],[45,17,28,61],[45,18,28,62,"hermesStacks"],[45,30,28,74],[45,32,28,76,"hermesProfile"],[45,45,28,89],[45,46,28,90,"stackFrames"],[45,57,28,101],[45,59,28,103,"hermesStackFrameIdToSentryFrameIdMap"],[45,95,28,139],[45,96,28,140],[46,4,29,4],[46,9,29,9],[46,15,29,15,"sample"],[46,21,29,21],[46,25,29,25,"samples"],[46,32,29,32],[46,34,29,34],[47,6,30,8],[47,12,30,14,"sentryStackId"],[47,25,30,27],[47,28,30,30,"hermesStackToSentryStackMap"],[47,55,30,57],[47,56,30,58,"get"],[47,59,30,61],[47,60,30,62,"sample"],[47,66,30,68],[47,67,30,69,"stack_id"],[47,75,30,77],[47,76,30,78],[48,6,31,8],[48,10,31,12,"sentryStackId"],[48,23,31,25],[48,28,31,30,"undefined"],[48,37,31,39],[48,39,31,41],[49,8,32,12,"logger"],[49,20,32,18],[49,21,32,19,"error"],[49,26,32,24],[49,27,32,25],[49,58,32,56,"sample"],[49,64,32,62],[49,65,32,63,"stack_id"],[49,73,32,71],[49,118,32,116],[49,119,32,117],[50,8,33,12,"sample"],[50,14,33,18],[50,15,33,19,"stack_id"],[50,23,33,27],[50,26,33,30,"UNKNOWN_STACK_ID"],[50,42,33,46],[51,6,34,8],[51,7,34,9],[51,13,35,13],[52,8,36,12,"sample"],[52,14,36,18],[52,15,36,19,"stack_id"],[52,23,36,27],[52,26,36,30,"sentryStackId"],[52,39,36,43],[53,6,37,8],[54,4,38,4],[55,4,39,4],[55,10,39,10,"thread_metadata"],[55,25,39,25],[55,28,39,28],[55,29,39,29],[55,30,39,30],[56,4,40,4],[56,9,40,9],[56,15,40,15,"jsThreadId"],[56,25,40,25],[56,29,40,29,"jsThreads"],[56,38,40,38],[56,40,40,40],[57,6,41,8,"thread_metadata"],[57,21,41,23],[57,22,41,24,"jsThreadId"],[57,32,41,34],[57,33,41,35],[57,36,41,38],[58,8,42,12,"name"],[58,12,42,16],[58,14,42,18,"JS_THREAD_NAME"],[58,28,42,32],[59,8,43,12,"priority"],[59,16,43,20],[59,18,43,22,"JS_THREAD_PRIORITY"],[60,6,44,8],[60,7,44,9],[61,4,45,4],[62,4,46,4],[62,10,46,10,"active_thread_id"],[62,26,46,26],[62,29,46,29,"Object"],[62,35,46,35],[62,36,46,36,"keys"],[62,40,46,40],[62,41,46,41,"thread_metadata"],[62,56,46,56],[62,57,46,57],[62,58,46,58],[62,59,46,59],[62,60,46,60],[62,64,46,64,"PLACEHOLDER_THREAD_ID_STRING"],[62,92,46,92],[63,4,47,4],[63,11,47,11],[64,6,48,8,"samples"],[64,13,48,15],[65,6,49,8,"frames"],[65,12,49,14],[66,6,50,8,"stacks"],[66,12,50,14],[67,6,51,8,"thread_metadata"],[67,21,51,23],[68,6,52,8,"active_thread_id"],[69,4,53,4],[69,5,53,5],[70,2,54,0],[71,2,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,2,61,7],[77,11,61,16,"mapSamples"],[77,21,61,26,"mapSamples"],[77,22,61,27,"hermesSamples"],[77,35,61,40],[77,37,61,42,"maxElapsedSinceStartNs"],[77,59,61,64],[77,62,61,67,"MAX_PROFILE_DURATION_NS"],[77,85,61,90],[77,87,61,92],[78,4,62,4],[78,10,62,10,"jsThreads"],[78,19,62,19],[78,22,62,22],[78,26,62,26,"Set"],[78,29,62,29],[78,30,62,30],[78,31,62,31],[79,4,63,4],[79,10,63,10,"hermesStacks"],[79,22,63,22],[79,25,63,25],[79,29,63,29,"Set"],[79,32,63,32],[79,33,63,33],[79,34,63,34],[80,4,64,4],[80,10,64,10,"start"],[80,15,64,15],[80,18,64,18,"Number"],[80,24,64,24],[80,25,64,25,"hermesSamples"],[80,38,64,38],[80,39,64,39],[80,40,64,40],[80,41,64,41],[80,42,64,42,"ts"],[80,44,64,44],[80,45,64,45],[81,4,65,4],[81,10,65,10,"samples"],[81,17,65,17],[81,20,65,20],[81,22,65,22],[82,4,66,4],[82,9,66,9],[82,15,66,15,"hermesSample"],[82,27,66,27],[82,31,66,31,"hermesSamples"],[82,44,66,44],[82,46,66,46],[83,6,67,8,"jsThreads"],[83,15,67,17],[83,16,67,18,"add"],[83,19,67,21],[83,20,67,22,"hermesSample"],[83,32,67,34],[83,33,67,35,"tid"],[83,36,67,38],[83,37,67,39],[84,6,68,8,"hermesStacks"],[84,18,68,20],[84,19,68,21,"add"],[84,22,68,24],[84,23,68,25,"hermesSample"],[84,35,68,37],[84,36,68,38,"sf"],[84,38,68,40],[84,39,68,41],[85,6,69,8],[85,12,69,14,"elapsed_since_start_ns"],[85,34,69,36],[85,37,69,39],[85,38,69,40,"Number"],[85,44,69,46],[85,45,69,47,"hermesSample"],[85,57,69,59],[85,58,69,60,"ts"],[85,60,69,62],[85,61,69,63],[85,64,69,66,"start"],[85,69,69,71],[85,73,69,75],[85,76,69,78],[86,6,70,8],[86,10,70,12,"elapsed_since_start_ns"],[86,32,70,34],[86,36,70,38,"maxElapsedSinceStartNs"],[86,58,70,60],[86,60,70,62],[87,8,71,12,"logger"],[87,20,71,18],[87,21,71,19,"warn"],[87,25,71,23],[87,26,71,24],[87,77,71,75,"elapsed_since_start_ns"],[87,99,71,97],[87,104,71,102],[87,107,72,16],[87,144,72,53,"maxElapsedSinceStartNs"],[87,166,72,75],[87,171,72,80],[87,172,72,81],[88,8,73,12],[89,6,74,8],[90,6,75,8,"samples"],[90,13,75,15],[90,14,75,16,"push"],[90,18,75,20],[90,19,75,21],[91,8,76,12,"stack_id"],[91,16,76,20],[91,18,76,22,"hermesSample"],[91,30,76,34],[91,31,76,35,"sf"],[91,33,76,37],[92,8,77,12,"thread_id"],[92,17,77,21],[92,19,77,23,"hermesSample"],[92,31,77,35],[92,32,77,36,"tid"],[92,35,77,39],[93,8,78,12,"elapsed_since_start_ns"],[93,30,78,34],[93,32,78,36,"elapsed_since_start_ns"],[93,54,78,58],[93,55,78,59,"toFixed"],[93,62,78,66],[93,63,78,67],[93,64,78,68],[94,6,79,8],[94,7,79,9],[94,8,79,10],[95,4,80,4],[96,4,81,4],[96,11,81,11],[97,6,82,8,"samples"],[97,13,82,15],[98,6,83,8,"hermesStacks"],[98,18,83,20],[99,6,84,8,"jsThreads"],[100,4,85,4],[100,5,85,5],[101,2,86,0],[102,2,87,0],[103,0,88,0],[104,0,89,0],[105,0,90,0],[106,0,91,0],[107,2,92,0],[107,11,92,9,"mapFrames"],[107,20,92,18,"mapFrames"],[107,21,92,19,"hermesStackFrames"],[107,38,92,36],[107,40,92,38],[108,4,93,4],[108,10,93,10,"frames"],[108,16,93,16],[108,19,93,19],[108,21,93,21],[109,4,94,4],[109,10,94,10,"hermesStackFrameIdToSentryFrameIdMap"],[109,46,94,46],[109,49,94,49],[109,53,94,53,"Map"],[109,56,94,56],[109,57,94,57],[109,58,94,58],[110,4,95,4],[110,9,95,9],[110,15,95,15,"key"],[110,18,95,18],[110,22,95,22,"hermesStackFrames"],[110,39,95,39],[110,41,95,41],[111,6,96,8],[112,6,97,8],[112,10,97,12],[112,11,97,13,"Object"],[112,17,97,19],[112,18,97,20,"prototype"],[112,27,97,29],[112,28,97,30,"hasOwnProperty"],[112,42,97,44],[112,43,97,45,"call"],[112,47,97,49],[112,48,97,50,"hermesStackFrames"],[112,65,97,67],[112,67,97,69,"key"],[112,70,97,72],[112,71,97,73],[112,73,97,75],[113,8,98,12],[114,6,99,8],[115,6,100,8,"hermesStackFrameIdToSentryFrameIdMap"],[115,42,100,44],[115,43,100,45,"set"],[115,46,100,48],[115,47,100,49,"Number"],[115,53,100,55],[115,54,100,56,"key"],[115,57,100,59],[115,58,100,60],[115,60,100,62,"frames"],[115,66,100,68],[115,67,100,69,"length"],[115,73,100,75],[115,74,100,76],[116,6,101,8,"frames"],[116,12,101,14],[116,13,101,15,"push"],[116,17,101,19],[116,18,101,20,"parseHermesJSStackFrame"],[116,41,101,43],[116,42,101,44,"hermesStackFrames"],[116,59,101,61],[116,60,101,62,"key"],[116,63,101,65],[116,64,101,66],[116,65,101,67],[116,66,101,68],[117,4,102,4],[118,4,103,4],[118,11,103,11],[119,6,104,8,"frames"],[119,12,104,14],[120,6,105,8,"hermesStackFrameIdToSentryFrameIdMap"],[121,4,106,4],[121,5,106,5],[122,2,107,0],[123,2,108,0],[124,0,109,0],[125,0,110,0],[126,0,111,0],[127,0,112,0],[128,2,113,0],[128,11,113,9,"mapStacks"],[128,20,113,18,"mapStacks"],[128,21,113,19,"hermesStacks"],[128,33,113,31],[128,35,113,33,"hermesStackFrames"],[128,52,113,50],[128,54,113,52,"hermesStackFrameIdToSentryFrameIdMap"],[128,90,113,88],[128,92,113,90],[129,4,114,4],[129,10,114,10,"hermesStackToSentryStackMap"],[129,37,114,37],[129,40,114,40],[129,44,114,44,"Map"],[129,47,114,47],[129,48,114,48],[129,49,114,49],[130,4,115,4],[130,10,115,10,"stacks"],[130,16,115,16],[130,19,115,19],[130,21,115,21],[131,4,116,4],[131,9,116,9],[131,15,116,15,"hermesStackFunctionFrameId"],[131,41,116,41],[131,45,116,45,"hermesStacks"],[131,57,116,57],[131,59,116,59],[132,6,117,8],[132,12,117,14,"stackId"],[132,19,117,21],[132,22,117,24,"stacks"],[132,28,117,30],[132,29,117,31,"length"],[132,35,117,37],[133,6,118,8,"hermesStackToSentryStackMap"],[133,33,118,35],[133,34,118,36,"set"],[133,37,118,39],[133,38,118,40,"hermesStackFunctionFrameId"],[133,64,118,66],[133,66,118,68,"stackId"],[133,73,118,75],[133,74,118,76],[134,6,119,8],[134,12,119,14,"stack"],[134,17,119,19],[134,20,119,22],[134,22,119,24],[135,6,120,8],[135,10,120,12,"currentHermesFrameId"],[135,30,120,32],[135,33,120,35,"hermesStackFunctionFrameId"],[135,59,120,61],[136,6,121,8],[136,13,121,15,"currentHermesFrameId"],[136,33,121,35],[136,38,121,40,"undefined"],[136,47,121,49],[136,49,121,51],[137,8,122,12],[137,14,122,18,"sentryFrameId"],[137,27,122,31],[137,30,122,34,"hermesStackFrameIdToSentryFrameIdMap"],[137,66,122,70],[137,67,122,71,"get"],[137,70,122,74],[137,71,122,75,"currentHermesFrameId"],[137,91,122,95],[137,92,122,96],[138,8,123,12,"sentryFrameId"],[138,21,123,25],[138,26,123,30,"undefined"],[138,35,123,39],[138,39,123,43,"stack"],[138,44,123,48],[138,45,123,49,"push"],[138,49,123,53],[138,50,123,54,"sentryFrameId"],[138,63,123,67],[138,64,123,68],[139,8,124,12,"currentHermesFrameId"],[139,28,124,32],[139,31,124,35,"hermesStackFrames"],[139,48,124,52],[139,49,124,53,"currentHermesFrameId"],[139,69,124,73],[139,70,124,74],[139,74,124,78,"hermesStackFrames"],[139,91,124,95],[139,92,124,96,"currentHermesFrameId"],[139,112,124,116],[139,113,124,117],[139,114,124,118,"parent"],[139,120,124,124],[140,6,125,8],[141,6,126,8,"stacks"],[141,12,126,14],[141,13,126,15,"push"],[141,17,126,19],[141,18,126,20,"stack"],[141,23,126,25],[141,24,126,26],[142,4,127,4],[143,4,128,4],[143,11,128,11],[144,6,129,8,"stacks"],[144,12,129,14],[145,6,130,8,"hermesStackToSentryStackMap"],[146,4,131,4],[146,5,131,5],[147,2,132,0],[148,2,133,0],[149,0,134,0],[150,0,135,0],[151,0,136,0],[152,2,137,7],[152,11,137,16,"parseHermesJSStackFrame"],[152,34,137,39,"parseHermesJSStackFrame"],[152,35,137,40,"frame"],[152,40,137,45],[152,42,137,47],[153,4,138,4],[153,8,138,8,"frame"],[153,13,138,13],[153,14,138,14,"category"],[153,22,138,22],[153,27,138,27],[153,39,138,39],[153,41,138,41],[154,6,139,8],[155,6,140,8],[155,10,140,12,"frame"],[155,15,140,17],[155,16,140,18,"name"],[155,20,140,22],[155,25,140,27],[155,33,140,35],[155,35,140,37],[156,8,141,12],[156,15,141,19],[157,10,141,21,"function"],[157,18,141,29],[157,20,141,31,"frame"],[157,25,141,36],[157,26,141,37,"name"],[157,30,141,41],[158,10,141,43,"in_app"],[158,16,141,49],[158,18,141,51],[159,8,141,57],[159,9,141,58],[160,6,142,8],[161,6,143,8],[161,13,143,15],[162,8,143,17,"function"],[162,16,143,25],[162,18,143,27,"frame"],[162,23,143,32],[162,24,143,33,"name"],[163,6,143,38],[163,7,143,39],[164,4,144,4],[165,4,145,4],[165,8,145,8,"frame"],[165,13,145,13],[165,14,145,14,"funcVirtAddr"],[165,26,145,26],[165,31,145,31,"undefined"],[165,40,145,40],[165,44,145,44,"frame"],[165,49,145,49],[165,50,145,50,"offset"],[165,56,145,56],[165,61,145,61,"undefined"],[165,70,145,70],[165,72,145,72],[166,6,146,8],[167,6,147,8],[167,13,147,15],[168,8,148,12,"function"],[168,16,148,20],[168,18,148,22,"frame"],[168,23,148,27],[168,24,148,28,"name"],[168,28,148,32],[169,8,149,12,"abs_path"],[169,16,149,20],[169,18,149,22,"DEFAULT_BUNDLE_NAME"],[169,45,149,41],[170,8,150,12],[171,8,151,12],[172,8,152,12,"lineno"],[172,14,152,18],[172,16,152,20],[172,17,152,21],[173,8,153,12],[174,8,154,12,"colno"],[174,13,154,17],[174,15,154,19,"Number"],[174,21,154,25],[174,22,154,26,"frame"],[174,27,154,31],[174,28,154,32,"funcVirtAddr"],[174,40,154,44],[174,41,154,45],[174,44,154,48,"Number"],[174,50,154,54],[174,51,154,55,"frame"],[174,56,154,60],[174,57,154,61,"offset"],[174,63,154,67],[174,64,154,68],[174,67,154,71],[175,6,155,8],[175,7,155,9],[176,4,156,4],[177,4,157,4],[178,4,158,4],[178,10,158,10,"indexOfLeftParenthesis"],[178,32,158,32],[178,35,158,35,"frame"],[178,40,158,40],[178,41,158,41,"name"],[178,45,158,45],[178,46,158,46,"indexOf"],[178,53,158,53],[178,54,158,54],[178,57,158,57],[178,58,158,58],[179,4,159,4],[179,11,159,11],[180,6,160,8,"function"],[180,14,160,16],[180,16,160,18,"indexOfLeftParenthesis"],[180,38,160,40],[180,43,160,45],[180,44,160,46],[180,45,160,47],[180,48,160,50,"frame"],[180,53,160,55],[180,54,160,56,"name"],[180,58,160,60],[180,59,160,61,"substring"],[180,68,160,70],[180,69,160,71],[180,70,160,72],[180,72,160,74,"indexOfLeftParenthesis"],[180,94,160,96],[180,95,160,97],[180,99,160,101,"undefined"],[180,108,160,110],[180,111,160,113,"frame"],[180,116,160,118],[180,117,160,119,"name"],[180,121,160,123],[181,6,161,8,"abs_path"],[181,14,161,16],[181,16,161,18,"DEFAULT_BUNDLE_NAME"],[181,43,161,37],[182,6,162,8,"lineno"],[182,12,162,14],[182,14,162,16,"frame"],[182,19,162,21],[182,20,162,22,"line"],[182,24,162,26],[182,29,162,31,"undefined"],[182,38,162,40],[182,41,162,43,"Number"],[182,47,162,49],[182,48,162,50,"frame"],[182,53,162,55],[182,54,162,56,"line"],[182,58,162,60],[182,59,162,61],[182,62,162,64,"undefined"],[182,71,162,73],[183,6,163,8,"colno"],[183,11,163,13],[183,13,163,15,"frame"],[183,18,163,20],[183,19,163,21,"column"],[183,25,163,27],[183,30,163,32,"undefined"],[183,39,163,41],[183,42,163,44,"Number"],[183,48,163,50],[183,49,163,51,"frame"],[183,54,163,56],[183,55,163,57,"column"],[183,61,163,63],[183,62,163,64],[183,65,163,67,"undefined"],[184,4,164,4],[184,5,164,5],[185,2,165,0],[186,0,165,1],[186,3]],"functionMap":{"names":["<global>","convertToSentryProfile","mapSamples","mapFrames","mapStacks","parseHermesJSStackFrame"],"mappings":"AAA;OCoB;CDiC;OEO;CFyB;AGM;CHe;AIM;CJmB;OKK;CL4B"}},"type":"js/module"}]}