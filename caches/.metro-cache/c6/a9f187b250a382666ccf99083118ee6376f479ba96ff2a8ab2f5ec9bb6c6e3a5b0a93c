{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@sentry/browser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":136,"index":136}}],"key":"v/L5aEun9KHJcPUBAUY+UgyCfuU=","exportNames":["*"]}},{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":137},"end":{"line":2,"column":228,"index":365}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":366},"end":{"line":3,"column":31,"index":397}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"hoist-non-react-statics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":398},"end":{"line":4,"column":59,"index":457}}],"key":"MoIuZFdUef7yl/jvHg7drnKZFmo=","exportNames":["*"]}},{"name":"./debug-build.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":458},"end":{"line":5,"column":47,"index":505}}],"key":"nOZ2HunKnzL39LFdYoJbtaXPZ5g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createReactRouterV6CompatibleTracingIntegration = createReactRouterV6CompatibleTracingIntegration;\n  exports.createV6CompatibleWithSentryReactRouterRouting = createV6CompatibleWithSentryReactRouterRouting;\n  exports.createV6CompatibleWrapCreateBrowserRouter = createV6CompatibleWrapCreateBrowserRouter;\n  exports.createV6CompatibleWrapCreateMemoryRouter = createV6CompatibleWrapCreateMemoryRouter;\n  exports.createV6CompatibleWrapUseRoutes = createV6CompatibleWrapUseRoutes;\n  exports.handleNavigation = handleNavigation;\n  var _browser = require(_dependencyMap[1], \"@sentry/browser\");\n  var _core = require(_dependencyMap[2], \"@sentry/core\");\n  var React = _interopRequireWildcard(require(_dependencyMap[3], \"react\"));\n  var _hoistNonReactStatics = _interopRequireDefault(require(_dependencyMap[4], \"hoist-non-react-statics\"));\n  var _debugBuild = require(_dependencyMap[5], \"./debug-build.js\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  /* eslint-disable max-lines */\n  // Inspired from Donnie McNeal's solution:\n  // https://gist.github.com/wontondon/e8c4bdf2888875e4c755712e99279536\n\n  let _useEffect;\n  let _useLocation;\n  let _useNavigationType;\n  let _createRoutesFromChildren;\n  let _matchRoutes;\n  let _stripBasename = false;\n  const CLIENTS_WITH_INSTRUMENT_NAVIGATION = new WeakSet();\n\n  // Keeping as a global variable for cross-usage in multiple functions\n  const allRoutes = new Set();\n\n  /**\n   * Creates a wrapCreateBrowserRouter function that can be used with all React Router v6 compatible versions.\n   */\n  function createV6CompatibleWrapCreateBrowserRouter(createRouterFunction, version) {\n    if (!_useEffect || !_useLocation || !_useNavigationType || !_matchRoutes) {\n      _debugBuild.DEBUG_BUILD && _core.logger.warn(`reactRouterV${version}Instrumentation was unable to wrap the \\`createRouter\\` function because of one or more missing parameters.`);\n      return createRouterFunction;\n    }\n    return function (routes, opts) {\n      routes.forEach(route => {\n        allRoutes.add(route);\n      });\n      const router = createRouterFunction(routes, opts);\n      const basename = opts && opts.basename;\n      const activeRootSpan = getActiveRootSpan();\n\n      // The initial load ends when `createBrowserRouter` is called.\n      // This is the earliest convenient time to update the transaction name.\n      // Callbacks to `router.subscribe` are not called for the initial load.\n      if (router.state.historyAction === 'POP' && activeRootSpan) {\n        updatePageloadTransaction(activeRootSpan, router.state.location, routes, undefined, basename, Array.from(allRoutes));\n      }\n      router.subscribe(state => {\n        if (state.historyAction === 'PUSH' || state.historyAction === 'POP') {\n          // Wait for the next render if loading an unsettled route\n          if (state.navigation.state !== 'idle') {\n            requestAnimationFrame(() => {\n              handleNavigation({\n                location: state.location,\n                routes,\n                navigationType: state.historyAction,\n                version,\n                basename,\n                allRoutes: Array.from(allRoutes)\n              });\n            });\n          } else {\n            handleNavigation({\n              location: state.location,\n              routes,\n              navigationType: state.historyAction,\n              version,\n              basename,\n              allRoutes: Array.from(allRoutes)\n            });\n          }\n        }\n      });\n      return router;\n    };\n  }\n\n  /**\n   * Creates a wrapCreateMemoryRouter function that can be used with all React Router v6 compatible versions.\n   */\n  function createV6CompatibleWrapCreateMemoryRouter(createRouterFunction, version) {\n    if (!_useEffect || !_useLocation || !_useNavigationType || !_matchRoutes) {\n      _debugBuild.DEBUG_BUILD && _core.logger.warn(`reactRouterV${version}Instrumentation was unable to wrap the \\`createMemoryRouter\\` function because of one or more missing parameters.`);\n      return createRouterFunction;\n    }\n    return function (routes, opts) {\n      routes.forEach(route => {\n        allRoutes.add(route);\n      });\n      const router = createRouterFunction(routes, opts);\n      const basename = opts ? opts.basename : undefined;\n      const activeRootSpan = getActiveRootSpan();\n      let initialEntry = undefined;\n      const initialEntries = opts ? opts.initialEntries : undefined;\n      const initialIndex = opts ? opts.initialIndex : undefined;\n      const hasOnlyOneInitialEntry = initialEntries && initialEntries.length === 1;\n      const hasIndexedEntry = initialIndex !== undefined && initialEntries && initialEntries[initialIndex];\n      initialEntry = hasOnlyOneInitialEntry ? initialEntries[0] : hasIndexedEntry ? initialEntries[initialIndex] : undefined;\n      const location = initialEntry ? typeof initialEntry === 'string' ? {\n        pathname: initialEntry\n      } : initialEntry : router.state.location;\n      if (router.state.historyAction === 'POP' && activeRootSpan) {\n        updatePageloadTransaction(activeRootSpan, location, routes, undefined, basename, Array.from(allRoutes));\n      }\n      router.subscribe(state => {\n        const location = state.location;\n        if (state.historyAction === 'PUSH' || state.historyAction === 'POP') {\n          handleNavigation({\n            location,\n            routes,\n            navigationType: state.historyAction,\n            version,\n            basename,\n            allRoutes: Array.from(allRoutes)\n          });\n        }\n      });\n      return router;\n    };\n  }\n\n  /**\n   * Creates a browser tracing integration that can be used with all React Router v6 compatible versions.\n   */\n  function createReactRouterV6CompatibleTracingIntegration(options, version) {\n    const integration = (0, _browser.browserTracingIntegration)({\n      ...options,\n      instrumentPageLoad: false,\n      instrumentNavigation: false\n    });\n    const {\n      useEffect,\n      useLocation,\n      useNavigationType,\n      createRoutesFromChildren,\n      matchRoutes,\n      stripBasename,\n      instrumentPageLoad = true,\n      instrumentNavigation = true\n    } = options;\n    return {\n      ...integration,\n      setup() {\n        _useEffect = useEffect;\n        _useLocation = useLocation;\n        _useNavigationType = useNavigationType;\n        _matchRoutes = matchRoutes;\n        _createRoutesFromChildren = createRoutesFromChildren;\n        _stripBasename = stripBasename || false;\n      },\n      afterAllSetup(client) {\n        integration.afterAllSetup(client);\n        const initPathName = _browser.WINDOW && _browser.WINDOW.location && _browser.WINDOW.location.pathname;\n        if (instrumentPageLoad && initPathName) {\n          (0, _browser.startBrowserTracingPageLoadSpan)(client, {\n            name: initPathName,\n            attributes: {\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n              [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.pageload.react.reactrouter_v${version}`\n            }\n          });\n        }\n        if (instrumentNavigation) {\n          CLIENTS_WITH_INSTRUMENT_NAVIGATION.add(client);\n        }\n      }\n    };\n  }\n  function createV6CompatibleWrapUseRoutes(origUseRoutes, version) {\n    if (!_useEffect || !_useLocation || !_useNavigationType || !_matchRoutes) {\n      _debugBuild.DEBUG_BUILD && _core.logger.warn('reactRouterV6Instrumentation was unable to wrap `useRoutes` because of one or more missing parameters.');\n      return origUseRoutes;\n    }\n    const SentryRoutes = props => {\n      const isMountRenderPass = React.useRef(true);\n      const {\n        routes,\n        locationArg\n      } = props;\n      const Routes = origUseRoutes(routes, locationArg);\n      const location = _useLocation();\n      const navigationType = _useNavigationType();\n\n      // A value with stable identity to either pick `locationArg` if available or `location` if not\n      const stableLocationParam = typeof locationArg === 'string' || locationArg && locationArg.pathname ? locationArg : location;\n      _useEffect(() => {\n        const normalizedLocation = typeof stableLocationParam === 'string' ? {\n          pathname: stableLocationParam\n        } : stableLocationParam;\n        if (isMountRenderPass.current) {\n          routes.forEach(route => {\n            const extractedChildRoutes = getChildRoutesRecursively(route);\n            extractedChildRoutes.forEach(r => {\n              allRoutes.add(r);\n            });\n          });\n          updatePageloadTransaction(getActiveRootSpan(), normalizedLocation, routes, undefined, undefined, Array.from(allRoutes));\n          isMountRenderPass.current = false;\n        } else {\n          handleNavigation({\n            location: normalizedLocation,\n            routes,\n            navigationType,\n            version,\n            allRoutes: Array.from(allRoutes)\n          });\n        }\n      }, [navigationType, stableLocationParam]);\n      return Routes;\n    };\n\n    // eslint-disable-next-line react/display-name\n    return (routes, locationArg) => {\n      return /*#__PURE__*/React.createElement(SentryRoutes, {\n        routes: routes,\n        locationArg: locationArg\n      });\n    };\n  }\n  function handleNavigation(opts) {\n    const {\n      location,\n      routes,\n      navigationType,\n      version,\n      matches,\n      basename,\n      allRoutes\n    } = opts;\n    const branches = Array.isArray(matches) ? matches : _matchRoutes(routes, location, basename);\n    const client = (0, _core.getClient)();\n    if (!client || !CLIENTS_WITH_INSTRUMENT_NAVIGATION.has(client)) {\n      return;\n    }\n    if ((navigationType === 'PUSH' || navigationType === 'POP') && branches) {\n      let name,\n        source = 'url';\n      const isInDescendantRoute = locationIsInsideDescendantRoute(location, allRoutes || routes);\n      if (isInDescendantRoute) {\n        name = prefixWithSlash(rebuildRoutePathFromAllRoutes(allRoutes || routes, location));\n        source = 'route';\n      }\n      if (!isInDescendantRoute || !name) {\n        [name, source] = getNormalizedName(routes, location, branches, basename);\n      }\n      (0, _browser.startBrowserTracingNavigationSpan)(client, {\n        name,\n        attributes: {\n          [_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n          [_core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n          [_core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.navigation.react.reactrouter_v${version}`\n        }\n      });\n    }\n  }\n\n  /**\n   * Strip the basename from a pathname if exists.\n   *\n   * Vendored and modified from `react-router`\n   * https://github.com/remix-run/react-router/blob/462bb712156a3f739d6139a0f14810b76b002df6/packages/router/utils.ts#L1038\n   */\n  function stripBasenameFromPathname(pathname, basename) {\n    if (!basename || basename === '/') {\n      return pathname;\n    }\n    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n      return pathname;\n    }\n\n    // We want to leave trailing slash behavior in the user's control, so if they\n    // specify a basename with a trailing slash, we should support it\n    const startIndex = basename.endsWith('/') ? basename.length - 1 : basename.length;\n    const nextChar = pathname.charAt(startIndex);\n    if (nextChar && nextChar !== '/') {\n      // pathname does not start with basename/\n      return pathname;\n    }\n    return pathname.slice(startIndex) || '/';\n  }\n  function sendIndexPath(pathBuilder, pathname, basename) {\n    const reconstructedPath = pathBuilder || _stripBasename ? stripBasenameFromPathname(pathname, basename) : pathname;\n    const formattedPath =\n    // If the path ends with a slash, remove it\n    reconstructedPath[reconstructedPath.length - 1] === '/' ? reconstructedPath.slice(0, -1) :\n    // If the path ends with a wildcard, remove it\n    reconstructedPath.slice(-2) === '/*' ? reconstructedPath.slice(0, -1) : reconstructedPath;\n    return [formattedPath, 'route'];\n  }\n  function pathEndsWithWildcard(path) {\n    return path.endsWith('*');\n  }\n  function pathIsWildcardAndHasChildren(path, branch) {\n    return pathEndsWithWildcard(path) && branch.route.children && branch.route.children.length > 0 || false;\n  }\n  function routeIsDescendant(route) {\n    return !!(!route.children && route.element && route.path && route.path.endsWith('/*'));\n  }\n  function locationIsInsideDescendantRoute(location, routes) {\n    const matchedRoutes = _matchRoutes(routes, location);\n    if (matchedRoutes) {\n      for (const match of matchedRoutes) {\n        if (routeIsDescendant(match.route) && pickSplat(match)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function getChildRoutesRecursively(route, allRoutes = new Set()) {\n    if (!allRoutes.has(route)) {\n      allRoutes.add(route);\n      if (route.children && !route.index) {\n        route.children.forEach(child => {\n          const childRoutes = getChildRoutesRecursively(child, allRoutes);\n          childRoutes.forEach(r => allRoutes.add(r));\n        });\n      }\n    }\n    return allRoutes;\n  }\n  function pickPath(match) {\n    return trimWildcard(match.route.path || '');\n  }\n  function pickSplat(match) {\n    return match.params['*'] || '';\n  }\n  function trimWildcard(path) {\n    return path[path.length - 1] === '*' ? path.slice(0, -1) : path;\n  }\n  function trimSlash(path) {\n    return path[path.length - 1] === '/' ? path.slice(0, -1) : path;\n  }\n  function prefixWithSlash(path) {\n    return path[0] === '/' ? path : `/${path}`;\n  }\n  function rebuildRoutePathFromAllRoutes(allRoutes, location) {\n    const matchedRoutes = _matchRoutes(allRoutes, location);\n    if (!matchedRoutes || matchedRoutes.length === 0) {\n      return '';\n    }\n    for (const match of matchedRoutes) {\n      if (match.route.path && match.route.path !== '*') {\n        const path = pickPath(match);\n        const strippedPath = stripBasenameFromPathname(location.pathname, prefixWithSlash(match.pathnameBase));\n        return trimSlash(trimSlash(path || '') + prefixWithSlash(rebuildRoutePathFromAllRoutes(allRoutes.filter(route => route !== match.route), {\n          pathname: strippedPath\n        })));\n      }\n    }\n    return '';\n  }\n  function getNormalizedName(routes, location, branches, basename = '') {\n    if (!routes || routes.length === 0) {\n      return [_stripBasename ? stripBasenameFromPathname(location.pathname, basename) : location.pathname, 'url'];\n    }\n    let pathBuilder = '';\n    if (branches) {\n      for (const branch of branches) {\n        const route = branch.route;\n        if (route) {\n          // Early return if index route\n          if (route.index) {\n            return sendIndexPath(pathBuilder, branch.pathname, basename);\n          }\n          const path = route.path;\n\n          // If path is not a wildcard and has no child routes, append the path\n          if (path && !pathIsWildcardAndHasChildren(path, branch)) {\n            const newPath = path[0] === '/' || pathBuilder[pathBuilder.length - 1] === '/' ? path : `/${path}`;\n            pathBuilder = trimSlash(pathBuilder) + prefixWithSlash(newPath);\n\n            // If the path matches the current location, return the path\n            if (trimSlash(location.pathname) === trimSlash(basename + branch.pathname)) {\n              if (\n              // If the route defined on the element is something like\n              // <Route path=\"/stores/:storeId/products/:productId\" element={<div>Product</div>} />\n              // We should check against the branch.pathname for the number of / separators\n              // TODO(v9): Put the implementation of `getNumberOfUrlSegments` in this file\n              // eslint-disable-next-line deprecation/deprecation\n              (0, _core.getNumberOfUrlSegments)(pathBuilder) !== (0, _core.getNumberOfUrlSegments)(branch.pathname) &&\n              // We should not count wildcard operators in the url segments calculation\n              !pathEndsWithWildcard(pathBuilder)) {\n                return [(_stripBasename ? '' : basename) + newPath, 'route'];\n              }\n\n              // if the last character of the pathbuilder is a wildcard and there are children, remove the wildcard\n              if (pathIsWildcardAndHasChildren(pathBuilder, branch)) {\n                pathBuilder = pathBuilder.slice(0, -1);\n              }\n              return [(_stripBasename ? '' : basename) + pathBuilder, 'route'];\n            }\n          }\n        }\n      }\n    }\n    const fallbackTransactionName = _stripBasename ? stripBasenameFromPathname(location.pathname, basename) : location.pathname || '/';\n    return [fallbackTransactionName, 'url'];\n  }\n  function updatePageloadTransaction(activeRootSpan, location, routes, matches, basename, allRoutes) {\n    const branches = Array.isArray(matches) ? matches : _matchRoutes(allRoutes || routes, location, basename);\n    if (branches) {\n      let name,\n        source = 'url';\n      const isInDescendantRoute = locationIsInsideDescendantRoute(location, allRoutes || routes);\n      if (isInDescendantRoute) {\n        name = prefixWithSlash(rebuildRoutePathFromAllRoutes(allRoutes || routes, location));\n        source = 'route';\n      }\n      if (!isInDescendantRoute || !name) {\n        [name, source] = getNormalizedName(routes, location, branches, basename);\n      }\n      (0, _core.getCurrentScope)().setTransactionName(name || '/');\n      if (activeRootSpan) {\n        activeRootSpan.updateName(name);\n        activeRootSpan.setAttribute(_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function createV6CompatibleWithSentryReactRouterRouting(Routes, version) {\n    if (!_useEffect || !_useLocation || !_useNavigationType || !_createRoutesFromChildren || !_matchRoutes) {\n      _debugBuild.DEBUG_BUILD && _core.logger.warn(`reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.\n      useEffect: ${_useEffect}. useLocation: ${_useLocation}. useNavigationType: ${_useNavigationType}.\n      createRoutesFromChildren: ${_createRoutesFromChildren}. matchRoutes: ${_matchRoutes}.`);\n      return Routes;\n    }\n    const SentryRoutes = props => {\n      const isMountRenderPass = React.useRef(true);\n      const location = _useLocation();\n      const navigationType = _useNavigationType();\n      _useEffect(() => {\n        const routes = _createRoutesFromChildren(props.children);\n        if (isMountRenderPass.current) {\n          routes.forEach(route => {\n            const extractedChildRoutes = getChildRoutesRecursively(route);\n            extractedChildRoutes.forEach(r => {\n              allRoutes.add(r);\n            });\n          });\n          updatePageloadTransaction(getActiveRootSpan(), location, routes, undefined, undefined, Array.from(allRoutes));\n          isMountRenderPass.current = false;\n        } else {\n          handleNavigation({\n            location,\n            routes,\n            navigationType,\n            version,\n            allRoutes: Array.from(allRoutes)\n          });\n        }\n      },\n      // `props.children` is purposely not included in the dependency array, because we do not want to re-run this effect\n      // when the children change. We only want to start transactions when the location or navigation type change.\n      [location, navigationType]);\n\n      // @ts-expect-error Setting more specific React Component typing for `R` generic above\n      // will break advanced type inference done by react router params\n      return /*#__PURE__*/React.createElement(Routes, {\n        ...props\n      });\n    };\n    (0, _hoistNonReactStatics.default)(SentryRoutes, Routes);\n\n    // @ts-expect-error Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n    return SentryRoutes;\n  }\n  function getActiveRootSpan() {\n    const span = (0, _core.getActiveSpan)();\n    const rootSpan = span ? (0, _core.getRootSpan)(span) : undefined;\n    if (!rootSpan) {\n      return undefined;\n    }\n    const op = (0, _core.spanToJSON)(rootSpan).op;\n\n    // Only use this root span if it is a pageload or navigation span\n    return op === 'navigation' || op === 'pageload' ? rootSpan : undefined;\n  }\n});","lineCount":489,"map":[[12,2,1,0],[12,6,1,0,"_browser"],[12,14,1,0],[12,17,1,0,"require"],[12,24,1,0],[12,25,1,0,"_dependencyMap"],[12,39,1,0],[13,2,2,0],[13,6,2,0,"_core"],[13,11,2,0],[13,14,2,0,"require"],[13,21,2,0],[13,22,2,0,"_dependencyMap"],[13,36,2,0],[14,2,3,0],[14,6,3,0,"React"],[14,11,3,0],[14,14,3,0,"_interopRequireWildcard"],[14,37,3,0],[14,38,3,0,"require"],[14,45,3,0],[14,46,3,0,"_dependencyMap"],[14,60,3,0],[15,2,4,0],[15,6,4,0,"_hoistNonReactStatics"],[15,27,4,0],[15,30,4,0,"_interopRequireDefault"],[15,52,4,0],[15,53,4,0,"require"],[15,60,4,0],[15,61,4,0,"_dependencyMap"],[15,75,4,0],[16,2,5,0],[16,6,5,0,"_debugBuild"],[16,17,5,0],[16,20,5,0,"require"],[16,27,5,0],[16,28,5,0,"_dependencyMap"],[16,42,5,0],[17,2,5,47],[17,11,5,47,"_interopRequireWildcard"],[17,35,5,47,"e"],[17,36,5,47],[17,38,5,47,"t"],[17,39,5,47],[17,68,5,47,"WeakMap"],[17,75,5,47],[17,81,5,47,"r"],[17,82,5,47],[17,89,5,47,"WeakMap"],[17,96,5,47],[17,100,5,47,"n"],[17,101,5,47],[17,108,5,47,"WeakMap"],[17,115,5,47],[17,127,5,47,"_interopRequireWildcard"],[17,150,5,47],[17,162,5,47,"_interopRequireWildcard"],[17,163,5,47,"e"],[17,164,5,47],[17,166,5,47,"t"],[17,167,5,47],[17,176,5,47,"t"],[17,177,5,47],[17,181,5,47,"e"],[17,182,5,47],[17,186,5,47,"e"],[17,187,5,47],[17,188,5,47,"__esModule"],[17,198,5,47],[17,207,5,47,"e"],[17,208,5,47],[17,214,5,47,"o"],[17,215,5,47],[17,217,5,47,"i"],[17,218,5,47],[17,220,5,47,"f"],[17,221,5,47],[17,226,5,47,"__proto__"],[17,235,5,47],[17,243,5,47,"default"],[17,250,5,47],[17,252,5,47,"e"],[17,253,5,47],[17,270,5,47,"e"],[17,271,5,47],[17,294,5,47,"e"],[17,295,5,47],[17,320,5,47,"e"],[17,321,5,47],[17,330,5,47,"f"],[17,331,5,47],[17,337,5,47,"o"],[17,338,5,47],[17,341,5,47,"t"],[17,342,5,47],[17,345,5,47,"n"],[17,346,5,47],[17,349,5,47,"r"],[17,350,5,47],[17,358,5,47,"o"],[17,359,5,47],[17,360,5,47,"has"],[17,363,5,47],[17,364,5,47,"e"],[17,365,5,47],[17,375,5,47,"o"],[17,376,5,47],[17,377,5,47,"get"],[17,380,5,47],[17,381,5,47,"e"],[17,382,5,47],[17,385,5,47,"o"],[17,386,5,47],[17,387,5,47,"set"],[17,390,5,47],[17,391,5,47,"e"],[17,392,5,47],[17,394,5,47,"f"],[17,395,5,47],[17,411,5,47,"t"],[17,412,5,47],[17,416,5,47,"e"],[17,417,5,47],[17,433,5,47,"t"],[17,434,5,47],[17,441,5,47,"hasOwnProperty"],[17,455,5,47],[17,456,5,47,"call"],[17,460,5,47],[17,461,5,47,"e"],[17,462,5,47],[17,464,5,47,"t"],[17,465,5,47],[17,472,5,47,"i"],[17,473,5,47],[17,477,5,47,"o"],[17,478,5,47],[17,481,5,47,"Object"],[17,487,5,47],[17,488,5,47,"defineProperty"],[17,502,5,47],[17,507,5,47,"Object"],[17,513,5,47],[17,514,5,47,"getOwnPropertyDescriptor"],[17,538,5,47],[17,539,5,47,"e"],[17,540,5,47],[17,542,5,47,"t"],[17,543,5,47],[17,550,5,47,"i"],[17,551,5,47],[17,552,5,47,"get"],[17,555,5,47],[17,559,5,47,"i"],[17,560,5,47],[17,561,5,47,"set"],[17,564,5,47],[17,568,5,47,"o"],[17,569,5,47],[17,570,5,47,"f"],[17,571,5,47],[17,573,5,47,"t"],[17,574,5,47],[17,576,5,47,"i"],[17,577,5,47],[17,581,5,47,"f"],[17,582,5,47],[17,583,5,47,"t"],[17,584,5,47],[17,588,5,47,"e"],[17,589,5,47],[17,590,5,47,"t"],[17,591,5,47],[17,602,5,47,"f"],[17,603,5,47],[17,608,5,47,"e"],[17,609,5,47],[17,611,5,47,"t"],[17,612,5,47],[18,2,7,0],[19,2,8,0],[20,2,9,0],[22,2,12,0],[22,6,12,4,"_useEffect"],[22,16,12,14],[23,2,13,0],[23,6,13,4,"_useLocation"],[23,18,13,16],[24,2,14,0],[24,6,14,4,"_useNavigationType"],[24,24,14,22],[25,2,15,0],[25,6,15,4,"_createRoutesFromChildren"],[25,31,15,29],[26,2,16,0],[26,6,16,4,"_matchRoutes"],[26,18,16,16],[27,2,17,0],[27,6,17,4,"_stripBasename"],[27,20,17,18],[27,23,17,21],[27,28,17,26],[28,2,19,0],[28,8,19,6,"CLIENTS_WITH_INSTRUMENT_NAVIGATION"],[28,42,19,40],[28,45,19,43],[28,49,19,47,"WeakSet"],[28,56,19,54],[28,57,19,55],[28,58,19,56],[30,2,21,0],[31,2,22,0],[31,8,22,6,"allRoutes"],[31,17,22,15],[31,20,22,18],[31,24,22,22,"Set"],[31,27,22,25],[31,28,22,26],[31,29,22,27],[33,2,24,0],[34,0,25,0],[35,0,26,0],[36,2,27,0],[36,11,27,9,"createV6CompatibleWrapCreateBrowserRouter"],[36,52,27,50,"createV6CompatibleWrapCreateBrowserRouter"],[36,53,30,2,"createRouterFunction"],[36,73,30,22],[36,75,31,2,"version"],[36,82,31,9],[36,84,32,2],[37,4,33,2],[37,8,33,6],[37,9,33,7,"_useEffect"],[37,19,33,17],[37,23,33,21],[37,24,33,22,"_useLocation"],[37,36,33,34],[37,40,33,38],[37,41,33,39,"_useNavigationType"],[37,59,33,57],[37,63,33,61],[37,64,33,62,"_matchRoutes"],[37,76,33,74],[37,78,33,76],[38,6,34,4,"DEBUG_BUILD"],[38,29,34,15],[38,33,35,6,"logger"],[38,45,35,12],[38,46,35,13,"warn"],[38,50,35,17],[38,51,36,8],[38,66,36,23,"version"],[38,73,36,30],[38,182,37,6],[38,183,37,7],[39,6,39,4],[39,13,39,11,"createRouterFunction"],[39,33,39,31],[40,4,40,2],[41,4,42,2],[41,11,42,9],[41,21,42,19,"routes"],[41,27,42,25],[41,29,42,27,"opts"],[41,33,42,31],[41,35,42,33],[42,6,43,4,"routes"],[42,12,43,10],[42,13,43,11,"forEach"],[42,20,43,18],[42,21,43,19,"route"],[42,26,43,24],[42,30,43,28],[43,8,44,6,"allRoutes"],[43,17,44,15],[43,18,44,16,"add"],[43,21,44,19],[43,22,44,20,"route"],[43,27,44,25],[43,28,44,26],[44,6,45,4],[44,7,45,5],[44,8,45,6],[45,6,47,4],[45,12,47,10,"router"],[45,18,47,16],[45,21,47,19,"createRouterFunction"],[45,41,47,39],[45,42,47,40,"routes"],[45,48,47,46],[45,50,47,48,"opts"],[45,54,47,52],[45,55,47,53],[46,6,48,4],[46,12,48,10,"basename"],[46,20,48,18],[46,23,48,21,"opts"],[46,27,48,25],[46,31,48,29,"opts"],[46,35,48,33],[46,36,48,34,"basename"],[46,44,48,42],[47,6,50,4],[47,12,50,10,"activeRootSpan"],[47,26,50,24],[47,29,50,27,"getActiveRootSpan"],[47,46,50,44],[47,47,50,45],[47,48,50,46],[49,6,52,4],[50,6,53,4],[51,6,54,4],[52,6,55,4],[52,10,55,8,"router"],[52,16,55,14],[52,17,55,15,"state"],[52,22,55,20],[52,23,55,21,"historyAction"],[52,36,55,34],[52,41,55,39],[52,46,55,44],[52,50,55,48,"activeRootSpan"],[52,64,55,62],[52,66,55,64],[53,8,56,6,"updatePageloadTransaction"],[53,33,56,31],[53,34,57,8,"activeRootSpan"],[53,48,57,22],[53,50,58,8,"router"],[53,56,58,14],[53,57,58,15,"state"],[53,62,58,20],[53,63,58,21,"location"],[53,71,58,29],[53,73,59,8,"routes"],[53,79,59,14],[53,81,60,8,"undefined"],[53,90,60,17],[53,92,61,8,"basename"],[53,100,61,16],[53,102,62,8,"Array"],[53,107,62,13],[53,108,62,14,"from"],[53,112,62,18],[53,113,62,19,"allRoutes"],[53,122,62,28],[53,123,63,6],[53,124,63,7],[54,6,64,4],[55,6,66,4,"router"],[55,12,66,10],[55,13,66,11,"subscribe"],[55,22,66,20],[55,23,66,22,"state"],[55,28,66,27],[55,32,66,32],[56,8,67,6],[56,12,67,10,"state"],[56,17,67,15],[56,18,67,16,"historyAction"],[56,31,67,29],[56,36,67,34],[56,42,67,40],[56,46,67,44,"state"],[56,51,67,49],[56,52,67,50,"historyAction"],[56,65,67,63],[56,70,67,68],[56,75,67,73],[56,77,67,75],[57,10,68,8],[58,10,69,8],[58,14,69,12,"state"],[58,19,69,17],[58,20,69,18,"navigation"],[58,30,69,28],[58,31,69,29,"state"],[58,36,69,34],[58,41,69,39],[58,47,69,45],[58,49,69,47],[59,12,70,10,"requestAnimationFrame"],[59,33,70,31],[59,34,70,32],[59,40,70,38],[60,14,71,12,"handleNavigation"],[60,30,71,28],[60,31,71,29],[61,16,72,14,"location"],[61,24,72,22],[61,26,72,24,"state"],[61,31,72,29],[61,32,72,30,"location"],[61,40,72,38],[62,16,73,14,"routes"],[62,22,73,20],[63,16,74,14,"navigationType"],[63,30,74,28],[63,32,74,30,"state"],[63,37,74,35],[63,38,74,36,"historyAction"],[63,51,74,49],[64,16,75,14,"version"],[64,23,75,21],[65,16,76,14,"basename"],[65,24,76,22],[66,16,77,14,"allRoutes"],[66,25,77,23],[66,27,77,25,"Array"],[66,32,77,30],[66,33,77,31,"from"],[66,37,77,35],[66,38,77,36,"allRoutes"],[66,47,77,45],[67,14,78,12],[67,15,78,13],[67,16,78,14],[68,12,79,10],[68,13,79,11],[68,14,79,12],[69,10,80,8],[69,11,80,9],[69,17,80,15],[70,12,81,10,"handleNavigation"],[70,28,81,26],[70,29,81,27],[71,14,82,12,"location"],[71,22,82,20],[71,24,82,22,"state"],[71,29,82,27],[71,30,82,28,"location"],[71,38,82,36],[72,14,83,12,"routes"],[72,20,83,18],[73,14,84,12,"navigationType"],[73,28,84,26],[73,30,84,28,"state"],[73,35,84,33],[73,36,84,34,"historyAction"],[73,49,84,47],[74,14,85,12,"version"],[74,21,85,19],[75,14,86,12,"basename"],[75,22,86,20],[76,14,87,12,"allRoutes"],[76,23,87,21],[76,25,87,23,"Array"],[76,30,87,28],[76,31,87,29,"from"],[76,35,87,33],[76,36,87,34,"allRoutes"],[76,45,87,43],[77,12,88,10],[77,13,88,11],[77,14,88,12],[78,10,89,8],[79,8,90,6],[80,6,91,4],[80,7,91,5],[80,8,91,6],[81,6,93,4],[81,13,93,11,"router"],[81,19,93,17],[82,4,94,2],[82,5,94,3],[83,2,95,0],[85,2,97,0],[86,0,98,0],[87,0,99,0],[88,2,100,0],[88,11,100,9,"createV6CompatibleWrapCreateMemoryRouter"],[88,51,100,49,"createV6CompatibleWrapCreateMemoryRouter"],[88,52,103,2,"createRouterFunction"],[88,72,103,22],[88,74,104,2,"version"],[88,81,104,9],[88,83,105,2],[89,4,106,2],[89,8,106,6],[89,9,106,7,"_useEffect"],[89,19,106,17],[89,23,106,21],[89,24,106,22,"_useLocation"],[89,36,106,34],[89,40,106,38],[89,41,106,39,"_useNavigationType"],[89,59,106,57],[89,63,106,61],[89,64,106,62,"_matchRoutes"],[89,76,106,74],[89,78,106,76],[90,6,107,4,"DEBUG_BUILD"],[90,29,107,15],[90,33,108,6,"logger"],[90,45,108,12],[90,46,108,13,"warn"],[90,50,108,17],[90,51,109,8],[90,66,109,23,"version"],[90,73,109,30],[90,188,110,6],[90,189,110,7],[91,6,112,4],[91,13,112,11,"createRouterFunction"],[91,33,112,31],[92,4,113,2],[93,4,115,2],[93,11,115,9],[93,21,116,4,"routes"],[93,27,116,10],[93,29,117,4,"opts"],[93,33,117,8],[93,35,120,4],[94,6,121,4,"routes"],[94,12,121,10],[94,13,121,11,"forEach"],[94,20,121,18],[94,21,121,19,"route"],[94,26,121,24],[94,30,121,28],[95,8,122,6,"allRoutes"],[95,17,122,15],[95,18,122,16,"add"],[95,21,122,19],[95,22,122,20,"route"],[95,27,122,25],[95,28,122,26],[96,6,123,4],[96,7,123,5],[96,8,123,6],[97,6,125,4],[97,12,125,10,"router"],[97,18,125,16],[97,21,125,19,"createRouterFunction"],[97,41,125,39],[97,42,125,40,"routes"],[97,48,125,46],[97,50,125,48,"opts"],[97,54,125,52],[97,55,125,53],[98,6,126,4],[98,12,126,10,"basename"],[98,20,126,18],[98,23,126,21,"opts"],[98,27,126,25],[98,30,126,28,"opts"],[98,34,126,32],[98,35,126,33,"basename"],[98,43,126,41],[98,46,126,44,"undefined"],[98,55,126,53],[99,6,128,4],[99,12,128,10,"activeRootSpan"],[99,26,128,24],[99,29,128,27,"getActiveRootSpan"],[99,46,128,44],[99,47,128,45],[99,48,128,46],[100,6,129,4],[100,10,129,8,"initialEntry"],[100,22,129,20],[100,25,129,23,"undefined"],[100,34,129,32],[101,6,131,4],[101,12,131,10,"initialEntries"],[101,26,131,24],[101,29,131,27,"opts"],[101,33,131,31],[101,36,131,34,"opts"],[101,40,131,38],[101,41,131,39,"initialEntries"],[101,55,131,53],[101,58,131,56,"undefined"],[101,67,131,65],[102,6,132,4],[102,12,132,10,"initialIndex"],[102,24,132,22],[102,27,132,25,"opts"],[102,31,132,29],[102,34,132,32,"opts"],[102,38,132,36],[102,39,132,37,"initialIndex"],[102,51,132,49],[102,54,132,52,"undefined"],[102,63,132,61],[103,6,134,4],[103,12,134,10,"hasOnlyOneInitialEntry"],[103,34,134,32],[103,37,134,35,"initialEntries"],[103,51,134,49],[103,55,134,53,"initialEntries"],[103,69,134,67],[103,70,134,68,"length"],[103,76,134,74],[103,81,134,79],[103,82,134,80],[104,6,135,4],[104,12,135,10,"hasIndexedEntry"],[104,27,135,25],[104,30,135,28,"initialIndex"],[104,42,135,40],[104,47,135,45,"undefined"],[104,56,135,54],[104,60,135,58,"initialEntries"],[104,74,135,72],[104,78,135,76,"initialEntries"],[104,92,135,90],[104,93,135,91,"initialIndex"],[104,105,135,103],[104,106,135,104],[105,6,137,4,"initialEntry"],[105,18,137,16],[105,21,137,19,"hasOnlyOneInitialEntry"],[105,43,137,41],[105,46,138,8,"initialEntries"],[105,60,138,22],[105,61,138,23],[105,62,138,24],[105,63,138,25],[105,66,139,8,"hasIndexedEntry"],[105,81,139,23],[105,84,140,10,"initialEntries"],[105,98,140,24],[105,99,140,25,"initialIndex"],[105,111,140,37],[105,112,140,38],[105,115,141,10,"undefined"],[105,124,141,19],[106,6,143,4],[106,12,143,10,"location"],[106,20,143,18],[106,23,143,21,"initialEntry"],[106,35,143,33],[106,38,144,8],[106,45,144,15,"initialEntry"],[106,57,144,27],[106,62,144,32],[106,70,144,40],[106,73,145,10],[107,8,145,12,"pathname"],[107,16,145,20],[107,18,145,22,"initialEntry"],[108,6,145,35],[108,7,145,36],[108,10,146,10,"initialEntry"],[108,22,146,22],[108,25,147,8,"router"],[108,31,147,14],[108,32,147,15,"state"],[108,37,147,20],[108,38,147,21,"location"],[108,46,147,29],[109,6,149,4],[109,10,149,8,"router"],[109,16,149,14],[109,17,149,15,"state"],[109,22,149,20],[109,23,149,21,"historyAction"],[109,36,149,34],[109,41,149,39],[109,46,149,44],[109,50,149,48,"activeRootSpan"],[109,64,149,62],[109,66,149,64],[110,8,150,6,"updatePageloadTransaction"],[110,33,150,31],[110,34,150,32,"activeRootSpan"],[110,48,150,46],[110,50,150,48,"location"],[110,58,150,56],[110,60,150,58,"routes"],[110,66,150,64],[110,68,150,66,"undefined"],[110,77,150,75],[110,79,150,77,"basename"],[110,87,150,85],[110,89,150,87,"Array"],[110,94,150,92],[110,95,150,93,"from"],[110,99,150,97],[110,100,150,98,"allRoutes"],[110,109,150,107],[110,110,150,108],[110,111,150,109],[111,6,151,4],[112,6,153,4,"router"],[112,12,153,10],[112,13,153,11,"subscribe"],[112,22,153,20],[112,23,153,22,"state"],[112,28,153,27],[112,32,153,32],[113,8,154,6],[113,14,154,12,"location"],[113,22,154,20],[113,25,154,23,"state"],[113,30,154,28],[113,31,154,29,"location"],[113,39,154,37],[114,8,155,6],[114,12,155,10,"state"],[114,17,155,15],[114,18,155,16,"historyAction"],[114,31,155,29],[114,36,155,34],[114,42,155,40],[114,46,155,44,"state"],[114,51,155,49],[114,52,155,50,"historyAction"],[114,65,155,63],[114,70,155,68],[114,75,155,73],[114,77,155,75],[115,10,156,8,"handleNavigation"],[115,26,156,24],[115,27,156,25],[116,12,157,10,"location"],[116,20,157,18],[117,12,158,10,"routes"],[117,18,158,16],[118,12,159,10,"navigationType"],[118,26,159,24],[118,28,159,26,"state"],[118,33,159,31],[118,34,159,32,"historyAction"],[118,47,159,45],[119,12,160,10,"version"],[119,19,160,17],[120,12,161,10,"basename"],[120,20,161,18],[121,12,162,10,"allRoutes"],[121,21,162,19],[121,23,162,21,"Array"],[121,28,162,26],[121,29,162,27,"from"],[121,33,162,31],[121,34,162,32,"allRoutes"],[121,43,162,41],[122,10,163,8],[122,11,163,9],[122,12,163,10],[123,8,164,6],[124,6,165,4],[124,7,165,5],[124,8,165,6],[125,6,167,4],[125,13,167,11,"router"],[125,19,167,17],[126,4,168,2],[126,5,168,3],[127,2,169,0],[129,2,171,0],[130,0,172,0],[131,0,173,0],[132,2,174,0],[132,11,174,9,"createReactRouterV6CompatibleTracingIntegration"],[132,58,174,56,"createReactRouterV6CompatibleTracingIntegration"],[132,59,175,2,"options"],[132,66,175,9],[132,68,176,2,"version"],[132,75,176,9],[132,77,177,2],[133,4,178,2],[133,10,178,8,"integration"],[133,21,178,19],[133,24,178,22],[133,28,178,22,"browserTracingIntegration"],[133,62,178,47],[133,64,178,48],[134,6,179,4],[134,9,179,7,"options"],[134,16,179,14],[135,6,180,4,"instrumentPageLoad"],[135,24,180,22],[135,26,180,24],[135,31,180,29],[136,6,181,4,"instrumentNavigation"],[136,26,181,24],[136,28,181,26],[137,4,182,2],[137,5,182,3],[137,6,182,4],[138,4,184,2],[138,10,184,8],[139,6,185,4,"useEffect"],[139,15,185,13],[140,6,186,4,"useLocation"],[140,17,186,15],[141,6,187,4,"useNavigationType"],[141,23,187,21],[142,6,188,4,"createRoutesFromChildren"],[142,30,188,28],[143,6,189,4,"matchRoutes"],[143,17,189,15],[144,6,190,4,"stripBasename"],[144,19,190,17],[145,6,191,4,"instrumentPageLoad"],[145,24,191,22],[145,27,191,25],[145,31,191,29],[146,6,192,4,"instrumentNavigation"],[146,26,192,24],[146,29,192,27],[147,4,193,2],[147,5,193,3],[147,8,193,6,"options"],[147,15,193,13],[148,4,195,2],[148,11,195,9],[149,6,196,4],[149,9,196,7,"integration"],[149,20,196,18],[150,6,197,4,"setup"],[150,11,197,9,"setup"],[150,12,197,9],[150,14,197,12],[151,8,198,6,"_useEffect"],[151,18,198,16],[151,21,198,19,"useEffect"],[151,30,198,28],[152,8,199,6,"_useLocation"],[152,20,199,18],[152,23,199,21,"useLocation"],[152,34,199,32],[153,8,200,6,"_useNavigationType"],[153,26,200,24],[153,29,200,27,"useNavigationType"],[153,46,200,44],[154,8,201,6,"_matchRoutes"],[154,20,201,18],[154,23,201,21,"matchRoutes"],[154,34,201,32],[155,8,202,6,"_createRoutesFromChildren"],[155,33,202,31],[155,36,202,34,"createRoutesFromChildren"],[155,60,202,58],[156,8,203,6,"_stripBasename"],[156,22,203,20],[156,25,203,23,"stripBasename"],[156,38,203,36],[156,42,203,40],[156,47,203,45],[157,6,204,4],[157,7,204,5],[158,6,205,4,"afterAllSetup"],[158,19,205,17,"afterAllSetup"],[158,20,205,18,"client"],[158,26,205,24],[158,28,205,26],[159,8,206,6,"integration"],[159,19,206,17],[159,20,206,18,"afterAllSetup"],[159,33,206,31],[159,34,206,32,"client"],[159,40,206,38],[159,41,206,39],[160,8,208,6],[160,14,208,12,"initPathName"],[160,26,208,24],[160,29,208,27,"WINDOW"],[160,44,208,33],[160,48,208,37,"WINDOW"],[160,63,208,43],[160,64,208,44,"location"],[160,72,208,52],[160,76,208,56,"WINDOW"],[160,91,208,62],[160,92,208,63,"location"],[160,100,208,71],[160,101,208,72,"pathname"],[160,109,208,80],[161,8,209,6],[161,12,209,10,"instrumentPageLoad"],[161,30,209,28],[161,34,209,32,"initPathName"],[161,46,209,44],[161,48,209,46],[162,10,210,8],[162,14,210,8,"startBrowserTracingPageLoadSpan"],[162,54,210,39],[162,56,210,40,"client"],[162,62,210,46],[162,64,210,48],[163,12,211,10,"name"],[163,16,211,14],[163,18,211,16,"initPathName"],[163,30,211,28],[164,12,212,10,"attributes"],[164,22,212,20],[164,24,212,22],[165,14,213,12],[165,15,213,13,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[165,53,213,45],[165,56,213,48],[165,61,213,53],[166,14,214,12],[166,15,214,13,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[166,49,214,41],[166,52,214,44],[166,62,214,54],[167,14,215,12],[167,15,215,13,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[167,53,215,45],[167,56,215,48],[167,92,215,84,"version"],[167,99,215,91],[168,12,216,10],[169,10,217,8],[169,11,217,9],[169,12,217,10],[170,8,218,6],[171,8,220,6],[171,12,220,10,"instrumentNavigation"],[171,32,220,30],[171,34,220,32],[172,10,221,8,"CLIENTS_WITH_INSTRUMENT_NAVIGATION"],[172,44,221,42],[172,45,221,43,"add"],[172,48,221,46],[172,49,221,47,"client"],[172,55,221,53],[172,56,221,54],[173,8,222,6],[174,6,223,4],[175,4,224,2],[175,5,224,3],[176,2,225,0],[177,2,227,0],[177,11,227,9,"createV6CompatibleWrapUseRoutes"],[177,42,227,40,"createV6CompatibleWrapUseRoutes"],[177,43,227,41,"origUseRoutes"],[177,56,227,54],[177,58,227,56,"version"],[177,65,227,63],[177,67,227,65],[178,4,228,2],[178,8,228,6],[178,9,228,7,"_useEffect"],[178,19,228,17],[178,23,228,21],[178,24,228,22,"_useLocation"],[178,36,228,34],[178,40,228,38],[178,41,228,39,"_useNavigationType"],[178,59,228,57],[178,63,228,61],[178,64,228,62,"_matchRoutes"],[178,76,228,74],[178,78,228,76],[179,6,229,4,"DEBUG_BUILD"],[179,29,229,15],[179,33,230,6,"logger"],[179,45,230,12],[179,46,230,13,"warn"],[179,50,230,17],[179,51,231,8],[179,155,232,6],[179,156,232,7],[180,6,234,4],[180,13,234,11,"origUseRoutes"],[180,26,234,24],[181,4,235,2],[182,4,237,2],[182,10,237,8,"SentryRoutes"],[182,22,237,20],[182,25,239,4,"props"],[182,30,239,9],[182,34,239,14],[183,6,240,4],[183,12,240,10,"isMountRenderPass"],[183,29,240,27],[183,32,240,30,"React"],[183,37,240,35],[183,38,240,36,"useRef"],[183,44,240,42],[183,45,240,43],[183,49,240,47],[183,50,240,48],[184,6,241,4],[184,12,241,10],[185,8,241,12,"routes"],[185,14,241,18],[186,8,241,20,"locationArg"],[187,6,241,32],[187,7,241,33],[187,10,241,36,"props"],[187,15,241,41],[188,6,243,4],[188,12,243,10,"Routes"],[188,18,243,16],[188,21,243,19,"origUseRoutes"],[188,34,243,32],[188,35,243,33,"routes"],[188,41,243,39],[188,43,243,41,"locationArg"],[188,54,243,52],[188,55,243,53],[189,6,245,4],[189,12,245,10,"location"],[189,20,245,18],[189,23,245,21,"_useLocation"],[189,35,245,33],[189,36,245,34],[189,37,245,35],[190,6,246,4],[190,12,246,10,"navigationType"],[190,26,246,24],[190,29,246,27,"_useNavigationType"],[190,47,246,45],[190,48,246,46],[190,49,246,47],[192,6,248,4],[193,6,249,4],[193,12,249,10,"stableLocationParam"],[193,31,249,29],[193,34,250,6],[193,41,250,13,"locationArg"],[193,52,250,24],[193,57,250,29],[193,65,250,37],[193,69,250,42,"locationArg"],[193,80,250,53],[193,84,250,57,"locationArg"],[193,95,250,68],[193,96,250,69,"pathname"],[193,104,250,78],[193,107,251,11,"locationArg"],[193,118,251,22],[193,121,252,10,"location"],[193,129,252,18],[194,6,254,4,"_useEffect"],[194,16,254,14],[194,17,254,15],[194,23,254,21],[195,8,255,6],[195,14,255,12,"normalizedLocation"],[195,32,255,30],[195,35,256,8],[195,42,256,15,"stableLocationParam"],[195,61,256,34],[195,66,256,39],[195,74,256,47],[195,77,256,50],[196,10,256,52,"pathname"],[196,18,256,60],[196,20,256,62,"stableLocationParam"],[197,8,256,82],[197,9,256,83],[197,12,256,86,"stableLocationParam"],[197,31,256,105],[198,8,258,6],[198,12,258,10,"isMountRenderPass"],[198,29,258,27],[198,30,258,28,"current"],[198,37,258,35],[198,39,258,37],[199,10,259,8,"routes"],[199,16,259,14],[199,17,259,15,"forEach"],[199,24,259,22],[199,25,259,23,"route"],[199,30,259,28],[199,34,259,32],[200,12,260,10],[200,18,260,16,"extractedChildRoutes"],[200,38,260,36],[200,41,260,39,"getChildRoutesRecursively"],[200,66,260,64],[200,67,260,65,"route"],[200,72,260,70],[200,73,260,71],[201,12,262,10,"extractedChildRoutes"],[201,32,262,30],[201,33,262,31,"forEach"],[201,40,262,38],[201,41,262,39,"r"],[201,42,262,40],[201,46,262,44],[202,14,263,12,"allRoutes"],[202,23,263,21],[202,24,263,22,"add"],[202,27,263,25],[202,28,263,26,"r"],[202,29,263,27],[202,30,263,28],[203,12,264,10],[203,13,264,11],[203,14,264,12],[204,10,265,8],[204,11,265,9],[204,12,265,10],[205,10,267,8,"updatePageloadTransaction"],[205,35,267,33],[205,36,268,10,"getActiveRootSpan"],[205,53,268,27],[205,54,268,28],[205,55,268,29],[205,57,269,10,"normalizedLocation"],[205,75,269,28],[205,77,270,10,"routes"],[205,83,270,16],[205,85,271,10,"undefined"],[205,94,271,19],[205,96,272,10,"undefined"],[205,105,272,19],[205,107,273,10,"Array"],[205,112,273,15],[205,113,273,16,"from"],[205,117,273,20],[205,118,273,21,"allRoutes"],[205,127,273,30],[205,128,274,8],[205,129,274,9],[206,10,275,8,"isMountRenderPass"],[206,27,275,25],[206,28,275,26,"current"],[206,35,275,33],[206,38,275,36],[206,43,275,41],[207,8,276,6],[207,9,276,7],[207,15,276,13],[208,10,277,8,"handleNavigation"],[208,26,277,24],[208,27,277,25],[209,12,278,10,"location"],[209,20,278,18],[209,22,278,20,"normalizedLocation"],[209,40,278,38],[210,12,279,10,"routes"],[210,18,279,16],[211,12,280,10,"navigationType"],[211,26,280,24],[212,12,281,10,"version"],[212,19,281,17],[213,12,282,10,"allRoutes"],[213,21,282,19],[213,23,282,21,"Array"],[213,28,282,26],[213,29,282,27,"from"],[213,33,282,31],[213,34,282,32,"allRoutes"],[213,43,282,41],[214,10,283,8],[214,11,283,9],[214,12,283,10],[215,8,284,6],[216,6,285,4],[216,7,285,5],[216,9,285,7],[216,10,285,8,"navigationType"],[216,24,285,22],[216,26,285,24,"stableLocationParam"],[216,45,285,43],[216,46,285,44],[216,47,285,45],[217,6,287,4],[217,13,287,11,"Routes"],[217,19,287,17],[218,4,288,2],[218,5,288,3],[220,4,290,2],[221,4,291,2],[221,11,291,9],[221,12,291,10,"routes"],[221,18,291,16],[221,20,291,18,"locationArg"],[221,31,291,29],[221,36,291,34],[222,6,292,4],[222,26,292,11,"React"],[222,31,292,16],[222,32,292,17,"createElement"],[222,45,292,30],[222,46,292,31,"SentryRoutes"],[222,58,292,43],[222,60,292,45],[223,8,292,47,"routes"],[223,14,292,53],[223,16,292,55,"routes"],[223,22,292,61],[224,8,292,63,"locationArg"],[224,19,292,74],[224,21,292,76,"locationArg"],[225,6,292,88],[225,7,292,90],[225,8,292,91],[226,4,293,2],[226,5,293,3],[227,2,294,0],[228,2,296,0],[228,11,296,9,"handleNavigation"],[228,27,296,25,"handleNavigation"],[228,28,296,26,"opts"],[228,32,296,30],[228,34,298,2],[229,4,299,2],[229,10,299,8],[230,6,299,10,"location"],[230,14,299,18],[231,6,299,20,"routes"],[231,12,299,26],[232,6,299,28,"navigationType"],[232,20,299,42],[233,6,299,44,"version"],[233,13,299,51],[234,6,299,53,"matches"],[234,13,299,60],[235,6,299,62,"basename"],[235,14,299,70],[236,6,299,72,"allRoutes"],[237,4,299,82],[237,5,299,83],[237,8,299,86,"opts"],[237,12,299,90],[238,4,300,2],[238,10,300,8,"branches"],[238,18,300,16],[238,21,300,19,"Array"],[238,26,300,24],[238,27,300,25,"isArray"],[238,34,300,32],[238,35,300,33,"matches"],[238,42,300,40],[238,43,300,41],[238,46,300,44,"matches"],[238,53,300,51],[238,56,300,54,"_matchRoutes"],[238,68,300,66],[238,69,300,67,"routes"],[238,75,300,73],[238,77,300,75,"location"],[238,85,300,83],[238,87,300,85,"basename"],[238,95,300,93],[238,96,300,94],[239,4,302,2],[239,10,302,8,"client"],[239,16,302,14],[239,19,302,17],[239,23,302,17,"getClient"],[239,38,302,26],[239,40,302,27],[239,41,302,28],[240,4,303,2],[240,8,303,6],[240,9,303,7,"client"],[240,15,303,13],[240,19,303,17],[240,20,303,18,"CLIENTS_WITH_INSTRUMENT_NAVIGATION"],[240,54,303,52],[240,55,303,53,"has"],[240,58,303,56],[240,59,303,57,"client"],[240,65,303,63],[240,66,303,64],[240,68,303,66],[241,6,304,4],[242,4,305,2],[243,4,307,2],[243,8,307,6],[243,9,307,7,"navigationType"],[243,23,307,21],[243,28,307,26],[243,34,307,32],[243,38,307,36,"navigationType"],[243,52,307,50],[243,57,307,55],[243,62,307,60],[243,67,307,65,"branches"],[243,75,307,73],[243,77,307,75],[244,6,308,4],[244,10,308,8,"name"],[244,14,308,12],[245,8,309,6,"source"],[245,14,309,12],[245,17,309,15],[245,22,309,20],[246,6,310,4],[246,12,310,10,"isInDescendantRoute"],[246,31,310,29],[246,34,310,32,"locationIsInsideDescendantRoute"],[246,65,310,63],[246,66,310,64,"location"],[246,74,310,72],[246,76,310,74,"allRoutes"],[246,85,310,83],[246,89,310,87,"routes"],[246,95,310,93],[246,96,310,94],[247,6,312,4],[247,10,312,8,"isInDescendantRoute"],[247,29,312,27],[247,31,312,29],[248,8,313,6,"name"],[248,12,313,10],[248,15,313,13,"prefixWithSlash"],[248,30,313,28],[248,31,313,29,"rebuildRoutePathFromAllRoutes"],[248,60,313,58],[248,61,313,59,"allRoutes"],[248,70,313,68],[248,74,313,72,"routes"],[248,80,313,78],[248,82,313,80,"location"],[248,90,313,88],[248,91,313,89],[248,92,313,90],[249,8,314,6,"source"],[249,14,314,12],[249,17,314,15],[249,24,314,22],[250,6,315,4],[251,6,317,4],[251,10,317,8],[251,11,317,9,"isInDescendantRoute"],[251,30,317,28],[251,34,317,32],[251,35,317,33,"name"],[251,39,317,37],[251,41,317,39],[252,8,318,6],[252,9,318,7,"name"],[252,13,318,11],[252,15,318,13,"source"],[252,21,318,19],[252,22,318,20],[252,25,318,23,"getNormalizedName"],[252,42,318,40],[252,43,318,41,"routes"],[252,49,318,47],[252,51,318,49,"location"],[252,59,318,57],[252,61,318,59,"branches"],[252,69,318,67],[252,71,318,69,"basename"],[252,79,318,77],[252,80,318,78],[253,6,319,4],[254,6,321,4],[254,10,321,4,"startBrowserTracingNavigationSpan"],[254,52,321,37],[254,54,321,38,"client"],[254,60,321,44],[254,62,321,46],[255,8,322,6,"name"],[255,12,322,10],[256,8,323,6,"attributes"],[256,18,323,16],[256,20,323,18],[257,10,324,8],[257,11,324,9,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[257,49,324,41],[257,52,324,44,"source"],[257,58,324,50],[258,10,325,8],[258,11,325,9,"SEMANTIC_ATTRIBUTE_SENTRY_OP"],[258,45,325,37],[258,48,325,40],[258,60,325,52],[259,10,326,8],[259,11,326,9,"SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],[259,49,326,41],[259,52,326,44],[259,90,326,82,"version"],[259,97,326,89],[260,8,327,6],[261,6,328,4],[261,7,328,5],[261,8,328,6],[262,4,329,2],[263,2,330,0],[265,2,332,0],[266,0,333,0],[267,0,334,0],[268,0,335,0],[269,0,336,0],[270,0,337,0],[271,2,338,0],[271,11,338,9,"stripBasenameFromPathname"],[271,36,338,34,"stripBasenameFromPathname"],[271,37,338,35,"pathname"],[271,45,338,43],[271,47,338,45,"basename"],[271,55,338,53],[271,57,338,55],[272,4,339,2],[272,8,339,6],[272,9,339,7,"basename"],[272,17,339,15],[272,21,339,19,"basename"],[272,29,339,27],[272,34,339,32],[272,37,339,35],[272,39,339,37],[273,6,340,4],[273,13,340,11,"pathname"],[273,21,340,19],[274,4,341,2],[275,4,343,2],[275,8,343,6],[275,9,343,7,"pathname"],[275,17,343,15],[275,18,343,16,"toLowerCase"],[275,29,343,27],[275,30,343,28],[275,31,343,29],[275,32,343,30,"startsWith"],[275,42,343,40],[275,43,343,41,"basename"],[275,51,343,49],[275,52,343,50,"toLowerCase"],[275,63,343,61],[275,64,343,62],[275,65,343,63],[275,66,343,64],[275,68,343,66],[276,6,344,4],[276,13,344,11,"pathname"],[276,21,344,19],[277,4,345,2],[279,4,347,2],[280,4,348,2],[281,4,349,2],[281,10,349,8,"startIndex"],[281,20,349,18],[281,23,349,21,"basename"],[281,31,349,29],[281,32,349,30,"endsWith"],[281,40,349,38],[281,41,349,39],[281,44,349,42],[281,45,349,43],[281,48,349,46,"basename"],[281,56,349,54],[281,57,349,55,"length"],[281,63,349,61],[281,66,349,64],[281,67,349,65],[281,70,349,68,"basename"],[281,78,349,76],[281,79,349,77,"length"],[281,85,349,83],[282,4,350,2],[282,10,350,8,"nextChar"],[282,18,350,16],[282,21,350,19,"pathname"],[282,29,350,27],[282,30,350,28,"charAt"],[282,36,350,34],[282,37,350,35,"startIndex"],[282,47,350,45],[282,48,350,46],[283,4,351,2],[283,8,351,6,"nextChar"],[283,16,351,14],[283,20,351,18,"nextChar"],[283,28,351,26],[283,33,351,31],[283,36,351,34],[283,38,351,36],[284,6,352,4],[285,6,353,4],[285,13,353,11,"pathname"],[285,21,353,19],[286,4,354,2],[287,4,356,2],[287,11,356,9,"pathname"],[287,19,356,17],[287,20,356,18,"slice"],[287,25,356,23],[287,26,356,24,"startIndex"],[287,36,356,34],[287,37,356,35],[287,41,356,39],[287,44,356,42],[288,2,357,0],[289,2,359,0],[289,11,359,9,"sendIndexPath"],[289,24,359,22,"sendIndexPath"],[289,25,359,23,"pathBuilder"],[289,36,359,34],[289,38,359,36,"pathname"],[289,46,359,44],[289,48,359,46,"basename"],[289,56,359,54],[289,58,359,56],[290,4,360,2],[290,10,360,8,"reconstructedPath"],[290,27,360,25],[290,30,360,28,"pathBuilder"],[290,41,360,39],[290,45,360,43,"_stripBasename"],[290,59,360,57],[290,62,360,60,"stripBasenameFromPathname"],[290,87,360,85],[290,88,360,86,"pathname"],[290,96,360,94],[290,98,360,96,"basename"],[290,106,360,104],[290,107,360,105],[290,110,360,108,"pathname"],[290,118,360,116],[291,4,362,2],[291,10,362,8,"formattedPath"],[291,23,362,21],[292,4,363,4],[293,4,364,4,"reconstructedPath"],[293,21,364,21],[293,22,364,22,"reconstructedPath"],[293,39,364,39],[293,40,364,40,"length"],[293,46,364,46],[293,49,364,49],[293,50,364,50],[293,51,364,51],[293,56,364,56],[293,59,364,59],[293,62,365,8,"reconstructedPath"],[293,79,365,25],[293,80,365,26,"slice"],[293,85,365,31],[293,86,365,32],[293,87,365,33],[293,89,365,35],[293,90,365,36],[293,91,365,37],[293,92,365,38],[294,4,366,8],[295,4,367,8,"reconstructedPath"],[295,21,367,25],[295,22,367,26,"slice"],[295,27,367,31],[295,28,367,32],[295,29,367,33],[295,30,367,34],[295,31,367,35],[295,36,367,40],[295,40,367,44],[295,43,368,10,"reconstructedPath"],[295,60,368,27],[295,61,368,28,"slice"],[295,66,368,33],[295,67,368,34],[295,68,368,35],[295,70,368,37],[295,71,368,38],[295,72,368,39],[295,73,368,40],[295,76,369,10,"reconstructedPath"],[295,93,369,27],[296,4,371,2],[296,11,371,9],[296,12,371,10,"formattedPath"],[296,25,371,23],[296,27,371,25],[296,34,371,32],[296,35,371,33],[297,2,372,0],[298,2,374,0],[298,11,374,9,"pathEndsWithWildcard"],[298,31,374,29,"pathEndsWithWildcard"],[298,32,374,30,"path"],[298,36,374,34],[298,38,374,36],[299,4,375,2],[299,11,375,9,"path"],[299,15,375,13],[299,16,375,14,"endsWith"],[299,24,375,22],[299,25,375,23],[299,28,375,26],[299,29,375,27],[300,2,376,0],[301,2,378,0],[301,11,378,9,"pathIsWildcardAndHasChildren"],[301,39,378,37,"pathIsWildcardAndHasChildren"],[301,40,378,38,"path"],[301,44,378,42],[301,46,378,44,"branch"],[301,52,378,50],[301,54,378,52],[302,4,379,2],[302,11,379,10,"pathEndsWithWildcard"],[302,31,379,30],[302,32,379,31,"path"],[302,36,379,35],[302,37,379,36],[302,41,379,40,"branch"],[302,47,379,46],[302,48,379,47,"route"],[302,53,379,52],[302,54,379,53,"children"],[302,62,379,61],[302,66,379,65,"branch"],[302,72,379,71],[302,73,379,72,"route"],[302,78,379,77],[302,79,379,78,"children"],[302,87,379,86],[302,88,379,87,"length"],[302,94,379,93],[302,97,379,96],[302,98,379,97],[302,102,379,102],[302,107,379,107],[303,2,380,0],[304,2,382,0],[304,11,382,9,"routeIsDescendant"],[304,28,382,26,"routeIsDescendant"],[304,29,382,27,"route"],[304,34,382,32],[304,36,382,34],[305,4,383,2],[305,11,383,9],[305,12,383,10],[305,14,383,12],[305,15,383,13,"route"],[305,20,383,18],[305,21,383,19,"children"],[305,29,383,27],[305,33,383,31,"route"],[305,38,383,36],[305,39,383,37,"element"],[305,46,383,44],[305,50,383,48,"route"],[305,55,383,53],[305,56,383,54,"path"],[305,60,383,58],[305,64,383,62,"route"],[305,69,383,67],[305,70,383,68,"path"],[305,74,383,72],[305,75,383,73,"endsWith"],[305,83,383,81],[305,84,383,82],[305,88,383,86],[305,89,383,87],[305,90,383,88],[306,2,384,0],[307,2,386,0],[307,11,386,9,"locationIsInsideDescendantRoute"],[307,42,386,40,"locationIsInsideDescendantRoute"],[307,43,386,41,"location"],[307,51,386,49],[307,53,386,51,"routes"],[307,59,386,57],[307,61,386,59],[308,4,387,2],[308,10,387,8,"matchedRoutes"],[308,23,387,21],[308,26,387,24,"_matchRoutes"],[308,38,387,36],[308,39,387,37,"routes"],[308,45,387,43],[308,47,387,45,"location"],[308,55,387,53],[308,56,387,54],[309,4,389,2],[309,8,389,6,"matchedRoutes"],[309,21,389,19],[309,23,389,21],[310,6,390,4],[310,11,390,9],[310,17,390,15,"match"],[310,22,390,20],[310,26,390,24,"matchedRoutes"],[310,39,390,37],[310,41,390,39],[311,8,391,6],[311,12,391,10,"routeIsDescendant"],[311,29,391,27],[311,30,391,28,"match"],[311,35,391,33],[311,36,391,34,"route"],[311,41,391,39],[311,42,391,40],[311,46,391,44,"pickSplat"],[311,55,391,53],[311,56,391,54,"match"],[311,61,391,59],[311,62,391,60],[311,64,391,62],[312,10,392,8],[312,17,392,15],[312,21,392,19],[313,8,393,6],[314,6,394,4],[315,4,395,2],[316,4,397,2],[316,11,397,9],[316,16,397,14],[317,2,398,0],[318,2,400,0],[318,11,400,9,"getChildRoutesRecursively"],[318,36,400,34,"getChildRoutesRecursively"],[318,37,400,35,"route"],[318,42,400,40],[318,44,400,42,"allRoutes"],[318,53,400,51],[318,56,400,54],[318,60,400,58,"Set"],[318,63,400,61],[318,64,400,62],[318,65,400,63],[318,67,400,65],[319,4,401,2],[319,8,401,6],[319,9,401,7,"allRoutes"],[319,18,401,16],[319,19,401,17,"has"],[319,22,401,20],[319,23,401,21,"route"],[319,28,401,26],[319,29,401,27],[319,31,401,29],[320,6,402,4,"allRoutes"],[320,15,402,13],[320,16,402,14,"add"],[320,19,402,17],[320,20,402,18,"route"],[320,25,402,23],[320,26,402,24],[321,6,404,4],[321,10,404,8,"route"],[321,15,404,13],[321,16,404,14,"children"],[321,24,404,22],[321,28,404,26],[321,29,404,27,"route"],[321,34,404,32],[321,35,404,33,"index"],[321,40,404,38],[321,42,404,40],[322,8,405,6,"route"],[322,13,405,11],[322,14,405,12,"children"],[322,22,405,20],[322,23,405,21,"forEach"],[322,30,405,28],[322,31,405,29,"child"],[322,36,405,34],[322,40,405,38],[323,10,406,8],[323,16,406,14,"childRoutes"],[323,27,406,25],[323,30,406,28,"getChildRoutesRecursively"],[323,55,406,53],[323,56,406,54,"child"],[323,61,406,59],[323,63,406,61,"allRoutes"],[323,72,406,70],[323,73,406,71],[324,10,408,8,"childRoutes"],[324,21,408,19],[324,22,408,20,"forEach"],[324,29,408,27],[324,30,408,28,"r"],[324,31,408,29],[324,35,408,33,"allRoutes"],[324,44,408,42],[324,45,408,43,"add"],[324,48,408,46],[324,49,408,47,"r"],[324,50,408,48],[324,51,408,49],[324,52,408,50],[325,8,409,6],[325,9,409,7],[325,10,409,8],[326,6,410,4],[327,4,411,2],[328,4,413,2],[328,11,413,9,"allRoutes"],[328,20,413,18],[329,2,414,0],[330,2,416,0],[330,11,416,9,"pickPath"],[330,19,416,17,"pickPath"],[330,20,416,18,"match"],[330,25,416,23],[330,27,416,25],[331,4,417,2],[331,11,417,9,"trimWildcard"],[331,23,417,21],[331,24,417,22,"match"],[331,29,417,27],[331,30,417,28,"route"],[331,35,417,33],[331,36,417,34,"path"],[331,40,417,38],[331,44,417,42],[331,46,417,44],[331,47,417,45],[332,2,418,0],[333,2,420,0],[333,11,420,9,"pickSplat"],[333,20,420,18,"pickSplat"],[333,21,420,19,"match"],[333,26,420,24],[333,28,420,26],[334,4,421,2],[334,11,421,9,"match"],[334,16,421,14],[334,17,421,15,"params"],[334,23,421,21],[334,24,421,22],[334,27,421,25],[334,28,421,26],[334,32,421,30],[334,34,421,32],[335,2,422,0],[336,2,424,0],[336,11,424,9,"trimWildcard"],[336,23,424,21,"trimWildcard"],[336,24,424,22,"path"],[336,28,424,26],[336,30,424,28],[337,4,425,2],[337,11,425,9,"path"],[337,15,425,13],[337,16,425,14,"path"],[337,20,425,18],[337,21,425,19,"length"],[337,27,425,25],[337,30,425,28],[337,31,425,29],[337,32,425,30],[337,37,425,35],[337,40,425,38],[337,43,425,41,"path"],[337,47,425,45],[337,48,425,46,"slice"],[337,53,425,51],[337,54,425,52],[337,55,425,53],[337,57,425,55],[337,58,425,56],[337,59,425,57],[337,60,425,58],[337,63,425,61,"path"],[337,67,425,65],[338,2,426,0],[339,2,428,0],[339,11,428,9,"trimSlash"],[339,20,428,18,"trimSlash"],[339,21,428,19,"path"],[339,25,428,23],[339,27,428,25],[340,4,429,2],[340,11,429,9,"path"],[340,15,429,13],[340,16,429,14,"path"],[340,20,429,18],[340,21,429,19,"length"],[340,27,429,25],[340,30,429,28],[340,31,429,29],[340,32,429,30],[340,37,429,35],[340,40,429,38],[340,43,429,41,"path"],[340,47,429,45],[340,48,429,46,"slice"],[340,53,429,51],[340,54,429,52],[340,55,429,53],[340,57,429,55],[340,58,429,56],[340,59,429,57],[340,60,429,58],[340,63,429,61,"path"],[340,67,429,65],[341,2,430,0],[342,2,432,0],[342,11,432,9,"prefixWithSlash"],[342,26,432,24,"prefixWithSlash"],[342,27,432,25,"path"],[342,31,432,29],[342,33,432,31],[343,4,433,2],[343,11,433,9,"path"],[343,15,433,13],[343,16,433,14],[343,17,433,15],[343,18,433,16],[343,23,433,21],[343,26,433,24],[343,29,433,27,"path"],[343,33,433,31],[343,36,433,34],[343,40,433,38,"path"],[343,44,433,42],[343,46,433,44],[344,2,434,0],[345,2,436,0],[345,11,436,9,"rebuildRoutePathFromAllRoutes"],[345,40,436,38,"rebuildRoutePathFromAllRoutes"],[345,41,436,39,"allRoutes"],[345,50,436,48],[345,52,436,50,"location"],[345,60,436,58],[345,62,436,60],[346,4,437,2],[346,10,437,8,"matchedRoutes"],[346,23,437,21],[346,26,437,24,"_matchRoutes"],[346,38,437,36],[346,39,437,37,"allRoutes"],[346,48,437,46],[346,50,437,48,"location"],[346,58,437,56],[346,59,437,57],[347,4,439,2],[347,8,439,6],[347,9,439,7,"matchedRoutes"],[347,22,439,20],[347,26,439,24,"matchedRoutes"],[347,39,439,37],[347,40,439,38,"length"],[347,46,439,44],[347,51,439,49],[347,52,439,50],[347,54,439,52],[348,6,440,4],[348,13,440,11],[348,15,440,13],[349,4,441,2],[350,4,443,2],[350,9,443,7],[350,15,443,13,"match"],[350,20,443,18],[350,24,443,22,"matchedRoutes"],[350,37,443,35],[350,39,443,37],[351,6,444,4],[351,10,444,8,"match"],[351,15,444,13],[351,16,444,14,"route"],[351,21,444,19],[351,22,444,20,"path"],[351,26,444,24],[351,30,444,28,"match"],[351,35,444,33],[351,36,444,34,"route"],[351,41,444,39],[351,42,444,40,"path"],[351,46,444,44],[351,51,444,49],[351,54,444,52],[351,56,444,54],[352,8,445,6],[352,14,445,12,"path"],[352,18,445,16],[352,21,445,19,"pickPath"],[352,29,445,27],[352,30,445,28,"match"],[352,35,445,33],[352,36,445,34],[353,8,446,6],[353,14,446,12,"strippedPath"],[353,26,446,24],[353,29,446,27,"stripBasenameFromPathname"],[353,54,446,52],[353,55,446,53,"location"],[353,63,446,61],[353,64,446,62,"pathname"],[353,72,446,70],[353,74,446,72,"prefixWithSlash"],[353,89,446,87],[353,90,446,88,"match"],[353,95,446,93],[353,96,446,94,"pathnameBase"],[353,108,446,106],[353,109,446,107],[353,110,446,108],[354,8,448,6],[354,15,448,13,"trimSlash"],[354,24,448,22],[354,25,449,8,"trimSlash"],[354,34,449,17],[354,35,449,18,"path"],[354,39,449,22],[354,43,449,26],[354,45,449,28],[354,46,449,29],[354,49,450,10,"prefixWithSlash"],[354,64,450,25],[354,65,451,12,"rebuildRoutePathFromAllRoutes"],[354,94,451,41],[354,95,452,14,"allRoutes"],[354,104,452,23],[354,105,452,24,"filter"],[354,111,452,30],[354,112,452,31,"route"],[354,117,452,36],[354,121,452,40,"route"],[354,126,452,45],[354,131,452,50,"match"],[354,136,452,55],[354,137,452,56,"route"],[354,142,452,61],[354,143,452,62],[354,145,453,14],[355,10,454,16,"pathname"],[355,18,454,24],[355,20,454,26,"strippedPath"],[356,8,455,14],[356,9,456,12],[356,10,457,10],[356,11,458,6],[356,12,458,7],[357,6,459,4],[358,4,460,2],[359,4,462,2],[359,11,462,9],[359,13,462,11],[360,2,463,0],[361,2,465,0],[361,11,465,9,"getNormalizedName"],[361,28,465,26,"getNormalizedName"],[361,29,466,2,"routes"],[361,35,466,8],[361,37,467,2,"location"],[361,45,467,10],[361,47,468,2,"branches"],[361,55,468,10],[361,57,469,2,"basename"],[361,65,469,10],[361,68,469,13],[361,70,469,15],[361,72,470,2],[362,4,471,2],[362,8,471,6],[362,9,471,7,"routes"],[362,15,471,13],[362,19,471,17,"routes"],[362,25,471,23],[362,26,471,24,"length"],[362,32,471,30],[362,37,471,35],[362,38,471,36],[362,40,471,38],[363,6,472,4],[363,13,472,11],[363,14,472,12,"_stripBasename"],[363,28,472,26],[363,31,472,29,"stripBasenameFromPathname"],[363,56,472,54],[363,57,472,55,"location"],[363,65,472,63],[363,66,472,64,"pathname"],[363,74,472,72],[363,76,472,74,"basename"],[363,84,472,82],[363,85,472,83],[363,88,472,86,"location"],[363,96,472,94],[363,97,472,95,"pathname"],[363,105,472,103],[363,107,472,105],[363,112,472,110],[363,113,472,111],[364,4,473,2],[365,4,475,2],[365,8,475,6,"pathBuilder"],[365,19,475,17],[365,22,475,20],[365,24,475,22],[366,4,476,2],[366,8,476,6,"branches"],[366,16,476,14],[366,18,476,16],[367,6,477,4],[367,11,477,9],[367,17,477,15,"branch"],[367,23,477,21],[367,27,477,25,"branches"],[367,35,477,33],[367,37,477,35],[368,8,478,6],[368,14,478,12,"route"],[368,19,478,17],[368,22,478,20,"branch"],[368,28,478,26],[368,29,478,27,"route"],[368,34,478,32],[369,8,479,6],[369,12,479,10,"route"],[369,17,479,15],[369,19,479,17],[370,10,480,8],[371,10,481,8],[371,14,481,12,"route"],[371,19,481,17],[371,20,481,18,"index"],[371,25,481,23],[371,27,481,25],[372,12,482,10],[372,19,482,17,"sendIndexPath"],[372,32,482,30],[372,33,482,31,"pathBuilder"],[372,44,482,42],[372,46,482,44,"branch"],[372,52,482,50],[372,53,482,51,"pathname"],[372,61,482,59],[372,63,482,61,"basename"],[372,71,482,69],[372,72,482,70],[373,10,483,8],[374,10,484,8],[374,16,484,14,"path"],[374,20,484,18],[374,23,484,21,"route"],[374,28,484,26],[374,29,484,27,"path"],[374,33,484,31],[376,10,486,8],[377,10,487,8],[377,14,487,12,"path"],[377,18,487,16],[377,22,487,20],[377,23,487,21,"pathIsWildcardAndHasChildren"],[377,51,487,49],[377,52,487,50,"path"],[377,56,487,54],[377,58,487,56,"branch"],[377,64,487,62],[377,65,487,63],[377,67,487,65],[378,12,488,10],[378,18,488,16,"newPath"],[378,25,488,23],[378,28,488,26,"path"],[378,32,488,30],[378,33,488,31],[378,34,488,32],[378,35,488,33],[378,40,488,38],[378,43,488,41],[378,47,488,45,"pathBuilder"],[378,58,488,56],[378,59,488,57,"pathBuilder"],[378,70,488,68],[378,71,488,69,"length"],[378,77,488,75],[378,80,488,78],[378,81,488,79],[378,82,488,80],[378,87,488,85],[378,90,488,88],[378,93,488,91,"path"],[378,97,488,95],[378,100,488,98],[378,104,488,102,"path"],[378,108,488,106],[378,110,488,108],[379,12,489,10,"pathBuilder"],[379,23,489,21],[379,26,489,24,"trimSlash"],[379,35,489,33],[379,36,489,34,"pathBuilder"],[379,47,489,45],[379,48,489,46],[379,51,489,49,"prefixWithSlash"],[379,66,489,64],[379,67,489,65,"newPath"],[379,74,489,72],[379,75,489,73],[381,12,491,10],[382,12,492,10],[382,16,492,14,"trimSlash"],[382,25,492,23],[382,26,492,24,"location"],[382,34,492,32],[382,35,492,33,"pathname"],[382,43,492,41],[382,44,492,42],[382,49,492,47,"trimSlash"],[382,58,492,56],[382,59,492,57,"basename"],[382,67,492,65],[382,70,492,68,"branch"],[382,76,492,74],[382,77,492,75,"pathname"],[382,85,492,83],[382,86,492,84],[382,88,492,86],[383,14,493,12],[384,14,494,14],[385,14,495,14],[386,14,496,14],[387,14,497,14],[388,14,498,14],[389,14,499,14],[389,18,499,14,"getNumberOfUrlSegments"],[389,46,499,36],[389,48,499,37,"pathBuilder"],[389,59,499,48],[389,60,499,49],[389,65,499,54],[389,69,499,54,"getNumberOfUrlSegments"],[389,97,499,76],[389,99,499,77,"branch"],[389,105,499,83],[389,106,499,84,"pathname"],[389,114,499,92],[389,115,499,93],[390,14,500,14],[391,14,501,14],[391,15,501,15,"pathEndsWithWildcard"],[391,35,501,35],[391,36,501,36,"pathBuilder"],[391,47,501,47],[391,48,501,48],[391,50,502,14],[392,16,503,14],[392,23,503,21],[392,24,503,22],[392,25,503,23,"_stripBasename"],[392,39,503,37],[392,42,503,40],[392,44,503,42],[392,47,503,45,"basename"],[392,55,503,53],[392,59,503,57,"newPath"],[392,66,503,64],[392,68,503,66],[392,75,503,73],[392,76,503,74],[393,14,504,12],[395,14,506,12],[396,14,507,12],[396,18,507,16,"pathIsWildcardAndHasChildren"],[396,46,507,44],[396,47,507,45,"pathBuilder"],[396,58,507,56],[396,60,507,58,"branch"],[396,66,507,64],[396,67,507,65],[396,69,507,67],[397,16,508,14,"pathBuilder"],[397,27,508,25],[397,30,508,28,"pathBuilder"],[397,41,508,39],[397,42,508,40,"slice"],[397,47,508,45],[397,48,508,46],[397,49,508,47],[397,51,508,49],[397,52,508,50],[397,53,508,51],[397,54,508,52],[398,14,509,12],[399,14,511,12],[399,21,511,19],[399,22,511,20],[399,23,511,21,"_stripBasename"],[399,37,511,35],[399,40,511,38],[399,42,511,40],[399,45,511,43,"basename"],[399,53,511,51],[399,57,511,55,"pathBuilder"],[399,68,511,66],[399,70,511,68],[399,77,511,75],[399,78,511,76],[400,12,512,10],[401,10,513,8],[402,8,514,6],[403,6,515,4],[404,4,516,2],[405,4,518,2],[405,10,518,8,"fallbackTransactionName"],[405,33,518,31],[405,36,518,34,"_stripBasename"],[405,50,518,48],[405,53,519,6,"stripBasenameFromPathname"],[405,78,519,31],[405,79,519,32,"location"],[405,87,519,40],[405,88,519,41,"pathname"],[405,96,519,49],[405,98,519,51,"basename"],[405,106,519,59],[405,107,519,60],[405,110,520,6,"location"],[405,118,520,14],[405,119,520,15,"pathname"],[405,127,520,23],[405,131,520,27],[405,134,520,30],[406,4,522,2],[406,11,522,9],[406,12,522,10,"fallbackTransactionName"],[406,35,522,33],[406,37,522,35],[406,42,522,40],[406,43,522,41],[407,2,523,0],[408,2,525,0],[408,11,525,9,"updatePageloadTransaction"],[408,36,525,34,"updatePageloadTransaction"],[408,37,526,2,"activeRootSpan"],[408,51,526,16],[408,53,527,2,"location"],[408,61,527,10],[408,63,528,2,"routes"],[408,69,528,8],[408,71,529,2,"matches"],[408,78,529,9],[408,80,530,2,"basename"],[408,88,530,10],[408,90,531,2,"allRoutes"],[408,99,531,11],[408,101,532,2],[409,4,533,2],[409,10,533,8,"branches"],[409,18,533,16],[409,21,533,19,"Array"],[409,26,533,24],[409,27,533,25,"isArray"],[409,34,533,32],[409,35,533,33,"matches"],[409,42,533,40],[409,43,533,41],[409,46,534,6,"matches"],[409,53,534,13],[409,56,535,7,"_matchRoutes"],[409,68,535,19],[409,69,535,20,"allRoutes"],[409,78,535,29],[409,82,535,33,"routes"],[409,88,535,39],[409,90,535,41,"location"],[409,98,535,49],[409,100,535,51,"basename"],[409,108,535,59],[409,109,535,62],[410,4,537,2],[410,8,537,6,"branches"],[410,16,537,14],[410,18,537,16],[411,6,538,4],[411,10,538,8,"name"],[411,14,538,12],[412,8,539,6,"source"],[412,14,539,12],[412,17,539,15],[412,22,539,20],[413,6,540,4],[413,12,540,10,"isInDescendantRoute"],[413,31,540,29],[413,34,540,32,"locationIsInsideDescendantRoute"],[413,65,540,63],[413,66,540,64,"location"],[413,74,540,72],[413,76,540,74,"allRoutes"],[413,85,540,83],[413,89,540,87,"routes"],[413,95,540,93],[413,96,540,94],[414,6,542,4],[414,10,542,8,"isInDescendantRoute"],[414,29,542,27],[414,31,542,29],[415,8,543,6,"name"],[415,12,543,10],[415,15,543,13,"prefixWithSlash"],[415,30,543,28],[415,31,543,29,"rebuildRoutePathFromAllRoutes"],[415,60,543,58],[415,61,543,59,"allRoutes"],[415,70,543,68],[415,74,543,72,"routes"],[415,80,543,78],[415,82,543,80,"location"],[415,90,543,88],[415,91,543,89],[415,92,543,90],[416,8,544,6,"source"],[416,14,544,12],[416,17,544,15],[416,24,544,22],[417,6,545,4],[418,6,547,4],[418,10,547,8],[418,11,547,9,"isInDescendantRoute"],[418,30,547,28],[418,34,547,32],[418,35,547,33,"name"],[418,39,547,37],[418,41,547,39],[419,8,548,6],[419,9,548,7,"name"],[419,13,548,11],[419,15,548,13,"source"],[419,21,548,19],[419,22,548,20],[419,25,548,23,"getNormalizedName"],[419,42,548,40],[419,43,548,41,"routes"],[419,49,548,47],[419,51,548,49,"location"],[419,59,548,57],[419,61,548,59,"branches"],[419,69,548,67],[419,71,548,69,"basename"],[419,79,548,77],[419,80,548,78],[420,6,549,4],[421,6,551,4],[421,10,551,4,"getCurrentScope"],[421,31,551,19],[421,33,551,20],[421,34,551,21],[421,35,551,22,"setTransactionName"],[421,53,551,40],[421,54,551,41,"name"],[421,58,551,45],[421,62,551,49],[421,65,551,52],[421,66,551,53],[422,6,553,4],[422,10,553,8,"activeRootSpan"],[422,24,553,22],[422,26,553,24],[423,8,554,6,"activeRootSpan"],[423,22,554,20],[423,23,554,21,"updateName"],[423,33,554,31],[423,34,554,32,"name"],[423,38,554,36],[423,39,554,37],[424,8,555,6,"activeRootSpan"],[424,22,555,20],[424,23,555,21,"setAttribute"],[424,35,555,33],[424,36,555,34,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[424,74,555,66],[424,76,555,68,"source"],[424,82,555,74],[424,83,555,75],[425,6,556,4],[426,4,557,2],[427,2,558,0],[429,2,560,0],[430,2,561,0],[430,11,561,9,"createV6CompatibleWithSentryReactRouterRouting"],[430,57,561,55,"createV6CompatibleWithSentryReactRouterRouting"],[430,58,562,2,"Routes"],[430,64,562,8],[430,66,563,2,"version"],[430,73,563,9],[430,75,564,2],[431,4,565,2],[431,8,565,6],[431,9,565,7,"_useEffect"],[431,19,565,17],[431,23,565,21],[431,24,565,22,"_useLocation"],[431,36,565,34],[431,40,565,38],[431,41,565,39,"_useNavigationType"],[431,59,565,57],[431,63,565,61],[431,64,565,62,"_createRoutesFromChildren"],[431,89,565,87],[431,93,565,91],[431,94,565,92,"_matchRoutes"],[431,106,565,104],[431,108,565,106],[432,6,566,4,"DEBUG_BUILD"],[432,29,566,15],[432,33,567,6,"logger"],[432,45,567,12],[432,46,567,13,"warn"],[432,50,567,17],[432,51,567,18],[433,0,568,0],[433,19,568,19,"_useEffect"],[433,29,568,29],[433,47,568,47,"_useLocation"],[433,59,568,59],[433,83,568,83,"_useNavigationType"],[433,101,568,101],[434,0,569,0],[434,34,569,34,"_createRoutesFromChildren"],[434,59,569,59],[434,77,569,77,"_matchRoutes"],[434,89,569,89],[434,92,569,92],[434,93,569,93],[435,6,571,4],[435,13,571,11,"Routes"],[435,19,571,17],[436,4,572,2],[437,4,574,2],[437,10,574,8,"SentryRoutes"],[437,22,574,20],[437,25,574,24,"props"],[437,30,574,29],[437,34,574,34],[438,6,575,4],[438,12,575,10,"isMountRenderPass"],[438,29,575,27],[438,32,575,30,"React"],[438,37,575,35],[438,38,575,36,"useRef"],[438,44,575,42],[438,45,575,43],[438,49,575,47],[438,50,575,48],[439,6,577,4],[439,12,577,10,"location"],[439,20,577,18],[439,23,577,21,"_useLocation"],[439,35,577,33],[439,36,577,34],[439,37,577,35],[440,6,578,4],[440,12,578,10,"navigationType"],[440,26,578,24],[440,29,578,27,"_useNavigationType"],[440,47,578,45],[440,48,578,46],[440,49,578,47],[441,6,580,4,"_useEffect"],[441,16,580,14],[441,17,581,6],[441,23,581,12],[442,8,582,8],[442,14,582,14,"routes"],[442,20,582,20],[442,23,582,23,"_createRoutesFromChildren"],[442,48,582,48],[442,49,582,49,"props"],[442,54,582,54],[442,55,582,55,"children"],[442,63,582,63],[442,64,582,64],[443,8,584,8],[443,12,584,12,"isMountRenderPass"],[443,29,584,29],[443,30,584,30,"current"],[443,37,584,37],[443,39,584,39],[444,10,585,10,"routes"],[444,16,585,16],[444,17,585,17,"forEach"],[444,24,585,24],[444,25,585,25,"route"],[444,30,585,30],[444,34,585,34],[445,12,586,12],[445,18,586,18,"extractedChildRoutes"],[445,38,586,38],[445,41,586,41,"getChildRoutesRecursively"],[445,66,586,66],[445,67,586,67,"route"],[445,72,586,72],[445,73,586,73],[446,12,588,12,"extractedChildRoutes"],[446,32,588,32],[446,33,588,33,"forEach"],[446,40,588,40],[446,41,588,41,"r"],[446,42,588,42],[446,46,588,46],[447,14,589,14,"allRoutes"],[447,23,589,23],[447,24,589,24,"add"],[447,27,589,27],[447,28,589,28,"r"],[447,29,589,29],[447,30,589,30],[448,12,590,12],[448,13,590,13],[448,14,590,14],[449,10,591,10],[449,11,591,11],[449,12,591,12],[450,10,593,10,"updatePageloadTransaction"],[450,35,593,35],[450,36,593,36,"getActiveRootSpan"],[450,53,593,53],[450,54,593,54],[450,55,593,55],[450,57,593,57,"location"],[450,65,593,65],[450,67,593,67,"routes"],[450,73,593,73],[450,75,593,75,"undefined"],[450,84,593,84],[450,86,593,86,"undefined"],[450,95,593,95],[450,97,593,97,"Array"],[450,102,593,102],[450,103,593,103,"from"],[450,107,593,107],[450,108,593,108,"allRoutes"],[450,117,593,117],[450,118,593,118],[450,119,593,119],[451,10,594,10,"isMountRenderPass"],[451,27,594,27],[451,28,594,28,"current"],[451,35,594,35],[451,38,594,38],[451,43,594,43],[452,8,595,8],[452,9,595,9],[452,15,595,15],[453,10,596,10,"handleNavigation"],[453,26,596,26],[453,27,596,27],[454,12,597,12,"location"],[454,20,597,20],[455,12,598,12,"routes"],[455,18,598,18],[456,12,599,12,"navigationType"],[456,26,599,26],[457,12,600,12,"version"],[457,19,600,19],[458,12,601,12,"allRoutes"],[458,21,601,21],[458,23,601,23,"Array"],[458,28,601,28],[458,29,601,29,"from"],[458,33,601,33],[458,34,601,34,"allRoutes"],[458,43,601,43],[459,10,602,10],[459,11,602,11],[459,12,602,12],[460,8,603,8],[461,6,604,6],[461,7,604,7],[462,6,605,6],[463,6,606,6],[464,6,607,6],[464,7,607,7,"location"],[464,15,607,15],[464,17,607,17,"navigationType"],[464,31,607,31],[464,32,608,4],[464,33,608,5],[466,6,610,4],[467,6,611,4],[468,6,612,4],[468,26,612,11,"React"],[468,31,612,16],[468,32,612,17,"createElement"],[468,45,612,30],[468,46,612,31,"Routes"],[468,52,612,37],[468,54,612,39],[469,8,612,41],[469,11,612,44,"props"],[470,6,612,50],[470,7,612,52],[470,8,612,53],[471,4,613,2],[471,5,613,3],[472,4,615,2],[472,8,615,2,"hoistNonReactStatics"],[472,37,615,22],[472,39,615,23,"SentryRoutes"],[472,51,615,35],[472,53,615,37,"Routes"],[472,59,615,43],[472,60,615,44],[474,4,617,2],[475,4,618,2],[476,4,619,2],[476,11,619,9,"SentryRoutes"],[476,23,619,21],[477,2,620,0],[478,2,622,0],[478,11,622,9,"getActiveRootSpan"],[478,28,622,26,"getActiveRootSpan"],[478,29,622,26],[478,31,622,29],[479,4,623,2],[479,10,623,8,"span"],[479,14,623,12],[479,17,623,15],[479,21,623,15,"getActiveSpan"],[479,40,623,28],[479,42,623,29],[479,43,623,30],[480,4,624,2],[480,10,624,8,"rootSpan"],[480,18,624,16],[480,21,624,19,"span"],[480,25,624,23],[480,28,624,26],[480,32,624,26,"getRootSpan"],[480,49,624,37],[480,51,624,38,"span"],[480,55,624,42],[480,56,624,43],[480,59,624,46,"undefined"],[480,68,624,55],[481,4,626,2],[481,8,626,6],[481,9,626,7,"rootSpan"],[481,17,626,15],[481,19,626,17],[482,6,627,4],[482,13,627,11,"undefined"],[482,22,627,20],[483,4,628,2],[484,4,630,2],[484,10,630,8,"op"],[484,12,630,10],[484,15,630,13],[484,19,630,13,"spanToJSON"],[484,35,630,23],[484,37,630,24,"rootSpan"],[484,45,630,32],[484,46,630,33],[484,47,630,34,"op"],[484,49,630,36],[486,4,632,2],[487,4,633,2],[487,11,633,9,"op"],[487,13,633,11],[487,18,633,16],[487,30,633,28],[487,34,633,32,"op"],[487,36,633,34],[487,41,633,39],[487,51,633,49],[487,54,633,52,"rootSpan"],[487,62,633,60],[487,65,633,63,"undefined"],[487,74,633,72],[488,2,634,0],[489,0,634,1],[489,3]],"functionMap":{"names":["<global>","createV6CompatibleWrapCreateBrowserRouter","<anonymous>","routes.forEach$argument_0","router.subscribe$argument_0","requestAnimationFrame$argument_0","createV6CompatibleWrapCreateMemoryRouter","createReactRouterV6CompatibleTracingIntegration","setup","afterAllSetup","createV6CompatibleWrapUseRoutes","SentryRoutes","_useEffect$argument_0","extractedChildRoutes.forEach$argument_0","handleNavigation","stripBasenameFromPathname","sendIndexPath","pathEndsWithWildcard","pathIsWildcardAndHasChildren","routeIsDescendant","locationIsInsideDescendantRoute","getChildRoutesRecursively","route.children.forEach$argument_0","childRoutes.forEach$argument_0","pickPath","pickSplat","trimWildcard","trimSlash","prefixWithSlash","rebuildRoutePathFromAllRoutes","allRoutes.filter$argument_0","getNormalizedName","updatePageloadTransaction","createV6CompatibleWithSentryReactRouterRouting","getActiveRootSpan"],"mappings":"AAA;AC0B;SCe;mBCC;KDE;qBEqB;gCCI;WDS;KFY;GDG;CDC;AMK;SJe;mBCM;KDE;qBE8B;KFY;GIG;CNC;AOK;ICuB;KDO;IEC;KFkB;CPE;AUE;GCY;eCe;uBTK;uCUG;WVE;SSC;KDoB;GDG;SRG;GQE;CVC;AcE;CdkC;AeQ;CfmB;AgBE;ChBa;AiBE;CjBE;AkBE;ClBE;AmBE;CnBE;AoBE;CpBY;AqBE;6BCK;4BCG,qBD;ODC;CrBK;AwBE;CxBE;AyBE;CzBE;A0BE;C1BE;A2BE;C3BE;A4BE;C5BE;A6BE;+BCgB,8BD;C7BW;A+BE;C/B0D;AgCE;ChCiC;AiCG;uBtBa;MCO;yBTI;yCUG;aVE;WSC;ODa;GsBS;CjCO;AkCE;ClCY"}},"type":"js/module"}]}