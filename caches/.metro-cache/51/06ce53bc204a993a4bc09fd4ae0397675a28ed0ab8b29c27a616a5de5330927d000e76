{"dependencies":[{"name":"@sentry/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"/o+dASQcHF2bB25icdsM0E4TExc=","exportNames":["*"]}},{"name":"@sentry-internal/browser-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":716},"end":{"line":3,"column":329,"index":1045}}],"key":"NhwjGxy6N7nYR3SR4JfgASTvmbA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getReplay = getReplay;\n  exports.replayIntegration = void 0;\n  var _core = require(_dependencyMap[0], \"@sentry/core\");\n  var _browserUtils = require(_dependencyMap[1], \"@sentry-internal/browser-utils\");\n  // exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n  // prevents the browser package from being bundled in the CDN bundle, and avoids a\n  // circular dependency between the browser and replay packages should `@sentry/browser` import\n  // from `@sentry/replay` in the future\n  const WINDOW = _core.GLOBAL_OBJ;\n  const REPLAY_SESSION_KEY = 'sentryReplaySession';\n  const REPLAY_EVENT_NAME = 'replay_event';\n  const UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n  // The idle limit for a session after which recording is paused.\n  const SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n  // The idle limit for a session after which the session expires.\n  const SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n  /** Default flush delays */\n  const DEFAULT_FLUSH_MIN_DELAY = 5000;\n  // XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n  // was the same as `wait`\n  const DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n  /* How long to wait for error checkouts */\n  const BUFFER_CHECKOUT_TIME = 60000;\n  const RETRY_BASE_INTERVAL = 5000;\n  const RETRY_MAX_COUNT = 3;\n\n  /* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\n  const NETWORK_BODY_MAX_SIZE = 150000;\n\n  /* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\n  const CONSOLE_ARG_MAX_SIZE = 5000;\n\n  /* Min. time to wait before we consider something a slow click. */\n  const SLOW_CLICK_THRESHOLD = 3000;\n  /* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\n  const SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n  /** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\n  const REPLAY_MAX_EVENT_BUFFER_SIZE = 20000000; // ~20MB\n\n  /** Replays must be min. 5s long before we send them. */\n  const MIN_REPLAY_DURATION = 4999;\n  /* The max. allowed value that the minReplayDuration can be set to. */\n  const MIN_REPLAY_DURATION_LIMIT = 15000;\n\n  /** The max. length of a replay. */\n  const MAX_REPLAY_DURATION = 3600000; // 60 minutes in ms;\n\n  function _nullishCoalesce$1(lhs, rhsFn) {\n    if (lhs != null) {\n      return lhs;\n    } else {\n      return rhsFn();\n    }\n  }\n  function _optionalChain$5(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        return undefined;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n  var NodeType$3;\n  (function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n  })(NodeType$3 || (NodeType$3 = {}));\n  function isElement$1(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n  }\n  function isShadowRoot(n) {\n    const host = _optionalChain$5([n, 'optionalAccess', _ => _.host]);\n    return Boolean(_optionalChain$5([host, 'optionalAccess', _2 => _2.shadowRoot]) === n);\n  }\n  function isNativeShadowDom(shadowRoot) {\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\n  }\n  function fixBrowserCompatibilityIssuesInCSS(cssText) {\n    if (cssText.includes(' background-clip: text;') && !cssText.includes(' -webkit-background-clip: text;')) {\n      cssText = cssText.replace(/\\sbackground-clip:\\s*text;/g, ' -webkit-background-clip: text; background-clip: text;');\n    }\n    return cssText;\n  }\n  function escapeImportStatement(rule) {\n    const {\n      cssText\n    } = rule;\n    if (cssText.split('\"').length < 3) return cssText;\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\n    if (rule.layerName === '') {\n      statement.push(`layer`);\n    } else if (rule.layerName) {\n      statement.push(`layer(${rule.layerName})`);\n    }\n    if (rule.supportsText) {\n      statement.push(`supports(${rule.supportsText})`);\n    }\n    if (rule.media.length) {\n      statement.push(rule.media.mediaText);\n    }\n    return statement.join(' ') + ';';\n  }\n  function stringifyStylesheet(s) {\n    try {\n      const rules = s.rules || s.cssRules;\n      return rules ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join('')) : null;\n    } catch (error) {\n      return null;\n    }\n  }\n  function fixAllCssProperty(rule) {\n    let styles = '';\n    for (let i = 0; i < rule.style.length; i++) {\n      const styleDeclaration = rule.style;\n      const attribute = styleDeclaration[i];\n      const isImportant = styleDeclaration.getPropertyPriority(attribute);\n      styles += `${attribute}:${styleDeclaration.getPropertyValue(attribute)}${isImportant ? ` !important` : ''};`;\n    }\n    return `${rule.selectorText} { ${styles} }`;\n  }\n  function stringifyRule(rule) {\n    let importStringified;\n    if (isCSSImportRule(rule)) {\n      try {\n        importStringified = stringifyStylesheet(rule.styleSheet) || escapeImportStatement(rule);\n      } catch (error) {}\n    } else if (isCSSStyleRule(rule)) {\n      let cssText = rule.cssText;\n      const needsSafariColonFix = rule.selectorText.includes(':');\n      const needsAllFix = typeof rule.style['all'] === 'string' && rule.style['all'];\n      if (needsAllFix) {\n        cssText = fixAllCssProperty(rule);\n      }\n      if (needsSafariColonFix) {\n        cssText = fixSafariColons(cssText);\n      }\n      if (needsSafariColonFix || needsAllFix) {\n        return cssText;\n      }\n    }\n    return importStringified || rule.cssText;\n  }\n  function fixSafariColons(cssStringified) {\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n    return cssStringified.replace(regex, '$1\\\\$2');\n  }\n  function isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n  }\n  function isCSSStyleRule(rule) {\n    return 'selectorText' in rule;\n  }\n  class Mirror {\n    constructor() {\n      this.idNodeMap = new Map();\n      this.nodeMetaMap = new WeakMap();\n    }\n    getId(n) {\n      if (!n) return -1;\n      const id = _optionalChain$5([this, 'access', _3 => _3.getMeta, 'call', _4 => _4(n), 'optionalAccess', _5 => _5.id]);\n      return _nullishCoalesce$1(id, () => -1);\n    }\n    getNode(id) {\n      return this.idNodeMap.get(id) || null;\n    }\n    getIds() {\n      return Array.from(this.idNodeMap.keys());\n    }\n    getMeta(n) {\n      return this.nodeMetaMap.get(n) || null;\n    }\n    removeNodeFromMap(n) {\n      const id = this.getId(n);\n      this.idNodeMap.delete(id);\n      if (n.childNodes) {\n        n.childNodes.forEach(childNode => this.removeNodeFromMap(childNode));\n      }\n    }\n    has(id) {\n      return this.idNodeMap.has(id);\n    }\n    hasNode(node) {\n      return this.nodeMetaMap.has(node);\n    }\n    add(n, meta) {\n      const id = meta.id;\n      this.idNodeMap.set(id, n);\n      this.nodeMetaMap.set(n, meta);\n    }\n    replace(id, n) {\n      const oldNode = this.getNode(id);\n      if (oldNode) {\n        const meta = this.nodeMetaMap.get(oldNode);\n        if (meta) this.nodeMetaMap.set(n, meta);\n      }\n      this.idNodeMap.set(id, n);\n    }\n    reset() {\n      this.idNodeMap = new Map();\n      this.nodeMetaMap = new WeakMap();\n    }\n  }\n  function createMirror() {\n    return new Mirror();\n  }\n  function shouldMaskInput({\n    maskInputOptions,\n    tagName,\n    type\n  }) {\n    if (tagName === 'OPTION') {\n      tagName = 'SELECT';\n    }\n    return Boolean(maskInputOptions[tagName.toLowerCase()] || type && maskInputOptions[type] || type === 'password' || tagName === 'INPUT' && !type && maskInputOptions['text']);\n  }\n  function maskInputValue({\n    isMasked,\n    element,\n    value,\n    maskInputFn\n  }) {\n    let text = value || '';\n    if (!isMasked) {\n      return text;\n    }\n    if (maskInputFn) {\n      text = maskInputFn(text, element);\n    }\n    return '*'.repeat(text.length);\n  }\n  function toLowerCase(str) {\n    return str.toLowerCase();\n  }\n  function toUpperCase(str) {\n    return str.toUpperCase();\n  }\n  const ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\n  function is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n      for (let y = 0; y < canvas.height; y += chunkSize) {\n        const getImageData = ctx.getImageData;\n        const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData ? getImageData[ORIGINAL_ATTRIBUTE_NAME] : getImageData;\n        const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n        if (pixelBuffer.some(pixel => pixel !== 0)) return false;\n      }\n    }\n    return true;\n  }\n  function getInputType(element) {\n    const type = element.type;\n    return element.hasAttribute('data-rr-is-password') ? 'password' : type ? toLowerCase(type) : null;\n  }\n  function getInputValue(el, tagName, type) {\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n      return el.getAttribute('value') || '';\n    }\n    return el.value;\n  }\n  function extractFileExtension(path, baseURL) {\n    let url;\n    try {\n      url = new URL(path, _nullishCoalesce$1(baseURL, () => window.location.href));\n    } catch (err) {\n      return null;\n    }\n    const regex = /\\.([0-9a-z]+)(?:$)/i;\n    const match = url.pathname.match(regex);\n    return _nullishCoalesce$1(_optionalChain$5([match, 'optionalAccess', _6 => _6[1]]), () => null);\n  }\n  const cachedImplementations$1 = {};\n  function getImplementation$1(name) {\n    const cached = cachedImplementations$1[name];\n    if (cached) {\n      return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n      try {\n        const sandbox = document.createElement('iframe');\n        sandbox.hidden = true;\n        document.head.appendChild(sandbox);\n        const contentWindow = sandbox.contentWindow;\n        if (contentWindow && contentWindow[name]) {\n          impl = contentWindow[name];\n        }\n        document.head.removeChild(sandbox);\n      } catch (e) {}\n    }\n    return cachedImplementations$1[name] = impl.bind(window);\n  }\n  function setTimeout$2(...rest) {\n    return getImplementation$1('setTimeout')(...rest);\n  }\n  function clearTimeout$2(...rest) {\n    return getImplementation$1('clearTimeout')(...rest);\n  }\n  function getIframeContentDocument(iframe) {\n    try {\n      return iframe.contentDocument;\n    } catch (e) {}\n  }\n  let _id = 1;\n  const tagNameRegex = new RegExp('[^a-z0-9-_:]');\n  const IGNORED_NODE = -2;\n  function genId() {\n    return _id++;\n  }\n  function getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n      return 'form';\n    }\n    const processedTagName = toLowerCase(element.tagName);\n    if (tagNameRegex.test(processedTagName)) {\n      return 'div';\n    }\n    return processedTagName;\n  }\n  function extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n      origin = url.split('/').slice(0, 3).join('/');\n    } else {\n      origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n  }\n  let canvasService;\n  let canvasCtx;\n  const URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\n  const URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\n  const URL_WWW_MATCH = /^www\\..*/i;\n  const DATA_URI = /^(data:)([^,]*),(.*)/i;\n  function absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n      const filePath = path1 || path2 || path3;\n      const maybeQuote = quote1 || quote2 || '';\n      if (!filePath) {\n        return origin;\n      }\n      if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\n        return `url(${maybeQuote}${filePath}${maybeQuote})`;\n      }\n      if (DATA_URI.test(filePath)) {\n        return `url(${maybeQuote}${filePath}${maybeQuote})`;\n      }\n      if (filePath[0] === '/') {\n        return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n      }\n      const stack = href.split('/');\n      const parts = filePath.split('/');\n      stack.pop();\n      for (const part of parts) {\n        if (part === '.') {\n          continue;\n        } else if (part === '..') {\n          stack.pop();\n        } else {\n          stack.push(part);\n        }\n      }\n      return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n  }\n  const SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\n  const SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\n  function getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n      return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n      let chars;\n      const match = regEx.exec(attributeValue.substring(pos));\n      if (match) {\n        chars = match[0];\n        pos += chars.length;\n        return chars;\n      }\n      return '';\n    }\n    const output = [];\n    while (true) {\n      collectCharacters(SRCSET_COMMAS_OR_SPACES);\n      if (pos >= attributeValue.length) {\n        break;\n      }\n      let url = collectCharacters(SRCSET_NOT_SPACES);\n      if (url.slice(-1) === ',') {\n        url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n        output.push(url);\n      } else {\n        let descriptorsStr = '';\n        url = absoluteToDoc(doc, url);\n        let inParens = false;\n        while (true) {\n          const c = attributeValue.charAt(pos);\n          if (c === '') {\n            output.push((url + descriptorsStr).trim());\n            break;\n          } else if (!inParens) {\n            if (c === ',') {\n              pos += 1;\n              output.push((url + descriptorsStr).trim());\n              break;\n            } else if (c === '(') {\n              inParens = true;\n            }\n          } else {\n            if (c === ')') {\n              inParens = false;\n            }\n          }\n          descriptorsStr += c;\n          pos += 1;\n        }\n      }\n    }\n    return output.join(', ');\n  }\n  const cachedDocument = new WeakMap();\n  function absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n      return attributeValue;\n    }\n    return getHref(doc, attributeValue);\n  }\n  function isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n  }\n  function getHref(doc, customHref) {\n    let a = cachedDocument.get(doc);\n    if (!a) {\n      a = doc.createElement('a');\n      cachedDocument.set(doc, a);\n    }\n    if (!customHref) {\n      customHref = '';\n    } else if (customHref.startsWith('blob:') || customHref.startsWith('data:')) {\n      return customHref;\n    }\n    a.setAttribute('href', customHref);\n    return a.href;\n  }\n  function transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\n    if (!value) {\n      return value;\n    }\n    if (name === 'src' || name === 'href' && !(tagName === 'use' && value[0] === '#')) {\n      return absoluteToDoc(doc, value);\n    } else if (name === 'xlink:href' && value[0] !== '#') {\n      return absoluteToDoc(doc, value);\n    } else if (name === 'background' && (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n      return absoluteToDoc(doc, value);\n    } else if (name === 'srcset') {\n      return getAbsoluteSrcsetString(doc, value);\n    } else if (name === 'style') {\n      return absoluteToStylesheet(value, getHref(doc));\n    } else if (tagName === 'object' && name === 'data') {\n      return absoluteToDoc(doc, value);\n    }\n    if (typeof maskAttributeFn === 'function') {\n      return maskAttributeFn(name, value, element);\n    }\n    return value;\n  }\n  function ignoreAttribute(tagName, name, _value) {\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\n  }\n  function _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    try {\n      if (unblockSelector && element.matches(unblockSelector)) {\n        return false;\n      }\n      if (typeof blockClass === 'string') {\n        if (element.classList.contains(blockClass)) {\n          return true;\n        }\n      } else {\n        for (let eIndex = element.classList.length; eIndex--;) {\n          const className = element.classList[eIndex];\n          if (blockClass.test(className)) {\n            return true;\n          }\n        }\n      }\n      if (blockSelector) {\n        return element.matches(blockSelector);\n      }\n    } catch (e) {}\n    return false;\n  }\n  function elementClassMatchesRegex(el, regex) {\n    for (let eIndex = el.classList.length; eIndex--;) {\n      const className = el.classList[eIndex];\n      if (regex.test(className)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\n    if (!node) return -1;\n    if (node.nodeType !== node.ELEMENT_NODE) return -1;\n    if (distance > limit) return -1;\n    if (matchPredicate(node)) return distance;\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\n  }\n  function createMatchPredicate(className, selector) {\n    return node => {\n      const el = node;\n      if (el === null) return false;\n      try {\n        if (className) {\n          if (typeof className === 'string') {\n            if (el.matches(`.${className}`)) return true;\n          } else if (elementClassMatchesRegex(el, className)) {\n            return true;\n          }\n        }\n        if (selector && el.matches(selector)) return true;\n        return false;\n      } catch (e2) {\n        return false;\n      }\n    };\n  }\n  function needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\n    try {\n      const el = node.nodeType === node.ELEMENT_NODE ? node : node.parentElement;\n      if (el === null) return false;\n      if (el.tagName === 'INPUT') {\n        const autocomplete = el.getAttribute('autocomplete');\n        const disallowedAutocompleteValues = ['current-password', 'new-password', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc'];\n        if (disallowedAutocompleteValues.includes(autocomplete)) {\n          return true;\n        }\n      }\n      let maskDistance = -1;\n      let unmaskDistance = -1;\n      if (maskAllText) {\n        unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\n        if (unmaskDistance < 0) {\n          return true;\n        }\n        maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\n      } else {\n        maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\n        if (maskDistance < 0) {\n          return false;\n        }\n        unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\n      }\n      return maskDistance >= 0 ? unmaskDistance >= 0 ? maskDistance <= unmaskDistance : true : unmaskDistance >= 0 ? false : !!maskAllText;\n    } catch (e) {}\n    return !!maskAllText;\n  }\n  function onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n      return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n      readyState = win.document.readyState;\n    } catch (error) {\n      return;\n    }\n    if (readyState !== 'complete') {\n      const timer = setTimeout$2(() => {\n        if (!fired) {\n          listener();\n          fired = true;\n        }\n      }, iframeLoadTimeout);\n      iframeEl.addEventListener('load', () => {\n        clearTimeout$2(timer);\n        fired = true;\n        listener();\n      });\n      return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl || iframeEl.src === blankUrl || iframeEl.src === '') {\n      setTimeout$2(listener, 0);\n      return iframeEl.addEventListener('load', listener);\n    }\n    iframeEl.addEventListener('load', listener);\n  }\n  function onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\n    let fired = false;\n    let styleSheetLoaded;\n    try {\n      styleSheetLoaded = link.sheet;\n    } catch (error) {\n      return;\n    }\n    if (styleSheetLoaded) return;\n    const timer = setTimeout$2(() => {\n      if (!fired) {\n        listener();\n        fired = true;\n      }\n    }, styleSheetLoadTimeout);\n    link.addEventListener('load', () => {\n      clearTimeout$2(timer);\n      fired = true;\n      listener();\n    });\n  }\n  function serializeNode(n, options) {\n    const {\n      doc,\n      mirror,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskAllText,\n      maskAttributeFn,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      inlineStylesheet,\n      maskInputOptions = {},\n      maskTextFn,\n      maskInputFn,\n      dataURLOptions = {},\n      inlineImages,\n      recordCanvas,\n      keepIframeSrcFn,\n      newlyAddedElement = false\n    } = options;\n    const rootId = getRootId(doc, mirror);\n    switch (n.nodeType) {\n      case n.DOCUMENT_NODE:\n        if (n.compatMode !== 'CSS1Compat') {\n          return {\n            type: NodeType$3.Document,\n            childNodes: [],\n            compatMode: n.compatMode\n          };\n        } else {\n          return {\n            type: NodeType$3.Document,\n            childNodes: []\n          };\n        }\n      case n.DOCUMENT_TYPE_NODE:\n        return {\n          type: NodeType$3.DocumentType,\n          name: n.name,\n          publicId: n.publicId,\n          systemId: n.systemId,\n          rootId\n        };\n      case n.ELEMENT_NODE:\n        return serializeElementNode(n, {\n          doc,\n          blockClass,\n          blockSelector,\n          unblockSelector,\n          inlineStylesheet,\n          maskAttributeFn,\n          maskInputOptions,\n          maskInputFn,\n          dataURLOptions,\n          inlineImages,\n          recordCanvas,\n          keepIframeSrcFn,\n          newlyAddedElement,\n          rootId,\n          maskAllText,\n          maskTextClass,\n          unmaskTextClass,\n          maskTextSelector,\n          unmaskTextSelector\n        });\n      case n.TEXT_NODE:\n        return serializeTextNode(n, {\n          doc,\n          maskAllText,\n          maskTextClass,\n          unmaskTextClass,\n          maskTextSelector,\n          unmaskTextSelector,\n          maskTextFn,\n          maskInputOptions,\n          maskInputFn,\n          rootId\n        });\n      case n.CDATA_SECTION_NODE:\n        return {\n          type: NodeType$3.CDATA,\n          textContent: '',\n          rootId\n        };\n      case n.COMMENT_NODE:\n        return {\n          type: NodeType$3.Comment,\n          textContent: n.textContent || '',\n          rootId\n        };\n      default:\n        return false;\n    }\n  }\n  function getRootId(doc, mirror) {\n    if (!mirror.hasNode(doc)) return undefined;\n    const docId = mirror.getId(doc);\n    return docId === 1 ? undefined : docId;\n  }\n  function serializeTextNode(n, options) {\n    const {\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      maskTextFn,\n      maskInputOptions,\n      maskInputFn,\n      rootId\n    } = options;\n    const parentTagName = n.parentNode && n.parentNode.tagName;\n    let textContent = n.textContent;\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\n    if (isStyle && textContent) {\n      try {\n        if (n.nextSibling || n.previousSibling) {} else if (_optionalChain$5([n, 'access', _7 => _7.parentNode, 'access', _8 => _8.sheet, 'optionalAccess', _9 => _9.cssRules])) {\n          textContent = stringifyStylesheet(n.parentNode.sheet);\n        }\n      } catch (err) {\n        console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n      }\n      textContent = absoluteToStylesheet(textContent, getHref(options.doc));\n    }\n    if (isScript) {\n      textContent = 'SCRIPT_PLACEHOLDER';\n    }\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\n      textContent = maskTextFn ? maskTextFn(textContent, n.parentElement) : textContent.replace(/[\\S]/g, '*');\n    }\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\n      textContent = maskInputFn ? maskInputFn(textContent, n.parentNode) : textContent.replace(/[\\S]/g, '*');\n    }\n    if (parentTagName === 'OPTION' && textContent) {\n      const isInputMasked = shouldMaskInput({\n        type: null,\n        tagName: parentTagName,\n        maskInputOptions\n      });\n      textContent = maskInputValue({\n        isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\n        element: n,\n        value: textContent,\n        maskInputFn\n      });\n    }\n    return {\n      type: NodeType$3.Text,\n      textContent: textContent || '',\n      isStyle,\n      rootId\n    };\n  }\n  function serializeElementNode(n, options) {\n    const {\n      doc,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      inlineStylesheet,\n      maskInputOptions = {},\n      maskAttributeFn,\n      maskInputFn,\n      dataURLOptions = {},\n      inlineImages,\n      recordCanvas,\n      keepIframeSrcFn,\n      newlyAddedElement = false,\n      rootId,\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector\n    } = options;\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n    const tagName = getValidTagName(n);\n    let attributes = {};\n    const len = n.attributes.length;\n    for (let i = 0; i < len; i++) {\n      const attr = n.attributes[i];\n      if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\n        attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\n      }\n    }\n    if (tagName === 'link' && inlineStylesheet) {\n      const stylesheet = Array.from(doc.styleSheets).find(s => {\n        return s.href === n.href;\n      });\n      let cssText = null;\n      if (stylesheet) {\n        cssText = stringifyStylesheet(stylesheet);\n      }\n      if (cssText) {\n        attributes.rel = null;\n        attributes.href = null;\n        attributes.crossorigin = null;\n        attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n      }\n    }\n    if (tagName === 'style' && n.sheet && !(n.innerText || n.textContent || '').trim().length) {\n      const cssText = stringifyStylesheet(n.sheet);\n      if (cssText) {\n        attributes._cssText = absoluteToStylesheet(cssText, getHref(doc));\n      }\n    }\n    if (tagName === 'input' || tagName === 'textarea' || tagName === 'select' || tagName === 'option') {\n      const el = n;\n      const type = getInputType(el);\n      const value = getInputValue(el, toUpperCase(tagName), type);\n      const checked = el.checked;\n      if (type !== 'submit' && type !== 'button' && value) {\n        const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\n          type,\n          tagName: toUpperCase(tagName),\n          maskInputOptions\n        }));\n        attributes.value = maskInputValue({\n          isMasked: forceMask,\n          element: el,\n          value,\n          maskInputFn\n        });\n      }\n      if (checked) {\n        attributes.checked = checked;\n      }\n    }\n    if (tagName === 'option') {\n      if (n.selected && !maskInputOptions['select']) {\n        attributes.selected = true;\n      } else {\n        delete attributes.selected;\n      }\n    }\n    if (tagName === 'canvas' && recordCanvas) {\n      if (n.__context === '2d') {\n        if (!is2DCanvasBlank(n)) {\n          attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n        }\n      } else if (!('__context' in n)) {\n        const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n        const blankCanvas = doc.createElement('canvas');\n        blankCanvas.width = n.width;\n        blankCanvas.height = n.height;\n        const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n        if (canvasDataURL !== blankCanvasDataURL) {\n          attributes.rr_dataURL = canvasDataURL;\n        }\n      }\n    }\n    if (tagName === 'img' && inlineImages) {\n      if (!canvasService) {\n        canvasService = doc.createElement('canvas');\n        canvasCtx = canvasService.getContext('2d');\n      }\n      const image = n;\n      const imageSrc = image.currentSrc || image.getAttribute('src') || '<unknown-src>';\n      const priorCrossOrigin = image.crossOrigin;\n      const recordInlineImage = () => {\n        image.removeEventListener('load', recordInlineImage);\n        try {\n          canvasService.width = image.naturalWidth;\n          canvasService.height = image.naturalHeight;\n          canvasCtx.drawImage(image, 0, 0);\n          attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n        } catch (err) {\n          if (image.crossOrigin !== 'anonymous') {\n            image.crossOrigin = 'anonymous';\n            if (image.complete && image.naturalWidth !== 0) recordInlineImage();else image.addEventListener('load', recordInlineImage);\n            return;\n          } else {\n            console.warn(`Cannot inline img src=${imageSrc}! Error: ${err}`);\n          }\n        }\n        if (image.crossOrigin === 'anonymous') {\n          priorCrossOrigin ? attributes.crossOrigin = priorCrossOrigin : image.removeAttribute('crossorigin');\n        }\n      };\n      if (image.complete && image.naturalWidth !== 0) recordInlineImage();else image.addEventListener('load', recordInlineImage);\n    }\n    if (tagName === 'audio' || tagName === 'video') {\n      attributes.rr_mediaState = n.paused ? 'paused' : 'played';\n      attributes.rr_mediaCurrentTime = n.currentTime;\n    }\n    if (!newlyAddedElement) {\n      if (n.scrollLeft) {\n        attributes.rr_scrollLeft = n.scrollLeft;\n      }\n      if (n.scrollTop) {\n        attributes.rr_scrollTop = n.scrollTop;\n      }\n    }\n    if (needBlock) {\n      const {\n        width,\n        height\n      } = n.getBoundingClientRect();\n      attributes = {\n        class: attributes.class,\n        rr_width: `${width}px`,\n        rr_height: `${height}px`\n      };\n    }\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n      if (!needBlock && !getIframeContentDocument(n)) {\n        attributes.rr_src = attributes.src;\n      }\n      delete attributes.src;\n    }\n    let isCustomElement;\n    try {\n      if (customElements.get(tagName)) isCustomElement = true;\n    } catch (e) {}\n    return {\n      type: NodeType$3.Element,\n      tagName,\n      attributes,\n      childNodes: [],\n      isSVG: isSVGElement(n) || undefined,\n      needBlock,\n      rootId,\n      isCustom: isCustomElement\n    };\n  }\n  function lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n      return '';\n    } else {\n      return maybeAttr.toLowerCase();\n    }\n  }\n  function slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType$3.Comment) {\n      return true;\n    } else if (sn.type === NodeType$3.Element) {\n      if (slimDOMOptions.script && (sn.tagName === 'script' || sn.tagName === 'link' && (sn.attributes.rel === 'preload' || sn.attributes.rel === 'modulepreload') || sn.tagName === 'link' && sn.attributes.rel === 'prefetch' && typeof sn.attributes.href === 'string' && extractFileExtension(sn.attributes.href) === 'js')) {\n        return true;\n      } else if (slimDOMOptions.headFavicon && (sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon' || sn.tagName === 'meta' && (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) || lowerIfExists(sn.attributes.name) === 'application-name' || lowerIfExists(sn.attributes.rel) === 'icon' || lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' || lowerIfExists(sn.attributes.rel) === 'shortcut icon'))) {\n        return true;\n      } else if (sn.tagName === 'meta') {\n        if (slimDOMOptions.headMetaDescKeywords && lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n          return true;\n        } else if (slimDOMOptions.headMetaSocial && (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) || lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) || lowerIfExists(sn.attributes.name) === 'pinterest')) {\n          return true;\n        } else if (slimDOMOptions.headMetaRobots && (lowerIfExists(sn.attributes.name) === 'robots' || lowerIfExists(sn.attributes.name) === 'googlebot' || lowerIfExists(sn.attributes.name) === 'bingbot')) {\n          return true;\n        } else if (slimDOMOptions.headMetaHttpEquiv && sn.attributes['http-equiv'] !== undefined) {\n          return true;\n        } else if (slimDOMOptions.headMetaAuthorship && (lowerIfExists(sn.attributes.name) === 'author' || lowerIfExists(sn.attributes.name) === 'generator' || lowerIfExists(sn.attributes.name) === 'framework' || lowerIfExists(sn.attributes.name) === 'publisher' || lowerIfExists(sn.attributes.name) === 'progid' || lowerIfExists(sn.attributes.property).match(/^article:/) || lowerIfExists(sn.attributes.property).match(/^product:/))) {\n          return true;\n        } else if (slimDOMOptions.headMetaVerification && (lowerIfExists(sn.attributes.name) === 'google-site-verification' || lowerIfExists(sn.attributes.name) === 'yandex-verification' || lowerIfExists(sn.attributes.name) === 'csrf-token' || lowerIfExists(sn.attributes.name) === 'p:domain_verify' || lowerIfExists(sn.attributes.name) === 'verify-v1' || lowerIfExists(sn.attributes.name) === 'verification' || lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function serializeNodeWithId(n, options) {\n    const {\n      doc,\n      mirror,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      skipChild = false,\n      inlineStylesheet = true,\n      maskInputOptions = {},\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      slimDOMOptions,\n      dataURLOptions = {},\n      inlineImages = false,\n      recordCanvas = false,\n      onSerialize,\n      onIframeLoad,\n      iframeLoadTimeout = 5000,\n      onStylesheetLoad,\n      stylesheetLoadTimeout = 5000,\n      keepIframeSrcFn = () => false,\n      newlyAddedElement = false\n    } = options;\n    let {\n      preserveWhiteSpace = true\n    } = options;\n    const _serializedNode = serializeNode(n, {\n      doc,\n      mirror,\n      blockClass,\n      blockSelector,\n      maskAllText,\n      unblockSelector,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      inlineStylesheet,\n      maskInputOptions,\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      dataURLOptions,\n      inlineImages,\n      recordCanvas,\n      keepIframeSrcFn,\n      newlyAddedElement\n    });\n    if (!_serializedNode) {\n      console.warn(n, 'not serialized');\n      return null;\n    }\n    let id;\n    if (mirror.hasNode(n)) {\n      id = mirror.getId(n);\n    } else if (slimDOMExcluded(_serializedNode, slimDOMOptions) || !preserveWhiteSpace && _serializedNode.type === NodeType$3.Text && !_serializedNode.isStyle && !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length) {\n      id = IGNORED_NODE;\n    } else {\n      id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, {\n      id\n    });\n    mirror.add(n, serializedNode);\n    if (id === IGNORED_NODE) {\n      return null;\n    }\n    if (onSerialize) {\n      onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType$3.Element) {\n      recordChild = recordChild && !serializedNode.needBlock;\n      delete serializedNode.needBlock;\n      const shadowRoot = n.shadowRoot;\n      if (shadowRoot && isNativeShadowDom(shadowRoot)) serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType$3.Document || serializedNode.type === NodeType$3.Element) && recordChild) {\n      if (slimDOMOptions.headWhitespace && serializedNode.type === NodeType$3.Element && serializedNode.tagName === 'head') {\n        preserveWhiteSpace = false;\n      }\n      const bypassOptions = {\n        doc,\n        mirror,\n        blockClass,\n        blockSelector,\n        maskAllText,\n        unblockSelector,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        skipChild,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        slimDOMOptions,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        preserveWhiteSpace,\n        onSerialize,\n        onIframeLoad,\n        iframeLoadTimeout,\n        onStylesheetLoad,\n        stylesheetLoadTimeout,\n        keepIframeSrcFn\n      };\n      for (const childN of Array.from(n.childNodes)) {\n        const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n        if (serializedChildNode) {\n          serializedNode.childNodes.push(serializedChildNode);\n        }\n      }\n      if (isElement$1(n) && n.shadowRoot) {\n        for (const childN of Array.from(n.shadowRoot.childNodes)) {\n          const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n          if (serializedChildNode) {\n            isNativeShadowDom(n.shadowRoot) && (serializedChildNode.isShadow = true);\n            serializedNode.childNodes.push(serializedChildNode);\n          }\n        }\n      }\n    }\n    if (n.parentNode && isShadowRoot(n.parentNode) && isNativeShadowDom(n.parentNode)) {\n      serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType$3.Element && serializedNode.tagName === 'iframe') {\n      onceIframeLoaded(n, () => {\n        const iframeDoc = getIframeContentDocument(n);\n        if (iframeDoc && onIframeLoad) {\n          const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n            doc: iframeDoc,\n            mirror,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskAllText,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild: false,\n            inlineStylesheet,\n            maskInputOptions,\n            maskAttributeFn,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            onStylesheetLoad,\n            stylesheetLoadTimeout,\n            keepIframeSrcFn\n          });\n          if (serializedIframeNode) {\n            onIframeLoad(n, serializedIframeNode);\n          }\n        }\n      }, iframeLoadTimeout);\n    }\n    if (serializedNode.type === NodeType$3.Element && serializedNode.tagName === 'link' && typeof serializedNode.attributes.rel === 'string' && (serializedNode.attributes.rel === 'stylesheet' || serializedNode.attributes.rel === 'preload' && typeof serializedNode.attributes.href === 'string' && extractFileExtension(serializedNode.attributes.href) === 'css')) {\n      onceStylesheetLoaded(n, () => {\n        if (onStylesheetLoad) {\n          const serializedLinkNode = serializeNodeWithId(n, {\n            doc,\n            mirror,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskAllText,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild: false,\n            inlineStylesheet,\n            maskInputOptions,\n            maskAttributeFn,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            onStylesheetLoad,\n            stylesheetLoadTimeout,\n            keepIframeSrcFn\n          });\n          if (serializedLinkNode) {\n            onStylesheetLoad(n, serializedLinkNode);\n          }\n        }\n      }, stylesheetLoadTimeout);\n    }\n    return serializedNode;\n  }\n  function snapshot(n, options) {\n    const {\n      mirror = new Mirror(),\n      blockClass = 'rr-block',\n      blockSelector = null,\n      unblockSelector = null,\n      maskAllText = false,\n      maskTextClass = 'rr-mask',\n      unmaskTextClass = null,\n      maskTextSelector = null,\n      unmaskTextSelector = null,\n      inlineStylesheet = true,\n      inlineImages = false,\n      recordCanvas = false,\n      maskAllInputs = false,\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      slimDOM = false,\n      dataURLOptions,\n      preserveWhiteSpace,\n      onSerialize,\n      onIframeLoad,\n      iframeLoadTimeout,\n      onStylesheetLoad,\n      stylesheetLoadTimeout,\n      keepIframeSrcFn = () => false\n    } = options || {};\n    const maskInputOptions = maskAllInputs === true ? {\n      color: true,\n      date: true,\n      'datetime-local': true,\n      email: true,\n      month: true,\n      number: true,\n      range: true,\n      search: true,\n      tel: true,\n      text: true,\n      time: true,\n      url: true,\n      week: true,\n      textarea: true,\n      select: true\n    } : maskAllInputs === false ? {} : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all' ? {\n      script: true,\n      comment: true,\n      headFavicon: true,\n      headWhitespace: true,\n      headMetaDescKeywords: slimDOM === 'all',\n      headMetaSocial: true,\n      headMetaRobots: true,\n      headMetaHttpEquiv: true,\n      headMetaAuthorship: true,\n      headMetaVerification: true\n    } : slimDOM === false ? {} : slimDOM;\n    return serializeNodeWithId(n, {\n      doc: n,\n      mirror,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      skipChild: false,\n      inlineStylesheet,\n      maskInputOptions,\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      slimDOMOptions,\n      dataURLOptions,\n      inlineImages,\n      recordCanvas,\n      preserveWhiteSpace,\n      onSerialize,\n      onIframeLoad,\n      iframeLoadTimeout,\n      onStylesheetLoad,\n      stylesheetLoadTimeout,\n      keepIframeSrcFn,\n      newlyAddedElement: false\n    });\n  }\n  function _optionalChain$4(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        return undefined;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n  function on(type, fn, target = document) {\n    const options = {\n      capture: true,\n      passive: true\n    };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n  }\n  const DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' + '\\r\\n' + 'now you can use replayer.getMirror() to access the mirror instance of a replayer,' + '\\r\\n' + 'or you can use record.mirror to access the mirror instance during recording.';\n  let _mirror = {\n    map: {},\n    getId() {\n      console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      return -1;\n    },\n    getNode() {\n      console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      return null;\n    },\n    removeNodeFromMap() {\n      console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n      console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      return false;\n    },\n    reset() {\n      console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    }\n  };\n  if (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n      get(target, prop, receiver) {\n        if (prop === 'map') {\n          console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        }\n        return Reflect.get(target, prop, receiver);\n      }\n    });\n  }\n  function throttle$1(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (...args) {\n      const now = Date.now();\n      if (!previous && options.leading === false) {\n        previous = now;\n      }\n      const remaining = wait - (now - previous);\n      const context = this;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout$1(timeout);\n          timeout = null;\n        }\n        previous = now;\n        func.apply(context, args);\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout$1(() => {\n          previous = options.leading === false ? 0 : Date.now();\n          timeout = null;\n          func.apply(context, args);\n        }, remaining);\n      }\n    };\n  }\n  function hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked ? d : {\n      set(value) {\n        setTimeout$1(() => {\n          d.set.call(this, value);\n        }, 0);\n        if (original && original.set) {\n          original.set.call(this, value);\n        }\n      }\n    });\n    return () => hookSetter(target, key, original || {}, true);\n  }\n  function patch(source, name, replacement) {\n    try {\n      if (!(name in source)) {\n        return () => {};\n      }\n      const original = source[name];\n      const wrapped = replacement(original);\n      if (typeof wrapped === 'function') {\n        wrapped.prototype = wrapped.prototype || {};\n        Object.defineProperties(wrapped, {\n          __rrweb_original__: {\n            enumerable: false,\n            value: original\n          }\n        });\n      }\n      source[name] = wrapped;\n      return () => {\n        source[name] = original;\n      };\n    } catch (e2) {\n      return () => {};\n    }\n  }\n  let nowTimestamp = Date.now;\n  if (!/[1-9][0-9]{12}/.test(Date.now().toString())) {\n    nowTimestamp = () => new Date().getTime();\n  }\n  function getWindowScroll(win) {\n    const doc = win.document;\n    return {\n      left: doc.scrollingElement ? doc.scrollingElement.scrollLeft : win.pageXOffset !== undefined ? win.pageXOffset : _optionalChain$4([doc, 'optionalAccess', _ => _.documentElement, 'access', _2 => _2.scrollLeft]) || _optionalChain$4([doc, 'optionalAccess', _3 => _3.body, 'optionalAccess', _4 => _4.parentElement, 'optionalAccess', _5 => _5.scrollLeft]) || _optionalChain$4([doc, 'optionalAccess', _6 => _6.body, 'optionalAccess', _7 => _7.scrollLeft]) || 0,\n      top: doc.scrollingElement ? doc.scrollingElement.scrollTop : win.pageYOffset !== undefined ? win.pageYOffset : _optionalChain$4([doc, 'optionalAccess', _8 => _8.documentElement, 'access', _9 => _9.scrollTop]) || _optionalChain$4([doc, 'optionalAccess', _10 => _10.body, 'optionalAccess', _11 => _11.parentElement, 'optionalAccess', _12 => _12.scrollTop]) || _optionalChain$4([doc, 'optionalAccess', _13 => _13.body, 'optionalAccess', _14 => _14.scrollTop]) || 0\n    };\n  }\n  function getWindowHeight() {\n    return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight;\n  }\n  function getWindowWidth() {\n    return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth;\n  }\n  function closestElementOfNode(node) {\n    if (!node) {\n      return null;\n    }\n    const el = node.nodeType === node.ELEMENT_NODE ? node : node.parentElement;\n    return el;\n  }\n  function isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\n    if (!node) {\n      return false;\n    }\n    const el = closestElementOfNode(node);\n    if (!el) {\n      return false;\n    }\n    const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\n    if (!checkAncestors) {\n      const isUnblocked = unblockSelector && el.matches(unblockSelector);\n      return blockedPredicate(el) && !isUnblocked;\n    }\n    const blockDistance = distanceToMatch(el, blockedPredicate);\n    let unblockDistance = -1;\n    if (blockDistance < 0) {\n      return false;\n    }\n    if (unblockSelector) {\n      unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\n    }\n    if (blockDistance > -1 && unblockDistance < 0) {\n      return true;\n    }\n    return blockDistance < unblockDistance;\n  }\n  function isSerialized(n, mirror) {\n    return mirror.getId(n) !== -1;\n  }\n  function isIgnored(n, mirror) {\n    return mirror.getId(n) === IGNORED_NODE;\n  }\n  function isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n      return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n      return true;\n    }\n    if (target.parentNode && target.parentNode.nodeType === target.DOCUMENT_NODE) {\n      return false;\n    }\n    if (!target.parentNode) {\n      return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n  }\n  function legacy_isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n  }\n  function polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n      win.NodeList.prototype.forEach = Array.prototype.forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n      win.DOMTokenList.prototype.forEach = Array.prototype.forEach;\n    }\n    if (!Node.prototype.contains) {\n      Node.prototype.contains = (...args) => {\n        let node = args[0];\n        if (!(0 in args)) {\n          throw new TypeError('1 argument is required');\n        }\n        do {\n          if (this === node) {\n            return true;\n          }\n        } while (node = node && node.parentNode);\n        return false;\n      };\n    }\n  }\n  function isSerializedIframe(n, mirror) {\n    return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\n  }\n  function isSerializedStylesheet(n, mirror) {\n    return Boolean(n.nodeName === 'LINK' && n.nodeType === n.ELEMENT_NODE && n.getAttribute && n.getAttribute('rel') === 'stylesheet' && mirror.getMeta(n));\n  }\n  function hasShadowRoot(n) {\n    return Boolean(_optionalChain$4([n, 'optionalAccess', _18 => _18.shadowRoot]));\n  }\n  class StyleSheetMirror {\n    constructor() {\n      this.id = 1;\n      this.styleIDMap = new WeakMap();\n      this.idStyleMap = new Map();\n    }\n    getId(stylesheet) {\n      return (0, _core._nullishCoalesce)(this.styleIDMap.get(stylesheet), () => -1);\n    }\n    has(stylesheet) {\n      return this.styleIDMap.has(stylesheet);\n    }\n    add(stylesheet, id) {\n      if (this.has(stylesheet)) return this.getId(stylesheet);\n      let newId;\n      if (id === undefined) {\n        newId = this.id++;\n      } else newId = id;\n      this.styleIDMap.set(stylesheet, newId);\n      this.idStyleMap.set(newId, stylesheet);\n      return newId;\n    }\n    getStyle(id) {\n      return this.idStyleMap.get(id) || null;\n    }\n    reset() {\n      this.styleIDMap = new WeakMap();\n      this.idStyleMap = new Map();\n      this.id = 1;\n    }\n    generateId() {\n      return this.id++;\n    }\n  }\n  function getShadowHost(n) {\n    let shadowHost = null;\n    if (_optionalChain$4([n, 'access', _19 => _19.getRootNode, 'optionalCall', _20 => _20(), 'optionalAccess', _21 => _21.nodeType]) === Node.DOCUMENT_FRAGMENT_NODE && n.getRootNode().host) shadowHost = n.getRootNode().host;\n    return shadowHost;\n  }\n  function getRootShadowHost(n) {\n    let rootShadowHost = n;\n    let shadowHost;\n    while (shadowHost = getShadowHost(rootShadowHost)) rootShadowHost = shadowHost;\n    return rootShadowHost;\n  }\n  function shadowHostInDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc) return false;\n    const shadowHost = getRootShadowHost(n);\n    return doc.contains(shadowHost);\n  }\n  function inDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc) return false;\n    return doc.contains(n) || shadowHostInDom(n);\n  }\n  const cachedImplementations = {};\n  function getImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n      return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n      try {\n        const sandbox = document.createElement('iframe');\n        sandbox.hidden = true;\n        document.head.appendChild(sandbox);\n        const contentWindow = sandbox.contentWindow;\n        if (contentWindow && contentWindow[name]) {\n          impl = contentWindow[name];\n        }\n        document.head.removeChild(sandbox);\n      } catch (e) {}\n    }\n    return cachedImplementations[name] = impl.bind(window);\n  }\n  function onRequestAnimationFrame(...rest) {\n    return getImplementation('requestAnimationFrame')(...rest);\n  }\n  function setTimeout$1(...rest) {\n    return getImplementation('setTimeout')(...rest);\n  }\n  function clearTimeout$1(...rest) {\n    return getImplementation('clearTimeout')(...rest);\n  }\n  var EventType = /* @__PURE__ */(EventType2 => {\n    EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n    EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n    EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n    EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n    EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n    EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n    EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n    return EventType2;\n  })(EventType || {});\n  var IncrementalSource = /* @__PURE__ */(IncrementalSource2 => {\n    IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n    IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n    IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n    IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n    IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n    IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n    IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n    IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n    IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n    IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n    IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n    IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n    IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n    IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n    IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n    IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n    IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n    return IncrementalSource2;\n  })(IncrementalSource || {});\n  var MouseInteractions = /* @__PURE__ */(MouseInteractions2 => {\n    MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n    MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n    MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n    MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n    MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n    MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n    MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n    MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n    MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n    MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n    MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n    return MouseInteractions2;\n  })(MouseInteractions || {});\n  var PointerTypes = /* @__PURE__ */(PointerTypes2 => {\n    PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n    PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n    PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n    return PointerTypes2;\n  })(PointerTypes || {});\n  var NodeType$1;\n  (function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n  })(NodeType$1 || (NodeType$1 = {}));\n  var NodeType$2;\n  (function (NodeType) {\n    NodeType[NodeType[\"PLACEHOLDER\"] = 0] = \"PLACEHOLDER\";\n    NodeType[NodeType[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\n    NodeType[NodeType[\"ATTRIBUTE_NODE\"] = 2] = \"ATTRIBUTE_NODE\";\n    NodeType[NodeType[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\n    NodeType[NodeType[\"CDATA_SECTION_NODE\"] = 4] = \"CDATA_SECTION_NODE\";\n    NodeType[NodeType[\"ENTITY_REFERENCE_NODE\"] = 5] = \"ENTITY_REFERENCE_NODE\";\n    NodeType[NodeType[\"ENTITY_NODE\"] = 6] = \"ENTITY_NODE\";\n    NodeType[NodeType[\"PROCESSING_INSTRUCTION_NODE\"] = 7] = \"PROCESSING_INSTRUCTION_NODE\";\n    NodeType[NodeType[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\n    NodeType[NodeType[\"DOCUMENT_NODE\"] = 9] = \"DOCUMENT_NODE\";\n    NodeType[NodeType[\"DOCUMENT_TYPE_NODE\"] = 10] = \"DOCUMENT_TYPE_NODE\";\n    NodeType[NodeType[\"DOCUMENT_FRAGMENT_NODE\"] = 11] = \"DOCUMENT_FRAGMENT_NODE\";\n  })(NodeType$2 || (NodeType$2 = {}));\n  function getIFrameContentDocument(iframe) {\n    try {\n      return iframe.contentDocument;\n    } catch (e) {}\n  }\n  function getIFrameContentWindow(iframe) {\n    try {\n      return iframe.contentWindow;\n    } catch (e) {}\n  }\n  function _optionalChain$3(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        return undefined;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n  function isNodeInLinkedList(n) {\n    return '__ln' in n;\n  }\n  class DoubleLinkedList {\n    constructor() {\n      this.length = 0;\n      this.head = null;\n      this.tail = null;\n    }\n    get(position) {\n      if (position >= this.length) {\n        throw new Error('Position outside of list range');\n      }\n      let current = this.head;\n      for (let index = 0; index < position; index++) {\n        current = _optionalChain$3([current, 'optionalAccess', _ => _.next]) || null;\n      }\n      return current;\n    }\n    addNode(n) {\n      const node = {\n        value: n,\n        previous: null,\n        next: null\n      };\n      n.__ln = node;\n      if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n        const current = n.previousSibling.__ln.next;\n        node.next = current;\n        node.previous = n.previousSibling.__ln;\n        n.previousSibling.__ln.next = node;\n        if (current) {\n          current.previous = node;\n        }\n      } else if (n.nextSibling && isNodeInLinkedList(n.nextSibling) && n.nextSibling.__ln.previous) {\n        const current = n.nextSibling.__ln.previous;\n        node.previous = current;\n        node.next = n.nextSibling.__ln;\n        n.nextSibling.__ln.previous = node;\n        if (current) {\n          current.next = node;\n        }\n      } else {\n        if (this.head) {\n          this.head.previous = node;\n        }\n        node.next = this.head;\n        this.head = node;\n      }\n      if (node.next === null) {\n        this.tail = node;\n      }\n      this.length++;\n    }\n    removeNode(n) {\n      const current = n.__ln;\n      if (!this.head) {\n        return;\n      }\n      if (!current.previous) {\n        this.head = current.next;\n        if (this.head) {\n          this.head.previous = null;\n        } else {\n          this.tail = null;\n        }\n      } else {\n        current.previous.next = current.next;\n        if (current.next) {\n          current.next.previous = current.previous;\n        } else {\n          this.tail = current.previous;\n        }\n      }\n      if (n.__ln) {\n        delete n.__ln;\n      }\n      this.length--;\n    }\n  }\n  const moveKey = (id, parentId) => `${id}@${parentId}`;\n  class MutationBuffer {\n    constructor() {\n      this.frozen = false;\n      this.locked = false;\n      this.texts = [];\n      this.attributes = [];\n      this.attributeMap = new WeakMap();\n      this.removes = [];\n      this.mapRemoves = [];\n      this.movedMap = {};\n      this.addedSet = new Set();\n      this.movedSet = new Set();\n      this.droppedSet = new Set();\n      this.processMutations = mutations => {\n        mutations.forEach(this.processMutation);\n        this.emit();\n      };\n      this.emit = () => {\n        if (this.frozen || this.locked) {\n          return;\n        }\n        const adds = [];\n        const addedIds = new Set();\n        const addList = new DoubleLinkedList();\n        const getNextId = n => {\n          let ns = n;\n          let nextId = IGNORED_NODE;\n          while (nextId === IGNORED_NODE) {\n            ns = ns && ns.nextSibling;\n            nextId = ns && this.mirror.getId(ns);\n          }\n          return nextId;\n        };\n        const pushAdd = n => {\n          if (!n.parentNode || !inDom(n)) {\n            return;\n          }\n          const parentId = isShadowRoot(n.parentNode) ? this.mirror.getId(getShadowHost(n)) : this.mirror.getId(n.parentNode);\n          const nextId = getNextId(n);\n          if (parentId === -1 || nextId === -1) {\n            return addList.addNode(n);\n          }\n          const sn = serializeNodeWithId(n, {\n            doc: this.doc,\n            mirror: this.mirror,\n            blockClass: this.blockClass,\n            blockSelector: this.blockSelector,\n            maskAllText: this.maskAllText,\n            unblockSelector: this.unblockSelector,\n            maskTextClass: this.maskTextClass,\n            unmaskTextClass: this.unmaskTextClass,\n            maskTextSelector: this.maskTextSelector,\n            unmaskTextSelector: this.unmaskTextSelector,\n            skipChild: true,\n            newlyAddedElement: true,\n            inlineStylesheet: this.inlineStylesheet,\n            maskInputOptions: this.maskInputOptions,\n            maskAttributeFn: this.maskAttributeFn,\n            maskTextFn: this.maskTextFn,\n            maskInputFn: this.maskInputFn,\n            slimDOMOptions: this.slimDOMOptions,\n            dataURLOptions: this.dataURLOptions,\n            recordCanvas: this.recordCanvas,\n            inlineImages: this.inlineImages,\n            onSerialize: currentN => {\n              if (isSerializedIframe(currentN, this.mirror) && !isBlocked(currentN, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                this.iframeManager.addIframe(currentN);\n              }\n              if (isSerializedStylesheet(currentN, this.mirror)) {\n                this.stylesheetManager.trackLinkElement(currentN);\n              }\n              if (hasShadowRoot(n)) {\n                this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\n              }\n            },\n            onIframeLoad: (iframe, childSn) => {\n              if (isBlocked(iframe, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                return;\n              }\n              this.iframeManager.attachIframe(iframe, childSn);\n              if (iframe.contentWindow) {\n                this.canvasManager.addWindow(iframe.contentWindow);\n              }\n              this.shadowDomManager.observeAttachShadow(iframe);\n            },\n            onStylesheetLoad: (link, childSn) => {\n              this.stylesheetManager.attachLinkElement(link, childSn);\n            }\n          });\n          if (sn) {\n            adds.push({\n              parentId,\n              nextId,\n              node: sn\n            });\n            addedIds.add(sn.id);\n          }\n        };\n        while (this.mapRemoves.length) {\n          this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n        }\n        for (const n of this.movedSet) {\n          if (isParentRemoved(this.removes, n, this.mirror) && !this.movedSet.has(n.parentNode)) {\n            continue;\n          }\n          pushAdd(n);\n        }\n        for (const n of this.addedSet) {\n          if (!isAncestorInSet(this.droppedSet, n) && !isParentRemoved(this.removes, n, this.mirror)) {\n            pushAdd(n);\n          } else if (isAncestorInSet(this.movedSet, n)) {\n            pushAdd(n);\n          } else {\n            this.droppedSet.add(n);\n          }\n        }\n        let candidate = null;\n        while (addList.length) {\n          let node = null;\n          if (candidate) {\n            const parentId = this.mirror.getId(candidate.value.parentNode);\n            const nextId = getNextId(candidate.value);\n            if (parentId !== -1 && nextId !== -1) {\n              node = candidate;\n            }\n          }\n          if (!node) {\n            let tailNode = addList.tail;\n            while (tailNode) {\n              const _node = tailNode;\n              tailNode = tailNode.previous;\n              if (_node) {\n                const parentId = this.mirror.getId(_node.value.parentNode);\n                const nextId = getNextId(_node.value);\n                if (nextId === -1) continue;else if (parentId !== -1) {\n                  node = _node;\n                  break;\n                } else {\n                  const unhandledNode = _node.value;\n                  if (unhandledNode.parentNode && unhandledNode.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                    const shadowHost = unhandledNode.parentNode.host;\n                    const parentId = this.mirror.getId(shadowHost);\n                    if (parentId !== -1) {\n                      node = _node;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (!node) {\n            while (addList.head) {\n              addList.removeNode(addList.head.value);\n            }\n            break;\n          }\n          candidate = node.previous;\n          addList.removeNode(node.value);\n          pushAdd(node.value);\n        }\n        const payload = {\n          texts: this.texts.map(text => ({\n            id: this.mirror.getId(text.node),\n            value: text.value\n          })).filter(text => !addedIds.has(text.id)).filter(text => this.mirror.has(text.id)),\n          attributes: this.attributes.map(attribute => {\n            const {\n              attributes\n            } = attribute;\n            if (typeof attributes.style === 'string') {\n              const diffAsStr = JSON.stringify(attribute.styleDiff);\n              const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\n              if (diffAsStr.length < attributes.style.length) {\n                if ((diffAsStr + unchangedAsStr).split('var(').length === attributes.style.split('var(').length) {\n                  attributes.style = attribute.styleDiff;\n                }\n              }\n            }\n            return {\n              id: this.mirror.getId(attribute.node),\n              attributes: attributes\n            };\n          }).filter(attribute => !addedIds.has(attribute.id)).filter(attribute => this.mirror.has(attribute.id)),\n          removes: this.removes,\n          adds\n        };\n        if (!payload.texts.length && !payload.attributes.length && !payload.removes.length && !payload.adds.length) {\n          return;\n        }\n        this.texts = [];\n        this.attributes = [];\n        this.attributeMap = new WeakMap();\n        this.removes = [];\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.movedMap = {};\n        this.mutationCb(payload);\n      };\n      this.processMutation = m => {\n        if (isIgnored(m.target, this.mirror)) {\n          return;\n        }\n        switch (m.type) {\n          case 'characterData':\n            {\n              const value = m.target.textContent;\n              if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) && value !== m.oldValue) {\n                this.texts.push({\n                  value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value ? this.maskTextFn ? this.maskTextFn(value, closestElementOfNode(m.target)) : value.replace(/[\\S]/g, '*') : value,\n                  node: m.target\n                });\n              }\n              break;\n            }\n          case 'attributes':\n            {\n              const target = m.target;\n              let attributeName = m.attributeName;\n              let value = m.target.getAttribute(attributeName);\n              if (attributeName === 'value') {\n                const type = getInputType(target);\n                const tagName = target.tagName;\n                value = getInputValue(target, tagName, type);\n                const isInputMasked = shouldMaskInput({\n                  maskInputOptions: this.maskInputOptions,\n                  tagName,\n                  type\n                });\n                const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\n                value = maskInputValue({\n                  isMasked: forceMask,\n                  element: target,\n                  value,\n                  maskInputFn: this.maskInputFn\n                });\n              }\n              if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) || value === m.oldValue) {\n                return;\n              }\n              let item = this.attributeMap.get(m.target);\n              if (target.tagName === 'IFRAME' && attributeName === 'src' && !this.keepIframeSrcFn(value)) {\n                const iframeDoc = getIFrameContentDocument(target);\n                if (!iframeDoc) {\n                  attributeName = 'rr_src';\n                } else {\n                  return;\n                }\n              }\n              if (!item) {\n                item = {\n                  node: m.target,\n                  attributes: {},\n                  styleDiff: {},\n                  _unchangedStyles: {}\n                };\n                this.attributes.push(item);\n                this.attributeMap.set(m.target, item);\n              }\n              if (attributeName === 'type' && target.tagName === 'INPUT' && (m.oldValue || '').toLowerCase() === 'password') {\n                target.setAttribute('data-rr-is-password', 'true');\n              }\n              if (!ignoreAttribute(target.tagName, attributeName)) {\n                item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\n                if (attributeName === 'style') {\n                  if (!this.unattachedDoc) {\n                    try {\n                      this.unattachedDoc = document.implementation.createHTMLDocument();\n                    } catch (e) {\n                      this.unattachedDoc = this.doc;\n                    }\n                  }\n                  const old = this.unattachedDoc.createElement('span');\n                  if (m.oldValue) {\n                    old.setAttribute('style', m.oldValue);\n                  }\n                  for (const pname of Array.from(target.style)) {\n                    const newValue = target.style.getPropertyValue(pname);\n                    const newPriority = target.style.getPropertyPriority(pname);\n                    if (newValue !== old.style.getPropertyValue(pname) || newPriority !== old.style.getPropertyPriority(pname)) {\n                      if (newPriority === '') {\n                        item.styleDiff[pname] = newValue;\n                      } else {\n                        item.styleDiff[pname] = [newValue, newPriority];\n                      }\n                    } else {\n                      item._unchangedStyles[pname] = [newValue, newPriority];\n                    }\n                  }\n                  for (const pname of Array.from(old.style)) {\n                    if (target.style.getPropertyValue(pname) === '') {\n                      item.styleDiff[pname] = false;\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          case 'childList':\n            {\n              if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\n                return;\n              }\n              m.addedNodes.forEach(n => this.genAdds(n, m.target));\n              m.removedNodes.forEach(n => {\n                const nodeId = this.mirror.getId(n);\n                const parentId = isShadowRoot(m.target) ? this.mirror.getId(m.target.host) : this.mirror.getId(m.target);\n                if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) || isIgnored(n, this.mirror) || !isSerialized(n, this.mirror)) {\n                  return;\n                }\n                if (this.addedSet.has(n)) {\n                  deepDelete(this.addedSet, n);\n                  this.droppedSet.add(n);\n                } else if (this.addedSet.has(m.target) && nodeId === -1) ;else if (isAncestorRemoved(m.target, this.mirror)) ;else if (this.movedSet.has(n) && this.movedMap[moveKey(nodeId, parentId)]) {\n                  deepDelete(this.movedSet, n);\n                } else {\n                  this.removes.push({\n                    parentId,\n                    id: nodeId,\n                    isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target) ? true : undefined\n                  });\n                }\n                this.mapRemoves.push(n);\n              });\n              break;\n            }\n        }\n      };\n      this.genAdds = (n, target) => {\n        if (this.processedNodeManager.inOtherBuffer(n, this)) return;\n        if (this.addedSet.has(n) || this.movedSet.has(n)) return;\n        if (this.mirror.hasNode(n)) {\n          if (isIgnored(n, this.mirror)) {\n            return;\n          }\n          this.movedSet.add(n);\n          let targetId = null;\n          if (target && this.mirror.hasNode(target)) {\n            targetId = this.mirror.getId(target);\n          }\n          if (targetId && targetId !== -1) {\n            this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\n          }\n        } else {\n          this.addedSet.add(n);\n          this.droppedSet.delete(n);\n        }\n        if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n          n.childNodes.forEach(childN => this.genAdds(childN));\n          if (hasShadowRoot(n)) {\n            n.shadowRoot.childNodes.forEach(childN => {\n              this.processedNodeManager.add(childN, this);\n              this.genAdds(childN, n);\n            });\n          }\n        }\n      };\n    }\n    init(options) {\n      ['mutationCb', 'blockClass', 'blockSelector', 'unblockSelector', 'maskAllText', 'maskTextClass', 'unmaskTextClass', 'maskTextSelector', 'unmaskTextSelector', 'inlineStylesheet', 'maskInputOptions', 'maskAttributeFn', 'maskTextFn', 'maskInputFn', 'keepIframeSrcFn', 'recordCanvas', 'inlineImages', 'slimDOMOptions', 'dataURLOptions', 'doc', 'mirror', 'iframeManager', 'stylesheetManager', 'shadowDomManager', 'canvasManager', 'processedNodeManager'].forEach(key => {\n        this[key] = options[key];\n      });\n    }\n    freeze() {\n      this.frozen = true;\n      this.canvasManager.freeze();\n    }\n    unfreeze() {\n      this.frozen = false;\n      this.canvasManager.unfreeze();\n      this.emit();\n    }\n    isFrozen() {\n      return this.frozen;\n    }\n    lock() {\n      this.locked = true;\n      this.canvasManager.lock();\n    }\n    unlock() {\n      this.locked = false;\n      this.canvasManager.unlock();\n      this.emit();\n    }\n    reset() {\n      this.shadowDomManager.reset();\n      this.canvasManager.reset();\n    }\n  }\n  function deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach(childN => deepDelete(addsSet, childN));\n  }\n  function isParentRemoved(removes, n, mirror) {\n    if (removes.length === 0) return false;\n    return _isParentRemoved(removes, n, mirror);\n  }\n  function _isParentRemoved(removes, n, mirror) {\n    let node = n.parentNode;\n    while (node) {\n      const parentId = mirror.getId(node);\n      if (removes.some(r => r.id === parentId)) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  }\n  function isAncestorInSet(set, n) {\n    if (set.size === 0) return false;\n    return _isAncestorInSet(set, n);\n  }\n  function _isAncestorInSet(set, n) {\n    const {\n      parentNode\n    } = n;\n    if (!parentNode) {\n      return false;\n    }\n    if (set.has(parentNode)) {\n      return true;\n    }\n    return _isAncestorInSet(set, parentNode);\n  }\n  let errorHandler;\n  function registerErrorHandler(handler) {\n    errorHandler = handler;\n  }\n  function unregisterErrorHandler() {\n    errorHandler = undefined;\n  }\n  const callbackWrapper = cb => {\n    if (!errorHandler) {\n      return cb;\n    }\n    const rrwebWrapped = (...rest) => {\n      try {\n        return cb(...rest);\n      } catch (error) {\n        if (errorHandler && errorHandler(error) === true) {\n          return () => {};\n        }\n        throw error;\n      }\n    };\n    return rrwebWrapped;\n  };\n  function _optionalChain$2(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        return undefined;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n  const mutationBuffers = [];\n  function getEventTarget(event) {\n    try {\n      if ('composedPath' in event) {\n        const path = event.composedPath();\n        if (path.length) {\n          return path[0];\n        }\n      } else if ('path' in event && event.path.length) {\n        return event.path[0];\n      }\n    } catch (e2) {}\n    return event && event.target;\n  }\n  function initMutationObserver(options, rootEl) {\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver || window.__rrMutationObserver;\n    const angularZoneSymbol = _optionalChain$2([window, 'optionalAccess', _ => _.Zone, 'optionalAccess', _2 => _2.__symbol__, 'optionalCall', _3 => _3('MutationObserver')]);\n    if (angularZoneSymbol && window[angularZoneSymbol]) {\n      mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper(mutations => {\n      if (options.onMutation && options.onMutation(mutations) === false) {\n        return;\n      }\n      mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\n    }));\n    observer.observe(rootEl, {\n      attributes: true,\n      attributeOldValue: true,\n      characterData: true,\n      characterDataOldValue: true,\n      childList: true,\n      subtree: true\n    });\n    return observer;\n  }\n  function initMoveObserver({\n    mousemoveCb,\n    sampling,\n    doc,\n    mirror\n  }) {\n    if (sampling.mousemove === false) {\n      return () => {};\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number' ? sampling.mousemoveCallback : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle$1(callbackWrapper(source => {\n      const totalOffset = Date.now() - timeBaseline;\n      mousemoveCb(positions.map(p => {\n        p.timeOffset -= totalOffset;\n        return p;\n      }), source);\n      positions = [];\n      timeBaseline = null;\n    }), callbackThreshold);\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper(evt => {\n      const target = getEventTarget(evt);\n      const {\n        clientX,\n        clientY\n      } = legacy_isTouchEvent(evt) ? evt.changedTouches[0] : evt;\n      if (!timeBaseline) {\n        timeBaseline = nowTimestamp();\n      }\n      positions.push({\n        x: clientX,\n        y: clientY,\n        id: mirror.getId(target),\n        timeOffset: nowTimestamp() - timeBaseline\n      });\n      wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent ? IncrementalSource.Drag : evt instanceof MouseEvent ? IncrementalSource.MouseMove : IncrementalSource.TouchMove);\n    }), threshold, {\n      trailing: false\n    }));\n    const handlers = [on('mousemove', updatePosition, doc), on('touchmove', updatePosition, doc), on('drag', updatePosition, doc)];\n    return callbackWrapper(() => {\n      handlers.forEach(h => h());\n    });\n  }\n  function initMouseInteractionObserver({\n    mouseInteractionCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  }) {\n    if (sampling.mouseInteraction === false) {\n      return () => {};\n    }\n    const disableMap = sampling.mouseInteraction === true || sampling.mouseInteraction === undefined ? {} : sampling.mouseInteraction;\n    const handlers = [];\n    let currentPointerType = null;\n    const getHandler = eventKey => {\n      return event => {\n        const target = getEventTarget(event);\n        if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n          return;\n        }\n        let pointerType = null;\n        let thisEventKey = eventKey;\n        if ('pointerType' in event) {\n          switch (event.pointerType) {\n            case 'mouse':\n              pointerType = PointerTypes.Mouse;\n              break;\n            case 'touch':\n              pointerType = PointerTypes.Touch;\n              break;\n            case 'pen':\n              pointerType = PointerTypes.Pen;\n              break;\n          }\n          if (pointerType === PointerTypes.Touch) {\n            if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\n              thisEventKey = 'TouchStart';\n            } else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\n              thisEventKey = 'TouchEnd';\n            }\n          } else if (pointerType === PointerTypes.Pen) ;\n        } else if (legacy_isTouchEvent(event)) {\n          pointerType = PointerTypes.Touch;\n        }\n        if (pointerType !== null) {\n          currentPointerType = pointerType;\n          if (thisEventKey.startsWith('Touch') && pointerType === PointerTypes.Touch || thisEventKey.startsWith('Mouse') && pointerType === PointerTypes.Mouse) {\n            pointerType = null;\n          }\n        } else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\n          pointerType = currentPointerType;\n          currentPointerType = null;\n        }\n        const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\n        if (!e) {\n          return;\n        }\n        const id = mirror.getId(target);\n        const {\n          clientX,\n          clientY\n        } = e;\n        callbackWrapper(mouseInteractionCb)({\n          type: MouseInteractions[thisEventKey],\n          id,\n          x: clientX,\n          y: clientY,\n          ...(pointerType !== null && {\n            pointerType\n          })\n        });\n      };\n    };\n    Object.keys(MouseInteractions).filter(key => Number.isNaN(Number(key)) && !key.endsWith('_Departed') && disableMap[key] !== false).forEach(eventKey => {\n      let eventName = toLowerCase(eventKey);\n      const handler = getHandler(eventKey);\n      if (window.PointerEvent) {\n        switch (MouseInteractions[eventKey]) {\n          case MouseInteractions.MouseDown:\n          case MouseInteractions.MouseUp:\n            eventName = eventName.replace('mouse', 'pointer');\n            break;\n          case MouseInteractions.TouchStart:\n          case MouseInteractions.TouchEnd:\n            return;\n        }\n      }\n      handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n      handlers.forEach(h => h());\n    });\n  }\n  function initScrollObserver({\n    scrollCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  }) {\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper(evt => {\n      const target = getEventTarget(evt);\n      if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n        return;\n      }\n      const id = mirror.getId(target);\n      if (target === doc && doc.defaultView) {\n        const scrollLeftTop = getWindowScroll(doc.defaultView);\n        scrollCb({\n          id,\n          x: scrollLeftTop.left,\n          y: scrollLeftTop.top\n        });\n      } else {\n        scrollCb({\n          id,\n          x: target.scrollLeft,\n          y: target.scrollTop\n        });\n      }\n    }), sampling.scroll || 100));\n    return on('scroll', updatePosition, doc);\n  }\n  function initViewportResizeObserver({\n    viewportResizeCb\n  }, {\n    win\n  }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = callbackWrapper(throttle$1(callbackWrapper(() => {\n      const height = getWindowHeight();\n      const width = getWindowWidth();\n      if (lastH !== height || lastW !== width) {\n        viewportResizeCb({\n          width: Number(width),\n          height: Number(height)\n        });\n        lastH = height;\n        lastW = width;\n      }\n    }), 200));\n    return on('resize', updateDimension, win);\n  }\n  const INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\n  const lastInputValueMap = new WeakMap();\n  function initInputObserver({\n    inputCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    ignoreClass,\n    ignoreSelector,\n    maskInputOptions,\n    maskInputFn,\n    sampling,\n    userTriggeredOnInput,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector\n  }) {\n    function eventHandler(event) {\n      let target = getEventTarget(event);\n      const userTriggered = event.isTrusted;\n      const tagName = target && toUpperCase(target.tagName);\n      if (tagName === 'OPTION') target = target.parentElement;\n      if (!target || !tagName || INPUT_TAGS.indexOf(tagName) < 0 || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n        return;\n      }\n      const el = target;\n      if (el.classList.contains(ignoreClass) || ignoreSelector && el.matches(ignoreSelector)) {\n        return;\n      }\n      const type = getInputType(target);\n      let text = getInputValue(el, tagName, type);\n      let isChecked = false;\n      const isInputMasked = shouldMaskInput({\n        maskInputOptions,\n        tagName,\n        type\n      });\n      const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\n      if (type === 'radio' || type === 'checkbox') {\n        isChecked = target.checked;\n      }\n      text = maskInputValue({\n        isMasked: forceMask,\n        element: target,\n        value: text,\n        maskInputFn\n      });\n      cbWithDedup(target, userTriggeredOnInput ? {\n        text,\n        isChecked,\n        userTriggered\n      } : {\n        text,\n        isChecked\n      });\n      const name = target.name;\n      if (type === 'radio' && name && isChecked) {\n        doc.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`).forEach(el => {\n          if (el !== target) {\n            const text = maskInputValue({\n              isMasked: forceMask,\n              element: el,\n              value: getInputValue(el, tagName, type),\n              maskInputFn\n            });\n            cbWithDedup(el, userTriggeredOnInput ? {\n              text,\n              isChecked: !isChecked,\n              userTriggered: false\n            } : {\n              text,\n              isChecked: !isChecked\n            });\n          }\n        });\n      }\n    }\n    function cbWithDedup(target, v) {\n      const lastInputValue = lastInputValueMap.get(target);\n      if (!lastInputValue || lastInputValue.text !== v.text || lastInputValue.isChecked !== v.isChecked) {\n        lastInputValueMap.set(target, v);\n        const id = mirror.getId(target);\n        callbackWrapper(inputCb)({\n          ...v,\n          id\n        });\n      }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map(eventName => on(eventName, callbackWrapper(eventHandler), doc));\n    const currentWindow = doc.defaultView;\n    if (!currentWindow) {\n      return () => {\n        handlers.forEach(h => h());\n      };\n    }\n    const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\n    const hookProperties = [[currentWindow.HTMLInputElement.prototype, 'value'], [currentWindow.HTMLInputElement.prototype, 'checked'], [currentWindow.HTMLSelectElement.prototype, 'value'], [currentWindow.HTMLTextAreaElement.prototype, 'value'], [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'], [currentWindow.HTMLOptionElement.prototype, 'selected']];\n    if (propertyDescriptor && propertyDescriptor.set) {\n      handlers.push(...hookProperties.map(p => hookSetter(p[0], p[1], {\n        set() {\n          callbackWrapper(eventHandler)({\n            target: this,\n            isTrusted: false\n          });\n        }\n      }, false, currentWindow)));\n    }\n    return callbackWrapper(() => {\n      handlers.forEach(h => h());\n    });\n  }\n  function getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n      if (hasNestedCSSRule('CSSGroupingRule') && childRule.parentRule instanceof CSSGroupingRule || hasNestedCSSRule('CSSMediaRule') && childRule.parentRule instanceof CSSMediaRule || hasNestedCSSRule('CSSSupportsRule') && childRule.parentRule instanceof CSSSupportsRule || hasNestedCSSRule('CSSConditionRule') && childRule.parentRule instanceof CSSConditionRule) {\n        const rules = Array.from(childRule.parentRule.cssRules);\n        const index = rules.indexOf(childRule);\n        pos.unshift(index);\n      } else if (childRule.parentStyleSheet) {\n        const rules = Array.from(childRule.parentStyleSheet.cssRules);\n        const index = rules.indexOf(childRule);\n        pos.unshift(index);\n      }\n      return pos;\n    }\n    return recurse(rule, positions);\n  }\n  function getIdAndStyleId(sheet, mirror, styleMirror) {\n    let id, styleId;\n    if (!sheet) return {};\n    if (sheet.ownerNode) id = mirror.getId(sheet.ownerNode);else styleId = styleMirror.getId(sheet);\n    return {\n      styleId,\n      id\n    };\n  }\n  function initStyleSheetObserver({\n    styleSheetRuleCb,\n    mirror,\n    stylesheetManager\n  }, {\n    win\n  }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n      return () => {};\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [rule, index] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            adds: [{\n              rule,\n              index\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [index] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            removes: [{\n              index\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    let replace;\n    if (win.CSSStyleSheet.prototype.replace) {\n      replace = win.CSSStyleSheet.prototype.replace;\n      win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n          const [text] = argumentsList;\n          const {\n            id,\n            styleId\n          } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n          if (id && id !== -1 || styleId && styleId !== -1) {\n            styleSheetRuleCb({\n              id,\n              styleId,\n              replace: text\n            });\n          }\n          return target.apply(thisArg, argumentsList);\n        })\n      });\n    }\n    let replaceSync;\n    if (win.CSSStyleSheet.prototype.replaceSync) {\n      replaceSync = win.CSSStyleSheet.prototype.replaceSync;\n      win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n          const [text] = argumentsList;\n          const {\n            id,\n            styleId\n          } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n          if (id && id !== -1 || styleId && styleId !== -1) {\n            styleSheetRuleCb({\n              id,\n              styleId,\n              replaceSync: text\n            });\n          }\n          return target.apply(thisArg, argumentsList);\n        })\n      });\n    }\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n      supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    } else {\n      if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n        supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n      }\n      if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n        supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n      }\n      if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n        supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n      }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n      unmodifiedFunctions[typeKey] = {\n        insertRule: type.prototype.insertRule,\n        deleteRule: type.prototype.deleteRule\n      };\n      type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n          const [rule, index] = argumentsList;\n          const {\n            id,\n            styleId\n          } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n          if (id && id !== -1 || styleId && styleId !== -1) {\n            styleSheetRuleCb({\n              id,\n              styleId,\n              adds: [{\n                rule,\n                index: [...getNestedCSSRulePositions(thisArg), index || 0]\n              }]\n            });\n          }\n          return target.apply(thisArg, argumentsList);\n        })\n      });\n      type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n          const [index] = argumentsList;\n          const {\n            id,\n            styleId\n          } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n          if (id && id !== -1 || styleId && styleId !== -1) {\n            styleSheetRuleCb({\n              id,\n              styleId,\n              removes: [{\n                index: [...getNestedCSSRulePositions(thisArg), index]\n              }]\n            });\n          }\n          return target.apply(thisArg, argumentsList);\n        })\n      });\n    });\n    return callbackWrapper(() => {\n      win.CSSStyleSheet.prototype.insertRule = insertRule;\n      win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n      replace && (win.CSSStyleSheet.prototype.replace = replace);\n      replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\n      Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n        type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n      });\n    });\n  }\n  function initAdoptedStyleSheetObserver({\n    mirror,\n    stylesheetManager\n  }, host) {\n    let hostId = null;\n    if (host.nodeName === '#document') hostId = mirror.getId(host);else hostId = mirror.getId(host.host);\n    const patchTarget = host.nodeName === '#document' ? _optionalChain$2([host, 'access', _4 => _4.defaultView, 'optionalAccess', _5 => _5.Document]) : _optionalChain$2([host, 'access', _6 => _6.ownerDocument, 'optionalAccess', _7 => _7.defaultView, 'optionalAccess', _8 => _8.ShadowRoot]);\n    const originalPropertyDescriptor = _optionalChain$2([patchTarget, 'optionalAccess', _9 => _9.prototype]) ? Object.getOwnPropertyDescriptor(_optionalChain$2([patchTarget, 'optionalAccess', _10 => _10.prototype]), 'adoptedStyleSheets') : undefined;\n    if (hostId === null || hostId === -1 || !patchTarget || !originalPropertyDescriptor) return () => {};\n    Object.defineProperty(host, 'adoptedStyleSheets', {\n      configurable: originalPropertyDescriptor.configurable,\n      enumerable: originalPropertyDescriptor.enumerable,\n      get() {\n        return _optionalChain$2([originalPropertyDescriptor, 'access', _11 => _11.get, 'optionalAccess', _12 => _12.call, 'call', _13 => _13(this)]);\n      },\n      set(sheets) {\n        const result = _optionalChain$2([originalPropertyDescriptor, 'access', _14 => _14.set, 'optionalAccess', _15 => _15.call, 'call', _16 => _16(this, sheets)]);\n        if (hostId !== null && hostId !== -1) {\n          try {\n            stylesheetManager.adoptStyleSheets(sheets, hostId);\n          } catch (e) {}\n        }\n        return result;\n      }\n    });\n    return callbackWrapper(() => {\n      Object.defineProperty(host, 'adoptedStyleSheets', {\n        configurable: originalPropertyDescriptor.configurable,\n        enumerable: originalPropertyDescriptor.enumerable,\n        get: originalPropertyDescriptor.get,\n        set: originalPropertyDescriptor.set\n      });\n    });\n  }\n  function initStyleDeclarationObserver({\n    styleDeclarationCb,\n    mirror,\n    ignoreCSSAttributes,\n    stylesheetManager\n  }, {\n    win\n  }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [property, value, priority] = argumentsList;\n        if (ignoreCSSAttributes.has(property)) {\n          return setProperty.apply(thisArg, [property, value, priority]);\n        }\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _17 => _17.parentRule, 'optionalAccess', _18 => _18.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleDeclarationCb({\n            id,\n            styleId,\n            set: {\n              property,\n              value,\n              priority\n            },\n            index: getNestedCSSRulePositions(thisArg.parentRule)\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [property] = argumentsList;\n        if (ignoreCSSAttributes.has(property)) {\n          return removeProperty.apply(thisArg, [property]);\n        }\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _19 => _19.parentRule, 'optionalAccess', _20 => _20.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleDeclarationCb({\n            id,\n            styleId,\n            remove: {\n              property\n            },\n            index: getNestedCSSRulePositions(thisArg.parentRule)\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    return callbackWrapper(() => {\n      win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n      win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n  }\n  function initMediaInteractionObserver({\n    mediaInteractionCb,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    mirror,\n    sampling,\n    doc\n  }) {\n    const handler = callbackWrapper(type => throttle$1(callbackWrapper(event => {\n      const target = getEventTarget(event);\n      if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n        return;\n      }\n      const {\n        currentTime,\n        volume,\n        muted,\n        playbackRate\n      } = target;\n      mediaInteractionCb({\n        type,\n        id: mirror.getId(target),\n        currentTime,\n        volume,\n        muted,\n        playbackRate\n      });\n    }), sampling.media || 500));\n    const handlers = [on('play', handler(0), doc), on('pause', handler(1), doc), on('seeked', handler(2), doc), on('volumechange', handler(3), doc), on('ratechange', handler(4), doc)];\n    return callbackWrapper(() => {\n      handlers.forEach(h => h());\n    });\n  }\n  function initFontObserver({\n    fontCb,\n    doc\n  }) {\n    const win = doc.defaultView;\n    if (!win) {\n      return () => {};\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n      const fontFace = new originalFontFace(family, source, descriptors);\n      fontMap.set(fontFace, {\n        family,\n        buffer: typeof source !== 'string',\n        descriptors,\n        fontSource: typeof source === 'string' ? source : JSON.stringify(Array.from(new Uint8Array(source)))\n      });\n      return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n      return function (fontFace) {\n        setTimeout$1(callbackWrapper(() => {\n          const p = fontMap.get(fontFace);\n          if (p) {\n            fontCb(p);\n            fontMap.delete(fontFace);\n          }\n        }), 0);\n        return original.apply(this, [fontFace]);\n      };\n    });\n    handlers.push(() => {\n      win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n      handlers.forEach(h => h());\n    });\n  }\n  function initSelectionObserver(param) {\n    const {\n      doc,\n      mirror,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      selectionCb\n    } = param;\n    let collapsed = true;\n    const updateSelection = callbackWrapper(() => {\n      const selection = doc.getSelection();\n      if (!selection || collapsed && _optionalChain$2([selection, 'optionalAccess', _21 => _21.isCollapsed])) return;\n      collapsed = selection.isCollapsed || false;\n      const ranges = [];\n      const count = selection.rangeCount || 0;\n      for (let i = 0; i < count; i++) {\n        const range = selection.getRangeAt(i);\n        const {\n          startContainer,\n          startOffset,\n          endContainer,\n          endOffset\n        } = range;\n        const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) || isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\n        if (blocked) continue;\n        ranges.push({\n          start: mirror.getId(startContainer),\n          startOffset,\n          end: mirror.getId(endContainer),\n          endOffset\n        });\n      }\n      selectionCb({\n        ranges\n      });\n    });\n    updateSelection();\n    return on('selectionchange', updateSelection);\n  }\n  function initCustomElementObserver({\n    doc,\n    customElementCb\n  }) {\n    const win = doc.defaultView;\n    if (!win || !win.customElements) return () => {};\n    const restoreHandler = patch(win.customElements, 'define', function (original) {\n      return function (name, constructor, options) {\n        try {\n          customElementCb({\n            define: {\n              name\n            }\n          });\n        } catch (e) {}\n        return original.apply(this, [name, constructor, options]);\n      };\n    });\n    return restoreHandler;\n  }\n  function initObservers(o, _hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n      return () => {};\n    }\n    let mutationObserver;\n    if (o.recordDOM) {\n      mutationObserver = initMutationObserver(o, o.doc);\n    }\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o, {\n      win: currentWindow\n    });\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    let styleSheetObserver = () => {};\n    let adoptedStyleSheetObserver = () => {};\n    let styleDeclarationObserver = () => {};\n    let fontObserver = () => {};\n    if (o.recordDOM) {\n      styleSheetObserver = initStyleSheetObserver(o, {\n        win: currentWindow\n      });\n      adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\n      styleDeclarationObserver = initStyleDeclarationObserver(o, {\n        win: currentWindow\n      });\n      if (o.collectFonts) {\n        fontObserver = initFontObserver(o);\n      }\n    }\n    const selectionObserver = initSelectionObserver(o);\n    const customElementObserver = initCustomElementObserver(o);\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n      pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n      mutationBuffers.forEach(b => b.reset());\n      _optionalChain$2([mutationObserver, 'optionalAccess', _22 => _22.disconnect, 'call', _23 => _23()]);\n      mousemoveHandler();\n      mouseInteractionHandler();\n      scrollHandler();\n      viewportResizeHandler();\n      inputHandler();\n      mediaInteractionHandler();\n      styleSheetObserver();\n      adoptedStyleSheetObserver();\n      styleDeclarationObserver();\n      fontObserver();\n      selectionObserver();\n      customElementObserver();\n      pluginHandlers.forEach(h => h());\n    });\n  }\n  function hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n  }\n  function canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' && window[prop].prototype && 'insertRule' in window[prop].prototype && 'deleteRule' in window[prop].prototype);\n  }\n  class CrossOriginIframeMirror {\n    constructor(generateIdFn) {\n      this.generateIdFn = generateIdFn;\n      this.iframeIdToRemoteIdMap = new WeakMap();\n      this.iframeRemoteIdToIdMap = new WeakMap();\n    }\n    getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\n      const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\n      const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\n      let id = idToRemoteIdMap.get(remoteId);\n      if (!id) {\n        id = this.generateIdFn();\n        idToRemoteIdMap.set(remoteId, id);\n        remoteIdToIdMap.set(id, remoteId);\n      }\n      return id;\n    }\n    getIds(iframe, remoteId) {\n      const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\n      const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n      return remoteId.map(id => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\n    }\n    getRemoteId(iframe, id, map) {\n      const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\n      if (typeof id !== 'number') return id;\n      const remoteId = remoteIdToIdMap.get(id);\n      if (!remoteId) return -1;\n      return remoteId;\n    }\n    getRemoteIds(iframe, ids) {\n      const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n      return ids.map(id => this.getRemoteId(iframe, id, remoteIdToIdMap));\n    }\n    reset(iframe) {\n      if (!iframe) {\n        this.iframeIdToRemoteIdMap = new WeakMap();\n        this.iframeRemoteIdToIdMap = new WeakMap();\n        return;\n      }\n      this.iframeIdToRemoteIdMap.delete(iframe);\n      this.iframeRemoteIdToIdMap.delete(iframe);\n    }\n    getIdToRemoteIdMap(iframe) {\n      let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\n      if (!idToRemoteIdMap) {\n        idToRemoteIdMap = new Map();\n        this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\n      }\n      return idToRemoteIdMap;\n    }\n    getRemoteIdToIdMap(iframe) {\n      let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\n      if (!remoteIdToIdMap) {\n        remoteIdToIdMap = new Map();\n        this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\n      }\n      return remoteIdToIdMap;\n    }\n  }\n  function _optionalChain$1(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while (i < ops.length) {\n      const op = ops[i];\n      const fn = ops[i + 1];\n      i += 2;\n      if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n        return undefined;\n      }\n      if (op === 'access' || op === 'optionalAccess') {\n        lastAccessLHS = value;\n        value = fn(value);\n      } else if (op === 'call' || op === 'optionalCall') {\n        value = fn((...args) => value.call(lastAccessLHS, ...args));\n        lastAccessLHS = undefined;\n      }\n    }\n    return value;\n  }\n  class IframeManagerNoop {\n    constructor() {\n      this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n      this.crossOriginIframeRootIdMap = new WeakMap();\n    }\n    addIframe() {}\n    addLoadListener() {}\n    attachIframe() {}\n  }\n  class IframeManager {\n    constructor(options) {\n      this.iframes = new WeakMap();\n      this.crossOriginIframeMap = new WeakMap();\n      this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n      this.crossOriginIframeRootIdMap = new WeakMap();\n      this.mutationCb = options.mutationCb;\n      this.wrappedEmit = options.wrappedEmit;\n      this.stylesheetManager = options.stylesheetManager;\n      this.recordCrossOriginIframes = options.recordCrossOriginIframes;\n      this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\n      this.mirror = options.mirror;\n      if (this.recordCrossOriginIframes) {\n        window.addEventListener('message', this.handleMessage.bind(this));\n      }\n    }\n    addIframe(iframeEl) {\n      this.iframes.set(iframeEl, true);\n      if (iframeEl.contentWindow) this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\n    }\n    addLoadListener(cb) {\n      this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n      this.mutationCb({\n        adds: [{\n          parentId: this.mirror.getId(iframeEl),\n          nextId: null,\n          node: childSn\n        }],\n        removes: [],\n        texts: [],\n        attributes: [],\n        isAttachIframe: true\n      });\n      _optionalChain$1([this, 'access', _ => _.loadListener, 'optionalCall', _2 => _2(iframeEl)]);\n      const iframeDoc = getIFrameContentDocument(iframeEl);\n      if (iframeDoc && iframeDoc.adoptedStyleSheets && iframeDoc.adoptedStyleSheets.length > 0) this.stylesheetManager.adoptStyleSheets(iframeDoc.adoptedStyleSheets, this.mirror.getId(iframeDoc));\n    }\n    handleMessage(message) {\n      const crossOriginMessageEvent = message;\n      if (crossOriginMessageEvent.data.type !== 'rrweb' || crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin) return;\n      const iframeSourceWindow = message.source;\n      if (!iframeSourceWindow) return;\n      const iframeEl = this.crossOriginIframeMap.get(message.source);\n      if (!iframeEl) return;\n      const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\n      if (transformedEvent) this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\n    }\n    transformCrossOriginEvent(iframeEl, e) {\n      switch (e.type) {\n        case EventType.FullSnapshot:\n          {\n            this.crossOriginIframeMirror.reset(iframeEl);\n            this.crossOriginIframeStyleMirror.reset(iframeEl);\n            this.replaceIdOnNode(e.data.node, iframeEl);\n            const rootId = e.data.node.id;\n            this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\n            this.patchRootIdOnNode(e.data.node, rootId);\n            return {\n              timestamp: e.timestamp,\n              type: EventType.IncrementalSnapshot,\n              data: {\n                source: IncrementalSource.Mutation,\n                adds: [{\n                  parentId: this.mirror.getId(iframeEl),\n                  nextId: null,\n                  node: e.data.node\n                }],\n                removes: [],\n                texts: [],\n                attributes: [],\n                isAttachIframe: true\n              }\n            };\n          }\n        case EventType.Meta:\n        case EventType.Load:\n        case EventType.DomContentLoaded:\n          {\n            return false;\n          }\n        case EventType.Plugin:\n          {\n            return e;\n          }\n        case EventType.Custom:\n          {\n            this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\n            return e;\n          }\n        case EventType.IncrementalSnapshot:\n          {\n            switch (e.data.source) {\n              case IncrementalSource.Mutation:\n                {\n                  e.data.adds.forEach(n => {\n                    this.replaceIds(n, iframeEl, ['parentId', 'nextId', 'previousId']);\n                    this.replaceIdOnNode(n.node, iframeEl);\n                    const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\n                    rootId && this.patchRootIdOnNode(n.node, rootId);\n                  });\n                  e.data.removes.forEach(n => {\n                    this.replaceIds(n, iframeEl, ['parentId', 'id']);\n                  });\n                  e.data.attributes.forEach(n => {\n                    this.replaceIds(n, iframeEl, ['id']);\n                  });\n                  e.data.texts.forEach(n => {\n                    this.replaceIds(n, iframeEl, ['id']);\n                  });\n                  return e;\n                }\n              case IncrementalSource.Drag:\n              case IncrementalSource.TouchMove:\n              case IncrementalSource.MouseMove:\n                {\n                  e.data.positions.forEach(p => {\n                    this.replaceIds(p, iframeEl, ['id']);\n                  });\n                  return e;\n                }\n              case IncrementalSource.ViewportResize:\n                {\n                  return false;\n                }\n              case IncrementalSource.MediaInteraction:\n              case IncrementalSource.MouseInteraction:\n              case IncrementalSource.Scroll:\n              case IncrementalSource.CanvasMutation:\n              case IncrementalSource.Input:\n                {\n                  this.replaceIds(e.data, iframeEl, ['id']);\n                  return e;\n                }\n              case IncrementalSource.StyleSheetRule:\n              case IncrementalSource.StyleDeclaration:\n                {\n                  this.replaceIds(e.data, iframeEl, ['id']);\n                  this.replaceStyleIds(e.data, iframeEl, ['styleId']);\n                  return e;\n                }\n              case IncrementalSource.Font:\n                {\n                  return e;\n                }\n              case IncrementalSource.Selection:\n                {\n                  e.data.ranges.forEach(range => {\n                    this.replaceIds(range, iframeEl, ['start', 'end']);\n                  });\n                  return e;\n                }\n              case IncrementalSource.AdoptedStyleSheet:\n                {\n                  this.replaceIds(e.data, iframeEl, ['id']);\n                  this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\n                  _optionalChain$1([e, 'access', _3 => _3.data, 'access', _4 => _4.styles, 'optionalAccess', _5 => _5.forEach, 'call', _6 => _6(style => {\n                    this.replaceStyleIds(style, iframeEl, ['styleId']);\n                  })]);\n                  return e;\n                }\n            }\n          }\n      }\n      return false;\n    }\n    replace(iframeMirror, obj, iframeEl, keys) {\n      for (const key of keys) {\n        if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number') continue;\n        if (Array.isArray(obj[key])) {\n          obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\n        } else {\n          obj[key] = iframeMirror.getId(iframeEl, obj[key]);\n        }\n      }\n      return obj;\n    }\n    replaceIds(obj, iframeEl, keys) {\n      return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\n    }\n    replaceStyleIds(obj, iframeEl, keys) {\n      return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\n    }\n    replaceIdOnNode(node, iframeEl) {\n      this.replaceIds(node, iframeEl, ['id', 'rootId']);\n      if ('childNodes' in node) {\n        node.childNodes.forEach(child => {\n          this.replaceIdOnNode(child, iframeEl);\n        });\n      }\n    }\n    patchRootIdOnNode(node, rootId) {\n      if (node.type !== NodeType$3.Document && !node.rootId) node.rootId = rootId;\n      if ('childNodes' in node) {\n        node.childNodes.forEach(child => {\n          this.patchRootIdOnNode(child, rootId);\n        });\n      }\n    }\n  }\n  class ShadowDomManagerNoop {\n    init() {}\n    addShadowRoot() {}\n    observeAttachShadow() {}\n    reset() {}\n  }\n  class ShadowDomManager {\n    constructor(options) {\n      this.shadowDoms = new WeakSet();\n      this.restoreHandlers = [];\n      this.mutationCb = options.mutationCb;\n      this.scrollCb = options.scrollCb;\n      this.bypassOptions = options.bypassOptions;\n      this.mirror = options.mirror;\n      this.init();\n    }\n    init() {\n      this.reset();\n      this.patchAttachShadow(Element, document);\n    }\n    addShadowRoot(shadowRoot, doc) {\n      if (!isNativeShadowDom(shadowRoot)) return;\n      if (this.shadowDoms.has(shadowRoot)) return;\n      this.shadowDoms.add(shadowRoot);\n      this.bypassOptions.canvasManager.addShadowRoot(shadowRoot);\n      const observer = initMutationObserver({\n        ...this.bypassOptions,\n        doc,\n        mutationCb: this.mutationCb,\n        mirror: this.mirror,\n        shadowDomManager: this\n      }, shadowRoot);\n      this.restoreHandlers.push(() => observer.disconnect());\n      this.restoreHandlers.push(initScrollObserver({\n        ...this.bypassOptions,\n        scrollCb: this.scrollCb,\n        doc: shadowRoot,\n        mirror: this.mirror\n      }));\n      setTimeout$1(() => {\n        if (shadowRoot.adoptedStyleSheets && shadowRoot.adoptedStyleSheets.length > 0) this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\n        this.restoreHandlers.push(initAdoptedStyleSheetObserver({\n          mirror: this.mirror,\n          stylesheetManager: this.bypassOptions.stylesheetManager\n        }, shadowRoot));\n      }, 0);\n    }\n    observeAttachShadow(iframeElement) {\n      const iframeDoc = getIFrameContentDocument(iframeElement);\n      const iframeWindow = getIFrameContentWindow(iframeElement);\n      if (!iframeDoc || !iframeWindow) return;\n      this.patchAttachShadow(iframeWindow.Element, iframeDoc);\n    }\n    patchAttachShadow(element, doc) {\n      const manager = this;\n      this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\n        return function (option) {\n          const shadowRoot = original.call(this, option);\n          if (this.shadowRoot && inDom(this)) manager.addShadowRoot(this.shadowRoot, doc);\n          return shadowRoot;\n        };\n      }));\n    }\n    reset() {\n      this.restoreHandlers.forEach(handler => {\n        try {\n          handler();\n        } catch (e) {}\n      });\n      this.restoreHandlers = [];\n      this.shadowDoms = new WeakSet();\n      this.bypassOptions.canvasManager.resetShadowRoots();\n    }\n  }\n  class CanvasManagerNoop {\n    reset() {}\n    freeze() {}\n    unfreeze() {}\n    lock() {}\n    unlock() {}\n    snapshot() {}\n    addWindow() {}\n    addShadowRoot() {}\n    resetShadowRoots() {}\n  }\n  class StylesheetManager {\n    constructor(options) {\n      this.trackedLinkElements = new WeakSet();\n      this.styleMirror = new StyleSheetMirror();\n      this.mutationCb = options.mutationCb;\n      this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\n    }\n    attachLinkElement(linkEl, childSn) {\n      if ('_cssText' in childSn.attributes) this.mutationCb({\n        adds: [],\n        removes: [],\n        texts: [],\n        attributes: [{\n          id: childSn.id,\n          attributes: childSn.attributes\n        }]\n      });\n      this.trackLinkElement(linkEl);\n    }\n    trackLinkElement(linkEl) {\n      if (this.trackedLinkElements.has(linkEl)) return;\n      this.trackedLinkElements.add(linkEl);\n      this.trackStylesheetInLinkElement(linkEl);\n    }\n    adoptStyleSheets(sheets, hostId) {\n      if (sheets.length === 0) return;\n      const adoptedStyleSheetData = {\n        id: hostId,\n        styleIds: []\n      };\n      const styles = [];\n      for (const sheet of sheets) {\n        let styleId;\n        if (!this.styleMirror.has(sheet)) {\n          styleId = this.styleMirror.add(sheet);\n          styles.push({\n            styleId,\n            rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\n              rule: stringifyRule(r),\n              index\n            }))\n          });\n        } else styleId = this.styleMirror.getId(sheet);\n        adoptedStyleSheetData.styleIds.push(styleId);\n      }\n      if (styles.length > 0) adoptedStyleSheetData.styles = styles;\n      this.adoptedStyleSheetCb(adoptedStyleSheetData);\n    }\n    reset() {\n      this.styleMirror.reset();\n      this.trackedLinkElements = new WeakSet();\n    }\n    trackStylesheetInLinkElement(linkEl) {}\n  }\n  class ProcessedNodeManager {\n    constructor() {\n      this.nodeMap = new WeakMap();\n      this.active = false;\n    }\n    inOtherBuffer(node, thisBuffer) {\n      const buffers = this.nodeMap.get(node);\n      return buffers && Array.from(buffers).some(buffer => buffer !== thisBuffer);\n    }\n    add(node, buffer) {\n      if (!this.active) {\n        this.active = true;\n        onRequestAnimationFrame(() => {\n          this.nodeMap = new WeakMap();\n          this.active = false;\n        });\n      }\n      this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\n    }\n    destroy() {}\n  }\n  let wrappedEmit;\n  let _takeFullSnapshot;\n  try {\n    if (Array.from([1], x => x * 2)[0] !== 2) {\n      const cleanFrame = document.createElement('iframe');\n      document.body.appendChild(cleanFrame);\n      Array.from = (0, _core._optionalChain)([cleanFrame, 'access', _ => _.contentWindow, 'optionalAccess', _2 => _2.Array, 'access', _3 => _3.from]) || Array.from;\n      document.body.removeChild(cleanFrame);\n    }\n  } catch (err) {\n    console.debug('Unable to override Array.from', err);\n  }\n  const mirror = createMirror();\n  function record(options = {}) {\n    const {\n      emit,\n      checkoutEveryNms,\n      checkoutEveryNth,\n      blockClass = 'rr-block',\n      blockSelector = null,\n      unblockSelector = null,\n      ignoreClass = 'rr-ignore',\n      ignoreSelector = null,\n      maskAllText = false,\n      maskTextClass = 'rr-mask',\n      unmaskTextClass = null,\n      maskTextSelector = null,\n      unmaskTextSelector = null,\n      inlineStylesheet = true,\n      maskAllInputs,\n      maskInputOptions: _maskInputOptions,\n      slimDOMOptions: _slimDOMOptions,\n      maskAttributeFn,\n      maskInputFn,\n      maskTextFn,\n      maxCanvasSize = null,\n      packFn,\n      sampling = {},\n      dataURLOptions = {},\n      mousemoveWait,\n      recordDOM = true,\n      recordCanvas = false,\n      recordCrossOriginIframes = false,\n      recordAfter = options.recordAfter === 'DOMContentLoaded' ? options.recordAfter : 'load',\n      userTriggeredOnInput = false,\n      collectFonts = false,\n      inlineImages = false,\n      plugins,\n      keepIframeSrcFn = () => false,\n      ignoreCSSAttributes = new Set([]),\n      errorHandler,\n      onMutation,\n      getCanvasManager\n    } = options;\n    registerErrorHandler(errorHandler);\n    const inEmittingFrame = recordCrossOriginIframes ? window.parent === window : true;\n    let passEmitsToParent = false;\n    if (!inEmittingFrame) {\n      try {\n        if (window.parent.document) {\n          passEmitsToParent = false;\n        }\n      } catch (e) {\n        passEmitsToParent = true;\n      }\n    }\n    if (inEmittingFrame && !emit) {\n      throw new Error('emit function is required');\n    }\n    if (!inEmittingFrame && !passEmitsToParent) {\n      return () => {};\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n      sampling.mousemove = mousemoveWait;\n    }\n    mirror.reset();\n    const maskInputOptions = maskAllInputs === true ? {\n      color: true,\n      date: true,\n      'datetime-local': true,\n      email: true,\n      month: true,\n      number: true,\n      range: true,\n      search: true,\n      tel: true,\n      text: true,\n      time: true,\n      url: true,\n      week: true,\n      textarea: true,\n      select: true,\n      radio: true,\n      checkbox: true\n    } : _maskInputOptions !== undefined ? _maskInputOptions : {};\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all' ? {\n      script: true,\n      comment: true,\n      headFavicon: true,\n      headWhitespace: true,\n      headMetaSocial: true,\n      headMetaRobots: true,\n      headMetaHttpEquiv: true,\n      headMetaVerification: true,\n      headMetaAuthorship: _slimDOMOptions === 'all',\n      headMetaDescKeywords: _slimDOMOptions === 'all'\n    } : _slimDOMOptions ? _slimDOMOptions : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = e => {\n      for (const plugin of plugins || []) {\n        if (plugin.eventProcessor) {\n          e = plugin.eventProcessor(e);\n        }\n      }\n      if (packFn && !passEmitsToParent) {\n        e = packFn(e);\n      }\n      return e;\n    };\n    wrappedEmit = (r, isCheckout) => {\n      const e = r;\n      e.timestamp = nowTimestamp();\n      if ((0, _core._optionalChain)([mutationBuffers, 'access', _4 => _4[0], 'optionalAccess', _5 => _5.isFrozen, 'call', _6 => _6()]) && e.type !== EventType.FullSnapshot && !(e.type === EventType.IncrementalSnapshot && e.data.source === IncrementalSource.Mutation)) {\n        mutationBuffers.forEach(buf => buf.unfreeze());\n      }\n      if (inEmittingFrame) {\n        (0, _core._optionalChain)([emit, 'optionalCall', _7 => _7(eventProcessor(e), isCheckout)]);\n      } else if (passEmitsToParent) {\n        const message = {\n          type: 'rrweb',\n          event: eventProcessor(e),\n          origin: window.location.origin,\n          isCheckout\n        };\n        window.parent.postMessage(message, '*');\n      }\n      if (e.type === EventType.FullSnapshot) {\n        lastFullSnapshotEvent = e;\n        incrementalSnapshotCount = 0;\n      } else if (e.type === EventType.IncrementalSnapshot) {\n        if (e.data.source === IncrementalSource.Mutation && e.data.isAttachIframe) {\n          return;\n        }\n        incrementalSnapshotCount++;\n        const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n        const exceedTime = checkoutEveryNms && lastFullSnapshotEvent && e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n        if (exceedCount || exceedTime) {\n          takeFullSnapshot(true);\n        }\n      }\n    };\n    const wrappedMutationEmit = m => {\n      wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n          source: IncrementalSource.Mutation,\n          ...m\n        }\n      });\n    };\n    const wrappedScrollEmit = p => wrappedEmit({\n      type: EventType.IncrementalSnapshot,\n      data: {\n        source: IncrementalSource.Scroll,\n        ...p\n      }\n    });\n    const wrappedCanvasMutationEmit = p => wrappedEmit({\n      type: EventType.IncrementalSnapshot,\n      data: {\n        source: IncrementalSource.CanvasMutation,\n        ...p\n      }\n    });\n    const wrappedAdoptedStyleSheetEmit = a => wrappedEmit({\n      type: EventType.IncrementalSnapshot,\n      data: {\n        source: IncrementalSource.AdoptedStyleSheet,\n        ...a\n      }\n    });\n    const stylesheetManager = new StylesheetManager({\n      mutationCb: wrappedMutationEmit,\n      adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit\n    });\n    const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__ ? new IframeManagerNoop() : new IframeManager({\n      mirror,\n      mutationCb: wrappedMutationEmit,\n      stylesheetManager: stylesheetManager,\n      recordCrossOriginIframes,\n      wrappedEmit\n    });\n    for (const plugin of plugins || []) {\n      if (plugin.getMirror) plugin.getMirror({\n        nodeMirror: mirror,\n        crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\n        crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror\n      });\n    }\n    const processedNodeManager = new ProcessedNodeManager();\n    const canvasManager = _getCanvasManager(getCanvasManager, {\n      mirror,\n      win: window,\n      mutationCb: p => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n          source: IncrementalSource.CanvasMutation,\n          ...p\n        }\n      }),\n      recordCanvas,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maxCanvasSize,\n      sampling: sampling['canvas'],\n      dataURLOptions,\n      errorHandler\n    });\n    const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' && __RRWEB_EXCLUDE_SHADOW_DOM__ ? new ShadowDomManagerNoop() : new ShadowDomManager({\n      mutationCb: wrappedMutationEmit,\n      scrollCb: wrappedScrollEmit,\n      bypassOptions: {\n        onMutation,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputOptions,\n        dataURLOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        recordCanvas,\n        inlineImages,\n        sampling,\n        slimDOMOptions,\n        iframeManager,\n        stylesheetManager,\n        canvasManager,\n        keepIframeSrcFn,\n        processedNodeManager\n      },\n      mirror\n    });\n    const takeFullSnapshot = (isCheckout = false) => {\n      if (!recordDOM) {\n        return;\n      }\n      wrappedEmit({\n        type: EventType.Meta,\n        data: {\n          href: window.location.href,\n          width: getWindowWidth(),\n          height: getWindowHeight()\n        }\n      }, isCheckout);\n      stylesheetManager.reset();\n      shadowDomManager.init();\n      mutationBuffers.forEach(buf => buf.lock());\n      const node = snapshot(document, {\n        mirror,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskAllInputs: maskInputOptions,\n        maskAttributeFn,\n        maskInputFn,\n        maskTextFn,\n        slimDOM: slimDOMOptions,\n        dataURLOptions,\n        recordCanvas,\n        inlineImages,\n        onSerialize: n => {\n          if (isSerializedIframe(n, mirror)) {\n            iframeManager.addIframe(n);\n          }\n          if (isSerializedStylesheet(n, mirror)) {\n            stylesheetManager.trackLinkElement(n);\n          }\n          if (hasShadowRoot(n)) {\n            shadowDomManager.addShadowRoot(n.shadowRoot, document);\n          }\n        },\n        onIframeLoad: (iframe, childSn) => {\n          iframeManager.attachIframe(iframe, childSn);\n          if (iframe.contentWindow) {\n            canvasManager.addWindow(iframe.contentWindow);\n          }\n          shadowDomManager.observeAttachShadow(iframe);\n        },\n        onStylesheetLoad: (linkEl, childSn) => {\n          stylesheetManager.attachLinkElement(linkEl, childSn);\n        },\n        keepIframeSrcFn\n      });\n      if (!node) {\n        return console.warn('Failed to snapshot the document');\n      }\n      wrappedEmit({\n        type: EventType.FullSnapshot,\n        data: {\n          node,\n          initialOffset: getWindowScroll(window)\n        }\n      });\n      mutationBuffers.forEach(buf => buf.unlock());\n      if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0) stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\n    };\n    _takeFullSnapshot = takeFullSnapshot;\n    try {\n      const handlers = [];\n      const observe = doc => {\n        return callbackWrapper(initObservers)({\n          onMutation,\n          mutationCb: wrappedMutationEmit,\n          mousemoveCb: (positions, source) => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source,\n              positions\n            }\n          }),\n          mouseInteractionCb: d => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.MouseInteraction,\n              ...d\n            }\n          }),\n          scrollCb: wrappedScrollEmit,\n          viewportResizeCb: d => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.ViewportResize,\n              ...d\n            }\n          }),\n          inputCb: v => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.Input,\n              ...v\n            }\n          }),\n          mediaInteractionCb: p => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.MediaInteraction,\n              ...p\n            }\n          }),\n          styleSheetRuleCb: r => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.StyleSheetRule,\n              ...r\n            }\n          }),\n          styleDeclarationCb: r => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.StyleDeclaration,\n              ...r\n            }\n          }),\n          canvasMutationCb: wrappedCanvasMutationEmit,\n          fontCb: p => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.Font,\n              ...p\n            }\n          }),\n          selectionCb: p => {\n            wrappedEmit({\n              type: EventType.IncrementalSnapshot,\n              data: {\n                source: IncrementalSource.Selection,\n                ...p\n              }\n            });\n          },\n          customElementCb: c => {\n            wrappedEmit({\n              type: EventType.IncrementalSnapshot,\n              data: {\n                source: IncrementalSource.CustomElement,\n                ...c\n              }\n            });\n          },\n          blockClass,\n          ignoreClass,\n          ignoreSelector,\n          maskAllText,\n          maskTextClass,\n          unmaskTextClass,\n          maskTextSelector,\n          unmaskTextSelector,\n          maskInputOptions,\n          inlineStylesheet,\n          sampling,\n          recordDOM,\n          recordCanvas,\n          inlineImages,\n          userTriggeredOnInput,\n          collectFonts,\n          doc,\n          maskAttributeFn,\n          maskInputFn,\n          maskTextFn,\n          keepIframeSrcFn,\n          blockSelector,\n          unblockSelector,\n          slimDOMOptions,\n          dataURLOptions,\n          mirror,\n          iframeManager,\n          stylesheetManager,\n          shadowDomManager,\n          processedNodeManager,\n          canvasManager,\n          ignoreCSSAttributes,\n          plugins: (0, _core._optionalChain)([plugins, 'optionalAccess', _8 => _8.filter, 'call', _9 => _9(p => p.observer), 'optionalAccess', _10 => _10.map, 'call', _11 => _11(p => ({\n            observer: p.observer,\n            options: p.options,\n            callback: payload => wrappedEmit({\n              type: EventType.Plugin,\n              data: {\n                plugin: p.name,\n                payload\n              }\n            })\n          }))]) || []\n        }, {});\n      };\n      iframeManager.addLoadListener(iframeEl => {\n        try {\n          handlers.push(observe(iframeEl.contentDocument));\n        } catch (error) {\n          console.warn(error);\n        }\n      });\n      const init = () => {\n        takeFullSnapshot();\n        handlers.push(observe(document));\n      };\n      if (document.readyState === 'interactive' || document.readyState === 'complete') {\n        init();\n      } else {\n        handlers.push(on('DOMContentLoaded', () => {\n          wrappedEmit({\n            type: EventType.DomContentLoaded,\n            data: {}\n          });\n          if (recordAfter === 'DOMContentLoaded') init();\n        }));\n        handlers.push(on('load', () => {\n          wrappedEmit({\n            type: EventType.Load,\n            data: {}\n          });\n          if (recordAfter === 'load') init();\n        }, window));\n      }\n      return () => {\n        handlers.forEach(h => h());\n        processedNodeManager.destroy();\n        _takeFullSnapshot = undefined;\n        unregisterErrorHandler();\n      };\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n  function takeFullSnapshot(isCheckout) {\n    if (!_takeFullSnapshot) {\n      throw new Error('please take full snapshot after start recording');\n    }\n    _takeFullSnapshot(isCheckout);\n  }\n  record.mirror = mirror;\n  record.takeFullSnapshot = takeFullSnapshot;\n  function _getCanvasManager(getCanvasManagerFn, options) {\n    try {\n      return getCanvasManagerFn ? getCanvasManagerFn(options) : new CanvasManagerNoop();\n    } catch (e2) {\n      console.warn('Unable to initialize CanvasManager');\n      return new CanvasManagerNoop();\n    }\n  }\n  const ReplayEventTypeIncrementalSnapshot = 3;\n  const ReplayEventTypeCustom = 5;\n\n  /**\n   * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n   */\n  function timestampToMs(timestamp) {\n    const isMs = timestamp > 9999999999;\n    return isMs ? timestamp : timestamp * 1000;\n  }\n\n  /**\n   * Converts a timestamp to s, if it was in ms, or keeps it as s.\n   */\n  function timestampToS(timestamp) {\n    const isMs = timestamp > 9999999999;\n    return isMs ? timestamp / 1000 : timestamp;\n  }\n\n  /**\n   * Add a breadcrumb event to replay.\n   */\n  function addBreadcrumbEvent(replay, breadcrumb) {\n    if (breadcrumb.category === 'sentry.transaction') {\n      return;\n    }\n    if (['ui.click', 'ui.input'].includes(breadcrumb.category)) {\n      replay.triggerUserActivity();\n    } else {\n      replay.checkAndHandleExpiredSession();\n    }\n    replay.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      replay.throttledAddEvent({\n        type: EventType.Custom,\n        // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n        // but maybe we should just keep them as milliseconds\n        timestamp: (breadcrumb.timestamp || 0) * 1000,\n        data: {\n          tag: 'breadcrumb',\n          // normalize to max. 10 depth and 1_000 properties per object\n          payload: (0, _core.normalize)(breadcrumb, 10, 1000)\n        }\n      });\n\n      // Do not flush after console log messages\n      return breadcrumb.category === 'console';\n    });\n  }\n  const INTERACTIVE_SELECTOR = 'button,a';\n\n  /** Get the closest interactive parent element, or else return the given element. */\n  function getClosestInteractive(element) {\n    const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n    return closestInteractive || element;\n  }\n\n  /**\n   * For clicks, we check if the target is inside of a button or link\n   * If so, we use this as the target instead\n   * This is useful because if you click on the image in <button><img></button>,\n   * The target will be the image, not the button, which we don't want here\n   */\n  function getClickTargetNode(event) {\n    const target = getTargetNode(event);\n    if (!target || !(target instanceof Element)) {\n      return target;\n    }\n    return getClosestInteractive(target);\n  }\n\n  /** Get the event target node. */\n  function getTargetNode(event) {\n    if (isEventWithTarget(event)) {\n      return event.target;\n    }\n    return event;\n  }\n  function isEventWithTarget(event) {\n    return typeof event === 'object' && !!event && 'target' in event;\n  }\n  let handlers;\n\n  /**\n   * Register a handler to be called when `window.open()` is called.\n   * Returns a cleanup function.\n   */\n  function onWindowOpen(cb) {\n    // Ensure to only register this once\n    if (!handlers) {\n      handlers = [];\n      monkeyPatchWindowOpen();\n    }\n    handlers.push(cb);\n    return () => {\n      const pos = handlers ? handlers.indexOf(cb) : -1;\n      if (pos > -1) {\n        handlers.splice(pos, 1);\n      }\n    };\n  }\n  function monkeyPatchWindowOpen() {\n    (0, _core.fill)(WINDOW, 'open', function (originalWindowOpen) {\n      return function (...args) {\n        if (handlers) {\n          try {\n            handlers.forEach(handler => handler());\n          } catch (e) {\n            // ignore errors in here\n          }\n        }\n        return originalWindowOpen.apply(WINDOW, args);\n      };\n    });\n  }\n\n  /** Any IncrementalSource for rrweb that we interpret as a kind of mutation. */\n  const IncrementalMutationSources = new Set([IncrementalSource.Mutation, IncrementalSource.StyleSheetRule, IncrementalSource.StyleDeclaration, IncrementalSource.AdoptedStyleSheet, IncrementalSource.CanvasMutation, IncrementalSource.Selection, IncrementalSource.MediaInteraction]);\n\n  /** Handle a click. */\n  function handleClick(clickDetector, clickBreadcrumb, node) {\n    clickDetector.handleClick(clickBreadcrumb, node);\n  }\n\n  /** A click detector class that can be used to detect slow or rage clicks on elements. */\n  class ClickDetector {\n    // protected for testing\n\n    constructor(replay, slowClickConfig,\n    // Just for easier testing\n    _addBreadcrumbEvent = addBreadcrumbEvent) {\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n      this._clicks = [];\n\n      // We want everything in s, but options are in ms\n      this._timeout = slowClickConfig.timeout / 1000;\n      this._threshold = slowClickConfig.threshold / 1000;\n      this._scrollTimeout = slowClickConfig.scrollTimeout / 1000;\n      this._replay = replay;\n      this._ignoreSelector = slowClickConfig.ignoreSelector;\n      this._addBreadcrumbEvent = _addBreadcrumbEvent;\n    }\n\n    /** Register click detection handlers on mutation or scroll. */\n    addListeners() {\n      const cleanupWindowOpen = onWindowOpen(() => {\n        // Treat window.open as mutation\n        this._lastMutation = nowInSeconds();\n      });\n      this._teardown = () => {\n        cleanupWindowOpen();\n        this._clicks = [];\n        this._lastMutation = 0;\n        this._lastScroll = 0;\n      };\n    }\n\n    /** Clean up listeners. */\n    removeListeners() {\n      if (this._teardown) {\n        this._teardown();\n      }\n      if (this._checkClickTimeout) {\n        clearTimeout(this._checkClickTimeout);\n      }\n    }\n\n    /** @inheritDoc */\n    handleClick(breadcrumb, node) {\n      if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n        return;\n      }\n      const newClick = {\n        timestamp: timestampToS(breadcrumb.timestamp),\n        clickBreadcrumb: breadcrumb,\n        // Set this to 0 so we know it originates from the click breadcrumb\n        clickCount: 0,\n        node\n      };\n\n      // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n      if (this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)) {\n        return;\n      }\n      this._clicks.push(newClick);\n\n      // If this is the first new click, set a timeout to check for multi clicks\n      if (this._clicks.length === 1) {\n        this._scheduleCheckClicks();\n      }\n    }\n\n    /** @inheritDoc */\n    registerMutation(timestamp = Date.now()) {\n      this._lastMutation = timestampToS(timestamp);\n    }\n\n    /** @inheritDoc */\n    registerScroll(timestamp = Date.now()) {\n      this._lastScroll = timestampToS(timestamp);\n    }\n\n    /** @inheritDoc */\n    registerClick(element) {\n      const node = getClosestInteractive(element);\n      this._handleMultiClick(node);\n    }\n\n    /** Count multiple clicks on elements. */\n    _handleMultiClick(node) {\n      this._getClicks(node).forEach(click => {\n        click.clickCount++;\n      });\n    }\n\n    /** Get all pending clicks for a given node. */\n    _getClicks(node) {\n      return this._clicks.filter(click => click.node === node);\n    }\n\n    /** Check the clicks that happened. */\n    _checkClicks() {\n      const timedOutClicks = [];\n      const now = nowInSeconds();\n      this._clicks.forEach(click => {\n        if (!click.mutationAfter && this._lastMutation) {\n          click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n        }\n        if (!click.scrollAfter && this._lastScroll) {\n          click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n        }\n\n        // All of these are in seconds!\n        if (click.timestamp + this._timeout <= now) {\n          timedOutClicks.push(click);\n        }\n      });\n\n      // Remove \"old\" clicks\n      for (const click of timedOutClicks) {\n        const pos = this._clicks.indexOf(click);\n        if (pos > -1) {\n          this._generateBreadcrumbs(click);\n          this._clicks.splice(pos, 1);\n        }\n      }\n\n      // Trigger new check, unless no clicks left\n      if (this._clicks.length) {\n        this._scheduleCheckClicks();\n      }\n    }\n\n    /** Generate matching breadcrumb(s) for the click. */\n    _generateBreadcrumbs(click) {\n      const replay = this._replay;\n      const hadScroll = click.scrollAfter && click.scrollAfter <= this._scrollTimeout;\n      const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n      const isSlowClick = !hadScroll && !hadMutation;\n      const {\n        clickCount,\n        clickBreadcrumb\n      } = click;\n\n      // Slow click\n      if (isSlowClick) {\n        // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n        // If not, it means we just timed out without scroll & mutation\n        const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n        const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n        const breadcrumb = {\n          type: 'default',\n          message: clickBreadcrumb.message,\n          timestamp: clickBreadcrumb.timestamp,\n          category: 'ui.slowClickDetected',\n          data: {\n            ...clickBreadcrumb.data,\n            url: WINDOW.location.href,\n            route: replay.getCurrentRoute(),\n            timeAfterClickMs,\n            endReason,\n            // If clickCount === 0, it means multiClick was not correctly captured here\n            // - we still want to send 1 in this case\n            clickCount: clickCount || 1\n          }\n        };\n        this._addBreadcrumbEvent(replay, breadcrumb);\n        return;\n      }\n\n      // Multi click\n      if (clickCount > 1) {\n        const breadcrumb = {\n          type: 'default',\n          message: clickBreadcrumb.message,\n          timestamp: clickBreadcrumb.timestamp,\n          category: 'ui.multiClick',\n          data: {\n            ...clickBreadcrumb.data,\n            url: WINDOW.location.href,\n            route: replay.getCurrentRoute(),\n            clickCount,\n            metric: true\n          }\n        };\n        this._addBreadcrumbEvent(replay, breadcrumb);\n      }\n    }\n\n    /** Schedule to check current clicks. */\n    _scheduleCheckClicks() {\n      if (this._checkClickTimeout) {\n        clearTimeout(this._checkClickTimeout);\n      }\n      this._checkClickTimeout = (0, _browserUtils.setTimeout)(() => this._checkClicks(), 1000);\n    }\n  }\n  const SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n  /** exported for tests only */\n  function ignoreElement(node, ignoreSelector) {\n    if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n      return true;\n    }\n\n    // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n    if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n      return true;\n    }\n\n    // If <a> tag, detect special variants that may not lead to an action\n    // If target !== _self, we may open the link somewhere else, which would lead to no action\n    // Also, when downloading a file, we may not leave the page, but still not trigger an action\n    if (node.tagName === 'A' && (node.hasAttribute('download') || node.hasAttribute('target') && node.getAttribute('target') !== '_self')) {\n      return true;\n    }\n    if (ignoreSelector && node.matches(ignoreSelector)) {\n      return true;\n    }\n    return false;\n  }\n  function isClickBreadcrumb(breadcrumb) {\n    return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n  }\n\n  // This is good enough for us, and is easier to test/mock than `timestampInSeconds`\n  function nowInSeconds() {\n    return Date.now() / 1000;\n  }\n\n  /** Update the click detector based on a recording event of rrweb. */\n  function updateClickDetectorForRecordingEvent(clickDetector, event) {\n    try {\n      // note: We only consider incremental snapshots here\n      // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n      // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n      // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n      // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n      // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n      // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n      if (!isIncrementalEvent(event)) {\n        return;\n      }\n      const {\n        source\n      } = event.data;\n      if (IncrementalMutationSources.has(source)) {\n        clickDetector.registerMutation(event.timestamp);\n      }\n      if (source === IncrementalSource.Scroll) {\n        clickDetector.registerScroll(event.timestamp);\n      }\n      if (isIncrementalMouseInteraction(event)) {\n        const {\n          type,\n          id\n        } = event.data;\n        const node = record.mirror.getNode(id);\n        if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n          clickDetector.registerClick(node);\n        }\n      }\n    } catch (e) {\n      // ignore errors here, e.g. if accessing something that does not exist\n    }\n  }\n  function isIncrementalEvent(event) {\n    return event.type === ReplayEventTypeIncrementalSnapshot;\n  }\n  function isIncrementalMouseInteraction(event) {\n    return event.data.source === IncrementalSource.MouseInteraction;\n  }\n\n  /**\n   * Create a breadcrumb for a replay.\n   */\n  function createBreadcrumb(breadcrumb) {\n    return {\n      timestamp: Date.now() / 1000,\n      type: 'default',\n      ...breadcrumb\n    };\n  }\n  var NodeType;\n  (function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n  })(NodeType || (NodeType = {}));\n\n  // Note that these are the serialized attributes and not attributes directly on\n  // the DOM Node. Attributes we are interested in:\n  const ATTRIBUTES_TO_RECORD = new Set(['id', 'class', 'aria-label', 'role', 'name', 'alt', 'title', 'data-test-id', 'data-testid', 'disabled', 'aria-disabled', 'data-sentry-component']);\n\n  /**\n   * Inclusion list of attributes that we want to record from the DOM element\n   */\n  function getAttributesToRecord(attributes) {\n    const obj = {};\n    if (!attributes['data-sentry-component'] && attributes['data-sentry-element']) {\n      attributes['data-sentry-component'] = attributes['data-sentry-element'];\n    }\n    for (const key in attributes) {\n      if (ATTRIBUTES_TO_RECORD.has(key)) {\n        let normalizedKey = key;\n        if (key === 'data-testid' || key === 'data-test-id') {\n          normalizedKey = 'testId';\n        }\n        obj[normalizedKey] = attributes[key];\n      }\n    }\n    return obj;\n  }\n  const handleDomListener = replay => {\n    return handlerData => {\n      if (!replay.isEnabled()) {\n        return;\n      }\n      const result = handleDom(handlerData);\n      if (!result) {\n        return;\n      }\n      const isClick = handlerData.name === 'click';\n      const event = isClick ? handlerData.event : undefined;\n      // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n      if (isClick && replay.clickDetector && event && event.target && !event.altKey && !event.metaKey && !event.ctrlKey && !event.shiftKey) {\n        handleClick(replay.clickDetector, result, getClickTargetNode(handlerData.event));\n      }\n      addBreadcrumbEvent(replay, result);\n    };\n  };\n\n  /** Get the base DOM breadcrumb. */\n  function getBaseDomBreadcrumb(target, message) {\n    const nodeId = record.mirror.getId(target);\n    const node = nodeId && record.mirror.getNode(nodeId);\n    const meta = node && record.mirror.getMeta(node);\n    const element = meta && isElement(meta) ? meta : null;\n    return {\n      message,\n      data: element ? {\n        nodeId,\n        node: {\n          id: nodeId,\n          tagName: element.tagName,\n          textContent: Array.from(element.childNodes).map(node => node.type === NodeType.Text && node.textContent).filter(Boolean) // filter out empty values\n          .map(text => text.trim()).join(''),\n          attributes: getAttributesToRecord(element.attributes)\n        }\n      } : {}\n    };\n  }\n\n  /**\n   * An event handler to react to DOM events.\n   * Exported for tests.\n   */\n  function handleDom(handlerData) {\n    const {\n      target,\n      message\n    } = getDomTarget(handlerData);\n    return createBreadcrumb({\n      category: `ui.${handlerData.name}`,\n      ...getBaseDomBreadcrumb(target, message)\n    });\n  }\n  function getDomTarget(handlerData) {\n    const isClick = handlerData.name === 'click';\n    let message;\n    let target = null;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = isClick ? getClickTargetNode(handlerData.event) : getTargetNode(handlerData.event);\n      message = (0, _core.htmlTreeAsString)(target, {\n        maxStringLength: 200\n      }) || '<unknown>';\n    } catch (e) {\n      message = '<unknown>';\n    }\n    return {\n      target,\n      message\n    };\n  }\n  function isElement(node) {\n    return node.type === NodeType.Element;\n  }\n\n  /** Handle keyboard events & create breadcrumbs. */\n  function handleKeyboardEvent(replay, event) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    // Update user activity, but do not restart recording as it can create\n    // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n    // session with a single \"keydown\" breadcrumb is created)\n    replay.updateUserActivity();\n    const breadcrumb = getKeyboardBreadcrumb(event);\n    if (!breadcrumb) {\n      return;\n    }\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n\n  /** exported only for tests */\n  function getKeyboardBreadcrumb(event) {\n    const {\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key,\n      target\n    } = event;\n\n    // never capture for input fields\n    if (!target || isInputElement(target) || !key) {\n      return null;\n    }\n\n    // Note: We do not consider shift here, as that means \"uppercase\"\n    const hasModifierKey = metaKey || ctrlKey || altKey;\n    const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n    // Do not capture breadcrumb if only a word key is pressed\n    // This could leak e.g. user input\n    if (!hasModifierKey && isCharacterKey) {\n      return null;\n    }\n    const message = (0, _core.htmlTreeAsString)(target, {\n      maxStringLength: 200\n    }) || '<unknown>';\n    const baseBreadcrumb = getBaseDomBreadcrumb(target, message);\n    return createBreadcrumb({\n      category: 'ui.keyDown',\n      message,\n      data: {\n        ...baseBreadcrumb.data,\n        metaKey,\n        shiftKey,\n        ctrlKey,\n        altKey,\n        key\n      }\n    });\n  }\n  function isInputElement(target) {\n    return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n  }\n\n  // Map entryType -> function to normalize data for event\n  const ENTRY_TYPES = {\n    // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n    resource: createResourceEntry,\n    paint: createPaintEntry,\n    // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n    navigation: createNavigationEntry\n  };\n\n  /**\n   * Handler creater for web vitals\n   */\n  function webVitalHandler(getter, replay) {\n    return ({\n      metric\n    }) => void replay.replayPerformanceEntries.push(getter(metric));\n  }\n\n  /**\n   * Create replay performance entries from the browser performance entries.\n   */\n  function createPerformanceEntries(entries) {\n    return entries.map(createPerformanceEntry).filter(Boolean);\n  }\n  function createPerformanceEntry(entry) {\n    const entryType = ENTRY_TYPES[entry.entryType];\n    if (!entryType) {\n      return null;\n    }\n    return entryType(entry);\n  }\n  function getAbsoluteTime(time) {\n    // browserPerformanceTimeOrigin can be undefined if `performance` or\n    // `performance.now` doesn't exist, but this is already checked by this integration\n    return ((_core.browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n  }\n  function createPaintEntry(entry) {\n    const {\n      duration,\n      entryType,\n      name,\n      startTime\n    } = entry;\n    const start = getAbsoluteTime(startTime);\n    return {\n      type: entryType,\n      name,\n      start,\n      end: start + duration,\n      data: undefined\n    };\n  }\n  function createNavigationEntry(entry) {\n    const {\n      entryType,\n      name,\n      decodedBodySize,\n      duration,\n      domComplete,\n      encodedBodySize,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      domInteractive,\n      loadEventStart,\n      loadEventEnd,\n      redirectCount,\n      startTime,\n      transferSize,\n      type\n    } = entry;\n\n    // Ignore entries with no duration, they do not seem to be useful and cause dupes\n    if (duration === 0) {\n      return null;\n    }\n    return {\n      type: `${entryType}.${type}`,\n      start: getAbsoluteTime(startTime),\n      end: getAbsoluteTime(domComplete),\n      name,\n      data: {\n        size: transferSize,\n        decodedBodySize,\n        encodedBodySize,\n        duration,\n        domInteractive,\n        domContentLoadedEventStart,\n        domContentLoadedEventEnd,\n        loadEventStart,\n        loadEventEnd,\n        domComplete,\n        redirectCount\n      }\n    };\n  }\n  function createResourceEntry(entry) {\n    const {\n      entryType,\n      initiatorType,\n      name,\n      responseEnd,\n      startTime,\n      decodedBodySize,\n      encodedBodySize,\n      responseStatus,\n      transferSize\n    } = entry;\n\n    // Core SDK handles these\n    if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n      return null;\n    }\n    return {\n      type: `${entryType}.${initiatorType}`,\n      start: getAbsoluteTime(startTime),\n      end: getAbsoluteTime(responseEnd),\n      name,\n      data: {\n        size: transferSize,\n        statusCode: responseStatus,\n        decodedBodySize,\n        encodedBodySize\n      }\n    };\n  }\n\n  /**\n   * Add a LCP event to the replay based on a LCP metric.\n   */\n  function getLargestContentfulPaint(metric) {\n    const lastEntry = metric.entries[metric.entries.length - 1];\n    const node = lastEntry && lastEntry.element ? [lastEntry.element] : undefined;\n    return getWebVital(metric, 'largest-contentful-paint', node);\n  }\n  function isLayoutShift(entry) {\n    return entry.sources !== undefined;\n  }\n\n  /**\n   * Add a CLS event to the replay based on a CLS metric.\n   */\n  function getCumulativeLayoutShift(metric) {\n    const layoutShifts = [];\n    const nodes = [];\n    for (const entry of metric.entries) {\n      if (isLayoutShift(entry)) {\n        const nodeIds = [];\n        for (const source of entry.sources) {\n          if (source.node) {\n            nodes.push(source.node);\n            const nodeId = record.mirror.getId(source.node);\n            if (nodeId) {\n              nodeIds.push(nodeId);\n            }\n          }\n        }\n        layoutShifts.push({\n          value: entry.value,\n          nodeIds: nodeIds.length ? nodeIds : undefined\n        });\n      }\n    }\n    return getWebVital(metric, 'cumulative-layout-shift', nodes, layoutShifts);\n  }\n\n  /**\n   * Add a FID event to the replay based on a FID metric.\n   */\n  function getFirstInputDelay(metric) {\n    const lastEntry = metric.entries[metric.entries.length - 1];\n    const node = lastEntry && lastEntry.target ? [lastEntry.target] : undefined;\n    return getWebVital(metric, 'first-input-delay', node);\n  }\n\n  /**\n   * Add an INP event to the replay based on an INP metric.\n   */\n  function getInteractionToNextPaint(metric) {\n    const lastEntry = metric.entries[metric.entries.length - 1];\n    const node = lastEntry && lastEntry.target ? [lastEntry.target] : undefined;\n    return getWebVital(metric, 'interaction-to-next-paint', node);\n  }\n\n  /**\n   * Add an web vital event to the replay based on the web vital metric.\n   */\n  function getWebVital(metric, name, nodes, attributions) {\n    const value = metric.value;\n    const rating = metric.rating;\n    const end = getAbsoluteTime(value);\n    return {\n      type: 'web-vital',\n      name,\n      start: end,\n      end,\n      data: {\n        value,\n        size: value,\n        rating,\n        nodeIds: nodes ? nodes.map(node => record.mirror.getId(node)) : undefined,\n        attributions\n      }\n    };\n  }\n\n  /**\n   * Sets up a PerformanceObserver to listen to all performance entry types.\n   * Returns a callback to stop observing.\n   */\n  function setupPerformanceObserver(replay) {\n    function addPerformanceEntry(entry) {\n      // It is possible for entries to come up multiple times\n      if (!replay.performanceEntries.includes(entry)) {\n        replay.performanceEntries.push(entry);\n      }\n    }\n    function onEntries({\n      entries\n    }) {\n      entries.forEach(addPerformanceEntry);\n    }\n    const clearCallbacks = [];\n    ['navigation', 'paint', 'resource'].forEach(type => {\n      clearCallbacks.push((0, _browserUtils.addPerformanceInstrumentationHandler)(type, onEntries));\n    });\n    clearCallbacks.push((0, _browserUtils.addLcpInstrumentationHandler)(webVitalHandler(getLargestContentfulPaint, replay)), (0, _browserUtils.addClsInstrumentationHandler)(webVitalHandler(getCumulativeLayoutShift, replay)), (0, _browserUtils.addFidInstrumentationHandler)(webVitalHandler(getFirstInputDelay, replay)), (0, _browserUtils.addInpInstrumentationHandler)(webVitalHandler(getInteractionToNextPaint, replay)));\n\n    // A callback to cleanup all handlers\n    return () => {\n      clearCallbacks.forEach(clearCallback => clearCallback());\n    };\n  }\n\n  /**\n   * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n   *\n   * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n   */\n  const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\n  const r = `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},_=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},x=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=A(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},A=function(t,n,r){return-1==t.s?Math.max(A(t.l,n,r+1),A(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},U=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=x(f,15),M=b.t,E=b.l,A=x(h,15),U=A.t,C=A.l,F=D(M),I=F.c,S=F.n,L=D(U),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=x(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,U)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(U,C,0),R=U;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){_(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;_(r,m,Q[et]),m+=R[et],et>3&&(_(r,m,rt>>5&8191),m+=i[et])}else _(r,m,N[rt]),m+=P[rt]}return _(r,m,N[256]),m+P[256]},C=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}},L=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},O=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=C[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,_=c.p||new n(32768),x=c.h||new n(z+1),A=Math.ceil(o/3),D=2*A,T=function(t){return(a[t]^a[t+1]<<A^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=x[H];if(_[J]=K,x[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=U(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-_[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=_[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=U(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=x,c.p=_,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},j=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},q=function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&j(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}},B=function(t){return 10+(t.filename?t.filename.length+1:0)},G=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(O(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();var H=function(){function t(t,n){this.c=L(),this.v=1,G.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),G.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=O(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=L();i.p(n.dictionary),j(t,2,i.d())}}(r,this.o),this.v=0),n&&j(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),J=\"undefined\"!=typeof TextEncoder&&new TextEncoder,K=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{K.decode(F,{stream:!0})}catch(t){}var N=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(P(t),this.d=n||!1)},t}();function P(n,r){if(J)return J.encode(n);for(var e=n.length,i=new t(n.length+(n.length>>1)),a=0,s=function(t){i[a++]=t},o=0;o<e;++o){if(a+5>i.length){var f=new t(a+8+(e-o<<1));f.set(i),i=f}var h=n.charCodeAt(o);h<128||r?s(h):h<2048?(s(192|h>>6),s(128|63&h)):h>55295&&h<57344?(s(240|(h=65536+(1047552&h)|1023&n.charCodeAt(++o))>>18),s(128|h>>12&63),s(128|h>>6&63),s(128|63&h)):(s(224|h>>12),s(128|h>>6&63),s(128|63&h))}return b(i,0,a)}function Q(t){return function(t,n){n||(n={});var r=S(),e=t.length;r.p(t);var i=O(t,n,B(n),8),a=i.length;return q(i,n),j(i,a-8,r.d()),j(i,a-4,e),i}(P(t))}const R=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(const r of t)n+=r.length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new H,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new N(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},V={clear:()=>{R.clear()},addEvent:t=>R.addEvent(t),finish:()=>R.finish(),compress:t=>Q(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in V&&\"function\"==typeof V[n])try{const t=V[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n  function e() {\n    const e = new Blob([r]);\n    return URL.createObjectURL(e);\n  }\n  const CONSOLE_LEVELS = ['info', 'warn', 'error', 'log'];\n  const PREFIX = '[Replay] ';\n  function _addBreadcrumb(message, level = 'info') {\n    (0, _core.addBreadcrumb)({\n      category: 'console',\n      data: {\n        logger: 'replay'\n      },\n      level,\n      message: `${PREFIX}${message}`\n    }, {\n      level\n    });\n  }\n  function makeReplayLogger() {\n    let _capture = false;\n    let _trace = false;\n    const _logger = {\n      exception: () => undefined,\n      infoTick: () => undefined,\n      setConfig: opts => {\n        _capture = opts.captureExceptions;\n        _trace = opts.traceInternals;\n      }\n    };\n    if (DEBUG_BUILD) {\n      CONSOLE_LEVELS.forEach(name => {\n        _logger[name] = (...args) => {\n          _core.logger[name](PREFIX, ...args);\n          if (_trace) {\n            _addBreadcrumb(args.join(''), (0, _core.severityLevelFromString)(name));\n          }\n        };\n      });\n      _logger.exception = (error, ...message) => {\n        if (message.length && _logger.error) {\n          _logger.error(...message);\n        }\n        _core.logger.error(PREFIX, error);\n        if (_capture) {\n          (0, _core.captureException)(error);\n        } else if (_trace) {\n          // No need for a breadcrumb if `_capture` is enabled since it should be\n          // captured as an exception\n          _addBreadcrumb(error, 'error');\n        }\n      };\n      _logger.infoTick = (...args) => {\n        _core.logger.info(PREFIX, ...args);\n        if (_trace) {\n          // Wait a tick here to avoid race conditions for some initial logs\n          // which may be added before replay is initialized\n          setTimeout(() => _addBreadcrumb(args[0]), 0);\n        }\n      };\n    } else {\n      CONSOLE_LEVELS.forEach(name => {\n        _logger[name] = () => undefined;\n      });\n    }\n    return _logger;\n  }\n  const logger = makeReplayLogger();\n\n  /** This error indicates that the event buffer size exceeded the limit.. */\n  class EventBufferSizeExceededError extends Error {\n    constructor() {\n      super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n    }\n  }\n\n  /**\n   * A basic event buffer that does not do any compression.\n   * Used as fallback if the compression worker cannot be loaded or is disabled.\n   */\n  class EventBufferArray {\n    /** All the events that are buffered to be sent. */\n\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n\n    constructor() {\n      this.events = [];\n      this._totalSize = 0;\n      this.hasCheckout = false;\n      this.waitForCheckout = false;\n    }\n\n    /** @inheritdoc */\n    get hasEvents() {\n      return this.events.length > 0;\n    }\n\n    /** @inheritdoc */\n    get type() {\n      return 'sync';\n    }\n\n    /** @inheritdoc */\n    destroy() {\n      this.events = [];\n    }\n\n    /** @inheritdoc */\n    async addEvent(event) {\n      const eventSize = JSON.stringify(event).length;\n      this._totalSize += eventSize;\n      if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n        throw new EventBufferSizeExceededError();\n      }\n      this.events.push(event);\n    }\n\n    /** @inheritdoc */\n    finish() {\n      return new Promise(resolve => {\n        // Make a copy of the events array reference and immediately clear the\n        // events member so that we do not lose new events while uploading\n        // attachment.\n        const eventsRet = this.events;\n        this.clear();\n        resolve(JSON.stringify(eventsRet));\n      });\n    }\n\n    /** @inheritdoc */\n    clear() {\n      this.events = [];\n      this._totalSize = 0;\n      this.hasCheckout = false;\n    }\n\n    /** @inheritdoc */\n    getEarliestTimestamp() {\n      const timestamp = this.events.map(event => event.timestamp).sort()[0];\n      if (!timestamp) {\n        return null;\n      }\n      return timestampToMs(timestamp);\n    }\n  }\n\n  /**\n   * Event buffer that uses a web worker to compress events.\n   * Exported only for testing.\n   */\n  class WorkerHandler {\n    constructor(worker) {\n      this._worker = worker;\n      this._id = 0;\n    }\n\n    /**\n     * Ensure the worker is ready (or not).\n     * This will either resolve when the worker is ready, or reject if an error occurred.\n     */\n    ensureReady() {\n      // Ensure we only check once\n      if (this._ensureReadyPromise) {\n        return this._ensureReadyPromise;\n      }\n      this._ensureReadyPromise = new Promise((resolve, reject) => {\n        this._worker.addEventListener('message', ({\n          data\n        }) => {\n          if (data.success) {\n            resolve();\n          } else {\n            reject();\n          }\n        }, {\n          once: true\n        });\n        this._worker.addEventListener('error', error => {\n          reject(error);\n        }, {\n          once: true\n        });\n      });\n      return this._ensureReadyPromise;\n    }\n\n    /**\n     * Destroy the worker.\n     */\n    destroy() {\n      DEBUG_BUILD && logger.info('Destroying compression worker');\n      this._worker.terminate();\n    }\n\n    /**\n     * Post message to worker and wait for response before resolving promise.\n     */\n    postMessage(method, arg) {\n      const id = this._getAndIncrementId();\n      return new Promise((resolve, reject) => {\n        const listener = ({\n          data\n        }) => {\n          const response = data;\n          if (response.method !== method) {\n            return;\n          }\n\n          // There can be multiple listeners for a single method, the id ensures\n          // that the response matches the caller.\n          if (response.id !== id) {\n            return;\n          }\n\n          // At this point, we'll always want to remove listener regardless of result status\n          this._worker.removeEventListener('message', listener);\n          if (!response.success) {\n            // TODO: Do some error handling, not sure what\n            DEBUG_BUILD && logger.error('Error in compression worker: ', response.response);\n            reject(new Error('Error in compression worker'));\n            return;\n          }\n          resolve(response.response);\n        };\n\n        // Note: we can't use `once` option because it's possible it needs to\n        // listen to multiple messages\n        this._worker.addEventListener('message', listener);\n        this._worker.postMessage({\n          id,\n          method,\n          arg\n        });\n      });\n    }\n\n    /** Get the current ID and increment it for the next call. */\n    _getAndIncrementId() {\n      return this._id++;\n    }\n  }\n\n  /**\n   * Event buffer that uses a web worker to compress events.\n   * Exported only for testing.\n   */\n  class EventBufferCompressionWorker {\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n\n    constructor(worker) {\n      this._worker = new WorkerHandler(worker);\n      this._earliestTimestamp = null;\n      this._totalSize = 0;\n      this.hasCheckout = false;\n      this.waitForCheckout = false;\n    }\n\n    /** @inheritdoc */\n    get hasEvents() {\n      return !!this._earliestTimestamp;\n    }\n\n    /** @inheritdoc */\n    get type() {\n      return 'worker';\n    }\n\n    /**\n     * Ensure the worker is ready (or not).\n     * This will either resolve when the worker is ready, or reject if an error occurred.\n     */\n    ensureReady() {\n      return this._worker.ensureReady();\n    }\n\n    /**\n     * Destroy the event buffer.\n     */\n    destroy() {\n      this._worker.destroy();\n    }\n\n    /**\n     * Add an event to the event buffer.\n     *\n     * Returns true if event was successfully received and processed by worker.\n     */\n    addEvent(event) {\n      const timestamp = timestampToMs(event.timestamp);\n      if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n        this._earliestTimestamp = timestamp;\n      }\n      const data = JSON.stringify(event);\n      this._totalSize += data.length;\n      if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n        return Promise.reject(new EventBufferSizeExceededError());\n      }\n      return this._sendEventToWorker(data);\n    }\n\n    /**\n     * Finish the event buffer and return the compressed data.\n     */\n    finish() {\n      return this._finishRequest();\n    }\n\n    /** @inheritdoc */\n    clear() {\n      this._earliestTimestamp = null;\n      this._totalSize = 0;\n      this.hasCheckout = false;\n\n      // We do not wait on this, as we assume the order of messages is consistent for the worker\n      this._worker.postMessage('clear').then(null, e => {\n        DEBUG_BUILD && logger.exception(e, 'Sending \"clear\" message to worker failed', e);\n      });\n    }\n\n    /** @inheritdoc */\n    getEarliestTimestamp() {\n      return this._earliestTimestamp;\n    }\n\n    /**\n     * Send the event to the worker.\n     */\n    _sendEventToWorker(data) {\n      return this._worker.postMessage('addEvent', data);\n    }\n\n    /**\n     * Finish the request and return the compressed data from the worker.\n     */\n    async _finishRequest() {\n      const response = await this._worker.postMessage('finish');\n      this._earliestTimestamp = null;\n      this._totalSize = 0;\n      return response;\n    }\n  }\n\n  /**\n   * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n   * This can happen e.g. if the worker cannot be loaded.\n   * Exported only for testing.\n   */\n  class EventBufferProxy {\n    constructor(worker) {\n      this._fallback = new EventBufferArray();\n      this._compression = new EventBufferCompressionWorker(worker);\n      this._used = this._fallback;\n      this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n    }\n\n    /** @inheritdoc */\n    get waitForCheckout() {\n      return this._used.waitForCheckout;\n    }\n\n    /** @inheritdoc */\n    get type() {\n      return this._used.type;\n    }\n\n    /** @inheritDoc */\n    get hasEvents() {\n      return this._used.hasEvents;\n    }\n\n    /** @inheritdoc */\n    get hasCheckout() {\n      return this._used.hasCheckout;\n    }\n    /** @inheritdoc */\n    set hasCheckout(value) {\n      this._used.hasCheckout = value;\n    }\n\n    /** @inheritdoc */\n    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n    set waitForCheckout(value) {\n      this._used.waitForCheckout = value;\n    }\n\n    /** @inheritDoc */\n    destroy() {\n      this._fallback.destroy();\n      this._compression.destroy();\n    }\n\n    /** @inheritdoc */\n    clear() {\n      return this._used.clear();\n    }\n\n    /** @inheritdoc */\n    getEarliestTimestamp() {\n      return this._used.getEarliestTimestamp();\n    }\n\n    /**\n     * Add an event to the event buffer.\n     *\n     * Returns true if event was successfully added.\n     */\n    addEvent(event) {\n      return this._used.addEvent(event);\n    }\n\n    /** @inheritDoc */\n    async finish() {\n      // Ensure the worker is loaded, so the sent event is compressed\n      await this.ensureWorkerIsLoaded();\n      return this._used.finish();\n    }\n\n    /** Ensure the worker has loaded. */\n    ensureWorkerIsLoaded() {\n      return this._ensureWorkerIsLoadedPromise;\n    }\n\n    /** Actually check if the worker has been loaded. */\n    async _ensureWorkerIsLoaded() {\n      try {\n        await this._compression.ensureReady();\n      } catch (error) {\n        // If the worker fails to load, we fall back to the simple buffer.\n        // Nothing more to do from our side here\n        DEBUG_BUILD && logger.exception(error, 'Failed to load the compression worker, falling back to simple buffer');\n        return;\n      }\n\n      // Now we need to switch over the array buffer to the compression worker\n      await this._switchToCompressionWorker();\n    }\n\n    /** Switch the used buffer to the compression worker. */\n    async _switchToCompressionWorker() {\n      const {\n        events,\n        hasCheckout,\n        waitForCheckout\n      } = this._fallback;\n      const addEventPromises = [];\n      for (const event of events) {\n        addEventPromises.push(this._compression.addEvent(event));\n      }\n      this._compression.hasCheckout = hasCheckout;\n      this._compression.waitForCheckout = waitForCheckout;\n\n      // We switch over to the new buffer immediately - any further events will be added\n      // after the previously buffered ones\n      this._used = this._compression;\n\n      // Wait for original events to be re-added before resolving\n      try {\n        await Promise.all(addEventPromises);\n\n        // Can now clear fallback buffer as it's no longer necessary\n        this._fallback.clear();\n      } catch (error) {\n        DEBUG_BUILD && logger.exception(error, 'Failed to add events when switching buffers.');\n      }\n    }\n  }\n\n  /**\n   * Create an event buffer for replays.\n   */\n  function createEventBuffer({\n    useCompression,\n    workerUrl: customWorkerUrl\n  }) {\n    if (useCompression &&\n    // eslint-disable-next-line no-restricted-globals\n    window.Worker) {\n      const worker = _loadWorker(customWorkerUrl);\n      if (worker) {\n        return worker;\n      }\n    }\n    DEBUG_BUILD && logger.info('Using simple buffer');\n    return new EventBufferArray();\n  }\n  function _loadWorker(customWorkerUrl) {\n    try {\n      const workerUrl = customWorkerUrl || _getWorkerUrl();\n      if (!workerUrl) {\n        return;\n      }\n      DEBUG_BUILD && logger.info(`Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n      const worker = new Worker(workerUrl);\n      return new EventBufferProxy(worker);\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to create compression worker');\n      // Fall back to use simple event buffer array\n    }\n  }\n  function _getWorkerUrl() {\n    if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n      return e();\n    }\n    return '';\n  }\n\n  /** If sessionStorage is available. */\n  function hasSessionStorage() {\n    try {\n      // This can throw, e.g. when being accessed in a sandboxed iframe\n      return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Removes the session from Session Storage and unsets session in replay instance\n   */\n  function clearSession(replay) {\n    deleteSession();\n    replay.session = undefined;\n  }\n\n  /**\n   * Deletes a session from storage\n   */\n  function deleteSession() {\n    if (!hasSessionStorage()) {\n      return;\n    }\n    try {\n      WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n    } catch (e) {\n      // Ignore potential SecurityError exceptions\n    }\n  }\n\n  /**\n   * Given a sample rate, returns true if replay should be sampled.\n   *\n   * 1.0 = 100% sampling\n   * 0.0 = 0% sampling\n   */\n  function isSampled(sampleRate) {\n    if (sampleRate === undefined) {\n      return false;\n    }\n\n    // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n    return Math.random() < sampleRate;\n  }\n\n  /**\n   * Get a session with defaults & applied sampling.\n   */\n  function makeSession(session) {\n    const now = Date.now();\n    const id = session.id || (0, _core.uuid4)();\n    // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n    const started = session.started || now;\n    const lastActivity = session.lastActivity || now;\n    const segmentId = session.segmentId || 0;\n    const sampled = session.sampled;\n    const previousSessionId = session.previousSessionId;\n    return {\n      id,\n      started,\n      lastActivity,\n      segmentId,\n      sampled,\n      previousSessionId\n    };\n  }\n\n  /**\n   * Save a session to session storage.\n   */\n  function saveSession(session) {\n    if (!hasSessionStorage()) {\n      return;\n    }\n    try {\n      WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n    } catch (e) {\n      // Ignore potential SecurityError exceptions\n    }\n  }\n\n  /**\n   * Get the sampled status for a session based on sample rates & current sampled status.\n   */\n  function getSessionSampleType(sessionSampleRate, allowBuffering) {\n    return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n  }\n\n  /**\n   * Create a new session, which in its current implementation is a Sentry event\n   * that all replays will be saved to as attachments. Currently, we only expect\n   * one of these Sentry events per \"replay session\".\n   */\n  function createSession({\n    sessionSampleRate,\n    allowBuffering,\n    stickySession = false\n  }, {\n    previousSessionId\n  } = {}) {\n    const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n    const session = makeSession({\n      sampled,\n      previousSessionId\n    });\n    if (stickySession) {\n      saveSession(session);\n    }\n    return session;\n  }\n\n  /**\n   * Fetches a session from storage\n   */\n  function fetchSession() {\n    if (!hasSessionStorage()) {\n      return null;\n    }\n    try {\n      // This can throw if cookies are disabled\n      const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n      if (!sessionStringFromStorage) {\n        return null;\n      }\n      const sessionObj = JSON.parse(sessionStringFromStorage);\n      DEBUG_BUILD && logger.infoTick('Loading existing session');\n      return makeSession(sessionObj);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Given an initial timestamp and an expiry duration, checks to see if current\n   * time should be considered as expired.\n   */\n  function isExpired(initialTime, expiry, targetTime = +new Date()) {\n    // Always expired if < 0\n    if (initialTime === null || expiry === undefined || expiry < 0) {\n      return true;\n    }\n\n    // Never expires if == 0\n    if (expiry === 0) {\n      return false;\n    }\n    return initialTime + expiry <= targetTime;\n  }\n\n  /**\n   * Checks to see if session is expired\n   */\n  function isSessionExpired(session, {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now()\n  }) {\n    return (\n      // First, check that maximum session length has not been exceeded\n      isExpired(session.started, maxReplayDuration, targetTime) ||\n      // check that the idle timeout has not been exceeded (i.e. user has\n      // performed an action within the last `sessionIdleExpire` ms)\n      isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n    );\n  }\n\n  /** If the session should be refreshed or not. */\n  function shouldRefreshSession(session, {\n    sessionIdleExpire,\n    maxReplayDuration\n  }) {\n    // If not expired, all good, just keep the session\n    if (!isSessionExpired(session, {\n      sessionIdleExpire,\n      maxReplayDuration\n    })) {\n      return false;\n    }\n\n    // If we are buffering & haven't ever flushed yet, always continue\n    if (session.sampled === 'buffer' && session.segmentId === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Get or create a session, when initializing the replay.\n   * Returns a session that may be unsampled.\n   */\n  function loadOrCreateSession({\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId\n  }, sessionOptions) {\n    const existingSession = sessionOptions.stickySession && fetchSession();\n\n    // No session exists yet, just create a new one\n    if (!existingSession) {\n      DEBUG_BUILD && logger.infoTick('Creating new session');\n      return createSession(sessionOptions, {\n        previousSessionId\n      });\n    }\n    if (!shouldRefreshSession(existingSession, {\n      sessionIdleExpire,\n      maxReplayDuration\n    })) {\n      return existingSession;\n    }\n    DEBUG_BUILD && logger.infoTick('Session in sessionStorage is expired, creating new one...');\n    return createSession(sessionOptions, {\n      previousSessionId: existingSession.id\n    });\n  }\n  function isCustomEvent(event) {\n    return event.type === EventType.Custom;\n  }\n\n  /**\n   * Add an event to the event buffer.\n   * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n   * Instead this returns `true` if we tried to add the event, else false.\n   * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n   *\n   * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n   */\n  function addEventSync(replay, event, isCheckout) {\n    if (!shouldAddEvent(replay, event)) {\n      return false;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    _addEvent(replay, event, isCheckout);\n    return true;\n  }\n\n  /**\n   * Add an event to the event buffer.\n   * Resolves to `null` if no event was added, else to `void`.\n   *\n   * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n   */\n  function addEvent(replay, event, isCheckout) {\n    if (!shouldAddEvent(replay, event)) {\n      return Promise.resolve(null);\n    }\n    return _addEvent(replay, event, isCheckout);\n  }\n  async function _addEvent(replay, event, isCheckout) {\n    const {\n      eventBuffer\n    } = replay;\n    if (!eventBuffer || eventBuffer.waitForCheckout && !isCheckout) {\n      return null;\n    }\n    const isBufferMode = replay.recordingMode === 'buffer';\n    try {\n      if (isCheckout && isBufferMode) {\n        eventBuffer.clear();\n      }\n      if (isCheckout) {\n        eventBuffer.hasCheckout = true;\n        eventBuffer.waitForCheckout = false;\n      }\n      const replayOptions = replay.getOptions();\n      const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n      if (!eventAfterPossibleCallback) {\n        return;\n      }\n      return await eventBuffer.addEvent(eventAfterPossibleCallback);\n    } catch (error) {\n      const isExceeded = error && error instanceof EventBufferSizeExceededError;\n      const reason = isExceeded ? 'addEventSizeExceeded' : 'addEvent';\n      if (isExceeded && isBufferMode) {\n        // Clear buffer and wait for next checkout\n        eventBuffer.clear();\n        eventBuffer.waitForCheckout = true;\n        return null;\n      }\n      replay.handleException(error);\n      await replay.stop({\n        reason\n      });\n      const client = (0, _core.getClient)();\n      if (client) {\n        client.recordDroppedEvent('internal_sdk_error', 'replay');\n      }\n    }\n  }\n\n  /** Exported only for tests. */\n  function shouldAddEvent(replay, event) {\n    if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n      return false;\n    }\n    const timestampInMs = timestampToMs(event.timestamp);\n\n    // Throw out events that happen more than 5 minutes ago. This can happen if\n    // page has been left open and idle for a long period of time and user\n    // comes back to trigger a new session. The performance entries rely on\n    // `performance.timeOrigin`, which is when the page first opened.\n    if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n      return false;\n    }\n\n    // Throw out events that are +60min from the initial timestamp\n    if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n      DEBUG_BUILD && logger.infoTick(`Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`);\n      return false;\n    }\n    return true;\n  }\n  function maybeApplyCallback(event, callback) {\n    try {\n      if (typeof callback === 'function' && isCustomEvent(event)) {\n        return callback(event);\n      }\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'An error occurred in the `beforeAddRecordingEvent` callback, skipping the event...');\n      return null;\n    }\n    return event;\n  }\n\n  /** If the event is an error event */\n  function isErrorEvent(event) {\n    return !event.type;\n  }\n\n  /** If the event is a transaction event */\n  function isTransactionEvent(event) {\n    return event.type === 'transaction';\n  }\n\n  /** If the event is an replay event */\n  function isReplayEvent(event) {\n    return event.type === 'replay_event';\n  }\n\n  /** If the event is a feedback event */\n  function isFeedbackEvent(event) {\n    return event.type === 'feedback';\n  }\n\n  /**\n   * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n   */\n  function handleAfterSendEvent(replay) {\n    return (event, sendResponse) => {\n      if (!replay.isEnabled() || !isErrorEvent(event) && !isTransactionEvent(event)) {\n        return;\n      }\n      const statusCode = sendResponse && sendResponse.statusCode;\n\n      // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n      // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n      // If we do use the base transport, we skip if we encountered an non-OK status code\n      if (!statusCode || statusCode < 200 || statusCode >= 300) {\n        return;\n      }\n      if (isTransactionEvent(event)) {\n        handleTransactionEvent(replay, event);\n        return;\n      }\n      handleErrorEvent(replay, event);\n    };\n  }\n  function handleTransactionEvent(replay, event) {\n    const replayContext = replay.getContext();\n\n    // Collect traceIds in _context regardless of `recordingMode`\n    // In error mode, _context gets cleared on every checkout\n    // We limit to max. 100 transactions linked\n    if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n      replayContext.traceIds.add(event.contexts.trace.trace_id);\n    }\n  }\n  function handleErrorEvent(replay, event) {\n    const replayContext = replay.getContext();\n\n    // Add error to list of errorIds of replay. This is ok to do even if not\n    // sampled because context will get reset at next checkout.\n    // XXX: There is also a race condition where it's possible to capture an\n    // error to Sentry before Replay SDK has loaded, but response returns after\n    // it was loaded, and this gets called.\n    // We limit to max. 100 errors linked\n    if (event.event_id && replayContext.errorIds.size < 100) {\n      replayContext.errorIds.add(event.event_id);\n    }\n\n    // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n    // Need to be very careful that this does not cause an infinite loop\n    if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n      return;\n    }\n    const {\n      beforeErrorSampling\n    } = replay.getOptions();\n    if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n      return;\n    }\n    (0, _browserUtils.setTimeout)(async () => {\n      try {\n        // Capture current event buffer as new replay\n        await replay.sendBufferedReplayOrFlush();\n      } catch (err) {\n        replay.handleException(err);\n      }\n    });\n  }\n\n  /**\n   * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n   */\n  function handleBeforeSendEvent(replay) {\n    return event => {\n      if (!replay.isEnabled() || !isErrorEvent(event)) {\n        return;\n      }\n      handleHydrationError(replay, event);\n    };\n  }\n  function handleHydrationError(replay, event) {\n    const exceptionValue = event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].value;\n    if (typeof exceptionValue !== 'string') {\n      return;\n    }\n    if (\n    // Only matches errors in production builds of react-dom\n    // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n    // With newer React versions, the messages changed to a different website https://react.dev/errors/418\n    exceptionValue.match(/(reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=|react\\.dev\\/errors\\/)(418|419|422|423|425)/) ||\n    // Development builds of react-dom\n    // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n    // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n    exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.hydrate-error',\n        data: {\n          url: (0, _core.getLocationHref)()\n        }\n      });\n      addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /**\n   * Handle breadcrumbs that Sentry captures, and make sure to capture relevant breadcrumbs to Replay as well.\n   */\n  function handleBreadcrumbs(replay) {\n    const client = (0, _core.getClient)();\n    if (!client) {\n      return;\n    }\n    client.on('beforeAddBreadcrumb', breadcrumb => beforeAddBreadcrumb(replay, breadcrumb));\n  }\n  function beforeAddBreadcrumb(replay, breadcrumb) {\n    if (!replay.isEnabled() || !isBreadcrumbWithCategory(breadcrumb)) {\n      return;\n    }\n    const result = normalizeBreadcrumb(breadcrumb);\n    if (result) {\n      addBreadcrumbEvent(replay, result);\n    }\n  }\n\n  /** Exported only for tests. */\n  function normalizeBreadcrumb(breadcrumb) {\n    if (!isBreadcrumbWithCategory(breadcrumb) || [\n    // fetch & xhr are handled separately,in handleNetworkBreadcrumbs\n    'fetch', 'xhr',\n    // These two are breadcrumbs for emitted sentry events, we don't care about them\n    'sentry.event', 'sentry.transaction'].includes(breadcrumb.category) ||\n    // We capture UI breadcrumbs separately\n    breadcrumb.category.startsWith('ui.')) {\n      return null;\n    }\n    if (breadcrumb.category === 'console') {\n      return normalizeConsoleBreadcrumb(breadcrumb);\n    }\n    return createBreadcrumb(breadcrumb);\n  }\n\n  /** exported for tests only */\n  function normalizeConsoleBreadcrumb(breadcrumb) {\n    const args = breadcrumb.data && breadcrumb.data.arguments;\n    if (!Array.isArray(args) || args.length === 0) {\n      return createBreadcrumb(breadcrumb);\n    }\n    let isTruncated = false;\n\n    // Avoid giant args captures\n    const normalizedArgs = args.map(arg => {\n      if (!arg) {\n        return arg;\n      }\n      if (typeof arg === 'string') {\n        if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return arg;\n      }\n      if (typeof arg === 'object') {\n        try {\n          const normalizedArg = (0, _core.normalize)(arg, 7);\n          const stringified = JSON.stringify(normalizedArg);\n          if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n            isTruncated = true;\n            // We use the pretty printed JSON string here as a base\n            return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n          }\n          return normalizedArg;\n        } catch (e) {\n          // fall back to default\n        }\n      }\n      return arg;\n    });\n    return createBreadcrumb({\n      ...breadcrumb,\n      data: {\n        ...breadcrumb.data,\n        arguments: normalizedArgs,\n        ...(isTruncated ? {\n          _meta: {\n            warnings: ['CONSOLE_ARG_TRUNCATED']\n          }\n        } : {})\n      }\n    });\n  }\n  function isBreadcrumbWithCategory(breadcrumb) {\n    return !!breadcrumb.category;\n  }\n\n  /**\n   * Returns true if we think the given event is an error originating inside of rrweb.\n   */\n  function isRrwebError(event, hint) {\n    if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n      return false;\n    }\n\n    // @ts-expect-error this may be set by rrweb when it finds errors\n    if (hint.originalException && hint.originalException.__rrweb__) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Reset the `replay_id` field on the DSC.\n   */\n  function resetReplayIdOnDynamicSamplingContext() {\n    // Reset DSC on the current scope, if there is one\n    const dsc = (0, _core.getCurrentScope)().getPropagationContext().dsc;\n    if (dsc) {\n      delete dsc.replay_id;\n    }\n\n    // Clear it from frozen DSC on the active span\n    const activeSpan = (0, _core.getActiveSpan)();\n    if (activeSpan) {\n      const dsc = (0, _core.getDynamicSamplingContextFromSpan)(activeSpan);\n      delete dsc.replay_id;\n    }\n  }\n\n  /**\n   * Add a feedback breadcrumb event to replay.\n   */\n  function addFeedbackBreadcrumb(replay, event) {\n    replay.triggerUserActivity();\n    replay.addUpdate(() => {\n      if (!event.timestamp) {\n        // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n        // Return true here so that we don't flush\n        return true;\n      }\n\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      replay.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: event.timestamp * 1000,\n        data: {\n          tag: 'breadcrumb',\n          payload: {\n            timestamp: event.timestamp,\n            type: 'default',\n            category: 'sentry.feedback',\n            data: {\n              feedbackId: event.event_id\n            }\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  /**\n   * Determine if event should be sampled (only applies in buffer mode).\n   * When an event is captured by `handleGlobalEvent`, when in buffer mode\n   * we determine if we want to sample the error or not.\n   */\n  function shouldSampleForBufferEvent(replay, event) {\n    if (replay.recordingMode !== 'buffer') {\n      return false;\n    }\n\n    // ignore this error because otherwise we could loop indefinitely with\n    // trying to capture replay and failing\n    if (event.message === UNABLE_TO_SEND_REPLAY) {\n      return false;\n    }\n\n    // Require the event to be an error event & to have an exception\n    if (!event.exception || event.type) {\n      return false;\n    }\n    return isSampled(replay.getOptions().errorSampleRate);\n  }\n\n  /**\n   * Returns a listener to be added to `addEventProcessor(listener)`.\n   */\n  function handleGlobalEventListener(replay) {\n    return Object.assign((event, hint) => {\n      // Do nothing if replay has been disabled or paused\n      if (!replay.isEnabled() || replay.isPaused()) {\n        return event;\n      }\n      if (isReplayEvent(event)) {\n        // Replays have separate set of breadcrumbs, do not include breadcrumbs\n        // from core SDK\n        delete event.breadcrumbs;\n        return event;\n      }\n\n      // We only want to handle errors, transactions, and feedbacks, nothing else\n      if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n        return event;\n      }\n\n      // Ensure we do not add replay_id if the session is expired\n      const isSessionActive = replay.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        // prevent exceeding replay durations by removing the expired replayId from the DSC\n        resetReplayIdOnDynamicSamplingContext();\n        return event;\n      }\n      if (isFeedbackEvent(event)) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        replay.flush();\n        event.contexts.feedback.replay_id = replay.getSessionId();\n        // Add a replay breadcrumb for this piece of feedback\n        addFeedbackBreadcrumb(replay, event);\n        return event;\n      }\n\n      // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n      // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n      if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n        DEBUG_BUILD && logger.log('Ignoring error from rrweb internals', event);\n        return null;\n      }\n\n      // When in buffer mode, we decide to sample here.\n      // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n      // And convert the buffer session to a full session\n      const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n      // Tag errors if it has been sampled in buffer mode, or if it is session mode\n      // Only tag transactions if in session mode\n      const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n      if (shouldTagReplayId) {\n        event.tags = {\n          ...event.tags,\n          replayId: replay.getSessionId()\n        };\n      }\n      return event;\n    }, {\n      id: 'Replay'\n    });\n  }\n\n  /**\n   * Create a \"span\" for each performance entry.\n   */\n  function createPerformanceSpans(replay, entries) {\n    return entries.map(({\n      type,\n      start,\n      end,\n      name,\n      data\n    }) => {\n      const response = replay.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: start,\n        data: {\n          tag: 'performanceSpan',\n          payload: {\n            op: type,\n            description: name,\n            startTimestamp: start,\n            endTimestamp: end,\n            data\n          }\n        }\n      });\n\n      // If response is a string, it means its either THROTTLED or SKIPPED\n      return typeof response === 'string' ? Promise.resolve(null) : response;\n    });\n  }\n  function handleHistory(handlerData) {\n    const {\n      from,\n      to\n    } = handlerData;\n    const now = Date.now() / 1000;\n    return {\n      type: 'navigation.push',\n      start: now,\n      end: now,\n      name: to,\n      data: {\n        previous: from\n      }\n    };\n  }\n\n  /**\n   * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n   */\n  function handleHistorySpanListener(replay) {\n    return handlerData => {\n      if (!replay.isEnabled()) {\n        return;\n      }\n      const result = handleHistory(handlerData);\n      if (result === null) {\n        return;\n      }\n\n      // Need to collect visited URLs\n      replay.getContext().urls.push(result.name);\n      replay.triggerUserActivity();\n      replay.addUpdate(() => {\n        createPerformanceSpans(replay, [result]);\n        // Returning false to flush\n        return false;\n      });\n    };\n  }\n\n  /**\n   * Check whether a given request URL should be filtered out. This is so we\n   * don't log Sentry ingest requests.\n   */\n  function shouldFilterRequest(replay, url) {\n    // If we enabled the `traceInternals` experiment, we want to trace everything\n    if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n      return false;\n    }\n    return (0, _core.isSentryRequestUrl)(url, (0, _core.getClient)());\n  }\n\n  /** Add a performance entry breadcrumb */\n  function addNetworkBreadcrumb(replay, result) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    if (result === null) {\n      return;\n    }\n    if (shouldFilterRequest(replay, result.name)) {\n      return;\n    }\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning true will cause `addUpdate` to not flush\n      // We do not want network requests to cause a flush. This will prevent\n      // recurring/polling requests from keeping the replay session alive.\n      return true;\n    });\n  }\n\n  /** Get the size of a body. */\n  function getBodySize(body) {\n    if (!body) {\n      return undefined;\n    }\n    const textEncoder = new TextEncoder();\n    try {\n      if (typeof body === 'string') {\n        return textEncoder.encode(body).length;\n      }\n      if (body instanceof URLSearchParams) {\n        return textEncoder.encode(body.toString()).length;\n      }\n      if (body instanceof FormData) {\n        const formDataStr = _serializeFormData(body);\n        return textEncoder.encode(formDataStr).length;\n      }\n      if (body instanceof Blob) {\n        return body.size;\n      }\n      if (body instanceof ArrayBuffer) {\n        return body.byteLength;\n      }\n\n      // Currently unhandled types: ArrayBufferView, ReadableStream\n    } catch (e) {\n      // just return undefined\n    }\n    return undefined;\n  }\n\n  /** Convert a Content-Length header to number/undefined.  */\n  function parseContentLengthHeader(header) {\n    if (!header) {\n      return undefined;\n    }\n    const size = parseInt(header, 10);\n    return isNaN(size) ? undefined : size;\n  }\n\n  /** Get the string representation of a body. */\n  function getBodyString(body) {\n    try {\n      if (typeof body === 'string') {\n        return [body];\n      }\n      if (body instanceof URLSearchParams) {\n        return [body.toString()];\n      }\n      if (body instanceof FormData) {\n        return [_serializeFormData(body)];\n      }\n      if (!body) {\n        return [undefined];\n      }\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to serialize body', body);\n      return [undefined, 'BODY_PARSE_ERROR'];\n    }\n    DEBUG_BUILD && logger.info('Skipping network body because of body type', body);\n    return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n  }\n\n  /** Merge a warning into an existing network request/response. */\n  function mergeWarning(info, warning) {\n    if (!info) {\n      return {\n        headers: {},\n        size: undefined,\n        _meta: {\n          warnings: [warning]\n        }\n      };\n    }\n    const newMeta = {\n      ...info._meta\n    };\n    const existingWarnings = newMeta.warnings || [];\n    newMeta.warnings = [...existingWarnings, warning];\n    info._meta = newMeta;\n    return info;\n  }\n\n  /** Convert ReplayNetworkRequestData to a PerformanceEntry. */\n  function makeNetworkReplayBreadcrumb(type, data) {\n    if (!data) {\n      return null;\n    }\n    const {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response\n    } = data;\n    const result = {\n      type,\n      start: startTimestamp / 1000,\n      end: endTimestamp / 1000,\n      name: url,\n      data: (0, _core.dropUndefinedKeys)({\n        method,\n        statusCode,\n        request,\n        response\n      })\n    };\n    return result;\n  }\n\n  /** Build the request or response part of a replay network breadcrumb that was skipped. */\n  function buildSkippedNetworkRequestOrResponse(bodySize) {\n    return {\n      headers: {},\n      size: bodySize,\n      _meta: {\n        warnings: ['URL_SKIPPED']\n      }\n    };\n  }\n\n  /** Build the request or response part of a replay network breadcrumb. */\n  function buildNetworkRequestOrResponse(headers, bodySize, body) {\n    if (!bodySize && Object.keys(headers).length === 0) {\n      return undefined;\n    }\n    if (!bodySize) {\n      return {\n        headers\n      };\n    }\n    if (!body) {\n      return {\n        headers,\n        size: bodySize\n      };\n    }\n    const info = {\n      headers,\n      size: bodySize\n    };\n    const {\n      body: normalizedBody,\n      warnings\n    } = normalizeNetworkBody(body);\n    info.body = normalizedBody;\n    if (warnings && warnings.length > 0) {\n      info._meta = {\n        warnings\n      };\n    }\n    return info;\n  }\n\n  /** Filter a set of headers */\n  function getAllowedHeaders(headers, allowedHeaders) {\n    return Object.entries(headers).reduce((filteredHeaders, [key, value]) => {\n      const normalizedKey = key.toLowerCase();\n      // Avoid putting empty strings into the headers\n      if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n        filteredHeaders[normalizedKey] = value;\n      }\n      return filteredHeaders;\n    }, {});\n  }\n  function _serializeFormData(formData) {\n    // This is a bit simplified, but gives us a decent estimate\n    // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n    // @ts-expect-error passing FormData to URLSearchParams actually works\n    return new URLSearchParams(formData).toString();\n  }\n  function normalizeNetworkBody(body) {\n    if (!body || typeof body !== 'string') {\n      return {\n        body\n      };\n    }\n    const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n    const isProbablyJson = _strIsProbablyJson(body);\n    if (exceedsSizeLimit) {\n      const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n      if (isProbablyJson) {\n        return {\n          body: truncatedBody,\n          warnings: ['MAYBE_JSON_TRUNCATED']\n        };\n      }\n      return {\n        body: `${truncatedBody}…`,\n        warnings: ['TEXT_TRUNCATED']\n      };\n    }\n    if (isProbablyJson) {\n      try {\n        const jsonBody = JSON.parse(body);\n        return {\n          body: jsonBody\n        };\n      } catch (e2) {\n        // fall back to just send the body as string\n      }\n    }\n    return {\n      body\n    };\n  }\n  function _strIsProbablyJson(str) {\n    const first = str[0];\n    const last = str[str.length - 1];\n\n    // Simple check: If this does not start & end with {} or [], it's not JSON\n    return first === '[' && last === ']' || first === '{' && last === '}';\n  }\n\n  /** Match an URL against a list of strings/Regex. */\n  function urlMatches(url, urls) {\n    const fullUrl = getFullUrl(url);\n    return (0, _core.stringMatchesSomePattern)(fullUrl, urls);\n  }\n\n  /** exported for tests */\n  function getFullUrl(url, baseURI = WINDOW.document.baseURI) {\n    // Short circuit for common cases:\n    if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n      return url;\n    }\n    const fixedUrl = new URL(url, baseURI);\n\n    // If these do not match, we are not dealing with a relative URL, so just return it\n    if (fixedUrl.origin !== new URL(baseURI).origin) {\n      return url;\n    }\n    const fullUrl = fixedUrl.href;\n\n    // Remove trailing slashes, if they don't match the original URL\n    if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n      return fullUrl.slice(0, -1);\n    }\n    return fullUrl;\n  }\n\n  /**\n   * Capture a fetch breadcrumb to a replay.\n   * This adds additional data (where appropriate).\n   */\n  async function captureFetchBreadcrumbToReplay(breadcrumb, hint, options) {\n    try {\n      const data = await _prepareFetchData(breadcrumb, hint, options);\n\n      // Create a replay performance entry from this breadcrumb\n      const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n      addNetworkBreadcrumb(options.replay, result);\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to capture fetch breadcrumb');\n    }\n  }\n\n  /**\n   * Enrich a breadcrumb with additional data.\n   * This has to be sync & mutate the given breadcrumb,\n   * as the breadcrumb is afterwards consumed by other handlers.\n   */\n  function enrichFetchBreadcrumb(breadcrumb, hint) {\n    const {\n      input,\n      response\n    } = hint;\n    const body = input ? _getFetchRequestArgBody(input) : undefined;\n    const reqSize = getBodySize(body);\n    const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n    if (reqSize !== undefined) {\n      breadcrumb.data.request_body_size = reqSize;\n    }\n    if (resSize !== undefined) {\n      breadcrumb.data.response_body_size = resSize;\n    }\n  }\n  async function _prepareFetchData(breadcrumb, hint, options) {\n    const now = Date.now();\n    const {\n      startTimestamp = now,\n      endTimestamp = now\n    } = hint;\n    const {\n      url,\n      method,\n      status_code: statusCode = 0,\n      request_body_size: requestBodySize,\n      response_body_size: responseBodySize\n    } = breadcrumb.data;\n    const captureDetails = urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n    const request = captureDetails ? _getRequestInfo(options, hint.input, requestBodySize) : buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response\n    };\n  }\n  function _getRequestInfo({\n    networkCaptureBodies,\n    networkRequestHeaders\n  }, input, requestBodySize) {\n    const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n    if (!networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n    }\n\n    // We only want to transmit string or string-like bodies\n    const requestBody = _getFetchRequestArgBody(input);\n    const [bodyStr, warning] = getBodyString(requestBody);\n    const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n    if (warning) {\n      return mergeWarning(data, warning);\n    }\n    return data;\n  }\n\n  /** Exported only for tests. */\n  async function _getResponseInfo(captureDetails, {\n    networkCaptureBodies,\n    networkResponseHeaders\n  }, response, responseBodySize) {\n    if (!captureDetails && responseBodySize !== undefined) {\n      return buildSkippedNetworkRequestOrResponse(responseBodySize);\n    }\n    const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n    if (!response || !networkCaptureBodies && responseBodySize !== undefined) {\n      return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n    }\n    const [bodyText, warning] = await _parseFetchResponseBody(response);\n    const result = getResponseData(bodyText, {\n      networkCaptureBodies,\n      responseBodySize,\n      captureDetails,\n      headers\n    });\n    if (warning) {\n      return mergeWarning(result, warning);\n    }\n    return result;\n  }\n  function getResponseData(bodyText, {\n    networkCaptureBodies,\n    responseBodySize,\n    captureDetails,\n    headers\n  }) {\n    try {\n      const size = bodyText && bodyText.length && responseBodySize === undefined ? getBodySize(bodyText) : responseBodySize;\n      if (!captureDetails) {\n        return buildSkippedNetworkRequestOrResponse(size);\n      }\n      if (networkCaptureBodies) {\n        return buildNetworkRequestOrResponse(headers, size, bodyText);\n      }\n      return buildNetworkRequestOrResponse(headers, size, undefined);\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to serialize response body');\n      // fallback\n      return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n    }\n  }\n  async function _parseFetchResponseBody(response) {\n    const res = _tryCloneResponse(response);\n    if (!res) {\n      return [undefined, 'BODY_PARSE_ERROR'];\n    }\n    try {\n      const text = await _tryGetResponseText(res);\n      return [text];\n    } catch (error) {\n      if (error instanceof Error && error.message.indexOf('Timeout') > -1) {\n        DEBUG_BUILD && logger.warn('Parsing text body from response timed out');\n        return [undefined, 'BODY_PARSE_TIMEOUT'];\n      }\n      DEBUG_BUILD && logger.exception(error, 'Failed to get text body from response');\n      return [undefined, 'BODY_PARSE_ERROR'];\n    }\n  }\n  function _getFetchRequestArgBody(fetchArgs = []) {\n    // We only support getting the body from the fetch options\n    if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n      return undefined;\n    }\n    return fetchArgs[1].body;\n  }\n  function getAllHeaders(headers, allowedHeaders) {\n    const allHeaders = {};\n    allowedHeaders.forEach(header => {\n      if (headers.get(header)) {\n        allHeaders[header] = headers.get(header);\n      }\n    });\n    return allHeaders;\n  }\n  function getRequestHeaders(fetchArgs, allowedHeaders) {\n    if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n      return getHeadersFromOptions(fetchArgs[0], allowedHeaders);\n    }\n    if (fetchArgs.length === 2) {\n      return getHeadersFromOptions(fetchArgs[1], allowedHeaders);\n    }\n    return {};\n  }\n  function getHeadersFromOptions(input, allowedHeaders) {\n    if (!input) {\n      return {};\n    }\n    const headers = input.headers;\n    if (!headers) {\n      return {};\n    }\n    if (headers instanceof Headers) {\n      return getAllHeaders(headers, allowedHeaders);\n    }\n\n    // We do not support this, as it is not really documented (anymore?)\n    if (Array.isArray(headers)) {\n      return {};\n    }\n    return getAllowedHeaders(headers, allowedHeaders);\n  }\n  function _tryCloneResponse(response) {\n    try {\n      // We have to clone this, as the body can only be read once\n      return response.clone();\n    } catch (error) {\n      // this can throw if the response was already consumed before\n      DEBUG_BUILD && logger.exception(error, 'Failed to clone response body');\n    }\n  }\n\n  /**\n   * Get the response body of a fetch request, or timeout after 500ms.\n   * Fetch can return a streaming body, that may not resolve (or not for a long time).\n   * If that happens, we rather abort after a short time than keep waiting for this.\n   */\n  function _tryGetResponseText(response) {\n    return new Promise((resolve, reject) => {\n      const timeout = (0, _browserUtils.setTimeout)(() => reject(new Error('Timeout while trying to read response body')), 500);\n      _getResponseText(response).then(txt => resolve(txt), reason => reject(reason)).finally(() => clearTimeout(timeout));\n    });\n  }\n  async function _getResponseText(response) {\n    // Force this to be a promise, just to be safe\n    // eslint-disable-next-line no-return-await\n    return await response.text();\n  }\n\n  /**\n   * Capture an XHR breadcrumb to a replay.\n   * This adds additional data (where appropriate).\n   */\n  async function captureXhrBreadcrumbToReplay(breadcrumb, hint, options) {\n    try {\n      const data = _prepareXhrData(breadcrumb, hint, options);\n\n      // Create a replay performance entry from this breadcrumb\n      const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n      addNetworkBreadcrumb(options.replay, result);\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to capture xhr breadcrumb');\n    }\n  }\n\n  /**\n   * Enrich a breadcrumb with additional data.\n   * This has to be sync & mutate the given breadcrumb,\n   * as the breadcrumb is afterwards consumed by other handlers.\n   */\n  function enrichXhrBreadcrumb(breadcrumb, hint) {\n    const {\n      xhr,\n      input\n    } = hint;\n    if (!xhr) {\n      return;\n    }\n    const reqSize = getBodySize(input);\n    const resSize = xhr.getResponseHeader('content-length') ? parseContentLengthHeader(xhr.getResponseHeader('content-length')) : _getBodySize(xhr.response, xhr.responseType);\n    if (reqSize !== undefined) {\n      breadcrumb.data.request_body_size = reqSize;\n    }\n    if (resSize !== undefined) {\n      breadcrumb.data.response_body_size = resSize;\n    }\n  }\n  function _prepareXhrData(breadcrumb, hint, options) {\n    const now = Date.now();\n    const {\n      startTimestamp = now,\n      endTimestamp = now,\n      input,\n      xhr\n    } = hint;\n    const {\n      url,\n      method,\n      status_code: statusCode = 0,\n      request_body_size: requestBodySize,\n      response_body_size: responseBodySize\n    } = breadcrumb.data;\n    if (!url) {\n      return null;\n    }\n    if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n      const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n      const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n      return {\n        startTimestamp,\n        endTimestamp,\n        url,\n        method,\n        statusCode,\n        request,\n        response\n      };\n    }\n    const xhrInfo = xhr[_browserUtils.SENTRY_XHR_DATA_KEY];\n    const networkRequestHeaders = xhrInfo ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders) : {};\n    const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n    const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n    const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n    const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n    const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request: requestWarning ? mergeWarning(request, requestWarning) : request,\n      response: responseWarning ? mergeWarning(response, responseWarning) : response\n    };\n  }\n  function getResponseHeaders(xhr) {\n    const headers = xhr.getAllResponseHeaders();\n    if (!headers) {\n      return {};\n    }\n    return headers.split('\\r\\n').reduce((acc, line) => {\n      const [key, value] = line.split(': ');\n      if (value) {\n        acc[key.toLowerCase()] = value;\n      }\n      return acc;\n    }, {});\n  }\n  function _getXhrResponseBody(xhr) {\n    // We collect errors that happen, but only log them if we can't get any response body\n    const errors = [];\n    try {\n      return [xhr.responseText];\n    } catch (e) {\n      errors.push(e);\n    }\n\n    // Try to manually parse the response body, if responseText fails\n    try {\n      return _parseXhrResponse(xhr.response, xhr.responseType);\n    } catch (e) {\n      errors.push(e);\n    }\n    DEBUG_BUILD && logger.warn('Failed to get xhr response body', ...errors);\n    return [undefined];\n  }\n\n  /**\n   * Get the string representation of the XHR response.\n   * Based on MDN, these are the possible types of the response:\n   * string\n   * ArrayBuffer\n   * Blob\n   * Document\n   * POJO\n   *\n   * Exported only for tests.\n   */\n  function _parseXhrResponse(body, responseType) {\n    try {\n      if (typeof body === 'string') {\n        return [body];\n      }\n      if (body instanceof Document) {\n        return [body.body.outerHTML];\n      }\n      if (responseType === 'json' && body && typeof body === 'object') {\n        return [JSON.stringify(body)];\n      }\n      if (!body) {\n        return [undefined];\n      }\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to serialize body', body);\n      return [undefined, 'BODY_PARSE_ERROR'];\n    }\n    DEBUG_BUILD && logger.info('Skipping network body because of body type', body);\n    return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n  }\n  function _getBodySize(body, responseType) {\n    try {\n      const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n      return getBodySize(bodyStr);\n    } catch (e2) {\n      return undefined;\n    }\n  }\n\n  /**\n   * This method does two things:\n   * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n   * - It captures the XHR/fetch breadcrumbs to the replay\n   *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n   */\n  function handleNetworkBreadcrumbs(replay) {\n    const client = (0, _core.getClient)();\n    try {\n      const {\n        networkDetailAllowUrls,\n        networkDetailDenyUrls,\n        networkCaptureBodies,\n        networkRequestHeaders,\n        networkResponseHeaders\n      } = replay.getOptions();\n      const options = {\n        replay,\n        networkDetailAllowUrls,\n        networkDetailDenyUrls,\n        networkCaptureBodies,\n        networkRequestHeaders,\n        networkResponseHeaders\n      };\n      if (client) {\n        client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n      }\n    } catch (e2) {\n      // Do nothing\n    }\n  }\n\n  /** just exported for tests */\n  function beforeAddNetworkBreadcrumb(options, breadcrumb, hint) {\n    if (!breadcrumb.data) {\n      return;\n    }\n    try {\n      if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n        // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n        // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n        // So any async mutations to it will not be reflected in the final breadcrumb\n        enrichXhrBreadcrumb(breadcrumb, hint);\n\n        // This call should not reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n      }\n      if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n        // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n        // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n        // So any async mutations to it will not be reflected in the final breadcrumb\n        enrichFetchBreadcrumb(breadcrumb, hint);\n\n        // This call should not reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n      }\n    } catch (e) {\n      DEBUG_BUILD && logger.exception(e, 'Error when enriching network breadcrumb');\n    }\n  }\n  function _isXhrBreadcrumb(breadcrumb) {\n    return breadcrumb.category === 'xhr';\n  }\n  function _isFetchBreadcrumb(breadcrumb) {\n    return breadcrumb.category === 'fetch';\n  }\n  function _isXhrHint(hint) {\n    return hint && hint.xhr;\n  }\n  function _isFetchHint(hint) {\n    return hint && hint.response;\n  }\n\n  /**\n   * Add global listeners that cannot be removed.\n   */\n  function addGlobalListeners(replay) {\n    // Listeners from core SDK //\n    const client = (0, _core.getClient)();\n    (0, _browserUtils.addClickKeypressInstrumentationHandler)(handleDomListener(replay));\n    (0, _browserUtils.addHistoryInstrumentationHandler)(handleHistorySpanListener(replay));\n    handleBreadcrumbs(replay);\n    handleNetworkBreadcrumbs(replay);\n\n    // Tag all (non replay) events that get sent to Sentry with the current\n    // replay ID so that we can reference them later in the UI\n    const eventProcessor = handleGlobalEventListener(replay);\n    (0, _core.addEventProcessor)(eventProcessor);\n\n    // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n    if (client) {\n      client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n      client.on('afterSendEvent', handleAfterSendEvent(replay));\n      client.on('createDsc', dsc => {\n        const replayId = replay.getSessionId();\n        // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n        if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n          // Ensure to check that the session is still active - it could have expired in the meanwhile\n          const isSessionActive = replay.checkAndHandleExpiredSession();\n          if (isSessionActive) {\n            dsc.replay_id = replayId;\n          }\n        }\n      });\n      client.on('spanStart', span => {\n        replay.lastActiveSpan = span;\n      });\n\n      // We may be missing the initial spanStart due to timing issues,\n      // so we capture it on finish again.\n      client.on('spanEnd', span => {\n        replay.lastActiveSpan = span;\n      });\n\n      // We want to flush replay\n      client.on('beforeSendFeedback', (feedbackEvent, options) => {\n        const replayId = replay.getSessionId();\n        if (options && options.includeReplay && replay.isEnabled() && replayId) {\n          // This should never reject\n          if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n            feedbackEvent.contexts.feedback.replay_id = replayId;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a \"span\" for the total amount of memory being used by JS objects\n   * (including v8 internal objects).\n   */\n  async function addMemoryEntry(replay) {\n    // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n    try {\n      return Promise.all(createPerformanceSpans(replay, [\n      // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n      createMemoryEntry(WINDOW.performance.memory)]));\n    } catch (error) {\n      // Do nothing\n      return [];\n    }\n  }\n  function createMemoryEntry(memoryEntry) {\n    const {\n      jsHeapSizeLimit,\n      totalJSHeapSize,\n      usedJSHeapSize\n    } = memoryEntry;\n    // we don't want to use `getAbsoluteTime` because it adds the event time to the\n    // time origin, so we get the current timestamp instead\n    const time = Date.now() / 1000;\n    return {\n      type: 'memory',\n      name: 'memory',\n      start: time,\n      end: time,\n      data: {\n        memory: {\n          jsHeapSizeLimit,\n          totalJSHeapSize,\n          usedJSHeapSize\n        }\n      }\n    };\n  }\n\n  /**\n   * Heavily simplified debounce function based on lodash.debounce.\n   *\n   * This function takes a callback function (@param fun) and delays its invocation\n   * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n   * which ensures that the callback is invoked at least once after the specified max. wait time.\n   *\n   * @param func the function whose invocation is to be debounced\n   * @param wait the minimum time until the function is invoked after it was called once\n   * @param options the options object, which can contain the `maxWait` property\n   *\n   * @returns the debounced version of the function, which needs to be called at least once to start the\n   *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n   *          was already invoked in the meantime, return @param func's return value.\n   *          The debounced function has two additional properties:\n   *          - `flush`: Invokes the debounced function immediately and returns its return value\n   *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n   */\n  function debounce(func, wait, options) {\n    let callbackReturnValue;\n    let timerId;\n    let maxTimerId;\n    const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n    function invokeFunc() {\n      cancelTimers();\n      callbackReturnValue = func();\n      return callbackReturnValue;\n    }\n    function cancelTimers() {\n      timerId !== undefined && clearTimeout(timerId);\n      maxTimerId !== undefined && clearTimeout(maxTimerId);\n      timerId = maxTimerId = undefined;\n    }\n    function flush() {\n      if (timerId !== undefined || maxTimerId !== undefined) {\n        return invokeFunc();\n      }\n      return callbackReturnValue;\n    }\n    function debounced() {\n      if (timerId) {\n        clearTimeout(timerId);\n      }\n      timerId = (0, _browserUtils.setTimeout)(invokeFunc, wait);\n      if (maxWait && maxTimerId === undefined) {\n        maxTimerId = (0, _browserUtils.setTimeout)(invokeFunc, maxWait);\n      }\n      return callbackReturnValue;\n    }\n    debounced.cancel = cancelTimers;\n    debounced.flush = flush;\n    return debounced;\n  }\n  const NAVIGATOR = _core.GLOBAL_OBJ.navigator;\n\n  /**\n   *  Disable sampling mousemove events on iOS browsers as this can cause blocking the main thread\n   *  https://github.com/getsentry/sentry-javascript/issues/14534\n   */\n  function getRecordingSamplingOptions() {\n    if (/iPhone|iPad|iPod/i.test(NAVIGATOR && NAVIGATOR.userAgent || '') || /Macintosh/i.test(NAVIGATOR && NAVIGATOR.userAgent || '') && NAVIGATOR && NAVIGATOR.maxTouchPoints && NAVIGATOR.maxTouchPoints > 1) {\n      return {\n        sampling: {\n          mousemove: false\n        }\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Handler for recording events.\n   *\n   * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n   */\n  function getHandleRecordingEmit(replay) {\n    let hadFirstEvent = false;\n    return (event, _isCheckout) => {\n      // If this is false, it means session is expired, create and a new session and wait for checkout\n      if (!replay.checkAndHandleExpiredSession()) {\n        DEBUG_BUILD && logger.warn('Received replay event after session expired.');\n        return;\n      }\n\n      // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n      // We also want to treat the first event as a checkout, so we handle this specifically here\n      const isCheckout = _isCheckout || !hadFirstEvent;\n      hadFirstEvent = true;\n      if (replay.clickDetector) {\n        updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n      }\n\n      // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n      replay.addUpdate(() => {\n        // The session is always started immediately on pageload/init, but for\n        // error-only replays, it should reflect the most recent checkout\n        // when an error occurs. Clear any state that happens before this current\n        // checkout. This needs to happen before `addEvent()` which updates state\n        // dependent on this reset.\n        if (replay.recordingMode === 'buffer' && isCheckout) {\n          replay.setInitialState();\n        }\n\n        // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n        // Skip all further steps\n        if (!addEventSync(replay, event, isCheckout)) {\n          // Return true to skip scheduling a debounced flush\n          return true;\n        }\n\n        // Different behavior for full snapshots (type=2), ignore other event types\n        // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n        if (!isCheckout) {\n          return false;\n        }\n        const session = replay.session;\n\n        // Additionally, create a meta event that will capture certain SDK settings.\n        // In order to handle buffer mode, this needs to either be done when we\n        // receive checkout events or at flush time. We have an experimental mode\n        // to perform multiple checkouts a session (the idea is to improve\n        // seeking during playback), so also only include if segmentId is 0\n        // (handled in `addSettingsEvent`).\n        //\n        // `isCheckout` is always true, but want to be explicit that it should\n        // only be added for checkouts\n        addSettingsEvent(replay, isCheckout);\n\n        // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n        // this should usually be the timestamp of the checkout event, but to be safe...\n        if (replay.recordingMode === 'buffer' && session && replay.eventBuffer) {\n          const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n          if (earliestEvent) {\n            DEBUG_BUILD && logger.info(`Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`);\n            session.started = earliestEvent;\n            if (replay.getOptions().stickySession) {\n              saveSession(session);\n            }\n          }\n        }\n\n        // If there is a previousSessionId after a full snapshot occurs, then\n        // the replay session was started due to session expiration. The new session\n        // is started before triggering a new checkout and contains the id\n        // of the previous session. Do not immediately flush in this case\n        // to avoid capturing only the checkout and instead the replay will\n        // be captured if they perform any follow-up actions.\n        if (session && session.previousSessionId) {\n          return true;\n        }\n        if (replay.recordingMode === 'session') {\n          // If the full snapshot is due to an initial load, we will not have\n          // a previous session ID. In this case, we want to buffer events\n          // for a set amount of time before flushing. This can help avoid\n          // capturing replays of users that immediately close the window.\n\n          // This should never reject\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          void replay.flush();\n        }\n        return true;\n      });\n    };\n  }\n\n  /**\n   * Exported for tests\n   */\n  function createOptionsEvent(replay) {\n    const options = replay.getOptions();\n    return {\n      type: EventType.Custom,\n      timestamp: Date.now(),\n      data: {\n        tag: 'options',\n        payload: {\n          shouldRecordCanvas: replay.isRecordingCanvas(),\n          sessionSampleRate: options.sessionSampleRate,\n          errorSampleRate: options.errorSampleRate,\n          useCompressionOption: options.useCompression,\n          blockAllMedia: options.blockAllMedia,\n          maskAllText: options.maskAllText,\n          maskAllInputs: options.maskAllInputs,\n          useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n          networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n          networkCaptureBodies: options.networkCaptureBodies,\n          networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n          networkResponseHasHeaders: options.networkResponseHeaders.length > 0\n        }\n      }\n    };\n  }\n\n  /**\n   * Add a \"meta\" event that contains a simplified view on current configuration\n   * options. This should only be included on the first segment of a recording.\n   */\n  function addSettingsEvent(replay, isCheckout) {\n    // Only need to add this event when sending the first segment\n    if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n      return;\n    }\n    addEventSync(replay, createOptionsEvent(replay), false);\n  }\n\n  /**\n   * Create a replay envelope ready to be sent.\n   * This includes both the replay event, as well as the recording data.\n   */\n  function createReplayEnvelope(replayEvent, recordingData, dsn, tunnel) {\n    return (0, _core.createEnvelope)((0, _core.createEventEnvelopeHeaders)(replayEvent, (0, _core.getSdkMetadataForEnvelopeHeader)(replayEvent), tunnel, dsn), [[{\n      type: 'replay_event'\n    }, replayEvent], [{\n      type: 'replay_recording',\n      // If string then we need to encode to UTF8, otherwise will have\n      // wrong size. TextEncoder has similar browser support to\n      // MutationObserver, although it does not accept IE11.\n      length: typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length\n    }, recordingData]]);\n  }\n\n  /**\n   * Prepare the recording data ready to be sent.\n   */\n  function prepareRecordingData({\n    recordingData,\n    headers\n  }) {\n    let payloadWithSequence;\n\n    // XXX: newline is needed to separate sequence id from events\n    const replayHeaders = `${JSON.stringify(headers)}\n`;\n    if (typeof recordingData === 'string') {\n      payloadWithSequence = `${replayHeaders}${recordingData}`;\n    } else {\n      const enc = new TextEncoder();\n      // XXX: newline is needed to separate sequence id from events\n      const sequence = enc.encode(replayHeaders);\n      // Merge the two Uint8Arrays\n      payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n      payloadWithSequence.set(sequence);\n      payloadWithSequence.set(recordingData, sequence.length);\n    }\n    return payloadWithSequence;\n  }\n\n  /**\n   * Prepare a replay event & enrich it with the SDK metadata.\n   */\n  async function prepareReplayEvent({\n    client,\n    scope,\n    replayId: event_id,\n    event\n  }) {\n    const integrations = typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations) ? Object.keys(client._integrations) : undefined;\n    const eventHint = {\n      event_id,\n      integrations\n    };\n    client.emit('preprocessEvent', event, eventHint);\n    const preparedEvent = await (0, _core.prepareEvent)(client.getOptions(), event, eventHint, scope, client, (0, _core.getIsolationScope)());\n\n    // If e.g. a global event processor returned null\n    if (!preparedEvent) {\n      return null;\n    }\n\n    // This normally happens in browser client \"_prepareEvent\"\n    // but since we do not use this private method from the client, but rather the plain import\n    // we need to do this manually.\n    preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n    // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n    const metadata = client.getSdkMetadata();\n    const {\n      name,\n      version\n    } = metadata && metadata.sdk || {};\n    preparedEvent.sdk = {\n      ...preparedEvent.sdk,\n      name: name || 'sentry.javascript.unknown',\n      version: version || '0.0.0'\n    };\n    return preparedEvent;\n  }\n\n  /**\n   * Send replay attachment using `fetch()`\n   */\n  async function sendReplayRequest({\n    recordingData,\n    replayId,\n    segmentId: segment_id,\n    eventContext,\n    timestamp,\n    session\n  }) {\n    const preparedRecordingData = prepareRecordingData({\n      recordingData,\n      headers: {\n        segment_id\n      }\n    });\n    const {\n      urls,\n      errorIds,\n      traceIds,\n      initialTimestamp\n    } = eventContext;\n    const client = (0, _core.getClient)();\n    const scope = (0, _core.getCurrentScope)();\n    const transport = client && client.getTransport();\n    const dsn = client && client.getDsn();\n    if (!client || !transport || !dsn || !session.sampled) {\n      return (0, _core.resolvedSyncPromise)({});\n    }\n    const baseEvent = {\n      type: REPLAY_EVENT_NAME,\n      replay_start_timestamp: initialTimestamp / 1000,\n      timestamp: timestamp / 1000,\n      error_ids: errorIds,\n      trace_ids: traceIds,\n      urls,\n      replay_id: replayId,\n      segment_id,\n      replay_type: session.sampled\n    };\n    const replayEvent = await prepareReplayEvent({\n      scope,\n      client,\n      replayId,\n      event: baseEvent\n    });\n    if (!replayEvent) {\n      // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n      client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n      DEBUG_BUILD && logger.info('An event processor returned `null`, will not send event.');\n      return (0, _core.resolvedSyncPromise)({});\n    }\n\n    /*\n    For reference, the fully built event looks something like this:\n    {\n        \"type\": \"replay_event\",\n        \"timestamp\": 1670837008.634,\n        \"error_ids\": [\n            \"errorId\"\n        ],\n        \"trace_ids\": [\n            \"traceId\"\n        ],\n        \"urls\": [\n            \"https://example.com\"\n        ],\n        \"replay_id\": \"eventId\",\n        \"segment_id\": 3,\n        \"replay_type\": \"error\",\n        \"platform\": \"javascript\",\n        \"event_id\": \"eventId\",\n        \"environment\": \"production\",\n        \"sdk\": {\n            \"integrations\": [\n                \"BrowserTracing\",\n                \"Replay\"\n            ],\n            \"name\": \"sentry.javascript.browser\",\n            \"version\": \"7.25.0\"\n        },\n        \"sdkProcessingMetadata\": {},\n        \"contexts\": {\n        },\n    }\n    */\n\n    // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n    // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n    // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n    // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n    delete replayEvent.sdkProcessingMetadata;\n    const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n    let response;\n    try {\n      response = await transport.send(envelope);\n    } catch (err) {\n      const error = new Error(UNABLE_TO_SEND_REPLAY);\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n      throw error;\n    }\n\n    // If the status code is invalid, we want to immediately stop & not retry\n    if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n      throw new TransportStatusCodeError(response.statusCode);\n    }\n    const rateLimits = (0, _core.updateRateLimits)({}, response);\n    if ((0, _core.isRateLimited)(rateLimits, 'replay')) {\n      throw new RateLimitError(rateLimits);\n    }\n    return response;\n  }\n\n  /**\n   * This error indicates that the transport returned an invalid status code.\n   */\n  class TransportStatusCodeError extends Error {\n    constructor(statusCode) {\n      super(`Transport returned status code ${statusCode}`);\n    }\n  }\n\n  /**\n   * This error indicates that we hit a rate limit API error.\n   */\n  class RateLimitError extends Error {\n    constructor(rateLimits) {\n      super('Rate limit hit');\n      this.rateLimits = rateLimits;\n    }\n  }\n\n  /**\n   * Finalize and send the current replay event to Sentry\n   */\n  async function sendReplay(replayData, retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL\n  }) {\n    const {\n      recordingData,\n      onError\n    } = replayData;\n\n    // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n    if (!recordingData.length) {\n      return;\n    }\n    try {\n      await sendReplayRequest(replayData);\n      return true;\n    } catch (err) {\n      if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n        throw err;\n      }\n\n      // Capture error for every failed replay\n      (0, _core.setContext)('Replays', {\n        _retryCount: retryConfig.count\n      });\n      if (onError) {\n        onError(err);\n      }\n\n      // If an error happened here, it's likely that uploading the attachment\n      // failed, we'll can retry with the same events payload\n      if (retryConfig.count >= RETRY_MAX_COUNT) {\n        const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n        try {\n          // In case browsers don't allow this property to be writable\n          // @ts-expect-error This needs lib es2022 and newer\n          error.cause = err;\n        } catch (e) {\n          // nothing to do\n        }\n        throw error;\n      }\n\n      // will retry in intervals of 5, 10, 30\n      retryConfig.interval *= ++retryConfig.count;\n      return new Promise((resolve, reject) => {\n        (0, _browserUtils.setTimeout)(async () => {\n          try {\n            await sendReplay(replayData, retryConfig);\n            resolve(true);\n          } catch (err) {\n            reject(err);\n          }\n        }, retryConfig.interval);\n      });\n    }\n  }\n  const THROTTLED = '__THROTTLED';\n  const SKIPPED = '__SKIPPED';\n\n  /**\n   * Create a throttled function off a given function.\n   * When calling the throttled function, it will call the original function only\n   * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n   *\n   * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n   * or else the return value of the original function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function throttle(fn, maxCount, durationSeconds) {\n    const counter = new Map();\n    const _cleanup = now => {\n      const threshold = now - durationSeconds;\n      counter.forEach((_value, key) => {\n        if (key < threshold) {\n          counter.delete(key);\n        }\n      });\n    };\n    const _getTotalCount = () => {\n      return [...counter.values()].reduce((a, b) => a + b, 0);\n    };\n    let isThrottled = false;\n    return (...rest) => {\n      // Date in second-precision, which we use as basis for the throttling\n      const now = Math.floor(Date.now() / 1000);\n\n      // First, make sure to delete any old entries\n      _cleanup(now);\n\n      // If already over limit, do nothing\n      if (_getTotalCount() >= maxCount) {\n        const wasThrottled = isThrottled;\n        isThrottled = true;\n        return wasThrottled ? SKIPPED : THROTTLED;\n      }\n      isThrottled = false;\n      const count = counter.get(now) || 0;\n      counter.set(now, count + 1);\n      return fn(...rest);\n    };\n  }\n\n  /* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n  /**\n   * The main replay container class, which holds all the state and methods for recording and sending replays.\n   */\n  class ReplayContainer {\n    /**\n     * Recording can happen in one of two modes:\n     *   - session: Record the whole session, sending it continuously\n     *   - buffer: Always keep the last 60s of recording, requires:\n     *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n     *     - or calling `flush()` to send the replay\n     */\n\n    /**\n     * The current or last active span.\n     * This is only available when performance is enabled.\n     */\n\n    /**\n     * These are here so we can overwrite them in tests etc.\n     * @hidden\n     */\n\n    /** The replay has to be manually started, because no sample rate (neither session or error) was provided. */\n\n    /**\n     * Options to pass to `rrweb.record()`\n     */\n\n    /**\n     * Timestamp of the last user activity. This lives across sessions.\n     */\n\n    /**\n     * Is the integration currently active?\n     */\n\n    /**\n     * Paused is a state where:\n     * - DOM Recording is not listening at all\n     * - Nothing will be added to event buffer (e.g. core SDK events)\n     */\n\n    /**\n     * Have we attached listeners to the core SDK?\n     * Note we have to track this as there is no way to remove instrumentation handlers.\n     */\n\n    /**\n     * Function to stop recording\n     */\n\n    /**\n     * Internal use for canvas recording options\n     */\n\n    constructor({\n      options,\n      recordingOptions\n    }) {\n      ReplayContainer.prototype.__init.call(this);\n      ReplayContainer.prototype.__init2.call(this);\n      ReplayContainer.prototype.__init3.call(this);\n      ReplayContainer.prototype.__init4.call(this);\n      ReplayContainer.prototype.__init5.call(this);\n      ReplayContainer.prototype.__init6.call(this);\n      this.eventBuffer = null;\n      this.performanceEntries = [];\n      this.replayPerformanceEntries = [];\n      this.recordingMode = 'session';\n      this.timeouts = {\n        sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n        sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION\n      };\n      this._lastActivity = Date.now();\n      this._isEnabled = false;\n      this._isPaused = false;\n      this._requiresManualStart = false;\n      this._hasInitializedCoreListeners = false;\n      this._context = {\n        errorIds: new Set(),\n        traceIds: new Set(),\n        urls: [],\n        initialTimestamp: Date.now(),\n        initialUrl: ''\n      };\n      this._recordingOptions = recordingOptions;\n      this._options = options;\n      this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n        maxWait: this._options.flushMaxDelay\n      });\n      this._throttledAddEvent = throttle((event, isCheckout) => addEvent(this, event, isCheckout),\n      // Max 300 events...\n      300,\n      // ... per 5s\n      5);\n      const {\n        slowClickTimeout,\n        slowClickIgnoreSelectors\n      } = this.getOptions();\n      const slowClickConfig = slowClickTimeout ? {\n        threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n        timeout: slowClickTimeout,\n        scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n        ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : ''\n      } : undefined;\n      if (slowClickConfig) {\n        this.clickDetector = new ClickDetector(this, slowClickConfig);\n      }\n\n      // Configure replay logger w/ experimental options\n      if (DEBUG_BUILD) {\n        const experiments = options._experiments;\n        logger.setConfig({\n          captureExceptions: !!experiments.captureExceptions,\n          traceInternals: !!experiments.traceInternals\n        });\n      }\n    }\n\n    /** Get the event context. */\n    getContext() {\n      return this._context;\n    }\n\n    /** If recording is currently enabled. */\n    isEnabled() {\n      return this._isEnabled;\n    }\n\n    /** If recording is currently paused. */\n    isPaused() {\n      return this._isPaused;\n    }\n\n    /**\n     * Determine if canvas recording is enabled\n     */\n    isRecordingCanvas() {\n      return Boolean(this._canvas);\n    }\n\n    /** Get the replay integration options. */\n    getOptions() {\n      return this._options;\n    }\n\n    /** A wrapper to conditionally capture exceptions. */\n    handleException(error) {\n      DEBUG_BUILD && logger.exception(error);\n      if (this._options.onError) {\n        this._options.onError(error);\n      }\n    }\n\n    /**\n     * Initializes the plugin based on sampling configuration. Should not be\n     * called outside of constructor.\n     */\n    initializeSampling(previousSessionId) {\n      const {\n        errorSampleRate,\n        sessionSampleRate\n      } = this._options;\n\n      // If neither sample rate is > 0, then do nothing - user will need to call one of\n      // `start()` or `startBuffering` themselves.\n      const requiresManualStart = errorSampleRate <= 0 && sessionSampleRate <= 0;\n      this._requiresManualStart = requiresManualStart;\n      if (requiresManualStart) {\n        return;\n      }\n\n      // Otherwise if there is _any_ sample rate set, try to load an existing\n      // session, or create a new one.\n      this._initializeSessionForSampling(previousSessionId);\n      if (!this.session) {\n        // This should not happen, something wrong has occurred\n        DEBUG_BUILD && logger.exception(new Error('Unable to initialize and create session'));\n        return;\n      }\n      if (this.session.sampled === false) {\n        // This should only occur if `errorSampleRate` is 0 and was unsampled for\n        // session-based replay. In this case there is nothing to do.\n        return;\n      }\n\n      // If segmentId > 0, it means we've previously already captured this session\n      // In this case, we still want to continue in `session` recording mode\n      this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n      DEBUG_BUILD && logger.infoTick(`Starting replay in ${this.recordingMode} mode`);\n      this._initializeRecording();\n    }\n\n    /**\n     * Start a replay regardless of sampling rate. Calling this will always\n     * create a new session. Will log a message if replay is already in progress.\n     *\n     * Creates or loads a session, attaches listeners to varying events (DOM,\n     * _performanceObserver, Recording, Sentry SDK, etc)\n     */\n    start() {\n      if (this._isEnabled && this.recordingMode === 'session') {\n        DEBUG_BUILD && logger.info('Recording is already in progress');\n        return;\n      }\n      if (this._isEnabled && this.recordingMode === 'buffer') {\n        DEBUG_BUILD && logger.info('Buffering is in progress, call `flush()` to save the replay');\n        return;\n      }\n      DEBUG_BUILD && logger.infoTick('Starting replay in session mode');\n\n      // Required as user activity is initially set in\n      // constructor, so if `start()` is called after\n      // session idle expiration, a replay will not be\n      // created due to an idle timeout.\n      this._updateUserActivity();\n      const session = loadOrCreateSession({\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire\n      }, {\n        stickySession: this._options.stickySession,\n        // This is intentional: create a new session-based replay when calling `start()`\n        sessionSampleRate: 1,\n        allowBuffering: false\n      });\n      this.session = session;\n      this._initializeRecording();\n    }\n\n    /**\n     * Start replay buffering. Buffers until `flush()` is called or, if\n     * `replaysOnErrorSampleRate` > 0, an error occurs.\n     */\n    startBuffering() {\n      if (this._isEnabled) {\n        DEBUG_BUILD && logger.info('Buffering is in progress, call `flush()` to save the replay');\n        return;\n      }\n      DEBUG_BUILD && logger.infoTick('Starting replay in buffer mode');\n      const session = loadOrCreateSession({\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration\n      }, {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: 0,\n        allowBuffering: true\n      });\n      this.session = session;\n      this.recordingMode = 'buffer';\n      this._initializeRecording();\n    }\n\n    /**\n     * Start recording.\n     *\n     * Note that this will cause a new DOM checkout\n     */\n    startRecording() {\n      try {\n        const canvasOptions = this._canvas;\n        this._stopRecording = record({\n          ...this._recordingOptions,\n          // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n          // Without this, it would record forever, until an error happens, which we don't want\n          // instead, we'll always keep the last 60 seconds of replay before an error happened\n          ...(this.recordingMode === 'buffer' ? {\n            checkoutEveryNms: BUFFER_CHECKOUT_TIME\n          } :\n          // Otherwise, use experimental option w/ min checkout time of 6 minutes\n          // This is to improve playback seeking as there could potentially be\n          // less mutations to process in the worse cases.\n          //\n          // checkout by \"N\" events is probably ideal, but means we have less\n          // control about the number of checkouts we make (which generally\n          // increases replay size)\n          this._options._experiments.continuousCheckout && {\n            // Minimum checkout time is 6 minutes\n            checkoutEveryNms: Math.max(360000, this._options._experiments.continuousCheckout)\n          }),\n          emit: getHandleRecordingEmit(this),\n          ...getRecordingSamplingOptions(),\n          onMutation: this._onMutationHandler,\n          ...(canvasOptions ? {\n            recordCanvas: canvasOptions.recordCanvas,\n            getCanvasManager: canvasOptions.getCanvasManager,\n            sampling: canvasOptions.sampling,\n            dataURLOptions: canvasOptions.dataURLOptions\n          } : {})\n        });\n      } catch (err) {\n        this.handleException(err);\n      }\n    }\n\n    /**\n     * Stops the recording, if it was running.\n     *\n     * Returns true if it was previously stopped, or is now stopped,\n     * otherwise false.\n     */\n    stopRecording() {\n      try {\n        if (this._stopRecording) {\n          this._stopRecording();\n          this._stopRecording = undefined;\n        }\n        return true;\n      } catch (err) {\n        this.handleException(err);\n        return false;\n      }\n    }\n\n    /**\n     * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n     * does not support a teardown\n     */\n    async stop({\n      forceFlush = false,\n      reason\n    } = {}) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n      // enter into an infinite loop when `stop()` is called while flushing.\n      this._isEnabled = false;\n      try {\n        DEBUG_BUILD && logger.info(`Stopping Replay${reason ? ` triggered by ${reason}` : ''}`);\n        resetReplayIdOnDynamicSamplingContext();\n        this._removeListeners();\n        this.stopRecording();\n        this._debouncedFlush.cancel();\n        // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n        // `_isEnabled` state of the plugin since it was disabled above.\n        if (forceFlush) {\n          await this._flush({\n            force: true\n          });\n        }\n\n        // After flush, destroy event buffer\n        this.eventBuffer && this.eventBuffer.destroy();\n        this.eventBuffer = null;\n\n        // Clear session from session storage, note this means if a new session\n        // is started after, it will not have `previousSessionId`\n        clearSession(this);\n      } catch (err) {\n        this.handleException(err);\n      }\n    }\n\n    /**\n     * Pause some replay functionality. See comments for `_isPaused`.\n     * This differs from stop as this only stops DOM recording, it is\n     * not as thorough of a shutdown as `stop()`.\n     */\n    pause() {\n      if (this._isPaused) {\n        return;\n      }\n      this._isPaused = true;\n      this.stopRecording();\n      DEBUG_BUILD && logger.info('Pausing replay');\n    }\n\n    /**\n     * Resumes recording, see notes for `pause().\n     *\n     * Note that calling `startRecording()` here will cause a\n     * new DOM checkout.`\n     */\n    resume() {\n      if (!this._isPaused || !this._checkSession()) {\n        return;\n      }\n      this._isPaused = false;\n      this.startRecording();\n      DEBUG_BUILD && logger.info('Resuming replay');\n    }\n\n    /**\n     * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n     * Unless `continueRecording` is false, the replay will continue to record and\n     * behave as a \"session\"-based replay.\n     *\n     * Otherwise, queue up a flush.\n     */\n    async sendBufferedReplayOrFlush({\n      continueRecording = true\n    } = {}) {\n      if (this.recordingMode === 'session') {\n        return this.flushImmediate();\n      }\n      const activityTime = Date.now();\n      DEBUG_BUILD && logger.info('Converting buffer to session');\n\n      // Allow flush to complete before resuming as a session recording, otherwise\n      // the checkout from `startRecording` may be included in the payload.\n      // Prefer to keep the error replay as a separate (and smaller) segment\n      // than the session replay.\n      await this.flushImmediate();\n      const hasStoppedRecording = this.stopRecording();\n      if (!continueRecording || !hasStoppedRecording) {\n        return;\n      }\n\n      // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n      if (this.recordingMode === 'session') {\n        return;\n      }\n\n      // Re-start recording in session-mode\n      this.recordingMode = 'session';\n\n      // Once this session ends, we do not want to refresh it\n      if (this.session) {\n        this._updateUserActivity(activityTime);\n        this._updateSessionActivity(activityTime);\n        this._maybeSaveSession();\n      }\n      this.startRecording();\n    }\n\n    /**\n     * We want to batch uploads of replay events. Save events only if\n     * `<flushMinDelay>` milliseconds have elapsed since the last event\n     * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n     *\n     * Accepts a callback to perform side-effects and returns true to stop batch\n     * processing and hand back control to caller.\n     */\n    addUpdate(cb) {\n      // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n      const cbResult = cb();\n\n      // If this option is turned on then we will only want to call `flush`\n      // explicitly\n      if (this.recordingMode === 'buffer') {\n        return;\n      }\n\n      // If callback is true, we do not want to continue with flushing -- the\n      // caller will need to handle it.\n      if (cbResult === true) {\n        return;\n      }\n\n      // addUpdate is called quite frequently - use _debouncedFlush so that it\n      // respects the flush delays and does not flush immediately\n      this._debouncedFlush();\n    }\n\n    /**\n     * Updates the user activity timestamp and resumes recording. This should be\n     * called in an event handler for a user action that we consider as the user\n     * being \"active\" (e.g. a mouse click).\n     */\n    triggerUserActivity() {\n      this._updateUserActivity();\n\n      // This case means that recording was once stopped due to inactivity.\n      // Ensure that recording is resumed.\n      if (!this._stopRecording) {\n        // Create a new session, otherwise when the user action is flushed, it\n        // will get rejected due to an expired session.\n        if (!this._checkSession()) {\n          return;\n        }\n\n        // Note: This will cause a new DOM checkout\n        this.resume();\n        return;\n      }\n\n      // Otherwise... recording was never suspended, continue as normalish\n      this.checkAndHandleExpiredSession();\n      this._updateSessionActivity();\n    }\n\n    /**\n     * Updates the user activity timestamp *without* resuming\n     * recording. Some user events (e.g. keydown) can be create\n     * low-value replays that only contain the keypress as a\n     * breadcrumb. Instead this would require other events to\n     * create a new replay after a session has expired.\n     */\n    updateUserActivity() {\n      this._updateUserActivity();\n      this._updateSessionActivity();\n    }\n\n    /**\n     * Only flush if `this.recordingMode === 'session'`\n     */\n    conditionalFlush() {\n      if (this.recordingMode === 'buffer') {\n        return Promise.resolve();\n      }\n      return this.flushImmediate();\n    }\n\n    /**\n     * Flush using debounce flush\n     */\n    flush() {\n      return this._debouncedFlush();\n    }\n\n    /**\n     * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n     * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n     * cases of multiple flushes happening closely together.\n     */\n    flushImmediate() {\n      this._debouncedFlush();\n      // `.flush` is provided by the debounced function, analogously to lodash.debounce\n      return this._debouncedFlush.flush();\n    }\n\n    /**\n     * Cancels queued up flushes.\n     */\n    cancelFlush() {\n      this._debouncedFlush.cancel();\n    }\n\n    /** Get the current session (=replay) ID */\n    getSessionId() {\n      return this.session && this.session.id;\n    }\n\n    /**\n     * Checks if recording should be stopped due to user inactivity. Otherwise\n     * check if session is expired and create a new session if so. Triggers a new\n     * full snapshot on new session.\n     *\n     * Returns true if session is not expired, false otherwise.\n     * @hidden\n     */\n    checkAndHandleExpiredSession() {\n      // Prevent starting a new session if the last user activity is older than\n      // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n      // session+recording. This creates noisy replays that do not have much\n      // content in them.\n      if (this._lastActivity && isExpired(this._lastActivity, this.timeouts.sessionIdlePause) && this.session && this.session.sampled === 'session') {\n        // Pause recording only for session-based replays. Otherwise, resuming\n        // will create a new replay and will conflict with users who only choose\n        // to record error-based replays only. (e.g. the resumed replay will not\n        // contain a reference to an error)\n        this.pause();\n        return;\n      }\n\n      // --- There is recent user activity --- //\n      // This will create a new session if expired, based on expiry length\n      if (!this._checkSession()) {\n        // Check session handles the refreshing itself\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Capture some initial state that can change throughout the lifespan of the\n     * replay. This is required because otherwise they would be captured at the\n     * first flush.\n     */\n    setInitialState() {\n      const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n      const url = `${WINDOW.location.origin}${urlPath}`;\n      this.performanceEntries = [];\n      this.replayPerformanceEntries = [];\n\n      // Reset _context as well\n      this._clearContext();\n      this._context.initialUrl = url;\n      this._context.initialTimestamp = Date.now();\n      this._context.urls.push(url);\n    }\n\n    /**\n     * Add a breadcrumb event, that may be throttled.\n     * If it was throttled, we add a custom breadcrumb to indicate that.\n     */\n    throttledAddEvent(event, isCheckout) {\n      const res = this._throttledAddEvent(event, isCheckout);\n\n      // If this is THROTTLED, it means we have throttled the event for the first time\n      // In this case, we want to add a breadcrumb indicating that something was skipped\n      if (res === THROTTLED) {\n        const breadcrumb = createBreadcrumb({\n          category: 'replay.throttled'\n        });\n        this.addUpdate(() => {\n          // Return `false` if the event _was_ added, as that means we schedule a flush\n          return !addEventSync(this, {\n            type: ReplayEventTypeCustom,\n            timestamp: breadcrumb.timestamp || 0,\n            data: {\n              tag: 'breadcrumb',\n              payload: breadcrumb,\n              metric: true\n            }\n          });\n        });\n      }\n      return res;\n    }\n\n    /**\n     * This will get the parametrized route name of the current page.\n     * This is only available if performance is enabled, and if an instrumented router is used.\n     */\n    getCurrentRoute() {\n      const lastActiveSpan = this.lastActiveSpan || (0, _core.getActiveSpan)();\n      const lastRootSpan = lastActiveSpan && (0, _core.getRootSpan)(lastActiveSpan);\n      const attributes = lastRootSpan && (0, _core.spanToJSON)(lastRootSpan).data || {};\n      const source = attributes[_core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n      if (!lastRootSpan || !source || !['route', 'custom'].includes(source)) {\n        return undefined;\n      }\n      return (0, _core.spanToJSON)(lastRootSpan).description;\n    }\n\n    /**\n     * Initialize and start all listeners to varying events (DOM,\n     * Performance Observer, Recording, Sentry SDK, etc)\n     */\n    _initializeRecording() {\n      this.setInitialState();\n\n      // this method is generally called on page load or manually - in both cases\n      // we should treat it as an activity\n      this._updateSessionActivity();\n      this.eventBuffer = createEventBuffer({\n        useCompression: this._options.useCompression,\n        workerUrl: this._options.workerUrl\n      });\n      this._removeListeners();\n      this._addListeners();\n\n      // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n      this._isEnabled = true;\n      this._isPaused = false;\n      this.startRecording();\n    }\n\n    /**\n     * Loads (or refreshes) the current session.\n     */\n    _initializeSessionForSampling(previousSessionId) {\n      // Whenever there is _any_ error sample rate, we always allow buffering\n      // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n      const allowBuffering = this._options.errorSampleRate > 0;\n      const session = loadOrCreateSession({\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        previousSessionId\n      }, {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: this._options.sessionSampleRate,\n        allowBuffering\n      });\n      this.session = session;\n    }\n\n    /**\n     * Checks and potentially refreshes the current session.\n     * Returns false if session is not recorded.\n     */\n    _checkSession() {\n      // If there is no session yet, we do not want to refresh anything\n      // This should generally not happen, but to be safe....\n      if (!this.session) {\n        return false;\n      }\n      const currentSession = this.session;\n      if (shouldRefreshSession(currentSession, {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration\n      })) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._refreshSession(currentSession);\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Refresh a session with a new one.\n     * This stops the current session (without forcing a flush, as that would never work since we are expired),\n     * and then does a new sampling based on the refreshed session.\n     */\n    async _refreshSession(session) {\n      if (!this._isEnabled) {\n        return;\n      }\n      await this.stop({\n        reason: 'refresh session'\n      });\n      this.initializeSampling(session.id);\n    }\n\n    /**\n     * Adds listeners to record events for the replay\n     */\n    _addListeners() {\n      try {\n        WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n        WINDOW.addEventListener('blur', this._handleWindowBlur);\n        WINDOW.addEventListener('focus', this._handleWindowFocus);\n        WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n        if (this.clickDetector) {\n          this.clickDetector.addListeners();\n        }\n\n        // There is no way to remove these listeners, so ensure they are only added once\n        if (!this._hasInitializedCoreListeners) {\n          addGlobalListeners(this);\n          this._hasInitializedCoreListeners = true;\n        }\n      } catch (err) {\n        this.handleException(err);\n      }\n      this._performanceCleanupCallback = setupPerformanceObserver(this);\n    }\n\n    /**\n     * Cleans up listeners that were created in `_addListeners`\n     */\n    _removeListeners() {\n      try {\n        WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n        WINDOW.removeEventListener('blur', this._handleWindowBlur);\n        WINDOW.removeEventListener('focus', this._handleWindowFocus);\n        WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n        if (this.clickDetector) {\n          this.clickDetector.removeListeners();\n        }\n        if (this._performanceCleanupCallback) {\n          this._performanceCleanupCallback();\n        }\n      } catch (err) {\n        this.handleException(err);\n      }\n    }\n\n    /**\n     * Handle when visibility of the page content changes. Opening a new tab will\n     * cause the state to change to hidden because of content of current page will\n     * be hidden. Likewise, moving a different window to cover the contents of the\n     * page will also trigger a change to a hidden state.\n     */\n    __init() {\n      this._handleVisibilityChange = () => {\n        if (WINDOW.document.visibilityState === 'visible') {\n          this._doChangeToForegroundTasks();\n        } else {\n          this._doChangeToBackgroundTasks();\n        }\n      };\n    }\n\n    /**\n     * Handle when page is blurred\n     */\n    __init2() {\n      this._handleWindowBlur = () => {\n        const breadcrumb = createBreadcrumb({\n          category: 'ui.blur'\n        });\n\n        // Do not count blur as a user action -- it's part of the process of them\n        // leaving the page\n        this._doChangeToBackgroundTasks(breadcrumb);\n      };\n    }\n\n    /**\n     * Handle when page is focused\n     */\n    __init3() {\n      this._handleWindowFocus = () => {\n        const breadcrumb = createBreadcrumb({\n          category: 'ui.focus'\n        });\n\n        // Do not count focus as a user action -- instead wait until they focus and\n        // interactive with page\n        this._doChangeToForegroundTasks(breadcrumb);\n      };\n    }\n\n    /** Ensure page remains active when a key is pressed. */\n    __init4() {\n      this._handleKeyboardEvent = event => {\n        handleKeyboardEvent(this, event);\n      };\n    }\n\n    /**\n     * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n     */\n    _doChangeToBackgroundTasks(breadcrumb) {\n      if (!this.session) {\n        return;\n      }\n      const expired = isSessionExpired(this.session, {\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire\n      });\n      if (expired) {\n        return;\n      }\n      if (breadcrumb) {\n        this._createCustomBreadcrumb(breadcrumb);\n      }\n\n      // Send replay when the page/tab becomes hidden. There is no reason to send\n      // replay if it becomes visible, since no actions we care about were done\n      // while it was hidden\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      void this.conditionalFlush();\n    }\n\n    /**\n     * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n     */\n    _doChangeToForegroundTasks(breadcrumb) {\n      if (!this.session) {\n        return;\n      }\n      const isSessionActive = this.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n        // ms, we will re-use the existing session, otherwise create a new\n        // session\n        DEBUG_BUILD && logger.info('Document has become active, but session has expired');\n        return;\n      }\n      if (breadcrumb) {\n        this._createCustomBreadcrumb(breadcrumb);\n      }\n    }\n\n    /**\n     * Update user activity (across session lifespans)\n     */\n    _updateUserActivity(_lastActivity = Date.now()) {\n      this._lastActivity = _lastActivity;\n    }\n\n    /**\n     * Updates the session's last activity timestamp\n     */\n    _updateSessionActivity(_lastActivity = Date.now()) {\n      if (this.session) {\n        this.session.lastActivity = _lastActivity;\n        this._maybeSaveSession();\n      }\n    }\n\n    /**\n     * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n     */\n    _createCustomBreadcrumb(breadcrumb) {\n      this.addUpdate(() => {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.throttledAddEvent({\n          type: EventType.Custom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb\n          }\n        });\n      });\n    }\n\n    /**\n     * Observed performance events are added to `this.performanceEntries`. These\n     * are included in the replay event before it is finished and sent to Sentry.\n     */\n    _addPerformanceEntries() {\n      let performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n      this.performanceEntries = [];\n      this.replayPerformanceEntries = [];\n\n      // If we are manually starting, we want to ensure we only include performance entries\n      // that are after the initial timestamp\n      // The reason for this is that we may have performance entries from the page load, but may decide to start\n      // the replay later on, in which case we do not want to include these entries.\n      // without this, manually started replays can have events long before the actual replay recording starts,\n      // which messes with the timeline etc.\n      if (this._requiresManualStart) {\n        const initialTimestampInSeconds = this._context.initialTimestamp / 1000;\n        performanceEntries = performanceEntries.filter(entry => entry.start >= initialTimestampInSeconds);\n      }\n      return Promise.all(createPerformanceSpans(this, performanceEntries));\n    }\n\n    /**\n     * Clear _context\n     */\n    _clearContext() {\n      // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n      this._context.errorIds.clear();\n      this._context.traceIds.clear();\n      this._context.urls = [];\n    }\n\n    /** Update the initial timestamp based on the buffer content. */\n    _updateInitialTimestampFromEventBuffer() {\n      const {\n        session,\n        eventBuffer\n      } = this;\n      // If replay was started manually (=no sample rate was given),\n      // We do not want to back-port the initial timestamp\n      if (!session || !eventBuffer || this._requiresManualStart) {\n        return;\n      }\n\n      // we only ever update this on the initial segment\n      if (session.segmentId) {\n        return;\n      }\n      const earliestEvent = eventBuffer.getEarliestTimestamp();\n      if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n        this._context.initialTimestamp = earliestEvent;\n      }\n    }\n\n    /**\n     * Return and clear _context\n     */\n    _popEventContext() {\n      const _context = {\n        initialTimestamp: this._context.initialTimestamp,\n        initialUrl: this._context.initialUrl,\n        errorIds: Array.from(this._context.errorIds),\n        traceIds: Array.from(this._context.traceIds),\n        urls: this._context.urls\n      };\n      this._clearContext();\n      return _context;\n    }\n\n    /**\n     * Flushes replay event buffer to Sentry.\n     *\n     * Performance events are only added right before flushing - this is\n     * due to the buffered performance observer events.\n     *\n     * Should never be called directly, only by `flush`\n     */\n    async _runFlush() {\n      const replayId = this.getSessionId();\n      if (!this.session || !this.eventBuffer || !replayId) {\n        DEBUG_BUILD && logger.error('No session or eventBuffer found to flush.');\n        return;\n      }\n      await this._addPerformanceEntries();\n\n      // Check eventBuffer again, as it could have been stopped in the meanwhile\n      if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n        return;\n      }\n\n      // Only attach memory event if eventBuffer is not empty\n      await addMemoryEntry(this);\n\n      // Check eventBuffer again, as it could have been stopped in the meanwhile\n      if (!this.eventBuffer) {\n        return;\n      }\n\n      // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n      if (replayId !== this.getSessionId()) {\n        return;\n      }\n      try {\n        // This uses the data from the eventBuffer, so we need to call this before `finish()\n        this._updateInitialTimestampFromEventBuffer();\n        const timestamp = Date.now();\n\n        // Check total duration again, to avoid sending outdated stuff\n        // We leave 30s wiggle room to accommodate late flushing etc.\n        // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n        if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30000) {\n          throw new Error('Session is too long, not sending replay');\n        }\n        const eventContext = this._popEventContext();\n        // Always increment segmentId regardless of outcome of sending replay\n        const segmentId = this.session.segmentId++;\n        this._maybeSaveSession();\n\n        // Note this empties the event buffer regardless of outcome of sending replay\n        const recordingData = await this.eventBuffer.finish();\n        await sendReplay({\n          replayId,\n          recordingData,\n          segmentId,\n          eventContext,\n          session: this.session,\n          timestamp,\n          onError: err => this.handleException(err)\n        });\n      } catch (err) {\n        this.handleException(err);\n\n        // This means we retried 3 times and all of them failed,\n        // or we ran into a problem we don't want to retry, like rate limiting.\n        // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.stop({\n          reason: 'sendReplay'\n        });\n        const client = (0, _core.getClient)();\n        if (client) {\n          const dropReason = err instanceof RateLimitError ? 'ratelimit_backoff' : 'send_error';\n          client.recordDroppedEvent(dropReason, 'replay');\n        }\n      }\n    }\n\n    /**\n     * Flush recording data to Sentry. Creates a lock so that only a single flush\n     * can be active at a time. Do not call this directly.\n     */\n    __init5() {\n      this._flush = async ({\n        force = false\n      } = {}) => {\n        if (!this._isEnabled && !force) {\n          // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n          return;\n        }\n        if (!this.checkAndHandleExpiredSession()) {\n          DEBUG_BUILD && logger.error('Attempting to finish replay event after session expired.');\n          return;\n        }\n        if (!this.session) {\n          // should never happen, as we would have bailed out before\n          return;\n        }\n        const start = this.session.started;\n        const now = Date.now();\n        const duration = now - start;\n\n        // A flush is about to happen, cancel any queued flushes\n        this._debouncedFlush.cancel();\n\n        // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n        // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n        const tooShort = duration < this._options.minReplayDuration;\n        const tooLong = duration > this._options.maxReplayDuration + 5000;\n        if (tooShort || tooLong) {\n          DEBUG_BUILD && logger.info(`Session duration (${Math.floor(duration / 1000)}s) is too ${tooShort ? 'short' : 'long'}, not sending replay.`);\n          if (tooShort) {\n            this._debouncedFlush();\n          }\n          return;\n        }\n        const eventBuffer = this.eventBuffer;\n        if (eventBuffer && this.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n          DEBUG_BUILD && logger.info('Flushing initial segment without checkout.');\n          // TODO FN: Evaluate if we want to stop here, or remove this again?\n        }\n        const _flushInProgress = !!this._flushLock;\n\n        // this._flushLock acts as a lock so that future calls to `_flush()` will\n        // be blocked until current flush is finished (i.e. this promise resolves)\n        if (!this._flushLock) {\n          this._flushLock = this._runFlush();\n        }\n        try {\n          await this._flushLock;\n        } catch (err) {\n          this.handleException(err);\n        } finally {\n          this._flushLock = undefined;\n          if (_flushInProgress) {\n            // Wait for previous flush to finish, then call the debounced\n            // `_flush()`. It's possible there are other flush requests queued and\n            // waiting for it to resolve. We want to reduce all outstanding\n            // requests (as well as any new flush requests that occur within a\n            // second of the locked flush completing) into a single flush.\n            this._debouncedFlush();\n          }\n        }\n      };\n    }\n\n    /** Save the session, if it is sticky */\n    _maybeSaveSession() {\n      if (this.session && this._options.stickySession) {\n        saveSession(this.session);\n      }\n    }\n\n    /** Handler for rrweb.record.onMutation */\n    __init6() {\n      this._onMutationHandler = mutations => {\n        const count = mutations.length;\n        const mutationLimit = this._options.mutationLimit;\n        const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n        const overMutationLimit = mutationLimit && count > mutationLimit;\n\n        // Create a breadcrumb if a lot of mutations happen at the same time\n        // We can show this in the UI as an information with potential performance improvements\n        if (count > mutationBreadcrumbLimit || overMutationLimit) {\n          const breadcrumb = createBreadcrumb({\n            category: 'replay.mutations',\n            data: {\n              count,\n              limit: overMutationLimit\n            }\n          });\n          this._createCustomBreadcrumb(breadcrumb);\n        }\n\n        // Stop replay if over the mutation limit\n        if (overMutationLimit) {\n          // This should never reject\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.stop({\n            reason: 'mutationLimit',\n            forceFlush: this.recordingMode === 'session'\n          });\n          return false;\n        }\n\n        // `true` means we use the regular mutation handling by rrweb\n        return true;\n      };\n    }\n  }\n  function getOption(selectors, defaultSelectors) {\n    return [...selectors,\n    // sentry defaults\n    ...defaultSelectors].join(',');\n  }\n\n  /**\n   * Returns privacy related configuration for use in rrweb\n   */\n  function getPrivacyOptions({\n    mask,\n    unmask,\n    block,\n    unblock,\n    ignore\n  }) {\n    const defaultBlockedElements = ['base', 'iframe[srcdoc]:not([src])'];\n    const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]']);\n    const unmaskSelector = getOption(unmask, []);\n    const options = {\n      // We are making the decision to make text and input selectors the same\n      maskTextSelector: maskSelector,\n      unmaskTextSelector: unmaskSelector,\n      blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements]),\n      unblockSelector: getOption(unblock, []),\n      ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'])\n    };\n    return options;\n  }\n\n  /**\n   * Masks an attribute if necessary, otherwise return attribute value as-is.\n   */\n  function maskAttribute({\n    el,\n    key,\n    maskAttributes,\n    maskAllText,\n    privacyOptions,\n    value\n  }) {\n    // We only mask attributes if `maskAllText` is true\n    if (!maskAllText) {\n      return value;\n    }\n\n    // unmaskTextSelector takes precedence\n    if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n      return value;\n    }\n    if (maskAttributes.includes(key) ||\n    // Need to mask `value` attribute for `<input>` if it's a button-like\n    // type\n    key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || '')) {\n      return value.replace(/[\\S]/g, '*');\n    }\n    return value;\n  }\n  const MEDIA_SELECTORS = 'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n  const DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\n  let _initialized = false;\n\n  /**\n   * Sentry integration for [Session Replay](https://sentry.io/for/session-replay/).\n   *\n   * See the [Replay documentation](https://docs.sentry.io/platforms/javascript/guides/session-replay/) for more information.\n   *\n   * @example\n   *\n   * ```\n   * Sentry.init({\n   *   dsn: '__DSN__',\n   *   integrations: [Sentry.replayIntegration()],\n   * });\n   * ```\n   */\n  const replayIntegration = options => {\n    return new Replay(options);\n  };\n\n  /**\n   * Replay integration\n   *\n   * TODO: Rewrite this to be functional integration\n   * Exported for tests.\n   */\n  exports.replayIntegration = replayIntegration;\n  class Replay {\n    /**\n     * @inheritDoc\n     */\n    static __initStatic() {\n      this.id = 'Replay';\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Options to pass to `rrweb.record()`\n     */\n\n    /**\n     * Initial options passed to the replay integration, merged with default values.\n     * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n     * can only be finally set when setupOnce() is called.\n     *\n     * @private\n     */\n\n    constructor({\n      flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n      flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n      minReplayDuration = MIN_REPLAY_DURATION,\n      maxReplayDuration = MAX_REPLAY_DURATION,\n      stickySession = true,\n      useCompression = true,\n      workerUrl,\n      _experiments = {},\n      maskAllText = true,\n      maskAllInputs = true,\n      blockAllMedia = true,\n      mutationBreadcrumbLimit = 750,\n      mutationLimit = 10000,\n      slowClickTimeout = 7000,\n      slowClickIgnoreSelectors = [],\n      networkDetailAllowUrls = [],\n      networkDetailDenyUrls = [],\n      networkCaptureBodies = true,\n      networkRequestHeaders = [],\n      networkResponseHeaders = [],\n      mask = [],\n      maskAttributes = ['title', 'placeholder'],\n      unmask = [],\n      block = [],\n      unblock = [],\n      ignore = [],\n      maskFn,\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n      onError\n    } = {}) {\n      this.name = Replay.id;\n      const privacyOptions = getPrivacyOptions({\n        mask,\n        unmask,\n        block,\n        unblock,\n        ignore\n      });\n      this._recordingOptions = {\n        maskAllInputs,\n        maskAllText,\n        maskInputOptions: {\n          password: true\n        },\n        maskTextFn: maskFn,\n        maskInputFn: maskFn,\n        maskAttributeFn: (key, value, el) => maskAttribute({\n          maskAttributes,\n          maskAllText,\n          privacyOptions,\n          key,\n          value,\n          el\n        }),\n        ...privacyOptions,\n        // Our defaults\n        slimDOMOptions: 'all',\n        inlineStylesheet: true,\n        // Disable inline images as it will increase segment/replay size\n        inlineImages: false,\n        // collect fonts, but be aware that `sentry.io` needs to be an allowed\n        // origin for playback\n        collectFonts: true,\n        errorHandler: err => {\n          try {\n            err.__rrweb__ = true;\n          } catch (error) {\n            // ignore errors here\n            // this can happen if the error is frozen or does not allow mutation for other reasons\n          }\n        }\n      };\n      this._initialOptions = {\n        flushMinDelay,\n        flushMaxDelay,\n        minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n        maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n        stickySession,\n        useCompression,\n        workerUrl,\n        blockAllMedia,\n        maskAllInputs,\n        maskAllText,\n        mutationBreadcrumbLimit,\n        mutationLimit,\n        slowClickTimeout,\n        slowClickIgnoreSelectors,\n        networkDetailAllowUrls,\n        networkDetailDenyUrls,\n        networkCaptureBodies,\n        networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n        networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n        beforeAddRecordingEvent,\n        beforeErrorSampling,\n        onError,\n        _experiments\n      };\n      if (this._initialOptions.blockAllMedia) {\n        // `blockAllMedia` is a more user friendly option to configure blocking\n        // embedded media elements\n        this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector ? MEDIA_SELECTORS : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n      }\n      if (this._isInitialized && (0, _core.isBrowser)()) {\n        throw new Error('Multiple Sentry Session Replay instances are not supported');\n      }\n      this._isInitialized = true;\n    }\n\n    /** If replay has already been initialized */\n    get _isInitialized() {\n      return _initialized;\n    }\n\n    /** Update _isInitialized */\n    set _isInitialized(value) {\n      _initialized = value;\n    }\n\n    /**\n     * Setup and initialize replay container\n     */\n    afterAllSetup(client) {\n      if (!(0, _core.isBrowser)() || this._replay) {\n        return;\n      }\n      this._setup(client);\n      this._initialize(client);\n    }\n\n    /**\n     * Start a replay regardless of sampling rate. Calling this will always\n     * create a new session. Will log a message if replay is already in progress.\n     *\n     * Creates or loads a session, attaches listeners to varying events (DOM,\n     * PerformanceObserver, Recording, Sentry SDK, etc)\n     */\n    start() {\n      if (!this._replay) {\n        return;\n      }\n      this._replay.start();\n    }\n\n    /**\n     * Start replay buffering. Buffers until `flush()` is called or, if\n     * `replaysOnErrorSampleRate` > 0, until an error occurs.\n     */\n    startBuffering() {\n      if (!this._replay) {\n        return;\n      }\n      this._replay.startBuffering();\n    }\n\n    /**\n     * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n     * does not support a teardown\n     */\n    stop() {\n      if (!this._replay) {\n        return Promise.resolve();\n      }\n      return this._replay.stop({\n        forceFlush: this._replay.recordingMode === 'session'\n      });\n    }\n\n    /**\n     * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n     * If replay is not enabled, a new session replay is started.\n     * Unless `continueRecording` is false, the replay will continue to record and\n     * behave as a \"session\"-based replay.\n     *\n     * Otherwise, queue up a flush.\n     */\n    flush(options) {\n      if (!this._replay) {\n        return Promise.resolve();\n      }\n\n      // assuming a session should be recorded in this case\n      if (!this._replay.isEnabled()) {\n        this._replay.start();\n        return Promise.resolve();\n      }\n      return this._replay.sendBufferedReplayOrFlush(options);\n    }\n\n    /**\n     * Get the current session ID.\n     */\n    getReplayId() {\n      if (!this._replay || !this._replay.isEnabled()) {\n        return;\n      }\n      return this._replay.getSessionId();\n    }\n\n    /**\n     * Get the current recording mode. This can be either `session` or `buffer`.\n     *\n     * `session`: Recording the whole session, sending it continuously\n     * `buffer`: Always keeping the last 60s of recording, requires:\n     *   - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n     *   - or calling `flush()` to send the replay\n     */\n    getRecordingMode() {\n      if (!this._replay || !this._replay.isEnabled()) {\n        return;\n      }\n      return this._replay.recordingMode;\n    }\n\n    /**\n     * Initializes replay.\n     */\n    _initialize(client) {\n      if (!this._replay) {\n        return;\n      }\n      this._maybeLoadFromReplayCanvasIntegration(client);\n      this._replay.initializeSampling();\n    }\n\n    /** Setup the integration. */\n    _setup(client) {\n      // Client is not available in constructor, so we need to wait until setupOnce\n      const finalOptions = loadReplayOptionsFromClient(this._initialOptions, client);\n      this._replay = new ReplayContainer({\n        options: finalOptions,\n        recordingOptions: this._recordingOptions\n      });\n    }\n\n    /** Get canvas options from ReplayCanvas integration, if it is also added. */\n    _maybeLoadFromReplayCanvasIntegration(client) {\n      // To save bundle size, we skip checking for stuff here\n      // and instead just try-catch everything - as generally this should all be defined\n      /* eslint-disable @typescript-eslint/no-non-null-assertion */\n      try {\n        const canvasIntegration = client.getIntegrationByName('ReplayCanvas');\n        if (!canvasIntegration) {\n          return;\n        }\n        this._replay['_canvas'] = canvasIntegration.getOptions();\n      } catch (e) {\n        // ignore errors here\n      }\n      /* eslint-enable @typescript-eslint/no-non-null-assertion */\n    }\n  }\n  Replay.__initStatic();\n\n  /** Parse Replay-related options from SDK options */\n  function loadReplayOptionsFromClient(initialOptions, client) {\n    const opt = client.getOptions();\n    const finalOptions = {\n      sessionSampleRate: 0,\n      errorSampleRate: 0,\n      ...(0, _core.dropUndefinedKeys)(initialOptions)\n    };\n    const replaysSessionSampleRate = (0, _core.parseSampleRate)(opt.replaysSessionSampleRate);\n    const replaysOnErrorSampleRate = (0, _core.parseSampleRate)(opt.replaysOnErrorSampleRate);\n    if (replaysSessionSampleRate == null && replaysOnErrorSampleRate == null) {\n      (0, _core.consoleSandbox)(() => {\n        // eslint-disable-next-line no-console\n        console.warn('Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.');\n      });\n    }\n    if (replaysSessionSampleRate != null) {\n      finalOptions.sessionSampleRate = replaysSessionSampleRate;\n    }\n    if (replaysOnErrorSampleRate != null) {\n      finalOptions.errorSampleRate = replaysOnErrorSampleRate;\n    }\n    return finalOptions;\n  }\n  function _getMergedNetworkHeaders(headers) {\n    return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n  }\n\n  /**\n   * This is a small utility to get a type-safe instance of the Replay integration.\n   */\n  function getReplay() {\n    const client = (0, _core.getClient)();\n    return client && client.getIntegrationByName('Replay');\n  }\n});","lineCount":9057,"map":[[7,2,1,0],[7,6,1,0,"_core"],[7,11,1,0],[7,14,1,0,"require"],[7,21,1,0],[7,22,1,0,"_dependencyMap"],[7,36,1,0],[8,2,3,0],[8,6,3,0,"_browserUtils"],[8,19,3,0],[8,22,3,0,"require"],[8,29,3,0],[8,30,3,0,"_dependencyMap"],[8,44,3,0],[9,2,5,0],[10,2,6,0],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,8,9,6,"WINDOW"],[13,14,9,12],[13,17,9,15,"GLOBAL_OBJ"],[13,33,9,25],[14,2,11,0],[14,8,11,6,"REPLAY_SESSION_KEY"],[14,26,11,24],[14,29,11,27],[14,50,11,48],[15,2,12,0],[15,8,12,6,"REPLAY_EVENT_NAME"],[15,25,12,23],[15,28,12,26],[15,42,12,40],[16,2,13,0],[16,8,13,6,"UNABLE_TO_SEND_REPLAY"],[16,29,13,27],[16,32,13,30],[16,55,13,53],[18,2,15,0],[19,2,16,0],[19,8,16,6,"SESSION_IDLE_PAUSE_DURATION"],[19,35,16,33],[19,38,16,36],[19,44,16,42],[19,45,16,43],[19,46,16,44],[21,2,18,0],[22,2,19,0],[22,8,19,6,"SESSION_IDLE_EXPIRE_DURATION"],[22,36,19,34],[22,39,19,37],[22,45,19,43],[22,46,19,44],[22,47,19,45],[24,2,21,0],[25,2,22,0],[25,8,22,6,"DEFAULT_FLUSH_MIN_DELAY"],[25,31,22,29],[25,34,22,32],[25,38,22,36],[26,2,23,0],[27,2,24,0],[28,2,25,0],[28,8,25,6,"DEFAULT_FLUSH_MAX_DELAY"],[28,31,25,29],[28,34,25,32],[28,38,25,36],[30,2,27,0],[31,2,28,0],[31,8,28,6,"BUFFER_CHECKOUT_TIME"],[31,28,28,26],[31,31,28,29],[31,36,28,34],[32,2,30,0],[32,8,30,6,"RETRY_BASE_INTERVAL"],[32,27,30,25],[32,30,30,28],[32,34,30,32],[33,2,31,0],[33,8,31,6,"RETRY_MAX_COUNT"],[33,23,31,21],[33,26,31,24],[33,27,31,25],[35,2,33,0],[36,2,34,0],[36,8,34,6,"NETWORK_BODY_MAX_SIZE"],[36,29,34,27],[36,32,34,30],[36,38,34,36],[38,2,36,0],[39,2,37,0],[39,8,37,6,"CONSOLE_ARG_MAX_SIZE"],[39,28,37,26],[39,31,37,29],[39,35,37,33],[41,2,39,0],[42,2,40,0],[42,8,40,6,"SLOW_CLICK_THRESHOLD"],[42,28,40,26],[42,31,40,29],[42,35,40,33],[43,2,41,0],[44,2,42,0],[44,8,42,6,"SLOW_CLICK_SCROLL_TIMEOUT"],[44,33,42,31],[44,36,42,34],[44,39,42,37],[46,2,44,0],[47,2,45,0],[47,8,45,6,"REPLAY_MAX_EVENT_BUFFER_SIZE"],[47,36,45,34],[47,39,45,37],[47,47,45,45],[47,48,45,46],[47,49,45,47],[49,2,47,0],[50,2,48,0],[50,8,48,6,"MIN_REPLAY_DURATION"],[50,27,48,25],[50,30,48,28],[50,34,48,32],[51,2,49,0],[52,2,50,0],[52,8,50,6,"MIN_REPLAY_DURATION_LIMIT"],[52,33,50,31],[52,36,50,34],[52,41,50,39],[54,2,52,0],[55,2,53,0],[55,8,53,6,"MAX_REPLAY_DURATION"],[55,27,53,25],[55,30,53,28],[55,37,53,35],[55,38,53,36],[55,39,53,37],[57,2,55,0],[57,11,55,9,"_nullishCoalesce$1"],[57,29,55,27,"_nullishCoalesce$1"],[57,30,55,28,"lhs"],[57,33,55,31],[57,35,55,33,"rhsFn"],[57,40,55,38],[57,42,55,40],[58,4,55,42],[58,8,55,46,"lhs"],[58,11,55,49],[58,15,55,53],[58,19,55,57],[58,21,55,59],[59,6,55,61],[59,13,55,68,"lhs"],[59,16,55,71],[60,4,55,73],[60,5,55,74],[60,11,55,80],[61,6,55,82],[61,13,55,89,"rhsFn"],[61,18,55,94],[61,19,55,95],[61,20,55,96],[62,4,55,98],[63,2,55,100],[64,2,55,101],[64,11,55,110,"_optionalChain$5"],[64,27,55,126,"_optionalChain$5"],[64,28,55,127,"ops"],[64,31,55,130],[64,33,55,132],[65,4,55,134],[65,8,55,138,"lastAccessLHS"],[65,21,55,151],[65,24,55,154,"undefined"],[65,33,55,163],[66,4,55,165],[66,8,55,169,"value"],[66,13,55,174],[66,16,55,177,"ops"],[66,19,55,180],[66,20,55,181],[66,21,55,182],[66,22,55,183],[67,4,55,185],[67,8,55,189,"i"],[67,9,55,190],[67,12,55,193],[67,13,55,194],[68,4,55,196],[68,11,55,203,"i"],[68,12,55,204],[68,15,55,207,"ops"],[68,18,55,210],[68,19,55,211,"length"],[68,25,55,217],[68,27,55,219],[69,6,55,221],[69,12,55,227,"op"],[69,14,55,229],[69,17,55,232,"ops"],[69,20,55,235],[69,21,55,236,"i"],[69,22,55,237],[69,23,55,238],[70,6,55,240],[70,12,55,246,"fn"],[70,14,55,248],[70,17,55,251,"ops"],[70,20,55,254],[70,21,55,255,"i"],[70,22,55,256],[70,25,55,259],[70,26,55,260],[70,27,55,261],[71,6,55,263,"i"],[71,7,55,264],[71,11,55,268],[71,12,55,269],[72,6,55,271],[72,10,55,275],[72,11,55,276,"op"],[72,13,55,278],[72,18,55,283],[72,34,55,299],[72,38,55,303,"op"],[72,40,55,305],[72,45,55,310],[72,59,55,324],[72,64,55,329,"value"],[72,69,55,334],[72,73,55,338],[72,77,55,342],[72,79,55,344],[73,8,55,346],[73,15,55,353,"undefined"],[73,24,55,362],[74,6,55,364],[75,6,55,366],[75,10,55,370,"op"],[75,12,55,372],[75,17,55,377],[75,25,55,385],[75,29,55,389,"op"],[75,31,55,391],[75,36,55,396],[75,52,55,412],[75,54,55,414],[76,8,55,416,"lastAccessLHS"],[76,21,55,429],[76,24,55,432,"value"],[76,29,55,437],[77,8,55,439,"value"],[77,13,55,444],[77,16,55,447,"fn"],[77,18,55,449],[77,19,55,450,"value"],[77,24,55,455],[77,25,55,456],[78,6,55,458],[78,7,55,459],[78,13,55,465],[78,17,55,469,"op"],[78,19,55,471],[78,24,55,476],[78,30,55,482],[78,34,55,486,"op"],[78,36,55,488],[78,41,55,493],[78,55,55,507],[78,57,55,509],[79,8,55,511,"value"],[79,13,55,516],[79,16,55,519,"fn"],[79,18,55,521],[79,19,55,522],[79,20,55,523],[79,23,55,526,"args"],[79,27,55,530],[79,32,55,535,"value"],[79,37,55,540],[79,38,55,541,"call"],[79,42,55,545],[79,43,55,546,"lastAccessLHS"],[79,56,55,559],[79,58,55,561],[79,61,55,564,"args"],[79,65,55,568],[79,66,55,569],[79,67,55,570],[80,8,55,572,"lastAccessLHS"],[80,21,55,585],[80,24,55,588,"undefined"],[80,33,55,597],[81,6,55,599],[82,4,55,601],[83,4,55,603],[83,11,55,610,"value"],[83,16,55,615],[84,2,55,617],[85,2,55,618],[85,6,55,622,"NodeType$3"],[85,16,55,632],[86,2,56,0],[86,3,56,1],[86,13,56,11,"NodeType"],[86,21,56,19],[86,23,56,21],[87,4,57,4,"NodeType"],[87,12,57,12],[87,13,57,13,"NodeType"],[87,21,57,21],[87,22,57,22],[87,32,57,32],[87,33,57,33],[87,36,57,36],[87,37,57,37],[87,38,57,38],[87,41,57,41],[87,51,57,51],[88,4,58,4,"NodeType"],[88,12,58,12],[88,13,58,13,"NodeType"],[88,21,58,21],[88,22,58,22],[88,36,58,36],[88,37,58,37],[88,40,58,40],[88,41,58,41],[88,42,58,42],[88,45,58,45],[88,59,58,59],[89,4,59,4,"NodeType"],[89,12,59,12],[89,13,59,13,"NodeType"],[89,21,59,21],[89,22,59,22],[89,31,59,31],[89,32,59,32],[89,35,59,35],[89,36,59,36],[89,37,59,37],[89,40,59,40],[89,49,59,49],[90,4,60,4,"NodeType"],[90,12,60,12],[90,13,60,13,"NodeType"],[90,21,60,21],[90,22,60,22],[90,28,60,28],[90,29,60,29],[90,32,60,32],[90,33,60,33],[90,34,60,34],[90,37,60,37],[90,43,60,43],[91,4,61,4,"NodeType"],[91,12,61,12],[91,13,61,13,"NodeType"],[91,21,61,21],[91,22,61,22],[91,29,61,29],[91,30,61,30],[91,33,61,33],[91,34,61,34],[91,35,61,35],[91,38,61,38],[91,45,61,45],[92,4,62,4,"NodeType"],[92,12,62,12],[92,13,62,13,"NodeType"],[92,21,62,21],[92,22,62,22],[92,31,62,31],[92,32,62,32],[92,35,62,35],[92,36,62,36],[92,37,62,37],[92,40,62,40],[92,49,62,49],[93,2,63,0],[93,3,63,1],[93,5,63,3,"NodeType$3"],[93,15,63,13],[93,20,63,18,"NodeType$3"],[93,30,63,28],[93,33,63,31],[93,34,63,32],[93,35,63,33],[93,36,63,34],[93,37,63,35],[94,2,65,0],[94,11,65,9,"isElement$1"],[94,22,65,20,"isElement$1"],[94,23,65,21,"n"],[94,24,65,22],[94,26,65,24],[95,4,66,4],[95,11,66,11,"n"],[95,12,66,12],[95,13,66,13,"nodeType"],[95,21,66,21],[95,26,66,26,"n"],[95,27,66,27],[95,28,66,28,"ELEMENT_NODE"],[95,40,66,40],[96,2,67,0],[97,2,68,0],[97,11,68,9,"isShadowRoot"],[97,23,68,21,"isShadowRoot"],[97,24,68,22,"n"],[97,25,68,23],[97,27,68,25],[98,4,69,4],[98,10,69,10,"host"],[98,14,69,14],[98,17,69,17,"_optionalChain$5"],[98,33,69,33],[98,34,69,34],[98,35,69,35,"n"],[98,36,69,36],[98,38,69,38],[98,54,69,54],[98,56,69,56,"_"],[98,57,69,57],[98,61,69,61,"_"],[98,62,69,62],[98,63,69,63,"host"],[98,67,69,67],[98,68,69,68],[98,69,69,69],[99,4,70,4],[99,11,70,11,"Boolean"],[99,18,70,18],[99,19,70,19,"_optionalChain$5"],[99,35,70,35],[99,36,70,36],[99,37,70,37,"host"],[99,41,70,41],[99,43,70,43],[99,59,70,59],[99,61,70,61,"_2"],[99,63,70,63],[99,67,70,67,"_2"],[99,69,70,69],[99,70,70,70,"shadowRoot"],[99,80,70,80],[99,81,70,81],[99,82,70,82],[99,87,70,87,"n"],[99,88,70,88],[99,89,70,89],[100,2,71,0],[101,2,72,0],[101,11,72,9,"isNativeShadowDom"],[101,28,72,26,"isNativeShadowDom"],[101,29,72,27,"shadowRoot"],[101,39,72,37],[101,41,72,39],[102,4,73,4],[102,11,73,11,"Object"],[102,17,73,17],[102,18,73,18,"prototype"],[102,27,73,27],[102,28,73,28,"toString"],[102,36,73,36],[102,37,73,37,"call"],[102,41,73,41],[102,42,73,42,"shadowRoot"],[102,52,73,52],[102,53,73,53],[102,58,73,58],[102,79,73,79],[103,2,74,0],[104,2,75,0],[104,11,75,9,"fixBrowserCompatibilityIssuesInCSS"],[104,45,75,43,"fixBrowserCompatibilityIssuesInCSS"],[104,46,75,44,"cssText"],[104,53,75,51],[104,55,75,53],[105,4,76,4],[105,8,76,8,"cssText"],[105,15,76,15],[105,16,76,16,"includes"],[105,24,76,24],[105,25,76,25],[105,50,76,50],[105,51,76,51],[105,55,77,8],[105,56,77,9,"cssText"],[105,63,77,16],[105,64,77,17,"includes"],[105,72,77,25],[105,73,77,26],[105,106,77,59],[105,107,77,60],[105,109,77,62],[106,6,78,8,"cssText"],[106,13,78,15],[106,16,78,18,"cssText"],[106,23,78,25],[106,24,78,26,"replace"],[106,31,78,33],[106,32,78,34],[106,61,78,63],[106,63,78,65],[106,119,78,121],[106,120,78,122],[107,4,79,4],[108,4,80,4],[108,11,80,11,"cssText"],[108,18,80,18],[109,2,81,0],[110,2,82,0],[110,11,82,9,"escapeImportStatement"],[110,32,82,30,"escapeImportStatement"],[110,33,82,31,"rule"],[110,37,82,35],[110,39,82,37],[111,4,83,4],[111,10,83,10],[112,6,83,12,"cssText"],[113,4,83,20],[113,5,83,21],[113,8,83,24,"rule"],[113,12,83,28],[114,4,84,4],[114,8,84,8,"cssText"],[114,15,84,15],[114,16,84,16,"split"],[114,21,84,21],[114,22,84,22],[114,25,84,25],[114,26,84,26],[114,27,84,27,"length"],[114,33,84,33],[114,36,84,36],[114,37,84,37],[114,39,85,8],[114,46,85,15,"cssText"],[114,53,85,22],[115,4,86,4],[115,10,86,10,"statement"],[115,19,86,19],[115,22,86,22],[115,23,86,23],[115,32,86,32],[115,34,86,34],[115,41,86,41,"JSON"],[115,45,86,45],[115,46,86,46,"stringify"],[115,55,86,55],[115,56,86,56,"rule"],[115,60,86,60],[115,61,86,61,"href"],[115,65,86,65],[115,66,86,66],[115,69,86,69],[115,70,86,70],[116,4,87,4],[116,8,87,8,"rule"],[116,12,87,12],[116,13,87,13,"layerName"],[116,22,87,22],[116,27,87,27],[116,29,87,29],[116,31,87,31],[117,6,88,8,"statement"],[117,15,88,17],[117,16,88,18,"push"],[117,20,88,22],[117,21,88,23],[117,28,88,30],[117,29,88,31],[118,4,89,4],[118,5,89,5],[118,11,90,9],[118,15,90,13,"rule"],[118,19,90,17],[118,20,90,18,"layerName"],[118,29,90,27],[118,31,90,29],[119,6,91,8,"statement"],[119,15,91,17],[119,16,91,18,"push"],[119,20,91,22],[119,21,91,23],[119,30,91,32,"rule"],[119,34,91,36],[119,35,91,37,"layerName"],[119,44,91,46],[119,47,91,49],[119,48,91,50],[120,4,92,4],[121,4,93,4],[121,8,93,8,"rule"],[121,12,93,12],[121,13,93,13,"supportsText"],[121,25,93,25],[121,27,93,27],[122,6,94,8,"statement"],[122,15,94,17],[122,16,94,18,"push"],[122,20,94,22],[122,21,94,23],[122,33,94,35,"rule"],[122,37,94,39],[122,38,94,40,"supportsText"],[122,50,94,52],[122,53,94,55],[122,54,94,56],[123,4,95,4],[124,4,96,4],[124,8,96,8,"rule"],[124,12,96,12],[124,13,96,13,"media"],[124,18,96,18],[124,19,96,19,"length"],[124,25,96,25],[124,27,96,27],[125,6,97,8,"statement"],[125,15,97,17],[125,16,97,18,"push"],[125,20,97,22],[125,21,97,23,"rule"],[125,25,97,27],[125,26,97,28,"media"],[125,31,97,33],[125,32,97,34,"mediaText"],[125,41,97,43],[125,42,97,44],[126,4,98,4],[127,4,99,4],[127,11,99,11,"statement"],[127,20,99,20],[127,21,99,21,"join"],[127,25,99,25],[127,26,99,26],[127,29,99,29],[127,30,99,30],[127,33,99,33],[127,36,99,36],[128,2,100,0],[129,2,101,0],[129,11,101,9,"stringifyStylesheet"],[129,30,101,28,"stringifyStylesheet"],[129,31,101,29,"s"],[129,32,101,30],[129,34,101,32],[130,4,102,4],[130,8,102,8],[131,6,103,8],[131,12,103,14,"rules"],[131,17,103,19],[131,20,103,22,"s"],[131,21,103,23],[131,22,103,24,"rules"],[131,27,103,29],[131,31,103,33,"s"],[131,32,103,34],[131,33,103,35,"cssRules"],[131,41,103,43],[132,6,104,8],[132,13,104,15,"rules"],[132,18,104,20],[132,21,105,14,"fixBrowserCompatibilityIssuesInCSS"],[132,55,105,48],[132,56,105,49,"Array"],[132,61,105,54],[132,62,105,55,"from"],[132,66,105,59],[132,67,105,60,"rules"],[132,72,105,65],[132,74,105,67,"stringifyRule"],[132,87,105,80],[132,88,105,81],[132,89,105,82,"join"],[132,93,105,86],[132,94,105,87],[132,96,105,89],[132,97,105,90],[132,98,105,91],[132,101,106,14],[132,105,106,18],[133,4,107,4],[133,5,107,5],[133,6,108,4],[133,13,108,11,"error"],[133,18,108,16],[133,20,108,18],[134,6,109,8],[134,13,109,15],[134,17,109,19],[135,4,110,4],[136,2,111,0],[137,2,112,0],[137,11,112,9,"fixAllCssProperty"],[137,28,112,26,"fixAllCssProperty"],[137,29,112,27,"rule"],[137,33,112,31],[137,35,112,33],[138,4,113,4],[138,8,113,8,"styles"],[138,14,113,14],[138,17,113,17],[138,19,113,19],[139,4,114,4],[139,9,114,9],[139,13,114,13,"i"],[139,14,114,14],[139,17,114,17],[139,18,114,18],[139,20,114,20,"i"],[139,21,114,21],[139,24,114,24,"rule"],[139,28,114,28],[139,29,114,29,"style"],[139,34,114,34],[139,35,114,35,"length"],[139,41,114,41],[139,43,114,43,"i"],[139,44,114,44],[139,46,114,46],[139,48,114,48],[140,6,115,8],[140,12,115,14,"styleDeclaration"],[140,28,115,30],[140,31,115,33,"rule"],[140,35,115,37],[140,36,115,38,"style"],[140,41,115,43],[141,6,116,8],[141,12,116,14,"attribute"],[141,21,116,23],[141,24,116,26,"styleDeclaration"],[141,40,116,42],[141,41,116,43,"i"],[141,42,116,44],[141,43,116,45],[142,6,117,8],[142,12,117,14,"isImportant"],[142,23,117,25],[142,26,117,28,"styleDeclaration"],[142,42,117,44],[142,43,117,45,"getPropertyPriority"],[142,62,117,64],[142,63,117,65,"attribute"],[142,72,117,74],[142,73,117,75],[143,6,118,8,"styles"],[143,12,118,14],[143,16,118,18],[143,19,118,21,"attribute"],[143,28,118,30],[143,32,118,34,"styleDeclaration"],[143,48,118,50],[143,49,118,51,"getPropertyValue"],[143,65,118,67],[143,66,118,68,"attribute"],[143,75,118,77],[143,76,118,78],[143,79,118,81,"isImportant"],[143,90,118,92],[143,93,118,95],[143,106,118,108],[143,109,118,111],[143,111,118,113],[143,114,118,116],[144,4,119,4],[145,4,120,4],[145,11,120,11],[145,14,120,14,"rule"],[145,18,120,18],[145,19,120,19,"selectorText"],[145,31,120,31],[145,37,120,37,"styles"],[145,43,120,43],[145,47,120,47],[146,2,121,0],[147,2,122,0],[147,11,122,9,"stringifyRule"],[147,24,122,22,"stringifyRule"],[147,25,122,23,"rule"],[147,29,122,27],[147,31,122,29],[148,4,123,4],[148,8,123,8,"importStringified"],[148,25,123,25],[149,4,124,4],[149,8,124,8,"isCSSImportRule"],[149,23,124,23],[149,24,124,24,"rule"],[149,28,124,28],[149,29,124,29],[149,31,124,31],[150,6,125,8],[150,10,125,12],[151,8,126,12,"importStringified"],[151,25,126,29],[151,28,127,16,"stringifyStylesheet"],[151,47,127,35],[151,48,127,36,"rule"],[151,52,127,40],[151,53,127,41,"styleSheet"],[151,63,127,51],[151,64,127,52],[151,68,128,20,"escapeImportStatement"],[151,89,128,41],[151,90,128,42,"rule"],[151,94,128,46],[151,95,128,47],[152,6,129,8],[152,7,129,9],[152,8,130,8],[152,15,130,15,"error"],[152,20,130,20],[152,22,130,22],[152,23,131,8],[153,4,132,4],[153,5,132,5],[153,11,133,9],[153,15,133,13,"isCSSStyleRule"],[153,29,133,27],[153,30,133,28,"rule"],[153,34,133,32],[153,35,133,33],[153,37,133,35],[154,6,134,8],[154,10,134,12,"cssText"],[154,17,134,19],[154,20,134,22,"rule"],[154,24,134,26],[154,25,134,27,"cssText"],[154,32,134,34],[155,6,135,8],[155,12,135,14,"needsSafariColonFix"],[155,31,135,33],[155,34,135,36,"rule"],[155,38,135,40],[155,39,135,41,"selectorText"],[155,51,135,53],[155,52,135,54,"includes"],[155,60,135,62],[155,61,135,63],[155,64,135,66],[155,65,135,67],[156,6,136,8],[156,12,136,14,"needsAllFix"],[156,23,136,25],[156,26,136,28],[156,33,136,35,"rule"],[156,37,136,39],[156,38,136,40,"style"],[156,43,136,45],[156,44,136,46],[156,49,136,51],[156,50,136,52],[156,55,136,57],[156,63,136,65],[156,67,136,69,"rule"],[156,71,136,73],[156,72,136,74,"style"],[156,77,136,79],[156,78,136,80],[156,83,136,85],[156,84,136,86],[157,6,137,8],[157,10,137,12,"needsAllFix"],[157,21,137,23],[157,23,137,25],[158,8,138,12,"cssText"],[158,15,138,19],[158,18,138,22,"fixAllCssProperty"],[158,35,138,39],[158,36,138,40,"rule"],[158,40,138,44],[158,41,138,45],[159,6,139,8],[160,6,140,8],[160,10,140,12,"needsSafariColonFix"],[160,29,140,31],[160,31,140,33],[161,8,141,12,"cssText"],[161,15,141,19],[161,18,141,22,"fixSafariColons"],[161,33,141,37],[161,34,141,38,"cssText"],[161,41,141,45],[161,42,141,46],[162,6,142,8],[163,6,143,8],[163,10,143,12,"needsSafariColonFix"],[163,29,143,31],[163,33,143,35,"needsAllFix"],[163,44,143,46],[163,46,143,48],[164,8,144,12],[164,15,144,19,"cssText"],[164,22,144,26],[165,6,145,8],[166,4,146,4],[167,4,147,4],[167,11,147,11,"importStringified"],[167,28,147,28],[167,32,147,32,"rule"],[167,36,147,36],[167,37,147,37,"cssText"],[167,44,147,44],[168,2,148,0],[169,2,149,0],[169,11,149,9,"fixSafariColons"],[169,26,149,24,"fixSafariColons"],[169,27,149,25,"cssStringified"],[169,41,149,39],[169,43,149,41],[170,4,150,4],[170,10,150,10,"regex"],[170,15,150,15],[170,18,150,18],[170,56,150,56],[171,4,151,4],[171,11,151,11,"cssStringified"],[171,25,151,25],[171,26,151,26,"replace"],[171,33,151,33],[171,34,151,34,"regex"],[171,39,151,39],[171,41,151,41],[171,49,151,49],[171,50,151,50],[172,2,152,0],[173,2,153,0],[173,11,153,9,"isCSSImportRule"],[173,26,153,24,"isCSSImportRule"],[173,27,153,25,"rule"],[173,31,153,29],[173,33,153,31],[174,4,154,4],[174,11,154,11],[174,23,154,23],[174,27,154,27,"rule"],[174,31,154,31],[175,2,155,0],[176,2,156,0],[176,11,156,9,"isCSSStyleRule"],[176,25,156,23,"isCSSStyleRule"],[176,26,156,24,"rule"],[176,30,156,28],[176,32,156,30],[177,4,157,4],[177,11,157,11],[177,25,157,25],[177,29,157,29,"rule"],[177,33,157,33],[178,2,158,0],[179,2,159,0],[179,8,159,6,"Mirror"],[179,14,159,12],[179,15,159,13],[180,4,160,4,"constructor"],[180,15,160,15,"constructor"],[180,16,160,15],[180,18,160,18],[181,6,161,8],[181,10,161,12],[181,11,161,13,"idNodeMap"],[181,20,161,22],[181,23,161,25],[181,27,161,29,"Map"],[181,30,161,32],[181,31,161,33],[181,32,161,34],[182,6,162,8],[182,10,162,12],[182,11,162,13,"nodeMetaMap"],[182,22,162,24],[182,25,162,27],[182,29,162,31,"WeakMap"],[182,36,162,38],[182,37,162,39],[182,38,162,40],[183,4,163,4],[184,4,164,4,"getId"],[184,9,164,9,"getId"],[184,10,164,10,"n"],[184,11,164,11],[184,13,164,13],[185,6,165,8],[185,10,165,12],[185,11,165,13,"n"],[185,12,165,14],[185,14,166,12],[185,21,166,19],[185,22,166,20],[185,23,166,21],[186,6,167,8],[186,12,167,14,"id"],[186,14,167,16],[186,17,167,19,"_optionalChain$5"],[186,33,167,35],[186,34,167,36],[186,35,167,37],[186,39,167,41],[186,41,167,43],[186,49,167,51],[186,51,167,53,"_3"],[186,53,167,55],[186,57,167,59,"_3"],[186,59,167,61],[186,60,167,62,"getMeta"],[186,67,167,69],[186,69,167,71],[186,75,167,77],[186,77,167,79,"_4"],[186,79,167,81],[186,83,167,85,"_4"],[186,85,167,87],[186,86,167,88,"n"],[186,87,167,89],[186,88,167,90],[186,90,167,92],[186,106,167,108],[186,108,167,110,"_5"],[186,110,167,112],[186,114,167,116,"_5"],[186,116,167,118],[186,117,167,119,"id"],[186,119,167,121],[186,120,167,122],[186,121,167,123],[187,6,168,8],[187,13,168,15,"_nullishCoalesce$1"],[187,31,168,33],[187,32,168,34,"id"],[187,34,168,36],[187,36,168,38],[187,42,168,46],[187,43,168,47],[187,44,168,49],[187,45,168,50],[188,4,169,4],[189,4,170,4,"getNode"],[189,11,170,11,"getNode"],[189,12,170,12,"id"],[189,14,170,14],[189,16,170,16],[190,6,171,8],[190,13,171,15],[190,17,171,19],[190,18,171,20,"idNodeMap"],[190,27,171,29],[190,28,171,30,"get"],[190,31,171,33],[190,32,171,34,"id"],[190,34,171,36],[190,35,171,37],[190,39,171,41],[190,43,171,45],[191,4,172,4],[192,4,173,4,"getIds"],[192,10,173,10,"getIds"],[192,11,173,10],[192,13,173,13],[193,6,174,8],[193,13,174,15,"Array"],[193,18,174,20],[193,19,174,21,"from"],[193,23,174,25],[193,24,174,26],[193,28,174,30],[193,29,174,31,"idNodeMap"],[193,38,174,40],[193,39,174,41,"keys"],[193,43,174,45],[193,44,174,46],[193,45,174,47],[193,46,174,48],[194,4,175,4],[195,4,176,4,"getMeta"],[195,11,176,11,"getMeta"],[195,12,176,12,"n"],[195,13,176,13],[195,15,176,15],[196,6,177,8],[196,13,177,15],[196,17,177,19],[196,18,177,20,"nodeMetaMap"],[196,29,177,31],[196,30,177,32,"get"],[196,33,177,35],[196,34,177,36,"n"],[196,35,177,37],[196,36,177,38],[196,40,177,42],[196,44,177,46],[197,4,178,4],[198,4,179,4,"removeNodeFromMap"],[198,21,179,21,"removeNodeFromMap"],[198,22,179,22,"n"],[198,23,179,23],[198,25,179,25],[199,6,180,8],[199,12,180,14,"id"],[199,14,180,16],[199,17,180,19],[199,21,180,23],[199,22,180,24,"getId"],[199,27,180,29],[199,28,180,30,"n"],[199,29,180,31],[199,30,180,32],[200,6,181,8],[200,10,181,12],[200,11,181,13,"idNodeMap"],[200,20,181,22],[200,21,181,23,"delete"],[200,27,181,29],[200,28,181,30,"id"],[200,30,181,32],[200,31,181,33],[201,6,182,8],[201,10,182,12,"n"],[201,11,182,13],[201,12,182,14,"childNodes"],[201,22,182,24],[201,24,182,26],[202,8,183,12,"n"],[202,9,183,13],[202,10,183,14,"childNodes"],[202,20,183,24],[202,21,183,25,"forEach"],[202,28,183,32],[202,29,183,34,"childNode"],[202,38,183,43],[202,42,183,48],[202,46,183,52],[202,47,183,53,"removeNodeFromMap"],[202,64,183,70],[202,65,183,71,"childNode"],[202,74,183,80],[202,75,183,81],[202,76,183,82],[203,6,184,8],[204,4,185,4],[205,4,186,4,"has"],[205,7,186,7,"has"],[205,8,186,8,"id"],[205,10,186,10],[205,12,186,12],[206,6,187,8],[206,13,187,15],[206,17,187,19],[206,18,187,20,"idNodeMap"],[206,27,187,29],[206,28,187,30,"has"],[206,31,187,33],[206,32,187,34,"id"],[206,34,187,36],[206,35,187,37],[207,4,188,4],[208,4,189,4,"hasNode"],[208,11,189,11,"hasNode"],[208,12,189,12,"node"],[208,16,189,16],[208,18,189,18],[209,6,190,8],[209,13,190,15],[209,17,190,19],[209,18,190,20,"nodeMetaMap"],[209,29,190,31],[209,30,190,32,"has"],[209,33,190,35],[209,34,190,36,"node"],[209,38,190,40],[209,39,190,41],[210,4,191,4],[211,4,192,4,"add"],[211,7,192,7,"add"],[211,8,192,8,"n"],[211,9,192,9],[211,11,192,11,"meta"],[211,15,192,15],[211,17,192,17],[212,6,193,8],[212,12,193,14,"id"],[212,14,193,16],[212,17,193,19,"meta"],[212,21,193,23],[212,22,193,24,"id"],[212,24,193,26],[213,6,194,8],[213,10,194,12],[213,11,194,13,"idNodeMap"],[213,20,194,22],[213,21,194,23,"set"],[213,24,194,26],[213,25,194,27,"id"],[213,27,194,29],[213,29,194,31,"n"],[213,30,194,32],[213,31,194,33],[214,6,195,8],[214,10,195,12],[214,11,195,13,"nodeMetaMap"],[214,22,195,24],[214,23,195,25,"set"],[214,26,195,28],[214,27,195,29,"n"],[214,28,195,30],[214,30,195,32,"meta"],[214,34,195,36],[214,35,195,37],[215,4,196,4],[216,4,197,4,"replace"],[216,11,197,11,"replace"],[216,12,197,12,"id"],[216,14,197,14],[216,16,197,16,"n"],[216,17,197,17],[216,19,197,19],[217,6,198,8],[217,12,198,14,"oldNode"],[217,19,198,21],[217,22,198,24],[217,26,198,28],[217,27,198,29,"getNode"],[217,34,198,36],[217,35,198,37,"id"],[217,37,198,39],[217,38,198,40],[218,6,199,8],[218,10,199,12,"oldNode"],[218,17,199,19],[218,19,199,21],[219,8,200,12],[219,14,200,18,"meta"],[219,18,200,22],[219,21,200,25],[219,25,200,29],[219,26,200,30,"nodeMetaMap"],[219,37,200,41],[219,38,200,42,"get"],[219,41,200,45],[219,42,200,46,"oldNode"],[219,49,200,53],[219,50,200,54],[220,8,201,12],[220,12,201,16,"meta"],[220,16,201,20],[220,18,202,16],[220,22,202,20],[220,23,202,21,"nodeMetaMap"],[220,34,202,32],[220,35,202,33,"set"],[220,38,202,36],[220,39,202,37,"n"],[220,40,202,38],[220,42,202,40,"meta"],[220,46,202,44],[220,47,202,45],[221,6,203,8],[222,6,204,8],[222,10,204,12],[222,11,204,13,"idNodeMap"],[222,20,204,22],[222,21,204,23,"set"],[222,24,204,26],[222,25,204,27,"id"],[222,27,204,29],[222,29,204,31,"n"],[222,30,204,32],[222,31,204,33],[223,4,205,4],[224,4,206,4,"reset"],[224,9,206,9,"reset"],[224,10,206,9],[224,12,206,12],[225,6,207,8],[225,10,207,12],[225,11,207,13,"idNodeMap"],[225,20,207,22],[225,23,207,25],[225,27,207,29,"Map"],[225,30,207,32],[225,31,207,33],[225,32,207,34],[226,6,208,8],[226,10,208,12],[226,11,208,13,"nodeMetaMap"],[226,22,208,24],[226,25,208,27],[226,29,208,31,"WeakMap"],[226,36,208,38],[226,37,208,39],[226,38,208,40],[227,4,209,4],[228,2,210,0],[229,2,211,0],[229,11,211,9,"createMirror"],[229,23,211,21,"createMirror"],[229,24,211,21],[229,26,211,24],[230,4,212,4],[230,11,212,11],[230,15,212,15,"Mirror"],[230,21,212,21],[230,22,212,22],[230,23,212,23],[231,2,213,0],[232,2,214,0],[232,11,214,9,"shouldMaskInput"],[232,26,214,24,"shouldMaskInput"],[232,27,214,25],[233,4,214,27,"maskInputOptions"],[233,20,214,43],[234,4,214,45,"tagName"],[234,11,214,52],[235,4,214,54,"type"],[236,2,214,60],[236,3,214,61],[236,5,214,63],[237,4,215,4],[237,8,215,8,"tagName"],[237,15,215,15],[237,20,215,20],[237,28,215,28],[237,30,215,30],[238,6,216,8,"tagName"],[238,13,216,15],[238,16,216,18],[238,24,216,26],[239,4,217,4],[240,4,218,4],[240,11,218,11,"Boolean"],[240,18,218,18],[240,19,218,19,"maskInputOptions"],[240,35,218,35],[240,36,218,36,"tagName"],[240,43,218,43],[240,44,218,44,"toLowerCase"],[240,55,218,55],[240,56,218,56],[240,57,218,57],[240,58,218,58],[240,62,219,9,"type"],[240,66,219,13],[240,70,219,17,"maskInputOptions"],[240,86,219,33],[240,87,219,34,"type"],[240,91,219,38],[240,92,219,40],[240,96,220,8,"type"],[240,100,220,12],[240,105,220,17],[240,115,220,27],[240,119,221,9,"tagName"],[240,126,221,16],[240,131,221,21],[240,138,221,28],[240,142,221,32],[240,143,221,33,"type"],[240,147,221,37],[240,151,221,41,"maskInputOptions"],[240,167,221,57],[240,168,221,58],[240,174,221,64],[240,175,221,66],[240,176,221,67],[241,2,222,0],[242,2,223,0],[242,11,223,9,"maskInputValue"],[242,25,223,23,"maskInputValue"],[242,26,223,24],[243,4,223,26,"isMasked"],[243,12,223,34],[244,4,223,36,"element"],[244,11,223,43],[245,4,223,45,"value"],[245,9,223,50],[246,4,223,52,"maskInputFn"],[247,2,223,65],[247,3,223,66],[247,5,223,68],[248,4,224,4],[248,8,224,8,"text"],[248,12,224,12],[248,15,224,15,"value"],[248,20,224,20],[248,24,224,24],[248,26,224,26],[249,4,225,4],[249,8,225,8],[249,9,225,9,"isMasked"],[249,17,225,17],[249,19,225,19],[250,6,226,8],[250,13,226,15,"text"],[250,17,226,19],[251,4,227,4],[252,4,228,4],[252,8,228,8,"maskInputFn"],[252,19,228,19],[252,21,228,21],[253,6,229,8,"text"],[253,10,229,12],[253,13,229,15,"maskInputFn"],[253,24,229,26],[253,25,229,27,"text"],[253,29,229,31],[253,31,229,33,"element"],[253,38,229,40],[253,39,229,41],[254,4,230,4],[255,4,231,4],[255,11,231,11],[255,14,231,14],[255,15,231,15,"repeat"],[255,21,231,21],[255,22,231,22,"text"],[255,26,231,26],[255,27,231,27,"length"],[255,33,231,33],[255,34,231,34],[256,2,232,0],[257,2,233,0],[257,11,233,9,"toLowerCase"],[257,22,233,20,"toLowerCase"],[257,23,233,21,"str"],[257,26,233,24],[257,28,233,26],[258,4,234,4],[258,11,234,11,"str"],[258,14,234,14],[258,15,234,15,"toLowerCase"],[258,26,234,26],[258,27,234,27],[258,28,234,28],[259,2,235,0],[260,2,236,0],[260,11,236,9,"toUpperCase"],[260,22,236,20,"toUpperCase"],[260,23,236,21,"str"],[260,26,236,24],[260,28,236,26],[261,4,237,4],[261,11,237,11,"str"],[261,14,237,14],[261,15,237,15,"toUpperCase"],[261,26,237,26],[261,27,237,27],[261,28,237,28],[262,2,238,0],[263,2,239,0],[263,8,239,6,"ORIGINAL_ATTRIBUTE_NAME"],[263,31,239,29],[263,34,239,32],[263,54,239,52],[264,2,240,0],[264,11,240,9,"is2DCanvasBlank"],[264,26,240,24,"is2DCanvasBlank"],[264,27,240,25,"canvas"],[264,33,240,31],[264,35,240,33],[265,4,241,4],[265,10,241,10,"ctx"],[265,13,241,13],[265,16,241,16,"canvas"],[265,22,241,22],[265,23,241,23,"getContext"],[265,33,241,33],[265,34,241,34],[265,38,241,38],[265,39,241,39],[266,4,242,4],[266,8,242,8],[266,9,242,9,"ctx"],[266,12,242,12],[266,14,243,8],[266,21,243,15],[266,25,243,19],[267,4,244,4],[267,10,244,10,"chunkSize"],[267,19,244,19],[267,22,244,22],[267,24,244,24],[268,4,245,4],[268,9,245,9],[268,13,245,13,"x"],[268,14,245,14],[268,17,245,17],[268,18,245,18],[268,20,245,20,"x"],[268,21,245,21],[268,24,245,24,"canvas"],[268,30,245,30],[268,31,245,31,"width"],[268,36,245,36],[268,38,245,38,"x"],[268,39,245,39],[268,43,245,43,"chunkSize"],[268,52,245,52],[268,54,245,54],[269,6,246,8],[269,11,246,13],[269,15,246,17,"y"],[269,16,246,18],[269,19,246,21],[269,20,246,22],[269,22,246,24,"y"],[269,23,246,25],[269,26,246,28,"canvas"],[269,32,246,34],[269,33,246,35,"height"],[269,39,246,41],[269,41,246,43,"y"],[269,42,246,44],[269,46,246,48,"chunkSize"],[269,55,246,57],[269,57,246,59],[270,8,247,12],[270,14,247,18,"getImageData"],[270,26,247,30],[270,29,247,33,"ctx"],[270,32,247,36],[270,33,247,37,"getImageData"],[270,45,247,49],[271,8,248,12],[271,14,248,18,"originalGetImageData"],[271,34,248,38],[271,37,248,41,"ORIGINAL_ATTRIBUTE_NAME"],[271,60,248,64],[271,64,248,68,"getImageData"],[271,76,248,80],[271,79,249,18,"getImageData"],[271,91,249,30],[271,92,249,31,"ORIGINAL_ATTRIBUTE_NAME"],[271,115,249,54],[271,116,249,55],[271,119,250,18,"getImageData"],[271,131,250,30],[272,8,251,12],[272,14,251,18,"pixelBuffer"],[272,25,251,29],[272,28,251,32],[272,32,251,36,"Uint32Array"],[272,43,251,47],[272,44,251,48,"originalGetImageData"],[272,64,251,68],[272,65,251,69,"call"],[272,69,251,73],[272,70,251,74,"ctx"],[272,73,251,77],[272,75,251,79,"x"],[272,76,251,80],[272,78,251,82,"y"],[272,79,251,83],[272,81,251,85,"Math"],[272,85,251,89],[272,86,251,90,"min"],[272,89,251,93],[272,90,251,94,"chunkSize"],[272,99,251,103],[272,101,251,105,"canvas"],[272,107,251,111],[272,108,251,112,"width"],[272,113,251,117],[272,116,251,120,"x"],[272,117,251,121],[272,118,251,122],[272,120,251,124,"Math"],[272,124,251,128],[272,125,251,129,"min"],[272,128,251,132],[272,129,251,133,"chunkSize"],[272,138,251,142],[272,140,251,144,"canvas"],[272,146,251,150],[272,147,251,151,"height"],[272,153,251,157],[272,156,251,160,"y"],[272,157,251,161],[272,158,251,162],[272,159,251,163],[272,160,251,164,"data"],[272,164,251,168],[272,165,251,169,"buffer"],[272,171,251,175],[272,172,251,176],[273,8,252,12],[273,12,252,16,"pixelBuffer"],[273,23,252,27],[273,24,252,28,"some"],[273,28,252,32],[273,29,252,34,"pixel"],[273,34,252,39],[273,38,252,44,"pixel"],[273,43,252,49],[273,48,252,54],[273,49,252,55],[273,50,252,56],[273,52,253,16],[273,59,253,23],[273,64,253,28],[274,6,254,8],[275,4,255,4],[276,4,256,4],[276,11,256,11],[276,15,256,15],[277,2,257,0],[278,2,258,0],[278,11,258,9,"getInputType"],[278,23,258,21,"getInputType"],[278,24,258,22,"element"],[278,31,258,29],[278,33,258,31],[279,4,259,4],[279,10,259,10,"type"],[279,14,259,14],[279,17,259,17,"element"],[279,24,259,24],[279,25,259,25,"type"],[279,29,259,29],[280,4,260,4],[280,11,260,11,"element"],[280,18,260,18],[280,19,260,19,"hasAttribute"],[280,31,260,31],[280,32,260,32],[280,53,260,53],[280,54,260,54],[280,57,261,10],[280,67,261,20],[280,70,262,10,"type"],[280,74,262,14],[280,77,264,16,"toLowerCase"],[280,88,264,27],[280,89,264,28,"type"],[280,93,264,32],[280,94,264,33],[280,97,265,14],[280,101,265,18],[281,2,266,0],[282,2,267,0],[282,11,267,9,"getInputValue"],[282,24,267,22,"getInputValue"],[282,25,267,23,"el"],[282,27,267,25],[282,29,267,27,"tagName"],[282,36,267,34],[282,38,267,36,"type"],[282,42,267,40],[282,44,267,42],[283,4,268,4],[283,8,268,8,"tagName"],[283,15,268,15],[283,20,268,20],[283,27,268,27],[283,32,268,32,"type"],[283,36,268,36],[283,41,268,41],[283,48,268,48],[283,52,268,52,"type"],[283,56,268,56],[283,61,268,61],[283,71,268,71],[283,72,268,72],[283,74,268,74],[284,6,269,8],[284,13,269,15,"el"],[284,15,269,17],[284,16,269,18,"getAttribute"],[284,28,269,30],[284,29,269,31],[284,36,269,38],[284,37,269,39],[284,41,269,43],[284,43,269,45],[285,4,270,4],[286,4,271,4],[286,11,271,11,"el"],[286,13,271,13],[286,14,271,14,"value"],[286,19,271,19],[287,2,272,0],[288,2,273,0],[288,11,273,9,"extractFileExtension"],[288,31,273,29,"extractFileExtension"],[288,32,273,30,"path"],[288,36,273,34],[288,38,273,36,"baseURL"],[288,45,273,43],[288,47,273,45],[289,4,274,4],[289,8,274,8,"url"],[289,11,274,11],[290,4,275,4],[290,8,275,8],[291,6,276,8,"url"],[291,9,276,11],[291,12,276,14],[291,16,276,18,"URL"],[291,19,276,21],[291,20,276,22,"path"],[291,24,276,26],[291,26,276,28,"_nullishCoalesce$1"],[291,44,276,46],[291,45,276,47,"baseURL"],[291,52,276,54],[291,54,276,56],[291,60,276,64,"window"],[291,66,276,70],[291,67,276,71,"location"],[291,75,276,79],[291,76,276,80,"href"],[291,80,276,85],[291,81,276,86],[291,82,276,87],[292,4,277,4],[292,5,277,5],[292,6,278,4],[292,13,278,11,"err"],[292,16,278,14],[292,18,278,16],[293,6,279,8],[293,13,279,15],[293,17,279,19],[294,4,280,4],[295,4,281,4],[295,10,281,10,"regex"],[295,15,281,15],[295,18,281,18],[295,39,281,39],[296,4,282,4],[296,10,282,10,"match"],[296,15,282,15],[296,18,282,18,"url"],[296,21,282,21],[296,22,282,22,"pathname"],[296,30,282,30],[296,31,282,31,"match"],[296,36,282,36],[296,37,282,37,"regex"],[296,42,282,42],[296,43,282,43],[297,4,283,4],[297,11,283,11,"_nullishCoalesce$1"],[297,29,283,29],[297,30,283,30,"_optionalChain$5"],[297,46,283,46],[297,47,283,47],[297,48,283,48,"match"],[297,53,283,53],[297,55,283,55],[297,71,283,71],[297,73,283,73,"_6"],[297,75,283,75],[297,79,283,79,"_6"],[297,81,283,81],[297,82,283,82],[297,83,283,83],[297,84,283,84],[297,85,283,85],[297,86,283,86],[297,88,283,88],[297,94,283,96],[297,98,283,101],[297,99,283,102],[298,2,284,0],[299,2,285,0],[299,8,285,6,"cachedImplementations$1"],[299,31,285,29],[299,34,285,32],[299,35,285,33],[299,36,285,34],[300,2,286,0],[300,11,286,9,"getImplementation$1"],[300,30,286,28,"getImplementation$1"],[300,31,286,29,"name"],[300,35,286,33],[300,37,286,35],[301,4,287,4],[301,10,287,10,"cached"],[301,16,287,16],[301,19,287,19,"cachedImplementations$1"],[301,42,287,42],[301,43,287,43,"name"],[301,47,287,47],[301,48,287,48],[302,4,288,4],[302,8,288,8,"cached"],[302,14,288,14],[302,16,288,16],[303,6,289,8],[303,13,289,15,"cached"],[303,19,289,21],[304,4,290,4],[305,4,291,4],[305,10,291,10,"document"],[305,18,291,18],[305,21,291,21,"window"],[305,27,291,27],[305,28,291,28,"document"],[305,36,291,36],[306,4,292,4],[306,8,292,8,"impl"],[306,12,292,12],[306,15,292,15,"window"],[306,21,292,21],[306,22,292,22,"name"],[306,26,292,26],[306,27,292,27],[307,4,293,4],[307,8,293,8,"document"],[307,16,293,16],[307,20,293,20],[307,27,293,27,"document"],[307,35,293,35],[307,36,293,36,"createElement"],[307,49,293,49],[307,54,293,54],[307,64,293,64],[307,66,293,66],[308,6,294,8],[308,10,294,12],[309,8,295,12],[309,14,295,18,"sandbox"],[309,21,295,25],[309,24,295,28,"document"],[309,32,295,36],[309,33,295,37,"createElement"],[309,46,295,50],[309,47,295,51],[309,55,295,59],[309,56,295,60],[310,8,296,12,"sandbox"],[310,15,296,19],[310,16,296,20,"hidden"],[310,22,296,26],[310,25,296,29],[310,29,296,33],[311,8,297,12,"document"],[311,16,297,20],[311,17,297,21,"head"],[311,21,297,25],[311,22,297,26,"appendChild"],[311,33,297,37],[311,34,297,38,"sandbox"],[311,41,297,45],[311,42,297,46],[312,8,298,12],[312,14,298,18,"contentWindow"],[312,27,298,31],[312,30,298,34,"sandbox"],[312,37,298,41],[312,38,298,42,"contentWindow"],[312,51,298,55],[313,8,299,12],[313,12,299,16,"contentWindow"],[313,25,299,29],[313,29,299,33,"contentWindow"],[313,42,299,46],[313,43,299,47,"name"],[313,47,299,51],[313,48,299,52],[313,50,299,54],[314,10,300,16,"impl"],[314,14,300,20],[314,17,301,20,"contentWindow"],[314,30,301,33],[314,31,301,34,"name"],[314,35,301,38],[314,36,301,39],[315,8,302,12],[316,8,303,12,"document"],[316,16,303,20],[316,17,303,21,"head"],[316,21,303,25],[316,22,303,26,"removeChild"],[316,33,303,37],[316,34,303,38,"sandbox"],[316,41,303,45],[316,42,303,46],[317,6,304,8],[317,7,304,9],[317,8,305,8],[317,15,305,15,"e"],[317,16,305,16],[317,18,305,18],[317,19,306,8],[318,4,307,4],[319,4,308,4],[319,11,308,12,"cachedImplementations$1"],[319,34,308,35],[319,35,308,36,"name"],[319,39,308,40],[319,40,308,41],[319,43,308,44,"impl"],[319,47,308,48],[319,48,308,49,"bind"],[319,52,308,53],[319,53,308,54,"window"],[319,59,308,60],[319,60,308,61],[320,2,309,0],[321,2,310,0],[321,11,310,9,"setTimeout$2"],[321,23,310,21,"setTimeout$2"],[321,24,310,22],[321,27,310,25,"rest"],[321,31,310,29],[321,33,310,31],[322,4,311,4],[322,11,311,11,"getImplementation$1"],[322,30,311,30],[322,31,311,31],[322,43,311,43],[322,44,311,44],[322,45,311,45],[322,48,311,48,"rest"],[322,52,311,52],[322,53,311,53],[323,2,312,0],[324,2,313,0],[324,11,313,9,"clearTimeout$2"],[324,25,313,23,"clearTimeout$2"],[324,26,313,24],[324,29,313,27,"rest"],[324,33,313,31],[324,35,313,33],[325,4,314,4],[325,11,314,11,"getImplementation$1"],[325,30,314,30],[325,31,314,31],[325,45,314,45],[325,46,314,46],[325,47,314,47],[325,50,314,50,"rest"],[325,54,314,54],[325,55,314,55],[326,2,315,0],[327,2,316,0],[327,11,316,9,"getIframeContentDocument"],[327,35,316,33,"getIframeContentDocument"],[327,36,316,34,"iframe"],[327,42,316,40],[327,44,316,42],[328,4,317,4],[328,8,317,8],[329,6,318,8],[329,13,318,15,"iframe"],[329,19,318,21],[329,20,318,22,"contentDocument"],[329,35,318,37],[330,4,319,4],[330,5,319,5],[330,6,320,4],[330,13,320,11,"e"],[330,14,320,12],[330,16,320,14],[330,17,321,4],[331,2,322,0],[332,2,324,0],[332,6,324,4,"_id"],[332,9,324,7],[332,12,324,10],[332,13,324,11],[333,2,325,0],[333,8,325,6,"tagNameRegex"],[333,20,325,18],[333,23,325,21],[333,27,325,25,"RegExp"],[333,33,325,31],[333,34,325,32],[333,48,325,46],[333,49,325,47],[334,2,326,0],[334,8,326,6,"IGNORED_NODE"],[334,20,326,18],[334,23,326,21],[334,24,326,22],[334,25,326,23],[335,2,327,0],[335,11,327,9,"genId"],[335,16,327,14,"genId"],[335,17,327,14],[335,19,327,17],[336,4,328,4],[336,11,328,11,"_id"],[336,14,328,14],[336,16,328,16],[337,2,329,0],[338,2,330,0],[338,11,330,9,"getValidTagName"],[338,26,330,24,"getValidTagName"],[338,27,330,25,"element"],[338,34,330,32],[338,36,330,34],[339,4,331,4],[339,8,331,8,"element"],[339,15,331,15],[339,27,331,27,"HTMLFormElement"],[339,42,331,42],[339,44,331,44],[340,6,332,8],[340,13,332,15],[340,19,332,21],[341,4,333,4],[342,4,334,4],[342,10,334,10,"processedTagName"],[342,26,334,26],[342,29,334,29,"toLowerCase"],[342,40,334,40],[342,41,334,41,"element"],[342,48,334,48],[342,49,334,49,"tagName"],[342,56,334,56],[342,57,334,57],[343,4,335,4],[343,8,335,8,"tagNameRegex"],[343,20,335,20],[343,21,335,21,"test"],[343,25,335,25],[343,26,335,26,"processedTagName"],[343,42,335,42],[343,43,335,43],[343,45,335,45],[344,6,336,8],[344,13,336,15],[344,18,336,20],[345,4,337,4],[346,4,338,4],[346,11,338,11,"processedTagName"],[346,27,338,27],[347,2,339,0],[348,2,340,0],[348,11,340,9,"extractOrigin"],[348,24,340,22,"extractOrigin"],[348,25,340,23,"url"],[348,28,340,26],[348,30,340,28],[349,4,341,4],[349,8,341,8,"origin"],[349,14,341,14],[349,17,341,17],[349,19,341,19],[350,4,342,4],[350,8,342,8,"url"],[350,11,342,11],[350,12,342,12,"indexOf"],[350,19,342,19],[350,20,342,20],[350,24,342,24],[350,25,342,25],[350,28,342,28],[350,29,342,29],[350,30,342,30],[350,32,342,32],[351,6,343,8,"origin"],[351,12,343,14],[351,15,343,17,"url"],[351,18,343,20],[351,19,343,21,"split"],[351,24,343,26],[351,25,343,27],[351,28,343,30],[351,29,343,31],[351,30,343,32,"slice"],[351,35,343,37],[351,36,343,38],[351,37,343,39],[351,39,343,41],[351,40,343,42],[351,41,343,43],[351,42,343,44,"join"],[351,46,343,48],[351,47,343,49],[351,50,343,52],[351,51,343,53],[352,4,344,4],[352,5,344,5],[352,11,345,9],[353,6,346,8,"origin"],[353,12,346,14],[353,15,346,17,"url"],[353,18,346,20],[353,19,346,21,"split"],[353,24,346,26],[353,25,346,27],[353,28,346,30],[353,29,346,31],[353,30,346,32],[353,31,346,33],[353,32,346,34],[354,4,347,4],[355,4,348,4,"origin"],[355,10,348,10],[355,13,348,13,"origin"],[355,19,348,19],[355,20,348,20,"split"],[355,25,348,25],[355,26,348,26],[355,29,348,29],[355,30,348,30],[355,31,348,31],[355,32,348,32],[355,33,348,33],[356,4,349,4],[356,11,349,11,"origin"],[356,17,349,17],[357,2,350,0],[358,2,351,0],[358,6,351,4,"canvasService"],[358,19,351,17],[359,2,352,0],[359,6,352,4,"canvasCtx"],[359,15,352,13],[360,2,353,0],[360,8,353,6,"URL_IN_CSS_REF"],[360,22,353,20],[360,25,353,23],[360,69,353,67],[361,2,354,0],[361,8,354,6,"URL_PROTOCOL_MATCH"],[361,26,354,24],[361,29,354,27],[361,50,354,48],[362,2,355,0],[362,8,355,6,"URL_WWW_MATCH"],[362,21,355,19],[362,24,355,22],[362,35,355,33],[363,2,356,0],[363,8,356,6,"DATA_URI"],[363,16,356,14],[363,19,356,17],[363,42,356,40],[364,2,357,0],[364,11,357,9,"absoluteToStylesheet"],[364,31,357,29,"absoluteToStylesheet"],[364,32,357,30,"cssText"],[364,39,357,37],[364,41,357,39,"href"],[364,45,357,43],[364,47,357,45],[365,4,358,4],[365,11,358,11],[365,12,358,12,"cssText"],[365,19,358,19],[365,23,358,23],[365,25,358,25],[365,27,358,27,"replace"],[365,34,358,34],[365,35,358,35,"URL_IN_CSS_REF"],[365,49,358,49],[365,51,358,51],[365,52,358,52,"origin"],[365,58,358,58],[365,60,358,60,"quote1"],[365,66,358,66],[365,68,358,68,"path1"],[365,73,358,73],[365,75,358,75,"quote2"],[365,81,358,81],[365,83,358,83,"path2"],[365,88,358,88],[365,90,358,90,"path3"],[365,95,358,95],[365,100,358,100],[366,6,359,8],[366,12,359,14,"filePath"],[366,20,359,22],[366,23,359,25,"path1"],[366,28,359,30],[366,32,359,34,"path2"],[366,37,359,39],[366,41,359,43,"path3"],[366,46,359,48],[367,6,360,8],[367,12,360,14,"maybeQuote"],[367,22,360,24],[367,25,360,27,"quote1"],[367,31,360,33],[367,35,360,37,"quote2"],[367,41,360,43],[367,45,360,47],[367,47,360,49],[368,6,361,8],[368,10,361,12],[368,11,361,13,"filePath"],[368,19,361,21],[368,21,361,23],[369,8,362,12],[369,15,362,19,"origin"],[369,21,362,25],[370,6,363,8],[371,6,364,8],[371,10,364,12,"URL_PROTOCOL_MATCH"],[371,28,364,30],[371,29,364,31,"test"],[371,33,364,35],[371,34,364,36,"filePath"],[371,42,364,44],[371,43,364,45],[371,47,364,49,"URL_WWW_MATCH"],[371,60,364,62],[371,61,364,63,"test"],[371,65,364,67],[371,66,364,68,"filePath"],[371,74,364,76],[371,75,364,77],[371,77,364,79],[372,8,365,12],[372,15,365,19],[372,22,365,26,"maybeQuote"],[372,32,365,36],[372,35,365,39,"filePath"],[372,43,365,47],[372,46,365,50,"maybeQuote"],[372,56,365,60],[372,59,365,63],[373,6,366,8],[374,6,367,8],[374,10,367,12,"DATA_URI"],[374,18,367,20],[374,19,367,21,"test"],[374,23,367,25],[374,24,367,26,"filePath"],[374,32,367,34],[374,33,367,35],[374,35,367,37],[375,8,368,12],[375,15,368,19],[375,22,368,26,"maybeQuote"],[375,32,368,36],[375,35,368,39,"filePath"],[375,43,368,47],[375,46,368,50,"maybeQuote"],[375,56,368,60],[375,59,368,63],[376,6,369,8],[377,6,370,8],[377,10,370,12,"filePath"],[377,18,370,20],[377,19,370,21],[377,20,370,22],[377,21,370,23],[377,26,370,28],[377,29,370,31],[377,31,370,33],[378,8,371,12],[378,15,371,19],[378,22,371,26,"maybeQuote"],[378,32,371,36],[378,35,371,39,"extractOrigin"],[378,48,371,52],[378,49,371,53,"href"],[378,53,371,57],[378,54,371,58],[378,57,371,61,"filePath"],[378,65,371,69],[378,68,371,72,"maybeQuote"],[378,78,371,82],[378,81,371,85],[379,6,372,8],[380,6,373,8],[380,12,373,14,"stack"],[380,17,373,19],[380,20,373,22,"href"],[380,24,373,26],[380,25,373,27,"split"],[380,30,373,32],[380,31,373,33],[380,34,373,36],[380,35,373,37],[381,6,374,8],[381,12,374,14,"parts"],[381,17,374,19],[381,20,374,22,"filePath"],[381,28,374,30],[381,29,374,31,"split"],[381,34,374,36],[381,35,374,37],[381,38,374,40],[381,39,374,41],[382,6,375,8,"stack"],[382,11,375,13],[382,12,375,14,"pop"],[382,15,375,17],[382,16,375,18],[382,17,375,19],[383,6,376,8],[383,11,376,13],[383,17,376,19,"part"],[383,21,376,23],[383,25,376,27,"parts"],[383,30,376,32],[383,32,376,34],[384,8,377,12],[384,12,377,16,"part"],[384,16,377,20],[384,21,377,25],[384,24,377,28],[384,26,377,30],[385,10,378,16],[386,8,379,12],[386,9,379,13],[386,15,380,17],[386,19,380,21,"part"],[386,23,380,25],[386,28,380,30],[386,32,380,34],[386,34,380,36],[387,10,381,16,"stack"],[387,15,381,21],[387,16,381,22,"pop"],[387,19,381,25],[387,20,381,26],[387,21,381,27],[388,8,382,12],[388,9,382,13],[388,15,383,17],[389,10,384,16,"stack"],[389,15,384,21],[389,16,384,22,"push"],[389,20,384,26],[389,21,384,27,"part"],[389,25,384,31],[389,26,384,32],[390,8,385,12],[391,6,386,8],[392,6,387,8],[392,13,387,15],[392,20,387,22,"maybeQuote"],[392,30,387,32],[392,33,387,35,"stack"],[392,38,387,40],[392,39,387,41,"join"],[392,43,387,45],[392,44,387,46],[392,47,387,49],[392,48,387,50],[392,51,387,53,"maybeQuote"],[392,61,387,63],[392,64,387,66],[393,4,388,4],[393,5,388,5],[393,6,388,6],[394,2,389,0],[395,2,390,0],[395,8,390,6,"SRCSET_NOT_SPACES"],[395,25,390,23],[395,28,390,26],[395,48,390,46],[396,2,391,0],[396,8,391,6,"SRCSET_COMMAS_OR_SPACES"],[396,31,391,29],[396,34,391,32],[396,54,391,52],[397,2,392,0],[397,11,392,9,"getAbsoluteSrcsetString"],[397,34,392,32,"getAbsoluteSrcsetString"],[397,35,392,33,"doc"],[397,38,392,36],[397,40,392,38,"attributeValue"],[397,54,392,52],[397,56,392,54],[398,4,393,4],[398,8,393,8,"attributeValue"],[398,22,393,22],[398,23,393,23,"trim"],[398,27,393,27],[398,28,393,28],[398,29,393,29],[398,34,393,34],[398,36,393,36],[398,38,393,38],[399,6,394,8],[399,13,394,15,"attributeValue"],[399,27,394,29],[400,4,395,4],[401,4,396,4],[401,8,396,8,"pos"],[401,11,396,11],[401,14,396,14],[401,15,396,15],[402,4,397,4],[402,13,397,13,"collectCharacters"],[402,30,397,30,"collectCharacters"],[402,31,397,31,"regEx"],[402,36,397,36],[402,38,397,38],[403,6,398,8],[403,10,398,12,"chars"],[403,15,398,17],[404,6,399,8],[404,12,399,14,"match"],[404,17,399,19],[404,20,399,22,"regEx"],[404,25,399,27],[404,26,399,28,"exec"],[404,30,399,32],[404,31,399,33,"attributeValue"],[404,45,399,47],[404,46,399,48,"substring"],[404,55,399,57],[404,56,399,58,"pos"],[404,59,399,61],[404,60,399,62],[404,61,399,63],[405,6,400,8],[405,10,400,12,"match"],[405,15,400,17],[405,17,400,19],[406,8,401,12,"chars"],[406,13,401,17],[406,16,401,20,"match"],[406,21,401,25],[406,22,401,26],[406,23,401,27],[406,24,401,28],[407,8,402,12,"pos"],[407,11,402,15],[407,15,402,19,"chars"],[407,20,402,24],[407,21,402,25,"length"],[407,27,402,31],[408,8,403,12],[408,15,403,19,"chars"],[408,20,403,24],[409,6,404,8],[410,6,405,8],[410,13,405,15],[410,15,405,17],[411,4,406,4],[412,4,407,4],[412,10,407,10,"output"],[412,16,407,16],[412,19,407,19],[412,21,407,21],[413,4,408,4],[413,11,408,11],[413,15,408,15],[413,17,408,17],[414,6,409,8,"collectCharacters"],[414,23,409,25],[414,24,409,26,"SRCSET_COMMAS_OR_SPACES"],[414,47,409,49],[414,48,409,50],[415,6,410,8],[415,10,410,12,"pos"],[415,13,410,15],[415,17,410,19,"attributeValue"],[415,31,410,33],[415,32,410,34,"length"],[415,38,410,40],[415,40,410,42],[416,8,411,12],[417,6,412,8],[418,6,413,8],[418,10,413,12,"url"],[418,13,413,15],[418,16,413,18,"collectCharacters"],[418,33,413,35],[418,34,413,36,"SRCSET_NOT_SPACES"],[418,51,413,53],[418,52,413,54],[419,6,414,8],[419,10,414,12,"url"],[419,13,414,15],[419,14,414,16,"slice"],[419,19,414,21],[419,20,414,22],[419,21,414,23],[419,22,414,24],[419,23,414,25],[419,28,414,30],[419,31,414,33],[419,33,414,35],[420,8,415,12,"url"],[420,11,415,15],[420,14,415,18,"absoluteToDoc"],[420,27,415,31],[420,28,415,32,"doc"],[420,31,415,35],[420,33,415,37,"url"],[420,36,415,40],[420,37,415,41,"substring"],[420,46,415,50],[420,47,415,51],[420,48,415,52],[420,50,415,54,"url"],[420,53,415,57],[420,54,415,58,"length"],[420,60,415,64],[420,63,415,67],[420,64,415,68],[420,65,415,69],[420,66,415,70],[421,8,416,12,"output"],[421,14,416,18],[421,15,416,19,"push"],[421,19,416,23],[421,20,416,24,"url"],[421,23,416,27],[421,24,416,28],[422,6,417,8],[422,7,417,9],[422,13,418,13],[423,8,419,12],[423,12,419,16,"descriptorsStr"],[423,26,419,30],[423,29,419,33],[423,31,419,35],[424,8,420,12,"url"],[424,11,420,15],[424,14,420,18,"absoluteToDoc"],[424,27,420,31],[424,28,420,32,"doc"],[424,31,420,35],[424,33,420,37,"url"],[424,36,420,40],[424,37,420,41],[425,8,421,12],[425,12,421,16,"inParens"],[425,20,421,24],[425,23,421,27],[425,28,421,32],[426,8,422,12],[426,15,422,19],[426,19,422,23],[426,21,422,25],[427,10,423,16],[427,16,423,22,"c"],[427,17,423,23],[427,20,423,26,"attributeValue"],[427,34,423,40],[427,35,423,41,"charAt"],[427,41,423,47],[427,42,423,48,"pos"],[427,45,423,51],[427,46,423,52],[428,10,424,16],[428,14,424,20,"c"],[428,15,424,21],[428,20,424,26],[428,22,424,28],[428,24,424,30],[429,12,425,20,"output"],[429,18,425,26],[429,19,425,27,"push"],[429,23,425,31],[429,24,425,32],[429,25,425,33,"url"],[429,28,425,36],[429,31,425,39,"descriptorsStr"],[429,45,425,53],[429,47,425,55,"trim"],[429,51,425,59],[429,52,425,60],[429,53,425,61],[429,54,425,62],[430,12,426,20],[431,10,427,16],[431,11,427,17],[431,17,428,21],[431,21,428,25],[431,22,428,26,"inParens"],[431,30,428,34],[431,32,428,36],[432,12,429,20],[432,16,429,24,"c"],[432,17,429,25],[432,22,429,30],[432,25,429,33],[432,27,429,35],[433,14,430,24,"pos"],[433,17,430,27],[433,21,430,31],[433,22,430,32],[434,14,431,24,"output"],[434,20,431,30],[434,21,431,31,"push"],[434,25,431,35],[434,26,431,36],[434,27,431,37,"url"],[434,30,431,40],[434,33,431,43,"descriptorsStr"],[434,47,431,57],[434,49,431,59,"trim"],[434,53,431,63],[434,54,431,64],[434,55,431,65],[434,56,431,66],[435,14,432,24],[436,12,433,20],[436,13,433,21],[436,19,434,25],[436,23,434,29,"c"],[436,24,434,30],[436,29,434,35],[436,32,434,38],[436,34,434,40],[437,14,435,24,"inParens"],[437,22,435,32],[437,25,435,35],[437,29,435,39],[438,12,436,20],[439,10,437,16],[439,11,437,17],[439,17,438,21],[440,12,439,20],[440,16,439,24,"c"],[440,17,439,25],[440,22,439,30],[440,25,439,33],[440,27,439,35],[441,14,440,24,"inParens"],[441,22,440,32],[441,25,440,35],[441,30,440,40],[442,12,441,20],[443,10,442,16],[444,10,443,16,"descriptorsStr"],[444,24,443,30],[444,28,443,34,"c"],[444,29,443,35],[445,10,444,16,"pos"],[445,13,444,19],[445,17,444,23],[445,18,444,24],[446,8,445,12],[447,6,446,8],[448,4,447,4],[449,4,448,4],[449,11,448,11,"output"],[449,17,448,17],[449,18,448,18,"join"],[449,22,448,22],[449,23,448,23],[449,27,448,27],[449,28,448,28],[450,2,449,0],[451,2,450,0],[451,8,450,6,"cachedDocument"],[451,22,450,20],[451,25,450,23],[451,29,450,27,"WeakMap"],[451,36,450,34],[451,37,450,35],[451,38,450,36],[452,2,451,0],[452,11,451,9,"absoluteToDoc"],[452,24,451,22,"absoluteToDoc"],[452,25,451,23,"doc"],[452,28,451,26],[452,30,451,28,"attributeValue"],[452,44,451,42],[452,46,451,44],[453,4,452,4],[453,8,452,8],[453,9,452,9,"attributeValue"],[453,23,452,23],[453,27,452,27,"attributeValue"],[453,41,452,41],[453,42,452,42,"trim"],[453,46,452,46],[453,47,452,47],[453,48,452,48],[453,53,452,53],[453,55,452,55],[453,57,452,57],[454,6,453,8],[454,13,453,15,"attributeValue"],[454,27,453,29],[455,4,454,4],[456,4,455,4],[456,11,455,11,"getHref"],[456,18,455,18],[456,19,455,19,"doc"],[456,22,455,22],[456,24,455,24,"attributeValue"],[456,38,455,38],[456,39,455,39],[457,2,456,0],[458,2,457,0],[458,11,457,9,"isSVGElement"],[458,23,457,21,"isSVGElement"],[458,24,457,22,"el"],[458,26,457,24],[458,28,457,26],[459,4,458,4],[459,11,458,11,"Boolean"],[459,18,458,18],[459,19,458,19,"el"],[459,21,458,21],[459,22,458,22,"tagName"],[459,29,458,29],[459,34,458,34],[459,39,458,39],[459,43,458,43,"el"],[459,45,458,45],[459,46,458,46,"ownerSVGElement"],[459,61,458,61],[459,62,458,62],[460,2,459,0],[461,2,460,0],[461,11,460,9,"getHref"],[461,18,460,16,"getHref"],[461,19,460,17,"doc"],[461,22,460,20],[461,24,460,22,"customHref"],[461,34,460,32],[461,36,460,34],[462,4,461,4],[462,8,461,8,"a"],[462,9,461,9],[462,12,461,12,"cachedDocument"],[462,26,461,26],[462,27,461,27,"get"],[462,30,461,30],[462,31,461,31,"doc"],[462,34,461,34],[462,35,461,35],[463,4,462,4],[463,8,462,8],[463,9,462,9,"a"],[463,10,462,10],[463,12,462,12],[464,6,463,8,"a"],[464,7,463,9],[464,10,463,12,"doc"],[464,13,463,15],[464,14,463,16,"createElement"],[464,27,463,29],[464,28,463,30],[464,31,463,33],[464,32,463,34],[465,6,464,8,"cachedDocument"],[465,20,464,22],[465,21,464,23,"set"],[465,24,464,26],[465,25,464,27,"doc"],[465,28,464,30],[465,30,464,32,"a"],[465,31,464,33],[465,32,464,34],[466,4,465,4],[467,4,466,4],[467,8,466,8],[467,9,466,9,"customHref"],[467,19,466,19],[467,21,466,21],[468,6,467,8,"customHref"],[468,16,467,18],[468,19,467,21],[468,21,467,23],[469,4,468,4],[469,5,468,5],[469,11,469,9],[469,15,469,13,"customHref"],[469,25,469,23],[469,26,469,24,"startsWith"],[469,36,469,34],[469,37,469,35],[469,44,469,42],[469,45,469,43],[469,49,469,47,"customHref"],[469,59,469,57],[469,60,469,58,"startsWith"],[469,70,469,68],[469,71,469,69],[469,78,469,76],[469,79,469,77],[469,81,469,79],[470,6,470,8],[470,13,470,15,"customHref"],[470,23,470,25],[471,4,471,4],[472,4,472,4,"a"],[472,5,472,5],[472,6,472,6,"setAttribute"],[472,18,472,18],[472,19,472,19],[472,25,472,25],[472,27,472,27,"customHref"],[472,37,472,37],[472,38,472,38],[473,4,473,4],[473,11,473,11,"a"],[473,12,473,12],[473,13,473,13,"href"],[473,17,473,17],[474,2,474,0],[475,2,475,0],[475,11,475,9,"transformAttribute"],[475,29,475,27,"transformAttribute"],[475,30,475,28,"doc"],[475,33,475,31],[475,35,475,33,"tagName"],[475,42,475,40],[475,44,475,42,"name"],[475,48,475,46],[475,50,475,48,"value"],[475,55,475,53],[475,57,475,55,"element"],[475,64,475,62],[475,66,475,64,"maskAttributeFn"],[475,81,475,79],[475,83,475,81],[476,4,476,4],[476,8,476,8],[476,9,476,9,"value"],[476,14,476,14],[476,16,476,16],[477,6,477,8],[477,13,477,15,"value"],[477,18,477,20],[478,4,478,4],[479,4,479,4],[479,8,479,8,"name"],[479,12,479,12],[479,17,479,17],[479,22,479,22],[479,26,480,9,"name"],[479,30,480,13],[479,35,480,18],[479,41,480,24],[479,45,480,28],[479,47,480,30,"tagName"],[479,54,480,37],[479,59,480,42],[479,64,480,47],[479,68,480,51,"value"],[479,73,480,56],[479,74,480,57],[479,75,480,58],[479,76,480,59],[479,81,480,64],[479,84,480,67],[479,85,480,69],[479,87,480,71],[480,6,481,8],[480,13,481,15,"absoluteToDoc"],[480,26,481,28],[480,27,481,29,"doc"],[480,30,481,32],[480,32,481,34,"value"],[480,37,481,39],[480,38,481,40],[481,4,482,4],[481,5,482,5],[481,11,483,9],[481,15,483,13,"name"],[481,19,483,17],[481,24,483,22],[481,36,483,34],[481,40,483,38,"value"],[481,45,483,43],[481,46,483,44],[481,47,483,45],[481,48,483,46],[481,53,483,51],[481,56,483,54],[481,58,483,56],[482,6,484,8],[482,13,484,15,"absoluteToDoc"],[482,26,484,28],[482,27,484,29,"doc"],[482,30,484,32],[482,32,484,34,"value"],[482,37,484,39],[482,38,484,40],[483,4,485,4],[483,5,485,5],[483,11,486,9],[483,15,486,13,"name"],[483,19,486,17],[483,24,486,22],[483,36,486,34],[483,41,487,9,"tagName"],[483,48,487,16],[483,53,487,21],[483,60,487,28],[483,64,487,32,"tagName"],[483,71,487,39],[483,76,487,44],[483,80,487,48],[483,84,487,52,"tagName"],[483,91,487,59],[483,96,487,64],[483,100,487,68],[483,101,487,69],[483,103,487,71],[484,6,488,8],[484,13,488,15,"absoluteToDoc"],[484,26,488,28],[484,27,488,29,"doc"],[484,30,488,32],[484,32,488,34,"value"],[484,37,488,39],[484,38,488,40],[485,4,489,4],[485,5,489,5],[485,11,490,9],[485,15,490,13,"name"],[485,19,490,17],[485,24,490,22],[485,32,490,30],[485,34,490,32],[486,6,491,8],[486,13,491,15,"getAbsoluteSrcsetString"],[486,36,491,38],[486,37,491,39,"doc"],[486,40,491,42],[486,42,491,44,"value"],[486,47,491,49],[486,48,491,50],[487,4,492,4],[487,5,492,5],[487,11,493,9],[487,15,493,13,"name"],[487,19,493,17],[487,24,493,22],[487,31,493,29],[487,33,493,31],[488,6,494,8],[488,13,494,15,"absoluteToStylesheet"],[488,33,494,35],[488,34,494,36,"value"],[488,39,494,41],[488,41,494,43,"getHref"],[488,48,494,50],[488,49,494,51,"doc"],[488,52,494,54],[488,53,494,55],[488,54,494,56],[489,4,495,4],[489,5,495,5],[489,11,496,9],[489,15,496,13,"tagName"],[489,22,496,20],[489,27,496,25],[489,35,496,33],[489,39,496,37,"name"],[489,43,496,41],[489,48,496,46],[489,54,496,52],[489,56,496,54],[490,6,497,8],[490,13,497,15,"absoluteToDoc"],[490,26,497,28],[490,27,497,29,"doc"],[490,30,497,32],[490,32,497,34,"value"],[490,37,497,39],[490,38,497,40],[491,4,498,4],[492,4,499,4],[492,8,499,8],[492,15,499,15,"maskAttributeFn"],[492,30,499,30],[492,35,499,35],[492,45,499,45],[492,47,499,47],[493,6,500,8],[493,13,500,15,"maskAttributeFn"],[493,28,500,30],[493,29,500,31,"name"],[493,33,500,35],[493,35,500,37,"value"],[493,40,500,42],[493,42,500,44,"element"],[493,49,500,51],[493,50,500,52],[494,4,501,4],[495,4,502,4],[495,11,502,11,"value"],[495,16,502,16],[496,2,503,0],[497,2,504,0],[497,11,504,9,"ignoreAttribute"],[497,26,504,24,"ignoreAttribute"],[497,27,504,25,"tagName"],[497,34,504,32],[497,36,504,34,"name"],[497,40,504,38],[497,42,504,40,"_value"],[497,48,504,46],[497,50,504,48],[498,4,505,4],[498,11,505,11],[498,12,505,12,"tagName"],[498,19,505,19],[498,24,505,24],[498,31,505,31],[498,35,505,35,"tagName"],[498,42,505,42],[498,47,505,47],[498,54,505,54],[498,59,505,59,"name"],[498,63,505,63],[498,68,505,68],[498,78,505,78],[499,2,506,0],[500,2,507,0],[500,11,507,9,"_isBlockedElement"],[500,28,507,26,"_isBlockedElement"],[500,29,507,27,"element"],[500,36,507,34],[500,38,507,36,"blockClass"],[500,48,507,46],[500,50,507,48,"blockSelector"],[500,63,507,61],[500,65,507,63,"unblockSelector"],[500,80,507,78],[500,82,507,80],[501,4,508,4],[501,8,508,8],[502,6,509,8],[502,10,509,12,"unblockSelector"],[502,25,509,27],[502,29,509,31,"element"],[502,36,509,38],[502,37,509,39,"matches"],[502,44,509,46],[502,45,509,47,"unblockSelector"],[502,60,509,62],[502,61,509,63],[502,63,509,65],[503,8,510,12],[503,15,510,19],[503,20,510,24],[504,6,511,8],[505,6,512,8],[505,10,512,12],[505,17,512,19,"blockClass"],[505,27,512,29],[505,32,512,34],[505,40,512,42],[505,42,512,44],[506,8,513,12],[506,12,513,16,"element"],[506,19,513,23],[506,20,513,24,"classList"],[506,29,513,33],[506,30,513,34,"contains"],[506,38,513,42],[506,39,513,43,"blockClass"],[506,49,513,53],[506,50,513,54],[506,52,513,56],[507,10,514,16],[507,17,514,23],[507,21,514,27],[508,8,515,12],[509,6,516,8],[509,7,516,9],[509,13,517,13],[510,8,518,12],[510,13,518,17],[510,17,518,21,"eIndex"],[510,23,518,27],[510,26,518,30,"element"],[510,33,518,37],[510,34,518,38,"classList"],[510,43,518,47],[510,44,518,48,"length"],[510,50,518,54],[510,52,518,56,"eIndex"],[510,58,518,62],[510,60,518,64],[510,63,518,67],[511,10,519,16],[511,16,519,22,"className"],[511,25,519,31],[511,28,519,34,"element"],[511,35,519,41],[511,36,519,42,"classList"],[511,45,519,51],[511,46,519,52,"eIndex"],[511,52,519,58],[511,53,519,59],[512,10,520,16],[512,14,520,20,"blockClass"],[512,24,520,30],[512,25,520,31,"test"],[512,29,520,35],[512,30,520,36,"className"],[512,39,520,45],[512,40,520,46],[512,42,520,48],[513,12,521,20],[513,19,521,27],[513,23,521,31],[514,10,522,16],[515,8,523,12],[516,6,524,8],[517,6,525,8],[517,10,525,12,"blockSelector"],[517,23,525,25],[517,25,525,27],[518,8,526,12],[518,15,526,19,"element"],[518,22,526,26],[518,23,526,27,"matches"],[518,30,526,34],[518,31,526,35,"blockSelector"],[518,44,526,48],[518,45,526,49],[519,6,527,8],[520,4,528,4],[520,5,528,5],[520,6,529,4],[520,13,529,11,"e"],[520,14,529,12],[520,16,529,14],[520,17,530,4],[521,4,531,4],[521,11,531,11],[521,16,531,16],[522,2,532,0],[523,2,533,0],[523,11,533,9,"elementClassMatchesRegex"],[523,35,533,33,"elementClassMatchesRegex"],[523,36,533,34,"el"],[523,38,533,36],[523,40,533,38,"regex"],[523,45,533,43],[523,47,533,45],[524,4,534,4],[524,9,534,9],[524,13,534,13,"eIndex"],[524,19,534,19],[524,22,534,22,"el"],[524,24,534,24],[524,25,534,25,"classList"],[524,34,534,34],[524,35,534,35,"length"],[524,41,534,41],[524,43,534,43,"eIndex"],[524,49,534,49],[524,51,534,51],[524,54,534,54],[525,6,535,8],[525,12,535,14,"className"],[525,21,535,23],[525,24,535,26,"el"],[525,26,535,28],[525,27,535,29,"classList"],[525,36,535,38],[525,37,535,39,"eIndex"],[525,43,535,45],[525,44,535,46],[526,6,536,8],[526,10,536,12,"regex"],[526,15,536,17],[526,16,536,18,"test"],[526,20,536,22],[526,21,536,23,"className"],[526,30,536,32],[526,31,536,33],[526,33,536,35],[527,8,537,12],[527,15,537,19],[527,19,537,23],[528,6,538,8],[529,4,539,4],[530,4,540,4],[530,11,540,11],[530,16,540,16],[531,2,541,0],[532,2,542,0],[532,11,542,9,"distanceToMatch"],[532,26,542,24,"distanceToMatch"],[532,27,542,25,"node"],[532,31,542,29],[532,33,542,31,"matchPredicate"],[532,47,542,45],[532,49,542,47,"limit"],[532,54,542,52],[532,57,542,55,"Infinity"],[532,65,542,63],[532,67,542,65,"distance"],[532,75,542,73],[532,78,542,76],[532,79,542,77],[532,81,542,79],[533,4,543,4],[533,8,543,8],[533,9,543,9,"node"],[533,13,543,13],[533,15,544,8],[533,22,544,15],[533,23,544,16],[533,24,544,17],[534,4,545,4],[534,8,545,8,"node"],[534,12,545,12],[534,13,545,13,"nodeType"],[534,21,545,21],[534,26,545,26,"node"],[534,30,545,30],[534,31,545,31,"ELEMENT_NODE"],[534,43,545,43],[534,45,546,8],[534,52,546,15],[534,53,546,16],[534,54,546,17],[535,4,547,4],[535,8,547,8,"distance"],[535,16,547,16],[535,19,547,19,"limit"],[535,24,547,24],[535,26,548,8],[535,33,548,15],[535,34,548,16],[535,35,548,17],[536,4,549,4],[536,8,549,8,"matchPredicate"],[536,22,549,22],[536,23,549,23,"node"],[536,27,549,27],[536,28,549,28],[536,30,550,8],[536,37,550,15,"distance"],[536,45,550,23],[537,4,551,4],[537,11,551,11,"distanceToMatch"],[537,26,551,26],[537,27,551,27,"node"],[537,31,551,31],[537,32,551,32,"parentNode"],[537,42,551,42],[537,44,551,44,"matchPredicate"],[537,58,551,58],[537,60,551,60,"limit"],[537,65,551,65],[537,67,551,67,"distance"],[537,75,551,75],[537,78,551,78],[537,79,551,79],[537,80,551,80],[538,2,552,0],[539,2,553,0],[539,11,553,9,"createMatchPredicate"],[539,31,553,29,"createMatchPredicate"],[539,32,553,30,"className"],[539,41,553,39],[539,43,553,41,"selector"],[539,51,553,49],[539,53,553,51],[540,4,554,4],[540,11,554,12,"node"],[540,15,554,16],[540,19,554,21],[541,6,555,8],[541,12,555,14,"el"],[541,14,555,16],[541,17,555,19,"node"],[541,21,555,23],[542,6,556,8],[542,10,556,12,"el"],[542,12,556,14],[542,17,556,19],[542,21,556,23],[542,23,557,12],[542,30,557,19],[542,35,557,24],[543,6,558,8],[543,10,558,12],[544,8,559,12],[544,12,559,16,"className"],[544,21,559,25],[544,23,559,27],[545,10,560,16],[545,14,560,20],[545,21,560,27,"className"],[545,30,560,36],[545,35,560,41],[545,43,560,49],[545,45,560,51],[546,12,561,20],[546,16,561,24,"el"],[546,18,561,26],[546,19,561,27,"matches"],[546,26,561,34],[546,27,561,35],[546,31,561,39,"className"],[546,40,561,48],[546,42,561,50],[546,43,561,51],[546,45,562,24],[546,52,562,31],[546,56,562,35],[547,10,563,16],[547,11,563,17],[547,17,564,21],[547,21,564,25,"elementClassMatchesRegex"],[547,45,564,49],[547,46,564,50,"el"],[547,48,564,52],[547,50,564,54,"className"],[547,59,564,63],[547,60,564,64],[547,62,564,66],[548,12,565,20],[548,19,565,27],[548,23,565,31],[549,10,566,16],[550,8,567,12],[551,8,568,12],[551,12,568,16,"selector"],[551,20,568,24],[551,24,568,28,"el"],[551,26,568,30],[551,27,568,31,"matches"],[551,34,568,38],[551,35,568,39,"selector"],[551,43,568,47],[551,44,568,48],[551,46,569,16],[551,53,569,23],[551,57,569,27],[552,8,570,12],[552,15,570,19],[552,20,570,24],[553,6,571,8],[553,7,571,9],[553,8,572,8],[553,15,572,15,"e2"],[553,17,572,17],[553,19,572,19],[554,8,573,12],[554,15,573,19],[554,20,573,24],[555,6,574,8],[556,4,575,4],[556,5,575,5],[557,2,576,0],[558,2,577,0],[558,11,577,9,"needMaskingText"],[558,26,577,24,"needMaskingText"],[558,27,577,25,"node"],[558,31,577,29],[558,33,577,31,"maskTextClass"],[558,46,577,44],[558,48,577,46,"maskTextSelector"],[558,64,577,62],[558,66,577,64,"unmaskTextClass"],[558,81,577,79],[558,83,577,81,"unmaskTextSelector"],[558,101,577,99],[558,103,577,101,"maskAllText"],[558,114,577,112],[558,116,577,114],[559,4,578,4],[559,8,578,8],[560,6,579,8],[560,12,579,14,"el"],[560,14,579,16],[560,17,579,19,"node"],[560,21,579,23],[560,22,579,24,"nodeType"],[560,30,579,32],[560,35,579,37,"node"],[560,39,579,41],[560,40,579,42,"ELEMENT_NODE"],[560,52,579,54],[560,55,580,14,"node"],[560,59,580,18],[560,62,581,14,"node"],[560,66,581,18],[560,67,581,19,"parentElement"],[560,80,581,32],[561,6,582,8],[561,10,582,12,"el"],[561,12,582,14],[561,17,582,19],[561,21,582,23],[561,23,583,12],[561,30,583,19],[561,35,583,24],[562,6,584,8],[562,10,584,12,"el"],[562,12,584,14],[562,13,584,15,"tagName"],[562,20,584,22],[562,25,584,27],[562,32,584,34],[562,34,584,36],[563,8,585,12],[563,14,585,18,"autocomplete"],[563,26,585,30],[563,29,585,33,"el"],[563,31,585,35],[563,32,585,36,"getAttribute"],[563,44,585,48],[563,45,585,49],[563,59,585,63],[563,60,585,64],[564,8,586,12],[564,14,586,18,"disallowedAutocompleteValues"],[564,42,586,46],[564,45,586,49],[564,46,587,16],[564,64,587,34],[564,66,588,16],[564,80,588,30],[564,82,589,16],[564,93,589,27],[564,95,590,16],[564,103,590,24],[564,105,591,16],[564,119,591,30],[564,121,592,16],[564,134,592,29],[564,136,593,16],[564,144,593,24],[564,145,594,13],[565,8,595,12],[565,12,595,16,"disallowedAutocompleteValues"],[565,40,595,44],[565,41,595,45,"includes"],[565,49,595,53],[565,50,595,54,"autocomplete"],[565,62,595,66],[565,63,595,67],[565,65,595,69],[566,10,596,16],[566,17,596,23],[566,21,596,27],[567,8,597,12],[568,6,598,8],[569,6,599,8],[569,10,599,12,"maskDistance"],[569,22,599,24],[569,25,599,27],[569,26,599,28],[569,27,599,29],[570,6,600,8],[570,10,600,12,"unmaskDistance"],[570,24,600,26],[570,27,600,29],[570,28,600,30],[570,29,600,31],[571,6,601,8],[571,10,601,12,"maskAllText"],[571,21,601,23],[571,23,601,25],[572,8,602,12,"unmaskDistance"],[572,22,602,26],[572,25,602,29,"distanceToMatch"],[572,40,602,44],[572,41,602,45,"el"],[572,43,602,47],[572,45,602,49,"createMatchPredicate"],[572,65,602,69],[572,66,602,70,"unmaskTextClass"],[572,81,602,85],[572,83,602,87,"unmaskTextSelector"],[572,101,602,105],[572,102,602,106],[572,103,602,107],[573,8,603,12],[573,12,603,16,"unmaskDistance"],[573,26,603,30],[573,29,603,33],[573,30,603,34],[573,32,603,36],[574,10,604,16],[574,17,604,23],[574,21,604,27],[575,8,605,12],[576,8,606,12,"maskDistance"],[576,20,606,24],[576,23,606,27,"distanceToMatch"],[576,38,606,42],[576,39,606,43,"el"],[576,41,606,45],[576,43,606,47,"createMatchPredicate"],[576,63,606,67],[576,64,606,68,"maskTextClass"],[576,77,606,81],[576,79,606,83,"maskTextSelector"],[576,95,606,99],[576,96,606,100],[576,98,606,102,"unmaskDistance"],[576,112,606,116],[576,116,606,120],[576,117,606,121],[576,120,606,124,"unmaskDistance"],[576,134,606,138],[576,137,606,141,"Infinity"],[576,145,606,149],[576,146,606,150],[577,6,607,8],[577,7,607,9],[577,13,608,13],[578,8,609,12,"maskDistance"],[578,20,609,24],[578,23,609,27,"distanceToMatch"],[578,38,609,42],[578,39,609,43,"el"],[578,41,609,45],[578,43,609,47,"createMatchPredicate"],[578,63,609,67],[578,64,609,68,"maskTextClass"],[578,77,609,81],[578,79,609,83,"maskTextSelector"],[578,95,609,99],[578,96,609,100],[578,97,609,101],[579,8,610,12],[579,12,610,16,"maskDistance"],[579,24,610,28],[579,27,610,31],[579,28,610,32],[579,30,610,34],[580,10,611,16],[580,17,611,23],[580,22,611,28],[581,8,612,12],[582,8,613,12,"unmaskDistance"],[582,22,613,26],[582,25,613,29,"distanceToMatch"],[582,40,613,44],[582,41,613,45,"el"],[582,43,613,47],[582,45,613,49,"createMatchPredicate"],[582,65,613,69],[582,66,613,70,"unmaskTextClass"],[582,81,613,85],[582,83,613,87,"unmaskTextSelector"],[582,101,613,105],[582,102,613,106],[582,104,613,108,"maskDistance"],[582,116,613,120],[582,120,613,124],[582,121,613,125],[582,124,613,128,"maskDistance"],[582,136,613,140],[582,139,613,143,"Infinity"],[582,147,613,151],[582,148,613,152],[583,6,614,8],[584,6,615,8],[584,13,615,15,"maskDistance"],[584,25,615,27],[584,29,615,31],[584,30,615,32],[584,33,616,14,"unmaskDistance"],[584,47,616,28],[584,51,616,32],[584,52,616,33],[584,55,617,18,"maskDistance"],[584,67,617,30],[584,71,617,34,"unmaskDistance"],[584,85,617,48],[584,88,618,18],[584,92,618,22],[584,95,619,14,"unmaskDistance"],[584,109,619,28],[584,113,619,32],[584,114,619,33],[584,117,620,18],[584,122,620,23],[584,125,621,18],[584,126,621,19],[584,127,621,20,"maskAllText"],[584,138,621,31],[585,4,622,4],[585,5,622,5],[585,6,623,4],[585,13,623,11,"e"],[585,14,623,12],[585,16,623,14],[585,17,624,4],[586,4,625,4],[586,11,625,11],[586,12,625,12],[586,13,625,13,"maskAllText"],[586,24,625,24],[587,2,626,0],[588,2,627,0],[588,11,627,9,"onceIframeLoaded"],[588,27,627,25,"onceIframeLoaded"],[588,28,627,26,"iframeEl"],[588,36,627,34],[588,38,627,36,"listener"],[588,46,627,44],[588,48,627,46,"iframeLoadTimeout"],[588,65,627,63],[588,67,627,65],[589,4,628,4],[589,10,628,10,"win"],[589,13,628,13],[589,16,628,16,"iframeEl"],[589,24,628,24],[589,25,628,25,"contentWindow"],[589,38,628,38],[590,4,629,4],[590,8,629,8],[590,9,629,9,"win"],[590,12,629,12],[590,14,629,14],[591,6,630,8],[592,4,631,4],[593,4,632,4],[593,8,632,8,"fired"],[593,13,632,13],[593,16,632,16],[593,21,632,21],[594,4,633,4],[594,8,633,8,"readyState"],[594,18,633,18],[595,4,634,4],[595,8,634,8],[596,6,635,8,"readyState"],[596,16,635,18],[596,19,635,21,"win"],[596,22,635,24],[596,23,635,25,"document"],[596,31,635,33],[596,32,635,34,"readyState"],[596,42,635,44],[597,4,636,4],[597,5,636,5],[597,6,637,4],[597,13,637,11,"error"],[597,18,637,16],[597,20,637,18],[598,6,638,8],[599,4,639,4],[600,4,640,4],[600,8,640,8,"readyState"],[600,18,640,18],[600,23,640,23],[600,33,640,33],[600,35,640,35],[601,6,641,8],[601,12,641,14,"timer"],[601,17,641,19],[601,20,641,22,"setTimeout$2"],[601,32,641,34],[601,33,641,35],[601,39,641,41],[602,8,642,12],[602,12,642,16],[602,13,642,17,"fired"],[602,18,642,22],[602,20,642,24],[603,10,643,16,"listener"],[603,18,643,24],[603,19,643,25],[603,20,643,26],[604,10,644,16,"fired"],[604,15,644,21],[604,18,644,24],[604,22,644,28],[605,8,645,12],[606,6,646,8],[606,7,646,9],[606,9,646,11,"iframeLoadTimeout"],[606,26,646,28],[606,27,646,29],[607,6,647,8,"iframeEl"],[607,14,647,16],[607,15,647,17,"addEventListener"],[607,31,647,33],[607,32,647,34],[607,38,647,40],[607,40,647,42],[607,46,647,48],[608,8,648,12,"clearTimeout$2"],[608,22,648,26],[608,23,648,27,"timer"],[608,28,648,32],[608,29,648,33],[609,8,649,12,"fired"],[609,13,649,17],[609,16,649,20],[609,20,649,24],[610,8,650,12,"listener"],[610,16,650,20],[610,17,650,21],[610,18,650,22],[611,6,651,8],[611,7,651,9],[611,8,651,10],[612,6,652,8],[613,4,653,4],[614,4,654,4],[614,10,654,10,"blankUrl"],[614,18,654,18],[614,21,654,21],[614,34,654,34],[615,4,655,4],[615,8,655,8,"win"],[615,11,655,11],[615,12,655,12,"location"],[615,20,655,20],[615,21,655,21,"href"],[615,25,655,25],[615,30,655,30,"blankUrl"],[615,38,655,38],[615,42,656,8,"iframeEl"],[615,50,656,16],[615,51,656,17,"src"],[615,54,656,20],[615,59,656,25,"blankUrl"],[615,67,656,33],[615,71,657,8,"iframeEl"],[615,79,657,16],[615,80,657,17,"src"],[615,83,657,20],[615,88,657,25],[615,90,657,27],[615,92,657,29],[616,6,658,8,"setTimeout$2"],[616,18,658,20],[616,19,658,21,"listener"],[616,27,658,29],[616,29,658,31],[616,30,658,32],[616,31,658,33],[617,6,659,8],[617,13,659,15,"iframeEl"],[617,21,659,23],[617,22,659,24,"addEventListener"],[617,38,659,40],[617,39,659,41],[617,45,659,47],[617,47,659,49,"listener"],[617,55,659,57],[617,56,659,58],[618,4,660,4],[619,4,661,4,"iframeEl"],[619,12,661,12],[619,13,661,13,"addEventListener"],[619,29,661,29],[619,30,661,30],[619,36,661,36],[619,38,661,38,"listener"],[619,46,661,46],[619,47,661,47],[620,2,662,0],[621,2,663,0],[621,11,663,9,"onceStylesheetLoaded"],[621,31,663,29,"onceStylesheetLoaded"],[621,32,663,30,"link"],[621,36,663,34],[621,38,663,36,"listener"],[621,46,663,44],[621,48,663,46,"styleSheetLoadTimeout"],[621,69,663,67],[621,71,663,69],[622,4,664,4],[622,8,664,8,"fired"],[622,13,664,13],[622,16,664,16],[622,21,664,21],[623,4,665,4],[623,8,665,8,"styleSheetLoaded"],[623,24,665,24],[624,4,666,4],[624,8,666,8],[625,6,667,8,"styleSheetLoaded"],[625,22,667,24],[625,25,667,27,"link"],[625,29,667,31],[625,30,667,32,"sheet"],[625,35,667,37],[626,4,668,4],[626,5,668,5],[626,6,669,4],[626,13,669,11,"error"],[626,18,669,16],[626,20,669,18],[627,6,670,8],[628,4,671,4],[629,4,672,4],[629,8,672,8,"styleSheetLoaded"],[629,24,672,24],[629,26,673,8],[630,4,674,4],[630,10,674,10,"timer"],[630,15,674,15],[630,18,674,18,"setTimeout$2"],[630,30,674,30],[630,31,674,31],[630,37,674,37],[631,6,675,8],[631,10,675,12],[631,11,675,13,"fired"],[631,16,675,18],[631,18,675,20],[632,8,676,12,"listener"],[632,16,676,20],[632,17,676,21],[632,18,676,22],[633,8,677,12,"fired"],[633,13,677,17],[633,16,677,20],[633,20,677,24],[634,6,678,8],[635,4,679,4],[635,5,679,5],[635,7,679,7,"styleSheetLoadTimeout"],[635,28,679,28],[635,29,679,29],[636,4,680,4,"link"],[636,8,680,8],[636,9,680,9,"addEventListener"],[636,25,680,25],[636,26,680,26],[636,32,680,32],[636,34,680,34],[636,40,680,40],[637,6,681,8,"clearTimeout$2"],[637,20,681,22],[637,21,681,23,"timer"],[637,26,681,28],[637,27,681,29],[638,6,682,8,"fired"],[638,11,682,13],[638,14,682,16],[638,18,682,20],[639,6,683,8,"listener"],[639,14,683,16],[639,15,683,17],[639,16,683,18],[640,4,684,4],[640,5,684,5],[640,6,684,6],[641,2,685,0],[642,2,686,0],[642,11,686,9,"serializeNode"],[642,24,686,22,"serializeNode"],[642,25,686,23,"n"],[642,26,686,24],[642,28,686,26,"options"],[642,35,686,33],[642,37,686,35],[643,4,687,4],[643,10,687,10],[644,6,687,12,"doc"],[644,9,687,15],[645,6,687,17,"mirror"],[645,12,687,23],[646,6,687,25,"blockClass"],[646,16,687,35],[647,6,687,37,"blockSelector"],[647,19,687,50],[648,6,687,52,"unblockSelector"],[648,21,687,67],[649,6,687,69,"maskAllText"],[649,17,687,80],[650,6,687,82,"maskAttributeFn"],[650,21,687,97],[651,6,687,99,"maskTextClass"],[651,19,687,112],[652,6,687,114,"unmaskTextClass"],[652,21,687,129],[653,6,687,131,"maskTextSelector"],[653,22,687,147],[654,6,687,149,"unmaskTextSelector"],[654,24,687,167],[655,6,687,169,"inlineStylesheet"],[655,22,687,185],[656,6,687,187,"maskInputOptions"],[656,22,687,203],[656,25,687,206],[656,26,687,207],[656,27,687,208],[657,6,687,210,"maskTextFn"],[657,16,687,220],[658,6,687,222,"maskInputFn"],[658,17,687,233],[659,6,687,235,"dataURLOptions"],[659,20,687,249],[659,23,687,252],[659,24,687,253],[659,25,687,254],[660,6,687,256,"inlineImages"],[660,18,687,268],[661,6,687,270,"recordCanvas"],[661,18,687,282],[662,6,687,284,"keepIframeSrcFn"],[662,21,687,299],[663,6,687,301,"newlyAddedElement"],[663,23,687,318],[663,26,687,321],[664,4,687,328],[664,5,687,329],[664,8,687,332,"options"],[664,15,687,339],[665,4,688,4],[665,10,688,10,"rootId"],[665,16,688,16],[665,19,688,19,"getRootId"],[665,28,688,28],[665,29,688,29,"doc"],[665,32,688,32],[665,34,688,34,"mirror"],[665,40,688,40],[665,41,688,41],[666,4,689,4],[666,12,689,12,"n"],[666,13,689,13],[666,14,689,14,"nodeType"],[666,22,689,22],[667,6,690,8],[667,11,690,13,"n"],[667,12,690,14],[667,13,690,15,"DOCUMENT_NODE"],[667,26,690,28],[668,8,691,12],[668,12,691,16,"n"],[668,13,691,17],[668,14,691,18,"compatMode"],[668,24,691,28],[668,29,691,33],[668,41,691,45],[668,43,691,47],[669,10,692,16],[669,17,692,23],[670,12,693,20,"type"],[670,16,693,24],[670,18,693,26,"NodeType$3"],[670,28,693,36],[670,29,693,37,"Document"],[670,37,693,45],[671,12,694,20,"childNodes"],[671,22,694,30],[671,24,694,32],[671,26,694,34],[672,12,695,20,"compatMode"],[672,22,695,30],[672,24,695,32,"n"],[672,25,695,33],[672,26,695,34,"compatMode"],[673,10,696,16],[673,11,696,17],[674,8,697,12],[674,9,697,13],[674,15,698,17],[675,10,699,16],[675,17,699,23],[676,12,700,20,"type"],[676,16,700,24],[676,18,700,26,"NodeType$3"],[676,28,700,36],[676,29,700,37,"Document"],[676,37,700,45],[677,12,701,20,"childNodes"],[677,22,701,30],[677,24,701,32],[678,10,702,16],[678,11,702,17],[679,8,703,12],[680,6,704,8],[680,11,704,13,"n"],[680,12,704,14],[680,13,704,15,"DOCUMENT_TYPE_NODE"],[680,31,704,33],[681,8,705,12],[681,15,705,19],[682,10,706,16,"type"],[682,14,706,20],[682,16,706,22,"NodeType$3"],[682,26,706,32],[682,27,706,33,"DocumentType"],[682,39,706,45],[683,10,707,16,"name"],[683,14,707,20],[683,16,707,22,"n"],[683,17,707,23],[683,18,707,24,"name"],[683,22,707,28],[684,10,708,16,"publicId"],[684,18,708,24],[684,20,708,26,"n"],[684,21,708,27],[684,22,708,28,"publicId"],[684,30,708,36],[685,10,709,16,"systemId"],[685,18,709,24],[685,20,709,26,"n"],[685,21,709,27],[685,22,709,28,"systemId"],[685,30,709,36],[686,10,710,16,"rootId"],[687,8,711,12],[687,9,711,13],[688,6,712,8],[688,11,712,13,"n"],[688,12,712,14],[688,13,712,15,"ELEMENT_NODE"],[688,25,712,27],[689,8,713,12],[689,15,713,19,"serializeElementNode"],[689,35,713,39],[689,36,713,40,"n"],[689,37,713,41],[689,39,713,43],[690,10,714,16,"doc"],[690,13,714,19],[691,10,715,16,"blockClass"],[691,20,715,26],[692,10,716,16,"blockSelector"],[692,23,716,29],[693,10,717,16,"unblockSelector"],[693,25,717,31],[694,10,718,16,"inlineStylesheet"],[694,26,718,32],[695,10,719,16,"maskAttributeFn"],[695,25,719,31],[696,10,720,16,"maskInputOptions"],[696,26,720,32],[697,10,721,16,"maskInputFn"],[697,21,721,27],[698,10,722,16,"dataURLOptions"],[698,24,722,30],[699,10,723,16,"inlineImages"],[699,22,723,28],[700,10,724,16,"recordCanvas"],[700,22,724,28],[701,10,725,16,"keepIframeSrcFn"],[701,25,725,31],[702,10,726,16,"newlyAddedElement"],[702,27,726,33],[703,10,727,16,"rootId"],[703,16,727,22],[704,10,728,16,"maskAllText"],[704,21,728,27],[705,10,729,16,"maskTextClass"],[705,23,729,29],[706,10,730,16,"unmaskTextClass"],[706,25,730,31],[707,10,731,16,"maskTextSelector"],[707,26,731,32],[708,10,732,16,"unmaskTextSelector"],[709,8,733,12],[709,9,733,13],[709,10,733,14],[710,6,734,8],[710,11,734,13,"n"],[710,12,734,14],[710,13,734,15,"TEXT_NODE"],[710,22,734,24],[711,8,735,12],[711,15,735,19,"serializeTextNode"],[711,32,735,36],[711,33,735,37,"n"],[711,34,735,38],[711,36,735,40],[712,10,736,16,"doc"],[712,13,736,19],[713,10,737,16,"maskAllText"],[713,21,737,27],[714,10,738,16,"maskTextClass"],[714,23,738,29],[715,10,739,16,"unmaskTextClass"],[715,25,739,31],[716,10,740,16,"maskTextSelector"],[716,26,740,32],[717,10,741,16,"unmaskTextSelector"],[717,28,741,34],[718,10,742,16,"maskTextFn"],[718,20,742,26],[719,10,743,16,"maskInputOptions"],[719,26,743,32],[720,10,744,16,"maskInputFn"],[720,21,744,27],[721,10,745,16,"rootId"],[722,8,746,12],[722,9,746,13],[722,10,746,14],[723,6,747,8],[723,11,747,13,"n"],[723,12,747,14],[723,13,747,15,"CDATA_SECTION_NODE"],[723,31,747,33],[724,8,748,12],[724,15,748,19],[725,10,749,16,"type"],[725,14,749,20],[725,16,749,22,"NodeType$3"],[725,26,749,32],[725,27,749,33,"CDATA"],[725,32,749,38],[726,10,750,16,"textContent"],[726,21,750,27],[726,23,750,29],[726,25,750,31],[727,10,751,16,"rootId"],[728,8,752,12],[728,9,752,13],[729,6,753,8],[729,11,753,13,"n"],[729,12,753,14],[729,13,753,15,"COMMENT_NODE"],[729,25,753,27],[730,8,754,12],[730,15,754,19],[731,10,755,16,"type"],[731,14,755,20],[731,16,755,22,"NodeType$3"],[731,26,755,32],[731,27,755,33,"Comment"],[731,34,755,40],[732,10,756,16,"textContent"],[732,21,756,27],[732,23,756,29,"n"],[732,24,756,30],[732,25,756,31,"textContent"],[732,36,756,42],[732,40,756,46],[732,42,756,48],[733,10,757,16,"rootId"],[734,8,758,12],[734,9,758,13],[735,6,759,8],[736,8,760,12],[736,15,760,19],[736,20,760,24],[737,4,761,4],[738,2,762,0],[739,2,763,0],[739,11,763,9,"getRootId"],[739,20,763,18,"getRootId"],[739,21,763,19,"doc"],[739,24,763,22],[739,26,763,24,"mirror"],[739,32,763,30],[739,34,763,32],[740,4,764,4],[740,8,764,8],[740,9,764,9,"mirror"],[740,15,764,15],[740,16,764,16,"hasNode"],[740,23,764,23],[740,24,764,24,"doc"],[740,27,764,27],[740,28,764,28],[740,30,765,8],[740,37,765,15,"undefined"],[740,46,765,24],[741,4,766,4],[741,10,766,10,"docId"],[741,15,766,15],[741,18,766,18,"mirror"],[741,24,766,24],[741,25,766,25,"getId"],[741,30,766,30],[741,31,766,31,"doc"],[741,34,766,34],[741,35,766,35],[742,4,767,4],[742,11,767,11,"docId"],[742,16,767,16],[742,21,767,21],[742,22,767,22],[742,25,767,25,"undefined"],[742,34,767,34],[742,37,767,37,"docId"],[742,42,767,42],[743,2,768,0],[744,2,769,0],[744,11,769,9,"serializeTextNode"],[744,28,769,26,"serializeTextNode"],[744,29,769,27,"n"],[744,30,769,28],[744,32,769,30,"options"],[744,39,769,37],[744,41,769,39],[745,4,770,4],[745,10,770,10],[746,6,770,12,"maskAllText"],[746,17,770,23],[747,6,770,25,"maskTextClass"],[747,19,770,38],[748,6,770,40,"unmaskTextClass"],[748,21,770,55],[749,6,770,57,"maskTextSelector"],[749,22,770,73],[750,6,770,75,"unmaskTextSelector"],[750,24,770,93],[751,6,770,95,"maskTextFn"],[751,16,770,105],[752,6,770,107,"maskInputOptions"],[752,22,770,123],[753,6,770,125,"maskInputFn"],[753,17,770,136],[754,6,770,138,"rootId"],[755,4,770,146],[755,5,770,147],[755,8,770,150,"options"],[755,15,770,157],[756,4,771,4],[756,10,771,10,"parentTagName"],[756,23,771,23],[756,26,771,26,"n"],[756,27,771,27],[756,28,771,28,"parentNode"],[756,38,771,38],[756,42,771,42,"n"],[756,43,771,43],[756,44,771,44,"parentNode"],[756,54,771,54],[756,55,771,55,"tagName"],[756,62,771,62],[757,4,772,4],[757,8,772,8,"textContent"],[757,19,772,19],[757,22,772,22,"n"],[757,23,772,23],[757,24,772,24,"textContent"],[757,35,772,35],[758,4,773,4],[758,10,773,10,"isStyle"],[758,17,773,17],[758,20,773,20,"parentTagName"],[758,33,773,33],[758,38,773,38],[758,45,773,45],[758,48,773,48],[758,52,773,52],[758,55,773,55,"undefined"],[758,64,773,64],[759,4,774,4],[759,10,774,10,"isScript"],[759,18,774,18],[759,21,774,21,"parentTagName"],[759,34,774,34],[759,39,774,39],[759,47,774,47],[759,50,774,50],[759,54,774,54],[759,57,774,57,"undefined"],[759,66,774,66],[760,4,775,4],[760,10,775,10,"isTextarea"],[760,20,775,20],[760,23,775,23,"parentTagName"],[760,36,775,36],[760,41,775,41],[760,51,775,51],[760,54,775,54],[760,58,775,58],[760,61,775,61,"undefined"],[760,70,775,70],[761,4,776,4],[761,8,776,8,"isStyle"],[761,15,776,15],[761,19,776,19,"textContent"],[761,30,776,30],[761,32,776,32],[762,6,777,8],[762,10,777,12],[763,8,778,12],[763,12,778,16,"n"],[763,13,778,17],[763,14,778,18,"nextSibling"],[763,25,778,29],[763,29,778,33,"n"],[763,30,778,34],[763,31,778,35,"previousSibling"],[763,46,778,50],[763,48,778,52],[763,49,779,12],[763,50,779,13],[763,56,780,17],[763,60,780,21,"_optionalChain$5"],[763,76,780,37],[763,77,780,38],[763,78,780,39,"n"],[763,79,780,40],[763,81,780,42],[763,89,780,50],[763,91,780,52,"_7"],[763,93,780,54],[763,97,780,58,"_7"],[763,99,780,60],[763,100,780,61,"parentNode"],[763,110,780,71],[763,112,780,73],[763,120,780,81],[763,122,780,83,"_8"],[763,124,780,85],[763,128,780,89,"_8"],[763,130,780,91],[763,131,780,92,"sheet"],[763,136,780,97],[763,138,780,99],[763,154,780,115],[763,156,780,117,"_9"],[763,158,780,119],[763,162,780,123,"_9"],[763,164,780,125],[763,165,780,126,"cssRules"],[763,173,780,134],[763,174,780,135],[763,175,780,136],[763,177,780,138],[764,10,781,16,"textContent"],[764,21,781,27],[764,24,781,30,"stringifyStylesheet"],[764,43,781,49],[764,44,781,50,"n"],[764,45,781,51],[764,46,781,52,"parentNode"],[764,56,781,62],[764,57,781,63,"sheet"],[764,62,781,68],[764,63,781,69],[765,8,782,12],[766,6,783,8],[766,7,783,9],[766,8,784,8],[766,15,784,15,"err"],[766,18,784,18],[766,20,784,20],[767,8,785,12,"console"],[767,15,785,19],[767,16,785,20,"warn"],[767,20,785,24],[767,21,785,25],[767,77,785,81,"err"],[767,80,785,84],[767,82,785,86],[767,84,785,88,"n"],[767,85,785,89],[767,86,785,90],[768,6,786,8],[769,6,787,8,"textContent"],[769,17,787,19],[769,20,787,22,"absoluteToStylesheet"],[769,40,787,42],[769,41,787,43,"textContent"],[769,52,787,54],[769,54,787,56,"getHref"],[769,61,787,63],[769,62,787,64,"options"],[769,69,787,71],[769,70,787,72,"doc"],[769,73,787,75],[769,74,787,76],[769,75,787,77],[770,4,788,4],[771,4,789,4],[771,8,789,8,"isScript"],[771,16,789,16],[771,18,789,18],[772,6,790,8,"textContent"],[772,17,790,19],[772,20,790,22],[772,40,790,42],[773,4,791,4],[774,4,792,4],[774,10,792,10,"forceMask"],[774,19,792,19],[774,22,792,22,"needMaskingText"],[774,37,792,37],[774,38,792,38,"n"],[774,39,792,39],[774,41,792,41,"maskTextClass"],[774,54,792,54],[774,56,792,56,"maskTextSelector"],[774,72,792,72],[774,74,792,74,"unmaskTextClass"],[774,89,792,89],[774,91,792,91,"unmaskTextSelector"],[774,109,792,109],[774,111,792,111,"maskAllText"],[774,122,792,122],[774,123,792,123],[775,4,793,4],[775,8,793,8],[775,9,793,9,"isStyle"],[775,16,793,16],[775,20,793,20],[775,21,793,21,"isScript"],[775,29,793,29],[775,33,793,33],[775,34,793,34,"isTextarea"],[775,44,793,44],[775,48,793,48,"textContent"],[775,59,793,59],[775,63,793,63,"forceMask"],[775,72,793,72],[775,74,793,74],[776,6,794,8,"textContent"],[776,17,794,19],[776,20,794,22,"maskTextFn"],[776,30,794,32],[776,33,795,14,"maskTextFn"],[776,43,795,24],[776,44,795,25,"textContent"],[776,55,795,36],[776,57,795,38,"n"],[776,58,795,39],[776,59,795,40,"parentElement"],[776,72,795,53],[776,73,795,54],[776,76,796,14,"textContent"],[776,87,796,25],[776,88,796,26,"replace"],[776,95,796,33],[776,96,796,34],[776,103,796,41],[776,105,796,43],[776,108,796,46],[776,109,796,47],[777,4,797,4],[778,4,798,4],[778,8,798,8,"isTextarea"],[778,18,798,18],[778,22,798,22,"textContent"],[778,33,798,33],[778,38,798,38,"maskInputOptions"],[778,54,798,54],[778,55,798,55,"textarea"],[778,63,798,63],[778,67,798,67,"forceMask"],[778,76,798,76],[778,77,798,77],[778,79,798,79],[779,6,799,8,"textContent"],[779,17,799,19],[779,20,799,22,"maskInputFn"],[779,31,799,33],[779,34,800,14,"maskInputFn"],[779,45,800,25],[779,46,800,26,"textContent"],[779,57,800,37],[779,59,800,39,"n"],[779,60,800,40],[779,61,800,41,"parentNode"],[779,71,800,51],[779,72,800,52],[779,75,801,14,"textContent"],[779,86,801,25],[779,87,801,26,"replace"],[779,94,801,33],[779,95,801,34],[779,102,801,41],[779,104,801,43],[779,107,801,46],[779,108,801,47],[780,4,802,4],[781,4,803,4],[781,8,803,8,"parentTagName"],[781,21,803,21],[781,26,803,26],[781,34,803,34],[781,38,803,38,"textContent"],[781,49,803,49],[781,51,803,51],[782,6,804,8],[782,12,804,14,"isInputMasked"],[782,25,804,27],[782,28,804,30,"shouldMaskInput"],[782,43,804,45],[782,44,804,46],[783,8,805,12,"type"],[783,12,805,16],[783,14,805,18],[783,18,805,22],[784,8,806,12,"tagName"],[784,15,806,19],[784,17,806,21,"parentTagName"],[784,30,806,34],[785,8,807,12,"maskInputOptions"],[786,6,808,8],[786,7,808,9],[786,8,808,10],[787,6,809,8,"textContent"],[787,17,809,19],[787,20,809,22,"maskInputValue"],[787,34,809,36],[787,35,809,37],[788,8,810,12,"isMasked"],[788,16,810,20],[788,18,810,22,"needMaskingText"],[788,33,810,37],[788,34,810,38,"n"],[788,35,810,39],[788,37,810,41,"maskTextClass"],[788,50,810,54],[788,52,810,56,"maskTextSelector"],[788,68,810,72],[788,70,810,74,"unmaskTextClass"],[788,85,810,89],[788,87,810,91,"unmaskTextSelector"],[788,105,810,109],[788,107,810,111,"isInputMasked"],[788,120,810,124],[788,121,810,125],[789,8,811,12,"element"],[789,15,811,19],[789,17,811,21,"n"],[789,18,811,22],[790,8,812,12,"value"],[790,13,812,17],[790,15,812,19,"textContent"],[790,26,812,30],[791,8,813,12,"maskInputFn"],[792,6,814,8],[792,7,814,9],[792,8,814,10],[793,4,815,4],[794,4,816,4],[794,11,816,11],[795,6,817,8,"type"],[795,10,817,12],[795,12,817,14,"NodeType$3"],[795,22,817,24],[795,23,817,25,"Text"],[795,27,817,29],[796,6,818,8,"textContent"],[796,17,818,19],[796,19,818,21,"textContent"],[796,30,818,32],[796,34,818,36],[796,36,818,38],[797,6,819,8,"isStyle"],[797,13,819,15],[798,6,820,8,"rootId"],[799,4,821,4],[799,5,821,5],[800,2,822,0],[801,2,823,0],[801,11,823,9,"serializeElementNode"],[801,31,823,29,"serializeElementNode"],[801,32,823,30,"n"],[801,33,823,31],[801,35,823,33,"options"],[801,42,823,40],[801,44,823,42],[802,4,824,4],[802,10,824,10],[803,6,824,12,"doc"],[803,9,824,15],[804,6,824,17,"blockClass"],[804,16,824,27],[805,6,824,29,"blockSelector"],[805,19,824,42],[806,6,824,44,"unblockSelector"],[806,21,824,59],[807,6,824,61,"inlineStylesheet"],[807,22,824,77],[808,6,824,79,"maskInputOptions"],[808,22,824,95],[808,25,824,98],[808,26,824,99],[808,27,824,100],[809,6,824,102,"maskAttributeFn"],[809,21,824,117],[810,6,824,119,"maskInputFn"],[810,17,824,130],[811,6,824,132,"dataURLOptions"],[811,20,824,146],[811,23,824,149],[811,24,824,150],[811,25,824,151],[812,6,824,153,"inlineImages"],[812,18,824,165],[813,6,824,167,"recordCanvas"],[813,18,824,179],[814,6,824,181,"keepIframeSrcFn"],[814,21,824,196],[815,6,824,198,"newlyAddedElement"],[815,23,824,215],[815,26,824,218],[815,31,824,223],[816,6,824,225,"rootId"],[816,12,824,231],[817,6,824,233,"maskAllText"],[817,17,824,244],[818,6,824,246,"maskTextClass"],[818,19,824,259],[819,6,824,261,"unmaskTextClass"],[819,21,824,276],[820,6,824,278,"maskTextSelector"],[820,22,824,294],[821,6,824,296,"unmaskTextSelector"],[822,4,824,316],[822,5,824,317],[822,8,824,320,"options"],[822,15,824,327],[823,4,825,4],[823,10,825,10,"needBlock"],[823,19,825,19],[823,22,825,22,"_isBlockedElement"],[823,39,825,39],[823,40,825,40,"n"],[823,41,825,41],[823,43,825,43,"blockClass"],[823,53,825,53],[823,55,825,55,"blockSelector"],[823,68,825,68],[823,70,825,70,"unblockSelector"],[823,85,825,85],[823,86,825,86],[824,4,826,4],[824,10,826,10,"tagName"],[824,17,826,17],[824,20,826,20,"getValidTagName"],[824,35,826,35],[824,36,826,36,"n"],[824,37,826,37],[824,38,826,38],[825,4,827,4],[825,8,827,8,"attributes"],[825,18,827,18],[825,21,827,21],[825,22,827,22],[825,23,827,23],[826,4,828,4],[826,10,828,10,"len"],[826,13,828,13],[826,16,828,16,"n"],[826,17,828,17],[826,18,828,18,"attributes"],[826,28,828,28],[826,29,828,29,"length"],[826,35,828,35],[827,4,829,4],[827,9,829,9],[827,13,829,13,"i"],[827,14,829,14],[827,17,829,17],[827,18,829,18],[827,20,829,20,"i"],[827,21,829,21],[827,24,829,24,"len"],[827,27,829,27],[827,29,829,29,"i"],[827,30,829,30],[827,32,829,32],[827,34,829,34],[828,6,830,8],[828,12,830,14,"attr"],[828,16,830,18],[828,19,830,21,"n"],[828,20,830,22],[828,21,830,23,"attributes"],[828,31,830,33],[828,32,830,34,"i"],[828,33,830,35],[828,34,830,36],[829,6,831,8],[829,10,831,12,"attr"],[829,14,831,16],[829,15,831,17,"name"],[829,19,831,21],[829,23,831,25],[829,24,831,26,"ignoreAttribute"],[829,39,831,41],[829,40,831,42,"tagName"],[829,47,831,49],[829,49,831,51,"attr"],[829,53,831,55],[829,54,831,56,"name"],[829,58,831,60],[829,60,831,62,"attr"],[829,64,831,66],[829,65,831,67,"value"],[829,70,831,72],[829,71,831,73],[829,73,831,75],[830,8,832,12,"attributes"],[830,18,832,22],[830,19,832,23,"attr"],[830,23,832,27],[830,24,832,28,"name"],[830,28,832,32],[830,29,832,33],[830,32,832,36,"transformAttribute"],[830,50,832,54],[830,51,832,55,"doc"],[830,54,832,58],[830,56,832,60,"tagName"],[830,63,832,67],[830,65,832,69,"toLowerCase"],[830,76,832,80],[830,77,832,81,"attr"],[830,81,832,85],[830,82,832,86,"name"],[830,86,832,90],[830,87,832,91],[830,89,832,93,"attr"],[830,93,832,97],[830,94,832,98,"value"],[830,99,832,103],[830,101,832,105,"n"],[830,102,832,106],[830,104,832,108,"maskAttributeFn"],[830,119,832,123],[830,120,832,124],[831,6,833,8],[832,4,834,4],[833,4,835,4],[833,8,835,8,"tagName"],[833,15,835,15],[833,20,835,20],[833,26,835,26],[833,30,835,30,"inlineStylesheet"],[833,46,835,46],[833,48,835,48],[834,6,836,8],[834,12,836,14,"stylesheet"],[834,22,836,24],[834,25,836,27,"Array"],[834,30,836,32],[834,31,836,33,"from"],[834,35,836,37],[834,36,836,38,"doc"],[834,39,836,41],[834,40,836,42,"styleSheets"],[834,51,836,53],[834,52,836,54],[834,53,836,55,"find"],[834,57,836,59],[834,58,836,61,"s"],[834,59,836,62],[834,63,836,67],[835,8,837,12],[835,15,837,19,"s"],[835,16,837,20],[835,17,837,21,"href"],[835,21,837,25],[835,26,837,30,"n"],[835,27,837,31],[835,28,837,32,"href"],[835,32,837,36],[836,6,838,8],[836,7,838,9],[836,8,838,10],[837,6,839,8],[837,10,839,12,"cssText"],[837,17,839,19],[837,20,839,22],[837,24,839,26],[838,6,840,8],[838,10,840,12,"stylesheet"],[838,20,840,22],[838,22,840,24],[839,8,841,12,"cssText"],[839,15,841,19],[839,18,841,22,"stringifyStylesheet"],[839,37,841,41],[839,38,841,42,"stylesheet"],[839,48,841,52],[839,49,841,53],[840,6,842,8],[841,6,843,8],[841,10,843,12,"cssText"],[841,17,843,19],[841,19,843,21],[842,8,844,12,"attributes"],[842,18,844,22],[842,19,844,23,"rel"],[842,22,844,26],[842,25,844,29],[842,29,844,33],[843,8,845,12,"attributes"],[843,18,845,22],[843,19,845,23,"href"],[843,23,845,27],[843,26,845,30],[843,30,845,34],[844,8,846,12,"attributes"],[844,18,846,22],[844,19,846,23,"crossorigin"],[844,30,846,34],[844,33,846,37],[844,37,846,41],[845,8,847,12,"attributes"],[845,18,847,22],[845,19,847,23,"_cssText"],[845,27,847,31],[845,30,847,34,"absoluteToStylesheet"],[845,50,847,54],[845,51,847,55,"cssText"],[845,58,847,62],[845,60,847,64,"stylesheet"],[845,70,847,74],[845,71,847,75,"href"],[845,75,847,79],[845,76,847,80],[846,6,848,8],[847,4,849,4],[848,4,850,4],[848,8,850,8,"tagName"],[848,15,850,15],[848,20,850,20],[848,27,850,27],[848,31,851,8,"n"],[848,32,851,9],[848,33,851,10,"sheet"],[848,38,851,15],[848,42,852,8],[848,43,852,9],[848,44,852,10,"n"],[848,45,852,11],[848,46,852,12,"innerText"],[848,55,852,21],[848,59,852,25,"n"],[848,60,852,26],[848,61,852,27,"textContent"],[848,72,852,38],[848,76,852,42],[848,78,852,44],[848,80,852,46,"trim"],[848,84,852,50],[848,85,852,51],[848,86,852,52],[848,87,852,53,"length"],[848,93,852,59],[848,95,852,61],[849,6,853,8],[849,12,853,14,"cssText"],[849,19,853,21],[849,22,853,24,"stringifyStylesheet"],[849,41,853,43],[849,42,853,44,"n"],[849,43,853,45],[849,44,853,46,"sheet"],[849,49,853,51],[849,50,853,52],[850,6,854,8],[850,10,854,12,"cssText"],[850,17,854,19],[850,19,854,21],[851,8,855,12,"attributes"],[851,18,855,22],[851,19,855,23,"_cssText"],[851,27,855,31],[851,30,855,34,"absoluteToStylesheet"],[851,50,855,54],[851,51,855,55,"cssText"],[851,58,855,62],[851,60,855,64,"getHref"],[851,67,855,71],[851,68,855,72,"doc"],[851,71,855,75],[851,72,855,76],[851,73,855,77],[852,6,856,8],[853,4,857,4],[854,4,858,4],[854,8,858,8,"tagName"],[854,15,858,15],[854,20,858,20],[854,27,858,27],[854,31,859,8,"tagName"],[854,38,859,15],[854,43,859,20],[854,53,859,30],[854,57,860,8,"tagName"],[854,64,860,15],[854,69,860,20],[854,77,860,28],[854,81,861,8,"tagName"],[854,88,861,15],[854,93,861,20],[854,101,861,28],[854,103,861,30],[855,6,862,8],[855,12,862,14,"el"],[855,14,862,16],[855,17,862,19,"n"],[855,18,862,20],[856,6,863,8],[856,12,863,14,"type"],[856,16,863,18],[856,19,863,21,"getInputType"],[856,31,863,33],[856,32,863,34,"el"],[856,34,863,36],[856,35,863,37],[857,6,864,8],[857,12,864,14,"value"],[857,17,864,19],[857,20,864,22,"getInputValue"],[857,33,864,35],[857,34,864,36,"el"],[857,36,864,38],[857,38,864,40,"toUpperCase"],[857,49,864,51],[857,50,864,52,"tagName"],[857,57,864,59],[857,58,864,60],[857,60,864,62,"type"],[857,64,864,66],[857,65,864,67],[858,6,865,8],[858,12,865,14,"checked"],[858,19,865,21],[858,22,865,24,"el"],[858,24,865,26],[858,25,865,27,"checked"],[858,32,865,34],[859,6,866,8],[859,10,866,12,"type"],[859,14,866,16],[859,19,866,21],[859,27,866,29],[859,31,866,33,"type"],[859,35,866,37],[859,40,866,42],[859,48,866,50],[859,52,866,54,"value"],[859,57,866,59],[859,59,866,61],[860,8,867,12],[860,14,867,18,"forceMask"],[860,23,867,27],[860,26,867,30,"needMaskingText"],[860,41,867,45],[860,42,867,46,"el"],[860,44,867,48],[860,46,867,50,"maskTextClass"],[860,59,867,63],[860,61,867,65,"maskTextSelector"],[860,77,867,81],[860,79,867,83,"unmaskTextClass"],[860,94,867,98],[860,96,867,100,"unmaskTextSelector"],[860,114,867,118],[860,116,867,120,"shouldMaskInput"],[860,131,867,135],[860,132,867,136],[861,10,868,16,"type"],[861,14,868,20],[862,10,869,16,"tagName"],[862,17,869,23],[862,19,869,25,"toUpperCase"],[862,30,869,36],[862,31,869,37,"tagName"],[862,38,869,44],[862,39,869,45],[863,10,870,16,"maskInputOptions"],[864,8,871,12],[864,9,871,13],[864,10,871,14],[864,11,871,15],[865,8,872,12,"attributes"],[865,18,872,22],[865,19,872,23,"value"],[865,24,872,28],[865,27,872,31,"maskInputValue"],[865,41,872,45],[865,42,872,46],[866,10,873,16,"isMasked"],[866,18,873,24],[866,20,873,26,"forceMask"],[866,29,873,35],[867,10,874,16,"element"],[867,17,874,23],[867,19,874,25,"el"],[867,21,874,27],[868,10,875,16,"value"],[868,15,875,21],[869,10,876,16,"maskInputFn"],[870,8,877,12],[870,9,877,13],[870,10,877,14],[871,6,878,8],[872,6,879,8],[872,10,879,12,"checked"],[872,17,879,19],[872,19,879,21],[873,8,880,12,"attributes"],[873,18,880,22],[873,19,880,23,"checked"],[873,26,880,30],[873,29,880,33,"checked"],[873,36,880,40],[874,6,881,8],[875,4,882,4],[876,4,883,4],[876,8,883,8,"tagName"],[876,15,883,15],[876,20,883,20],[876,28,883,28],[876,30,883,30],[877,6,884,8],[877,10,884,12,"n"],[877,11,884,13],[877,12,884,14,"selected"],[877,20,884,22],[877,24,884,26],[877,25,884,27,"maskInputOptions"],[877,41,884,43],[877,42,884,44],[877,50,884,52],[877,51,884,53],[877,53,884,55],[878,8,885,12,"attributes"],[878,18,885,22],[878,19,885,23,"selected"],[878,27,885,31],[878,30,885,34],[878,34,885,38],[879,6,886,8],[879,7,886,9],[879,13,887,13],[880,8,888,12],[880,15,888,19,"attributes"],[880,25,888,29],[880,26,888,30,"selected"],[880,34,888,38],[881,6,889,8],[882,4,890,4],[883,4,891,4],[883,8,891,8,"tagName"],[883,15,891,15],[883,20,891,20],[883,28,891,28],[883,32,891,32,"recordCanvas"],[883,44,891,44],[883,46,891,46],[884,6,892,8],[884,10,892,12,"n"],[884,11,892,13],[884,12,892,14,"__context"],[884,21,892,23],[884,26,892,28],[884,30,892,32],[884,32,892,34],[885,8,893,12],[885,12,893,16],[885,13,893,17,"is2DCanvasBlank"],[885,28,893,32],[885,29,893,33,"n"],[885,30,893,34],[885,31,893,35],[885,33,893,37],[886,10,894,16,"attributes"],[886,20,894,26],[886,21,894,27,"rr_dataURL"],[886,31,894,37],[886,34,894,40,"n"],[886,35,894,41],[886,36,894,42,"toDataURL"],[886,45,894,51],[886,46,894,52,"dataURLOptions"],[886,60,894,66],[886,61,894,67,"type"],[886,65,894,71],[886,67,894,73,"dataURLOptions"],[886,81,894,87],[886,82,894,88,"quality"],[886,89,894,95],[886,90,894,96],[887,8,895,12],[888,6,896,8],[888,7,896,9],[888,13,897,13],[888,17,897,17],[888,19,897,19],[888,30,897,30],[888,34,897,34,"n"],[888,35,897,35],[888,36,897,36],[888,38,897,38],[889,8,898,12],[889,14,898,18,"canvasDataURL"],[889,27,898,31],[889,30,898,34,"n"],[889,31,898,35],[889,32,898,36,"toDataURL"],[889,41,898,45],[889,42,898,46,"dataURLOptions"],[889,56,898,60],[889,57,898,61,"type"],[889,61,898,65],[889,63,898,67,"dataURLOptions"],[889,77,898,81],[889,78,898,82,"quality"],[889,85,898,89],[889,86,898,90],[890,8,899,12],[890,14,899,18,"blankCanvas"],[890,25,899,29],[890,28,899,32,"doc"],[890,31,899,35],[890,32,899,36,"createElement"],[890,45,899,49],[890,46,899,50],[890,54,899,58],[890,55,899,59],[891,8,900,12,"blankCanvas"],[891,19,900,23],[891,20,900,24,"width"],[891,25,900,29],[891,28,900,32,"n"],[891,29,900,33],[891,30,900,34,"width"],[891,35,900,39],[892,8,901,12,"blankCanvas"],[892,19,901,23],[892,20,901,24,"height"],[892,26,901,30],[892,29,901,33,"n"],[892,30,901,34],[892,31,901,35,"height"],[892,37,901,41],[893,8,902,12],[893,14,902,18,"blankCanvasDataURL"],[893,32,902,36],[893,35,902,39,"blankCanvas"],[893,46,902,50],[893,47,902,51,"toDataURL"],[893,56,902,60],[893,57,902,61,"dataURLOptions"],[893,71,902,75],[893,72,902,76,"type"],[893,76,902,80],[893,78,902,82,"dataURLOptions"],[893,92,902,96],[893,93,902,97,"quality"],[893,100,902,104],[893,101,902,105],[894,8,903,12],[894,12,903,16,"canvasDataURL"],[894,25,903,29],[894,30,903,34,"blankCanvasDataURL"],[894,48,903,52],[894,50,903,54],[895,10,904,16,"attributes"],[895,20,904,26],[895,21,904,27,"rr_dataURL"],[895,31,904,37],[895,34,904,40,"canvasDataURL"],[895,47,904,53],[896,8,905,12],[897,6,906,8],[898,4,907,4],[899,4,908,4],[899,8,908,8,"tagName"],[899,15,908,15],[899,20,908,20],[899,25,908,25],[899,29,908,29,"inlineImages"],[899,41,908,41],[899,43,908,43],[900,6,909,8],[900,10,909,12],[900,11,909,13,"canvasService"],[900,24,909,26],[900,26,909,28],[901,8,910,12,"canvasService"],[901,21,910,25],[901,24,910,28,"doc"],[901,27,910,31],[901,28,910,32,"createElement"],[901,41,910,45],[901,42,910,46],[901,50,910,54],[901,51,910,55],[902,8,911,12,"canvasCtx"],[902,17,911,21],[902,20,911,24,"canvasService"],[902,33,911,37],[902,34,911,38,"getContext"],[902,44,911,48],[902,45,911,49],[902,49,911,53],[902,50,911,54],[903,6,912,8],[904,6,913,8],[904,12,913,14,"image"],[904,17,913,19],[904,20,913,22,"n"],[904,21,913,23],[905,6,914,8],[905,12,914,14,"imageSrc"],[905,20,914,22],[905,23,914,25,"image"],[905,28,914,30],[905,29,914,31,"currentSrc"],[905,39,914,41],[905,43,914,45,"image"],[905,48,914,50],[905,49,914,51,"getAttribute"],[905,61,914,63],[905,62,914,64],[905,67,914,69],[905,68,914,70],[905,72,914,74],[905,87,914,89],[906,6,915,8],[906,12,915,14,"priorCrossOrigin"],[906,28,915,30],[906,31,915,33,"image"],[906,36,915,38],[906,37,915,39,"crossOrigin"],[906,48,915,50],[907,6,916,8],[907,12,916,14,"recordInlineImage"],[907,29,916,31],[907,32,916,34,"recordInlineImage"],[907,33,916,34],[907,38,916,40],[908,8,917,12,"image"],[908,13,917,17],[908,14,917,18,"removeEventListener"],[908,33,917,37],[908,34,917,38],[908,40,917,44],[908,42,917,46,"recordInlineImage"],[908,59,917,63],[908,60,917,64],[909,8,918,12],[909,12,918,16],[910,10,919,16,"canvasService"],[910,23,919,29],[910,24,919,30,"width"],[910,29,919,35],[910,32,919,38,"image"],[910,37,919,43],[910,38,919,44,"naturalWidth"],[910,50,919,56],[911,10,920,16,"canvasService"],[911,23,920,29],[911,24,920,30,"height"],[911,30,920,36],[911,33,920,39,"image"],[911,38,920,44],[911,39,920,45,"naturalHeight"],[911,52,920,58],[912,10,921,16,"canvasCtx"],[912,19,921,25],[912,20,921,26,"drawImage"],[912,29,921,35],[912,30,921,36,"image"],[912,35,921,41],[912,37,921,43],[912,38,921,44],[912,40,921,46],[912,41,921,47],[912,42,921,48],[913,10,922,16,"attributes"],[913,20,922,26],[913,21,922,27,"rr_dataURL"],[913,31,922,37],[913,34,922,40,"canvasService"],[913,47,922,53],[913,48,922,54,"toDataURL"],[913,57,922,63],[913,58,922,64,"dataURLOptions"],[913,72,922,78],[913,73,922,79,"type"],[913,77,922,83],[913,79,922,85,"dataURLOptions"],[913,93,922,99],[913,94,922,100,"quality"],[913,101,922,107],[913,102,922,108],[914,8,923,12],[914,9,923,13],[914,10,924,12],[914,17,924,19,"err"],[914,20,924,22],[914,22,924,24],[915,10,925,16],[915,14,925,20,"image"],[915,19,925,25],[915,20,925,26,"crossOrigin"],[915,31,925,37],[915,36,925,42],[915,47,925,53],[915,49,925,55],[916,12,926,20,"image"],[916,17,926,25],[916,18,926,26,"crossOrigin"],[916,29,926,37],[916,32,926,40],[916,43,926,51],[917,12,927,20],[917,16,927,24,"image"],[917,21,927,29],[917,22,927,30,"complete"],[917,30,927,38],[917,34,927,42,"image"],[917,39,927,47],[917,40,927,48,"naturalWidth"],[917,52,927,60],[917,57,927,65],[917,58,927,66],[917,60,928,24,"recordInlineImage"],[917,77,928,41],[917,78,928,42],[917,79,928,43],[917,80,928,44],[917,85,930,24,"image"],[917,90,930,29],[917,91,930,30,"addEventListener"],[917,107,930,46],[917,108,930,47],[917,114,930,53],[917,116,930,55,"recordInlineImage"],[917,133,930,72],[917,134,930,73],[918,12,931,20],[919,10,932,16],[919,11,932,17],[919,17,933,21],[920,12,934,20,"console"],[920,19,934,27],[920,20,934,28,"warn"],[920,24,934,32],[920,25,934,33],[920,50,934,58,"imageSrc"],[920,58,934,66],[920,70,934,78,"err"],[920,73,934,81],[920,75,934,83],[920,76,934,84],[921,10,935,16],[922,8,936,12],[923,8,937,12],[923,12,937,16,"image"],[923,17,937,21],[923,18,937,22,"crossOrigin"],[923,29,937,33],[923,34,937,38],[923,45,937,49],[923,47,937,51],[924,10,938,16,"priorCrossOrigin"],[924,26,938,32],[924,29,939,23,"attributes"],[924,39,939,33],[924,40,939,34,"crossOrigin"],[924,51,939,45],[924,54,939,48,"priorCrossOrigin"],[924,70,939,64],[924,73,940,22,"image"],[924,78,940,27],[924,79,940,28,"removeAttribute"],[924,94,940,43],[924,95,940,44],[924,108,940,57],[924,109,940,58],[925,8,941,12],[926,6,942,8],[926,7,942,9],[927,6,943,8],[927,10,943,12,"image"],[927,15,943,17],[927,16,943,18,"complete"],[927,24,943,26],[927,28,943,30,"image"],[927,33,943,35],[927,34,943,36,"naturalWidth"],[927,46,943,48],[927,51,943,53],[927,52,943,54],[927,54,944,12,"recordInlineImage"],[927,71,944,29],[927,72,944,30],[927,73,944,31],[927,74,944,32],[927,79,946,12,"image"],[927,84,946,17],[927,85,946,18,"addEventListener"],[927,101,946,34],[927,102,946,35],[927,108,946,41],[927,110,946,43,"recordInlineImage"],[927,127,946,60],[927,128,946,61],[928,4,947,4],[929,4,948,4],[929,8,948,8,"tagName"],[929,15,948,15],[929,20,948,20],[929,27,948,27],[929,31,948,31,"tagName"],[929,38,948,38],[929,43,948,43],[929,50,948,50],[929,52,948,52],[930,6,949,8,"attributes"],[930,16,949,18],[930,17,949,19,"rr_mediaState"],[930,30,949,32],[930,33,949,35,"n"],[930,34,949,36],[930,35,949,37,"paused"],[930,41,949,43],[930,44,950,14],[930,52,950,22],[930,55,951,14],[930,63,951,22],[931,6,952,8,"attributes"],[931,16,952,18],[931,17,952,19,"rr_mediaCurrentTime"],[931,36,952,38],[931,39,952,41,"n"],[931,40,952,42],[931,41,952,43,"currentTime"],[931,52,952,54],[932,4,953,4],[933,4,954,4],[933,8,954,8],[933,9,954,9,"newlyAddedElement"],[933,26,954,26],[933,28,954,28],[934,6,955,8],[934,10,955,12,"n"],[934,11,955,13],[934,12,955,14,"scrollLeft"],[934,22,955,24],[934,24,955,26],[935,8,956,12,"attributes"],[935,18,956,22],[935,19,956,23,"rr_scrollLeft"],[935,32,956,36],[935,35,956,39,"n"],[935,36,956,40],[935,37,956,41,"scrollLeft"],[935,47,956,51],[936,6,957,8],[937,6,958,8],[937,10,958,12,"n"],[937,11,958,13],[937,12,958,14,"scrollTop"],[937,21,958,23],[937,23,958,25],[938,8,959,12,"attributes"],[938,18,959,22],[938,19,959,23,"rr_scrollTop"],[938,31,959,35],[938,34,959,38,"n"],[938,35,959,39],[938,36,959,40,"scrollTop"],[938,45,959,49],[939,6,960,8],[940,4,961,4],[941,4,962,4],[941,8,962,8,"needBlock"],[941,17,962,17],[941,19,962,19],[942,6,963,8],[942,12,963,14],[943,8,963,16,"width"],[943,13,963,21],[944,8,963,23,"height"],[945,6,963,30],[945,7,963,31],[945,10,963,34,"n"],[945,11,963,35],[945,12,963,36,"getBoundingClientRect"],[945,33,963,57],[945,34,963,58],[945,35,963,59],[946,6,964,8,"attributes"],[946,16,964,18],[946,19,964,21],[947,8,965,12,"class"],[947,13,965,17],[947,15,965,19,"attributes"],[947,25,965,29],[947,26,965,30,"class"],[947,31,965,35],[948,8,966,12,"rr_width"],[948,16,966,20],[948,18,966,22],[948,21,966,25,"width"],[948,26,966,30],[948,30,966,34],[949,8,967,12,"rr_height"],[949,17,967,21],[949,19,967,23],[949,22,967,26,"height"],[949,28,967,32],[950,6,968,8],[950,7,968,9],[951,4,969,4],[952,4,970,4],[952,8,970,8,"tagName"],[952,15,970,15],[952,20,970,20],[952,28,970,28],[952,32,970,32],[952,33,970,33,"keepIframeSrcFn"],[952,48,970,48],[952,49,970,49,"attributes"],[952,59,970,59],[952,60,970,60,"src"],[952,63,970,63],[952,64,970,64],[952,66,970,66],[953,6,971,8],[953,10,971,12],[953,11,971,13,"needBlock"],[953,20,971,22],[953,24,971,26],[953,25,971,27,"getIframeContentDocument"],[953,49,971,51],[953,50,971,52,"n"],[953,51,971,53],[953,52,971,54],[953,54,971,56],[954,8,972,12,"attributes"],[954,18,972,22],[954,19,972,23,"rr_src"],[954,25,972,29],[954,28,972,32,"attributes"],[954,38,972,42],[954,39,972,43,"src"],[954,42,972,46],[955,6,973,8],[956,6,974,8],[956,13,974,15,"attributes"],[956,23,974,25],[956,24,974,26,"src"],[956,27,974,29],[957,4,975,4],[958,4,976,4],[958,8,976,8,"isCustomElement"],[958,23,976,23],[959,4,977,4],[959,8,977,8],[960,6,978,8],[960,10,978,12,"customElements"],[960,24,978,26],[960,25,978,27,"get"],[960,28,978,30],[960,29,978,31,"tagName"],[960,36,978,38],[960,37,978,39],[960,39,979,12,"isCustomElement"],[960,54,979,27],[960,57,979,30],[960,61,979,34],[961,4,980,4],[961,5,980,5],[961,6,981,4],[961,13,981,11,"e"],[961,14,981,12],[961,16,981,14],[961,17,982,4],[962,4,983,4],[962,11,983,11],[963,6,984,8,"type"],[963,10,984,12],[963,12,984,14,"NodeType$3"],[963,22,984,24],[963,23,984,25,"Element"],[963,30,984,32],[964,6,985,8,"tagName"],[964,13,985,15],[965,6,986,8,"attributes"],[965,16,986,18],[966,6,987,8,"childNodes"],[966,16,987,18],[966,18,987,20],[966,20,987,22],[967,6,988,8,"isSVG"],[967,11,988,13],[967,13,988,15,"isSVGElement"],[967,25,988,27],[967,26,988,28,"n"],[967,27,988,29],[967,28,988,30],[967,32,988,34,"undefined"],[967,41,988,43],[968,6,989,8,"needBlock"],[968,15,989,17],[969,6,990,8,"rootId"],[969,12,990,14],[970,6,991,8,"isCustom"],[970,14,991,16],[970,16,991,18,"isCustomElement"],[971,4,992,4],[971,5,992,5],[972,2,993,0],[973,2,994,0],[973,11,994,9,"lowerIfExists"],[973,24,994,22,"lowerIfExists"],[973,25,994,23,"maybeAttr"],[973,34,994,32],[973,36,994,34],[974,4,995,4],[974,8,995,8,"maybeAttr"],[974,17,995,17],[974,22,995,22,"undefined"],[974,31,995,31],[974,35,995,35,"maybeAttr"],[974,44,995,44],[974,49,995,49],[974,53,995,53],[974,55,995,55],[975,6,996,8],[975,13,996,15],[975,15,996,17],[976,4,997,4],[976,5,997,5],[976,11,998,9],[977,6,999,8],[977,13,999,15,"maybeAttr"],[977,22,999,24],[977,23,999,25,"toLowerCase"],[977,34,999,36],[977,35,999,37],[977,36,999,38],[978,4,1000,4],[979,2,1001,0],[980,2,1002,0],[980,11,1002,9,"slimDOMExcluded"],[980,26,1002,24,"slimDOMExcluded"],[980,27,1002,25,"sn"],[980,29,1002,27],[980,31,1002,29,"slimDOMOptions"],[980,45,1002,43],[980,47,1002,45],[981,4,1003,4],[981,8,1003,8,"slimDOMOptions"],[981,22,1003,22],[981,23,1003,23,"comment"],[981,30,1003,30],[981,34,1003,34,"sn"],[981,36,1003,36],[981,37,1003,37,"type"],[981,41,1003,41],[981,46,1003,46,"NodeType$3"],[981,56,1003,56],[981,57,1003,57,"Comment"],[981,64,1003,64],[981,66,1003,66],[982,6,1004,8],[982,13,1004,15],[982,17,1004,19],[983,4,1005,4],[983,5,1005,5],[983,11,1006,9],[983,15,1006,13,"sn"],[983,17,1006,15],[983,18,1006,16,"type"],[983,22,1006,20],[983,27,1006,25,"NodeType$3"],[983,37,1006,35],[983,38,1006,36,"Element"],[983,45,1006,43],[983,47,1006,45],[984,6,1007,8],[984,10,1007,12,"slimDOMOptions"],[984,24,1007,26],[984,25,1007,27,"script"],[984,31,1007,33],[984,36,1008,13,"sn"],[984,38,1008,15],[984,39,1008,16,"tagName"],[984,46,1008,23],[984,51,1008,28],[984,59,1008,36],[984,63,1009,17,"sn"],[984,65,1009,19],[984,66,1009,20,"tagName"],[984,73,1009,27],[984,78,1009,32],[984,84,1009,38],[984,89,1010,21,"sn"],[984,91,1010,23],[984,92,1010,24,"attributes"],[984,102,1010,34],[984,103,1010,35,"rel"],[984,106,1010,38],[984,111,1010,43],[984,120,1010,52],[984,124,1011,24,"sn"],[984,126,1011,26],[984,127,1011,27,"attributes"],[984,137,1011,37],[984,138,1011,38,"rel"],[984,141,1011,41],[984,146,1011,46],[984,161,1011,61],[984,162,1011,63],[984,166,1012,17,"sn"],[984,168,1012,19],[984,169,1012,20,"tagName"],[984,176,1012,27],[984,181,1012,32],[984,187,1012,38],[984,191,1013,20,"sn"],[984,193,1013,22],[984,194,1013,23,"attributes"],[984,204,1013,33],[984,205,1013,34,"rel"],[984,208,1013,37],[984,213,1013,42],[984,223,1013,52],[984,227,1014,20],[984,234,1014,27,"sn"],[984,236,1014,29],[984,237,1014,30,"attributes"],[984,247,1014,40],[984,248,1014,41,"href"],[984,252,1014,45],[984,257,1014,50],[984,265,1014,58],[984,269,1015,20,"extractFileExtension"],[984,289,1015,40],[984,290,1015,41,"sn"],[984,292,1015,43],[984,293,1015,44,"attributes"],[984,303,1015,54],[984,304,1015,55,"href"],[984,308,1015,59],[984,309,1015,60],[984,314,1015,65],[984,318,1015,70],[984,319,1015,71],[984,321,1015,73],[985,8,1016,12],[985,15,1016,19],[985,19,1016,23],[986,6,1017,8],[986,7,1017,9],[986,13,1018,13],[986,17,1018,17,"slimDOMOptions"],[986,31,1018,31],[986,32,1018,32,"headFavicon"],[986,43,1018,43],[986,48,1019,14,"sn"],[986,50,1019,16],[986,51,1019,17,"tagName"],[986,58,1019,24],[986,63,1019,29],[986,69,1019,35],[986,73,1019,39,"sn"],[986,75,1019,41],[986,76,1019,42,"attributes"],[986,86,1019,52],[986,87,1019,53,"rel"],[986,90,1019,56],[986,95,1019,61],[986,110,1019,76],[986,114,1020,17,"sn"],[986,116,1020,19],[986,117,1020,20,"tagName"],[986,124,1020,27],[986,129,1020,32],[986,135,1020,38],[986,140,1021,21,"lowerIfExists"],[986,153,1021,34],[986,154,1021,35,"sn"],[986,156,1021,37],[986,157,1021,38,"attributes"],[986,167,1021,48],[986,168,1021,49,"name"],[986,172,1021,53],[986,173,1021,54],[986,174,1021,55,"match"],[986,179,1021,60],[986,180,1021,61],[986,215,1021,96],[986,216,1021,97],[986,220,1022,24,"lowerIfExists"],[986,233,1022,37],[986,234,1022,38,"sn"],[986,236,1022,40],[986,237,1022,41,"attributes"],[986,247,1022,51],[986,248,1022,52,"name"],[986,252,1022,56],[986,253,1022,57],[986,258,1022,62],[986,276,1022,80],[986,280,1023,24,"lowerIfExists"],[986,293,1023,37],[986,294,1023,38,"sn"],[986,296,1023,40],[986,297,1023,41,"attributes"],[986,307,1023,51],[986,308,1023,52,"rel"],[986,311,1023,55],[986,312,1023,56],[986,317,1023,61],[986,323,1023,67],[986,327,1024,24,"lowerIfExists"],[986,340,1024,37],[986,341,1024,38,"sn"],[986,343,1024,40],[986,344,1024,41,"attributes"],[986,354,1024,51],[986,355,1024,52,"rel"],[986,358,1024,55],[986,359,1024,56],[986,364,1024,61],[986,382,1024,79],[986,386,1025,24,"lowerIfExists"],[986,399,1025,37],[986,400,1025,38,"sn"],[986,402,1025,40],[986,403,1025,41,"attributes"],[986,413,1025,51],[986,414,1025,52,"rel"],[986,417,1025,55],[986,418,1025,56],[986,423,1025,61],[986,438,1025,76],[986,439,1025,78],[986,440,1025,79],[986,442,1025,81],[987,8,1026,12],[987,15,1026,19],[987,19,1026,23],[988,6,1027,8],[988,7,1027,9],[988,13,1028,13],[988,17,1028,17,"sn"],[988,19,1028,19],[988,20,1028,20,"tagName"],[988,27,1028,27],[988,32,1028,32],[988,38,1028,38],[988,40,1028,40],[989,8,1029,12],[989,12,1029,16,"slimDOMOptions"],[989,26,1029,30],[989,27,1029,31,"headMetaDescKeywords"],[989,47,1029,51],[989,51,1030,16,"lowerIfExists"],[989,64,1030,29],[989,65,1030,30,"sn"],[989,67,1030,32],[989,68,1030,33,"attributes"],[989,78,1030,43],[989,79,1030,44,"name"],[989,83,1030,48],[989,84,1030,49],[989,85,1030,50,"match"],[989,90,1030,55],[989,91,1030,56],[989,115,1030,80],[989,116,1030,81],[989,118,1030,83],[990,10,1031,16],[990,17,1031,23],[990,21,1031,27],[991,8,1032,12],[991,9,1032,13],[991,15,1033,17],[991,19,1033,21,"slimDOMOptions"],[991,33,1033,35],[991,34,1033,36,"headMetaSocial"],[991,48,1033,50],[991,53,1034,17,"lowerIfExists"],[991,66,1034,30],[991,67,1034,31,"sn"],[991,69,1034,33],[991,70,1034,34,"attributes"],[991,80,1034,44],[991,81,1034,45,"property"],[991,89,1034,53],[991,90,1034,54],[991,91,1034,55,"match"],[991,96,1034,60],[991,97,1034,61],[991,116,1034,80],[991,117,1034,81],[991,121,1035,20,"lowerIfExists"],[991,134,1035,33],[991,135,1035,34,"sn"],[991,137,1035,36],[991,138,1035,37,"attributes"],[991,148,1035,47],[991,149,1035,48,"name"],[991,153,1035,52],[991,154,1035,53],[991,155,1035,54,"match"],[991,160,1035,59],[991,161,1035,60],[991,177,1035,76],[991,178,1035,77],[991,182,1036,20,"lowerIfExists"],[991,195,1036,33],[991,196,1036,34,"sn"],[991,198,1036,36],[991,199,1036,37,"attributes"],[991,209,1036,47],[991,210,1036,48,"name"],[991,214,1036,52],[991,215,1036,53],[991,220,1036,58],[991,231,1036,69],[991,232,1036,70],[991,234,1036,72],[992,10,1037,16],[992,17,1037,23],[992,21,1037,27],[993,8,1038,12],[993,9,1038,13],[993,15,1039,17],[993,19,1039,21,"slimDOMOptions"],[993,33,1039,35],[993,34,1039,36,"headMetaRobots"],[993,48,1039,50],[993,53,1040,17,"lowerIfExists"],[993,66,1040,30],[993,67,1040,31,"sn"],[993,69,1040,33],[993,70,1040,34,"attributes"],[993,80,1040,44],[993,81,1040,45,"name"],[993,85,1040,49],[993,86,1040,50],[993,91,1040,55],[993,99,1040,63],[993,103,1041,20,"lowerIfExists"],[993,116,1041,33],[993,117,1041,34,"sn"],[993,119,1041,36],[993,120,1041,37,"attributes"],[993,130,1041,47],[993,131,1041,48,"name"],[993,135,1041,52],[993,136,1041,53],[993,141,1041,58],[993,152,1041,69],[993,156,1042,20,"lowerIfExists"],[993,169,1042,33],[993,170,1042,34,"sn"],[993,172,1042,36],[993,173,1042,37,"attributes"],[993,183,1042,47],[993,184,1042,48,"name"],[993,188,1042,52],[993,189,1042,53],[993,194,1042,58],[993,203,1042,67],[993,204,1042,68],[993,206,1042,70],[994,10,1043,16],[994,17,1043,23],[994,21,1043,27],[995,8,1044,12],[995,9,1044,13],[995,15,1045,17],[995,19,1045,21,"slimDOMOptions"],[995,33,1045,35],[995,34,1045,36,"headMetaHttpEquiv"],[995,51,1045,53],[995,55,1046,16,"sn"],[995,57,1046,18],[995,58,1046,19,"attributes"],[995,68,1046,29],[995,69,1046,30],[995,81,1046,42],[995,82,1046,43],[995,87,1046,48,"undefined"],[995,96,1046,57],[995,98,1046,59],[996,10,1047,16],[996,17,1047,23],[996,21,1047,27],[997,8,1048,12],[997,9,1048,13],[997,15,1049,17],[997,19,1049,21,"slimDOMOptions"],[997,33,1049,35],[997,34,1049,36,"headMetaAuthorship"],[997,52,1049,54],[997,57,1050,17,"lowerIfExists"],[997,70,1050,30],[997,71,1050,31,"sn"],[997,73,1050,33],[997,74,1050,34,"attributes"],[997,84,1050,44],[997,85,1050,45,"name"],[997,89,1050,49],[997,90,1050,50],[997,95,1050,55],[997,103,1050,63],[997,107,1051,20,"lowerIfExists"],[997,120,1051,33],[997,121,1051,34,"sn"],[997,123,1051,36],[997,124,1051,37,"attributes"],[997,134,1051,47],[997,135,1051,48,"name"],[997,139,1051,52],[997,140,1051,53],[997,145,1051,58],[997,156,1051,69],[997,160,1052,20,"lowerIfExists"],[997,173,1052,33],[997,174,1052,34,"sn"],[997,176,1052,36],[997,177,1052,37,"attributes"],[997,187,1052,47],[997,188,1052,48,"name"],[997,192,1052,52],[997,193,1052,53],[997,198,1052,58],[997,209,1052,69],[997,213,1053,20,"lowerIfExists"],[997,226,1053,33],[997,227,1053,34,"sn"],[997,229,1053,36],[997,230,1053,37,"attributes"],[997,240,1053,47],[997,241,1053,48,"name"],[997,245,1053,52],[997,246,1053,53],[997,251,1053,58],[997,262,1053,69],[997,266,1054,20,"lowerIfExists"],[997,279,1054,33],[997,280,1054,34,"sn"],[997,282,1054,36],[997,283,1054,37,"attributes"],[997,293,1054,47],[997,294,1054,48,"name"],[997,298,1054,52],[997,299,1054,53],[997,304,1054,58],[997,312,1054,66],[997,316,1055,20,"lowerIfExists"],[997,329,1055,33],[997,330,1055,34,"sn"],[997,332,1055,36],[997,333,1055,37,"attributes"],[997,343,1055,47],[997,344,1055,48,"property"],[997,352,1055,56],[997,353,1055,57],[997,354,1055,58,"match"],[997,359,1055,63],[997,360,1055,64],[997,371,1055,75],[997,372,1055,76],[997,376,1056,20,"lowerIfExists"],[997,389,1056,33],[997,390,1056,34,"sn"],[997,392,1056,36],[997,393,1056,37,"attributes"],[997,403,1056,47],[997,404,1056,48,"property"],[997,412,1056,56],[997,413,1056,57],[997,414,1056,58,"match"],[997,419,1056,63],[997,420,1056,64],[997,431,1056,75],[997,432,1056,76],[997,433,1056,77],[997,435,1056,79],[998,10,1057,16],[998,17,1057,23],[998,21,1057,27],[999,8,1058,12],[999,9,1058,13],[999,15,1059,17],[999,19,1059,21,"slimDOMOptions"],[999,33,1059,35],[999,34,1059,36,"headMetaVerification"],[999,54,1059,56],[999,59,1060,17,"lowerIfExists"],[999,72,1060,30],[999,73,1060,31,"sn"],[999,75,1060,33],[999,76,1060,34,"attributes"],[999,86,1060,44],[999,87,1060,45,"name"],[999,91,1060,49],[999,92,1060,50],[999,97,1060,55],[999,123,1060,81],[999,127,1061,20,"lowerIfExists"],[999,140,1061,33],[999,141,1061,34,"sn"],[999,143,1061,36],[999,144,1061,37,"attributes"],[999,154,1061,47],[999,155,1061,48,"name"],[999,159,1061,52],[999,160,1061,53],[999,165,1061,58],[999,186,1061,79],[999,190,1062,20,"lowerIfExists"],[999,203,1062,33],[999,204,1062,34,"sn"],[999,206,1062,36],[999,207,1062,37,"attributes"],[999,217,1062,47],[999,218,1062,48,"name"],[999,222,1062,52],[999,223,1062,53],[999,228,1062,58],[999,240,1062,70],[999,244,1063,20,"lowerIfExists"],[999,257,1063,33],[999,258,1063,34,"sn"],[999,260,1063,36],[999,261,1063,37,"attributes"],[999,271,1063,47],[999,272,1063,48,"name"],[999,276,1063,52],[999,277,1063,53],[999,282,1063,58],[999,299,1063,75],[999,303,1064,20,"lowerIfExists"],[999,316,1064,33],[999,317,1064,34,"sn"],[999,319,1064,36],[999,320,1064,37,"attributes"],[999,330,1064,47],[999,331,1064,48,"name"],[999,335,1064,52],[999,336,1064,53],[999,341,1064,58],[999,352,1064,69],[999,356,1065,20,"lowerIfExists"],[999,369,1065,33],[999,370,1065,34,"sn"],[999,372,1065,36],[999,373,1065,37,"attributes"],[999,383,1065,47],[999,384,1065,48,"name"],[999,388,1065,52],[999,389,1065,53],[999,394,1065,58],[999,408,1065,72],[999,412,1066,20,"lowerIfExists"],[999,425,1066,33],[999,426,1066,34,"sn"],[999,428,1066,36],[999,429,1066,37,"attributes"],[999,439,1066,47],[999,440,1066,48,"name"],[999,444,1066,52],[999,445,1066,53],[999,450,1066,58],[999,478,1066,86],[999,479,1066,87],[999,481,1066,89],[1000,10,1067,16],[1000,17,1067,23],[1000,21,1067,27],[1001,8,1068,12],[1002,6,1069,8],[1003,4,1070,4],[1004,4,1071,4],[1004,11,1071,11],[1004,16,1071,16],[1005,2,1072,0],[1006,2,1073,0],[1006,11,1073,9,"serializeNodeWithId"],[1006,30,1073,28,"serializeNodeWithId"],[1006,31,1073,29,"n"],[1006,32,1073,30],[1006,34,1073,32,"options"],[1006,41,1073,39],[1006,43,1073,41],[1007,4,1074,4],[1007,10,1074,10],[1008,6,1074,12,"doc"],[1008,9,1074,15],[1009,6,1074,17,"mirror"],[1009,12,1074,23],[1010,6,1074,25,"blockClass"],[1010,16,1074,35],[1011,6,1074,37,"blockSelector"],[1011,19,1074,50],[1012,6,1074,52,"unblockSelector"],[1012,21,1074,67],[1013,6,1074,69,"maskAllText"],[1013,17,1074,80],[1014,6,1074,82,"maskTextClass"],[1014,19,1074,95],[1015,6,1074,97,"unmaskTextClass"],[1015,21,1074,112],[1016,6,1074,114,"maskTextSelector"],[1016,22,1074,130],[1017,6,1074,132,"unmaskTextSelector"],[1017,24,1074,150],[1018,6,1074,152,"skipChild"],[1018,15,1074,161],[1018,18,1074,164],[1018,23,1074,169],[1019,6,1074,171,"inlineStylesheet"],[1019,22,1074,187],[1019,25,1074,190],[1019,29,1074,194],[1020,6,1074,196,"maskInputOptions"],[1020,22,1074,212],[1020,25,1074,215],[1020,26,1074,216],[1020,27,1074,217],[1021,6,1074,219,"maskAttributeFn"],[1021,21,1074,234],[1022,6,1074,236,"maskTextFn"],[1022,16,1074,246],[1023,6,1074,248,"maskInputFn"],[1023,17,1074,259],[1024,6,1074,261,"slimDOMOptions"],[1024,20,1074,275],[1025,6,1074,277,"dataURLOptions"],[1025,20,1074,291],[1025,23,1074,294],[1025,24,1074,295],[1025,25,1074,296],[1026,6,1074,298,"inlineImages"],[1026,18,1074,310],[1026,21,1074,313],[1026,26,1074,318],[1027,6,1074,320,"recordCanvas"],[1027,18,1074,332],[1027,21,1074,335],[1027,26,1074,340],[1028,6,1074,342,"onSerialize"],[1028,17,1074,353],[1029,6,1074,355,"onIframeLoad"],[1029,18,1074,367],[1030,6,1074,369,"iframeLoadTimeout"],[1030,23,1074,386],[1030,26,1074,389],[1030,30,1074,393],[1031,6,1074,395,"onStylesheetLoad"],[1031,22,1074,411],[1032,6,1074,413,"stylesheetLoadTimeout"],[1032,27,1074,434],[1032,30,1074,437],[1032,34,1074,441],[1033,6,1074,443,"keepIframeSrcFn"],[1033,21,1074,458],[1033,24,1074,461,"keepIframeSrcFn"],[1033,25,1074,461],[1033,30,1074,467],[1033,35,1074,472],[1034,6,1074,474,"newlyAddedElement"],[1034,23,1074,491],[1034,26,1074,494],[1035,4,1074,501],[1035,5,1074,502],[1035,8,1074,505,"options"],[1035,15,1074,512],[1036,4,1075,4],[1036,8,1075,8],[1037,6,1075,10,"preserveWhiteSpace"],[1037,24,1075,28],[1037,27,1075,31],[1038,4,1075,36],[1038,5,1075,37],[1038,8,1075,40,"options"],[1038,15,1075,47],[1039,4,1076,4],[1039,10,1076,10,"_serializedNode"],[1039,25,1076,25],[1039,28,1076,28,"serializeNode"],[1039,41,1076,41],[1039,42,1076,42,"n"],[1039,43,1076,43],[1039,45,1076,45],[1040,6,1077,8,"doc"],[1040,9,1077,11],[1041,6,1078,8,"mirror"],[1041,12,1078,14],[1042,6,1079,8,"blockClass"],[1042,16,1079,18],[1043,6,1080,8,"blockSelector"],[1043,19,1080,21],[1044,6,1081,8,"maskAllText"],[1044,17,1081,19],[1045,6,1082,8,"unblockSelector"],[1045,21,1082,23],[1046,6,1083,8,"maskTextClass"],[1046,19,1083,21],[1047,6,1084,8,"unmaskTextClass"],[1047,21,1084,23],[1048,6,1085,8,"maskTextSelector"],[1048,22,1085,24],[1049,6,1086,8,"unmaskTextSelector"],[1049,24,1086,26],[1050,6,1087,8,"inlineStylesheet"],[1050,22,1087,24],[1051,6,1088,8,"maskInputOptions"],[1051,22,1088,24],[1052,6,1089,8,"maskAttributeFn"],[1052,21,1089,23],[1053,6,1090,8,"maskTextFn"],[1053,16,1090,18],[1054,6,1091,8,"maskInputFn"],[1054,17,1091,19],[1055,6,1092,8,"dataURLOptions"],[1055,20,1092,22],[1056,6,1093,8,"inlineImages"],[1056,18,1093,20],[1057,6,1094,8,"recordCanvas"],[1057,18,1094,20],[1058,6,1095,8,"keepIframeSrcFn"],[1058,21,1095,23],[1059,6,1096,8,"newlyAddedElement"],[1060,4,1097,4],[1060,5,1097,5],[1060,6,1097,6],[1061,4,1098,4],[1061,8,1098,8],[1061,9,1098,9,"_serializedNode"],[1061,24,1098,24],[1061,26,1098,26],[1062,6,1099,8,"console"],[1062,13,1099,15],[1062,14,1099,16,"warn"],[1062,18,1099,20],[1062,19,1099,21,"n"],[1062,20,1099,22],[1062,22,1099,24],[1062,38,1099,40],[1062,39,1099,41],[1063,6,1100,8],[1063,13,1100,15],[1063,17,1100,19],[1064,4,1101,4],[1065,4,1102,4],[1065,8,1102,8,"id"],[1065,10,1102,10],[1066,4,1103,4],[1066,8,1103,8,"mirror"],[1066,14,1103,14],[1066,15,1103,15,"hasNode"],[1066,22,1103,22],[1066,23,1103,23,"n"],[1066,24,1103,24],[1066,25,1103,25],[1066,27,1103,27],[1067,6,1104,8,"id"],[1067,8,1104,10],[1067,11,1104,13,"mirror"],[1067,17,1104,19],[1067,18,1104,20,"getId"],[1067,23,1104,25],[1067,24,1104,26,"n"],[1067,25,1104,27],[1067,26,1104,28],[1068,4,1105,4],[1068,5,1105,5],[1068,11,1106,9],[1068,15,1106,13,"slimDOMExcluded"],[1068,30,1106,28],[1068,31,1106,29,"_serializedNode"],[1068,46,1106,44],[1068,48,1106,46,"slimDOMOptions"],[1068,62,1106,60],[1068,63,1106,61],[1068,67,1107,9],[1068,68,1107,10,"preserveWhiteSpace"],[1068,86,1107,28],[1068,90,1108,12,"_serializedNode"],[1068,105,1108,27],[1068,106,1108,28,"type"],[1068,110,1108,32],[1068,115,1108,37,"NodeType$3"],[1068,125,1108,47],[1068,126,1108,48,"Text"],[1068,130,1108,52],[1068,134,1109,12],[1068,135,1109,13,"_serializedNode"],[1068,150,1109,28],[1068,151,1109,29,"isStyle"],[1068,158,1109,36],[1068,162,1110,12],[1068,163,1110,13,"_serializedNode"],[1068,178,1110,28],[1068,179,1110,29,"textContent"],[1068,190,1110,40],[1068,191,1110,41,"replace"],[1068,198,1110,48],[1068,199,1110,49],[1068,212,1110,62],[1068,214,1110,64],[1068,216,1110,66],[1068,217,1110,67],[1068,218,1110,68,"length"],[1068,224,1110,75],[1068,226,1110,77],[1069,6,1111,8,"id"],[1069,8,1111,10],[1069,11,1111,13,"IGNORED_NODE"],[1069,23,1111,25],[1070,4,1112,4],[1070,5,1112,5],[1070,11,1113,9],[1071,6,1114,8,"id"],[1071,8,1114,10],[1071,11,1114,13,"genId"],[1071,16,1114,18],[1071,17,1114,19],[1071,18,1114,20],[1072,4,1115,4],[1073,4,1116,4],[1073,10,1116,10,"serializedNode"],[1073,24,1116,24],[1073,27,1116,27,"Object"],[1073,33,1116,33],[1073,34,1116,34,"assign"],[1073,40,1116,40],[1073,41,1116,41,"_serializedNode"],[1073,56,1116,56],[1073,58,1116,58],[1074,6,1116,60,"id"],[1075,4,1116,63],[1075,5,1116,64],[1075,6,1116,65],[1076,4,1117,4,"mirror"],[1076,10,1117,10],[1076,11,1117,11,"add"],[1076,14,1117,14],[1076,15,1117,15,"n"],[1076,16,1117,16],[1076,18,1117,18,"serializedNode"],[1076,32,1117,32],[1076,33,1117,33],[1077,4,1118,4],[1077,8,1118,8,"id"],[1077,10,1118,10],[1077,15,1118,15,"IGNORED_NODE"],[1077,27,1118,27],[1077,29,1118,29],[1078,6,1119,8],[1078,13,1119,15],[1078,17,1119,19],[1079,4,1120,4],[1080,4,1121,4],[1080,8,1121,8,"onSerialize"],[1080,19,1121,19],[1080,21,1121,21],[1081,6,1122,8,"onSerialize"],[1081,17,1122,19],[1081,18,1122,20,"n"],[1081,19,1122,21],[1081,20,1122,22],[1082,4,1123,4],[1083,4,1124,4],[1083,8,1124,8,"recordChild"],[1083,19,1124,19],[1083,22,1124,22],[1083,23,1124,23,"skipChild"],[1083,32,1124,32],[1084,4,1125,4],[1084,8,1125,8,"serializedNode"],[1084,22,1125,22],[1084,23,1125,23,"type"],[1084,27,1125,27],[1084,32,1125,32,"NodeType$3"],[1084,42,1125,42],[1084,43,1125,43,"Element"],[1084,50,1125,50],[1084,52,1125,52],[1085,6,1126,8,"recordChild"],[1085,17,1126,19],[1085,20,1126,22,"recordChild"],[1085,31,1126,33],[1085,35,1126,37],[1085,36,1126,38,"serializedNode"],[1085,50,1126,52],[1085,51,1126,53,"needBlock"],[1085,60,1126,62],[1086,6,1127,8],[1086,13,1127,15,"serializedNode"],[1086,27,1127,29],[1086,28,1127,30,"needBlock"],[1086,37,1127,39],[1087,6,1128,8],[1087,12,1128,14,"shadowRoot"],[1087,22,1128,24],[1087,25,1128,27,"n"],[1087,26,1128,28],[1087,27,1128,29,"shadowRoot"],[1087,37,1128,39],[1088,6,1129,8],[1088,10,1129,12,"shadowRoot"],[1088,20,1129,22],[1088,24,1129,26,"isNativeShadowDom"],[1088,41,1129,43],[1088,42,1129,44,"shadowRoot"],[1088,52,1129,54],[1088,53,1129,55],[1088,55,1130,12,"serializedNode"],[1088,69,1130,26],[1088,70,1130,27,"isShadowHost"],[1088,82,1130,39],[1088,85,1130,42],[1088,89,1130,46],[1089,4,1131,4],[1090,4,1132,4],[1090,8,1132,8],[1090,9,1132,9,"serializedNode"],[1090,23,1132,23],[1090,24,1132,24,"type"],[1090,28,1132,28],[1090,33,1132,33,"NodeType$3"],[1090,43,1132,43],[1090,44,1132,44,"Document"],[1090,52,1132,52],[1090,56,1133,8,"serializedNode"],[1090,70,1133,22],[1090,71,1133,23,"type"],[1090,75,1133,27],[1090,80,1133,32,"NodeType$3"],[1090,90,1133,42],[1090,91,1133,43,"Element"],[1090,98,1133,50],[1090,103,1134,8,"recordChild"],[1090,114,1134,19],[1090,116,1134,21],[1091,6,1135,8],[1091,10,1135,12,"slimDOMOptions"],[1091,24,1135,26],[1091,25,1135,27,"headWhitespace"],[1091,39,1135,41],[1091,43,1136,12,"serializedNode"],[1091,57,1136,26],[1091,58,1136,27,"type"],[1091,62,1136,31],[1091,67,1136,36,"NodeType$3"],[1091,77,1136,46],[1091,78,1136,47,"Element"],[1091,85,1136,54],[1091,89,1137,12,"serializedNode"],[1091,103,1137,26],[1091,104,1137,27,"tagName"],[1091,111,1137,34],[1091,116,1137,39],[1091,122,1137,45],[1091,124,1137,47],[1092,8,1138,12,"preserveWhiteSpace"],[1092,26,1138,30],[1092,29,1138,33],[1092,34,1138,38],[1093,6,1139,8],[1094,6,1140,8],[1094,12,1140,14,"bypassOptions"],[1094,25,1140,27],[1094,28,1140,30],[1095,8,1141,12,"doc"],[1095,11,1141,15],[1096,8,1142,12,"mirror"],[1096,14,1142,18],[1097,8,1143,12,"blockClass"],[1097,18,1143,22],[1098,8,1144,12,"blockSelector"],[1098,21,1144,25],[1099,8,1145,12,"maskAllText"],[1099,19,1145,23],[1100,8,1146,12,"unblockSelector"],[1100,23,1146,27],[1101,8,1147,12,"maskTextClass"],[1101,21,1147,25],[1102,8,1148,12,"unmaskTextClass"],[1102,23,1148,27],[1103,8,1149,12,"maskTextSelector"],[1103,24,1149,28],[1104,8,1150,12,"unmaskTextSelector"],[1104,26,1150,30],[1105,8,1151,12,"skipChild"],[1105,17,1151,21],[1106,8,1152,12,"inlineStylesheet"],[1106,24,1152,28],[1107,8,1153,12,"maskInputOptions"],[1107,24,1153,28],[1108,8,1154,12,"maskAttributeFn"],[1108,23,1154,27],[1109,8,1155,12,"maskTextFn"],[1109,18,1155,22],[1110,8,1156,12,"maskInputFn"],[1110,19,1156,23],[1111,8,1157,12,"slimDOMOptions"],[1111,22,1157,26],[1112,8,1158,12,"dataURLOptions"],[1112,22,1158,26],[1113,8,1159,12,"inlineImages"],[1113,20,1159,24],[1114,8,1160,12,"recordCanvas"],[1114,20,1160,24],[1115,8,1161,12,"preserveWhiteSpace"],[1115,26,1161,30],[1116,8,1162,12,"onSerialize"],[1116,19,1162,23],[1117,8,1163,12,"onIframeLoad"],[1117,20,1163,24],[1118,8,1164,12,"iframeLoadTimeout"],[1118,25,1164,29],[1119,8,1165,12,"onStylesheetLoad"],[1119,24,1165,28],[1120,8,1166,12,"stylesheetLoadTimeout"],[1120,29,1166,33],[1121,8,1167,12,"keepIframeSrcFn"],[1122,6,1168,8],[1122,7,1168,9],[1123,6,1169,8],[1123,11,1169,13],[1123,17,1169,19,"childN"],[1123,23,1169,25],[1123,27,1169,29,"Array"],[1123,32,1169,34],[1123,33,1169,35,"from"],[1123,37,1169,39],[1123,38,1169,40,"n"],[1123,39,1169,41],[1123,40,1169,42,"childNodes"],[1123,50,1169,52],[1123,51,1169,53],[1123,53,1169,55],[1124,8,1170,12],[1124,14,1170,18,"serializedChildNode"],[1124,33,1170,37],[1124,36,1170,40,"serializeNodeWithId"],[1124,55,1170,59],[1124,56,1170,60,"childN"],[1124,62,1170,66],[1124,64,1170,68,"bypassOptions"],[1124,77,1170,81],[1124,78,1170,82],[1125,8,1171,12],[1125,12,1171,16,"serializedChildNode"],[1125,31,1171,35],[1125,33,1171,37],[1126,10,1172,16,"serializedNode"],[1126,24,1172,30],[1126,25,1172,31,"childNodes"],[1126,35,1172,41],[1126,36,1172,42,"push"],[1126,40,1172,46],[1126,41,1172,47,"serializedChildNode"],[1126,60,1172,66],[1126,61,1172,67],[1127,8,1173,12],[1128,6,1174,8],[1129,6,1175,8],[1129,10,1175,12,"isElement$1"],[1129,21,1175,23],[1129,22,1175,24,"n"],[1129,23,1175,25],[1129,24,1175,26],[1129,28,1175,30,"n"],[1129,29,1175,31],[1129,30,1175,32,"shadowRoot"],[1129,40,1175,42],[1129,42,1175,44],[1130,8,1176,12],[1130,13,1176,17],[1130,19,1176,23,"childN"],[1130,25,1176,29],[1130,29,1176,33,"Array"],[1130,34,1176,38],[1130,35,1176,39,"from"],[1130,39,1176,43],[1130,40,1176,44,"n"],[1130,41,1176,45],[1130,42,1176,46,"shadowRoot"],[1130,52,1176,56],[1130,53,1176,57,"childNodes"],[1130,63,1176,67],[1130,64,1176,68],[1130,66,1176,70],[1131,10,1177,16],[1131,16,1177,22,"serializedChildNode"],[1131,35,1177,41],[1131,38,1177,44,"serializeNodeWithId"],[1131,57,1177,63],[1131,58,1177,64,"childN"],[1131,64,1177,70],[1131,66,1177,72,"bypassOptions"],[1131,79,1177,85],[1131,80,1177,86],[1132,10,1178,16],[1132,14,1178,20,"serializedChildNode"],[1132,33,1178,39],[1132,35,1178,41],[1133,12,1179,20,"isNativeShadowDom"],[1133,29,1179,37],[1133,30,1179,38,"n"],[1133,31,1179,39],[1133,32,1179,40,"shadowRoot"],[1133,42,1179,50],[1133,43,1179,51],[1133,48,1180,25,"serializedChildNode"],[1133,67,1180,44],[1133,68,1180,45,"isShadow"],[1133,76,1180,53],[1133,79,1180,56],[1133,83,1180,60],[1133,84,1180,61],[1134,12,1181,20,"serializedNode"],[1134,26,1181,34],[1134,27,1181,35,"childNodes"],[1134,37,1181,45],[1134,38,1181,46,"push"],[1134,42,1181,50],[1134,43,1181,51,"serializedChildNode"],[1134,62,1181,70],[1134,63,1181,71],[1135,10,1182,16],[1136,8,1183,12],[1137,6,1184,8],[1138,4,1185,4],[1139,4,1186,4],[1139,8,1186,8,"n"],[1139,9,1186,9],[1139,10,1186,10,"parentNode"],[1139,20,1186,20],[1139,24,1187,8,"isShadowRoot"],[1139,36,1187,20],[1139,37,1187,21,"n"],[1139,38,1187,22],[1139,39,1187,23,"parentNode"],[1139,49,1187,33],[1139,50,1187,34],[1139,54,1188,8,"isNativeShadowDom"],[1139,71,1188,25],[1139,72,1188,26,"n"],[1139,73,1188,27],[1139,74,1188,28,"parentNode"],[1139,84,1188,38],[1139,85,1188,39],[1139,87,1188,41],[1140,6,1189,8,"serializedNode"],[1140,20,1189,22],[1140,21,1189,23,"isShadow"],[1140,29,1189,31],[1140,32,1189,34],[1140,36,1189,38],[1141,4,1190,4],[1142,4,1191,4],[1142,8,1191,8,"serializedNode"],[1142,22,1191,22],[1142,23,1191,23,"type"],[1142,27,1191,27],[1142,32,1191,32,"NodeType$3"],[1142,42,1191,42],[1142,43,1191,43,"Element"],[1142,50,1191,50],[1142,54,1192,8,"serializedNode"],[1142,68,1192,22],[1142,69,1192,23,"tagName"],[1142,76,1192,30],[1142,81,1192,35],[1142,89,1192,43],[1142,91,1192,45],[1143,6,1193,8,"onceIframeLoaded"],[1143,22,1193,24],[1143,23,1193,25,"n"],[1143,24,1193,26],[1143,26,1193,28],[1143,32,1193,34],[1144,8,1194,12],[1144,14,1194,18,"iframeDoc"],[1144,23,1194,27],[1144,26,1194,30,"getIframeContentDocument"],[1144,50,1194,54],[1144,51,1194,55,"n"],[1144,52,1194,56],[1144,53,1194,57],[1145,8,1195,12],[1145,12,1195,16,"iframeDoc"],[1145,21,1195,25],[1145,25,1195,29,"onIframeLoad"],[1145,37,1195,41],[1145,39,1195,43],[1146,10,1196,16],[1146,16,1196,22,"serializedIframeNode"],[1146,36,1196,42],[1146,39,1196,45,"serializeNodeWithId"],[1146,58,1196,64],[1146,59,1196,65,"iframeDoc"],[1146,68,1196,74],[1146,70,1196,76],[1147,12,1197,20,"doc"],[1147,15,1197,23],[1147,17,1197,25,"iframeDoc"],[1147,26,1197,34],[1148,12,1198,20,"mirror"],[1148,18,1198,26],[1149,12,1199,20,"blockClass"],[1149,22,1199,30],[1150,12,1200,20,"blockSelector"],[1150,25,1200,33],[1151,12,1201,20,"unblockSelector"],[1151,27,1201,35],[1152,12,1202,20,"maskAllText"],[1152,23,1202,31],[1153,12,1203,20,"maskTextClass"],[1153,25,1203,33],[1154,12,1204,20,"unmaskTextClass"],[1154,27,1204,35],[1155,12,1205,20,"maskTextSelector"],[1155,28,1205,36],[1156,12,1206,20,"unmaskTextSelector"],[1156,30,1206,38],[1157,12,1207,20,"skipChild"],[1157,21,1207,29],[1157,23,1207,31],[1157,28,1207,36],[1158,12,1208,20,"inlineStylesheet"],[1158,28,1208,36],[1159,12,1209,20,"maskInputOptions"],[1159,28,1209,36],[1160,12,1210,20,"maskAttributeFn"],[1160,27,1210,35],[1161,12,1211,20,"maskTextFn"],[1161,22,1211,30],[1162,12,1212,20,"maskInputFn"],[1162,23,1212,31],[1163,12,1213,20,"slimDOMOptions"],[1163,26,1213,34],[1164,12,1214,20,"dataURLOptions"],[1164,26,1214,34],[1165,12,1215,20,"inlineImages"],[1165,24,1215,32],[1166,12,1216,20,"recordCanvas"],[1166,24,1216,32],[1167,12,1217,20,"preserveWhiteSpace"],[1167,30,1217,38],[1168,12,1218,20,"onSerialize"],[1168,23,1218,31],[1169,12,1219,20,"onIframeLoad"],[1169,24,1219,32],[1170,12,1220,20,"iframeLoadTimeout"],[1170,29,1220,37],[1171,12,1221,20,"onStylesheetLoad"],[1171,28,1221,36],[1172,12,1222,20,"stylesheetLoadTimeout"],[1172,33,1222,41],[1173,12,1223,20,"keepIframeSrcFn"],[1174,10,1224,16],[1174,11,1224,17],[1174,12,1224,18],[1175,10,1225,16],[1175,14,1225,20,"serializedIframeNode"],[1175,34,1225,40],[1175,36,1225,42],[1176,12,1226,20,"onIframeLoad"],[1176,24,1226,32],[1176,25,1226,33,"n"],[1176,26,1226,34],[1176,28,1226,36,"serializedIframeNode"],[1176,48,1226,56],[1176,49,1226,57],[1177,10,1227,16],[1178,8,1228,12],[1179,6,1229,8],[1179,7,1229,9],[1179,9,1229,11,"iframeLoadTimeout"],[1179,26,1229,28],[1179,27,1229,29],[1180,4,1230,4],[1181,4,1231,4],[1181,8,1231,8,"serializedNode"],[1181,22,1231,22],[1181,23,1231,23,"type"],[1181,27,1231,27],[1181,32,1231,32,"NodeType$3"],[1181,42,1231,42],[1181,43,1231,43,"Element"],[1181,50,1231,50],[1181,54,1232,8,"serializedNode"],[1181,68,1232,22],[1181,69,1232,23,"tagName"],[1181,76,1232,30],[1181,81,1232,35],[1181,87,1232,41],[1181,91,1233,8],[1181,98,1233,15,"serializedNode"],[1181,112,1233,29],[1181,113,1233,30,"attributes"],[1181,123,1233,40],[1181,124,1233,41,"rel"],[1181,127,1233,44],[1181,132,1233,49],[1181,140,1233,57],[1181,145,1234,9,"serializedNode"],[1181,159,1234,23],[1181,160,1234,24,"attributes"],[1181,170,1234,34],[1181,171,1234,35,"rel"],[1181,174,1234,38],[1181,179,1234,43],[1181,191,1234,55],[1181,195,1235,13,"serializedNode"],[1181,209,1235,27],[1181,210,1235,28,"attributes"],[1181,220,1235,38],[1181,221,1235,39,"rel"],[1181,224,1235,42],[1181,229,1235,47],[1181,238,1235,56],[1181,242,1236,16],[1181,249,1236,23,"serializedNode"],[1181,263,1236,37],[1181,264,1236,38,"attributes"],[1181,274,1236,48],[1181,275,1236,49,"href"],[1181,279,1236,53],[1181,284,1236,58],[1181,292,1236,66],[1181,296,1237,16,"extractFileExtension"],[1181,316,1237,36],[1181,317,1237,37,"serializedNode"],[1181,331,1237,51],[1181,332,1237,52,"attributes"],[1181,342,1237,62],[1181,343,1237,63,"href"],[1181,347,1237,67],[1181,348,1237,68],[1181,353,1237,73],[1181,358,1237,79],[1181,359,1237,80],[1181,361,1237,82],[1182,6,1238,8,"onceStylesheetLoaded"],[1182,26,1238,28],[1182,27,1238,29,"n"],[1182,28,1238,30],[1182,30,1238,32],[1182,36,1238,38],[1183,8,1239,12],[1183,12,1239,16,"onStylesheetLoad"],[1183,28,1239,32],[1183,30,1239,34],[1184,10,1240,16],[1184,16,1240,22,"serializedLinkNode"],[1184,34,1240,40],[1184,37,1240,43,"serializeNodeWithId"],[1184,56,1240,62],[1184,57,1240,63,"n"],[1184,58,1240,64],[1184,60,1240,66],[1185,12,1241,20,"doc"],[1185,15,1241,23],[1186,12,1242,20,"mirror"],[1186,18,1242,26],[1187,12,1243,20,"blockClass"],[1187,22,1243,30],[1188,12,1244,20,"blockSelector"],[1188,25,1244,33],[1189,12,1245,20,"unblockSelector"],[1189,27,1245,35],[1190,12,1246,20,"maskAllText"],[1190,23,1246,31],[1191,12,1247,20,"maskTextClass"],[1191,25,1247,33],[1192,12,1248,20,"unmaskTextClass"],[1192,27,1248,35],[1193,12,1249,20,"maskTextSelector"],[1193,28,1249,36],[1194,12,1250,20,"unmaskTextSelector"],[1194,30,1250,38],[1195,12,1251,20,"skipChild"],[1195,21,1251,29],[1195,23,1251,31],[1195,28,1251,36],[1196,12,1252,20,"inlineStylesheet"],[1196,28,1252,36],[1197,12,1253,20,"maskInputOptions"],[1197,28,1253,36],[1198,12,1254,20,"maskAttributeFn"],[1198,27,1254,35],[1199,12,1255,20,"maskTextFn"],[1199,22,1255,30],[1200,12,1256,20,"maskInputFn"],[1200,23,1256,31],[1201,12,1257,20,"slimDOMOptions"],[1201,26,1257,34],[1202,12,1258,20,"dataURLOptions"],[1202,26,1258,34],[1203,12,1259,20,"inlineImages"],[1203,24,1259,32],[1204,12,1260,20,"recordCanvas"],[1204,24,1260,32],[1205,12,1261,20,"preserveWhiteSpace"],[1205,30,1261,38],[1206,12,1262,20,"onSerialize"],[1206,23,1262,31],[1207,12,1263,20,"onIframeLoad"],[1207,24,1263,32],[1208,12,1264,20,"iframeLoadTimeout"],[1208,29,1264,37],[1209,12,1265,20,"onStylesheetLoad"],[1209,28,1265,36],[1210,12,1266,20,"stylesheetLoadTimeout"],[1210,33,1266,41],[1211,12,1267,20,"keepIframeSrcFn"],[1212,10,1268,16],[1212,11,1268,17],[1212,12,1268,18],[1213,10,1269,16],[1213,14,1269,20,"serializedLinkNode"],[1213,32,1269,38],[1213,34,1269,40],[1214,12,1270,20,"onStylesheetLoad"],[1214,28,1270,36],[1214,29,1270,37,"n"],[1214,30,1270,38],[1214,32,1270,40,"serializedLinkNode"],[1214,50,1270,58],[1214,51,1270,59],[1215,10,1271,16],[1216,8,1272,12],[1217,6,1273,8],[1217,7,1273,9],[1217,9,1273,11,"stylesheetLoadTimeout"],[1217,30,1273,32],[1217,31,1273,33],[1218,4,1274,4],[1219,4,1275,4],[1219,11,1275,11,"serializedNode"],[1219,25,1275,25],[1220,2,1276,0],[1221,2,1277,0],[1221,11,1277,9,"snapshot"],[1221,19,1277,17,"snapshot"],[1221,20,1277,18,"n"],[1221,21,1277,19],[1221,23,1277,21,"options"],[1221,30,1277,28],[1221,32,1277,30],[1222,4,1278,4],[1222,10,1278,10],[1223,6,1278,12,"mirror"],[1223,12,1278,18],[1223,15,1278,21],[1223,19,1278,25,"Mirror"],[1223,25,1278,31],[1223,26,1278,32],[1223,27,1278,33],[1224,6,1278,35,"blockClass"],[1224,16,1278,45],[1224,19,1278,48],[1224,29,1278,58],[1225,6,1278,60,"blockSelector"],[1225,19,1278,73],[1225,22,1278,76],[1225,26,1278,80],[1226,6,1278,82,"unblockSelector"],[1226,21,1278,97],[1226,24,1278,100],[1226,28,1278,104],[1227,6,1278,106,"maskAllText"],[1227,17,1278,117],[1227,20,1278,120],[1227,25,1278,125],[1228,6,1278,127,"maskTextClass"],[1228,19,1278,140],[1228,22,1278,143],[1228,31,1278,152],[1229,6,1278,154,"unmaskTextClass"],[1229,21,1278,169],[1229,24,1278,172],[1229,28,1278,176],[1230,6,1278,178,"maskTextSelector"],[1230,22,1278,194],[1230,25,1278,197],[1230,29,1278,201],[1231,6,1278,203,"unmaskTextSelector"],[1231,24,1278,221],[1231,27,1278,224],[1231,31,1278,228],[1232,6,1278,230,"inlineStylesheet"],[1232,22,1278,246],[1232,25,1278,249],[1232,29,1278,253],[1233,6,1278,255,"inlineImages"],[1233,18,1278,267],[1233,21,1278,270],[1233,26,1278,275],[1234,6,1278,277,"recordCanvas"],[1234,18,1278,289],[1234,21,1278,292],[1234,26,1278,297],[1235,6,1278,299,"maskAllInputs"],[1235,19,1278,312],[1235,22,1278,315],[1235,27,1278,320],[1236,6,1278,322,"maskAttributeFn"],[1236,21,1278,337],[1237,6,1278,339,"maskTextFn"],[1237,16,1278,349],[1238,6,1278,351,"maskInputFn"],[1238,17,1278,362],[1239,6,1278,364,"slimDOM"],[1239,13,1278,371],[1239,16,1278,374],[1239,21,1278,379],[1240,6,1278,381,"dataURLOptions"],[1240,20,1278,395],[1241,6,1278,397,"preserveWhiteSpace"],[1241,24,1278,415],[1242,6,1278,417,"onSerialize"],[1242,17,1278,428],[1243,6,1278,430,"onIframeLoad"],[1243,18,1278,442],[1244,6,1278,444,"iframeLoadTimeout"],[1244,23,1278,461],[1245,6,1278,463,"onStylesheetLoad"],[1245,22,1278,479],[1246,6,1278,481,"stylesheetLoadTimeout"],[1246,27,1278,502],[1247,6,1278,504,"keepIframeSrcFn"],[1247,21,1278,519],[1247,24,1278,522,"keepIframeSrcFn"],[1247,25,1278,522],[1247,30,1278,528],[1248,4,1278,535],[1248,5,1278,536],[1248,8,1278,539,"options"],[1248,15,1278,546],[1248,19,1278,550],[1248,20,1278,551],[1248,21,1278,552],[1249,4,1279,4],[1249,10,1279,10,"maskInputOptions"],[1249,26,1279,26],[1249,29,1279,29,"maskAllInputs"],[1249,42,1279,42],[1249,47,1279,47],[1249,51,1279,51],[1249,54,1280,10],[1250,6,1281,12,"color"],[1250,11,1281,17],[1250,13,1281,19],[1250,17,1281,23],[1251,6,1282,12,"date"],[1251,10,1282,16],[1251,12,1282,18],[1251,16,1282,22],[1252,6,1283,12],[1252,22,1283,28],[1252,24,1283,30],[1252,28,1283,34],[1253,6,1284,12,"email"],[1253,11,1284,17],[1253,13,1284,19],[1253,17,1284,23],[1254,6,1285,12,"month"],[1254,11,1285,17],[1254,13,1285,19],[1254,17,1285,23],[1255,6,1286,12,"number"],[1255,12,1286,18],[1255,14,1286,20],[1255,18,1286,24],[1256,6,1287,12,"range"],[1256,11,1287,17],[1256,13,1287,19],[1256,17,1287,23],[1257,6,1288,12,"search"],[1257,12,1288,18],[1257,14,1288,20],[1257,18,1288,24],[1258,6,1289,12,"tel"],[1258,9,1289,15],[1258,11,1289,17],[1258,15,1289,21],[1259,6,1290,12,"text"],[1259,10,1290,16],[1259,12,1290,18],[1259,16,1290,22],[1260,6,1291,12,"time"],[1260,10,1291,16],[1260,12,1291,18],[1260,16,1291,22],[1261,6,1292,12,"url"],[1261,9,1292,15],[1261,11,1292,17],[1261,15,1292,21],[1262,6,1293,12,"week"],[1262,10,1293,16],[1262,12,1293,18],[1262,16,1293,22],[1263,6,1294,12,"textarea"],[1263,14,1294,20],[1263,16,1294,22],[1263,20,1294,26],[1264,6,1295,12,"select"],[1264,12,1295,18],[1264,14,1295,20],[1265,4,1296,8],[1265,5,1296,9],[1265,8,1297,10,"maskAllInputs"],[1265,21,1297,23],[1265,26,1297,28],[1265,31,1297,33],[1265,34,1298,14],[1265,35,1298,15],[1265,36,1298,16],[1265,39,1299,14,"maskAllInputs"],[1265,52,1299,27],[1266,4,1300,4],[1266,10,1300,10,"slimDOMOptions"],[1266,24,1300,24],[1266,27,1300,27,"slimDOM"],[1266,34,1300,34],[1266,39,1300,39],[1266,43,1300,43],[1266,47,1300,47,"slimDOM"],[1266,54,1300,54],[1266,59,1300,59],[1266,64,1300,64],[1266,67,1302,12],[1267,6,1303,16,"script"],[1267,12,1303,22],[1267,14,1303,24],[1267,18,1303,28],[1268,6,1304,16,"comment"],[1268,13,1304,23],[1268,15,1304,25],[1268,19,1304,29],[1269,6,1305,16,"headFavicon"],[1269,17,1305,27],[1269,19,1305,29],[1269,23,1305,33],[1270,6,1306,16,"headWhitespace"],[1270,20,1306,30],[1270,22,1306,32],[1270,26,1306,36],[1271,6,1307,16,"headMetaDescKeywords"],[1271,26,1307,36],[1271,28,1307,38,"slimDOM"],[1271,35,1307,45],[1271,40,1307,50],[1271,45,1307,55],[1272,6,1308,16,"headMetaSocial"],[1272,20,1308,30],[1272,22,1308,32],[1272,26,1308,36],[1273,6,1309,16,"headMetaRobots"],[1273,20,1309,30],[1273,22,1309,32],[1273,26,1309,36],[1274,6,1310,16,"headMetaHttpEquiv"],[1274,23,1310,33],[1274,25,1310,35],[1274,29,1310,39],[1275,6,1311,16,"headMetaAuthorship"],[1275,24,1311,34],[1275,26,1311,36],[1275,30,1311,40],[1276,6,1312,16,"headMetaVerification"],[1276,26,1312,36],[1276,28,1312,38],[1277,4,1313,12],[1277,5,1313,13],[1277,8,1314,10,"slimDOM"],[1277,15,1314,17],[1277,20,1314,22],[1277,25,1314,27],[1277,28,1315,14],[1277,29,1315,15],[1277,30,1315,16],[1277,33,1316,14,"slimDOM"],[1277,40,1316,21],[1278,4,1317,4],[1278,11,1317,11,"serializeNodeWithId"],[1278,30,1317,30],[1278,31,1317,31,"n"],[1278,32,1317,32],[1278,34,1317,34],[1279,6,1318,8,"doc"],[1279,9,1318,11],[1279,11,1318,13,"n"],[1279,12,1318,14],[1280,6,1319,8,"mirror"],[1280,12,1319,14],[1281,6,1320,8,"blockClass"],[1281,16,1320,18],[1282,6,1321,8,"blockSelector"],[1282,19,1321,21],[1283,6,1322,8,"unblockSelector"],[1283,21,1322,23],[1284,6,1323,8,"maskAllText"],[1284,17,1323,19],[1285,6,1324,8,"maskTextClass"],[1285,19,1324,21],[1286,6,1325,8,"unmaskTextClass"],[1286,21,1325,23],[1287,6,1326,8,"maskTextSelector"],[1287,22,1326,24],[1288,6,1327,8,"unmaskTextSelector"],[1288,24,1327,26],[1289,6,1328,8,"skipChild"],[1289,15,1328,17],[1289,17,1328,19],[1289,22,1328,24],[1290,6,1329,8,"inlineStylesheet"],[1290,22,1329,24],[1291,6,1330,8,"maskInputOptions"],[1291,22,1330,24],[1292,6,1331,8,"maskAttributeFn"],[1292,21,1331,23],[1293,6,1332,8,"maskTextFn"],[1293,16,1332,18],[1294,6,1333,8,"maskInputFn"],[1294,17,1333,19],[1295,6,1334,8,"slimDOMOptions"],[1295,20,1334,22],[1296,6,1335,8,"dataURLOptions"],[1296,20,1335,22],[1297,6,1336,8,"inlineImages"],[1297,18,1336,20],[1298,6,1337,8,"recordCanvas"],[1298,18,1337,20],[1299,6,1338,8,"preserveWhiteSpace"],[1299,24,1338,26],[1300,6,1339,8,"onSerialize"],[1300,17,1339,19],[1301,6,1340,8,"onIframeLoad"],[1301,18,1340,20],[1302,6,1341,8,"iframeLoadTimeout"],[1302,23,1341,25],[1303,6,1342,8,"onStylesheetLoad"],[1303,22,1342,24],[1304,6,1343,8,"stylesheetLoadTimeout"],[1304,27,1343,29],[1305,6,1344,8,"keepIframeSrcFn"],[1305,21,1344,23],[1306,6,1345,8,"newlyAddedElement"],[1306,23,1345,25],[1306,25,1345,27],[1307,4,1346,4],[1307,5,1346,5],[1307,6,1346,6],[1308,2,1347,0],[1309,2,1349,0],[1309,11,1349,9,"_optionalChain$4"],[1309,27,1349,25,"_optionalChain$4"],[1309,28,1349,26,"ops"],[1309,31,1349,29],[1309,33,1349,31],[1310,4,1349,33],[1310,8,1349,37,"lastAccessLHS"],[1310,21,1349,50],[1310,24,1349,53,"undefined"],[1310,33,1349,62],[1311,4,1349,64],[1311,8,1349,68,"value"],[1311,13,1349,73],[1311,16,1349,76,"ops"],[1311,19,1349,79],[1311,20,1349,80],[1311,21,1349,81],[1311,22,1349,82],[1312,4,1349,84],[1312,8,1349,88,"i"],[1312,9,1349,89],[1312,12,1349,92],[1312,13,1349,93],[1313,4,1349,95],[1313,11,1349,102,"i"],[1313,12,1349,103],[1313,15,1349,106,"ops"],[1313,18,1349,109],[1313,19,1349,110,"length"],[1313,25,1349,116],[1313,27,1349,118],[1314,6,1349,120],[1314,12,1349,126,"op"],[1314,14,1349,128],[1314,17,1349,131,"ops"],[1314,20,1349,134],[1314,21,1349,135,"i"],[1314,22,1349,136],[1314,23,1349,137],[1315,6,1349,139],[1315,12,1349,145,"fn"],[1315,14,1349,147],[1315,17,1349,150,"ops"],[1315,20,1349,153],[1315,21,1349,154,"i"],[1315,22,1349,155],[1315,25,1349,158],[1315,26,1349,159],[1315,27,1349,160],[1316,6,1349,162,"i"],[1316,7,1349,163],[1316,11,1349,167],[1316,12,1349,168],[1317,6,1349,170],[1317,10,1349,174],[1317,11,1349,175,"op"],[1317,13,1349,177],[1317,18,1349,182],[1317,34,1349,198],[1317,38,1349,202,"op"],[1317,40,1349,204],[1317,45,1349,209],[1317,59,1349,223],[1317,64,1349,228,"value"],[1317,69,1349,233],[1317,73,1349,237],[1317,77,1349,241],[1317,79,1349,243],[1318,8,1349,245],[1318,15,1349,252,"undefined"],[1318,24,1349,261],[1319,6,1349,263],[1320,6,1349,265],[1320,10,1349,269,"op"],[1320,12,1349,271],[1320,17,1349,276],[1320,25,1349,284],[1320,29,1349,288,"op"],[1320,31,1349,290],[1320,36,1349,295],[1320,52,1349,311],[1320,54,1349,313],[1321,8,1349,315,"lastAccessLHS"],[1321,21,1349,328],[1321,24,1349,331,"value"],[1321,29,1349,336],[1322,8,1349,338,"value"],[1322,13,1349,343],[1322,16,1349,346,"fn"],[1322,18,1349,348],[1322,19,1349,349,"value"],[1322,24,1349,354],[1322,25,1349,355],[1323,6,1349,357],[1323,7,1349,358],[1323,13,1349,364],[1323,17,1349,368,"op"],[1323,19,1349,370],[1323,24,1349,375],[1323,30,1349,381],[1323,34,1349,385,"op"],[1323,36,1349,387],[1323,41,1349,392],[1323,55,1349,406],[1323,57,1349,408],[1324,8,1349,410,"value"],[1324,13,1349,415],[1324,16,1349,418,"fn"],[1324,18,1349,420],[1324,19,1349,421],[1324,20,1349,422],[1324,23,1349,425,"args"],[1324,27,1349,429],[1324,32,1349,434,"value"],[1324,37,1349,439],[1324,38,1349,440,"call"],[1324,42,1349,444],[1324,43,1349,445,"lastAccessLHS"],[1324,56,1349,458],[1324,58,1349,460],[1324,61,1349,463,"args"],[1324,65,1349,467],[1324,66,1349,468],[1324,67,1349,469],[1325,8,1349,471,"lastAccessLHS"],[1325,21,1349,484],[1325,24,1349,487,"undefined"],[1325,33,1349,496],[1326,6,1349,498],[1327,4,1349,500],[1328,4,1349,502],[1328,11,1349,509,"value"],[1328,16,1349,514],[1329,2,1349,516],[1330,2,1350,0],[1330,11,1350,9,"on"],[1330,13,1350,11,"on"],[1330,14,1350,12,"type"],[1330,18,1350,16],[1330,20,1350,18,"fn"],[1330,22,1350,20],[1330,24,1350,22,"target"],[1330,30,1350,28],[1330,33,1350,31,"document"],[1330,41,1350,39],[1330,43,1350,41],[1331,4,1351,4],[1331,10,1351,10,"options"],[1331,17,1351,17],[1331,20,1351,20],[1332,6,1351,22,"capture"],[1332,13,1351,29],[1332,15,1351,31],[1332,19,1351,35],[1333,6,1351,37,"passive"],[1333,13,1351,44],[1333,15,1351,46],[1334,4,1351,51],[1334,5,1351,52],[1335,4,1352,4,"target"],[1335,10,1352,10],[1335,11,1352,11,"addEventListener"],[1335,27,1352,27],[1335,28,1352,28,"type"],[1335,32,1352,32],[1335,34,1352,34,"fn"],[1335,36,1352,36],[1335,38,1352,38,"options"],[1335,45,1352,45],[1335,46,1352,46],[1336,4,1353,4],[1336,11,1353,11],[1336,17,1353,17,"target"],[1336,23,1353,23],[1336,24,1353,24,"removeEventListener"],[1336,43,1353,43],[1336,44,1353,44,"type"],[1336,48,1353,48],[1336,50,1353,50,"fn"],[1336,52,1353,52],[1336,54,1353,54,"options"],[1336,61,1353,61],[1336,62,1353,62],[1337,2,1354,0],[1338,2,1355,0],[1338,8,1355,6,"DEPARTED_MIRROR_ACCESS_WARNING"],[1338,38,1355,36],[1338,41,1355,39],[1338,95,1355,93],[1338,98,1356,4],[1338,104,1356,10],[1338,107,1357,4],[1338,190,1357,87],[1338,193,1358,4],[1338,199,1358,10],[1338,202,1359,4],[1338,280,1359,82],[1339,2,1360,0],[1339,6,1360,4,"_mirror"],[1339,13,1360,11],[1339,16,1360,14],[1340,4,1361,4,"map"],[1340,7,1361,7],[1340,9,1361,9],[1340,10,1361,10],[1340,11,1361,11],[1341,4,1362,4,"getId"],[1341,9,1362,9,"getId"],[1341,10,1362,9],[1341,12,1362,12],[1342,6,1363,8,"console"],[1342,13,1363,15],[1342,14,1363,16,"error"],[1342,19,1363,21],[1342,20,1363,22,"DEPARTED_MIRROR_ACCESS_WARNING"],[1342,50,1363,52],[1342,51,1363,53],[1343,6,1364,8],[1343,13,1364,15],[1343,14,1364,16],[1343,15,1364,17],[1344,4,1365,4],[1344,5,1365,5],[1345,4,1366,4,"getNode"],[1345,11,1366,11,"getNode"],[1345,12,1366,11],[1345,14,1366,14],[1346,6,1367,8,"console"],[1346,13,1367,15],[1346,14,1367,16,"error"],[1346,19,1367,21],[1346,20,1367,22,"DEPARTED_MIRROR_ACCESS_WARNING"],[1346,50,1367,52],[1346,51,1367,53],[1347,6,1368,8],[1347,13,1368,15],[1347,17,1368,19],[1348,4,1369,4],[1348,5,1369,5],[1349,4,1370,4,"removeNodeFromMap"],[1349,21,1370,21,"removeNodeFromMap"],[1349,22,1370,21],[1349,24,1370,24],[1350,6,1371,8,"console"],[1350,13,1371,15],[1350,14,1371,16,"error"],[1350,19,1371,21],[1350,20,1371,22,"DEPARTED_MIRROR_ACCESS_WARNING"],[1350,50,1371,52],[1350,51,1371,53],[1351,4,1372,4],[1351,5,1372,5],[1352,4,1373,4,"has"],[1352,7,1373,7,"has"],[1352,8,1373,7],[1352,10,1373,10],[1353,6,1374,8,"console"],[1353,13,1374,15],[1353,14,1374,16,"error"],[1353,19,1374,21],[1353,20,1374,22,"DEPARTED_MIRROR_ACCESS_WARNING"],[1353,50,1374,52],[1353,51,1374,53],[1354,6,1375,8],[1354,13,1375,15],[1354,18,1375,20],[1355,4,1376,4],[1355,5,1376,5],[1356,4,1377,4,"reset"],[1356,9,1377,9,"reset"],[1356,10,1377,9],[1356,12,1377,12],[1357,6,1378,8,"console"],[1357,13,1378,15],[1357,14,1378,16,"error"],[1357,19,1378,21],[1357,20,1378,22,"DEPARTED_MIRROR_ACCESS_WARNING"],[1357,50,1378,52],[1357,51,1378,53],[1358,4,1379,4],[1359,2,1380,0],[1359,3,1380,1],[1360,2,1381,0],[1360,6,1381,4],[1360,13,1381,11,"window"],[1360,19,1381,17],[1360,24,1381,22],[1360,35,1381,33],[1360,39,1381,37,"window"],[1360,45,1381,43],[1360,46,1381,44,"Proxy"],[1360,51,1381,49],[1360,55,1381,53,"window"],[1360,61,1381,59],[1360,62,1381,60,"Reflect"],[1360,69,1381,67],[1360,71,1381,69],[1361,4,1382,4,"_mirror"],[1361,11,1382,11],[1361,14,1382,14],[1361,18,1382,18,"Proxy"],[1361,23,1382,23],[1361,24,1382,24,"_mirror"],[1361,31,1382,31],[1361,33,1382,33],[1362,6,1383,8,"get"],[1362,9,1383,11,"get"],[1362,10,1383,12,"target"],[1362,16,1383,18],[1362,18,1383,20,"prop"],[1362,22,1383,24],[1362,24,1383,26,"receiver"],[1362,32,1383,34],[1362,34,1383,36],[1363,8,1384,12],[1363,12,1384,16,"prop"],[1363,16,1384,20],[1363,21,1384,25],[1363,26,1384,30],[1363,28,1384,32],[1364,10,1385,16,"console"],[1364,17,1385,23],[1364,18,1385,24,"error"],[1364,23,1385,29],[1364,24,1385,30,"DEPARTED_MIRROR_ACCESS_WARNING"],[1364,54,1385,60],[1364,55,1385,61],[1365,8,1386,12],[1366,8,1387,12],[1366,15,1387,19,"Reflect"],[1366,22,1387,26],[1366,23,1387,27,"get"],[1366,26,1387,30],[1366,27,1387,31,"target"],[1366,33,1387,37],[1366,35,1387,39,"prop"],[1366,39,1387,43],[1366,41,1387,45,"receiver"],[1366,49,1387,53],[1366,50,1387,54],[1367,6,1388,8],[1368,4,1389,4],[1368,5,1389,5],[1368,6,1389,6],[1369,2,1390,0],[1370,2,1391,0],[1370,11,1391,9,"throttle$1"],[1370,21,1391,19,"throttle$1"],[1370,22,1391,20,"func"],[1370,26,1391,24],[1370,28,1391,26,"wait"],[1370,32,1391,30],[1370,34,1391,32,"options"],[1370,41,1391,39],[1370,44,1391,42],[1370,45,1391,43],[1370,46,1391,44],[1370,48,1391,46],[1371,4,1392,4],[1371,8,1392,8,"timeout"],[1371,15,1392,15],[1371,18,1392,18],[1371,22,1392,22],[1372,4,1393,4],[1372,8,1393,8,"previous"],[1372,16,1393,16],[1372,19,1393,19],[1372,20,1393,20],[1373,4,1394,4],[1373,11,1394,11],[1373,21,1394,21],[1373,24,1394,24,"args"],[1373,28,1394,28],[1373,30,1394,30],[1374,6,1395,8],[1374,12,1395,14,"now"],[1374,15,1395,17],[1374,18,1395,20,"Date"],[1374,22,1395,24],[1374,23,1395,25,"now"],[1374,26,1395,28],[1374,27,1395,29],[1374,28,1395,30],[1375,6,1396,8],[1375,10,1396,12],[1375,11,1396,13,"previous"],[1375,19,1396,21],[1375,23,1396,25,"options"],[1375,30,1396,32],[1375,31,1396,33,"leading"],[1375,38,1396,40],[1375,43,1396,45],[1375,48,1396,50],[1375,50,1396,52],[1376,8,1397,12,"previous"],[1376,16,1397,20],[1376,19,1397,23,"now"],[1376,22,1397,26],[1377,6,1398,8],[1378,6,1399,8],[1378,12,1399,14,"remaining"],[1378,21,1399,23],[1378,24,1399,26,"wait"],[1378,28,1399,30],[1378,32,1399,34,"now"],[1378,35,1399,37],[1378,38,1399,40,"previous"],[1378,46,1399,48],[1378,47,1399,49],[1379,6,1400,8],[1379,12,1400,14,"context"],[1379,19,1400,21],[1379,22,1400,24],[1379,26,1400,28],[1380,6,1401,8],[1380,10,1401,12,"remaining"],[1380,19,1401,21],[1380,23,1401,25],[1380,24,1401,26],[1380,28,1401,30,"remaining"],[1380,37,1401,39],[1380,40,1401,42,"wait"],[1380,44,1401,46],[1380,46,1401,48],[1381,8,1402,12],[1381,12,1402,16,"timeout"],[1381,19,1402,23],[1381,21,1402,25],[1382,10,1403,16,"clearTimeout$1"],[1382,24,1403,30],[1382,25,1403,31,"timeout"],[1382,32,1403,38],[1382,33,1403,39],[1383,10,1404,16,"timeout"],[1383,17,1404,23],[1383,20,1404,26],[1383,24,1404,30],[1384,8,1405,12],[1385,8,1406,12,"previous"],[1385,16,1406,20],[1385,19,1406,23,"now"],[1385,22,1406,26],[1386,8,1407,12,"func"],[1386,12,1407,16],[1386,13,1407,17,"apply"],[1386,18,1407,22],[1386,19,1407,23,"context"],[1386,26,1407,30],[1386,28,1407,32,"args"],[1386,32,1407,36],[1386,33,1407,37],[1387,6,1408,8],[1387,7,1408,9],[1387,13,1409,13],[1387,17,1409,17],[1387,18,1409,18,"timeout"],[1387,25,1409,25],[1387,29,1409,29,"options"],[1387,36,1409,36],[1387,37,1409,37,"trailing"],[1387,45,1409,45],[1387,50,1409,50],[1387,55,1409,55],[1387,57,1409,57],[1388,8,1410,12,"timeout"],[1388,15,1410,19],[1388,18,1410,22,"setTimeout$1"],[1388,30,1410,34],[1388,31,1410,35],[1388,37,1410,41],[1389,10,1411,16,"previous"],[1389,18,1411,24],[1389,21,1411,27,"options"],[1389,28,1411,34],[1389,29,1411,35,"leading"],[1389,36,1411,42],[1389,41,1411,47],[1389,46,1411,52],[1389,49,1411,55],[1389,50,1411,56],[1389,53,1411,59,"Date"],[1389,57,1411,63],[1389,58,1411,64,"now"],[1389,61,1411,67],[1389,62,1411,68],[1389,63,1411,69],[1390,10,1412,16,"timeout"],[1390,17,1412,23],[1390,20,1412,26],[1390,24,1412,30],[1391,10,1413,16,"func"],[1391,14,1413,20],[1391,15,1413,21,"apply"],[1391,20,1413,26],[1391,21,1413,27,"context"],[1391,28,1413,34],[1391,30,1413,36,"args"],[1391,34,1413,40],[1391,35,1413,41],[1392,8,1414,12],[1392,9,1414,13],[1392,11,1414,15,"remaining"],[1392,20,1414,24],[1392,21,1414,25],[1393,6,1415,8],[1394,4,1416,4],[1394,5,1416,5],[1395,2,1417,0],[1396,2,1418,0],[1396,11,1418,9,"hookSetter"],[1396,21,1418,19,"hookSetter"],[1396,22,1418,20,"target"],[1396,28,1418,26],[1396,30,1418,28,"key"],[1396,33,1418,31],[1396,35,1418,33,"d"],[1396,36,1418,34],[1396,38,1418,36,"isRevoked"],[1396,47,1418,45],[1396,49,1418,47,"win"],[1396,52,1418,50],[1396,55,1418,53,"window"],[1396,61,1418,59],[1396,63,1418,61],[1397,4,1419,4],[1397,10,1419,10,"original"],[1397,18,1419,18],[1397,21,1419,21,"win"],[1397,24,1419,24],[1397,25,1419,25,"Object"],[1397,31,1419,31],[1397,32,1419,32,"getOwnPropertyDescriptor"],[1397,56,1419,56],[1397,57,1419,57,"target"],[1397,63,1419,63],[1397,65,1419,65,"key"],[1397,68,1419,68],[1397,69,1419,69],[1398,4,1420,4,"win"],[1398,7,1420,7],[1398,8,1420,8,"Object"],[1398,14,1420,14],[1398,15,1420,15,"defineProperty"],[1398,29,1420,29],[1398,30,1420,30,"target"],[1398,36,1420,36],[1398,38,1420,38,"key"],[1398,41,1420,41],[1398,43,1420,43,"isRevoked"],[1398,52,1420,52],[1398,55,1421,10,"d"],[1398,56,1421,11],[1398,59,1422,10],[1399,6,1423,12,"set"],[1399,9,1423,15,"set"],[1399,10,1423,16,"value"],[1399,15,1423,21],[1399,17,1423,23],[1400,8,1424,16,"setTimeout$1"],[1400,20,1424,28],[1400,21,1424,29],[1400,27,1424,35],[1401,10,1425,20,"d"],[1401,11,1425,21],[1401,12,1425,22,"set"],[1401,15,1425,25],[1401,16,1425,26,"call"],[1401,20,1425,30],[1401,21,1425,31],[1401,25,1425,35],[1401,27,1425,37,"value"],[1401,32,1425,42],[1401,33,1425,43],[1402,8,1426,16],[1402,9,1426,17],[1402,11,1426,19],[1402,12,1426,20],[1402,13,1426,21],[1403,8,1427,16],[1403,12,1427,20,"original"],[1403,20,1427,28],[1403,24,1427,32,"original"],[1403,32,1427,40],[1403,33,1427,41,"set"],[1403,36,1427,44],[1403,38,1427,46],[1404,10,1428,20,"original"],[1404,18,1428,28],[1404,19,1428,29,"set"],[1404,22,1428,32],[1404,23,1428,33,"call"],[1404,27,1428,37],[1404,28,1428,38],[1404,32,1428,42],[1404,34,1428,44,"value"],[1404,39,1428,49],[1404,40,1428,50],[1405,8,1429,16],[1406,6,1430,12],[1407,4,1431,8],[1407,5,1431,9],[1407,6,1431,10],[1408,4,1432,4],[1408,11,1432,11],[1408,17,1432,17,"hookSetter"],[1408,27,1432,27],[1408,28,1432,28,"target"],[1408,34,1432,34],[1408,36,1432,36,"key"],[1408,39,1432,39],[1408,41,1432,41,"original"],[1408,49,1432,49],[1408,53,1432,53],[1408,54,1432,54],[1408,55,1432,55],[1408,57,1432,57],[1408,61,1432,61],[1408,62,1432,62],[1409,2,1433,0],[1410,2,1434,0],[1410,11,1434,9,"patch"],[1410,16,1434,14,"patch"],[1410,17,1434,15,"source"],[1410,23,1434,21],[1410,25,1434,23,"name"],[1410,29,1434,27],[1410,31,1434,29,"replacement"],[1410,42,1434,40],[1410,44,1434,42],[1411,4,1435,4],[1411,8,1435,8],[1412,6,1436,8],[1412,10,1436,12],[1412,12,1436,14,"name"],[1412,16,1436,18],[1412,20,1436,22,"source"],[1412,26,1436,28],[1412,27,1436,29],[1412,29,1436,31],[1413,8,1437,12],[1413,15,1437,19],[1413,21,1437,25],[1413,22,1438,12],[1413,23,1438,13],[1414,6,1439,8],[1415,6,1440,8],[1415,12,1440,14,"original"],[1415,20,1440,22],[1415,23,1440,25,"source"],[1415,29,1440,31],[1415,30,1440,32,"name"],[1415,34,1440,36],[1415,35,1440,37],[1416,6,1441,8],[1416,12,1441,14,"wrapped"],[1416,19,1441,21],[1416,22,1441,24,"replacement"],[1416,33,1441,35],[1416,34,1441,36,"original"],[1416,42,1441,44],[1416,43,1441,45],[1417,6,1442,8],[1417,10,1442,12],[1417,17,1442,19,"wrapped"],[1417,24,1442,26],[1417,29,1442,31],[1417,39,1442,41],[1417,41,1442,43],[1418,8,1443,12,"wrapped"],[1418,15,1443,19],[1418,16,1443,20,"prototype"],[1418,25,1443,29],[1418,28,1443,32,"wrapped"],[1418,35,1443,39],[1418,36,1443,40,"prototype"],[1418,45,1443,49],[1418,49,1443,53],[1418,50,1443,54],[1418,51,1443,55],[1419,8,1444,12,"Object"],[1419,14,1444,18],[1419,15,1444,19,"defineProperties"],[1419,31,1444,35],[1419,32,1444,36,"wrapped"],[1419,39,1444,43],[1419,41,1444,45],[1420,10,1445,16,"__rrweb_original__"],[1420,28,1445,34],[1420,30,1445,36],[1421,12,1446,20,"enumerable"],[1421,22,1446,30],[1421,24,1446,32],[1421,29,1446,37],[1422,12,1447,20,"value"],[1422,17,1447,25],[1422,19,1447,27,"original"],[1423,10,1448,16],[1424,8,1449,12],[1424,9,1449,13],[1424,10,1449,14],[1425,6,1450,8],[1426,6,1451,8,"source"],[1426,12,1451,14],[1426,13,1451,15,"name"],[1426,17,1451,19],[1426,18,1451,20],[1426,21,1451,23,"wrapped"],[1426,28,1451,30],[1427,6,1452,8],[1427,13,1452,15],[1427,19,1452,21],[1428,8,1453,12,"source"],[1428,14,1453,18],[1428,15,1453,19,"name"],[1428,19,1453,23],[1428,20,1453,24],[1428,23,1453,27,"original"],[1428,31,1453,35],[1429,6,1454,8],[1429,7,1454,9],[1430,4,1455,4],[1430,5,1455,5],[1430,6,1456,4],[1430,13,1456,11,"e2"],[1430,15,1456,13],[1430,17,1456,15],[1431,6,1457,8],[1431,13,1457,15],[1431,19,1457,21],[1431,20,1458,8],[1431,21,1458,9],[1432,4,1459,4],[1433,2,1460,0],[1434,2,1461,0],[1434,6,1461,4,"nowTimestamp"],[1434,18,1461,16],[1434,21,1461,19,"Date"],[1434,25,1461,23],[1434,26,1461,24,"now"],[1434,29,1461,27],[1435,2,1462,0],[1435,6,1462,4],[1435,7,1462,6],[1435,23,1462,22],[1435,24,1462,23,"test"],[1435,28,1462,27],[1435,29,1462,28,"Date"],[1435,33,1462,32],[1435,34,1462,33,"now"],[1435,37,1462,36],[1435,38,1462,37],[1435,39,1462,38],[1435,40,1462,39,"toString"],[1435,48,1462,47],[1435,49,1462,48],[1435,50,1462,49],[1435,51,1462,51],[1435,53,1462,53],[1436,4,1463,4,"nowTimestamp"],[1436,16,1463,16],[1436,19,1463,19,"nowTimestamp"],[1436,20,1463,19],[1436,25,1463,25],[1436,29,1463,29,"Date"],[1436,33,1463,33],[1436,34,1463,34],[1436,35,1463,35],[1436,36,1463,36,"getTime"],[1436,43,1463,43],[1436,44,1463,44],[1436,45,1463,45],[1437,2,1464,0],[1438,2,1465,0],[1438,11,1465,9,"getWindowScroll"],[1438,26,1465,24,"getWindowScroll"],[1438,27,1465,25,"win"],[1438,30,1465,28],[1438,32,1465,30],[1439,4,1466,4],[1439,10,1466,10,"doc"],[1439,13,1466,13],[1439,16,1466,16,"win"],[1439,19,1466,19],[1439,20,1466,20,"document"],[1439,28,1466,28],[1440,4,1467,4],[1440,11,1467,11],[1441,6,1468,8,"left"],[1441,10,1468,12],[1441,12,1468,14,"doc"],[1441,15,1468,17],[1441,16,1468,18,"scrollingElement"],[1441,32,1468,34],[1441,35,1469,14,"doc"],[1441,38,1469,17],[1441,39,1469,18,"scrollingElement"],[1441,55,1469,34],[1441,56,1469,35,"scrollLeft"],[1441,66,1469,45],[1441,69,1470,14,"win"],[1441,72,1470,17],[1441,73,1470,18,"pageXOffset"],[1441,84,1470,29],[1441,89,1470,34,"undefined"],[1441,98,1470,43],[1441,101,1471,18,"win"],[1441,104,1471,21],[1441,105,1471,22,"pageXOffset"],[1441,116,1471,33],[1441,119,1472,18,"_optionalChain$4"],[1441,135,1472,34],[1441,136,1472,35],[1441,137,1472,36,"doc"],[1441,140,1472,39],[1441,142,1472,41],[1441,158,1472,57],[1441,160,1472,59,"_"],[1441,161,1472,60],[1441,165,1472,64,"_"],[1441,166,1472,65],[1441,167,1472,66,"documentElement"],[1441,182,1472,81],[1441,184,1472,83],[1441,192,1472,91],[1441,194,1472,93,"_2"],[1441,196,1472,95],[1441,200,1472,99,"_2"],[1441,202,1472,101],[1441,203,1472,102,"scrollLeft"],[1441,213,1472,112],[1441,214,1472,113],[1441,215,1472,114],[1441,219,1473,20,"_optionalChain$4"],[1441,235,1473,36],[1441,236,1473,37],[1441,237,1473,38,"doc"],[1441,240,1473,41],[1441,242,1473,43],[1441,258,1473,59],[1441,260,1473,61,"_3"],[1441,262,1473,63],[1441,266,1473,67,"_3"],[1441,268,1473,69],[1441,269,1473,70,"body"],[1441,273,1473,74],[1441,275,1473,76],[1441,291,1473,92],[1441,293,1473,94,"_4"],[1441,295,1473,96],[1441,299,1473,100,"_4"],[1441,301,1473,102],[1441,302,1473,103,"parentElement"],[1441,315,1473,116],[1441,317,1473,118],[1441,333,1473,134],[1441,335,1473,136,"_5"],[1441,337,1473,138],[1441,341,1473,142,"_5"],[1441,343,1473,144],[1441,344,1473,145,"scrollLeft"],[1441,354,1473,155],[1441,355,1473,156],[1441,356,1473,157],[1441,360,1474,20,"_optionalChain$4"],[1441,376,1474,36],[1441,377,1474,37],[1441,378,1474,38,"doc"],[1441,381,1474,41],[1441,383,1474,43],[1441,399,1474,59],[1441,401,1474,61,"_6"],[1441,403,1474,63],[1441,407,1474,67,"_6"],[1441,409,1474,69],[1441,410,1474,70,"body"],[1441,414,1474,74],[1441,416,1474,76],[1441,432,1474,92],[1441,434,1474,94,"_7"],[1441,436,1474,96],[1441,440,1474,100,"_7"],[1441,442,1474,102],[1441,443,1474,103,"scrollLeft"],[1441,453,1474,113],[1441,454,1474,114],[1441,455,1474,115],[1441,459,1475,20],[1441,460,1475,21],[1442,6,1476,8,"top"],[1442,9,1476,11],[1442,11,1476,13,"doc"],[1442,14,1476,16],[1442,15,1476,17,"scrollingElement"],[1442,31,1476,33],[1442,34,1477,14,"doc"],[1442,37,1477,17],[1442,38,1477,18,"scrollingElement"],[1442,54,1477,34],[1442,55,1477,35,"scrollTop"],[1442,64,1477,44],[1442,67,1478,14,"win"],[1442,70,1478,17],[1442,71,1478,18,"pageYOffset"],[1442,82,1478,29],[1442,87,1478,34,"undefined"],[1442,96,1478,43],[1442,99,1479,18,"win"],[1442,102,1479,21],[1442,103,1479,22,"pageYOffset"],[1442,114,1479,33],[1442,117,1480,18,"_optionalChain$4"],[1442,133,1480,34],[1442,134,1480,35],[1442,135,1480,36,"doc"],[1442,138,1480,39],[1442,140,1480,41],[1442,156,1480,57],[1442,158,1480,59,"_8"],[1442,160,1480,61],[1442,164,1480,65,"_8"],[1442,166,1480,67],[1442,167,1480,68,"documentElement"],[1442,182,1480,83],[1442,184,1480,85],[1442,192,1480,93],[1442,194,1480,95,"_9"],[1442,196,1480,97],[1442,200,1480,101,"_9"],[1442,202,1480,103],[1442,203,1480,104,"scrollTop"],[1442,212,1480,113],[1442,213,1480,114],[1442,214,1480,115],[1442,218,1481,20,"_optionalChain$4"],[1442,234,1481,36],[1442,235,1481,37],[1442,236,1481,38,"doc"],[1442,239,1481,41],[1442,241,1481,43],[1442,257,1481,59],[1442,259,1481,61,"_10"],[1442,262,1481,64],[1442,266,1481,68,"_10"],[1442,269,1481,71],[1442,270,1481,72,"body"],[1442,274,1481,76],[1442,276,1481,78],[1442,292,1481,94],[1442,294,1481,96,"_11"],[1442,297,1481,99],[1442,301,1481,103,"_11"],[1442,304,1481,106],[1442,305,1481,107,"parentElement"],[1442,318,1481,120],[1442,320,1481,122],[1442,336,1481,138],[1442,338,1481,140,"_12"],[1442,341,1481,143],[1442,345,1481,147,"_12"],[1442,348,1481,150],[1442,349,1481,151,"scrollTop"],[1442,358,1481,160],[1442,359,1481,161],[1442,360,1481,162],[1442,364,1482,20,"_optionalChain$4"],[1442,380,1482,36],[1442,381,1482,37],[1442,382,1482,38,"doc"],[1442,385,1482,41],[1442,387,1482,43],[1442,403,1482,59],[1442,405,1482,61,"_13"],[1442,408,1482,64],[1442,412,1482,68,"_13"],[1442,415,1482,71],[1442,416,1482,72,"body"],[1442,420,1482,76],[1442,422,1482,78],[1442,438,1482,94],[1442,440,1482,96,"_14"],[1442,443,1482,99],[1442,447,1482,103,"_14"],[1442,450,1482,106],[1442,451,1482,107,"scrollTop"],[1442,460,1482,116],[1442,461,1482,117],[1442,462,1482,118],[1442,466,1483,20],[1443,4,1484,4],[1443,5,1484,5],[1444,2,1485,0],[1445,2,1486,0],[1445,11,1486,9,"getWindowHeight"],[1445,26,1486,24,"getWindowHeight"],[1445,27,1486,24],[1445,29,1486,27],[1446,4,1487,4],[1446,11,1487,12,"window"],[1446,17,1487,18],[1446,18,1487,19,"innerHeight"],[1446,29,1487,30],[1446,33,1488,9,"document"],[1446,41,1488,17],[1446,42,1488,18,"documentElement"],[1446,57,1488,33],[1446,61,1488,37,"document"],[1446,69,1488,45],[1446,70,1488,46,"documentElement"],[1446,85,1488,61],[1446,86,1488,62,"clientHeight"],[1446,98,1488,75],[1446,102,1489,9,"document"],[1446,110,1489,17],[1446,111,1489,18,"body"],[1446,115,1489,22],[1446,119,1489,26,"document"],[1446,127,1489,34],[1446,128,1489,35,"body"],[1446,132,1489,39],[1446,133,1489,40,"clientHeight"],[1446,145,1489,53],[1447,2,1490,0],[1448,2,1491,0],[1448,11,1491,9,"getWindowWidth"],[1448,25,1491,23,"getWindowWidth"],[1448,26,1491,23],[1448,28,1491,26],[1449,4,1492,4],[1449,11,1492,12,"window"],[1449,17,1492,18],[1449,18,1492,19,"innerWidth"],[1449,28,1492,29],[1449,32,1493,9,"document"],[1449,40,1493,17],[1449,41,1493,18,"documentElement"],[1449,56,1493,33],[1449,60,1493,37,"document"],[1449,68,1493,45],[1449,69,1493,46,"documentElement"],[1449,84,1493,61],[1449,85,1493,62,"clientWidth"],[1449,96,1493,74],[1449,100,1494,9,"document"],[1449,108,1494,17],[1449,109,1494,18,"body"],[1449,113,1494,22],[1449,117,1494,26,"document"],[1449,125,1494,34],[1449,126,1494,35,"body"],[1449,130,1494,39],[1449,131,1494,40,"clientWidth"],[1449,142,1494,52],[1450,2,1495,0],[1451,2,1496,0],[1451,11,1496,9,"closestElementOfNode"],[1451,31,1496,29,"closestElementOfNode"],[1451,32,1496,30,"node"],[1451,36,1496,34],[1451,38,1496,36],[1452,4,1497,4],[1452,8,1497,8],[1452,9,1497,9,"node"],[1452,13,1497,13],[1452,15,1497,15],[1453,6,1498,8],[1453,13,1498,15],[1453,17,1498,19],[1454,4,1499,4],[1455,4,1500,4],[1455,10,1500,10,"el"],[1455,12,1500,12],[1455,15,1500,15,"node"],[1455,19,1500,19],[1455,20,1500,20,"nodeType"],[1455,28,1500,28],[1455,33,1500,33,"node"],[1455,37,1500,37],[1455,38,1500,38,"ELEMENT_NODE"],[1455,50,1500,50],[1455,53,1501,10,"node"],[1455,57,1501,14],[1455,60,1502,10,"node"],[1455,64,1502,14],[1455,65,1502,15,"parentElement"],[1455,78,1502,28],[1456,4,1503,4],[1456,11,1503,11,"el"],[1456,13,1503,13],[1457,2,1504,0],[1458,2,1505,0],[1458,11,1505,9,"isBlocked"],[1458,20,1505,18,"isBlocked"],[1458,21,1505,19,"node"],[1458,25,1505,23],[1458,27,1505,25,"blockClass"],[1458,37,1505,35],[1458,39,1505,37,"blockSelector"],[1458,52,1505,50],[1458,54,1505,52,"unblockSelector"],[1458,69,1505,67],[1458,71,1505,69,"checkAncestors"],[1458,85,1505,83],[1458,87,1505,85],[1459,4,1506,4],[1459,8,1506,8],[1459,9,1506,9,"node"],[1459,13,1506,13],[1459,15,1506,15],[1460,6,1507,8],[1460,13,1507,15],[1460,18,1507,20],[1461,4,1508,4],[1462,4,1509,4],[1462,10,1509,10,"el"],[1462,12,1509,12],[1462,15,1509,15,"closestElementOfNode"],[1462,35,1509,35],[1462,36,1509,36,"node"],[1462,40,1509,40],[1462,41,1509,41],[1463,4,1510,4],[1463,8,1510,8],[1463,9,1510,9,"el"],[1463,11,1510,11],[1463,13,1510,13],[1464,6,1511,8],[1464,13,1511,15],[1464,18,1511,20],[1465,4,1512,4],[1466,4,1513,4],[1466,10,1513,10,"blockedPredicate"],[1466,26,1513,26],[1466,29,1513,29,"createMatchPredicate"],[1466,49,1513,49],[1466,50,1513,50,"blockClass"],[1466,60,1513,60],[1466,62,1513,62,"blockSelector"],[1466,75,1513,75],[1466,76,1513,76],[1467,4,1514,4],[1467,8,1514,8],[1467,9,1514,9,"checkAncestors"],[1467,23,1514,23],[1467,25,1514,25],[1468,6,1515,8],[1468,12,1515,14,"isUnblocked"],[1468,23,1515,25],[1468,26,1515,28,"unblockSelector"],[1468,41,1515,43],[1468,45,1515,47,"el"],[1468,47,1515,49],[1468,48,1515,50,"matches"],[1468,55,1515,57],[1468,56,1515,58,"unblockSelector"],[1468,71,1515,73],[1468,72,1515,74],[1469,6,1516,8],[1469,13,1516,15,"blockedPredicate"],[1469,29,1516,31],[1469,30,1516,32,"el"],[1469,32,1516,34],[1469,33,1516,35],[1469,37,1516,39],[1469,38,1516,40,"isUnblocked"],[1469,49,1516,51],[1470,4,1517,4],[1471,4,1518,4],[1471,10,1518,10,"blockDistance"],[1471,23,1518,23],[1471,26,1518,26,"distanceToMatch"],[1471,41,1518,41],[1471,42,1518,42,"el"],[1471,44,1518,44],[1471,46,1518,46,"blockedPredicate"],[1471,62,1518,62],[1471,63,1518,63],[1472,4,1519,4],[1472,8,1519,8,"unblockDistance"],[1472,23,1519,23],[1472,26,1519,26],[1472,27,1519,27],[1472,28,1519,28],[1473,4,1520,4],[1473,8,1520,8,"blockDistance"],[1473,21,1520,21],[1473,24,1520,24],[1473,25,1520,25],[1473,27,1520,27],[1474,6,1521,8],[1474,13,1521,15],[1474,18,1521,20],[1475,4,1522,4],[1476,4,1523,4],[1476,8,1523,8,"unblockSelector"],[1476,23,1523,23],[1476,25,1523,25],[1477,6,1524,8,"unblockDistance"],[1477,21,1524,23],[1477,24,1524,26,"distanceToMatch"],[1477,39,1524,41],[1477,40,1524,42,"el"],[1477,42,1524,44],[1477,44,1524,46,"createMatchPredicate"],[1477,64,1524,66],[1477,65,1524,67],[1477,69,1524,71],[1477,71,1524,73,"unblockSelector"],[1477,86,1524,88],[1477,87,1524,89],[1477,88,1524,90],[1478,4,1525,4],[1479,4,1526,4],[1479,8,1526,8,"blockDistance"],[1479,21,1526,21],[1479,24,1526,24],[1479,25,1526,25],[1479,26,1526,26],[1479,30,1526,30,"unblockDistance"],[1479,45,1526,45],[1479,48,1526,48],[1479,49,1526,49],[1479,51,1526,51],[1480,6,1527,8],[1480,13,1527,15],[1480,17,1527,19],[1481,4,1528,4],[1482,4,1529,4],[1482,11,1529,11,"blockDistance"],[1482,24,1529,24],[1482,27,1529,27,"unblockDistance"],[1482,42,1529,42],[1483,2,1530,0],[1484,2,1531,0],[1484,11,1531,9,"isSerialized"],[1484,23,1531,21,"isSerialized"],[1484,24,1531,22,"n"],[1484,25,1531,23],[1484,27,1531,25,"mirror"],[1484,33,1531,31],[1484,35,1531,33],[1485,4,1532,4],[1485,11,1532,11,"mirror"],[1485,17,1532,17],[1485,18,1532,18,"getId"],[1485,23,1532,23],[1485,24,1532,24,"n"],[1485,25,1532,25],[1485,26,1532,26],[1485,31,1532,31],[1485,32,1532,32],[1485,33,1532,33],[1486,2,1533,0],[1487,2,1534,0],[1487,11,1534,9,"isIgnored"],[1487,20,1534,18,"isIgnored"],[1487,21,1534,19,"n"],[1487,22,1534,20],[1487,24,1534,22,"mirror"],[1487,30,1534,28],[1487,32,1534,30],[1488,4,1535,4],[1488,11,1535,11,"mirror"],[1488,17,1535,17],[1488,18,1535,18,"getId"],[1488,23,1535,23],[1488,24,1535,24,"n"],[1488,25,1535,25],[1488,26,1535,26],[1488,31,1535,31,"IGNORED_NODE"],[1488,43,1535,43],[1489,2,1536,0],[1490,2,1537,0],[1490,11,1537,9,"isAncestorRemoved"],[1490,28,1537,26,"isAncestorRemoved"],[1490,29,1537,27,"target"],[1490,35,1537,33],[1490,37,1537,35,"mirror"],[1490,43,1537,41],[1490,45,1537,43],[1491,4,1538,4],[1491,8,1538,8,"isShadowRoot"],[1491,20,1538,20],[1491,21,1538,21,"target"],[1491,27,1538,27],[1491,28,1538,28],[1491,30,1538,30],[1492,6,1539,8],[1492,13,1539,15],[1492,18,1539,20],[1493,4,1540,4],[1494,4,1541,4],[1494,10,1541,10,"id"],[1494,12,1541,12],[1494,15,1541,15,"mirror"],[1494,21,1541,21],[1494,22,1541,22,"getId"],[1494,27,1541,27],[1494,28,1541,28,"target"],[1494,34,1541,34],[1494,35,1541,35],[1495,4,1542,4],[1495,8,1542,8],[1495,9,1542,9,"mirror"],[1495,15,1542,15],[1495,16,1542,16,"has"],[1495,19,1542,19],[1495,20,1542,20,"id"],[1495,22,1542,22],[1495,23,1542,23],[1495,25,1542,25],[1496,6,1543,8],[1496,13,1543,15],[1496,17,1543,19],[1497,4,1544,4],[1498,4,1545,4],[1498,8,1545,8,"target"],[1498,14,1545,14],[1498,15,1545,15,"parentNode"],[1498,25,1545,25],[1498,29,1546,8,"target"],[1498,35,1546,14],[1498,36,1546,15,"parentNode"],[1498,46,1546,25],[1498,47,1546,26,"nodeType"],[1498,55,1546,34],[1498,60,1546,39,"target"],[1498,66,1546,45],[1498,67,1546,46,"DOCUMENT_NODE"],[1498,80,1546,59],[1498,82,1546,61],[1499,6,1547,8],[1499,13,1547,15],[1499,18,1547,20],[1500,4,1548,4],[1501,4,1549,4],[1501,8,1549,8],[1501,9,1549,9,"target"],[1501,15,1549,15],[1501,16,1549,16,"parentNode"],[1501,26,1549,26],[1501,28,1549,28],[1502,6,1550,8],[1502,13,1550,15],[1502,17,1550,19],[1503,4,1551,4],[1504,4,1552,4],[1504,11,1552,11,"isAncestorRemoved"],[1504,28,1552,28],[1504,29,1552,29,"target"],[1504,35,1552,35],[1504,36,1552,36,"parentNode"],[1504,46,1552,46],[1504,48,1552,48,"mirror"],[1504,54,1552,54],[1504,55,1552,55],[1505,2,1553,0],[1506,2,1554,0],[1506,11,1554,9,"legacy_isTouchEvent"],[1506,30,1554,28,"legacy_isTouchEvent"],[1506,31,1554,29,"event"],[1506,36,1554,34],[1506,38,1554,36],[1507,4,1555,4],[1507,11,1555,11,"Boolean"],[1507,18,1555,18],[1507,19,1555,19,"event"],[1507,24,1555,24],[1507,25,1555,25,"changedTouches"],[1507,39,1555,39],[1507,40,1555,40],[1508,2,1556,0],[1509,2,1557,0],[1509,11,1557,9,"polyfill"],[1509,19,1557,17,"polyfill"],[1509,20,1557,18,"win"],[1509,23,1557,21],[1509,26,1557,24,"window"],[1509,32,1557,30],[1509,34,1557,32],[1510,4,1558,4],[1510,8,1558,8],[1510,18,1558,18],[1510,22,1558,22,"win"],[1510,25,1558,25],[1510,29,1558,29],[1510,30,1558,30,"win"],[1510,33,1558,33],[1510,34,1558,34,"NodeList"],[1510,42,1558,42],[1510,43,1558,43,"prototype"],[1510,52,1558,52],[1510,53,1558,53,"forEach"],[1510,60,1558,60],[1510,62,1558,62],[1511,6,1559,8,"win"],[1511,9,1559,11],[1511,10,1559,12,"NodeList"],[1511,18,1559,20],[1511,19,1559,21,"prototype"],[1511,28,1559,30],[1511,29,1559,31,"forEach"],[1511,36,1559,38],[1511,39,1559,41,"Array"],[1511,44,1559,46],[1511,45,1559,47,"prototype"],[1511,54,1559,56],[1511,55,1560,13,"forEach"],[1511,62,1560,20],[1512,4,1561,4],[1513,4,1562,4],[1513,8,1562,8],[1513,22,1562,22],[1513,26,1562,26,"win"],[1513,29,1562,29],[1513,33,1562,33],[1513,34,1562,34,"win"],[1513,37,1562,37],[1513,38,1562,38,"DOMTokenList"],[1513,50,1562,50],[1513,51,1562,51,"prototype"],[1513,60,1562,60],[1513,61,1562,61,"forEach"],[1513,68,1562,68],[1513,70,1562,70],[1514,6,1563,8,"win"],[1514,9,1563,11],[1514,10,1563,12,"DOMTokenList"],[1514,22,1563,24],[1514,23,1563,25,"prototype"],[1514,32,1563,34],[1514,33,1563,35,"forEach"],[1514,40,1563,42],[1514,43,1563,45,"Array"],[1514,48,1563,50],[1514,49,1563,51,"prototype"],[1514,58,1563,60],[1514,59,1564,13,"forEach"],[1514,66,1564,20],[1515,4,1565,4],[1516,4,1566,4],[1516,8,1566,8],[1516,9,1566,9,"Node"],[1516,13,1566,13],[1516,14,1566,14,"prototype"],[1516,23,1566,23],[1516,24,1566,24,"contains"],[1516,32,1566,32],[1516,34,1566,34],[1517,6,1567,8,"Node"],[1517,10,1567,12],[1517,11,1567,13,"prototype"],[1517,20,1567,22],[1517,21,1567,23,"contains"],[1517,29,1567,31],[1517,32,1567,34],[1517,33,1567,35],[1517,36,1567,38,"args"],[1517,40,1567,42],[1517,45,1567,47],[1518,8,1568,12],[1518,12,1568,16,"node"],[1518,16,1568,20],[1518,19,1568,23,"args"],[1518,23,1568,27],[1518,24,1568,28],[1518,25,1568,29],[1518,26,1568,30],[1519,8,1569,12],[1519,12,1569,16],[1519,14,1569,18],[1519,15,1569,19],[1519,19,1569,23,"args"],[1519,23,1569,27],[1519,24,1569,28],[1519,26,1569,30],[1520,10,1570,16],[1520,16,1570,22],[1520,20,1570,26,"TypeError"],[1520,29,1570,35],[1520,30,1570,36],[1520,54,1570,60],[1520,55,1570,61],[1521,8,1571,12],[1522,8,1572,12],[1522,11,1572,15],[1523,10,1573,16],[1523,14,1573,20],[1523,18,1573,24],[1523,23,1573,29,"node"],[1523,27,1573,33],[1523,29,1573,35],[1524,12,1574,20],[1524,19,1574,27],[1524,23,1574,31],[1525,10,1575,16],[1526,8,1576,12],[1526,9,1576,13],[1526,17,1576,22,"node"],[1526,21,1576,26],[1526,24,1576,29,"node"],[1526,28,1576,33],[1526,32,1576,37,"node"],[1526,36,1576,41],[1526,37,1576,42,"parentNode"],[1526,47,1576,52],[1527,8,1577,12],[1527,15,1577,19],[1527,20,1577,24],[1528,6,1578,8],[1528,7,1578,9],[1529,4,1579,4],[1530,2,1580,0],[1531,2,1581,0],[1531,11,1581,9,"isSerializedIframe"],[1531,29,1581,27,"isSerializedIframe"],[1531,30,1581,28,"n"],[1531,31,1581,29],[1531,33,1581,31,"mirror"],[1531,39,1581,37],[1531,41,1581,39],[1532,4,1582,4],[1532,11,1582,11,"Boolean"],[1532,18,1582,18],[1532,19,1582,19,"n"],[1532,20,1582,20],[1532,21,1582,21,"nodeName"],[1532,29,1582,29],[1532,34,1582,34],[1532,42,1582,42],[1532,46,1582,46,"mirror"],[1532,52,1582,52],[1532,53,1582,53,"getMeta"],[1532,60,1582,60],[1532,61,1582,61,"n"],[1532,62,1582,62],[1532,63,1582,63],[1532,64,1582,64],[1533,2,1583,0],[1534,2,1584,0],[1534,11,1584,9,"isSerializedStylesheet"],[1534,33,1584,31,"isSerializedStylesheet"],[1534,34,1584,32,"n"],[1534,35,1584,33],[1534,37,1584,35,"mirror"],[1534,43,1584,41],[1534,45,1584,43],[1535,4,1585,4],[1535,11,1585,11,"Boolean"],[1535,18,1585,18],[1535,19,1585,19,"n"],[1535,20,1585,20],[1535,21,1585,21,"nodeName"],[1535,29,1585,29],[1535,34,1585,34],[1535,40,1585,40],[1535,44,1586,8,"n"],[1535,45,1586,9],[1535,46,1586,10,"nodeType"],[1535,54,1586,18],[1535,59,1586,23,"n"],[1535,60,1586,24],[1535,61,1586,25,"ELEMENT_NODE"],[1535,73,1586,37],[1535,77,1587,8,"n"],[1535,78,1587,9],[1535,79,1587,10,"getAttribute"],[1535,91,1587,22],[1535,95,1588,8,"n"],[1535,96,1588,9],[1535,97,1588,10,"getAttribute"],[1535,109,1588,22],[1535,110,1588,23],[1535,115,1588,28],[1535,116,1588,29],[1535,121,1588,34],[1535,133,1588,46],[1535,137,1589,8,"mirror"],[1535,143,1589,14],[1535,144,1589,15,"getMeta"],[1535,151,1589,22],[1535,152,1589,23,"n"],[1535,153,1589,24],[1535,154,1589,25],[1535,155,1589,26],[1536,2,1590,0],[1537,2,1591,0],[1537,11,1591,9,"hasShadowRoot"],[1537,24,1591,22,"hasShadowRoot"],[1537,25,1591,23,"n"],[1537,26,1591,24],[1537,28,1591,26],[1538,4,1592,4],[1538,11,1592,11,"Boolean"],[1538,18,1592,18],[1538,19,1592,19,"_optionalChain$4"],[1538,35,1592,35],[1538,36,1592,36],[1538,37,1592,37,"n"],[1538,38,1592,38],[1538,40,1592,40],[1538,56,1592,56],[1538,58,1592,58,"_18"],[1538,61,1592,61],[1538,65,1592,65,"_18"],[1538,68,1592,68],[1538,69,1592,69,"shadowRoot"],[1538,79,1592,79],[1538,80,1592,80],[1538,81,1592,81],[1538,82,1592,82],[1539,2,1593,0],[1540,2,1594,0],[1540,8,1594,6,"StyleSheetMirror"],[1540,24,1594,22],[1540,25,1594,23],[1541,4,1595,4,"constructor"],[1541,15,1595,15,"constructor"],[1541,16,1595,15],[1541,18,1595,18],[1542,6,1596,8],[1542,10,1596,12],[1542,11,1596,13,"id"],[1542,13,1596,15],[1542,16,1596,18],[1542,17,1596,19],[1543,6,1597,8],[1543,10,1597,12],[1543,11,1597,13,"styleIDMap"],[1543,21,1597,23],[1543,24,1597,26],[1543,28,1597,30,"WeakMap"],[1543,35,1597,37],[1543,36,1597,38],[1543,37,1597,39],[1544,6,1598,8],[1544,10,1598,12],[1544,11,1598,13,"idStyleMap"],[1544,21,1598,23],[1544,24,1598,26],[1544,28,1598,30,"Map"],[1544,31,1598,33],[1544,32,1598,34],[1544,33,1598,35],[1545,4,1599,4],[1546,4,1600,4,"getId"],[1546,9,1600,9,"getId"],[1546,10,1600,10,"stylesheet"],[1546,20,1600,20],[1546,22,1600,22],[1547,6,1601,8],[1547,13,1601,15],[1547,17,1601,15,"_nullishCoalesce"],[1547,39,1601,31],[1547,41,1601,32],[1547,45,1601,36],[1547,46,1601,37,"styleIDMap"],[1547,56,1601,47],[1547,57,1601,48,"get"],[1547,60,1601,51],[1547,61,1601,52,"stylesheet"],[1547,71,1601,62],[1547,72,1601,63],[1547,74,1601,65],[1547,80,1601,73],[1547,81,1601,74],[1547,82,1601,76],[1547,83,1601,77],[1548,4,1602,4],[1549,4,1603,4,"has"],[1549,7,1603,7,"has"],[1549,8,1603,8,"stylesheet"],[1549,18,1603,18],[1549,20,1603,20],[1550,6,1604,8],[1550,13,1604,15],[1550,17,1604,19],[1550,18,1604,20,"styleIDMap"],[1550,28,1604,30],[1550,29,1604,31,"has"],[1550,32,1604,34],[1550,33,1604,35,"stylesheet"],[1550,43,1604,45],[1550,44,1604,46],[1551,4,1605,4],[1552,4,1606,4,"add"],[1552,7,1606,7,"add"],[1552,8,1606,8,"stylesheet"],[1552,18,1606,18],[1552,20,1606,20,"id"],[1552,22,1606,22],[1552,24,1606,24],[1553,6,1607,8],[1553,10,1607,12],[1553,14,1607,16],[1553,15,1607,17,"has"],[1553,18,1607,20],[1553,19,1607,21,"stylesheet"],[1553,29,1607,31],[1553,30,1607,32],[1553,32,1608,12],[1553,39,1608,19],[1553,43,1608,23],[1553,44,1608,24,"getId"],[1553,49,1608,29],[1553,50,1608,30,"stylesheet"],[1553,60,1608,40],[1553,61,1608,41],[1554,6,1609,8],[1554,10,1609,12,"newId"],[1554,15,1609,17],[1555,6,1610,8],[1555,10,1610,12,"id"],[1555,12,1610,14],[1555,17,1610,19,"undefined"],[1555,26,1610,28],[1555,28,1610,30],[1556,8,1611,12,"newId"],[1556,13,1611,17],[1556,16,1611,20],[1556,20,1611,24],[1556,21,1611,25,"id"],[1556,23,1611,27],[1556,25,1611,29],[1557,6,1612,8],[1557,7,1612,9],[1557,13,1614,12,"newId"],[1557,18,1614,17],[1557,21,1614,20,"id"],[1557,23,1614,22],[1558,6,1615,8],[1558,10,1615,12],[1558,11,1615,13,"styleIDMap"],[1558,21,1615,23],[1558,22,1615,24,"set"],[1558,25,1615,27],[1558,26,1615,28,"stylesheet"],[1558,36,1615,38],[1558,38,1615,40,"newId"],[1558,43,1615,45],[1558,44,1615,46],[1559,6,1616,8],[1559,10,1616,12],[1559,11,1616,13,"idStyleMap"],[1559,21,1616,23],[1559,22,1616,24,"set"],[1559,25,1616,27],[1559,26,1616,28,"newId"],[1559,31,1616,33],[1559,33,1616,35,"stylesheet"],[1559,43,1616,45],[1559,44,1616,46],[1560,6,1617,8],[1560,13,1617,15,"newId"],[1560,18,1617,20],[1561,4,1618,4],[1562,4,1619,4,"getStyle"],[1562,12,1619,12,"getStyle"],[1562,13,1619,13,"id"],[1562,15,1619,15],[1562,17,1619,17],[1563,6,1620,8],[1563,13,1620,15],[1563,17,1620,19],[1563,18,1620,20,"idStyleMap"],[1563,28,1620,30],[1563,29,1620,31,"get"],[1563,32,1620,34],[1563,33,1620,35,"id"],[1563,35,1620,37],[1563,36,1620,38],[1563,40,1620,42],[1563,44,1620,46],[1564,4,1621,4],[1565,4,1622,4,"reset"],[1565,9,1622,9,"reset"],[1565,10,1622,9],[1565,12,1622,12],[1566,6,1623,8],[1566,10,1623,12],[1566,11,1623,13,"styleIDMap"],[1566,21,1623,23],[1566,24,1623,26],[1566,28,1623,30,"WeakMap"],[1566,35,1623,37],[1566,36,1623,38],[1566,37,1623,39],[1567,6,1624,8],[1567,10,1624,12],[1567,11,1624,13,"idStyleMap"],[1567,21,1624,23],[1567,24,1624,26],[1567,28,1624,30,"Map"],[1567,31,1624,33],[1567,32,1624,34],[1567,33,1624,35],[1568,6,1625,8],[1568,10,1625,12],[1568,11,1625,13,"id"],[1568,13,1625,15],[1568,16,1625,18],[1568,17,1625,19],[1569,4,1626,4],[1570,4,1627,4,"generateId"],[1570,14,1627,14,"generateId"],[1570,15,1627,14],[1570,17,1627,17],[1571,6,1628,8],[1571,13,1628,15],[1571,17,1628,19],[1571,18,1628,20,"id"],[1571,20,1628,22],[1571,22,1628,24],[1572,4,1629,4],[1573,2,1630,0],[1574,2,1631,0],[1574,11,1631,9,"getShadowHost"],[1574,24,1631,22,"getShadowHost"],[1574,25,1631,23,"n"],[1574,26,1631,24],[1574,28,1631,26],[1575,4,1632,4],[1575,8,1632,8,"shadowHost"],[1575,18,1632,18],[1575,21,1632,21],[1575,25,1632,25],[1576,4,1633,4],[1576,8,1633,8,"_optionalChain$4"],[1576,24,1633,24],[1576,25,1633,25],[1576,26,1633,26,"n"],[1576,27,1633,27],[1576,29,1633,29],[1576,37,1633,37],[1576,39,1633,39,"_19"],[1576,42,1633,42],[1576,46,1633,46,"_19"],[1576,49,1633,49],[1576,50,1633,50,"getRootNode"],[1576,61,1633,61],[1576,63,1633,63],[1576,77,1633,77],[1576,79,1633,79,"_20"],[1576,82,1633,82],[1576,86,1633,86,"_20"],[1576,89,1633,89],[1576,90,1633,90],[1576,91,1633,91],[1576,93,1633,93],[1576,109,1633,109],[1576,111,1633,111,"_21"],[1576,114,1633,114],[1576,118,1633,118,"_21"],[1576,121,1633,121],[1576,122,1633,122,"nodeType"],[1576,130,1633,130],[1576,131,1633,131],[1576,132,1633,132],[1576,137,1633,137,"Node"],[1576,141,1633,141],[1576,142,1633,142,"DOCUMENT_FRAGMENT_NODE"],[1576,164,1633,164],[1576,168,1634,8,"n"],[1576,169,1634,9],[1576,170,1634,10,"getRootNode"],[1576,181,1634,21],[1576,182,1634,22],[1576,183,1634,23],[1576,184,1634,24,"host"],[1576,188,1634,28],[1576,190,1635,8,"shadowHost"],[1576,200,1635,18],[1576,203,1635,21,"n"],[1576,204,1635,22],[1576,205,1635,23,"getRootNode"],[1576,216,1635,34],[1576,217,1635,35],[1576,218,1635,36],[1576,219,1635,37,"host"],[1576,223,1635,41],[1577,4,1636,4],[1577,11,1636,11,"shadowHost"],[1577,21,1636,21],[1578,2,1637,0],[1579,2,1638,0],[1579,11,1638,9,"getRootShadowHost"],[1579,28,1638,26,"getRootShadowHost"],[1579,29,1638,27,"n"],[1579,30,1638,28],[1579,32,1638,30],[1580,4,1639,4],[1580,8,1639,8,"rootShadowHost"],[1580,22,1639,22],[1580,25,1639,25,"n"],[1580,26,1639,26],[1581,4,1640,4],[1581,8,1640,8,"shadowHost"],[1581,18,1640,18],[1582,4,1641,4],[1582,11,1641,12,"shadowHost"],[1582,21,1641,22],[1582,24,1641,25,"getShadowHost"],[1582,37,1641,38],[1582,38,1641,39,"rootShadowHost"],[1582,52,1641,53],[1582,53,1641,54],[1582,55,1642,8,"rootShadowHost"],[1582,69,1642,22],[1582,72,1642,25,"shadowHost"],[1582,82,1642,35],[1583,4,1643,4],[1583,11,1643,11,"rootShadowHost"],[1583,25,1643,25],[1584,2,1644,0],[1585,2,1645,0],[1585,11,1645,9,"shadowHostInDom"],[1585,26,1645,24,"shadowHostInDom"],[1585,27,1645,25,"n"],[1585,28,1645,26],[1585,30,1645,28],[1586,4,1646,4],[1586,10,1646,10,"doc"],[1586,13,1646,13],[1586,16,1646,16,"n"],[1586,17,1646,17],[1586,18,1646,18,"ownerDocument"],[1586,31,1646,31],[1587,4,1647,4],[1587,8,1647,8],[1587,9,1647,9,"doc"],[1587,12,1647,12],[1587,14,1648,8],[1587,21,1648,15],[1587,26,1648,20],[1588,4,1649,4],[1588,10,1649,10,"shadowHost"],[1588,20,1649,20],[1588,23,1649,23,"getRootShadowHost"],[1588,40,1649,40],[1588,41,1649,41,"n"],[1588,42,1649,42],[1588,43,1649,43],[1589,4,1650,4],[1589,11,1650,11,"doc"],[1589,14,1650,14],[1589,15,1650,15,"contains"],[1589,23,1650,23],[1589,24,1650,24,"shadowHost"],[1589,34,1650,34],[1589,35,1650,35],[1590,2,1651,0],[1591,2,1652,0],[1591,11,1652,9,"inDom"],[1591,16,1652,14,"inDom"],[1591,17,1652,15,"n"],[1591,18,1652,16],[1591,20,1652,18],[1592,4,1653,4],[1592,10,1653,10,"doc"],[1592,13,1653,13],[1592,16,1653,16,"n"],[1592,17,1653,17],[1592,18,1653,18,"ownerDocument"],[1592,31,1653,31],[1593,4,1654,4],[1593,8,1654,8],[1593,9,1654,9,"doc"],[1593,12,1654,12],[1593,14,1655,8],[1593,21,1655,15],[1593,26,1655,20],[1594,4,1656,4],[1594,11,1656,11,"doc"],[1594,14,1656,14],[1594,15,1656,15,"contains"],[1594,23,1656,23],[1594,24,1656,24,"n"],[1594,25,1656,25],[1594,26,1656,26],[1594,30,1656,30,"shadowHostInDom"],[1594,45,1656,45],[1594,46,1656,46,"n"],[1594,47,1656,47],[1594,48,1656,48],[1595,2,1657,0],[1596,2,1658,0],[1596,8,1658,6,"cachedImplementations"],[1596,29,1658,27],[1596,32,1658,30],[1596,33,1658,31],[1596,34,1658,32],[1597,2,1659,0],[1597,11,1659,9,"getImplementation"],[1597,28,1659,26,"getImplementation"],[1597,29,1659,27,"name"],[1597,33,1659,31],[1597,35,1659,33],[1598,4,1660,4],[1598,10,1660,10,"cached"],[1598,16,1660,16],[1598,19,1660,19,"cachedImplementations"],[1598,40,1660,40],[1598,41,1660,41,"name"],[1598,45,1660,45],[1598,46,1660,46],[1599,4,1661,4],[1599,8,1661,8,"cached"],[1599,14,1661,14],[1599,16,1661,16],[1600,6,1662,8],[1600,13,1662,15,"cached"],[1600,19,1662,21],[1601,4,1663,4],[1602,4,1664,4],[1602,10,1664,10,"document"],[1602,18,1664,18],[1602,21,1664,21,"window"],[1602,27,1664,27],[1602,28,1664,28,"document"],[1602,36,1664,36],[1603,4,1665,4],[1603,8,1665,8,"impl"],[1603,12,1665,12],[1603,15,1665,15,"window"],[1603,21,1665,21],[1603,22,1665,22,"name"],[1603,26,1665,26],[1603,27,1665,27],[1604,4,1666,4],[1604,8,1666,8,"document"],[1604,16,1666,16],[1604,20,1666,20],[1604,27,1666,27,"document"],[1604,35,1666,35],[1604,36,1666,36,"createElement"],[1604,49,1666,49],[1604,54,1666,54],[1604,64,1666,64],[1604,66,1666,66],[1605,6,1667,8],[1605,10,1667,12],[1606,8,1668,12],[1606,14,1668,18,"sandbox"],[1606,21,1668,25],[1606,24,1668,28,"document"],[1606,32,1668,36],[1606,33,1668,37,"createElement"],[1606,46,1668,50],[1606,47,1668,51],[1606,55,1668,59],[1606,56,1668,60],[1607,8,1669,12,"sandbox"],[1607,15,1669,19],[1607,16,1669,20,"hidden"],[1607,22,1669,26],[1607,25,1669,29],[1607,29,1669,33],[1608,8,1670,12,"document"],[1608,16,1670,20],[1608,17,1670,21,"head"],[1608,21,1670,25],[1608,22,1670,26,"appendChild"],[1608,33,1670,37],[1608,34,1670,38,"sandbox"],[1608,41,1670,45],[1608,42,1670,46],[1609,8,1671,12],[1609,14,1671,18,"contentWindow"],[1609,27,1671,31],[1609,30,1671,34,"sandbox"],[1609,37,1671,41],[1609,38,1671,42,"contentWindow"],[1609,51,1671,55],[1610,8,1672,12],[1610,12,1672,16,"contentWindow"],[1610,25,1672,29],[1610,29,1672,33,"contentWindow"],[1610,42,1672,46],[1610,43,1672,47,"name"],[1610,47,1672,51],[1610,48,1672,52],[1610,50,1672,54],[1611,10,1673,16,"impl"],[1611,14,1673,20],[1611,17,1674,20,"contentWindow"],[1611,30,1674,33],[1611,31,1674,34,"name"],[1611,35,1674,38],[1611,36,1674,39],[1612,8,1675,12],[1613,8,1676,12,"document"],[1613,16,1676,20],[1613,17,1676,21,"head"],[1613,21,1676,25],[1613,22,1676,26,"removeChild"],[1613,33,1676,37],[1613,34,1676,38,"sandbox"],[1613,41,1676,45],[1613,42,1676,46],[1614,6,1677,8],[1614,7,1677,9],[1614,8,1678,8],[1614,15,1678,15,"e"],[1614,16,1678,16],[1614,18,1678,18],[1614,19,1679,8],[1615,4,1680,4],[1616,4,1681,4],[1616,11,1681,12,"cachedImplementations"],[1616,32,1681,33],[1616,33,1681,34,"name"],[1616,37,1681,38],[1616,38,1681,39],[1616,41,1681,42,"impl"],[1616,45,1681,46],[1616,46,1681,47,"bind"],[1616,50,1681,51],[1616,51,1681,52,"window"],[1616,57,1681,58],[1616,58,1681,59],[1617,2,1682,0],[1618,2,1683,0],[1618,11,1683,9,"onRequestAnimationFrame"],[1618,34,1683,32,"onRequestAnimationFrame"],[1618,35,1683,33],[1618,38,1683,36,"rest"],[1618,42,1683,40],[1618,44,1683,42],[1619,4,1684,4],[1619,11,1684,11,"getImplementation"],[1619,28,1684,28],[1619,29,1684,29],[1619,52,1684,52],[1619,53,1684,53],[1619,54,1684,54],[1619,57,1684,57,"rest"],[1619,61,1684,61],[1619,62,1684,62],[1620,2,1685,0],[1621,2,1686,0],[1621,11,1686,9,"setTimeout$1"],[1621,23,1686,21,"setTimeout$1"],[1621,24,1686,22],[1621,27,1686,25,"rest"],[1621,31,1686,29],[1621,33,1686,31],[1622,4,1687,4],[1622,11,1687,11,"getImplementation"],[1622,28,1687,28],[1622,29,1687,29],[1622,41,1687,41],[1622,42,1687,42],[1622,43,1687,43],[1622,46,1687,46,"rest"],[1622,50,1687,50],[1622,51,1687,51],[1623,2,1688,0],[1624,2,1689,0],[1624,11,1689,9,"clearTimeout$1"],[1624,25,1689,23,"clearTimeout$1"],[1624,26,1689,24],[1624,29,1689,27,"rest"],[1624,33,1689,31],[1624,35,1689,33],[1625,4,1690,4],[1625,11,1690,11,"getImplementation"],[1625,28,1690,28],[1625,29,1690,29],[1625,43,1690,43],[1625,44,1690,44],[1625,45,1690,45],[1625,48,1690,48,"rest"],[1625,52,1690,52],[1625,53,1690,53],[1626,2,1691,0],[1627,2,1693,0],[1627,6,1693,4,"EventType"],[1627,15,1693,13],[1627,18,1693,16],[1627,33,1693,32],[1627,34,1693,34,"EventType2"],[1627,44,1693,44],[1627,48,1693,49],[1628,4,1694,2,"EventType2"],[1628,14,1694,12],[1628,15,1694,13,"EventType2"],[1628,25,1694,23],[1628,26,1694,24],[1628,44,1694,42],[1628,45,1694,43],[1628,48,1694,46],[1628,49,1694,47],[1628,50,1694,48],[1628,53,1694,51],[1628,71,1694,69],[1629,4,1695,2,"EventType2"],[1629,14,1695,12],[1629,15,1695,13,"EventType2"],[1629,25,1695,23],[1629,26,1695,24],[1629,32,1695,30],[1629,33,1695,31],[1629,36,1695,34],[1629,37,1695,35],[1629,38,1695,36],[1629,41,1695,39],[1629,47,1695,45],[1630,4,1696,2,"EventType2"],[1630,14,1696,12],[1630,15,1696,13,"EventType2"],[1630,25,1696,23],[1630,26,1696,24],[1630,40,1696,38],[1630,41,1696,39],[1630,44,1696,42],[1630,45,1696,43],[1630,46,1696,44],[1630,49,1696,47],[1630,63,1696,61],[1631,4,1697,2,"EventType2"],[1631,14,1697,12],[1631,15,1697,13,"EventType2"],[1631,25,1697,23],[1631,26,1697,24],[1631,47,1697,45],[1631,48,1697,46],[1631,51,1697,49],[1631,52,1697,50],[1631,53,1697,51],[1631,56,1697,54],[1631,77,1697,75],[1632,4,1698,2,"EventType2"],[1632,14,1698,12],[1632,15,1698,13,"EventType2"],[1632,25,1698,23],[1632,26,1698,24],[1632,32,1698,30],[1632,33,1698,31],[1632,36,1698,34],[1632,37,1698,35],[1632,38,1698,36],[1632,41,1698,39],[1632,47,1698,45],[1633,4,1699,2,"EventType2"],[1633,14,1699,12],[1633,15,1699,13,"EventType2"],[1633,25,1699,23],[1633,26,1699,24],[1633,34,1699,32],[1633,35,1699,33],[1633,38,1699,36],[1633,39,1699,37],[1633,40,1699,38],[1633,43,1699,41],[1633,51,1699,49],[1634,4,1700,2,"EventType2"],[1634,14,1700,12],[1634,15,1700,13,"EventType2"],[1634,25,1700,23],[1634,26,1700,24],[1634,34,1700,32],[1634,35,1700,33],[1634,38,1700,36],[1634,39,1700,37],[1634,40,1700,38],[1634,43,1700,41],[1634,51,1700,49],[1635,4,1701,2],[1635,11,1701,9,"EventType2"],[1635,21,1701,19],[1636,2,1702,0],[1636,3,1702,1],[1636,5,1702,3,"EventType"],[1636,14,1702,12],[1636,18,1702,16],[1636,19,1702,17],[1636,20,1702,18],[1636,21,1702,19],[1637,2,1703,0],[1637,6,1703,4,"IncrementalSource"],[1637,23,1703,21],[1637,26,1703,24],[1637,41,1703,40],[1637,42,1703,42,"IncrementalSource2"],[1637,60,1703,60],[1637,64,1703,65],[1638,4,1704,2,"IncrementalSource2"],[1638,22,1704,20],[1638,23,1704,21,"IncrementalSource2"],[1638,41,1704,39],[1638,42,1704,40],[1638,52,1704,50],[1638,53,1704,51],[1638,56,1704,54],[1638,57,1704,55],[1638,58,1704,56],[1638,61,1704,59],[1638,71,1704,69],[1639,4,1705,2,"IncrementalSource2"],[1639,22,1705,20],[1639,23,1705,21,"IncrementalSource2"],[1639,41,1705,39],[1639,42,1705,40],[1639,53,1705,51],[1639,54,1705,52],[1639,57,1705,55],[1639,58,1705,56],[1639,59,1705,57],[1639,62,1705,60],[1639,73,1705,71],[1640,4,1706,2,"IncrementalSource2"],[1640,22,1706,20],[1640,23,1706,21,"IncrementalSource2"],[1640,41,1706,39],[1640,42,1706,40],[1640,60,1706,58],[1640,61,1706,59],[1640,64,1706,62],[1640,65,1706,63],[1640,66,1706,64],[1640,69,1706,67],[1640,87,1706,85],[1641,4,1707,2,"IncrementalSource2"],[1641,22,1707,20],[1641,23,1707,21,"IncrementalSource2"],[1641,41,1707,39],[1641,42,1707,40],[1641,50,1707,48],[1641,51,1707,49],[1641,54,1707,52],[1641,55,1707,53],[1641,56,1707,54],[1641,59,1707,57],[1641,67,1707,65],[1642,4,1708,2,"IncrementalSource2"],[1642,22,1708,20],[1642,23,1708,21,"IncrementalSource2"],[1642,41,1708,39],[1642,42,1708,40],[1642,58,1708,56],[1642,59,1708,57],[1642,62,1708,60],[1642,63,1708,61],[1642,64,1708,62],[1642,67,1708,65],[1642,83,1708,81],[1643,4,1709,2,"IncrementalSource2"],[1643,22,1709,20],[1643,23,1709,21,"IncrementalSource2"],[1643,41,1709,39],[1643,42,1709,40],[1643,49,1709,47],[1643,50,1709,48],[1643,53,1709,51],[1643,54,1709,52],[1643,55,1709,53],[1643,58,1709,56],[1643,65,1709,63],[1644,4,1710,2,"IncrementalSource2"],[1644,22,1710,20],[1644,23,1710,21,"IncrementalSource2"],[1644,41,1710,39],[1644,42,1710,40],[1644,53,1710,51],[1644,54,1710,52],[1644,57,1710,55],[1644,58,1710,56],[1644,59,1710,57],[1644,62,1710,60],[1644,73,1710,71],[1645,4,1711,2,"IncrementalSource2"],[1645,22,1711,20],[1645,23,1711,21,"IncrementalSource2"],[1645,41,1711,39],[1645,42,1711,40],[1645,60,1711,58],[1645,61,1711,59],[1645,64,1711,62],[1645,65,1711,63],[1645,66,1711,64],[1645,69,1711,67],[1645,87,1711,85],[1646,4,1712,2,"IncrementalSource2"],[1646,22,1712,20],[1646,23,1712,21,"IncrementalSource2"],[1646,41,1712,39],[1646,42,1712,40],[1646,58,1712,56],[1646,59,1712,57],[1646,62,1712,60],[1646,63,1712,61],[1646,64,1712,62],[1646,67,1712,65],[1646,83,1712,81],[1647,4,1713,2,"IncrementalSource2"],[1647,22,1713,20],[1647,23,1713,21,"IncrementalSource2"],[1647,41,1713,39],[1647,42,1713,40],[1647,58,1713,56],[1647,59,1713,57],[1647,62,1713,60],[1647,63,1713,61],[1647,64,1713,62],[1647,67,1713,65],[1647,83,1713,81],[1648,4,1714,2,"IncrementalSource2"],[1648,22,1714,20],[1648,23,1714,21,"IncrementalSource2"],[1648,41,1714,39],[1648,42,1714,40],[1648,48,1714,46],[1648,49,1714,47],[1648,52,1714,50],[1648,54,1714,52],[1648,55,1714,53],[1648,58,1714,56],[1648,64,1714,62],[1649,4,1715,2,"IncrementalSource2"],[1649,22,1715,20],[1649,23,1715,21,"IncrementalSource2"],[1649,41,1715,39],[1649,42,1715,40],[1649,47,1715,45],[1649,48,1715,46],[1649,51,1715,49],[1649,53,1715,51],[1649,54,1715,52],[1649,57,1715,55],[1649,62,1715,60],[1650,4,1716,2,"IncrementalSource2"],[1650,22,1716,20],[1650,23,1716,21,"IncrementalSource2"],[1650,41,1716,39],[1650,42,1716,40],[1650,48,1716,46],[1650,49,1716,47],[1650,52,1716,50],[1650,54,1716,52],[1650,55,1716,53],[1650,58,1716,56],[1650,64,1716,62],[1651,4,1717,2,"IncrementalSource2"],[1651,22,1717,20],[1651,23,1717,21,"IncrementalSource2"],[1651,41,1717,39],[1651,42,1717,40],[1651,60,1717,58],[1651,61,1717,59],[1651,64,1717,62],[1651,66,1717,64],[1651,67,1717,65],[1651,70,1717,68],[1651,88,1717,86],[1652,4,1718,2,"IncrementalSource2"],[1652,22,1718,20],[1652,23,1718,21,"IncrementalSource2"],[1652,41,1718,39],[1652,42,1718,40],[1652,53,1718,51],[1652,54,1718,52],[1652,57,1718,55],[1652,59,1718,57],[1652,60,1718,58],[1652,63,1718,61],[1652,74,1718,72],[1653,4,1719,2,"IncrementalSource2"],[1653,22,1719,20],[1653,23,1719,21,"IncrementalSource2"],[1653,41,1719,39],[1653,42,1719,40],[1653,61,1719,59],[1653,62,1719,60],[1653,65,1719,63],[1653,67,1719,65],[1653,68,1719,66],[1653,71,1719,69],[1653,90,1719,88],[1654,4,1720,2,"IncrementalSource2"],[1654,22,1720,20],[1654,23,1720,21,"IncrementalSource2"],[1654,41,1720,39],[1654,42,1720,40],[1654,57,1720,55],[1654,58,1720,56],[1654,61,1720,59],[1654,63,1720,61],[1654,64,1720,62],[1654,67,1720,65],[1654,82,1720,80],[1655,4,1721,2],[1655,11,1721,9,"IncrementalSource2"],[1655,29,1721,27],[1656,2,1722,0],[1656,3,1722,1],[1656,5,1722,3,"IncrementalSource"],[1656,22,1722,20],[1656,26,1722,24],[1656,27,1722,25],[1656,28,1722,26],[1656,29,1722,27],[1657,2,1723,0],[1657,6,1723,4,"MouseInteractions"],[1657,23,1723,21],[1657,26,1723,24],[1657,41,1723,40],[1657,42,1723,42,"MouseInteractions2"],[1657,60,1723,60],[1657,64,1723,65],[1658,4,1724,2,"MouseInteractions2"],[1658,22,1724,20],[1658,23,1724,21,"MouseInteractions2"],[1658,41,1724,39],[1658,42,1724,40],[1658,51,1724,49],[1658,52,1724,50],[1658,55,1724,53],[1658,56,1724,54],[1658,57,1724,55],[1658,60,1724,58],[1658,69,1724,67],[1659,4,1725,2,"MouseInteractions2"],[1659,22,1725,20],[1659,23,1725,21,"MouseInteractions2"],[1659,41,1725,39],[1659,42,1725,40],[1659,53,1725,51],[1659,54,1725,52],[1659,57,1725,55],[1659,58,1725,56],[1659,59,1725,57],[1659,62,1725,60],[1659,73,1725,71],[1660,4,1726,2,"MouseInteractions2"],[1660,22,1726,20],[1660,23,1726,21,"MouseInteractions2"],[1660,41,1726,39],[1660,42,1726,40],[1660,49,1726,47],[1660,50,1726,48],[1660,53,1726,51],[1660,54,1726,52],[1660,55,1726,53],[1660,58,1726,56],[1660,65,1726,63],[1661,4,1727,2,"MouseInteractions2"],[1661,22,1727,20],[1661,23,1727,21,"MouseInteractions2"],[1661,41,1727,39],[1661,42,1727,40],[1661,55,1727,53],[1661,56,1727,54],[1661,59,1727,57],[1661,60,1727,58],[1661,61,1727,59],[1661,64,1727,62],[1661,77,1727,75],[1662,4,1728,2,"MouseInteractions2"],[1662,22,1728,20],[1662,23,1728,21,"MouseInteractions2"],[1662,41,1728,39],[1662,42,1728,40],[1662,52,1728,50],[1662,53,1728,51],[1662,56,1728,54],[1662,57,1728,55],[1662,58,1728,56],[1662,61,1728,59],[1662,71,1728,69],[1663,4,1729,2,"MouseInteractions2"],[1663,22,1729,20],[1663,23,1729,21,"MouseInteractions2"],[1663,41,1729,39],[1663,42,1729,40],[1663,49,1729,47],[1663,50,1729,48],[1663,53,1729,51],[1663,54,1729,52],[1663,55,1729,53],[1663,58,1729,56],[1663,65,1729,63],[1664,4,1730,2,"MouseInteractions2"],[1664,22,1730,20],[1664,23,1730,21,"MouseInteractions2"],[1664,41,1730,39],[1664,42,1730,40],[1664,48,1730,46],[1664,49,1730,47],[1664,52,1730,50],[1664,53,1730,51],[1664,54,1730,52],[1664,57,1730,55],[1664,63,1730,61],[1665,4,1731,2,"MouseInteractions2"],[1665,22,1731,20],[1665,23,1731,21,"MouseInteractions2"],[1665,41,1731,39],[1665,42,1731,40],[1665,54,1731,52],[1665,55,1731,53],[1665,58,1731,56],[1665,59,1731,57],[1665,60,1731,58],[1665,63,1731,61],[1665,75,1731,73],[1666,4,1732,2,"MouseInteractions2"],[1666,22,1732,20],[1666,23,1732,21,"MouseInteractions2"],[1666,41,1732,39],[1666,42,1732,40],[1666,62,1732,60],[1666,63,1732,61],[1666,66,1732,64],[1666,67,1732,65],[1666,68,1732,66],[1666,71,1732,69],[1666,91,1732,89],[1667,4,1733,2,"MouseInteractions2"],[1667,22,1733,20],[1667,23,1733,21,"MouseInteractions2"],[1667,41,1733,39],[1667,42,1733,40],[1667,52,1733,50],[1667,53,1733,51],[1667,56,1733,54],[1667,57,1733,55],[1667,58,1733,56],[1667,61,1733,59],[1667,71,1733,69],[1668,4,1734,2,"MouseInteractions2"],[1668,22,1734,20],[1668,23,1734,21,"MouseInteractions2"],[1668,41,1734,39],[1668,42,1734,40],[1668,55,1734,53],[1668,56,1734,54],[1668,59,1734,57],[1668,61,1734,59],[1668,62,1734,60],[1668,65,1734,63],[1668,78,1734,76],[1669,4,1735,2],[1669,11,1735,9,"MouseInteractions2"],[1669,29,1735,27],[1670,2,1736,0],[1670,3,1736,1],[1670,5,1736,3,"MouseInteractions"],[1670,22,1736,20],[1670,26,1736,24],[1670,27,1736,25],[1670,28,1736,26],[1670,29,1736,27],[1671,2,1737,0],[1671,6,1737,4,"PointerTypes"],[1671,18,1737,16],[1671,21,1737,19],[1671,36,1737,35],[1671,37,1737,37,"PointerTypes2"],[1671,50,1737,50],[1671,54,1737,55],[1672,4,1738,2,"PointerTypes2"],[1672,17,1738,15],[1672,18,1738,16,"PointerTypes2"],[1672,31,1738,29],[1672,32,1738,30],[1672,39,1738,37],[1672,40,1738,38],[1672,43,1738,41],[1672,44,1738,42],[1672,45,1738,43],[1672,48,1738,46],[1672,55,1738,53],[1673,4,1739,2,"PointerTypes2"],[1673,17,1739,15],[1673,18,1739,16,"PointerTypes2"],[1673,31,1739,29],[1673,32,1739,30],[1673,37,1739,35],[1673,38,1739,36],[1673,41,1739,39],[1673,42,1739,40],[1673,43,1739,41],[1673,46,1739,44],[1673,51,1739,49],[1674,4,1740,2,"PointerTypes2"],[1674,17,1740,15],[1674,18,1740,16,"PointerTypes2"],[1674,31,1740,29],[1674,32,1740,30],[1674,39,1740,37],[1674,40,1740,38],[1674,43,1740,41],[1674,44,1740,42],[1674,45,1740,43],[1674,48,1740,46],[1674,55,1740,53],[1675,4,1741,2],[1675,11,1741,9,"PointerTypes2"],[1675,24,1741,22],[1676,2,1742,0],[1676,3,1742,1],[1676,5,1742,3,"PointerTypes"],[1676,17,1742,15],[1676,21,1742,19],[1676,22,1742,20],[1676,23,1742,21],[1676,24,1742,22],[1677,2,1744,0],[1677,6,1744,4,"NodeType$1"],[1677,16,1744,14],[1678,2,1745,0],[1678,3,1745,1],[1678,13,1745,11,"NodeType"],[1678,21,1745,19],[1678,23,1745,21],[1679,4,1746,4,"NodeType"],[1679,12,1746,12],[1679,13,1746,13,"NodeType"],[1679,21,1746,21],[1679,22,1746,22],[1679,32,1746,32],[1679,33,1746,33],[1679,36,1746,36],[1679,37,1746,37],[1679,38,1746,38],[1679,41,1746,41],[1679,51,1746,51],[1680,4,1747,4,"NodeType"],[1680,12,1747,12],[1680,13,1747,13,"NodeType"],[1680,21,1747,21],[1680,22,1747,22],[1680,36,1747,36],[1680,37,1747,37],[1680,40,1747,40],[1680,41,1747,41],[1680,42,1747,42],[1680,45,1747,45],[1680,59,1747,59],[1681,4,1748,4,"NodeType"],[1681,12,1748,12],[1681,13,1748,13,"NodeType"],[1681,21,1748,21],[1681,22,1748,22],[1681,31,1748,31],[1681,32,1748,32],[1681,35,1748,35],[1681,36,1748,36],[1681,37,1748,37],[1681,40,1748,40],[1681,49,1748,49],[1682,4,1749,4,"NodeType"],[1682,12,1749,12],[1682,13,1749,13,"NodeType"],[1682,21,1749,21],[1682,22,1749,22],[1682,28,1749,28],[1682,29,1749,29],[1682,32,1749,32],[1682,33,1749,33],[1682,34,1749,34],[1682,37,1749,37],[1682,43,1749,43],[1683,4,1750,4,"NodeType"],[1683,12,1750,12],[1683,13,1750,13,"NodeType"],[1683,21,1750,21],[1683,22,1750,22],[1683,29,1750,29],[1683,30,1750,30],[1683,33,1750,33],[1683,34,1750,34],[1683,35,1750,35],[1683,38,1750,38],[1683,45,1750,45],[1684,4,1751,4,"NodeType"],[1684,12,1751,12],[1684,13,1751,13,"NodeType"],[1684,21,1751,21],[1684,22,1751,22],[1684,31,1751,31],[1684,32,1751,32],[1684,35,1751,35],[1684,36,1751,36],[1684,37,1751,37],[1684,40,1751,40],[1684,49,1751,49],[1685,2,1752,0],[1685,3,1752,1],[1685,5,1752,3,"NodeType$1"],[1685,15,1752,13],[1685,20,1752,18,"NodeType$1"],[1685,30,1752,28],[1685,33,1752,31],[1685,34,1752,32],[1685,35,1752,33],[1685,36,1752,34],[1685,37,1752,35],[1686,2,1753,0],[1686,6,1753,4,"NodeType$2"],[1686,16,1753,14],[1687,2,1754,0],[1687,3,1754,1],[1687,13,1754,11,"NodeType"],[1687,21,1754,19],[1687,23,1754,21],[1688,4,1755,4,"NodeType"],[1688,12,1755,12],[1688,13,1755,13,"NodeType"],[1688,21,1755,21],[1688,22,1755,22],[1688,35,1755,35],[1688,36,1755,36],[1688,39,1755,39],[1688,40,1755,40],[1688,41,1755,41],[1688,44,1755,44],[1688,57,1755,57],[1689,4,1756,4,"NodeType"],[1689,12,1756,12],[1689,13,1756,13,"NodeType"],[1689,21,1756,21],[1689,22,1756,22],[1689,36,1756,36],[1689,37,1756,37],[1689,40,1756,40],[1689,41,1756,41],[1689,42,1756,42],[1689,45,1756,45],[1689,59,1756,59],[1690,4,1757,4,"NodeType"],[1690,12,1757,12],[1690,13,1757,13,"NodeType"],[1690,21,1757,21],[1690,22,1757,22],[1690,38,1757,38],[1690,39,1757,39],[1690,42,1757,42],[1690,43,1757,43],[1690,44,1757,44],[1690,47,1757,47],[1690,63,1757,63],[1691,4,1758,4,"NodeType"],[1691,12,1758,12],[1691,13,1758,13,"NodeType"],[1691,21,1758,21],[1691,22,1758,22],[1691,33,1758,33],[1691,34,1758,34],[1691,37,1758,37],[1691,38,1758,38],[1691,39,1758,39],[1691,42,1758,42],[1691,53,1758,53],[1692,4,1759,4,"NodeType"],[1692,12,1759,12],[1692,13,1759,13,"NodeType"],[1692,21,1759,21],[1692,22,1759,22],[1692,42,1759,42],[1692,43,1759,43],[1692,46,1759,46],[1692,47,1759,47],[1692,48,1759,48],[1692,51,1759,51],[1692,71,1759,71],[1693,4,1760,4,"NodeType"],[1693,12,1760,12],[1693,13,1760,13,"NodeType"],[1693,21,1760,21],[1693,22,1760,22],[1693,45,1760,45],[1693,46,1760,46],[1693,49,1760,49],[1693,50,1760,50],[1693,51,1760,51],[1693,54,1760,54],[1693,77,1760,77],[1694,4,1761,4,"NodeType"],[1694,12,1761,12],[1694,13,1761,13,"NodeType"],[1694,21,1761,21],[1694,22,1761,22],[1694,35,1761,35],[1694,36,1761,36],[1694,39,1761,39],[1694,40,1761,40],[1694,41,1761,41],[1694,44,1761,44],[1694,57,1761,57],[1695,4,1762,4,"NodeType"],[1695,12,1762,12],[1695,13,1762,13,"NodeType"],[1695,21,1762,21],[1695,22,1762,22],[1695,51,1762,51],[1695,52,1762,52],[1695,55,1762,55],[1695,56,1762,56],[1695,57,1762,57],[1695,60,1762,60],[1695,89,1762,89],[1696,4,1763,4,"NodeType"],[1696,12,1763,12],[1696,13,1763,13,"NodeType"],[1696,21,1763,21],[1696,22,1763,22],[1696,36,1763,36],[1696,37,1763,37],[1696,40,1763,40],[1696,41,1763,41],[1696,42,1763,42],[1696,45,1763,45],[1696,59,1763,59],[1697,4,1764,4,"NodeType"],[1697,12,1764,12],[1697,13,1764,13,"NodeType"],[1697,21,1764,21],[1697,22,1764,22],[1697,37,1764,37],[1697,38,1764,38],[1697,41,1764,41],[1697,42,1764,42],[1697,43,1764,43],[1697,46,1764,46],[1697,61,1764,61],[1698,4,1765,4,"NodeType"],[1698,12,1765,12],[1698,13,1765,13,"NodeType"],[1698,21,1765,21],[1698,22,1765,22],[1698,42,1765,42],[1698,43,1765,43],[1698,46,1765,46],[1698,48,1765,48],[1698,49,1765,49],[1698,52,1765,52],[1698,72,1765,72],[1699,4,1766,4,"NodeType"],[1699,12,1766,12],[1699,13,1766,13,"NodeType"],[1699,21,1766,21],[1699,22,1766,22],[1699,46,1766,46],[1699,47,1766,47],[1699,50,1766,50],[1699,52,1766,52],[1699,53,1766,53],[1699,56,1766,56],[1699,80,1766,80],[1700,2,1767,0],[1700,3,1767,1],[1700,5,1767,3,"NodeType$2"],[1700,15,1767,13],[1700,20,1767,18,"NodeType$2"],[1700,30,1767,28],[1700,33,1767,31],[1700,34,1767,32],[1700,35,1767,33],[1700,36,1767,34],[1700,37,1767,35],[1701,2,1769,0],[1701,11,1769,9,"getIFrameContentDocument"],[1701,35,1769,33,"getIFrameContentDocument"],[1701,36,1769,34,"iframe"],[1701,42,1769,40],[1701,44,1769,42],[1702,4,1770,4],[1702,8,1770,8],[1703,6,1771,8],[1703,13,1771,15,"iframe"],[1703,19,1771,21],[1703,20,1771,22,"contentDocument"],[1703,35,1771,37],[1704,4,1772,4],[1704,5,1772,5],[1704,6,1773,4],[1704,13,1773,11,"e"],[1704,14,1773,12],[1704,16,1773,14],[1704,17,1774,4],[1705,2,1775,0],[1706,2,1776,0],[1706,11,1776,9,"getIFrameContentWindow"],[1706,33,1776,31,"getIFrameContentWindow"],[1706,34,1776,32,"iframe"],[1706,40,1776,38],[1706,42,1776,40],[1707,4,1777,4],[1707,8,1777,8],[1708,6,1778,8],[1708,13,1778,15,"iframe"],[1708,19,1778,21],[1708,20,1778,22,"contentWindow"],[1708,33,1778,35],[1709,4,1779,4],[1709,5,1779,5],[1709,6,1780,4],[1709,13,1780,11,"e"],[1709,14,1780,12],[1709,16,1780,14],[1709,17,1781,4],[1710,2,1782,0],[1711,2,1784,0],[1711,11,1784,9,"_optionalChain$3"],[1711,27,1784,25,"_optionalChain$3"],[1711,28,1784,26,"ops"],[1711,31,1784,29],[1711,33,1784,31],[1712,4,1784,33],[1712,8,1784,37,"lastAccessLHS"],[1712,21,1784,50],[1712,24,1784,53,"undefined"],[1712,33,1784,62],[1713,4,1784,64],[1713,8,1784,68,"value"],[1713,13,1784,73],[1713,16,1784,76,"ops"],[1713,19,1784,79],[1713,20,1784,80],[1713,21,1784,81],[1713,22,1784,82],[1714,4,1784,84],[1714,8,1784,88,"i"],[1714,9,1784,89],[1714,12,1784,92],[1714,13,1784,93],[1715,4,1784,95],[1715,11,1784,102,"i"],[1715,12,1784,103],[1715,15,1784,106,"ops"],[1715,18,1784,109],[1715,19,1784,110,"length"],[1715,25,1784,116],[1715,27,1784,118],[1716,6,1784,120],[1716,12,1784,126,"op"],[1716,14,1784,128],[1716,17,1784,131,"ops"],[1716,20,1784,134],[1716,21,1784,135,"i"],[1716,22,1784,136],[1716,23,1784,137],[1717,6,1784,139],[1717,12,1784,145,"fn"],[1717,14,1784,147],[1717,17,1784,150,"ops"],[1717,20,1784,153],[1717,21,1784,154,"i"],[1717,22,1784,155],[1717,25,1784,158],[1717,26,1784,159],[1717,27,1784,160],[1718,6,1784,162,"i"],[1718,7,1784,163],[1718,11,1784,167],[1718,12,1784,168],[1719,6,1784,170],[1719,10,1784,174],[1719,11,1784,175,"op"],[1719,13,1784,177],[1719,18,1784,182],[1719,34,1784,198],[1719,38,1784,202,"op"],[1719,40,1784,204],[1719,45,1784,209],[1719,59,1784,223],[1719,64,1784,228,"value"],[1719,69,1784,233],[1719,73,1784,237],[1719,77,1784,241],[1719,79,1784,243],[1720,8,1784,245],[1720,15,1784,252,"undefined"],[1720,24,1784,261],[1721,6,1784,263],[1722,6,1784,265],[1722,10,1784,269,"op"],[1722,12,1784,271],[1722,17,1784,276],[1722,25,1784,284],[1722,29,1784,288,"op"],[1722,31,1784,290],[1722,36,1784,295],[1722,52,1784,311],[1722,54,1784,313],[1723,8,1784,315,"lastAccessLHS"],[1723,21,1784,328],[1723,24,1784,331,"value"],[1723,29,1784,336],[1724,8,1784,338,"value"],[1724,13,1784,343],[1724,16,1784,346,"fn"],[1724,18,1784,348],[1724,19,1784,349,"value"],[1724,24,1784,354],[1724,25,1784,355],[1725,6,1784,357],[1725,7,1784,358],[1725,13,1784,364],[1725,17,1784,368,"op"],[1725,19,1784,370],[1725,24,1784,375],[1725,30,1784,381],[1725,34,1784,385,"op"],[1725,36,1784,387],[1725,41,1784,392],[1725,55,1784,406],[1725,57,1784,408],[1726,8,1784,410,"value"],[1726,13,1784,415],[1726,16,1784,418,"fn"],[1726,18,1784,420],[1726,19,1784,421],[1726,20,1784,422],[1726,23,1784,425,"args"],[1726,27,1784,429],[1726,32,1784,434,"value"],[1726,37,1784,439],[1726,38,1784,440,"call"],[1726,42,1784,444],[1726,43,1784,445,"lastAccessLHS"],[1726,56,1784,458],[1726,58,1784,460],[1726,61,1784,463,"args"],[1726,65,1784,467],[1726,66,1784,468],[1726,67,1784,469],[1727,8,1784,471,"lastAccessLHS"],[1727,21,1784,484],[1727,24,1784,487,"undefined"],[1727,33,1784,496],[1728,6,1784,498],[1729,4,1784,500],[1730,4,1784,502],[1730,11,1784,509,"value"],[1730,16,1784,514],[1731,2,1784,516],[1732,2,1785,0],[1732,11,1785,9,"isNodeInLinkedList"],[1732,29,1785,27,"isNodeInLinkedList"],[1732,30,1785,28,"n"],[1732,31,1785,29],[1732,33,1785,31],[1733,4,1786,4],[1733,11,1786,11],[1733,17,1786,17],[1733,21,1786,21,"n"],[1733,22,1786,22],[1734,2,1787,0],[1735,2,1788,0],[1735,8,1788,6,"DoubleLinkedList"],[1735,24,1788,22],[1735,25,1788,23],[1736,4,1789,4,"constructor"],[1736,15,1789,15,"constructor"],[1736,16,1789,15],[1736,18,1789,18],[1737,6,1790,8],[1737,10,1790,12],[1737,11,1790,13,"length"],[1737,17,1790,19],[1737,20,1790,22],[1737,21,1790,23],[1738,6,1791,8],[1738,10,1791,12],[1738,11,1791,13,"head"],[1738,15,1791,17],[1738,18,1791,20],[1738,22,1791,24],[1739,6,1792,8],[1739,10,1792,12],[1739,11,1792,13,"tail"],[1739,15,1792,17],[1739,18,1792,20],[1739,22,1792,24],[1740,4,1793,4],[1741,4,1794,4,"get"],[1741,7,1794,7,"get"],[1741,8,1794,8,"position"],[1741,16,1794,16],[1741,18,1794,18],[1742,6,1795,8],[1742,10,1795,12,"position"],[1742,18,1795,20],[1742,22,1795,24],[1742,26,1795,28],[1742,27,1795,29,"length"],[1742,33,1795,35],[1742,35,1795,37],[1743,8,1796,12],[1743,14,1796,18],[1743,18,1796,22,"Error"],[1743,23,1796,27],[1743,24,1796,28],[1743,56,1796,60],[1743,57,1796,61],[1744,6,1797,8],[1745,6,1798,8],[1745,10,1798,12,"current"],[1745,17,1798,19],[1745,20,1798,22],[1745,24,1798,26],[1745,25,1798,27,"head"],[1745,29,1798,31],[1746,6,1799,8],[1746,11,1799,13],[1746,15,1799,17,"index"],[1746,20,1799,22],[1746,23,1799,25],[1746,24,1799,26],[1746,26,1799,28,"index"],[1746,31,1799,33],[1746,34,1799,36,"position"],[1746,42,1799,44],[1746,44,1799,46,"index"],[1746,49,1799,51],[1746,51,1799,53],[1746,53,1799,55],[1747,8,1800,12,"current"],[1747,15,1800,19],[1747,18,1800,22,"_optionalChain$3"],[1747,34,1800,38],[1747,35,1800,39],[1747,36,1800,40,"current"],[1747,43,1800,47],[1747,45,1800,49],[1747,61,1800,65],[1747,63,1800,67,"_"],[1747,64,1800,68],[1747,68,1800,72,"_"],[1747,69,1800,73],[1747,70,1800,74,"next"],[1747,74,1800,78],[1747,75,1800,79],[1747,76,1800,80],[1747,80,1800,84],[1747,84,1800,88],[1748,6,1801,8],[1749,6,1802,8],[1749,13,1802,15,"current"],[1749,20,1802,22],[1750,4,1803,4],[1751,4,1804,4,"addNode"],[1751,11,1804,11,"addNode"],[1751,12,1804,12,"n"],[1751,13,1804,13],[1751,15,1804,15],[1752,6,1805,8],[1752,12,1805,14,"node"],[1752,16,1805,18],[1752,19,1805,21],[1753,8,1806,12,"value"],[1753,13,1806,17],[1753,15,1806,19,"n"],[1753,16,1806,20],[1754,8,1807,12,"previous"],[1754,16,1807,20],[1754,18,1807,22],[1754,22,1807,26],[1755,8,1808,12,"next"],[1755,12,1808,16],[1755,14,1808,18],[1756,6,1809,8],[1756,7,1809,9],[1757,6,1810,8,"n"],[1757,7,1810,9],[1757,8,1810,10,"__ln"],[1757,12,1810,14],[1757,15,1810,17,"node"],[1757,19,1810,21],[1758,6,1811,8],[1758,10,1811,12,"n"],[1758,11,1811,13],[1758,12,1811,14,"previousSibling"],[1758,27,1811,29],[1758,31,1811,33,"isNodeInLinkedList"],[1758,49,1811,51],[1758,50,1811,52,"n"],[1758,51,1811,53],[1758,52,1811,54,"previousSibling"],[1758,67,1811,69],[1758,68,1811,70],[1758,70,1811,72],[1759,8,1812,12],[1759,14,1812,18,"current"],[1759,21,1812,25],[1759,24,1812,28,"n"],[1759,25,1812,29],[1759,26,1812,30,"previousSibling"],[1759,41,1812,45],[1759,42,1812,46,"__ln"],[1759,46,1812,50],[1759,47,1812,51,"next"],[1759,51,1812,55],[1760,8,1813,12,"node"],[1760,12,1813,16],[1760,13,1813,17,"next"],[1760,17,1813,21],[1760,20,1813,24,"current"],[1760,27,1813,31],[1761,8,1814,12,"node"],[1761,12,1814,16],[1761,13,1814,17,"previous"],[1761,21,1814,25],[1761,24,1814,28,"n"],[1761,25,1814,29],[1761,26,1814,30,"previousSibling"],[1761,41,1814,45],[1761,42,1814,46,"__ln"],[1761,46,1814,50],[1762,8,1815,12,"n"],[1762,9,1815,13],[1762,10,1815,14,"previousSibling"],[1762,25,1815,29],[1762,26,1815,30,"__ln"],[1762,30,1815,34],[1762,31,1815,35,"next"],[1762,35,1815,39],[1762,38,1815,42,"node"],[1762,42,1815,46],[1763,8,1816,12],[1763,12,1816,16,"current"],[1763,19,1816,23],[1763,21,1816,25],[1764,10,1817,16,"current"],[1764,17,1817,23],[1764,18,1817,24,"previous"],[1764,26,1817,32],[1764,29,1817,35,"node"],[1764,33,1817,39],[1765,8,1818,12],[1766,6,1819,8],[1766,7,1819,9],[1766,13,1820,13],[1766,17,1820,17,"n"],[1766,18,1820,18],[1766,19,1820,19,"nextSibling"],[1766,30,1820,30],[1766,34,1821,12,"isNodeInLinkedList"],[1766,52,1821,30],[1766,53,1821,31,"n"],[1766,54,1821,32],[1766,55,1821,33,"nextSibling"],[1766,66,1821,44],[1766,67,1821,45],[1766,71,1822,12,"n"],[1766,72,1822,13],[1766,73,1822,14,"nextSibling"],[1766,84,1822,25],[1766,85,1822,26,"__ln"],[1766,89,1822,30],[1766,90,1822,31,"previous"],[1766,98,1822,39],[1766,100,1822,41],[1767,8,1823,12],[1767,14,1823,18,"current"],[1767,21,1823,25],[1767,24,1823,28,"n"],[1767,25,1823,29],[1767,26,1823,30,"nextSibling"],[1767,37,1823,41],[1767,38,1823,42,"__ln"],[1767,42,1823,46],[1767,43,1823,47,"previous"],[1767,51,1823,55],[1768,8,1824,12,"node"],[1768,12,1824,16],[1768,13,1824,17,"previous"],[1768,21,1824,25],[1768,24,1824,28,"current"],[1768,31,1824,35],[1769,8,1825,12,"node"],[1769,12,1825,16],[1769,13,1825,17,"next"],[1769,17,1825,21],[1769,20,1825,24,"n"],[1769,21,1825,25],[1769,22,1825,26,"nextSibling"],[1769,33,1825,37],[1769,34,1825,38,"__ln"],[1769,38,1825,42],[1770,8,1826,12,"n"],[1770,9,1826,13],[1770,10,1826,14,"nextSibling"],[1770,21,1826,25],[1770,22,1826,26,"__ln"],[1770,26,1826,30],[1770,27,1826,31,"previous"],[1770,35,1826,39],[1770,38,1826,42,"node"],[1770,42,1826,46],[1771,8,1827,12],[1771,12,1827,16,"current"],[1771,19,1827,23],[1771,21,1827,25],[1772,10,1828,16,"current"],[1772,17,1828,23],[1772,18,1828,24,"next"],[1772,22,1828,28],[1772,25,1828,31,"node"],[1772,29,1828,35],[1773,8,1829,12],[1774,6,1830,8],[1774,7,1830,9],[1774,13,1831,13],[1775,8,1832,12],[1775,12,1832,16],[1775,16,1832,20],[1775,17,1832,21,"head"],[1775,21,1832,25],[1775,23,1832,27],[1776,10,1833,16],[1776,14,1833,20],[1776,15,1833,21,"head"],[1776,19,1833,25],[1776,20,1833,26,"previous"],[1776,28,1833,34],[1776,31,1833,37,"node"],[1776,35,1833,41],[1777,8,1834,12],[1778,8,1835,12,"node"],[1778,12,1835,16],[1778,13,1835,17,"next"],[1778,17,1835,21],[1778,20,1835,24],[1778,24,1835,28],[1778,25,1835,29,"head"],[1778,29,1835,33],[1779,8,1836,12],[1779,12,1836,16],[1779,13,1836,17,"head"],[1779,17,1836,21],[1779,20,1836,24,"node"],[1779,24,1836,28],[1780,6,1837,8],[1781,6,1838,8],[1781,10,1838,12,"node"],[1781,14,1838,16],[1781,15,1838,17,"next"],[1781,19,1838,21],[1781,24,1838,26],[1781,28,1838,30],[1781,30,1838,32],[1782,8,1839,12],[1782,12,1839,16],[1782,13,1839,17,"tail"],[1782,17,1839,21],[1782,20,1839,24,"node"],[1782,24,1839,28],[1783,6,1840,8],[1784,6,1841,8],[1784,10,1841,12],[1784,11,1841,13,"length"],[1784,17,1841,19],[1784,19,1841,21],[1785,4,1842,4],[1786,4,1843,4,"removeNode"],[1786,14,1843,14,"removeNode"],[1786,15,1843,15,"n"],[1786,16,1843,16],[1786,18,1843,18],[1787,6,1844,8],[1787,12,1844,14,"current"],[1787,19,1844,21],[1787,22,1844,24,"n"],[1787,23,1844,25],[1787,24,1844,26,"__ln"],[1787,28,1844,30],[1788,6,1845,8],[1788,10,1845,12],[1788,11,1845,13],[1788,15,1845,17],[1788,16,1845,18,"head"],[1788,20,1845,22],[1788,22,1845,24],[1789,8,1846,12],[1790,6,1847,8],[1791,6,1848,8],[1791,10,1848,12],[1791,11,1848,13,"current"],[1791,18,1848,20],[1791,19,1848,21,"previous"],[1791,27,1848,29],[1791,29,1848,31],[1792,8,1849,12],[1792,12,1849,16],[1792,13,1849,17,"head"],[1792,17,1849,21],[1792,20,1849,24,"current"],[1792,27,1849,31],[1792,28,1849,32,"next"],[1792,32,1849,36],[1793,8,1850,12],[1793,12,1850,16],[1793,16,1850,20],[1793,17,1850,21,"head"],[1793,21,1850,25],[1793,23,1850,27],[1794,10,1851,16],[1794,14,1851,20],[1794,15,1851,21,"head"],[1794,19,1851,25],[1794,20,1851,26,"previous"],[1794,28,1851,34],[1794,31,1851,37],[1794,35,1851,41],[1795,8,1852,12],[1795,9,1852,13],[1795,15,1853,17],[1796,10,1854,16],[1796,14,1854,20],[1796,15,1854,21,"tail"],[1796,19,1854,25],[1796,22,1854,28],[1796,26,1854,32],[1797,8,1855,12],[1798,6,1856,8],[1798,7,1856,9],[1798,13,1857,13],[1799,8,1858,12,"current"],[1799,15,1858,19],[1799,16,1858,20,"previous"],[1799,24,1858,28],[1799,25,1858,29,"next"],[1799,29,1858,33],[1799,32,1858,36,"current"],[1799,39,1858,43],[1799,40,1858,44,"next"],[1799,44,1858,48],[1800,8,1859,12],[1800,12,1859,16,"current"],[1800,19,1859,23],[1800,20,1859,24,"next"],[1800,24,1859,28],[1800,26,1859,30],[1801,10,1860,16,"current"],[1801,17,1860,23],[1801,18,1860,24,"next"],[1801,22,1860,28],[1801,23,1860,29,"previous"],[1801,31,1860,37],[1801,34,1860,40,"current"],[1801,41,1860,47],[1801,42,1860,48,"previous"],[1801,50,1860,56],[1802,8,1861,12],[1802,9,1861,13],[1802,15,1862,17],[1803,10,1863,16],[1803,14,1863,20],[1803,15,1863,21,"tail"],[1803,19,1863,25],[1803,22,1863,28,"current"],[1803,29,1863,35],[1803,30,1863,36,"previous"],[1803,38,1863,44],[1804,8,1864,12],[1805,6,1865,8],[1806,6,1866,8],[1806,10,1866,12,"n"],[1806,11,1866,13],[1806,12,1866,14,"__ln"],[1806,16,1866,18],[1806,18,1866,20],[1807,8,1867,12],[1807,15,1867,19,"n"],[1807,16,1867,20],[1807,17,1867,21,"__ln"],[1807,21,1867,25],[1808,6,1868,8],[1809,6,1869,8],[1809,10,1869,12],[1809,11,1869,13,"length"],[1809,17,1869,19],[1809,19,1869,21],[1810,4,1870,4],[1811,2,1871,0],[1812,2,1872,0],[1812,8,1872,6,"moveKey"],[1812,15,1872,13],[1812,18,1872,16,"moveKey"],[1812,19,1872,17,"id"],[1812,21,1872,19],[1812,23,1872,21,"parentId"],[1812,31,1872,29],[1812,36,1872,34],[1812,39,1872,37,"id"],[1812,41,1872,39],[1812,45,1872,43,"parentId"],[1812,53,1872,51],[1812,55,1872,53],[1813,2,1873,0],[1813,8,1873,6,"MutationBuffer"],[1813,22,1873,20],[1813,23,1873,21],[1814,4,1874,4,"constructor"],[1814,15,1874,15,"constructor"],[1814,16,1874,15],[1814,18,1874,18],[1815,6,1875,8],[1815,10,1875,12],[1815,11,1875,13,"frozen"],[1815,17,1875,19],[1815,20,1875,22],[1815,25,1875,27],[1816,6,1876,8],[1816,10,1876,12],[1816,11,1876,13,"locked"],[1816,17,1876,19],[1816,20,1876,22],[1816,25,1876,27],[1817,6,1877,8],[1817,10,1877,12],[1817,11,1877,13,"texts"],[1817,16,1877,18],[1817,19,1877,21],[1817,21,1877,23],[1818,6,1878,8],[1818,10,1878,12],[1818,11,1878,13,"attributes"],[1818,21,1878,23],[1818,24,1878,26],[1818,26,1878,28],[1819,6,1879,8],[1819,10,1879,12],[1819,11,1879,13,"attributeMap"],[1819,23,1879,25],[1819,26,1879,28],[1819,30,1879,32,"WeakMap"],[1819,37,1879,39],[1819,38,1879,40],[1819,39,1879,41],[1820,6,1880,8],[1820,10,1880,12],[1820,11,1880,13,"removes"],[1820,18,1880,20],[1820,21,1880,23],[1820,23,1880,25],[1821,6,1881,8],[1821,10,1881,12],[1821,11,1881,13,"mapRemoves"],[1821,21,1881,23],[1821,24,1881,26],[1821,26,1881,28],[1822,6,1882,8],[1822,10,1882,12],[1822,11,1882,13,"movedMap"],[1822,19,1882,21],[1822,22,1882,24],[1822,23,1882,25],[1822,24,1882,26],[1823,6,1883,8],[1823,10,1883,12],[1823,11,1883,13,"addedSet"],[1823,19,1883,21],[1823,22,1883,24],[1823,26,1883,28,"Set"],[1823,29,1883,31],[1823,30,1883,32],[1823,31,1883,33],[1824,6,1884,8],[1824,10,1884,12],[1824,11,1884,13,"movedSet"],[1824,19,1884,21],[1824,22,1884,24],[1824,26,1884,28,"Set"],[1824,29,1884,31],[1824,30,1884,32],[1824,31,1884,33],[1825,6,1885,8],[1825,10,1885,12],[1825,11,1885,13,"droppedSet"],[1825,21,1885,23],[1825,24,1885,26],[1825,28,1885,30,"Set"],[1825,31,1885,33],[1825,32,1885,34],[1825,33,1885,35],[1826,6,1886,8],[1826,10,1886,12],[1826,11,1886,13,"processMutations"],[1826,27,1886,29],[1826,30,1886,33,"mutations"],[1826,39,1886,42],[1826,43,1886,47],[1827,8,1887,12,"mutations"],[1827,17,1887,21],[1827,18,1887,22,"forEach"],[1827,25,1887,29],[1827,26,1887,30],[1827,30,1887,34],[1827,31,1887,35,"processMutation"],[1827,46,1887,50],[1827,47,1887,51],[1828,8,1888,12],[1828,12,1888,16],[1828,13,1888,17,"emit"],[1828,17,1888,21],[1828,18,1888,22],[1828,19,1888,23],[1829,6,1889,8],[1829,7,1889,9],[1830,6,1890,8],[1830,10,1890,12],[1830,11,1890,13,"emit"],[1830,15,1890,17],[1830,18,1890,20],[1830,24,1890,26],[1831,8,1891,12],[1831,12,1891,16],[1831,16,1891,20],[1831,17,1891,21,"frozen"],[1831,23,1891,27],[1831,27,1891,31],[1831,31,1891,35],[1831,32,1891,36,"locked"],[1831,38,1891,42],[1831,40,1891,44],[1832,10,1892,16],[1833,8,1893,12],[1834,8,1894,12],[1834,14,1894,18,"adds"],[1834,18,1894,22],[1834,21,1894,25],[1834,23,1894,27],[1835,8,1895,12],[1835,14,1895,18,"addedIds"],[1835,22,1895,26],[1835,25,1895,29],[1835,29,1895,33,"Set"],[1835,32,1895,36],[1835,33,1895,37],[1835,34,1895,38],[1836,8,1896,12],[1836,14,1896,18,"addList"],[1836,21,1896,25],[1836,24,1896,28],[1836,28,1896,32,"DoubleLinkedList"],[1836,44,1896,48],[1836,45,1896,49],[1836,46,1896,50],[1837,8,1897,12],[1837,14,1897,18,"getNextId"],[1837,23,1897,27],[1837,26,1897,31,"n"],[1837,27,1897,32],[1837,31,1897,37],[1838,10,1898,16],[1838,14,1898,20,"ns"],[1838,16,1898,22],[1838,19,1898,25,"n"],[1838,20,1898,26],[1839,10,1899,16],[1839,14,1899,20,"nextId"],[1839,20,1899,26],[1839,23,1899,29,"IGNORED_NODE"],[1839,35,1899,41],[1840,10,1900,16],[1840,17,1900,23,"nextId"],[1840,23,1900,29],[1840,28,1900,34,"IGNORED_NODE"],[1840,40,1900,46],[1840,42,1900,48],[1841,12,1901,20,"ns"],[1841,14,1901,22],[1841,17,1901,25,"ns"],[1841,19,1901,27],[1841,23,1901,31,"ns"],[1841,25,1901,33],[1841,26,1901,34,"nextSibling"],[1841,37,1901,45],[1842,12,1902,20,"nextId"],[1842,18,1902,26],[1842,21,1902,29,"ns"],[1842,23,1902,31],[1842,27,1902,35],[1842,31,1902,39],[1842,32,1902,40,"mirror"],[1842,38,1902,46],[1842,39,1902,47,"getId"],[1842,44,1902,52],[1842,45,1902,53,"ns"],[1842,47,1902,55],[1842,48,1902,56],[1843,10,1903,16],[1844,10,1904,16],[1844,17,1904,23,"nextId"],[1844,23,1904,29],[1845,8,1905,12],[1845,9,1905,13],[1846,8,1906,12],[1846,14,1906,18,"pushAdd"],[1846,21,1906,25],[1846,24,1906,29,"n"],[1846,25,1906,30],[1846,29,1906,35],[1847,10,1907,16],[1847,14,1907,20],[1847,15,1907,21,"n"],[1847,16,1907,22],[1847,17,1907,23,"parentNode"],[1847,27,1907,33],[1847,31,1907,37],[1847,32,1907,38,"inDom"],[1847,37,1907,43],[1847,38,1907,44,"n"],[1847,39,1907,45],[1847,40,1907,46],[1847,42,1907,48],[1848,12,1908,20],[1849,10,1909,16],[1850,10,1910,16],[1850,16,1910,22,"parentId"],[1850,24,1910,30],[1850,27,1910,33,"isShadowRoot"],[1850,39,1910,45],[1850,40,1910,46,"n"],[1850,41,1910,47],[1850,42,1910,48,"parentNode"],[1850,52,1910,58],[1850,53,1910,59],[1850,56,1911,22],[1850,60,1911,26],[1850,61,1911,27,"mirror"],[1850,67,1911,33],[1850,68,1911,34,"getId"],[1850,73,1911,39],[1850,74,1911,40,"getShadowHost"],[1850,87,1911,53],[1850,88,1911,54,"n"],[1850,89,1911,55],[1850,90,1911,56],[1850,91,1911,57],[1850,94,1912,22],[1850,98,1912,26],[1850,99,1912,27,"mirror"],[1850,105,1912,33],[1850,106,1912,34,"getId"],[1850,111,1912,39],[1850,112,1912,40,"n"],[1850,113,1912,41],[1850,114,1912,42,"parentNode"],[1850,124,1912,52],[1850,125,1912,53],[1851,10,1913,16],[1851,16,1913,22,"nextId"],[1851,22,1913,28],[1851,25,1913,31,"getNextId"],[1851,34,1913,40],[1851,35,1913,41,"n"],[1851,36,1913,42],[1851,37,1913,43],[1852,10,1914,16],[1852,14,1914,20,"parentId"],[1852,22,1914,28],[1852,27,1914,33],[1852,28,1914,34],[1852,29,1914,35],[1852,33,1914,39,"nextId"],[1852,39,1914,45],[1852,44,1914,50],[1852,45,1914,51],[1852,46,1914,52],[1852,48,1914,54],[1853,12,1915,20],[1853,19,1915,27,"addList"],[1853,26,1915,34],[1853,27,1915,35,"addNode"],[1853,34,1915,42],[1853,35,1915,43,"n"],[1853,36,1915,44],[1853,37,1915,45],[1854,10,1916,16],[1855,10,1917,16],[1855,16,1917,22,"sn"],[1855,18,1917,24],[1855,21,1917,27,"serializeNodeWithId"],[1855,40,1917,46],[1855,41,1917,47,"n"],[1855,42,1917,48],[1855,44,1917,50],[1856,12,1918,20,"doc"],[1856,15,1918,23],[1856,17,1918,25],[1856,21,1918,29],[1856,22,1918,30,"doc"],[1856,25,1918,33],[1857,12,1919,20,"mirror"],[1857,18,1919,26],[1857,20,1919,28],[1857,24,1919,32],[1857,25,1919,33,"mirror"],[1857,31,1919,39],[1858,12,1920,20,"blockClass"],[1858,22,1920,30],[1858,24,1920,32],[1858,28,1920,36],[1858,29,1920,37,"blockClass"],[1858,39,1920,47],[1859,12,1921,20,"blockSelector"],[1859,25,1921,33],[1859,27,1921,35],[1859,31,1921,39],[1859,32,1921,40,"blockSelector"],[1859,45,1921,53],[1860,12,1922,20,"maskAllText"],[1860,23,1922,31],[1860,25,1922,33],[1860,29,1922,37],[1860,30,1922,38,"maskAllText"],[1860,41,1922,49],[1861,12,1923,20,"unblockSelector"],[1861,27,1923,35],[1861,29,1923,37],[1861,33,1923,41],[1861,34,1923,42,"unblockSelector"],[1861,49,1923,57],[1862,12,1924,20,"maskTextClass"],[1862,25,1924,33],[1862,27,1924,35],[1862,31,1924,39],[1862,32,1924,40,"maskTextClass"],[1862,45,1924,53],[1863,12,1925,20,"unmaskTextClass"],[1863,27,1925,35],[1863,29,1925,37],[1863,33,1925,41],[1863,34,1925,42,"unmaskTextClass"],[1863,49,1925,57],[1864,12,1926,20,"maskTextSelector"],[1864,28,1926,36],[1864,30,1926,38],[1864,34,1926,42],[1864,35,1926,43,"maskTextSelector"],[1864,51,1926,59],[1865,12,1927,20,"unmaskTextSelector"],[1865,30,1927,38],[1865,32,1927,40],[1865,36,1927,44],[1865,37,1927,45,"unmaskTextSelector"],[1865,55,1927,63],[1866,12,1928,20,"skipChild"],[1866,21,1928,29],[1866,23,1928,31],[1866,27,1928,35],[1867,12,1929,20,"newlyAddedElement"],[1867,29,1929,37],[1867,31,1929,39],[1867,35,1929,43],[1868,12,1930,20,"inlineStylesheet"],[1868,28,1930,36],[1868,30,1930,38],[1868,34,1930,42],[1868,35,1930,43,"inlineStylesheet"],[1868,51,1930,59],[1869,12,1931,20,"maskInputOptions"],[1869,28,1931,36],[1869,30,1931,38],[1869,34,1931,42],[1869,35,1931,43,"maskInputOptions"],[1869,51,1931,59],[1870,12,1932,20,"maskAttributeFn"],[1870,27,1932,35],[1870,29,1932,37],[1870,33,1932,41],[1870,34,1932,42,"maskAttributeFn"],[1870,49,1932,57],[1871,12,1933,20,"maskTextFn"],[1871,22,1933,30],[1871,24,1933,32],[1871,28,1933,36],[1871,29,1933,37,"maskTextFn"],[1871,39,1933,47],[1872,12,1934,20,"maskInputFn"],[1872,23,1934,31],[1872,25,1934,33],[1872,29,1934,37],[1872,30,1934,38,"maskInputFn"],[1872,41,1934,49],[1873,12,1935,20,"slimDOMOptions"],[1873,26,1935,34],[1873,28,1935,36],[1873,32,1935,40],[1873,33,1935,41,"slimDOMOptions"],[1873,47,1935,55],[1874,12,1936,20,"dataURLOptions"],[1874,26,1936,34],[1874,28,1936,36],[1874,32,1936,40],[1874,33,1936,41,"dataURLOptions"],[1874,47,1936,55],[1875,12,1937,20,"recordCanvas"],[1875,24,1937,32],[1875,26,1937,34],[1875,30,1937,38],[1875,31,1937,39,"recordCanvas"],[1875,43,1937,51],[1876,12,1938,20,"inlineImages"],[1876,24,1938,32],[1876,26,1938,34],[1876,30,1938,38],[1876,31,1938,39,"inlineImages"],[1876,43,1938,51],[1877,12,1939,20,"onSerialize"],[1877,23,1939,31],[1877,25,1939,34,"currentN"],[1877,33,1939,42],[1877,37,1939,47],[1878,14,1940,24],[1878,18,1940,28,"isSerializedIframe"],[1878,36,1940,46],[1878,37,1940,47,"currentN"],[1878,45,1940,55],[1878,47,1940,57],[1878,51,1940,61],[1878,52,1940,62,"mirror"],[1878,58,1940,68],[1878,59,1940,69],[1878,63,1941,28],[1878,64,1941,29,"isBlocked"],[1878,73,1941,38],[1878,74,1941,39,"currentN"],[1878,82,1941,47],[1878,84,1941,49],[1878,88,1941,53],[1878,89,1941,54,"blockClass"],[1878,99,1941,64],[1878,101,1941,66],[1878,105,1941,70],[1878,106,1941,71,"blockSelector"],[1878,119,1941,84],[1878,121,1941,86],[1878,125,1941,90],[1878,126,1941,91,"unblockSelector"],[1878,141,1941,106],[1878,143,1941,108],[1878,148,1941,113],[1878,149,1941,114],[1878,151,1941,116],[1879,16,1942,28],[1879,20,1942,32],[1879,21,1942,33,"iframeManager"],[1879,34,1942,46],[1879,35,1942,47,"addIframe"],[1879,44,1942,56],[1879,45,1942,57,"currentN"],[1879,53,1942,65],[1879,54,1942,66],[1880,14,1943,24],[1881,14,1944,24],[1881,18,1944,28,"isSerializedStylesheet"],[1881,40,1944,50],[1881,41,1944,51,"currentN"],[1881,49,1944,59],[1881,51,1944,61],[1881,55,1944,65],[1881,56,1944,66,"mirror"],[1881,62,1944,72],[1881,63,1944,73],[1881,65,1944,75],[1882,16,1945,28],[1882,20,1945,32],[1882,21,1945,33,"stylesheetManager"],[1882,38,1945,50],[1882,39,1945,51,"trackLinkElement"],[1882,55,1945,67],[1882,56,1945,68,"currentN"],[1882,64,1945,76],[1882,65,1945,77],[1883,14,1946,24],[1884,14,1947,24],[1884,18,1947,28,"hasShadowRoot"],[1884,31,1947,41],[1884,32,1947,42,"n"],[1884,33,1947,43],[1884,34,1947,44],[1884,36,1947,46],[1885,16,1948,28],[1885,20,1948,32],[1885,21,1948,33,"shadowDomManager"],[1885,37,1948,49],[1885,38,1948,50,"addShadowRoot"],[1885,51,1948,63],[1885,52,1948,64,"n"],[1885,53,1948,65],[1885,54,1948,66,"shadowRoot"],[1885,64,1948,76],[1885,66,1948,78],[1885,70,1948,82],[1885,71,1948,83,"doc"],[1885,74,1948,86],[1885,75,1948,87],[1886,14,1949,24],[1887,12,1950,20],[1887,13,1950,21],[1888,12,1951,20,"onIframeLoad"],[1888,24,1951,32],[1888,26,1951,34,"onIframeLoad"],[1888,27,1951,35,"iframe"],[1888,33,1951,41],[1888,35,1951,43,"childSn"],[1888,42,1951,50],[1888,47,1951,55],[1889,14,1952,24],[1889,18,1952,28,"isBlocked"],[1889,27,1952,37],[1889,28,1952,38,"iframe"],[1889,34,1952,44],[1889,36,1952,46],[1889,40,1952,50],[1889,41,1952,51,"blockClass"],[1889,51,1952,61],[1889,53,1952,63],[1889,57,1952,67],[1889,58,1952,68,"blockSelector"],[1889,71,1952,81],[1889,73,1952,83],[1889,77,1952,87],[1889,78,1952,88,"unblockSelector"],[1889,93,1952,103],[1889,95,1952,105],[1889,100,1952,110],[1889,101,1952,111],[1889,103,1952,113],[1890,16,1953,28],[1891,14,1954,24],[1892,14,1955,24],[1892,18,1955,28],[1892,19,1955,29,"iframeManager"],[1892,32,1955,42],[1892,33,1955,43,"attachIframe"],[1892,45,1955,55],[1892,46,1955,56,"iframe"],[1892,52,1955,62],[1892,54,1955,64,"childSn"],[1892,61,1955,71],[1892,62,1955,72],[1893,14,1956,24],[1893,18,1956,28,"iframe"],[1893,24,1956,34],[1893,25,1956,35,"contentWindow"],[1893,38,1956,48],[1893,40,1956,50],[1894,16,1957,28],[1894,20,1957,32],[1894,21,1957,33,"canvasManager"],[1894,34,1957,46],[1894,35,1957,47,"addWindow"],[1894,44,1957,56],[1894,45,1957,57,"iframe"],[1894,51,1957,63],[1894,52,1957,64,"contentWindow"],[1894,65,1957,77],[1894,66,1957,78],[1895,14,1958,24],[1896,14,1959,24],[1896,18,1959,28],[1896,19,1959,29,"shadowDomManager"],[1896,35,1959,45],[1896,36,1959,46,"observeAttachShadow"],[1896,55,1959,65],[1896,56,1959,66,"iframe"],[1896,62,1959,72],[1896,63,1959,73],[1897,12,1960,20],[1897,13,1960,21],[1898,12,1961,20,"onStylesheetLoad"],[1898,28,1961,36],[1898,30,1961,38,"onStylesheetLoad"],[1898,31,1961,39,"link"],[1898,35,1961,43],[1898,37,1961,45,"childSn"],[1898,44,1961,52],[1898,49,1961,57],[1899,14,1962,24],[1899,18,1962,28],[1899,19,1962,29,"stylesheetManager"],[1899,36,1962,46],[1899,37,1962,47,"attachLinkElement"],[1899,54,1962,64],[1899,55,1962,65,"link"],[1899,59,1962,69],[1899,61,1962,71,"childSn"],[1899,68,1962,78],[1899,69,1962,79],[1900,12,1963,20],[1901,10,1964,16],[1901,11,1964,17],[1901,12,1964,18],[1902,10,1965,16],[1902,14,1965,20,"sn"],[1902,16,1965,22],[1902,18,1965,24],[1903,12,1966,20,"adds"],[1903,16,1966,24],[1903,17,1966,25,"push"],[1903,21,1966,29],[1903,22,1966,30],[1904,14,1967,24,"parentId"],[1904,22,1967,32],[1905,14,1968,24,"nextId"],[1905,20,1968,30],[1906,14,1969,24,"node"],[1906,18,1969,28],[1906,20,1969,30,"sn"],[1907,12,1970,20],[1907,13,1970,21],[1907,14,1970,22],[1908,12,1971,20,"addedIds"],[1908,20,1971,28],[1908,21,1971,29,"add"],[1908,24,1971,32],[1908,25,1971,33,"sn"],[1908,27,1971,35],[1908,28,1971,36,"id"],[1908,30,1971,38],[1908,31,1971,39],[1909,10,1972,16],[1910,8,1973,12],[1910,9,1973,13],[1911,8,1974,12],[1911,15,1974,19],[1911,19,1974,23],[1911,20,1974,24,"mapRemoves"],[1911,30,1974,34],[1911,31,1974,35,"length"],[1911,37,1974,41],[1911,39,1974,43],[1912,10,1975,16],[1912,14,1975,20],[1912,15,1975,21,"mirror"],[1912,21,1975,27],[1912,22,1975,28,"removeNodeFromMap"],[1912,39,1975,45],[1912,40,1975,46],[1912,44,1975,50],[1912,45,1975,51,"mapRemoves"],[1912,55,1975,61],[1912,56,1975,62,"shift"],[1912,61,1975,67],[1912,62,1975,68],[1912,63,1975,69],[1912,64,1975,70],[1913,8,1976,12],[1914,8,1977,12],[1914,13,1977,17],[1914,19,1977,23,"n"],[1914,20,1977,24],[1914,24,1977,28],[1914,28,1977,32],[1914,29,1977,33,"movedSet"],[1914,37,1977,41],[1914,39,1977,43],[1915,10,1978,16],[1915,14,1978,20,"isParentRemoved"],[1915,29,1978,35],[1915,30,1978,36],[1915,34,1978,40],[1915,35,1978,41,"removes"],[1915,42,1978,48],[1915,44,1978,50,"n"],[1915,45,1978,51],[1915,47,1978,53],[1915,51,1978,57],[1915,52,1978,58,"mirror"],[1915,58,1978,64],[1915,59,1978,65],[1915,63,1979,20],[1915,64,1979,21],[1915,68,1979,25],[1915,69,1979,26,"movedSet"],[1915,77,1979,34],[1915,78,1979,35,"has"],[1915,81,1979,38],[1915,82,1979,39,"n"],[1915,83,1979,40],[1915,84,1979,41,"parentNode"],[1915,94,1979,51],[1915,95,1979,52],[1915,97,1979,54],[1916,12,1980,20],[1917,10,1981,16],[1918,10,1982,16,"pushAdd"],[1918,17,1982,23],[1918,18,1982,24,"n"],[1918,19,1982,25],[1918,20,1982,26],[1919,8,1983,12],[1920,8,1984,12],[1920,13,1984,17],[1920,19,1984,23,"n"],[1920,20,1984,24],[1920,24,1984,28],[1920,28,1984,32],[1920,29,1984,33,"addedSet"],[1920,37,1984,41],[1920,39,1984,43],[1921,10,1985,16],[1921,14,1985,20],[1921,15,1985,21,"isAncestorInSet"],[1921,30,1985,36],[1921,31,1985,37],[1921,35,1985,41],[1921,36,1985,42,"droppedSet"],[1921,46,1985,52],[1921,48,1985,54,"n"],[1921,49,1985,55],[1921,50,1985,56],[1921,54,1986,20],[1921,55,1986,21,"isParentRemoved"],[1921,70,1986,36],[1921,71,1986,37],[1921,75,1986,41],[1921,76,1986,42,"removes"],[1921,83,1986,49],[1921,85,1986,51,"n"],[1921,86,1986,52],[1921,88,1986,54],[1921,92,1986,58],[1921,93,1986,59,"mirror"],[1921,99,1986,65],[1921,100,1986,66],[1921,102,1986,68],[1922,12,1987,20,"pushAdd"],[1922,19,1987,27],[1922,20,1987,28,"n"],[1922,21,1987,29],[1922,22,1987,30],[1923,10,1988,16],[1923,11,1988,17],[1923,17,1989,21],[1923,21,1989,25,"isAncestorInSet"],[1923,36,1989,40],[1923,37,1989,41],[1923,41,1989,45],[1923,42,1989,46,"movedSet"],[1923,50,1989,54],[1923,52,1989,56,"n"],[1923,53,1989,57],[1923,54,1989,58],[1923,56,1989,60],[1924,12,1990,20,"pushAdd"],[1924,19,1990,27],[1924,20,1990,28,"n"],[1924,21,1990,29],[1924,22,1990,30],[1925,10,1991,16],[1925,11,1991,17],[1925,17,1992,21],[1926,12,1993,20],[1926,16,1993,24],[1926,17,1993,25,"droppedSet"],[1926,27,1993,35],[1926,28,1993,36,"add"],[1926,31,1993,39],[1926,32,1993,40,"n"],[1926,33,1993,41],[1926,34,1993,42],[1927,10,1994,16],[1928,8,1995,12],[1929,8,1996,12],[1929,12,1996,16,"candidate"],[1929,21,1996,25],[1929,24,1996,28],[1929,28,1996,32],[1930,8,1997,12],[1930,15,1997,19,"addList"],[1930,22,1997,26],[1930,23,1997,27,"length"],[1930,29,1997,33],[1930,31,1997,35],[1931,10,1998,16],[1931,14,1998,20,"node"],[1931,18,1998,24],[1931,21,1998,27],[1931,25,1998,31],[1932,10,1999,16],[1932,14,1999,20,"candidate"],[1932,23,1999,29],[1932,25,1999,31],[1933,12,2000,20],[1933,18,2000,26,"parentId"],[1933,26,2000,34],[1933,29,2000,37],[1933,33,2000,41],[1933,34,2000,42,"mirror"],[1933,40,2000,48],[1933,41,2000,49,"getId"],[1933,46,2000,54],[1933,47,2000,55,"candidate"],[1933,56,2000,64],[1933,57,2000,65,"value"],[1933,62,2000,70],[1933,63,2000,71,"parentNode"],[1933,73,2000,81],[1933,74,2000,82],[1934,12,2001,20],[1934,18,2001,26,"nextId"],[1934,24,2001,32],[1934,27,2001,35,"getNextId"],[1934,36,2001,44],[1934,37,2001,45,"candidate"],[1934,46,2001,54],[1934,47,2001,55,"value"],[1934,52,2001,60],[1934,53,2001,61],[1935,12,2002,20],[1935,16,2002,24,"parentId"],[1935,24,2002,32],[1935,29,2002,37],[1935,30,2002,38],[1935,31,2002,39],[1935,35,2002,43,"nextId"],[1935,41,2002,49],[1935,46,2002,54],[1935,47,2002,55],[1935,48,2002,56],[1935,50,2002,58],[1936,14,2003,24,"node"],[1936,18,2003,28],[1936,21,2003,31,"candidate"],[1936,30,2003,40],[1937,12,2004,20],[1938,10,2005,16],[1939,10,2006,16],[1939,14,2006,20],[1939,15,2006,21,"node"],[1939,19,2006,25],[1939,21,2006,27],[1940,12,2007,20],[1940,16,2007,24,"tailNode"],[1940,24,2007,32],[1940,27,2007,35,"addList"],[1940,34,2007,42],[1940,35,2007,43,"tail"],[1940,39,2007,47],[1941,12,2008,20],[1941,19,2008,27,"tailNode"],[1941,27,2008,35],[1941,29,2008,37],[1942,14,2009,24],[1942,20,2009,30,"_node"],[1942,25,2009,35],[1942,28,2009,38,"tailNode"],[1942,36,2009,46],[1943,14,2010,24,"tailNode"],[1943,22,2010,32],[1943,25,2010,35,"tailNode"],[1943,33,2010,43],[1943,34,2010,44,"previous"],[1943,42,2010,52],[1944,14,2011,24],[1944,18,2011,28,"_node"],[1944,23,2011,33],[1944,25,2011,35],[1945,16,2012,28],[1945,22,2012,34,"parentId"],[1945,30,2012,42],[1945,33,2012,45],[1945,37,2012,49],[1945,38,2012,50,"mirror"],[1945,44,2012,56],[1945,45,2012,57,"getId"],[1945,50,2012,62],[1945,51,2012,63,"_node"],[1945,56,2012,68],[1945,57,2012,69,"value"],[1945,62,2012,74],[1945,63,2012,75,"parentNode"],[1945,73,2012,85],[1945,74,2012,86],[1946,16,2013,28],[1946,22,2013,34,"nextId"],[1946,28,2013,40],[1946,31,2013,43,"getNextId"],[1946,40,2013,52],[1946,41,2013,53,"_node"],[1946,46,2013,58],[1946,47,2013,59,"value"],[1946,52,2013,64],[1946,53,2013,65],[1947,16,2014,28],[1947,20,2014,32,"nextId"],[1947,26,2014,38],[1947,31,2014,43],[1947,32,2014,44],[1947,33,2014,45],[1947,35,2015,32],[1947,44,2015,41],[1947,49,2016,33],[1947,53,2016,37,"parentId"],[1947,61,2016,45],[1947,66,2016,50],[1947,67,2016,51],[1947,68,2016,52],[1947,70,2016,54],[1948,18,2017,32,"node"],[1948,22,2017,36],[1948,25,2017,39,"_node"],[1948,30,2017,44],[1949,18,2018,32],[1950,16,2019,28],[1950,17,2019,29],[1950,23,2020,33],[1951,18,2021,32],[1951,24,2021,38,"unhandledNode"],[1951,37,2021,51],[1951,40,2021,54,"_node"],[1951,45,2021,59],[1951,46,2021,60,"value"],[1951,51,2021,65],[1952,18,2022,32],[1952,22,2022,36,"unhandledNode"],[1952,35,2022,49],[1952,36,2022,50,"parentNode"],[1952,46,2022,60],[1952,50,2023,36,"unhandledNode"],[1952,63,2023,49],[1952,64,2023,50,"parentNode"],[1952,74,2023,60],[1952,75,2023,61,"nodeType"],[1952,83,2023,69],[1952,88,2024,40,"Node"],[1952,92,2024,44],[1952,93,2024,45,"DOCUMENT_FRAGMENT_NODE"],[1952,115,2024,67],[1952,117,2024,69],[1953,20,2025,36],[1953,26,2025,42,"shadowHost"],[1953,36,2025,52],[1953,39,2025,55,"unhandledNode"],[1953,52,2025,68],[1953,53,2025,69,"parentNode"],[1953,63,2025,79],[1953,64,2026,41,"host"],[1953,68,2026,45],[1954,20,2027,36],[1954,26,2027,42,"parentId"],[1954,34,2027,50],[1954,37,2027,53],[1954,41,2027,57],[1954,42,2027,58,"mirror"],[1954,48,2027,64],[1954,49,2027,65,"getId"],[1954,54,2027,70],[1954,55,2027,71,"shadowHost"],[1954,65,2027,81],[1954,66,2027,82],[1955,20,2028,36],[1955,24,2028,40,"parentId"],[1955,32,2028,48],[1955,37,2028,53],[1955,38,2028,54],[1955,39,2028,55],[1955,41,2028,57],[1956,22,2029,40,"node"],[1956,26,2029,44],[1956,29,2029,47,"_node"],[1956,34,2029,52],[1957,22,2030,40],[1958,20,2031,36],[1959,18,2032,32],[1960,16,2033,28],[1961,14,2034,24],[1962,12,2035,20],[1963,10,2036,16],[1964,10,2037,16],[1964,14,2037,20],[1964,15,2037,21,"node"],[1964,19,2037,25],[1964,21,2037,27],[1965,12,2038,20],[1965,19,2038,27,"addList"],[1965,26,2038,34],[1965,27,2038,35,"head"],[1965,31,2038,39],[1965,33,2038,41],[1966,14,2039,24,"addList"],[1966,21,2039,31],[1966,22,2039,32,"removeNode"],[1966,32,2039,42],[1966,33,2039,43,"addList"],[1966,40,2039,50],[1966,41,2039,51,"head"],[1966,45,2039,55],[1966,46,2039,56,"value"],[1966,51,2039,61],[1966,52,2039,62],[1967,12,2040,20],[1968,12,2041,20],[1969,10,2042,16],[1970,10,2043,16,"candidate"],[1970,19,2043,25],[1970,22,2043,28,"node"],[1970,26,2043,32],[1970,27,2043,33,"previous"],[1970,35,2043,41],[1971,10,2044,16,"addList"],[1971,17,2044,23],[1971,18,2044,24,"removeNode"],[1971,28,2044,34],[1971,29,2044,35,"node"],[1971,33,2044,39],[1971,34,2044,40,"value"],[1971,39,2044,45],[1971,40,2044,46],[1972,10,2045,16,"pushAdd"],[1972,17,2045,23],[1972,18,2045,24,"node"],[1972,22,2045,28],[1972,23,2045,29,"value"],[1972,28,2045,34],[1972,29,2045,35],[1973,8,2046,12],[1974,8,2047,12],[1974,14,2047,18,"payload"],[1974,21,2047,25],[1974,24,2047,28],[1975,10,2048,16,"texts"],[1975,15,2048,21],[1975,17,2048,23],[1975,21,2048,27],[1975,22,2048,28,"texts"],[1975,27,2048,33],[1975,28,2049,21,"map"],[1975,31,2049,24],[1975,32,2049,26,"text"],[1975,36,2049,30],[1975,41,2049,36],[1976,12,2050,20,"id"],[1976,14,2050,22],[1976,16,2050,24],[1976,20,2050,28],[1976,21,2050,29,"mirror"],[1976,27,2050,35],[1976,28,2050,36,"getId"],[1976,33,2050,41],[1976,34,2050,42,"text"],[1976,38,2050,46],[1976,39,2050,47,"node"],[1976,43,2050,51],[1976,44,2050,52],[1977,12,2051,20,"value"],[1977,17,2051,25],[1977,19,2051,27,"text"],[1977,23,2051,31],[1977,24,2051,32,"value"],[1978,10,2052,16],[1978,11,2052,17],[1978,12,2052,18],[1978,13,2052,19],[1978,14,2053,21,"filter"],[1978,20,2053,27],[1978,21,2053,29,"text"],[1978,25,2053,33],[1978,29,2053,38],[1978,30,2053,39,"addedIds"],[1978,38,2053,47],[1978,39,2053,48,"has"],[1978,42,2053,51],[1978,43,2053,52,"text"],[1978,47,2053,56],[1978,48,2053,57,"id"],[1978,50,2053,59],[1978,51,2053,60],[1978,52,2053,61],[1978,53,2054,21,"filter"],[1978,59,2054,27],[1978,60,2054,29,"text"],[1978,64,2054,33],[1978,68,2054,38],[1978,72,2054,42],[1978,73,2054,43,"mirror"],[1978,79,2054,49],[1978,80,2054,50,"has"],[1978,83,2054,53],[1978,84,2054,54,"text"],[1978,88,2054,58],[1978,89,2054,59,"id"],[1978,91,2054,61],[1978,92,2054,62],[1978,93,2054,63],[1979,10,2055,16,"attributes"],[1979,20,2055,26],[1979,22,2055,28],[1979,26,2055,32],[1979,27,2055,33,"attributes"],[1979,37,2055,43],[1979,38,2056,21,"map"],[1979,41,2056,24],[1979,42,2056,26,"attribute"],[1979,51,2056,35],[1979,55,2056,40],[1980,12,2057,20],[1980,18,2057,26],[1981,14,2057,28,"attributes"],[1982,12,2057,39],[1982,13,2057,40],[1982,16,2057,43,"attribute"],[1982,25,2057,52],[1983,12,2058,20],[1983,16,2058,24],[1983,23,2058,31,"attributes"],[1983,33,2058,41],[1983,34,2058,42,"style"],[1983,39,2058,47],[1983,44,2058,52],[1983,52,2058,60],[1983,54,2058,62],[1984,14,2059,24],[1984,20,2059,30,"diffAsStr"],[1984,29,2059,39],[1984,32,2059,42,"JSON"],[1984,36,2059,46],[1984,37,2059,47,"stringify"],[1984,46,2059,56],[1984,47,2059,57,"attribute"],[1984,56,2059,66],[1984,57,2059,67,"styleDiff"],[1984,66,2059,76],[1984,67,2059,77],[1985,14,2060,24],[1985,20,2060,30,"unchangedAsStr"],[1985,34,2060,44],[1985,37,2060,47,"JSON"],[1985,41,2060,51],[1985,42,2060,52,"stringify"],[1985,51,2060,61],[1985,52,2060,62,"attribute"],[1985,61,2060,71],[1985,62,2060,72,"_unchangedStyles"],[1985,78,2060,88],[1985,79,2060,89],[1986,14,2061,24],[1986,18,2061,28,"diffAsStr"],[1986,27,2061,37],[1986,28,2061,38,"length"],[1986,34,2061,44],[1986,37,2061,47,"attributes"],[1986,47,2061,57],[1986,48,2061,58,"style"],[1986,53,2061,63],[1986,54,2061,64,"length"],[1986,60,2061,70],[1986,62,2061,72],[1987,16,2062,28],[1987,20,2062,32],[1987,21,2062,33,"diffAsStr"],[1987,30,2062,42],[1987,33,2062,45,"unchangedAsStr"],[1987,47,2062,59],[1987,49,2062,61,"split"],[1987,54,2062,66],[1987,55,2062,67],[1987,61,2062,73],[1987,62,2062,74],[1987,63,2062,75,"length"],[1987,69,2062,81],[1987,74,2063,32,"attributes"],[1987,84,2063,42],[1987,85,2063,43,"style"],[1987,90,2063,48],[1987,91,2063,49,"split"],[1987,96,2063,54],[1987,97,2063,55],[1987,103,2063,61],[1987,104,2063,62],[1987,105,2063,63,"length"],[1987,111,2063,69],[1987,113,2063,71],[1988,18,2064,32,"attributes"],[1988,28,2064,42],[1988,29,2064,43,"style"],[1988,34,2064,48],[1988,37,2064,51,"attribute"],[1988,46,2064,60],[1988,47,2064,61,"styleDiff"],[1988,56,2064,70],[1989,16,2065,28],[1990,14,2066,24],[1991,12,2067,20],[1992,12,2068,20],[1992,19,2068,27],[1993,14,2069,24,"id"],[1993,16,2069,26],[1993,18,2069,28],[1993,22,2069,32],[1993,23,2069,33,"mirror"],[1993,29,2069,39],[1993,30,2069,40,"getId"],[1993,35,2069,45],[1993,36,2069,46,"attribute"],[1993,45,2069,55],[1993,46,2069,56,"node"],[1993,50,2069,60],[1993,51,2069,61],[1994,14,2070,24,"attributes"],[1994,24,2070,34],[1994,26,2070,36,"attributes"],[1995,12,2071,20],[1995,13,2071,21],[1996,10,2072,16],[1996,11,2072,17],[1996,12,2072,18],[1996,13,2073,21,"filter"],[1996,19,2073,27],[1996,20,2073,29,"attribute"],[1996,29,2073,38],[1996,33,2073,43],[1996,34,2073,44,"addedIds"],[1996,42,2073,52],[1996,43,2073,53,"has"],[1996,46,2073,56],[1996,47,2073,57,"attribute"],[1996,56,2073,66],[1996,57,2073,67,"id"],[1996,59,2073,69],[1996,60,2073,70],[1996,61,2073,71],[1996,62,2074,21,"filter"],[1996,68,2074,27],[1996,69,2074,29,"attribute"],[1996,78,2074,38],[1996,82,2074,43],[1996,86,2074,47],[1996,87,2074,48,"mirror"],[1996,93,2074,54],[1996,94,2074,55,"has"],[1996,97,2074,58],[1996,98,2074,59,"attribute"],[1996,107,2074,68],[1996,108,2074,69,"id"],[1996,110,2074,71],[1996,111,2074,72],[1996,112,2074,73],[1997,10,2075,16,"removes"],[1997,17,2075,23],[1997,19,2075,25],[1997,23,2075,29],[1997,24,2075,30,"removes"],[1997,31,2075,37],[1998,10,2076,16,"adds"],[1999,8,2077,12],[1999,9,2077,13],[2000,8,2078,12],[2000,12,2078,16],[2000,13,2078,17,"payload"],[2000,20,2078,24],[2000,21,2078,25,"texts"],[2000,26,2078,30],[2000,27,2078,31,"length"],[2000,33,2078,37],[2000,37,2079,16],[2000,38,2079,17,"payload"],[2000,45,2079,24],[2000,46,2079,25,"attributes"],[2000,56,2079,35],[2000,57,2079,36,"length"],[2000,63,2079,42],[2000,67,2080,16],[2000,68,2080,17,"payload"],[2000,75,2080,24],[2000,76,2080,25,"removes"],[2000,83,2080,32],[2000,84,2080,33,"length"],[2000,90,2080,39],[2000,94,2081,16],[2000,95,2081,17,"payload"],[2000,102,2081,24],[2000,103,2081,25,"adds"],[2000,107,2081,29],[2000,108,2081,30,"length"],[2000,114,2081,36],[2000,116,2081,38],[2001,10,2082,16],[2002,8,2083,12],[2003,8,2084,12],[2003,12,2084,16],[2003,13,2084,17,"texts"],[2003,18,2084,22],[2003,21,2084,25],[2003,23,2084,27],[2004,8,2085,12],[2004,12,2085,16],[2004,13,2085,17,"attributes"],[2004,23,2085,27],[2004,26,2085,30],[2004,28,2085,32],[2005,8,2086,12],[2005,12,2086,16],[2005,13,2086,17,"attributeMap"],[2005,25,2086,29],[2005,28,2086,32],[2005,32,2086,36,"WeakMap"],[2005,39,2086,43],[2005,40,2086,44],[2005,41,2086,45],[2006,8,2087,12],[2006,12,2087,16],[2006,13,2087,17,"removes"],[2006,20,2087,24],[2006,23,2087,27],[2006,25,2087,29],[2007,8,2088,12],[2007,12,2088,16],[2007,13,2088,17,"addedSet"],[2007,21,2088,25],[2007,24,2088,28],[2007,28,2088,32,"Set"],[2007,31,2088,35],[2007,32,2088,36],[2007,33,2088,37],[2008,8,2089,12],[2008,12,2089,16],[2008,13,2089,17,"movedSet"],[2008,21,2089,25],[2008,24,2089,28],[2008,28,2089,32,"Set"],[2008,31,2089,35],[2008,32,2089,36],[2008,33,2089,37],[2009,8,2090,12],[2009,12,2090,16],[2009,13,2090,17,"droppedSet"],[2009,23,2090,27],[2009,26,2090,30],[2009,30,2090,34,"Set"],[2009,33,2090,37],[2009,34,2090,38],[2009,35,2090,39],[2010,8,2091,12],[2010,12,2091,16],[2010,13,2091,17,"movedMap"],[2010,21,2091,25],[2010,24,2091,28],[2010,25,2091,29],[2010,26,2091,30],[2011,8,2092,12],[2011,12,2092,16],[2011,13,2092,17,"mutationCb"],[2011,23,2092,27],[2011,24,2092,28,"payload"],[2011,31,2092,35],[2011,32,2092,36],[2012,6,2093,8],[2012,7,2093,9],[2013,6,2094,8],[2013,10,2094,12],[2013,11,2094,13,"processMutation"],[2013,26,2094,28],[2013,29,2094,32,"m"],[2013,30,2094,33],[2013,34,2094,38],[2014,8,2095,12],[2014,12,2095,16,"isIgnored"],[2014,21,2095,25],[2014,22,2095,26,"m"],[2014,23,2095,27],[2014,24,2095,28,"target"],[2014,30,2095,34],[2014,32,2095,36],[2014,36,2095,40],[2014,37,2095,41,"mirror"],[2014,43,2095,47],[2014,44,2095,48],[2014,46,2095,50],[2015,10,2096,16],[2016,8,2097,12],[2017,8,2098,12],[2017,16,2098,20,"m"],[2017,17,2098,21],[2017,18,2098,22,"type"],[2017,22,2098,26],[2018,10,2099,16],[2018,15,2099,21],[2018,30,2099,36],[2019,12,2099,38],[2020,14,2100,20],[2020,20,2100,26,"value"],[2020,25,2100,31],[2020,28,2100,34,"m"],[2020,29,2100,35],[2020,30,2100,36,"target"],[2020,36,2100,42],[2020,37,2100,43,"textContent"],[2020,48,2100,54],[2021,14,2101,20],[2021,18,2101,24],[2021,19,2101,25,"isBlocked"],[2021,28,2101,34],[2021,29,2101,35,"m"],[2021,30,2101,36],[2021,31,2101,37,"target"],[2021,37,2101,43],[2021,39,2101,45],[2021,43,2101,49],[2021,44,2101,50,"blockClass"],[2021,54,2101,60],[2021,56,2101,62],[2021,60,2101,66],[2021,61,2101,67,"blockSelector"],[2021,74,2101,80],[2021,76,2101,82],[2021,80,2101,86],[2021,81,2101,87,"unblockSelector"],[2021,96,2101,102],[2021,98,2101,104],[2021,103,2101,109],[2021,104,2101,110],[2021,108,2102,24,"value"],[2021,113,2102,29],[2021,118,2102,34,"m"],[2021,119,2102,35],[2021,120,2102,36,"oldValue"],[2021,128,2102,44],[2021,130,2102,46],[2022,16,2103,24],[2022,20,2103,28],[2022,21,2103,29,"texts"],[2022,26,2103,34],[2022,27,2103,35,"push"],[2022,31,2103,39],[2022,32,2103,40],[2023,18,2104,28,"value"],[2023,23,2104,33],[2023,25,2104,35,"needMaskingText"],[2023,40,2104,50],[2023,41,2104,51,"m"],[2023,42,2104,52],[2023,43,2104,53,"target"],[2023,49,2104,59],[2023,51,2104,61],[2023,55,2104,65],[2023,56,2104,66,"maskTextClass"],[2023,69,2104,79],[2023,71,2104,81],[2023,75,2104,85],[2023,76,2104,86,"maskTextSelector"],[2023,92,2104,102],[2023,94,2104,104],[2023,98,2104,108],[2023,99,2104,109,"unmaskTextClass"],[2023,114,2104,124],[2023,116,2104,126],[2023,120,2104,130],[2023,121,2104,131,"unmaskTextSelector"],[2023,139,2104,149],[2023,141,2104,151],[2023,145,2104,155],[2023,146,2104,156,"maskAllText"],[2023,157,2104,167],[2023,158,2104,168],[2023,162,2104,172,"value"],[2023,167,2104,177],[2023,170,2105,34],[2023,174,2105,38],[2023,175,2105,39,"maskTextFn"],[2023,185,2105,49],[2023,188,2106,38],[2023,192,2106,42],[2023,193,2106,43,"maskTextFn"],[2023,203,2106,53],[2023,204,2106,54,"value"],[2023,209,2106,59],[2023,211,2106,61,"closestElementOfNode"],[2023,231,2106,81],[2023,232,2106,82,"m"],[2023,233,2106,83],[2023,234,2106,84,"target"],[2023,240,2106,90],[2023,241,2106,91],[2023,242,2106,92],[2023,245,2107,38,"value"],[2023,250,2107,43],[2023,251,2107,44,"replace"],[2023,258,2107,51],[2023,259,2107,52],[2023,266,2107,59],[2023,268,2107,61],[2023,271,2107,64],[2023,272,2107,65],[2023,275,2108,34,"value"],[2023,280,2108,39],[2024,18,2109,28,"node"],[2024,22,2109,32],[2024,24,2109,34,"m"],[2024,25,2109,35],[2024,26,2109,36,"target"],[2025,16,2110,24],[2025,17,2110,25],[2025,18,2110,26],[2026,14,2111,20],[2027,14,2112,20],[2028,12,2113,16],[2029,10,2114,16],[2029,15,2114,21],[2029,27,2114,33],[2030,12,2114,35],[2031,14,2115,20],[2031,20,2115,26,"target"],[2031,26,2115,32],[2031,29,2115,35,"m"],[2031,30,2115,36],[2031,31,2115,37,"target"],[2031,37,2115,43],[2032,14,2116,20],[2032,18,2116,24,"attributeName"],[2032,31,2116,37],[2032,34,2116,40,"m"],[2032,35,2116,41],[2032,36,2116,42,"attributeName"],[2032,49,2116,55],[2033,14,2117,20],[2033,18,2117,24,"value"],[2033,23,2117,29],[2033,26,2117,32,"m"],[2033,27,2117,33],[2033,28,2117,34,"target"],[2033,34,2117,40],[2033,35,2117,41,"getAttribute"],[2033,47,2117,53],[2033,48,2117,54,"attributeName"],[2033,61,2117,67],[2033,62,2117,68],[2034,14,2118,20],[2034,18,2118,24,"attributeName"],[2034,31,2118,37],[2034,36,2118,42],[2034,43,2118,49],[2034,45,2118,51],[2035,16,2119,24],[2035,22,2119,30,"type"],[2035,26,2119,34],[2035,29,2119,37,"getInputType"],[2035,41,2119,49],[2035,42,2119,50,"target"],[2035,48,2119,56],[2035,49,2119,57],[2036,16,2120,24],[2036,22,2120,30,"tagName"],[2036,29,2120,37],[2036,32,2120,40,"target"],[2036,38,2120,46],[2036,39,2120,47,"tagName"],[2036,46,2120,54],[2037,16,2121,24,"value"],[2037,21,2121,29],[2037,24,2121,32,"getInputValue"],[2037,37,2121,45],[2037,38,2121,46,"target"],[2037,44,2121,52],[2037,46,2121,54,"tagName"],[2037,53,2121,61],[2037,55,2121,63,"type"],[2037,59,2121,67],[2037,60,2121,68],[2038,16,2122,24],[2038,22,2122,30,"isInputMasked"],[2038,35,2122,43],[2038,38,2122,46,"shouldMaskInput"],[2038,53,2122,61],[2038,54,2122,62],[2039,18,2123,28,"maskInputOptions"],[2039,34,2123,44],[2039,36,2123,46],[2039,40,2123,50],[2039,41,2123,51,"maskInputOptions"],[2039,57,2123,67],[2040,18,2124,28,"tagName"],[2040,25,2124,35],[2041,18,2125,28,"type"],[2042,16,2126,24],[2042,17,2126,25],[2042,18,2126,26],[2043,16,2127,24],[2043,22,2127,30,"forceMask"],[2043,31,2127,39],[2043,34,2127,42,"needMaskingText"],[2043,49,2127,57],[2043,50,2127,58,"m"],[2043,51,2127,59],[2043,52,2127,60,"target"],[2043,58,2127,66],[2043,60,2127,68],[2043,64,2127,72],[2043,65,2127,73,"maskTextClass"],[2043,78,2127,86],[2043,80,2127,88],[2043,84,2127,92],[2043,85,2127,93,"maskTextSelector"],[2043,101,2127,109],[2043,103,2127,111],[2043,107,2127,115],[2043,108,2127,116,"unmaskTextClass"],[2043,123,2127,131],[2043,125,2127,133],[2043,129,2127,137],[2043,130,2127,138,"unmaskTextSelector"],[2043,148,2127,156],[2043,150,2127,158,"isInputMasked"],[2043,163,2127,171],[2043,164,2127,172],[2044,16,2128,24,"value"],[2044,21,2128,29],[2044,24,2128,32,"maskInputValue"],[2044,38,2128,46],[2044,39,2128,47],[2045,18,2129,28,"isMasked"],[2045,26,2129,36],[2045,28,2129,38,"forceMask"],[2045,37,2129,47],[2046,18,2130,28,"element"],[2046,25,2130,35],[2046,27,2130,37,"target"],[2046,33,2130,43],[2047,18,2131,28,"value"],[2047,23,2131,33],[2048,18,2132,28,"maskInputFn"],[2048,29,2132,39],[2048,31,2132,41],[2048,35,2132,45],[2048,36,2132,46,"maskInputFn"],[2049,16,2133,24],[2049,17,2133,25],[2049,18,2133,26],[2050,14,2134,20],[2051,14,2135,20],[2051,18,2135,24,"isBlocked"],[2051,27,2135,33],[2051,28,2135,34,"m"],[2051,29,2135,35],[2051,30,2135,36,"target"],[2051,36,2135,42],[2051,38,2135,44],[2051,42,2135,48],[2051,43,2135,49,"blockClass"],[2051,53,2135,59],[2051,55,2135,61],[2051,59,2135,65],[2051,60,2135,66,"blockSelector"],[2051,73,2135,79],[2051,75,2135,81],[2051,79,2135,85],[2051,80,2135,86,"unblockSelector"],[2051,95,2135,101],[2051,97,2135,103],[2051,102,2135,108],[2051,103,2135,109],[2051,107,2136,24,"value"],[2051,112,2136,29],[2051,117,2136,34,"m"],[2051,118,2136,35],[2051,119,2136,36,"oldValue"],[2051,127,2136,44],[2051,129,2136,46],[2052,16,2137,24],[2053,14,2138,20],[2054,14,2139,20],[2054,18,2139,24,"item"],[2054,22,2139,28],[2054,25,2139,31],[2054,29,2139,35],[2054,30,2139,36,"attributeMap"],[2054,42,2139,48],[2054,43,2139,49,"get"],[2054,46,2139,52],[2054,47,2139,53,"m"],[2054,48,2139,54],[2054,49,2139,55,"target"],[2054,55,2139,61],[2054,56,2139,62],[2055,14,2140,20],[2055,18,2140,24,"target"],[2055,24,2140,30],[2055,25,2140,31,"tagName"],[2055,32,2140,38],[2055,37,2140,43],[2055,45,2140,51],[2055,49,2141,24,"attributeName"],[2055,62,2141,37],[2055,67,2141,42],[2055,72,2141,47],[2055,76,2142,24],[2055,77,2142,25],[2055,81,2142,29],[2055,82,2142,30,"keepIframeSrcFn"],[2055,97,2142,45],[2055,98,2142,46,"value"],[2055,103,2142,51],[2055,104,2142,52],[2055,106,2142,54],[2056,16,2143,24],[2056,22,2143,30,"iframeDoc"],[2056,31,2143,39],[2056,34,2143,42,"getIFrameContentDocument"],[2056,58,2143,66],[2056,59,2143,67,"target"],[2056,65,2143,73],[2056,66,2143,74],[2057,16,2144,24],[2057,20,2144,28],[2057,21,2144,29,"iframeDoc"],[2057,30,2144,38],[2057,32,2144,40],[2058,18,2145,28,"attributeName"],[2058,31,2145,41],[2058,34,2145,44],[2058,42,2145,52],[2059,16,2146,24],[2059,17,2146,25],[2059,23,2147,29],[2060,18,2148,28],[2061,16,2149,24],[2062,14,2150,20],[2063,14,2151,20],[2063,18,2151,24],[2063,19,2151,25,"item"],[2063,23,2151,29],[2063,25,2151,31],[2064,16,2152,24,"item"],[2064,20,2152,28],[2064,23,2152,31],[2065,18,2153,28,"node"],[2065,22,2153,32],[2065,24,2153,34,"m"],[2065,25,2153,35],[2065,26,2153,36,"target"],[2065,32,2153,42],[2066,18,2154,28,"attributes"],[2066,28,2154,38],[2066,30,2154,40],[2066,31,2154,41],[2066,32,2154,42],[2067,18,2155,28,"styleDiff"],[2067,27,2155,37],[2067,29,2155,39],[2067,30,2155,40],[2067,31,2155,41],[2068,18,2156,28,"_unchangedStyles"],[2068,34,2156,44],[2068,36,2156,46],[2068,37,2156,47],[2069,16,2157,24],[2069,17,2157,25],[2070,16,2158,24],[2070,20,2158,28],[2070,21,2158,29,"attributes"],[2070,31,2158,39],[2070,32,2158,40,"push"],[2070,36,2158,44],[2070,37,2158,45,"item"],[2070,41,2158,49],[2070,42,2158,50],[2071,16,2159,24],[2071,20,2159,28],[2071,21,2159,29,"attributeMap"],[2071,33,2159,41],[2071,34,2159,42,"set"],[2071,37,2159,45],[2071,38,2159,46,"m"],[2071,39,2159,47],[2071,40,2159,48,"target"],[2071,46,2159,54],[2071,48,2159,56,"item"],[2071,52,2159,60],[2071,53,2159,61],[2072,14,2160,20],[2073,14,2161,20],[2073,18,2161,24,"attributeName"],[2073,31,2161,37],[2073,36,2161,42],[2073,42,2161,48],[2073,46,2162,24,"target"],[2073,52,2162,30],[2073,53,2162,31,"tagName"],[2073,60,2162,38],[2073,65,2162,43],[2073,72,2162,50],[2073,76,2163,24],[2073,77,2163,25,"m"],[2073,78,2163,26],[2073,79,2163,27,"oldValue"],[2073,87,2163,35],[2073,91,2163,39],[2073,93,2163,41],[2073,95,2163,43,"toLowerCase"],[2073,106,2163,54],[2073,107,2163,55],[2073,108,2163,56],[2073,113,2163,61],[2073,123,2163,71],[2073,125,2163,73],[2074,16,2164,24,"target"],[2074,22,2164,30],[2074,23,2164,31,"setAttribute"],[2074,35,2164,43],[2074,36,2164,44],[2074,57,2164,65],[2074,59,2164,67],[2074,65,2164,73],[2074,66,2164,74],[2075,14,2165,20],[2076,14,2166,20],[2076,18,2166,24],[2076,19,2166,25,"ignoreAttribute"],[2076,34,2166,40],[2076,35,2166,41,"target"],[2076,41,2166,47],[2076,42,2166,48,"tagName"],[2076,49,2166,55],[2076,51,2166,57,"attributeName"],[2076,64,2166,70],[2076,65,2166,71],[2076,67,2166,73],[2077,16,2167,24,"item"],[2077,20,2167,28],[2077,21,2167,29,"attributes"],[2077,31,2167,39],[2077,32,2167,40,"attributeName"],[2077,45,2167,53],[2077,46,2167,54],[2077,49,2167,57,"transformAttribute"],[2077,67,2167,75],[2077,68,2167,76],[2077,72,2167,80],[2077,73,2167,81,"doc"],[2077,76,2167,84],[2077,78,2167,86,"toLowerCase"],[2077,89,2167,97],[2077,90,2167,98,"target"],[2077,96,2167,104],[2077,97,2167,105,"tagName"],[2077,104,2167,112],[2077,105,2167,113],[2077,107,2167,115,"toLowerCase"],[2077,118,2167,126],[2077,119,2167,127,"attributeName"],[2077,132,2167,140],[2077,133,2167,141],[2077,135,2167,143,"value"],[2077,140,2167,148],[2077,142,2167,150,"target"],[2077,148,2167,156],[2077,150,2167,158],[2077,154,2167,162],[2077,155,2167,163,"maskAttributeFn"],[2077,170,2167,178],[2077,171,2167,179],[2078,16,2168,24],[2078,20,2168,28,"attributeName"],[2078,33,2168,41],[2078,38,2168,46],[2078,45,2168,53],[2078,47,2168,55],[2079,18,2169,28],[2079,22,2169,32],[2079,23,2169,33],[2079,27,2169,37],[2079,28,2169,38,"unattachedDoc"],[2079,41,2169,51],[2079,43,2169,53],[2080,20,2170,32],[2080,24,2170,36],[2081,22,2171,36],[2081,26,2171,40],[2081,27,2171,41,"unattachedDoc"],[2081,40,2171,54],[2081,43,2172,40,"document"],[2081,51,2172,48],[2081,52,2172,49,"implementation"],[2081,66,2172,63],[2081,67,2172,64,"createHTMLDocument"],[2081,85,2172,82],[2081,86,2172,83],[2081,87,2172,84],[2082,20,2173,32],[2082,21,2173,33],[2082,22,2174,32],[2082,29,2174,39,"e"],[2082,30,2174,40],[2082,32,2174,42],[2083,22,2175,36],[2083,26,2175,40],[2083,27,2175,41,"unattachedDoc"],[2083,40,2175,54],[2083,43,2175,57],[2083,47,2175,61],[2083,48,2175,62,"doc"],[2083,51,2175,65],[2084,20,2176,32],[2085,18,2177,28],[2086,18,2178,28],[2086,24,2178,34,"old"],[2086,27,2178,37],[2086,30,2178,40],[2086,34,2178,44],[2086,35,2178,45,"unattachedDoc"],[2086,48,2178,58],[2086,49,2178,59,"createElement"],[2086,62,2178,72],[2086,63,2178,73],[2086,69,2178,79],[2086,70,2178,80],[2087,18,2179,28],[2087,22,2179,32,"m"],[2087,23,2179,33],[2087,24,2179,34,"oldValue"],[2087,32,2179,42],[2087,34,2179,44],[2088,20,2180,32,"old"],[2088,23,2180,35],[2088,24,2180,36,"setAttribute"],[2088,36,2180,48],[2088,37,2180,49],[2088,44,2180,56],[2088,46,2180,58,"m"],[2088,47,2180,59],[2088,48,2180,60,"oldValue"],[2088,56,2180,68],[2088,57,2180,69],[2089,18,2181,28],[2090,18,2182,28],[2090,23,2182,33],[2090,29,2182,39,"pname"],[2090,34,2182,44],[2090,38,2182,48,"Array"],[2090,43,2182,53],[2090,44,2182,54,"from"],[2090,48,2182,58],[2090,49,2182,59,"target"],[2090,55,2182,65],[2090,56,2182,66,"style"],[2090,61,2182,71],[2090,62,2182,72],[2090,64,2182,74],[2091,20,2183,32],[2091,26,2183,38,"newValue"],[2091,34,2183,46],[2091,37,2183,49,"target"],[2091,43,2183,55],[2091,44,2183,56,"style"],[2091,49,2183,61],[2091,50,2183,62,"getPropertyValue"],[2091,66,2183,78],[2091,67,2183,79,"pname"],[2091,72,2183,84],[2091,73,2183,85],[2092,20,2184,32],[2092,26,2184,38,"newPriority"],[2092,37,2184,49],[2092,40,2184,52,"target"],[2092,46,2184,58],[2092,47,2184,59,"style"],[2092,52,2184,64],[2092,53,2184,65,"getPropertyPriority"],[2092,72,2184,84],[2092,73,2184,85,"pname"],[2092,78,2184,90],[2092,79,2184,91],[2093,20,2185,32],[2093,24,2185,36,"newValue"],[2093,32,2185,44],[2093,37,2185,49,"old"],[2093,40,2185,52],[2093,41,2185,53,"style"],[2093,46,2185,58],[2093,47,2185,59,"getPropertyValue"],[2093,63,2185,75],[2093,64,2185,76,"pname"],[2093,69,2185,81],[2093,70,2185,82],[2093,74,2186,36,"newPriority"],[2093,85,2186,47],[2093,90,2186,52,"old"],[2093,93,2186,55],[2093,94,2186,56,"style"],[2093,99,2186,61],[2093,100,2186,62,"getPropertyPriority"],[2093,119,2186,81],[2093,120,2186,82,"pname"],[2093,125,2186,87],[2093,126,2186,88],[2093,128,2186,90],[2094,22,2187,36],[2094,26,2187,40,"newPriority"],[2094,37,2187,51],[2094,42,2187,56],[2094,44,2187,58],[2094,46,2187,60],[2095,24,2188,40,"item"],[2095,28,2188,44],[2095,29,2188,45,"styleDiff"],[2095,38,2188,54],[2095,39,2188,55,"pname"],[2095,44,2188,60],[2095,45,2188,61],[2095,48,2188,64,"newValue"],[2095,56,2188,72],[2096,22,2189,36],[2096,23,2189,37],[2096,29,2190,41],[2097,24,2191,40,"item"],[2097,28,2191,44],[2097,29,2191,45,"styleDiff"],[2097,38,2191,54],[2097,39,2191,55,"pname"],[2097,44,2191,60],[2097,45,2191,61],[2097,48,2191,64],[2097,49,2191,65,"newValue"],[2097,57,2191,73],[2097,59,2191,75,"newPriority"],[2097,70,2191,86],[2097,71,2191,87],[2098,22,2192,36],[2099,20,2193,32],[2099,21,2193,33],[2099,27,2194,37],[2100,22,2195,36,"item"],[2100,26,2195,40],[2100,27,2195,41,"_unchangedStyles"],[2100,43,2195,57],[2100,44,2195,58,"pname"],[2100,49,2195,63],[2100,50,2195,64],[2100,53,2195,67],[2100,54,2195,68,"newValue"],[2100,62,2195,76],[2100,64,2195,78,"newPriority"],[2100,75,2195,89],[2100,76,2195,90],[2101,20,2196,32],[2102,18,2197,28],[2103,18,2198,28],[2103,23,2198,33],[2103,29,2198,39,"pname"],[2103,34,2198,44],[2103,38,2198,48,"Array"],[2103,43,2198,53],[2103,44,2198,54,"from"],[2103,48,2198,58],[2103,49,2198,59,"old"],[2103,52,2198,62],[2103,53,2198,63,"style"],[2103,58,2198,68],[2103,59,2198,69],[2103,61,2198,71],[2104,20,2199,32],[2104,24,2199,36,"target"],[2104,30,2199,42],[2104,31,2199,43,"style"],[2104,36,2199,48],[2104,37,2199,49,"getPropertyValue"],[2104,53,2199,65],[2104,54,2199,66,"pname"],[2104,59,2199,71],[2104,60,2199,72],[2104,65,2199,77],[2104,67,2199,79],[2104,69,2199,81],[2105,22,2200,36,"item"],[2105,26,2200,40],[2105,27,2200,41,"styleDiff"],[2105,36,2200,50],[2105,37,2200,51,"pname"],[2105,42,2200,56],[2105,43,2200,57],[2105,46,2200,60],[2105,51,2200,65],[2106,20,2201,32],[2107,18,2202,28],[2108,16,2203,24],[2109,14,2204,20],[2110,14,2205,20],[2111,12,2206,16],[2112,10,2207,16],[2112,15,2207,21],[2112,26,2207,32],[2113,12,2207,34],[2114,14,2208,20],[2114,18,2208,24,"isBlocked"],[2114,27,2208,33],[2114,28,2208,34,"m"],[2114,29,2208,35],[2114,30,2208,36,"target"],[2114,36,2208,42],[2114,38,2208,44],[2114,42,2208,48],[2114,43,2208,49,"blockClass"],[2114,53,2208,59],[2114,55,2208,61],[2114,59,2208,65],[2114,60,2208,66,"blockSelector"],[2114,73,2208,79],[2114,75,2208,81],[2114,79,2208,85],[2114,80,2208,86,"unblockSelector"],[2114,95,2208,101],[2114,97,2208,103],[2114,101,2208,107],[2114,102,2208,108],[2114,104,2208,110],[2115,16,2209,24],[2116,14,2210,20],[2117,14,2211,20,"m"],[2117,15,2211,21],[2117,16,2211,22,"addedNodes"],[2117,26,2211,32],[2117,27,2211,33,"forEach"],[2117,34,2211,40],[2117,35,2211,42,"n"],[2117,36,2211,43],[2117,40,2211,48],[2117,44,2211,52],[2117,45,2211,53,"genAdds"],[2117,52,2211,60],[2117,53,2211,61,"n"],[2117,54,2211,62],[2117,56,2211,64,"m"],[2117,57,2211,65],[2117,58,2211,66,"target"],[2117,64,2211,72],[2117,65,2211,73],[2117,66,2211,74],[2118,14,2212,20,"m"],[2118,15,2212,21],[2118,16,2212,22,"removedNodes"],[2118,28,2212,34],[2118,29,2212,35,"forEach"],[2118,36,2212,42],[2118,37,2212,44,"n"],[2118,38,2212,45],[2118,42,2212,50],[2119,16,2213,24],[2119,22,2213,30,"nodeId"],[2119,28,2213,36],[2119,31,2213,39],[2119,35,2213,43],[2119,36,2213,44,"mirror"],[2119,42,2213,50],[2119,43,2213,51,"getId"],[2119,48,2213,56],[2119,49,2213,57,"n"],[2119,50,2213,58],[2119,51,2213,59],[2120,16,2214,24],[2120,22,2214,30,"parentId"],[2120,30,2214,38],[2120,33,2214,41,"isShadowRoot"],[2120,45,2214,53],[2120,46,2214,54,"m"],[2120,47,2214,55],[2120,48,2214,56,"target"],[2120,54,2214,62],[2120,55,2214,63],[2120,58,2215,30],[2120,62,2215,34],[2120,63,2215,35,"mirror"],[2120,69,2215,41],[2120,70,2215,42,"getId"],[2120,75,2215,47],[2120,76,2215,48,"m"],[2120,77,2215,49],[2120,78,2215,50,"target"],[2120,84,2215,56],[2120,85,2215,57,"host"],[2120,89,2215,61],[2120,90,2215,62],[2120,93,2216,30],[2120,97,2216,34],[2120,98,2216,35,"mirror"],[2120,104,2216,41],[2120,105,2216,42,"getId"],[2120,110,2216,47],[2120,111,2216,48,"m"],[2120,112,2216,49],[2120,113,2216,50,"target"],[2120,119,2216,56],[2120,120,2216,57],[2121,16,2217,24],[2121,20,2217,28,"isBlocked"],[2121,29,2217,37],[2121,30,2217,38,"m"],[2121,31,2217,39],[2121,32,2217,40,"target"],[2121,38,2217,46],[2121,40,2217,48],[2121,44,2217,52],[2121,45,2217,53,"blockClass"],[2121,55,2217,63],[2121,57,2217,65],[2121,61,2217,69],[2121,62,2217,70,"blockSelector"],[2121,75,2217,83],[2121,77,2217,85],[2121,81,2217,89],[2121,82,2217,90,"unblockSelector"],[2121,97,2217,105],[2121,99,2217,107],[2121,104,2217,112],[2121,105,2217,113],[2121,109,2218,28,"isIgnored"],[2121,118,2218,37],[2121,119,2218,38,"n"],[2121,120,2218,39],[2121,122,2218,41],[2121,126,2218,45],[2121,127,2218,46,"mirror"],[2121,133,2218,52],[2121,134,2218,53],[2121,138,2219,28],[2121,139,2219,29,"isSerialized"],[2121,151,2219,41],[2121,152,2219,42,"n"],[2121,153,2219,43],[2121,155,2219,45],[2121,159,2219,49],[2121,160,2219,50,"mirror"],[2121,166,2219,56],[2121,167,2219,57],[2121,169,2219,59],[2122,18,2220,28],[2123,16,2221,24],[2124,16,2222,24],[2124,20,2222,28],[2124,24,2222,32],[2124,25,2222,33,"addedSet"],[2124,33,2222,41],[2124,34,2222,42,"has"],[2124,37,2222,45],[2124,38,2222,46,"n"],[2124,39,2222,47],[2124,40,2222,48],[2124,42,2222,50],[2125,18,2223,28,"deepDelete"],[2125,28,2223,38],[2125,29,2223,39],[2125,33,2223,43],[2125,34,2223,44,"addedSet"],[2125,42,2223,52],[2125,44,2223,54,"n"],[2125,45,2223,55],[2125,46,2223,56],[2126,18,2224,28],[2126,22,2224,32],[2126,23,2224,33,"droppedSet"],[2126,33,2224,43],[2126,34,2224,44,"add"],[2126,37,2224,47],[2126,38,2224,48,"n"],[2126,39,2224,49],[2126,40,2224,50],[2127,16,2225,24],[2127,17,2225,25],[2127,23,2226,29],[2127,27,2226,33],[2127,31,2226,37],[2127,32,2226,38,"addedSet"],[2127,40,2226,46],[2127,41,2226,47,"has"],[2127,44,2226,50],[2127,45,2226,51,"m"],[2127,46,2226,52],[2127,47,2226,53,"target"],[2127,53,2226,59],[2127,54,2226,60],[2127,58,2226,64,"nodeId"],[2127,64,2226,70],[2127,69,2226,75],[2127,70,2226,76],[2127,71,2226,77],[2127,73,2226,79],[2127,74,2226,80],[2127,79,2227,29],[2127,83,2227,33,"isAncestorRemoved"],[2127,100,2227,50],[2127,101,2227,51,"m"],[2127,102,2227,52],[2127,103,2227,53,"target"],[2127,109,2227,59],[2127,111,2227,61],[2127,115,2227,65],[2127,116,2227,66,"mirror"],[2127,122,2227,72],[2127,123,2227,73],[2127,125,2227,75],[2127,126,2227,76],[2127,131,2228,29],[2127,135,2228,33],[2127,139,2228,37],[2127,140,2228,38,"movedSet"],[2127,148,2228,46],[2127,149,2228,47,"has"],[2127,152,2228,50],[2127,153,2228,51,"n"],[2127,154,2228,52],[2127,155,2228,53],[2127,159,2229,28],[2127,163,2229,32],[2127,164,2229,33,"movedMap"],[2127,172,2229,41],[2127,173,2229,42,"moveKey"],[2127,180,2229,49],[2127,181,2229,50,"nodeId"],[2127,187,2229,56],[2127,189,2229,58,"parentId"],[2127,197,2229,66],[2127,198,2229,67],[2127,199,2229,68],[2127,201,2229,70],[2128,18,2230,28,"deepDelete"],[2128,28,2230,38],[2128,29,2230,39],[2128,33,2230,43],[2128,34,2230,44,"movedSet"],[2128,42,2230,52],[2128,44,2230,54,"n"],[2128,45,2230,55],[2128,46,2230,56],[2129,16,2231,24],[2129,17,2231,25],[2129,23,2232,29],[2130,18,2233,28],[2130,22,2233,32],[2130,23,2233,33,"removes"],[2130,30,2233,40],[2130,31,2233,41,"push"],[2130,35,2233,45],[2130,36,2233,46],[2131,20,2234,32,"parentId"],[2131,28,2234,40],[2132,20,2235,32,"id"],[2132,22,2235,34],[2132,24,2235,36,"nodeId"],[2132,30,2235,42],[2133,20,2236,32,"isShadow"],[2133,28,2236,40],[2133,30,2236,42,"isShadowRoot"],[2133,42,2236,54],[2133,43,2236,55,"m"],[2133,44,2236,56],[2133,45,2236,57,"target"],[2133,51,2236,63],[2133,52,2236,64],[2133,56,2236,68,"isNativeShadowDom"],[2133,73,2236,85],[2133,74,2236,86,"m"],[2133,75,2236,87],[2133,76,2236,88,"target"],[2133,82,2236,94],[2133,83,2236,95],[2133,86,2237,38],[2133,90,2237,42],[2133,93,2238,38,"undefined"],[2134,18,2239,28],[2134,19,2239,29],[2134,20,2239,30],[2135,16,2240,24],[2136,16,2241,24],[2136,20,2241,28],[2136,21,2241,29,"mapRemoves"],[2136,31,2241,39],[2136,32,2241,40,"push"],[2136,36,2241,44],[2136,37,2241,45,"n"],[2136,38,2241,46],[2136,39,2241,47],[2137,14,2242,20],[2137,15,2242,21],[2137,16,2242,22],[2138,14,2243,20],[2139,12,2244,16],[2140,8,2245,12],[2141,6,2246,8],[2141,7,2246,9],[2142,6,2247,8],[2142,10,2247,12],[2142,11,2247,13,"genAdds"],[2142,18,2247,20],[2142,21,2247,23],[2142,22,2247,24,"n"],[2142,23,2247,25],[2142,25,2247,27,"target"],[2142,31,2247,33],[2142,36,2247,38],[2143,8,2248,12],[2143,12,2248,16],[2143,16,2248,20],[2143,17,2248,21,"processedNodeManager"],[2143,37,2248,41],[2143,38,2248,42,"inOtherBuffer"],[2143,51,2248,55],[2143,52,2248,56,"n"],[2143,53,2248,57],[2143,55,2248,59],[2143,59,2248,63],[2143,60,2248,64],[2143,62,2249,16],[2144,8,2250,12],[2144,12,2250,16],[2144,16,2250,20],[2144,17,2250,21,"addedSet"],[2144,25,2250,29],[2144,26,2250,30,"has"],[2144,29,2250,33],[2144,30,2250,34,"n"],[2144,31,2250,35],[2144,32,2250,36],[2144,36,2250,40],[2144,40,2250,44],[2144,41,2250,45,"movedSet"],[2144,49,2250,53],[2144,50,2250,54,"has"],[2144,53,2250,57],[2144,54,2250,58,"n"],[2144,55,2250,59],[2144,56,2250,60],[2144,58,2251,16],[2145,8,2252,12],[2145,12,2252,16],[2145,16,2252,20],[2145,17,2252,21,"mirror"],[2145,23,2252,27],[2145,24,2252,28,"hasNode"],[2145,31,2252,35],[2145,32,2252,36,"n"],[2145,33,2252,37],[2145,34,2252,38],[2145,36,2252,40],[2146,10,2253,16],[2146,14,2253,20,"isIgnored"],[2146,23,2253,29],[2146,24,2253,30,"n"],[2146,25,2253,31],[2146,27,2253,33],[2146,31,2253,37],[2146,32,2253,38,"mirror"],[2146,38,2253,44],[2146,39,2253,45],[2146,41,2253,47],[2147,12,2254,20],[2148,10,2255,16],[2149,10,2256,16],[2149,14,2256,20],[2149,15,2256,21,"movedSet"],[2149,23,2256,29],[2149,24,2256,30,"add"],[2149,27,2256,33],[2149,28,2256,34,"n"],[2149,29,2256,35],[2149,30,2256,36],[2150,10,2257,16],[2150,14,2257,20,"targetId"],[2150,22,2257,28],[2150,25,2257,31],[2150,29,2257,35],[2151,10,2258,16],[2151,14,2258,20,"target"],[2151,20,2258,26],[2151,24,2258,30],[2151,28,2258,34],[2151,29,2258,35,"mirror"],[2151,35,2258,41],[2151,36,2258,42,"hasNode"],[2151,43,2258,49],[2151,44,2258,50,"target"],[2151,50,2258,56],[2151,51,2258,57],[2151,53,2258,59],[2152,12,2259,20,"targetId"],[2152,20,2259,28],[2152,23,2259,31],[2152,27,2259,35],[2152,28,2259,36,"mirror"],[2152,34,2259,42],[2152,35,2259,43,"getId"],[2152,40,2259,48],[2152,41,2259,49,"target"],[2152,47,2259,55],[2152,48,2259,56],[2153,10,2260,16],[2154,10,2261,16],[2154,14,2261,20,"targetId"],[2154,22,2261,28],[2154,26,2261,32,"targetId"],[2154,34,2261,40],[2154,39,2261,45],[2154,40,2261,46],[2154,41,2261,47],[2154,43,2261,49],[2155,12,2262,20],[2155,16,2262,24],[2155,17,2262,25,"movedMap"],[2155,25,2262,33],[2155,26,2262,34,"moveKey"],[2155,33,2262,41],[2155,34,2262,42],[2155,38,2262,46],[2155,39,2262,47,"mirror"],[2155,45,2262,53],[2155,46,2262,54,"getId"],[2155,51,2262,59],[2155,52,2262,60,"n"],[2155,53,2262,61],[2155,54,2262,62],[2155,56,2262,64,"targetId"],[2155,64,2262,72],[2155,65,2262,73],[2155,66,2262,74],[2155,69,2262,77],[2155,73,2262,81],[2156,10,2263,16],[2157,8,2264,12],[2157,9,2264,13],[2157,15,2265,17],[2158,10,2266,16],[2158,14,2266,20],[2158,15,2266,21,"addedSet"],[2158,23,2266,29],[2158,24,2266,30,"add"],[2158,27,2266,33],[2158,28,2266,34,"n"],[2158,29,2266,35],[2158,30,2266,36],[2159,10,2267,16],[2159,14,2267,20],[2159,15,2267,21,"droppedSet"],[2159,25,2267,31],[2159,26,2267,32,"delete"],[2159,32,2267,38],[2159,33,2267,39,"n"],[2159,34,2267,40],[2159,35,2267,41],[2160,8,2268,12],[2161,8,2269,12],[2161,12,2269,16],[2161,13,2269,17,"isBlocked"],[2161,22,2269,26],[2161,23,2269,27,"n"],[2161,24,2269,28],[2161,26,2269,30],[2161,30,2269,34],[2161,31,2269,35,"blockClass"],[2161,41,2269,45],[2161,43,2269,47],[2161,47,2269,51],[2161,48,2269,52,"blockSelector"],[2161,61,2269,65],[2161,63,2269,67],[2161,67,2269,71],[2161,68,2269,72,"unblockSelector"],[2161,83,2269,87],[2161,85,2269,89],[2161,90,2269,94],[2161,91,2269,95],[2161,93,2269,97],[2162,10,2270,16,"n"],[2162,11,2270,17],[2162,12,2270,18,"childNodes"],[2162,22,2270,28],[2162,23,2270,29,"forEach"],[2162,30,2270,36],[2162,31,2270,38,"childN"],[2162,37,2270,44],[2162,41,2270,49],[2162,45,2270,53],[2162,46,2270,54,"genAdds"],[2162,53,2270,61],[2162,54,2270,62,"childN"],[2162,60,2270,68],[2162,61,2270,69],[2162,62,2270,70],[2163,10,2271,16],[2163,14,2271,20,"hasShadowRoot"],[2163,27,2271,33],[2163,28,2271,34,"n"],[2163,29,2271,35],[2163,30,2271,36],[2163,32,2271,38],[2164,12,2272,20,"n"],[2164,13,2272,21],[2164,14,2272,22,"shadowRoot"],[2164,24,2272,32],[2164,25,2272,33,"childNodes"],[2164,35,2272,43],[2164,36,2272,44,"forEach"],[2164,43,2272,51],[2164,44,2272,53,"childN"],[2164,50,2272,59],[2164,54,2272,64],[2165,14,2273,24],[2165,18,2273,28],[2165,19,2273,29,"processedNodeManager"],[2165,39,2273,49],[2165,40,2273,50,"add"],[2165,43,2273,53],[2165,44,2273,54,"childN"],[2165,50,2273,60],[2165,52,2273,62],[2165,56,2273,66],[2165,57,2273,67],[2166,14,2274,24],[2166,18,2274,28],[2166,19,2274,29,"genAdds"],[2166,26,2274,36],[2166,27,2274,37,"childN"],[2166,33,2274,43],[2166,35,2274,45,"n"],[2166,36,2274,46],[2166,37,2274,47],[2167,12,2275,20],[2167,13,2275,21],[2167,14,2275,22],[2168,10,2276,16],[2169,8,2277,12],[2170,6,2278,8],[2170,7,2278,9],[2171,4,2279,4],[2172,4,2280,4,"init"],[2172,8,2280,8,"init"],[2172,9,2280,9,"options"],[2172,16,2280,16],[2172,18,2280,18],[2173,6,2281,8],[2173,7,2282,12],[2173,19,2282,24],[2173,21,2283,12],[2173,33,2283,24],[2173,35,2284,12],[2173,50,2284,27],[2173,52,2285,12],[2173,69,2285,29],[2173,71,2286,12],[2173,84,2286,25],[2173,86,2287,12],[2173,101,2287,27],[2173,103,2288,12],[2173,120,2288,29],[2173,122,2289,12],[2173,140,2289,30],[2173,142,2290,12],[2173,162,2290,32],[2173,164,2291,12],[2173,182,2291,30],[2173,184,2292,12],[2173,202,2292,30],[2173,204,2293,12],[2173,221,2293,29],[2173,223,2294,12],[2173,235,2294,24],[2173,237,2295,12],[2173,250,2295,25],[2173,252,2296,12],[2173,269,2296,29],[2173,271,2297,12],[2173,285,2297,26],[2173,287,2298,12],[2173,301,2298,26],[2173,303,2299,12],[2173,319,2299,28],[2173,321,2300,12],[2173,337,2300,28],[2173,339,2301,12],[2173,344,2301,17],[2173,346,2302,12],[2173,354,2302,20],[2173,356,2303,12],[2173,371,2303,27],[2173,373,2304,12],[2173,392,2304,31],[2173,394,2305,12],[2173,412,2305,30],[2173,414,2306,12],[2173,429,2306,27],[2173,431,2307,12],[2173,453,2307,34],[2173,454,2308,9],[2173,455,2308,10,"forEach"],[2173,462,2308,17],[2173,463,2308,19,"key"],[2173,466,2308,22],[2173,470,2308,27],[2174,8,2309,12],[2174,12,2309,16],[2174,13,2309,17,"key"],[2174,16,2309,20],[2174,17,2309,21],[2174,20,2309,24,"options"],[2174,27,2309,31],[2174,28,2309,32,"key"],[2174,31,2309,35],[2174,32,2309,36],[2175,6,2310,8],[2175,7,2310,9],[2175,8,2310,10],[2176,4,2311,4],[2177,4,2312,4,"freeze"],[2177,10,2312,10,"freeze"],[2177,11,2312,10],[2177,13,2312,13],[2178,6,2313,8],[2178,10,2313,12],[2178,11,2313,13,"frozen"],[2178,17,2313,19],[2178,20,2313,22],[2178,24,2313,26],[2179,6,2314,8],[2179,10,2314,12],[2179,11,2314,13,"canvasManager"],[2179,24,2314,26],[2179,25,2314,27,"freeze"],[2179,31,2314,33],[2179,32,2314,34],[2179,33,2314,35],[2180,4,2315,4],[2181,4,2316,4,"unfreeze"],[2181,12,2316,12,"unfreeze"],[2181,13,2316,12],[2181,15,2316,15],[2182,6,2317,8],[2182,10,2317,12],[2182,11,2317,13,"frozen"],[2182,17,2317,19],[2182,20,2317,22],[2182,25,2317,27],[2183,6,2318,8],[2183,10,2318,12],[2183,11,2318,13,"canvasManager"],[2183,24,2318,26],[2183,25,2318,27,"unfreeze"],[2183,33,2318,35],[2183,34,2318,36],[2183,35,2318,37],[2184,6,2319,8],[2184,10,2319,12],[2184,11,2319,13,"emit"],[2184,15,2319,17],[2184,16,2319,18],[2184,17,2319,19],[2185,4,2320,4],[2186,4,2321,4,"isFrozen"],[2186,12,2321,12,"isFrozen"],[2186,13,2321,12],[2186,15,2321,15],[2187,6,2322,8],[2187,13,2322,15],[2187,17,2322,19],[2187,18,2322,20,"frozen"],[2187,24,2322,26],[2188,4,2323,4],[2189,4,2324,4,"lock"],[2189,8,2324,8,"lock"],[2189,9,2324,8],[2189,11,2324,11],[2190,6,2325,8],[2190,10,2325,12],[2190,11,2325,13,"locked"],[2190,17,2325,19],[2190,20,2325,22],[2190,24,2325,26],[2191,6,2326,8],[2191,10,2326,12],[2191,11,2326,13,"canvasManager"],[2191,24,2326,26],[2191,25,2326,27,"lock"],[2191,29,2326,31],[2191,30,2326,32],[2191,31,2326,33],[2192,4,2327,4],[2193,4,2328,4,"unlock"],[2193,10,2328,10,"unlock"],[2193,11,2328,10],[2193,13,2328,13],[2194,6,2329,8],[2194,10,2329,12],[2194,11,2329,13,"locked"],[2194,17,2329,19],[2194,20,2329,22],[2194,25,2329,27],[2195,6,2330,8],[2195,10,2330,12],[2195,11,2330,13,"canvasManager"],[2195,24,2330,26],[2195,25,2330,27,"unlock"],[2195,31,2330,33],[2195,32,2330,34],[2195,33,2330,35],[2196,6,2331,8],[2196,10,2331,12],[2196,11,2331,13,"emit"],[2196,15,2331,17],[2196,16,2331,18],[2196,17,2331,19],[2197,4,2332,4],[2198,4,2333,4,"reset"],[2198,9,2333,9,"reset"],[2198,10,2333,9],[2198,12,2333,12],[2199,6,2334,8],[2199,10,2334,12],[2199,11,2334,13,"shadowDomManager"],[2199,27,2334,29],[2199,28,2334,30,"reset"],[2199,33,2334,35],[2199,34,2334,36],[2199,35,2334,37],[2200,6,2335,8],[2200,10,2335,12],[2200,11,2335,13,"canvasManager"],[2200,24,2335,26],[2200,25,2335,27,"reset"],[2200,30,2335,32],[2200,31,2335,33],[2200,32,2335,34],[2201,4,2336,4],[2202,2,2337,0],[2203,2,2338,0],[2203,11,2338,9,"deepDelete"],[2203,21,2338,19,"deepDelete"],[2203,22,2338,20,"addsSet"],[2203,29,2338,27],[2203,31,2338,29,"n"],[2203,32,2338,30],[2203,34,2338,32],[2204,4,2339,4,"addsSet"],[2204,11,2339,11],[2204,12,2339,12,"delete"],[2204,18,2339,18],[2204,19,2339,19,"n"],[2204,20,2339,20],[2204,21,2339,21],[2205,4,2340,4,"n"],[2205,5,2340,5],[2205,6,2340,6,"childNodes"],[2205,16,2340,16],[2205,17,2340,17,"forEach"],[2205,24,2340,24],[2205,25,2340,26,"childN"],[2205,31,2340,32],[2205,35,2340,37,"deepDelete"],[2205,45,2340,47],[2205,46,2340,48,"addsSet"],[2205,53,2340,55],[2205,55,2340,57,"childN"],[2205,61,2340,63],[2205,62,2340,64],[2205,63,2340,65],[2206,2,2341,0],[2207,2,2342,0],[2207,11,2342,9,"isParentRemoved"],[2207,26,2342,24,"isParentRemoved"],[2207,27,2342,25,"removes"],[2207,34,2342,32],[2207,36,2342,34,"n"],[2207,37,2342,35],[2207,39,2342,37,"mirror"],[2207,45,2342,43],[2207,47,2342,45],[2208,4,2343,4],[2208,8,2343,8,"removes"],[2208,15,2343,15],[2208,16,2343,16,"length"],[2208,22,2343,22],[2208,27,2343,27],[2208,28,2343,28],[2208,30,2344,8],[2208,37,2344,15],[2208,42,2344,20],[2209,4,2345,4],[2209,11,2345,11,"_isParentRemoved"],[2209,27,2345,27],[2209,28,2345,28,"removes"],[2209,35,2345,35],[2209,37,2345,37,"n"],[2209,38,2345,38],[2209,40,2345,40,"mirror"],[2209,46,2345,46],[2209,47,2345,47],[2210,2,2346,0],[2211,2,2347,0],[2211,11,2347,9,"_isParentRemoved"],[2211,27,2347,25,"_isParentRemoved"],[2211,28,2347,26,"removes"],[2211,35,2347,33],[2211,37,2347,35,"n"],[2211,38,2347,36],[2211,40,2347,38,"mirror"],[2211,46,2347,44],[2211,48,2347,46],[2212,4,2348,4],[2212,8,2348,8,"node"],[2212,12,2348,12],[2212,15,2348,15,"n"],[2212,16,2348,16],[2212,17,2348,17,"parentNode"],[2212,27,2348,27],[2213,4,2349,4],[2213,11,2349,11,"node"],[2213,15,2349,15],[2213,17,2349,17],[2214,6,2350,8],[2214,12,2350,14,"parentId"],[2214,20,2350,22],[2214,23,2350,25,"mirror"],[2214,29,2350,31],[2214,30,2350,32,"getId"],[2214,35,2350,37],[2214,36,2350,38,"node"],[2214,40,2350,42],[2214,41,2350,43],[2215,6,2351,8],[2215,10,2351,12,"removes"],[2215,17,2351,19],[2215,18,2351,20,"some"],[2215,22,2351,24],[2215,23,2351,26,"r"],[2215,24,2351,27],[2215,28,2351,32,"r"],[2215,29,2351,33],[2215,30,2351,34,"id"],[2215,32,2351,36],[2215,37,2351,41,"parentId"],[2215,45,2351,49],[2215,46,2351,50],[2215,48,2351,52],[2216,8,2352,12],[2216,15,2352,19],[2216,19,2352,23],[2217,6,2353,8],[2218,6,2354,8,"node"],[2218,10,2354,12],[2218,13,2354,15,"node"],[2218,17,2354,19],[2218,18,2354,20,"parentNode"],[2218,28,2354,30],[2219,4,2355,4],[2220,4,2356,4],[2220,11,2356,11],[2220,16,2356,16],[2221,2,2357,0],[2222,2,2358,0],[2222,11,2358,9,"isAncestorInSet"],[2222,26,2358,24,"isAncestorInSet"],[2222,27,2358,25,"set"],[2222,30,2358,28],[2222,32,2358,30,"n"],[2222,33,2358,31],[2222,35,2358,33],[2223,4,2359,4],[2223,8,2359,8,"set"],[2223,11,2359,11],[2223,12,2359,12,"size"],[2223,16,2359,16],[2223,21,2359,21],[2223,22,2359,22],[2223,24,2360,8],[2223,31,2360,15],[2223,36,2360,20],[2224,4,2361,4],[2224,11,2361,11,"_isAncestorInSet"],[2224,27,2361,27],[2224,28,2361,28,"set"],[2224,31,2361,31],[2224,33,2361,33,"n"],[2224,34,2361,34],[2224,35,2361,35],[2225,2,2362,0],[2226,2,2363,0],[2226,11,2363,9,"_isAncestorInSet"],[2226,27,2363,25,"_isAncestorInSet"],[2226,28,2363,26,"set"],[2226,31,2363,29],[2226,33,2363,31,"n"],[2226,34,2363,32],[2226,36,2363,34],[2227,4,2364,4],[2227,10,2364,10],[2228,6,2364,12,"parentNode"],[2229,4,2364,23],[2229,5,2364,24],[2229,8,2364,27,"n"],[2229,9,2364,28],[2230,4,2365,4],[2230,8,2365,8],[2230,9,2365,9,"parentNode"],[2230,19,2365,19],[2230,21,2365,21],[2231,6,2366,8],[2231,13,2366,15],[2231,18,2366,20],[2232,4,2367,4],[2233,4,2368,4],[2233,8,2368,8,"set"],[2233,11,2368,11],[2233,12,2368,12,"has"],[2233,15,2368,15],[2233,16,2368,16,"parentNode"],[2233,26,2368,26],[2233,27,2368,27],[2233,29,2368,29],[2234,6,2369,8],[2234,13,2369,15],[2234,17,2369,19],[2235,4,2370,4],[2236,4,2371,4],[2236,11,2371,11,"_isAncestorInSet"],[2236,27,2371,27],[2236,28,2371,28,"set"],[2236,31,2371,31],[2236,33,2371,33,"parentNode"],[2236,43,2371,43],[2236,44,2371,44],[2237,2,2372,0],[2238,2,2374,0],[2238,6,2374,4,"errorHandler"],[2238,18,2374,16],[2239,2,2375,0],[2239,11,2375,9,"registerErrorHandler"],[2239,31,2375,29,"registerErrorHandler"],[2239,32,2375,30,"handler"],[2239,39,2375,37],[2239,41,2375,39],[2240,4,2376,4,"errorHandler"],[2240,16,2376,16],[2240,19,2376,19,"handler"],[2240,26,2376,26],[2241,2,2377,0],[2242,2,2378,0],[2242,11,2378,9,"unregisterErrorHandler"],[2242,33,2378,31,"unregisterErrorHandler"],[2242,34,2378,31],[2242,36,2378,34],[2243,4,2379,4,"errorHandler"],[2243,16,2379,16],[2243,19,2379,19,"undefined"],[2243,28,2379,28],[2244,2,2380,0],[2245,2,2381,0],[2245,8,2381,6,"callbackWrapper"],[2245,23,2381,21],[2245,26,2381,25,"cb"],[2245,28,2381,27],[2245,32,2381,32],[2246,4,2382,4],[2246,8,2382,8],[2246,9,2382,9,"errorHandler"],[2246,21,2382,21],[2246,23,2382,23],[2247,6,2383,8],[2247,13,2383,15,"cb"],[2247,15,2383,17],[2248,4,2384,4],[2249,4,2385,4],[2249,10,2385,10,"rrwebWrapped"],[2249,22,2385,22],[2249,25,2385,26,"rrwebWrapped"],[2249,26,2385,27],[2249,29,2385,30,"rest"],[2249,33,2385,34],[2249,38,2385,39],[2250,6,2386,8],[2250,10,2386,12],[2251,8,2387,12],[2251,15,2387,19,"cb"],[2251,17,2387,21],[2251,18,2387,22],[2251,21,2387,25,"rest"],[2251,25,2387,29],[2251,26,2387,30],[2252,6,2388,8],[2252,7,2388,9],[2252,8,2389,8],[2252,15,2389,15,"error"],[2252,20,2389,20],[2252,22,2389,22],[2253,8,2390,12],[2253,12,2390,16,"errorHandler"],[2253,24,2390,28],[2253,28,2390,32,"errorHandler"],[2253,40,2390,44],[2253,41,2390,45,"error"],[2253,46,2390,50],[2253,47,2390,51],[2253,52,2390,56],[2253,56,2390,60],[2253,58,2390,62],[2254,10,2391,16],[2254,17,2391,23],[2254,23,2391,29],[2254,24,2392,16],[2254,25,2392,17],[2255,8,2393,12],[2256,8,2394,12],[2256,14,2394,18,"error"],[2256,19,2394,23],[2257,6,2395,8],[2258,4,2396,4],[2258,5,2396,6],[2259,4,2397,4],[2259,11,2397,11,"rrwebWrapped"],[2259,23,2397,23],[2260,2,2398,0],[2260,3,2398,1],[2261,2,2400,0],[2261,11,2400,9,"_optionalChain$2"],[2261,27,2400,25,"_optionalChain$2"],[2261,28,2400,26,"ops"],[2261,31,2400,29],[2261,33,2400,31],[2262,4,2400,33],[2262,8,2400,37,"lastAccessLHS"],[2262,21,2400,50],[2262,24,2400,53,"undefined"],[2262,33,2400,62],[2263,4,2400,64],[2263,8,2400,68,"value"],[2263,13,2400,73],[2263,16,2400,76,"ops"],[2263,19,2400,79],[2263,20,2400,80],[2263,21,2400,81],[2263,22,2400,82],[2264,4,2400,84],[2264,8,2400,88,"i"],[2264,9,2400,89],[2264,12,2400,92],[2264,13,2400,93],[2265,4,2400,95],[2265,11,2400,102,"i"],[2265,12,2400,103],[2265,15,2400,106,"ops"],[2265,18,2400,109],[2265,19,2400,110,"length"],[2265,25,2400,116],[2265,27,2400,118],[2266,6,2400,120],[2266,12,2400,126,"op"],[2266,14,2400,128],[2266,17,2400,131,"ops"],[2266,20,2400,134],[2266,21,2400,135,"i"],[2266,22,2400,136],[2266,23,2400,137],[2267,6,2400,139],[2267,12,2400,145,"fn"],[2267,14,2400,147],[2267,17,2400,150,"ops"],[2267,20,2400,153],[2267,21,2400,154,"i"],[2267,22,2400,155],[2267,25,2400,158],[2267,26,2400,159],[2267,27,2400,160],[2268,6,2400,162,"i"],[2268,7,2400,163],[2268,11,2400,167],[2268,12,2400,168],[2269,6,2400,170],[2269,10,2400,174],[2269,11,2400,175,"op"],[2269,13,2400,177],[2269,18,2400,182],[2269,34,2400,198],[2269,38,2400,202,"op"],[2269,40,2400,204],[2269,45,2400,209],[2269,59,2400,223],[2269,64,2400,228,"value"],[2269,69,2400,233],[2269,73,2400,237],[2269,77,2400,241],[2269,79,2400,243],[2270,8,2400,245],[2270,15,2400,252,"undefined"],[2270,24,2400,261],[2271,6,2400,263],[2272,6,2400,265],[2272,10,2400,269,"op"],[2272,12,2400,271],[2272,17,2400,276],[2272,25,2400,284],[2272,29,2400,288,"op"],[2272,31,2400,290],[2272,36,2400,295],[2272,52,2400,311],[2272,54,2400,313],[2273,8,2400,315,"lastAccessLHS"],[2273,21,2400,328],[2273,24,2400,331,"value"],[2273,29,2400,336],[2274,8,2400,338,"value"],[2274,13,2400,343],[2274,16,2400,346,"fn"],[2274,18,2400,348],[2274,19,2400,349,"value"],[2274,24,2400,354],[2274,25,2400,355],[2275,6,2400,357],[2275,7,2400,358],[2275,13,2400,364],[2275,17,2400,368,"op"],[2275,19,2400,370],[2275,24,2400,375],[2275,30,2400,381],[2275,34,2400,385,"op"],[2275,36,2400,387],[2275,41,2400,392],[2275,55,2400,406],[2275,57,2400,408],[2276,8,2400,410,"value"],[2276,13,2400,415],[2276,16,2400,418,"fn"],[2276,18,2400,420],[2276,19,2400,421],[2276,20,2400,422],[2276,23,2400,425,"args"],[2276,27,2400,429],[2276,32,2400,434,"value"],[2276,37,2400,439],[2276,38,2400,440,"call"],[2276,42,2400,444],[2276,43,2400,445,"lastAccessLHS"],[2276,56,2400,458],[2276,58,2400,460],[2276,61,2400,463,"args"],[2276,65,2400,467],[2276,66,2400,468],[2276,67,2400,469],[2277,8,2400,471,"lastAccessLHS"],[2277,21,2400,484],[2277,24,2400,487,"undefined"],[2277,33,2400,496],[2278,6,2400,498],[2279,4,2400,500],[2280,4,2400,502],[2280,11,2400,509,"value"],[2280,16,2400,514],[2281,2,2400,516],[2282,2,2401,0],[2282,8,2401,6,"mutationBuffers"],[2282,23,2401,21],[2282,26,2401,24],[2282,28,2401,26],[2283,2,2402,0],[2283,11,2402,9,"getEventTarget"],[2283,25,2402,23,"getEventTarget"],[2283,26,2402,24,"event"],[2283,31,2402,29],[2283,33,2402,31],[2284,4,2403,4],[2284,8,2403,8],[2285,6,2404,8],[2285,10,2404,12],[2285,24,2404,26],[2285,28,2404,30,"event"],[2285,33,2404,35],[2285,35,2404,37],[2286,8,2405,12],[2286,14,2405,18,"path"],[2286,18,2405,22],[2286,21,2405,25,"event"],[2286,26,2405,30],[2286,27,2405,31,"composedPath"],[2286,39,2405,43],[2286,40,2405,44],[2286,41,2405,45],[2287,8,2406,12],[2287,12,2406,16,"path"],[2287,16,2406,20],[2287,17,2406,21,"length"],[2287,23,2406,27],[2287,25,2406,29],[2288,10,2407,16],[2288,17,2407,23,"path"],[2288,21,2407,27],[2288,22,2407,28],[2288,23,2407,29],[2288,24,2407,30],[2289,8,2408,12],[2290,6,2409,8],[2290,7,2409,9],[2290,13,2410,13],[2290,17,2410,17],[2290,23,2410,23],[2290,27,2410,27,"event"],[2290,32,2410,32],[2290,36,2410,36,"event"],[2290,41,2410,41],[2290,42,2410,42,"path"],[2290,46,2410,46],[2290,47,2410,47,"length"],[2290,53,2410,53],[2290,55,2410,55],[2291,8,2411,12],[2291,15,2411,19,"event"],[2291,20,2411,24],[2291,21,2411,25,"path"],[2291,25,2411,29],[2291,26,2411,30],[2291,27,2411,31],[2291,28,2411,32],[2292,6,2412,8],[2293,4,2413,4],[2293,5,2413,5],[2293,6,2414,4],[2293,13,2414,11,"e2"],[2293,15,2414,13],[2293,17,2414,15],[2293,18,2415,4],[2294,4,2416,4],[2294,11,2416,11,"event"],[2294,16,2416,16],[2294,20,2416,20,"event"],[2294,25,2416,25],[2294,26,2416,26,"target"],[2294,32,2416,32],[2295,2,2417,0],[2296,2,2418,0],[2296,11,2418,9,"initMutationObserver"],[2296,31,2418,29,"initMutationObserver"],[2296,32,2418,30,"options"],[2296,39,2418,37],[2296,41,2418,39,"rootEl"],[2296,47,2418,45],[2296,49,2418,47],[2297,4,2419,4],[2297,10,2419,10,"mutationBuffer"],[2297,24,2419,24],[2297,27,2419,27],[2297,31,2419,31,"MutationBuffer"],[2297,45,2419,45],[2297,46,2419,46],[2297,47,2419,47],[2298,4,2420,4,"mutationBuffers"],[2298,19,2420,19],[2298,20,2420,20,"push"],[2298,24,2420,24],[2298,25,2420,25,"mutationBuffer"],[2298,39,2420,39],[2298,40,2420,40],[2299,4,2421,4,"mutationBuffer"],[2299,18,2421,18],[2299,19,2421,19,"init"],[2299,23,2421,23],[2299,24,2421,24,"options"],[2299,31,2421,31],[2299,32,2421,32],[2300,4,2422,4],[2300,8,2422,8,"mutationObserverCtor"],[2300,28,2422,28],[2300,31,2422,31,"window"],[2300,37,2422,37],[2300,38,2422,38,"MutationObserver"],[2300,54,2422,54],[2300,58,2423,8,"window"],[2300,64,2423,14],[2300,65,2423,15,"__rrMutationObserver"],[2300,85,2423,35],[2301,4,2424,4],[2301,10,2424,10,"angularZoneSymbol"],[2301,27,2424,27],[2301,30,2424,30,"_optionalChain$2"],[2301,46,2424,46],[2301,47,2424,47],[2301,48,2424,48,"window"],[2301,54,2424,54],[2301,56,2424,56],[2301,72,2424,72],[2301,74,2424,74,"_"],[2301,75,2424,75],[2301,79,2424,79,"_"],[2301,80,2424,80],[2301,81,2424,81,"Zone"],[2301,85,2424,85],[2301,87,2424,87],[2301,103,2424,103],[2301,105,2424,105,"_2"],[2301,107,2424,107],[2301,111,2424,111,"_2"],[2301,113,2424,113],[2301,114,2424,114,"__symbol__"],[2301,124,2424,124],[2301,126,2424,126],[2301,140,2424,140],[2301,142,2424,142,"_3"],[2301,144,2424,144],[2301,148,2424,148,"_3"],[2301,150,2424,150],[2301,151,2424,151],[2301,169,2424,169],[2301,170,2424,170],[2301,171,2424,171],[2301,172,2424,172],[2302,4,2425,4],[2302,8,2425,8,"angularZoneSymbol"],[2302,25,2425,25],[2302,29,2426,8,"window"],[2302,35,2426,14],[2302,36,2426,15,"angularZoneSymbol"],[2302,53,2426,32],[2302,54,2426,33],[2302,56,2426,35],[2303,6,2427,8,"mutationObserverCtor"],[2303,26,2427,28],[2303,29,2427,31,"window"],[2303,35,2427,37],[2303,36,2427,38,"angularZoneSymbol"],[2303,53,2427,55],[2303,54,2427,56],[2304,4,2428,4],[2305,4,2429,4],[2305,10,2429,10,"observer"],[2305,18,2429,18],[2305,21,2429,21],[2305,25,2429,25,"mutationObserverCtor"],[2305,45,2429,45],[2305,46,2429,46,"callbackWrapper"],[2305,61,2429,61],[2305,62,2429,63,"mutations"],[2305,71,2429,72],[2305,75,2429,77],[2306,6,2430,8],[2306,10,2430,12,"options"],[2306,17,2430,19],[2306,18,2430,20,"onMutation"],[2306,28,2430,30],[2306,32,2430,34,"options"],[2306,39,2430,41],[2306,40,2430,42,"onMutation"],[2306,50,2430,52],[2306,51,2430,53,"mutations"],[2306,60,2430,62],[2306,61,2430,63],[2306,66,2430,68],[2306,71,2430,73],[2306,73,2430,75],[2307,8,2431,12],[2308,6,2432,8],[2309,6,2433,8,"mutationBuffer"],[2309,20,2433,22],[2309,21,2433,23,"processMutations"],[2309,37,2433,39],[2309,38,2433,40,"bind"],[2309,42,2433,44],[2309,43,2433,45,"mutationBuffer"],[2309,57,2433,59],[2309,58,2433,60],[2309,59,2433,61,"mutations"],[2309,68,2433,70],[2309,69,2433,71],[2310,4,2434,4],[2310,5,2434,5],[2310,6,2434,6],[2310,7,2434,7],[2311,4,2435,4,"observer"],[2311,12,2435,12],[2311,13,2435,13,"observe"],[2311,20,2435,20],[2311,21,2435,21,"rootEl"],[2311,27,2435,27],[2311,29,2435,29],[2312,6,2436,8,"attributes"],[2312,16,2436,18],[2312,18,2436,20],[2312,22,2436,24],[2313,6,2437,8,"attributeOldValue"],[2313,23,2437,25],[2313,25,2437,27],[2313,29,2437,31],[2314,6,2438,8,"characterData"],[2314,19,2438,21],[2314,21,2438,23],[2314,25,2438,27],[2315,6,2439,8,"characterDataOldValue"],[2315,27,2439,29],[2315,29,2439,31],[2315,33,2439,35],[2316,6,2440,8,"childList"],[2316,15,2440,17],[2316,17,2440,19],[2316,21,2440,23],[2317,6,2441,8,"subtree"],[2317,13,2441,15],[2317,15,2441,17],[2318,4,2442,4],[2318,5,2442,5],[2318,6,2442,6],[2319,4,2443,4],[2319,11,2443,11,"observer"],[2319,19,2443,19],[2320,2,2444,0],[2321,2,2445,0],[2321,11,2445,9,"initMoveObserver"],[2321,27,2445,25,"initMoveObserver"],[2321,28,2445,26],[2322,4,2445,28,"mousemoveCb"],[2322,15,2445,39],[2323,4,2445,41,"sampling"],[2323,12,2445,49],[2324,4,2445,51,"doc"],[2324,7,2445,54],[2325,4,2445,56,"mirror"],[2326,2,2445,64],[2326,3,2445,65],[2326,5,2445,67],[2327,4,2446,4],[2327,8,2446,8,"sampling"],[2327,16,2446,16],[2327,17,2446,17,"mousemove"],[2327,26,2446,26],[2327,31,2446,31],[2327,36,2446,36],[2327,38,2446,38],[2328,6,2447,8],[2328,13,2447,15],[2328,19,2447,21],[2328,20,2448,8],[2328,21,2448,9],[2329,4,2449,4],[2330,4,2450,4],[2330,10,2450,10,"threshold"],[2330,19,2450,19],[2330,22,2450,22],[2330,29,2450,29,"sampling"],[2330,37,2450,37],[2330,38,2450,38,"mousemove"],[2330,47,2450,47],[2330,52,2450,52],[2330,60,2450,60],[2330,63,2450,63,"sampling"],[2330,71,2450,71],[2330,72,2450,72,"mousemove"],[2330,81,2450,81],[2330,84,2450,84],[2330,86,2450,86],[2331,4,2451,4],[2331,10,2451,10,"callbackThreshold"],[2331,27,2451,27],[2331,30,2451,30],[2331,37,2451,37,"sampling"],[2331,45,2451,45],[2331,46,2451,46,"mousemoveCallback"],[2331,63,2451,63],[2331,68,2451,68],[2331,76,2451,76],[2331,79,2452,10,"sampling"],[2331,87,2452,18],[2331,88,2452,19,"mousemoveCallback"],[2331,105,2452,36],[2331,108,2453,10],[2331,111,2453,13],[2332,4,2454,4],[2332,8,2454,8,"positions"],[2332,17,2454,17],[2332,20,2454,20],[2332,22,2454,22],[2333,4,2455,4],[2333,8,2455,8,"timeBaseline"],[2333,20,2455,20],[2334,4,2456,4],[2334,10,2456,10,"wrappedCb"],[2334,19,2456,19],[2334,22,2456,22,"throttle$1"],[2334,32,2456,32],[2334,33,2456,33,"callbackWrapper"],[2334,48,2456,48],[2334,49,2456,50,"source"],[2334,55,2456,56],[2334,59,2456,61],[2335,6,2457,8],[2335,12,2457,14,"totalOffset"],[2335,23,2457,25],[2335,26,2457,28,"Date"],[2335,30,2457,32],[2335,31,2457,33,"now"],[2335,34,2457,36],[2335,35,2457,37],[2335,36,2457,38],[2335,39,2457,41,"timeBaseline"],[2335,51,2457,53],[2336,6,2458,8,"mousemoveCb"],[2336,17,2458,19],[2336,18,2458,20,"positions"],[2336,27,2458,29],[2336,28,2458,30,"map"],[2336,31,2458,33],[2336,32,2458,35,"p"],[2336,33,2458,36],[2336,37,2458,41],[2337,8,2459,12,"p"],[2337,9,2459,13],[2337,10,2459,14,"timeOffset"],[2337,20,2459,24],[2337,24,2459,28,"totalOffset"],[2337,35,2459,39],[2338,8,2460,12],[2338,15,2460,19,"p"],[2338,16,2460,20],[2339,6,2461,8],[2339,7,2461,9],[2339,8,2461,10],[2339,10,2461,12,"source"],[2339,16,2461,18],[2339,17,2461,19],[2340,6,2462,8,"positions"],[2340,15,2462,17],[2340,18,2462,20],[2340,20,2462,22],[2341,6,2463,8,"timeBaseline"],[2341,18,2463,20],[2341,21,2463,23],[2341,25,2463,27],[2342,4,2464,4],[2342,5,2464,5],[2342,6,2464,6],[2342,8,2464,8,"callbackThreshold"],[2342,25,2464,25],[2342,26,2464,26],[2343,4,2465,4],[2343,10,2465,10,"updatePosition"],[2343,24,2465,24],[2343,27,2465,27,"callbackWrapper"],[2343,42,2465,42],[2343,43,2465,43,"throttle$1"],[2343,53,2465,53],[2343,54,2465,54,"callbackWrapper"],[2343,69,2465,69],[2343,70,2465,71,"evt"],[2343,73,2465,74],[2343,77,2465,79],[2344,6,2466,8],[2344,12,2466,14,"target"],[2344,18,2466,20],[2344,21,2466,23,"getEventTarget"],[2344,35,2466,37],[2344,36,2466,38,"evt"],[2344,39,2466,41],[2344,40,2466,42],[2345,6,2467,8],[2345,12,2467,14],[2346,8,2467,16,"clientX"],[2346,15,2467,23],[2347,8,2467,25,"clientY"],[2348,6,2467,33],[2348,7,2467,34],[2348,10,2467,37,"legacy_isTouchEvent"],[2348,29,2467,56],[2348,30,2467,57,"evt"],[2348,33,2467,60],[2348,34,2467,61],[2348,37,2468,14,"evt"],[2348,40,2468,17],[2348,41,2468,18,"changedTouches"],[2348,55,2468,32],[2348,56,2468,33],[2348,57,2468,34],[2348,58,2468,35],[2348,61,2469,14,"evt"],[2348,64,2469,17],[2349,6,2470,8],[2349,10,2470,12],[2349,11,2470,13,"timeBaseline"],[2349,23,2470,25],[2349,25,2470,27],[2350,8,2471,12,"timeBaseline"],[2350,20,2471,24],[2350,23,2471,27,"nowTimestamp"],[2350,35,2471,39],[2350,36,2471,40],[2350,37,2471,41],[2351,6,2472,8],[2352,6,2473,8,"positions"],[2352,15,2473,17],[2352,16,2473,18,"push"],[2352,20,2473,22],[2352,21,2473,23],[2353,8,2474,12,"x"],[2353,9,2474,13],[2353,11,2474,15,"clientX"],[2353,18,2474,22],[2354,8,2475,12,"y"],[2354,9,2475,13],[2354,11,2475,15,"clientY"],[2354,18,2475,22],[2355,8,2476,12,"id"],[2355,10,2476,14],[2355,12,2476,16,"mirror"],[2355,18,2476,22],[2355,19,2476,23,"getId"],[2355,24,2476,28],[2355,25,2476,29,"target"],[2355,31,2476,35],[2355,32,2476,36],[2356,8,2477,12,"timeOffset"],[2356,18,2477,22],[2356,20,2477,24,"nowTimestamp"],[2356,32,2477,36],[2356,33,2477,37],[2356,34,2477,38],[2356,37,2477,41,"timeBaseline"],[2357,6,2478,8],[2357,7,2478,9],[2357,8,2478,10],[2358,6,2479,8,"wrappedCb"],[2358,15,2479,17],[2358,16,2479,18],[2358,23,2479,25,"DragEvent"],[2358,32,2479,34],[2358,37,2479,39],[2358,48,2479,50],[2358,52,2479,54,"evt"],[2358,55,2479,57],[2358,67,2479,69,"DragEvent"],[2358,76,2479,78],[2358,79,2480,14,"IncrementalSource"],[2358,96,2480,31],[2358,97,2480,32,"Drag"],[2358,101,2480,36],[2358,104,2481,14,"evt"],[2358,107,2481,17],[2358,119,2481,29,"MouseEvent"],[2358,129,2481,39],[2358,132,2482,18,"IncrementalSource"],[2358,149,2482,35],[2358,150,2482,36,"MouseMove"],[2358,159,2482,45],[2358,162,2483,18,"IncrementalSource"],[2358,179,2483,35],[2358,180,2483,36,"TouchMove"],[2358,189,2483,45],[2358,190,2483,46],[2359,4,2484,4],[2359,5,2484,5],[2359,6,2484,6],[2359,8,2484,8,"threshold"],[2359,17,2484,17],[2359,19,2484,19],[2360,6,2485,8,"trailing"],[2360,14,2485,16],[2360,16,2485,18],[2361,4,2486,4],[2361,5,2486,5],[2361,6,2486,6],[2361,7,2486,7],[2362,4,2487,4],[2362,10,2487,10,"handlers"],[2362,18,2487,18],[2362,21,2487,21],[2362,22,2488,8,"on"],[2362,24,2488,10],[2362,25,2488,11],[2362,36,2488,22],[2362,38,2488,24,"updatePosition"],[2362,52,2488,38],[2362,54,2488,40,"doc"],[2362,57,2488,43],[2362,58,2488,44],[2362,60,2489,8,"on"],[2362,62,2489,10],[2362,63,2489,11],[2362,74,2489,22],[2362,76,2489,24,"updatePosition"],[2362,90,2489,38],[2362,92,2489,40,"doc"],[2362,95,2489,43],[2362,96,2489,44],[2362,98,2490,8,"on"],[2362,100,2490,10],[2362,101,2490,11],[2362,107,2490,17],[2362,109,2490,19,"updatePosition"],[2362,123,2490,33],[2362,125,2490,35,"doc"],[2362,128,2490,38],[2362,129,2490,39],[2362,130,2491,5],[2363,4,2492,4],[2363,11,2492,11,"callbackWrapper"],[2363,26,2492,26],[2363,27,2492,27],[2363,33,2492,33],[2364,6,2493,8,"handlers"],[2364,14,2493,16],[2364,15,2493,17,"forEach"],[2364,22,2493,24],[2364,23,2493,26,"h"],[2364,24,2493,27],[2364,28,2493,32,"h"],[2364,29,2493,33],[2364,30,2493,34],[2364,31,2493,35],[2364,32,2493,36],[2365,4,2494,4],[2365,5,2494,5],[2365,6,2494,6],[2366,2,2495,0],[2367,2,2496,0],[2367,11,2496,9,"initMouseInteractionObserver"],[2367,39,2496,37,"initMouseInteractionObserver"],[2367,40,2496,38],[2368,4,2496,40,"mouseInteractionCb"],[2368,22,2496,58],[2369,4,2496,60,"doc"],[2369,7,2496,63],[2370,4,2496,65,"mirror"],[2370,10,2496,71],[2371,4,2496,73,"blockClass"],[2371,14,2496,83],[2372,4,2496,85,"blockSelector"],[2372,17,2496,98],[2373,4,2496,100,"unblockSelector"],[2373,19,2496,115],[2374,4,2496,117,"sampling"],[2375,2,2496,127],[2375,3,2496,128],[2375,5,2496,130],[2376,4,2497,4],[2376,8,2497,8,"sampling"],[2376,16,2497,16],[2376,17,2497,17,"mouseInteraction"],[2376,33,2497,33],[2376,38,2497,38],[2376,43,2497,43],[2376,45,2497,45],[2377,6,2498,8],[2377,13,2498,15],[2377,19,2498,21],[2377,20,2499,8],[2377,21,2499,9],[2378,4,2500,4],[2379,4,2501,4],[2379,10,2501,10,"disableMap"],[2379,20,2501,20],[2379,23,2501,23,"sampling"],[2379,31,2501,31],[2379,32,2501,32,"mouseInteraction"],[2379,48,2501,48],[2379,53,2501,53],[2379,57,2501,57],[2379,61,2502,8,"sampling"],[2379,69,2502,16],[2379,70,2502,17,"mouseInteraction"],[2379,86,2502,33],[2379,91,2502,38,"undefined"],[2379,100,2502,47],[2379,103,2503,10],[2379,104,2503,11],[2379,105,2503,12],[2379,108,2504,10,"sampling"],[2379,116,2504,18],[2379,117,2504,19,"mouseInteraction"],[2379,133,2504,35],[2380,4,2505,4],[2380,10,2505,10,"handlers"],[2380,18,2505,18],[2380,21,2505,21],[2380,23,2505,23],[2381,4,2506,4],[2381,8,2506,8,"currentPointerType"],[2381,26,2506,26],[2381,29,2506,29],[2381,33,2506,33],[2382,4,2507,4],[2382,10,2507,10,"getHandler"],[2382,20,2507,20],[2382,23,2507,24,"eventKey"],[2382,31,2507,32],[2382,35,2507,37],[2383,6,2508,8],[2383,13,2508,16,"event"],[2383,18,2508,21],[2383,22,2508,26],[2384,8,2509,12],[2384,14,2509,18,"target"],[2384,20,2509,24],[2384,23,2509,27,"getEventTarget"],[2384,37,2509,41],[2384,38,2509,42,"event"],[2384,43,2509,47],[2384,44,2509,48],[2385,8,2510,12],[2385,12,2510,16,"isBlocked"],[2385,21,2510,25],[2385,22,2510,26,"target"],[2385,28,2510,32],[2385,30,2510,34,"blockClass"],[2385,40,2510,44],[2385,42,2510,46,"blockSelector"],[2385,55,2510,59],[2385,57,2510,61,"unblockSelector"],[2385,72,2510,76],[2385,74,2510,78],[2385,78,2510,82],[2385,79,2510,83],[2385,81,2510,85],[2386,10,2511,16],[2387,8,2512,12],[2388,8,2513,12],[2388,12,2513,16,"pointerType"],[2388,23,2513,27],[2388,26,2513,30],[2388,30,2513,34],[2389,8,2514,12],[2389,12,2514,16,"thisEventKey"],[2389,24,2514,28],[2389,27,2514,31,"eventKey"],[2389,35,2514,39],[2390,8,2515,12],[2390,12,2515,16],[2390,25,2515,29],[2390,29,2515,33,"event"],[2390,34,2515,38],[2390,36,2515,40],[2391,10,2516,16],[2391,18,2516,24,"event"],[2391,23,2516,29],[2391,24,2516,30,"pointerType"],[2391,35,2516,41],[2392,12,2517,20],[2392,17,2517,25],[2392,24,2517,32],[2393,14,2518,24,"pointerType"],[2393,25,2518,35],[2393,28,2518,38,"PointerTypes"],[2393,40,2518,50],[2393,41,2518,51,"Mouse"],[2393,46,2518,56],[2394,14,2519,24],[2395,12,2520,20],[2395,17,2520,25],[2395,24,2520,32],[2396,14,2521,24,"pointerType"],[2396,25,2521,35],[2396,28,2521,38,"PointerTypes"],[2396,40,2521,50],[2396,41,2521,51,"Touch"],[2396,46,2521,56],[2397,14,2522,24],[2398,12,2523,20],[2398,17,2523,25],[2398,22,2523,30],[2399,14,2524,24,"pointerType"],[2399,25,2524,35],[2399,28,2524,38,"PointerTypes"],[2399,40,2524,50],[2399,41,2524,51,"Pen"],[2399,44,2524,54],[2400,14,2525,24],[2401,10,2526,16],[2402,10,2527,16],[2402,14,2527,20,"pointerType"],[2402,25,2527,31],[2402,30,2527,36,"PointerTypes"],[2402,42,2527,48],[2402,43,2527,49,"Touch"],[2402,48,2527,54],[2402,50,2527,56],[2403,12,2528,20],[2403,16,2528,24,"MouseInteractions"],[2403,33,2528,41],[2403,34,2528,42,"eventKey"],[2403,42,2528,50],[2403,43,2528,51],[2403,48,2528,56,"MouseInteractions"],[2403,65,2528,73],[2403,66,2528,74,"MouseDown"],[2403,75,2528,83],[2403,77,2528,85],[2404,14,2529,24,"thisEventKey"],[2404,26,2529,36],[2404,29,2529,39],[2404,41,2529,51],[2405,12,2530,20],[2405,13,2530,21],[2405,19,2531,25],[2405,23,2531,29,"MouseInteractions"],[2405,40,2531,46],[2405,41,2531,47,"eventKey"],[2405,49,2531,55],[2405,50,2531,56],[2405,55,2531,61,"MouseInteractions"],[2405,72,2531,78],[2405,73,2531,79,"MouseUp"],[2405,80,2531,86],[2405,82,2531,88],[2406,14,2532,24,"thisEventKey"],[2406,26,2532,36],[2406,29,2532,39],[2406,39,2532,49],[2407,12,2533,20],[2408,10,2534,16],[2408,11,2534,17],[2408,17,2535,21],[2408,21,2535,25,"pointerType"],[2408,32,2535,36],[2408,37,2535,41,"PointerTypes"],[2408,49,2535,53],[2408,50,2535,54,"Pen"],[2408,53,2535,57],[2408,55,2535,59],[2409,8,2536,12],[2409,9,2536,13],[2409,15,2537,17],[2409,19,2537,21,"legacy_isTouchEvent"],[2409,38,2537,40],[2409,39,2537,41,"event"],[2409,44,2537,46],[2409,45,2537,47],[2409,47,2537,49],[2410,10,2538,16,"pointerType"],[2410,21,2538,27],[2410,24,2538,30,"PointerTypes"],[2410,36,2538,42],[2410,37,2538,43,"Touch"],[2410,42,2538,48],[2411,8,2539,12],[2412,8,2540,12],[2412,12,2540,16,"pointerType"],[2412,23,2540,27],[2412,28,2540,32],[2412,32,2540,36],[2412,34,2540,38],[2413,10,2541,16,"currentPointerType"],[2413,28,2541,34],[2413,31,2541,37,"pointerType"],[2413,42,2541,48],[2414,10,2542,16],[2414,14,2542,21,"thisEventKey"],[2414,26,2542,33],[2414,27,2542,34,"startsWith"],[2414,37,2542,44],[2414,38,2542,45],[2414,45,2542,52],[2414,46,2542,53],[2414,50,2543,20,"pointerType"],[2414,61,2543,31],[2414,66,2543,36,"PointerTypes"],[2414,78,2543,48],[2414,79,2543,49,"Touch"],[2414,84,2543,54],[2414,88,2544,21,"thisEventKey"],[2414,100,2544,33],[2414,101,2544,34,"startsWith"],[2414,111,2544,44],[2414,112,2544,45],[2414,119,2544,52],[2414,120,2544,53],[2414,124,2545,24,"pointerType"],[2414,135,2545,35],[2414,140,2545,40,"PointerTypes"],[2414,152,2545,52],[2414,153,2545,53,"Mouse"],[2414,158,2545,59],[2414,160,2545,61],[2415,12,2546,20,"pointerType"],[2415,23,2546,31],[2415,26,2546,34],[2415,30,2546,38],[2416,10,2547,16],[2417,8,2548,12],[2417,9,2548,13],[2417,15,2549,17],[2417,19,2549,21,"MouseInteractions"],[2417,36,2549,38],[2417,37,2549,39,"eventKey"],[2417,45,2549,47],[2417,46,2549,48],[2417,51,2549,53,"MouseInteractions"],[2417,68,2549,70],[2417,69,2549,71,"Click"],[2417,74,2549,76],[2417,76,2549,78],[2418,10,2550,16,"pointerType"],[2418,21,2550,27],[2418,24,2550,30,"currentPointerType"],[2418,42,2550,48],[2419,10,2551,16,"currentPointerType"],[2419,28,2551,34],[2419,31,2551,37],[2419,35,2551,41],[2420,8,2552,12],[2421,8,2553,12],[2421,14,2553,18,"e"],[2421,15,2553,19],[2421,18,2553,22,"legacy_isTouchEvent"],[2421,37,2553,41],[2421,38,2553,42,"event"],[2421,43,2553,47],[2421,44,2553,48],[2421,47,2553,51,"event"],[2421,52,2553,56],[2421,53,2553,57,"changedTouches"],[2421,67,2553,71],[2421,68,2553,72],[2421,69,2553,73],[2421,70,2553,74],[2421,73,2553,77,"event"],[2421,78,2553,82],[2422,8,2554,12],[2422,12,2554,16],[2422,13,2554,17,"e"],[2422,14,2554,18],[2422,16,2554,20],[2423,10,2555,16],[2424,8,2556,12],[2425,8,2557,12],[2425,14,2557,18,"id"],[2425,16,2557,20],[2425,19,2557,23,"mirror"],[2425,25,2557,29],[2425,26,2557,30,"getId"],[2425,31,2557,35],[2425,32,2557,36,"target"],[2425,38,2557,42],[2425,39,2557,43],[2426,8,2558,12],[2426,14,2558,18],[2427,10,2558,20,"clientX"],[2427,17,2558,27],[2428,10,2558,29,"clientY"],[2429,8,2558,37],[2429,9,2558,38],[2429,12,2558,41,"e"],[2429,13,2558,42],[2430,8,2559,12,"callbackWrapper"],[2430,23,2559,27],[2430,24,2559,28,"mouseInteractionCb"],[2430,42,2559,46],[2430,43,2559,47],[2430,44,2559,48],[2431,10,2560,16,"type"],[2431,14,2560,20],[2431,16,2560,22,"MouseInteractions"],[2431,33,2560,39],[2431,34,2560,40,"thisEventKey"],[2431,46,2560,52],[2431,47,2560,53],[2432,10,2561,16,"id"],[2432,12,2561,18],[2433,10,2562,16,"x"],[2433,11,2562,17],[2433,13,2562,19,"clientX"],[2433,20,2562,26],[2434,10,2563,16,"y"],[2434,11,2563,17],[2434,13,2563,19,"clientY"],[2434,20,2563,26],[2435,10,2564,16],[2435,14,2564,20,"pointerType"],[2435,25,2564,31],[2435,30,2564,36],[2435,34,2564,40],[2435,38,2564,44],[2436,12,2564,46,"pointerType"],[2437,10,2564,58],[2437,11,2564,59],[2438,8,2565,12],[2438,9,2565,13],[2438,10,2565,14],[2439,6,2566,8],[2439,7,2566,9],[2440,4,2567,4],[2440,5,2567,5],[2441,4,2568,4,"Object"],[2441,10,2568,10],[2441,11,2568,11,"keys"],[2441,15,2568,15],[2441,16,2568,16,"MouseInteractions"],[2441,33,2568,33],[2441,34,2568,34],[2441,35,2569,9,"filter"],[2441,41,2569,15],[2441,42,2569,17,"key"],[2441,45,2569,20],[2441,49,2569,25,"Number"],[2441,55,2569,31],[2441,56,2569,32,"isNaN"],[2441,61,2569,37],[2441,62,2569,38,"Number"],[2441,68,2569,44],[2441,69,2569,45,"key"],[2441,72,2569,48],[2441,73,2569,49],[2441,74,2569,50],[2441,78,2570,8],[2441,79,2570,9,"key"],[2441,82,2570,12],[2441,83,2570,13,"endsWith"],[2441,91,2570,21],[2441,92,2570,22],[2441,103,2570,33],[2441,104,2570,34],[2441,108,2571,8,"disableMap"],[2441,118,2571,18],[2441,119,2571,19,"key"],[2441,122,2571,22],[2441,123,2571,23],[2441,128,2571,28],[2441,133,2571,33],[2441,134,2571,34],[2441,135,2572,9,"forEach"],[2441,142,2572,16],[2441,143,2572,18,"eventKey"],[2441,151,2572,26],[2441,155,2572,31],[2442,6,2573,8],[2442,10,2573,12,"eventName"],[2442,19,2573,21],[2442,22,2573,24,"toLowerCase"],[2442,33,2573,35],[2442,34,2573,36,"eventKey"],[2442,42,2573,44],[2442,43,2573,45],[2443,6,2574,8],[2443,12,2574,14,"handler"],[2443,19,2574,21],[2443,22,2574,24,"getHandler"],[2443,32,2574,34],[2443,33,2574,35,"eventKey"],[2443,41,2574,43],[2443,42,2574,44],[2444,6,2575,8],[2444,10,2575,12,"window"],[2444,16,2575,18],[2444,17,2575,19,"PointerEvent"],[2444,29,2575,31],[2444,31,2575,33],[2445,8,2576,12],[2445,16,2576,20,"MouseInteractions"],[2445,33,2576,37],[2445,34,2576,38,"eventKey"],[2445,42,2576,46],[2445,43,2576,47],[2446,10,2577,16],[2446,15,2577,21,"MouseInteractions"],[2446,32,2577,38],[2446,33,2577,39,"MouseDown"],[2446,42,2577,48],[2447,10,2578,16],[2447,15,2578,21,"MouseInteractions"],[2447,32,2578,38],[2447,33,2578,39,"MouseUp"],[2447,40,2578,46],[2448,12,2579,20,"eventName"],[2448,21,2579,29],[2448,24,2579,32,"eventName"],[2448,33,2579,41],[2448,34,2579,42,"replace"],[2448,41,2579,49],[2448,42,2579,50],[2448,49,2579,57],[2448,51,2579,59],[2448,60,2579,68],[2448,61,2579,69],[2449,12,2580,20],[2450,10,2581,16],[2450,15,2581,21,"MouseInteractions"],[2450,32,2581,38],[2450,33,2581,39,"TouchStart"],[2450,43,2581,49],[2451,10,2582,16],[2451,15,2582,21,"MouseInteractions"],[2451,32,2582,38],[2451,33,2582,39,"TouchEnd"],[2451,41,2582,47],[2452,12,2583,20],[2453,8,2584,12],[2454,6,2585,8],[2455,6,2586,8,"handlers"],[2455,14,2586,16],[2455,15,2586,17,"push"],[2455,19,2586,21],[2455,20,2586,22,"on"],[2455,22,2586,24],[2455,23,2586,25,"eventName"],[2455,32,2586,34],[2455,34,2586,36,"handler"],[2455,41,2586,43],[2455,43,2586,45,"doc"],[2455,46,2586,48],[2455,47,2586,49],[2455,48,2586,50],[2456,4,2587,4],[2456,5,2587,5],[2456,6,2587,6],[2457,4,2588,4],[2457,11,2588,11,"callbackWrapper"],[2457,26,2588,26],[2457,27,2588,27],[2457,33,2588,33],[2458,6,2589,8,"handlers"],[2458,14,2589,16],[2458,15,2589,17,"forEach"],[2458,22,2589,24],[2458,23,2589,26,"h"],[2458,24,2589,27],[2458,28,2589,32,"h"],[2458,29,2589,33],[2458,30,2589,34],[2458,31,2589,35],[2458,32,2589,36],[2459,4,2590,4],[2459,5,2590,5],[2459,6,2590,6],[2460,2,2591,0],[2461,2,2592,0],[2461,11,2592,9,"initScrollObserver"],[2461,29,2592,27,"initScrollObserver"],[2461,30,2592,28],[2462,4,2592,30,"scrollCb"],[2462,12,2592,38],[2463,4,2592,40,"doc"],[2463,7,2592,43],[2464,4,2592,45,"mirror"],[2464,10,2592,51],[2465,4,2592,53,"blockClass"],[2465,14,2592,63],[2466,4,2592,65,"blockSelector"],[2466,17,2592,78],[2467,4,2592,80,"unblockSelector"],[2467,19,2592,95],[2468,4,2592,97,"sampling"],[2469,2,2592,107],[2469,3,2592,108],[2469,5,2592,110],[2470,4,2593,4],[2470,10,2593,10,"updatePosition"],[2470,24,2593,24],[2470,27,2593,27,"callbackWrapper"],[2470,42,2593,42],[2470,43,2593,43,"throttle$1"],[2470,53,2593,53],[2470,54,2593,54,"callbackWrapper"],[2470,69,2593,69],[2470,70,2593,71,"evt"],[2470,73,2593,74],[2470,77,2593,79],[2471,6,2594,8],[2471,12,2594,14,"target"],[2471,18,2594,20],[2471,21,2594,23,"getEventTarget"],[2471,35,2594,37],[2471,36,2594,38,"evt"],[2471,39,2594,41],[2471,40,2594,42],[2472,6,2595,8],[2472,10,2595,12],[2472,11,2595,13,"target"],[2472,17,2595,19],[2472,21,2596,12,"isBlocked"],[2472,30,2596,21],[2472,31,2596,22,"target"],[2472,37,2596,28],[2472,39,2596,30,"blockClass"],[2472,49,2596,40],[2472,51,2596,42,"blockSelector"],[2472,64,2596,55],[2472,66,2596,57,"unblockSelector"],[2472,81,2596,72],[2472,83,2596,74],[2472,87,2596,78],[2472,88,2596,79],[2472,90,2596,81],[2473,8,2597,12],[2474,6,2598,8],[2475,6,2599,8],[2475,12,2599,14,"id"],[2475,14,2599,16],[2475,17,2599,19,"mirror"],[2475,23,2599,25],[2475,24,2599,26,"getId"],[2475,29,2599,31],[2475,30,2599,32,"target"],[2475,36,2599,38],[2475,37,2599,39],[2476,6,2600,8],[2476,10,2600,12,"target"],[2476,16,2600,18],[2476,21,2600,23,"doc"],[2476,24,2600,26],[2476,28,2600,30,"doc"],[2476,31,2600,33],[2476,32,2600,34,"defaultView"],[2476,43,2600,45],[2476,45,2600,47],[2477,8,2601,12],[2477,14,2601,18,"scrollLeftTop"],[2477,27,2601,31],[2477,30,2601,34,"getWindowScroll"],[2477,45,2601,49],[2477,46,2601,50,"doc"],[2477,49,2601,53],[2477,50,2601,54,"defaultView"],[2477,61,2601,65],[2477,62,2601,66],[2478,8,2602,12,"scrollCb"],[2478,16,2602,20],[2478,17,2602,21],[2479,10,2603,16,"id"],[2479,12,2603,18],[2480,10,2604,16,"x"],[2480,11,2604,17],[2480,13,2604,19,"scrollLeftTop"],[2480,26,2604,32],[2480,27,2604,33,"left"],[2480,31,2604,37],[2481,10,2605,16,"y"],[2481,11,2605,17],[2481,13,2605,19,"scrollLeftTop"],[2481,26,2605,32],[2481,27,2605,33,"top"],[2482,8,2606,12],[2482,9,2606,13],[2482,10,2606,14],[2483,6,2607,8],[2483,7,2607,9],[2483,13,2608,13],[2484,8,2609,12,"scrollCb"],[2484,16,2609,20],[2484,17,2609,21],[2485,10,2610,16,"id"],[2485,12,2610,18],[2486,10,2611,16,"x"],[2486,11,2611,17],[2486,13,2611,19,"target"],[2486,19,2611,25],[2486,20,2611,26,"scrollLeft"],[2486,30,2611,36],[2487,10,2612,16,"y"],[2487,11,2612,17],[2487,13,2612,19,"target"],[2487,19,2612,25],[2487,20,2612,26,"scrollTop"],[2488,8,2613,12],[2488,9,2613,13],[2488,10,2613,14],[2489,6,2614,8],[2490,4,2615,4],[2490,5,2615,5],[2490,6,2615,6],[2490,8,2615,8,"sampling"],[2490,16,2615,16],[2490,17,2615,17,"scroll"],[2490,23,2615,23],[2490,27,2615,27],[2490,30,2615,30],[2490,31,2615,31],[2490,32,2615,32],[2491,4,2616,4],[2491,11,2616,11,"on"],[2491,13,2616,13],[2491,14,2616,14],[2491,22,2616,22],[2491,24,2616,24,"updatePosition"],[2491,38,2616,38],[2491,40,2616,40,"doc"],[2491,43,2616,43],[2491,44,2616,44],[2492,2,2617,0],[2493,2,2618,0],[2493,11,2618,9,"initViewportResizeObserver"],[2493,37,2618,35,"initViewportResizeObserver"],[2493,38,2618,36],[2494,4,2618,38,"viewportResizeCb"],[2495,2,2618,55],[2495,3,2618,56],[2495,5,2618,58],[2496,4,2618,60,"win"],[2497,2,2618,64],[2497,3,2618,65],[2497,5,2618,67],[2498,4,2619,4],[2498,8,2619,8,"lastH"],[2498,13,2619,13],[2498,16,2619,16],[2498,17,2619,17],[2498,18,2619,18],[2499,4,2620,4],[2499,8,2620,8,"lastW"],[2499,13,2620,13],[2499,16,2620,16],[2499,17,2620,17],[2499,18,2620,18],[2500,4,2621,4],[2500,10,2621,10,"updateDimension"],[2500,25,2621,25],[2500,28,2621,28,"callbackWrapper"],[2500,43,2621,43],[2500,44,2621,44,"throttle$1"],[2500,54,2621,54],[2500,55,2621,55,"callbackWrapper"],[2500,70,2621,70],[2500,71,2621,71],[2500,77,2621,77],[2501,6,2622,8],[2501,12,2622,14,"height"],[2501,18,2622,20],[2501,21,2622,23,"getWindowHeight"],[2501,36,2622,38],[2501,37,2622,39],[2501,38,2622,40],[2502,6,2623,8],[2502,12,2623,14,"width"],[2502,17,2623,19],[2502,20,2623,22,"getWindowWidth"],[2502,34,2623,36],[2502,35,2623,37],[2502,36,2623,38],[2503,6,2624,8],[2503,10,2624,12,"lastH"],[2503,15,2624,17],[2503,20,2624,22,"height"],[2503,26,2624,28],[2503,30,2624,32,"lastW"],[2503,35,2624,37],[2503,40,2624,42,"width"],[2503,45,2624,47],[2503,47,2624,49],[2504,8,2625,12,"viewportResizeCb"],[2504,24,2625,28],[2504,25,2625,29],[2505,10,2626,16,"width"],[2505,15,2626,21],[2505,17,2626,23,"Number"],[2505,23,2626,29],[2505,24,2626,30,"width"],[2505,29,2626,35],[2505,30,2626,36],[2506,10,2627,16,"height"],[2506,16,2627,22],[2506,18,2627,24,"Number"],[2506,24,2627,30],[2506,25,2627,31,"height"],[2506,31,2627,37],[2507,8,2628,12],[2507,9,2628,13],[2507,10,2628,14],[2508,8,2629,12,"lastH"],[2508,13,2629,17],[2508,16,2629,20,"height"],[2508,22,2629,26],[2509,8,2630,12,"lastW"],[2509,13,2630,17],[2509,16,2630,20,"width"],[2509,21,2630,25],[2510,6,2631,8],[2511,4,2632,4],[2511,5,2632,5],[2511,6,2632,6],[2511,8,2632,8],[2511,11,2632,11],[2511,12,2632,12],[2511,13,2632,13],[2512,4,2633,4],[2512,11,2633,11,"on"],[2512,13,2633,13],[2512,14,2633,14],[2512,22,2633,22],[2512,24,2633,24,"updateDimension"],[2512,39,2633,39],[2512,41,2633,41,"win"],[2512,44,2633,44],[2512,45,2633,45],[2513,2,2634,0],[2514,2,2635,0],[2514,8,2635,6,"INPUT_TAGS"],[2514,18,2635,16],[2514,21,2635,19],[2514,22,2635,20],[2514,29,2635,27],[2514,31,2635,29],[2514,41,2635,39],[2514,43,2635,41],[2514,51,2635,49],[2514,52,2635,50],[2515,2,2636,0],[2515,8,2636,6,"lastInputValueMap"],[2515,25,2636,23],[2515,28,2636,26],[2515,32,2636,30,"WeakMap"],[2515,39,2636,37],[2515,40,2636,38],[2515,41,2636,39],[2516,2,2637,0],[2516,11,2637,9,"initInputObserver"],[2516,28,2637,26,"initInputObserver"],[2516,29,2637,27],[2517,4,2637,29,"inputCb"],[2517,11,2637,36],[2518,4,2637,38,"doc"],[2518,7,2637,41],[2519,4,2637,43,"mirror"],[2519,10,2637,49],[2520,4,2637,51,"blockClass"],[2520,14,2637,61],[2521,4,2637,63,"blockSelector"],[2521,17,2637,76],[2522,4,2637,78,"unblockSelector"],[2522,19,2637,93],[2523,4,2637,95,"ignoreClass"],[2523,15,2637,106],[2524,4,2637,108,"ignoreSelector"],[2524,18,2637,122],[2525,4,2637,124,"maskInputOptions"],[2525,20,2637,140],[2526,4,2637,142,"maskInputFn"],[2526,15,2637,153],[2527,4,2637,155,"sampling"],[2527,12,2637,163],[2528,4,2637,165,"userTriggeredOnInput"],[2528,24,2637,185],[2529,4,2637,187,"maskTextClass"],[2529,17,2637,200],[2530,4,2637,202,"unmaskTextClass"],[2530,19,2637,217],[2531,4,2637,219,"maskTextSelector"],[2531,20,2637,235],[2532,4,2637,237,"unmaskTextSelector"],[2533,2,2637,257],[2533,3,2637,258],[2533,5,2637,260],[2534,4,2638,4],[2534,13,2638,13,"eventHandler"],[2534,25,2638,25,"eventHandler"],[2534,26,2638,26,"event"],[2534,31,2638,31],[2534,33,2638,33],[2535,6,2639,8],[2535,10,2639,12,"target"],[2535,16,2639,18],[2535,19,2639,21,"getEventTarget"],[2535,33,2639,35],[2535,34,2639,36,"event"],[2535,39,2639,41],[2535,40,2639,42],[2536,6,2640,8],[2536,12,2640,14,"userTriggered"],[2536,25,2640,27],[2536,28,2640,30,"event"],[2536,33,2640,35],[2536,34,2640,36,"isTrusted"],[2536,43,2640,45],[2537,6,2641,8],[2537,12,2641,14,"tagName"],[2537,19,2641,21],[2537,22,2641,24,"target"],[2537,28,2641,30],[2537,32,2641,34,"toUpperCase"],[2537,43,2641,45],[2537,44,2641,46,"target"],[2537,50,2641,52],[2537,51,2641,53,"tagName"],[2537,58,2641,60],[2537,59,2641,61],[2538,6,2642,8],[2538,10,2642,12,"tagName"],[2538,17,2642,19],[2538,22,2642,24],[2538,30,2642,32],[2538,32,2643,12,"target"],[2538,38,2643,18],[2538,41,2643,21,"target"],[2538,47,2643,27],[2538,48,2643,28,"parentElement"],[2538,61,2643,41],[2539,6,2644,8],[2539,10,2644,12],[2539,11,2644,13,"target"],[2539,17,2644,19],[2539,21,2645,12],[2539,22,2645,13,"tagName"],[2539,29,2645,20],[2539,33,2646,12,"INPUT_TAGS"],[2539,43,2646,22],[2539,44,2646,23,"indexOf"],[2539,51,2646,30],[2539,52,2646,31,"tagName"],[2539,59,2646,38],[2539,60,2646,39],[2539,63,2646,42],[2539,64,2646,43],[2539,68,2647,12,"isBlocked"],[2539,77,2647,21],[2539,78,2647,22,"target"],[2539,84,2647,28],[2539,86,2647,30,"blockClass"],[2539,96,2647,40],[2539,98,2647,42,"blockSelector"],[2539,111,2647,55],[2539,113,2647,57,"unblockSelector"],[2539,128,2647,72],[2539,130,2647,74],[2539,134,2647,78],[2539,135,2647,79],[2539,137,2647,81],[2540,8,2648,12],[2541,6,2649,8],[2542,6,2650,8],[2542,12,2650,14,"el"],[2542,14,2650,16],[2542,17,2650,19,"target"],[2542,23,2650,25],[2543,6,2651,8],[2543,10,2651,12,"el"],[2543,12,2651,14],[2543,13,2651,15,"classList"],[2543,22,2651,24],[2543,23,2651,25,"contains"],[2543,31,2651,33],[2543,32,2651,34,"ignoreClass"],[2543,43,2651,45],[2543,44,2651,46],[2543,48,2652,13,"ignoreSelector"],[2543,62,2652,27],[2543,66,2652,31,"el"],[2543,68,2652,33],[2543,69,2652,34,"matches"],[2543,76,2652,41],[2543,77,2652,42,"ignoreSelector"],[2543,91,2652,56],[2543,92,2652,58],[2543,94,2652,60],[2544,8,2653,12],[2545,6,2654,8],[2546,6,2655,8],[2546,12,2655,14,"type"],[2546,16,2655,18],[2546,19,2655,21,"getInputType"],[2546,31,2655,33],[2546,32,2655,34,"target"],[2546,38,2655,40],[2546,39,2655,41],[2547,6,2656,8],[2547,10,2656,12,"text"],[2547,14,2656,16],[2547,17,2656,19,"getInputValue"],[2547,30,2656,32],[2547,31,2656,33,"el"],[2547,33,2656,35],[2547,35,2656,37,"tagName"],[2547,42,2656,44],[2547,44,2656,46,"type"],[2547,48,2656,50],[2547,49,2656,51],[2548,6,2657,8],[2548,10,2657,12,"isChecked"],[2548,19,2657,21],[2548,22,2657,24],[2548,27,2657,29],[2549,6,2658,8],[2549,12,2658,14,"isInputMasked"],[2549,25,2658,27],[2549,28,2658,30,"shouldMaskInput"],[2549,43,2658,45],[2549,44,2658,46],[2550,8,2659,12,"maskInputOptions"],[2550,24,2659,28],[2551,8,2660,12,"tagName"],[2551,15,2660,19],[2552,8,2661,12,"type"],[2553,6,2662,8],[2553,7,2662,9],[2553,8,2662,10],[2554,6,2663,8],[2554,12,2663,14,"forceMask"],[2554,21,2663,23],[2554,24,2663,26,"needMaskingText"],[2554,39,2663,41],[2554,40,2663,42,"target"],[2554,46,2663,48],[2554,48,2663,50,"maskTextClass"],[2554,61,2663,63],[2554,63,2663,65,"maskTextSelector"],[2554,79,2663,81],[2554,81,2663,83,"unmaskTextClass"],[2554,96,2663,98],[2554,98,2663,100,"unmaskTextSelector"],[2554,116,2663,118],[2554,118,2663,120,"isInputMasked"],[2554,131,2663,133],[2554,132,2663,134],[2555,6,2664,8],[2555,10,2664,12,"type"],[2555,14,2664,16],[2555,19,2664,21],[2555,26,2664,28],[2555,30,2664,32,"type"],[2555,34,2664,36],[2555,39,2664,41],[2555,49,2664,51],[2555,51,2664,53],[2556,8,2665,12,"isChecked"],[2556,17,2665,21],[2556,20,2665,24,"target"],[2556,26,2665,30],[2556,27,2665,31,"checked"],[2556,34,2665,38],[2557,6,2666,8],[2558,6,2667,8,"text"],[2558,10,2667,12],[2558,13,2667,15,"maskInputValue"],[2558,27,2667,29],[2558,28,2667,30],[2559,8,2668,12,"isMasked"],[2559,16,2668,20],[2559,18,2668,22,"forceMask"],[2559,27,2668,31],[2560,8,2669,12,"element"],[2560,15,2669,19],[2560,17,2669,21,"target"],[2560,23,2669,27],[2561,8,2670,12,"value"],[2561,13,2670,17],[2561,15,2670,19,"text"],[2561,19,2670,23],[2562,8,2671,12,"maskInputFn"],[2563,6,2672,8],[2563,7,2672,9],[2563,8,2672,10],[2564,6,2673,8,"cbWithDedup"],[2564,17,2673,19],[2564,18,2673,20,"target"],[2564,24,2673,26],[2564,26,2673,28,"userTriggeredOnInput"],[2564,46,2673,48],[2564,49,2674,14],[2565,8,2674,16,"text"],[2565,12,2674,20],[2566,8,2674,22,"isChecked"],[2566,17,2674,31],[2567,8,2674,33,"userTriggered"],[2568,6,2674,47],[2568,7,2674,48],[2568,10,2675,14],[2569,8,2675,16,"text"],[2569,12,2675,20],[2570,8,2675,22,"isChecked"],[2571,6,2675,32],[2571,7,2675,33],[2571,8,2675,34],[2572,6,2676,8],[2572,12,2676,14,"name"],[2572,16,2676,18],[2572,19,2676,21,"target"],[2572,25,2676,27],[2572,26,2676,28,"name"],[2572,30,2676,32],[2573,6,2677,8],[2573,10,2677,12,"type"],[2573,14,2677,16],[2573,19,2677,21],[2573,26,2677,28],[2573,30,2677,32,"name"],[2573,34,2677,36],[2573,38,2677,40,"isChecked"],[2573,47,2677,49],[2573,49,2677,51],[2574,8,2678,12,"doc"],[2574,11,2678,15],[2574,12,2679,17,"querySelectorAll"],[2574,28,2679,33],[2574,29,2679,34],[2574,58,2679,63,"name"],[2574,62,2679,67],[2574,66,2679,71],[2574,67,2679,72],[2574,68,2680,17,"forEach"],[2574,75,2680,24],[2574,76,2680,26,"el"],[2574,78,2680,28],[2574,82,2680,33],[2575,10,2681,16],[2575,14,2681,20,"el"],[2575,16,2681,22],[2575,21,2681,27,"target"],[2575,27,2681,33],[2575,29,2681,35],[2576,12,2682,20],[2576,18,2682,26,"text"],[2576,22,2682,30],[2576,25,2682,33,"maskInputValue"],[2576,39,2682,47],[2576,40,2682,48],[2577,14,2683,24,"isMasked"],[2577,22,2683,32],[2577,24,2683,34,"forceMask"],[2577,33,2683,43],[2578,14,2684,24,"element"],[2578,21,2684,31],[2578,23,2684,33,"el"],[2578,25,2684,35],[2579,14,2685,24,"value"],[2579,19,2685,29],[2579,21,2685,31,"getInputValue"],[2579,34,2685,44],[2579,35,2685,45,"el"],[2579,37,2685,47],[2579,39,2685,49,"tagName"],[2579,46,2685,56],[2579,48,2685,58,"type"],[2579,52,2685,62],[2579,53,2685,63],[2580,14,2686,24,"maskInputFn"],[2581,12,2687,20],[2581,13,2687,21],[2581,14,2687,22],[2582,12,2688,20,"cbWithDedup"],[2582,23,2688,31],[2582,24,2688,32,"el"],[2582,26,2688,34],[2582,28,2688,36,"userTriggeredOnInput"],[2582,48,2688,56],[2582,51,2689,26],[2583,14,2689,28,"text"],[2583,18,2689,32],[2584,14,2689,34,"isChecked"],[2584,23,2689,43],[2584,25,2689,45],[2584,26,2689,46,"isChecked"],[2584,35,2689,55],[2585,14,2689,57,"userTriggered"],[2585,27,2689,70],[2585,29,2689,72],[2586,12,2689,78],[2586,13,2689,79],[2586,16,2690,26],[2587,14,2690,28,"text"],[2587,18,2690,32],[2588,14,2690,34,"isChecked"],[2588,23,2690,43],[2588,25,2690,45],[2588,26,2690,46,"isChecked"],[2589,12,2690,56],[2589,13,2690,57],[2589,14,2690,58],[2590,10,2691,16],[2591,8,2692,12],[2591,9,2692,13],[2591,10,2692,14],[2592,6,2693,8],[2593,4,2694,4],[2594,4,2695,4],[2594,13,2695,13,"cbWithDedup"],[2594,24,2695,24,"cbWithDedup"],[2594,25,2695,25,"target"],[2594,31,2695,31],[2594,33,2695,33,"v"],[2594,34,2695,34],[2594,36,2695,36],[2595,6,2696,8],[2595,12,2696,14,"lastInputValue"],[2595,26,2696,28],[2595,29,2696,31,"lastInputValueMap"],[2595,46,2696,48],[2595,47,2696,49,"get"],[2595,50,2696,52],[2595,51,2696,53,"target"],[2595,57,2696,59],[2595,58,2696,60],[2596,6,2697,8],[2596,10,2697,12],[2596,11,2697,13,"lastInputValue"],[2596,25,2697,27],[2596,29,2698,12,"lastInputValue"],[2596,43,2698,26],[2596,44,2698,27,"text"],[2596,48,2698,31],[2596,53,2698,36,"v"],[2596,54,2698,37],[2596,55,2698,38,"text"],[2596,59,2698,42],[2596,63,2699,12,"lastInputValue"],[2596,77,2699,26],[2596,78,2699,27,"isChecked"],[2596,87,2699,36],[2596,92,2699,41,"v"],[2596,93,2699,42],[2596,94,2699,43,"isChecked"],[2596,103,2699,52],[2596,105,2699,54],[2597,8,2700,12,"lastInputValueMap"],[2597,25,2700,29],[2597,26,2700,30,"set"],[2597,29,2700,33],[2597,30,2700,34,"target"],[2597,36,2700,40],[2597,38,2700,42,"v"],[2597,39,2700,43],[2597,40,2700,44],[2598,8,2701,12],[2598,14,2701,18,"id"],[2598,16,2701,20],[2598,19,2701,23,"mirror"],[2598,25,2701,29],[2598,26,2701,30,"getId"],[2598,31,2701,35],[2598,32,2701,36,"target"],[2598,38,2701,42],[2598,39,2701,43],[2599,8,2702,12,"callbackWrapper"],[2599,23,2702,27],[2599,24,2702,28,"inputCb"],[2599,31,2702,35],[2599,32,2702,36],[2599,33,2702,37],[2600,10,2703,16],[2600,13,2703,19,"v"],[2600,14,2703,20],[2601,10,2704,16,"id"],[2602,8,2705,12],[2602,9,2705,13],[2602,10,2705,14],[2603,6,2706,8],[2604,4,2707,4],[2605,4,2708,4],[2605,10,2708,10,"events"],[2605,16,2708,16],[2605,19,2708,19,"sampling"],[2605,27,2708,27],[2605,28,2708,28,"input"],[2605,33,2708,33],[2605,38,2708,38],[2605,44,2708,44],[2605,47,2708,47],[2605,48,2708,48],[2605,56,2708,56],[2605,57,2708,57],[2605,60,2708,60],[2605,61,2708,61],[2605,68,2708,68],[2605,70,2708,70],[2605,78,2708,78],[2605,79,2708,79],[2606,4,2709,4],[2606,10,2709,10,"handlers"],[2606,18,2709,18],[2606,21,2709,21,"events"],[2606,27,2709,27],[2606,28,2709,28,"map"],[2606,31,2709,31],[2606,32,2709,33,"eventName"],[2606,41,2709,42],[2606,45,2709,47,"on"],[2606,47,2709,49],[2606,48,2709,50,"eventName"],[2606,57,2709,59],[2606,59,2709,61,"callbackWrapper"],[2606,74,2709,76],[2606,75,2709,77,"eventHandler"],[2606,87,2709,89],[2606,88,2709,90],[2606,90,2709,92,"doc"],[2606,93,2709,95],[2606,94,2709,96],[2606,95,2709,97],[2607,4,2710,4],[2607,10,2710,10,"currentWindow"],[2607,23,2710,23],[2607,26,2710,26,"doc"],[2607,29,2710,29],[2607,30,2710,30,"defaultView"],[2607,41,2710,41],[2608,4,2711,4],[2608,8,2711,8],[2608,9,2711,9,"currentWindow"],[2608,22,2711,22],[2608,24,2711,24],[2609,6,2712,8],[2609,13,2712,15],[2609,19,2712,21],[2610,8,2713,12,"handlers"],[2610,16,2713,20],[2610,17,2713,21,"forEach"],[2610,24,2713,28],[2610,25,2713,30,"h"],[2610,26,2713,31],[2610,30,2713,36,"h"],[2610,31,2713,37],[2610,32,2713,38],[2610,33,2713,39],[2610,34,2713,40],[2611,6,2714,8],[2611,7,2714,9],[2612,4,2715,4],[2613,4,2716,4],[2613,10,2716,10,"propertyDescriptor"],[2613,28,2716,28],[2613,31,2716,31,"currentWindow"],[2613,44,2716,44],[2613,45,2716,45,"Object"],[2613,51,2716,51],[2613,52,2716,52,"getOwnPropertyDescriptor"],[2613,76,2716,76],[2613,77,2716,77,"currentWindow"],[2613,90,2716,90],[2613,91,2716,91,"HTMLInputElement"],[2613,107,2716,107],[2613,108,2716,108,"prototype"],[2613,117,2716,117],[2613,119,2716,119],[2613,126,2716,126],[2613,127,2716,127],[2614,4,2717,4],[2614,10,2717,10,"hookProperties"],[2614,24,2717,24],[2614,27,2717,27],[2614,28,2718,8],[2614,29,2718,9,"currentWindow"],[2614,42,2718,22],[2614,43,2718,23,"HTMLInputElement"],[2614,59,2718,39],[2614,60,2718,40,"prototype"],[2614,69,2718,49],[2614,71,2718,51],[2614,78,2718,58],[2614,79,2718,59],[2614,81,2719,8],[2614,82,2719,9,"currentWindow"],[2614,95,2719,22],[2614,96,2719,23,"HTMLInputElement"],[2614,112,2719,39],[2614,113,2719,40,"prototype"],[2614,122,2719,49],[2614,124,2719,51],[2614,133,2719,60],[2614,134,2719,61],[2614,136,2720,8],[2614,137,2720,9,"currentWindow"],[2614,150,2720,22],[2614,151,2720,23,"HTMLSelectElement"],[2614,168,2720,40],[2614,169,2720,41,"prototype"],[2614,178,2720,50],[2614,180,2720,52],[2614,187,2720,59],[2614,188,2720,60],[2614,190,2721,8],[2614,191,2721,9,"currentWindow"],[2614,204,2721,22],[2614,205,2721,23,"HTMLTextAreaElement"],[2614,224,2721,42],[2614,225,2721,43,"prototype"],[2614,234,2721,52],[2614,236,2721,54],[2614,243,2721,61],[2614,244,2721,62],[2614,246,2722,8],[2614,247,2722,9,"currentWindow"],[2614,260,2722,22],[2614,261,2722,23,"HTMLSelectElement"],[2614,278,2722,40],[2614,279,2722,41,"prototype"],[2614,288,2722,50],[2614,290,2722,52],[2614,305,2722,67],[2614,306,2722,68],[2614,308,2723,8],[2614,309,2723,9,"currentWindow"],[2614,322,2723,22],[2614,323,2723,23,"HTMLOptionElement"],[2614,340,2723,40],[2614,341,2723,41,"prototype"],[2614,350,2723,50],[2614,352,2723,52],[2614,362,2723,62],[2614,363,2723,63],[2614,364,2724,5],[2615,4,2725,4],[2615,8,2725,8,"propertyDescriptor"],[2615,26,2725,26],[2615,30,2725,30,"propertyDescriptor"],[2615,48,2725,48],[2615,49,2725,49,"set"],[2615,52,2725,52],[2615,54,2725,54],[2616,6,2726,8,"handlers"],[2616,14,2726,16],[2616,15,2726,17,"push"],[2616,19,2726,21],[2616,20,2726,22],[2616,23,2726,25,"hookProperties"],[2616,37,2726,39],[2616,38,2726,40,"map"],[2616,41,2726,43],[2616,42,2726,45,"p"],[2616,43,2726,46],[2616,47,2726,51,"hookSetter"],[2616,57,2726,61],[2616,58,2726,62,"p"],[2616,59,2726,63],[2616,60,2726,64],[2616,61,2726,65],[2616,62,2726,66],[2616,64,2726,68,"p"],[2616,65,2726,69],[2616,66,2726,70],[2616,67,2726,71],[2616,68,2726,72],[2616,70,2726,74],[2617,8,2727,12,"set"],[2617,11,2727,15,"set"],[2617,12,2727,15],[2617,14,2727,18],[2618,10,2728,16,"callbackWrapper"],[2618,25,2728,31],[2618,26,2728,32,"eventHandler"],[2618,38,2728,44],[2618,39,2728,45],[2618,40,2728,46],[2619,12,2729,20,"target"],[2619,18,2729,26],[2619,20,2729,28],[2619,24,2729,32],[2620,12,2730,20,"isTrusted"],[2620,21,2730,29],[2620,23,2730,31],[2621,10,2731,16],[2621,11,2731,17],[2621,12,2731,18],[2622,8,2732,12],[2623,6,2733,8],[2623,7,2733,9],[2623,9,2733,11],[2623,14,2733,16],[2623,16,2733,18,"currentWindow"],[2623,29,2733,31],[2623,30,2733,32],[2623,31,2733,33],[2623,32,2733,34],[2624,4,2734,4],[2625,4,2735,4],[2625,11,2735,11,"callbackWrapper"],[2625,26,2735,26],[2625,27,2735,27],[2625,33,2735,33],[2626,6,2736,8,"handlers"],[2626,14,2736,16],[2626,15,2736,17,"forEach"],[2626,22,2736,24],[2626,23,2736,26,"h"],[2626,24,2736,27],[2626,28,2736,32,"h"],[2626,29,2736,33],[2626,30,2736,34],[2626,31,2736,35],[2626,32,2736,36],[2627,4,2737,4],[2627,5,2737,5],[2627,6,2737,6],[2628,2,2738,0],[2629,2,2739,0],[2629,11,2739,9,"getNestedCSSRulePositions"],[2629,36,2739,34,"getNestedCSSRulePositions"],[2629,37,2739,35,"rule"],[2629,41,2739,39],[2629,43,2739,41],[2630,4,2740,4],[2630,10,2740,10,"positions"],[2630,19,2740,19],[2630,22,2740,22],[2630,24,2740,24],[2631,4,2741,4],[2631,13,2741,13,"recurse"],[2631,20,2741,20,"recurse"],[2631,21,2741,21,"childRule"],[2631,30,2741,30],[2631,32,2741,32,"pos"],[2631,35,2741,35],[2631,37,2741,37],[2632,6,2742,8],[2632,10,2742,13,"hasNestedCSSRule"],[2632,26,2742,29],[2632,27,2742,30],[2632,44,2742,47],[2632,45,2742,48],[2632,49,2743,12,"childRule"],[2632,58,2743,21],[2632,59,2743,22,"parentRule"],[2632,69,2743,32],[2632,81,2743,44,"CSSGroupingRule"],[2632,96,2743,59],[2632,100,2744,13,"hasNestedCSSRule"],[2632,116,2744,29],[2632,117,2744,30],[2632,131,2744,44],[2632,132,2744,45],[2632,136,2745,16,"childRule"],[2632,145,2745,25],[2632,146,2745,26,"parentRule"],[2632,156,2745,36],[2632,168,2745,48,"CSSMediaRule"],[2632,180,2745,61],[2632,184,2746,13,"hasNestedCSSRule"],[2632,200,2746,29],[2632,201,2746,30],[2632,218,2746,47],[2632,219,2746,48],[2632,223,2747,16,"childRule"],[2632,232,2747,25],[2632,233,2747,26,"parentRule"],[2632,243,2747,36],[2632,255,2747,48,"CSSSupportsRule"],[2632,270,2747,64],[2632,274,2748,13,"hasNestedCSSRule"],[2632,290,2748,29],[2632,291,2748,30],[2632,309,2748,48],[2632,310,2748,49],[2632,314,2749,16,"childRule"],[2632,323,2749,25],[2632,324,2749,26,"parentRule"],[2632,334,2749,36],[2632,346,2749,48,"CSSConditionRule"],[2632,362,2749,65],[2632,364,2749,67],[2633,8,2750,12],[2633,14,2750,18,"rules"],[2633,19,2750,23],[2633,22,2750,26,"Array"],[2633,27,2750,31],[2633,28,2750,32,"from"],[2633,32,2750,36],[2633,33,2750,37,"childRule"],[2633,42,2750,46],[2633,43,2750,47,"parentRule"],[2633,53,2750,57],[2633,54,2750,58,"cssRules"],[2633,62,2750,66],[2633,63,2750,67],[2634,8,2751,12],[2634,14,2751,18,"index"],[2634,19,2751,23],[2634,22,2751,26,"rules"],[2634,27,2751,31],[2634,28,2751,32,"indexOf"],[2634,35,2751,39],[2634,36,2751,40,"childRule"],[2634,45,2751,49],[2634,46,2751,50],[2635,8,2752,12,"pos"],[2635,11,2752,15],[2635,12,2752,16,"unshift"],[2635,19,2752,23],[2635,20,2752,24,"index"],[2635,25,2752,29],[2635,26,2752,30],[2636,6,2753,8],[2636,7,2753,9],[2636,13,2754,13],[2636,17,2754,17,"childRule"],[2636,26,2754,26],[2636,27,2754,27,"parentStyleSheet"],[2636,43,2754,43],[2636,45,2754,45],[2637,8,2755,12],[2637,14,2755,18,"rules"],[2637,19,2755,23],[2637,22,2755,26,"Array"],[2637,27,2755,31],[2637,28,2755,32,"from"],[2637,32,2755,36],[2637,33,2755,37,"childRule"],[2637,42,2755,46],[2637,43,2755,47,"parentStyleSheet"],[2637,59,2755,63],[2637,60,2755,64,"cssRules"],[2637,68,2755,72],[2637,69,2755,73],[2638,8,2756,12],[2638,14,2756,18,"index"],[2638,19,2756,23],[2638,22,2756,26,"rules"],[2638,27,2756,31],[2638,28,2756,32,"indexOf"],[2638,35,2756,39],[2638,36,2756,40,"childRule"],[2638,45,2756,49],[2638,46,2756,50],[2639,8,2757,12,"pos"],[2639,11,2757,15],[2639,12,2757,16,"unshift"],[2639,19,2757,23],[2639,20,2757,24,"index"],[2639,25,2757,29],[2639,26,2757,30],[2640,6,2758,8],[2641,6,2759,8],[2641,13,2759,15,"pos"],[2641,16,2759,18],[2642,4,2760,4],[2643,4,2761,4],[2643,11,2761,11,"recurse"],[2643,18,2761,18],[2643,19,2761,19,"rule"],[2643,23,2761,23],[2643,25,2761,25,"positions"],[2643,34,2761,34],[2643,35,2761,35],[2644,2,2762,0],[2645,2,2763,0],[2645,11,2763,9,"getIdAndStyleId"],[2645,26,2763,24,"getIdAndStyleId"],[2645,27,2763,25,"sheet"],[2645,32,2763,30],[2645,34,2763,32,"mirror"],[2645,40,2763,38],[2645,42,2763,40,"styleMirror"],[2645,53,2763,51],[2645,55,2763,53],[2646,4,2764,4],[2646,8,2764,8,"id"],[2646,10,2764,10],[2646,12,2764,12,"styleId"],[2646,19,2764,19],[2647,4,2765,4],[2647,8,2765,8],[2647,9,2765,9,"sheet"],[2647,14,2765,14],[2647,16,2766,8],[2647,23,2766,15],[2647,24,2766,16],[2647,25,2766,17],[2648,4,2767,4],[2648,8,2767,8,"sheet"],[2648,13,2767,13],[2648,14,2767,14,"ownerNode"],[2648,23,2767,23],[2648,25,2768,8,"id"],[2648,27,2768,10],[2648,30,2768,13,"mirror"],[2648,36,2768,19],[2648,37,2768,20,"getId"],[2648,42,2768,25],[2648,43,2768,26,"sheet"],[2648,48,2768,31],[2648,49,2768,32,"ownerNode"],[2648,58,2768,41],[2648,59,2768,42],[2648,60,2768,43],[2648,65,2770,8,"styleId"],[2648,72,2770,15],[2648,75,2770,18,"styleMirror"],[2648,86,2770,29],[2648,87,2770,30,"getId"],[2648,92,2770,35],[2648,93,2770,36,"sheet"],[2648,98,2770,41],[2648,99,2770,42],[2649,4,2771,4],[2649,11,2771,11],[2650,6,2772,8,"styleId"],[2650,13,2772,15],[2651,6,2773,8,"id"],[2652,4,2774,4],[2652,5,2774,5],[2653,2,2775,0],[2654,2,2776,0],[2654,11,2776,9,"initStyleSheetObserver"],[2654,33,2776,31,"initStyleSheetObserver"],[2654,34,2776,32],[2655,4,2776,34,"styleSheetRuleCb"],[2655,20,2776,50],[2656,4,2776,52,"mirror"],[2656,10,2776,58],[2657,4,2776,60,"stylesheetManager"],[2658,2,2776,78],[2658,3,2776,79],[2658,5,2776,81],[2659,4,2776,83,"win"],[2660,2,2776,87],[2660,3,2776,88],[2660,5,2776,90],[2661,4,2777,4],[2661,8,2777,8],[2661,9,2777,9,"win"],[2661,12,2777,12],[2661,13,2777,13,"CSSStyleSheet"],[2661,26,2777,26],[2661,30,2777,30],[2661,31,2777,31,"win"],[2661,34,2777,34],[2661,35,2777,35,"CSSStyleSheet"],[2661,48,2777,48],[2661,49,2777,49,"prototype"],[2661,58,2777,58],[2661,60,2777,60],[2662,6,2778,8],[2662,13,2778,15],[2662,19,2778,21],[2662,20,2779,8],[2662,21,2779,9],[2663,4,2780,4],[2664,4,2781,4],[2664,10,2781,10,"insertRule"],[2664,20,2781,20],[2664,23,2781,23,"win"],[2664,26,2781,26],[2664,27,2781,27,"CSSStyleSheet"],[2664,40,2781,40],[2664,41,2781,41,"prototype"],[2664,50,2781,50],[2664,51,2781,51,"insertRule"],[2664,61,2781,61],[2665,4,2782,4,"win"],[2665,7,2782,7],[2665,8,2782,8,"CSSStyleSheet"],[2665,21,2782,21],[2665,22,2782,22,"prototype"],[2665,31,2782,31],[2665,32,2782,32,"insertRule"],[2665,42,2782,42],[2665,45,2782,45],[2665,49,2782,49,"Proxy"],[2665,54,2782,54],[2665,55,2782,55,"insertRule"],[2665,65,2782,65],[2665,67,2782,67],[2666,6,2783,8,"apply"],[2666,11,2783,13],[2666,13,2783,15,"callbackWrapper"],[2666,28,2783,30],[2666,29,2783,31],[2666,30,2783,32,"target"],[2666,36,2783,38],[2666,38,2783,40,"thisArg"],[2666,45,2783,47],[2666,47,2783,49,"argumentsList"],[2666,60,2783,62],[2666,65,2783,67],[2667,8,2784,12],[2667,14,2784,18],[2667,15,2784,19,"rule"],[2667,19,2784,23],[2667,21,2784,25,"index"],[2667,26,2784,30],[2667,27,2784,31],[2667,30,2784,34,"argumentsList"],[2667,43,2784,47],[2668,8,2785,12],[2668,14,2785,18],[2669,10,2785,20,"id"],[2669,12,2785,22],[2670,10,2785,24,"styleId"],[2671,8,2785,32],[2671,9,2785,33],[2671,12,2785,36,"getIdAndStyleId"],[2671,27,2785,51],[2671,28,2785,52,"thisArg"],[2671,35,2785,59],[2671,37,2785,61,"mirror"],[2671,43,2785,67],[2671,45,2785,69,"stylesheetManager"],[2671,62,2785,86],[2671,63,2785,87,"styleMirror"],[2671,74,2785,98],[2671,75,2785,99],[2672,8,2786,12],[2672,12,2786,17,"id"],[2672,14,2786,19],[2672,18,2786,23,"id"],[2672,20,2786,25],[2672,25,2786,30],[2672,26,2786,31],[2672,27,2786,32],[2672,31,2786,38,"styleId"],[2672,38,2786,45],[2672,42,2786,49,"styleId"],[2672,49,2786,56],[2672,54,2786,61],[2672,55,2786,62],[2672,56,2786,64],[2672,58,2786,66],[2673,10,2787,16,"styleSheetRuleCb"],[2673,26,2787,32],[2673,27,2787,33],[2674,12,2788,20,"id"],[2674,14,2788,22],[2675,12,2789,20,"styleId"],[2675,19,2789,27],[2676,12,2790,20,"adds"],[2676,16,2790,24],[2676,18,2790,26],[2676,19,2790,27],[2677,14,2790,29,"rule"],[2677,18,2790,33],[2678,14,2790,35,"index"],[2679,12,2790,41],[2679,13,2790,42],[2680,10,2791,16],[2680,11,2791,17],[2680,12,2791,18],[2681,8,2792,12],[2682,8,2793,12],[2682,15,2793,19,"target"],[2682,21,2793,25],[2682,22,2793,26,"apply"],[2682,27,2793,31],[2682,28,2793,32,"thisArg"],[2682,35,2793,39],[2682,37,2793,41,"argumentsList"],[2682,50,2793,54],[2682,51,2793,55],[2683,6,2794,8],[2683,7,2794,9],[2684,4,2795,4],[2684,5,2795,5],[2684,6,2795,6],[2685,4,2796,4],[2685,10,2796,10,"deleteRule"],[2685,20,2796,20],[2685,23,2796,23,"win"],[2685,26,2796,26],[2685,27,2796,27,"CSSStyleSheet"],[2685,40,2796,40],[2685,41,2796,41,"prototype"],[2685,50,2796,50],[2685,51,2796,51,"deleteRule"],[2685,61,2796,61],[2686,4,2797,4,"win"],[2686,7,2797,7],[2686,8,2797,8,"CSSStyleSheet"],[2686,21,2797,21],[2686,22,2797,22,"prototype"],[2686,31,2797,31],[2686,32,2797,32,"deleteRule"],[2686,42,2797,42],[2686,45,2797,45],[2686,49,2797,49,"Proxy"],[2686,54,2797,54],[2686,55,2797,55,"deleteRule"],[2686,65,2797,65],[2686,67,2797,67],[2687,6,2798,8,"apply"],[2687,11,2798,13],[2687,13,2798,15,"callbackWrapper"],[2687,28,2798,30],[2687,29,2798,31],[2687,30,2798,32,"target"],[2687,36,2798,38],[2687,38,2798,40,"thisArg"],[2687,45,2798,47],[2687,47,2798,49,"argumentsList"],[2687,60,2798,62],[2687,65,2798,67],[2688,8,2799,12],[2688,14,2799,18],[2688,15,2799,19,"index"],[2688,20,2799,24],[2688,21,2799,25],[2688,24,2799,28,"argumentsList"],[2688,37,2799,41],[2689,8,2800,12],[2689,14,2800,18],[2690,10,2800,20,"id"],[2690,12,2800,22],[2691,10,2800,24,"styleId"],[2692,8,2800,32],[2692,9,2800,33],[2692,12,2800,36,"getIdAndStyleId"],[2692,27,2800,51],[2692,28,2800,52,"thisArg"],[2692,35,2800,59],[2692,37,2800,61,"mirror"],[2692,43,2800,67],[2692,45,2800,69,"stylesheetManager"],[2692,62,2800,86],[2692,63,2800,87,"styleMirror"],[2692,74,2800,98],[2692,75,2800,99],[2693,8,2801,12],[2693,12,2801,17,"id"],[2693,14,2801,19],[2693,18,2801,23,"id"],[2693,20,2801,25],[2693,25,2801,30],[2693,26,2801,31],[2693,27,2801,32],[2693,31,2801,38,"styleId"],[2693,38,2801,45],[2693,42,2801,49,"styleId"],[2693,49,2801,56],[2693,54,2801,61],[2693,55,2801,62],[2693,56,2801,64],[2693,58,2801,66],[2694,10,2802,16,"styleSheetRuleCb"],[2694,26,2802,32],[2694,27,2802,33],[2695,12,2803,20,"id"],[2695,14,2803,22],[2696,12,2804,20,"styleId"],[2696,19,2804,27],[2697,12,2805,20,"removes"],[2697,19,2805,27],[2697,21,2805,29],[2697,22,2805,30],[2698,14,2805,32,"index"],[2699,12,2805,38],[2699,13,2805,39],[2700,10,2806,16],[2700,11,2806,17],[2700,12,2806,18],[2701,8,2807,12],[2702,8,2808,12],[2702,15,2808,19,"target"],[2702,21,2808,25],[2702,22,2808,26,"apply"],[2702,27,2808,31],[2702,28,2808,32,"thisArg"],[2702,35,2808,39],[2702,37,2808,41,"argumentsList"],[2702,50,2808,54],[2702,51,2808,55],[2703,6,2809,8],[2703,7,2809,9],[2704,4,2810,4],[2704,5,2810,5],[2704,6,2810,6],[2705,4,2811,4],[2705,8,2811,8,"replace"],[2705,15,2811,15],[2706,4,2812,4],[2706,8,2812,8,"win"],[2706,11,2812,11],[2706,12,2812,12,"CSSStyleSheet"],[2706,25,2812,25],[2706,26,2812,26,"prototype"],[2706,35,2812,35],[2706,36,2812,36,"replace"],[2706,43,2812,43],[2706,45,2812,45],[2707,6,2813,8,"replace"],[2707,13,2813,15],[2707,16,2813,18,"win"],[2707,19,2813,21],[2707,20,2813,22,"CSSStyleSheet"],[2707,33,2813,35],[2707,34,2813,36,"prototype"],[2707,43,2813,45],[2707,44,2813,46,"replace"],[2707,51,2813,53],[2708,6,2814,8,"win"],[2708,9,2814,11],[2708,10,2814,12,"CSSStyleSheet"],[2708,23,2814,25],[2708,24,2814,26,"prototype"],[2708,33,2814,35],[2708,34,2814,36,"replace"],[2708,41,2814,43],[2708,44,2814,46],[2708,48,2814,50,"Proxy"],[2708,53,2814,55],[2708,54,2814,56,"replace"],[2708,61,2814,63],[2708,63,2814,65],[2709,8,2815,12,"apply"],[2709,13,2815,17],[2709,15,2815,19,"callbackWrapper"],[2709,30,2815,34],[2709,31,2815,35],[2709,32,2815,36,"target"],[2709,38,2815,42],[2709,40,2815,44,"thisArg"],[2709,47,2815,51],[2709,49,2815,53,"argumentsList"],[2709,62,2815,66],[2709,67,2815,71],[2710,10,2816,16],[2710,16,2816,22],[2710,17,2816,23,"text"],[2710,21,2816,27],[2710,22,2816,28],[2710,25,2816,31,"argumentsList"],[2710,38,2816,44],[2711,10,2817,16],[2711,16,2817,22],[2712,12,2817,24,"id"],[2712,14,2817,26],[2713,12,2817,28,"styleId"],[2714,10,2817,36],[2714,11,2817,37],[2714,14,2817,40,"getIdAndStyleId"],[2714,29,2817,55],[2714,30,2817,56,"thisArg"],[2714,37,2817,63],[2714,39,2817,65,"mirror"],[2714,45,2817,71],[2714,47,2817,73,"stylesheetManager"],[2714,64,2817,90],[2714,65,2817,91,"styleMirror"],[2714,76,2817,102],[2714,77,2817,103],[2715,10,2818,16],[2715,14,2818,21,"id"],[2715,16,2818,23],[2715,20,2818,27,"id"],[2715,22,2818,29],[2715,27,2818,34],[2715,28,2818,35],[2715,29,2818,36],[2715,33,2818,42,"styleId"],[2715,40,2818,49],[2715,44,2818,53,"styleId"],[2715,51,2818,60],[2715,56,2818,65],[2715,57,2818,66],[2715,58,2818,68],[2715,60,2818,70],[2716,12,2819,20,"styleSheetRuleCb"],[2716,28,2819,36],[2716,29,2819,37],[2717,14,2820,24,"id"],[2717,16,2820,26],[2718,14,2821,24,"styleId"],[2718,21,2821,31],[2719,14,2822,24,"replace"],[2719,21,2822,31],[2719,23,2822,33,"text"],[2720,12,2823,20],[2720,13,2823,21],[2720,14,2823,22],[2721,10,2824,16],[2722,10,2825,16],[2722,17,2825,23,"target"],[2722,23,2825,29],[2722,24,2825,30,"apply"],[2722,29,2825,35],[2722,30,2825,36,"thisArg"],[2722,37,2825,43],[2722,39,2825,45,"argumentsList"],[2722,52,2825,58],[2722,53,2825,59],[2723,8,2826,12],[2723,9,2826,13],[2724,6,2827,8],[2724,7,2827,9],[2724,8,2827,10],[2725,4,2828,4],[2726,4,2829,4],[2726,8,2829,8,"replaceSync"],[2726,19,2829,19],[2727,4,2830,4],[2727,8,2830,8,"win"],[2727,11,2830,11],[2727,12,2830,12,"CSSStyleSheet"],[2727,25,2830,25],[2727,26,2830,26,"prototype"],[2727,35,2830,35],[2727,36,2830,36,"replaceSync"],[2727,47,2830,47],[2727,49,2830,49],[2728,6,2831,8,"replaceSync"],[2728,17,2831,19],[2728,20,2831,22,"win"],[2728,23,2831,25],[2728,24,2831,26,"CSSStyleSheet"],[2728,37,2831,39],[2728,38,2831,40,"prototype"],[2728,47,2831,49],[2728,48,2831,50,"replaceSync"],[2728,59,2831,61],[2729,6,2832,8,"win"],[2729,9,2832,11],[2729,10,2832,12,"CSSStyleSheet"],[2729,23,2832,25],[2729,24,2832,26,"prototype"],[2729,33,2832,35],[2729,34,2832,36,"replaceSync"],[2729,45,2832,47],[2729,48,2832,50],[2729,52,2832,54,"Proxy"],[2729,57,2832,59],[2729,58,2832,60,"replaceSync"],[2729,69,2832,71],[2729,71,2832,73],[2730,8,2833,12,"apply"],[2730,13,2833,17],[2730,15,2833,19,"callbackWrapper"],[2730,30,2833,34],[2730,31,2833,35],[2730,32,2833,36,"target"],[2730,38,2833,42],[2730,40,2833,44,"thisArg"],[2730,47,2833,51],[2730,49,2833,53,"argumentsList"],[2730,62,2833,66],[2730,67,2833,71],[2731,10,2834,16],[2731,16,2834,22],[2731,17,2834,23,"text"],[2731,21,2834,27],[2731,22,2834,28],[2731,25,2834,31,"argumentsList"],[2731,38,2834,44],[2732,10,2835,16],[2732,16,2835,22],[2733,12,2835,24,"id"],[2733,14,2835,26],[2734,12,2835,28,"styleId"],[2735,10,2835,36],[2735,11,2835,37],[2735,14,2835,40,"getIdAndStyleId"],[2735,29,2835,55],[2735,30,2835,56,"thisArg"],[2735,37,2835,63],[2735,39,2835,65,"mirror"],[2735,45,2835,71],[2735,47,2835,73,"stylesheetManager"],[2735,64,2835,90],[2735,65,2835,91,"styleMirror"],[2735,76,2835,102],[2735,77,2835,103],[2736,10,2836,16],[2736,14,2836,21,"id"],[2736,16,2836,23],[2736,20,2836,27,"id"],[2736,22,2836,29],[2736,27,2836,34],[2736,28,2836,35],[2736,29,2836,36],[2736,33,2836,42,"styleId"],[2736,40,2836,49],[2736,44,2836,53,"styleId"],[2736,51,2836,60],[2736,56,2836,65],[2736,57,2836,66],[2736,58,2836,68],[2736,60,2836,70],[2737,12,2837,20,"styleSheetRuleCb"],[2737,28,2837,36],[2737,29,2837,37],[2738,14,2838,24,"id"],[2738,16,2838,26],[2739,14,2839,24,"styleId"],[2739,21,2839,31],[2740,14,2840,24,"replaceSync"],[2740,25,2840,35],[2740,27,2840,37,"text"],[2741,12,2841,20],[2741,13,2841,21],[2741,14,2841,22],[2742,10,2842,16],[2743,10,2843,16],[2743,17,2843,23,"target"],[2743,23,2843,29],[2743,24,2843,30,"apply"],[2743,29,2843,35],[2743,30,2843,36,"thisArg"],[2743,37,2843,43],[2743,39,2843,45,"argumentsList"],[2743,52,2843,58],[2743,53,2843,59],[2744,8,2844,12],[2744,9,2844,13],[2745,6,2845,8],[2745,7,2845,9],[2745,8,2845,10],[2746,4,2846,4],[2747,4,2847,4],[2747,10,2847,10,"supportedNestedCSSRuleTypes"],[2747,37,2847,37],[2747,40,2847,40],[2747,41,2847,41],[2747,42,2847,42],[2748,4,2848,4],[2748,8,2848,8,"canMonkeyPatchNestedCSSRule"],[2748,35,2848,35],[2748,36,2848,36],[2748,53,2848,53],[2748,54,2848,54],[2748,56,2848,56],[2749,6,2849,8,"supportedNestedCSSRuleTypes"],[2749,33,2849,35],[2749,34,2849,36,"CSSGroupingRule"],[2749,49,2849,51],[2749,52,2849,54,"win"],[2749,55,2849,57],[2749,56,2849,58,"CSSGroupingRule"],[2749,71,2849,73],[2750,4,2850,4],[2750,5,2850,5],[2750,11,2851,9],[2751,6,2852,8],[2751,10,2852,12,"canMonkeyPatchNestedCSSRule"],[2751,37,2852,39],[2751,38,2852,40],[2751,52,2852,54],[2751,53,2852,55],[2751,55,2852,57],[2752,8,2853,12,"supportedNestedCSSRuleTypes"],[2752,35,2853,39],[2752,36,2853,40,"CSSMediaRule"],[2752,48,2853,52],[2752,51,2853,55,"win"],[2752,54,2853,58],[2752,55,2853,59,"CSSMediaRule"],[2752,67,2853,71],[2753,6,2854,8],[2754,6,2855,8],[2754,10,2855,12,"canMonkeyPatchNestedCSSRule"],[2754,37,2855,39],[2754,38,2855,40],[2754,56,2855,58],[2754,57,2855,59],[2754,59,2855,61],[2755,8,2856,12,"supportedNestedCSSRuleTypes"],[2755,35,2856,39],[2755,36,2856,40,"CSSConditionRule"],[2755,52,2856,56],[2755,55,2856,59,"win"],[2755,58,2856,62],[2755,59,2856,63,"CSSConditionRule"],[2755,75,2856,79],[2756,6,2857,8],[2757,6,2858,8],[2757,10,2858,12,"canMonkeyPatchNestedCSSRule"],[2757,37,2858,39],[2757,38,2858,40],[2757,55,2858,57],[2757,56,2858,58],[2757,58,2858,60],[2758,8,2859,12,"supportedNestedCSSRuleTypes"],[2758,35,2859,39],[2758,36,2859,40,"CSSSupportsRule"],[2758,51,2859,55],[2758,54,2859,58,"win"],[2758,57,2859,61],[2758,58,2859,62,"CSSSupportsRule"],[2758,73,2859,77],[2759,6,2860,8],[2760,4,2861,4],[2761,4,2862,4],[2761,10,2862,10,"unmodifiedFunctions"],[2761,29,2862,29],[2761,32,2862,32],[2761,33,2862,33],[2761,34,2862,34],[2762,4,2863,4,"Object"],[2762,10,2863,10],[2762,11,2863,11,"entries"],[2762,18,2863,18],[2762,19,2863,19,"supportedNestedCSSRuleTypes"],[2762,46,2863,46],[2762,47,2863,47],[2762,48,2863,48,"forEach"],[2762,55,2863,55],[2762,56,2863,56],[2762,57,2863,57],[2762,58,2863,58,"typeKey"],[2762,65,2863,65],[2762,67,2863,67,"type"],[2762,71,2863,71],[2762,72,2863,72],[2762,77,2863,77],[2763,6,2864,8,"unmodifiedFunctions"],[2763,25,2864,27],[2763,26,2864,28,"typeKey"],[2763,33,2864,35],[2763,34,2864,36],[2763,37,2864,39],[2764,8,2865,12,"insertRule"],[2764,18,2865,22],[2764,20,2865,24,"type"],[2764,24,2865,28],[2764,25,2865,29,"prototype"],[2764,34,2865,38],[2764,35,2865,39,"insertRule"],[2764,45,2865,49],[2765,8,2866,12,"deleteRule"],[2765,18,2866,22],[2765,20,2866,24,"type"],[2765,24,2866,28],[2765,25,2866,29,"prototype"],[2765,34,2866,38],[2765,35,2866,39,"deleteRule"],[2766,6,2867,8],[2766,7,2867,9],[2767,6,2868,8,"type"],[2767,10,2868,12],[2767,11,2868,13,"prototype"],[2767,20,2868,22],[2767,21,2868,23,"insertRule"],[2767,31,2868,33],[2767,34,2868,36],[2767,38,2868,40,"Proxy"],[2767,43,2868,45],[2767,44,2868,46,"unmodifiedFunctions"],[2767,63,2868,65],[2767,64,2868,66,"typeKey"],[2767,71,2868,73],[2767,72,2868,74],[2767,73,2868,75,"insertRule"],[2767,83,2868,85],[2767,85,2868,87],[2768,8,2869,12,"apply"],[2768,13,2869,17],[2768,15,2869,19,"callbackWrapper"],[2768,30,2869,34],[2768,31,2869,35],[2768,32,2869,36,"target"],[2768,38,2869,42],[2768,40,2869,44,"thisArg"],[2768,47,2869,51],[2768,49,2869,53,"argumentsList"],[2768,62,2869,66],[2768,67,2869,71],[2769,10,2870,16],[2769,16,2870,22],[2769,17,2870,23,"rule"],[2769,21,2870,27],[2769,23,2870,29,"index"],[2769,28,2870,34],[2769,29,2870,35],[2769,32,2870,38,"argumentsList"],[2769,45,2870,51],[2770,10,2871,16],[2770,16,2871,22],[2771,12,2871,24,"id"],[2771,14,2871,26],[2772,12,2871,28,"styleId"],[2773,10,2871,36],[2773,11,2871,37],[2773,14,2871,40,"getIdAndStyleId"],[2773,29,2871,55],[2773,30,2871,56,"thisArg"],[2773,37,2871,63],[2773,38,2871,64,"parentStyleSheet"],[2773,54,2871,80],[2773,56,2871,82,"mirror"],[2773,62,2871,88],[2773,64,2871,90,"stylesheetManager"],[2773,81,2871,107],[2773,82,2871,108,"styleMirror"],[2773,93,2871,119],[2773,94,2871,120],[2774,10,2872,16],[2774,14,2872,21,"id"],[2774,16,2872,23],[2774,20,2872,27,"id"],[2774,22,2872,29],[2774,27,2872,34],[2774,28,2872,35],[2774,29,2872,36],[2774,33,2872,42,"styleId"],[2774,40,2872,49],[2774,44,2872,53,"styleId"],[2774,51,2872,60],[2774,56,2872,65],[2774,57,2872,66],[2774,58,2872,68],[2774,60,2872,70],[2775,12,2873,20,"styleSheetRuleCb"],[2775,28,2873,36],[2775,29,2873,37],[2776,14,2874,24,"id"],[2776,16,2874,26],[2777,14,2875,24,"styleId"],[2777,21,2875,31],[2778,14,2876,24,"adds"],[2778,18,2876,28],[2778,20,2876,30],[2778,21,2877,28],[2779,16,2878,32,"rule"],[2779,20,2878,36],[2780,16,2879,32,"index"],[2780,21,2879,37],[2780,23,2879,39],[2780,24,2880,36],[2780,27,2880,39,"getNestedCSSRulePositions"],[2780,52,2880,64],[2780,53,2880,65,"thisArg"],[2780,60,2880,72],[2780,61,2880,73],[2780,63,2881,36,"index"],[2780,68,2881,41],[2780,72,2881,45],[2780,73,2881,46],[2781,14,2883,28],[2781,15,2883,29],[2782,12,2885,20],[2782,13,2885,21],[2782,14,2885,22],[2783,10,2886,16],[2784,10,2887,16],[2784,17,2887,23,"target"],[2784,23,2887,29],[2784,24,2887,30,"apply"],[2784,29,2887,35],[2784,30,2887,36,"thisArg"],[2784,37,2887,43],[2784,39,2887,45,"argumentsList"],[2784,52,2887,58],[2784,53,2887,59],[2785,8,2888,12],[2785,9,2888,13],[2786,6,2889,8],[2786,7,2889,9],[2786,8,2889,10],[2787,6,2890,8,"type"],[2787,10,2890,12],[2787,11,2890,13,"prototype"],[2787,20,2890,22],[2787,21,2890,23,"deleteRule"],[2787,31,2890,33],[2787,34,2890,36],[2787,38,2890,40,"Proxy"],[2787,43,2890,45],[2787,44,2890,46,"unmodifiedFunctions"],[2787,63,2890,65],[2787,64,2890,66,"typeKey"],[2787,71,2890,73],[2787,72,2890,74],[2787,73,2890,75,"deleteRule"],[2787,83,2890,85],[2787,85,2890,87],[2788,8,2891,12,"apply"],[2788,13,2891,17],[2788,15,2891,19,"callbackWrapper"],[2788,30,2891,34],[2788,31,2891,35],[2788,32,2891,36,"target"],[2788,38,2891,42],[2788,40,2891,44,"thisArg"],[2788,47,2891,51],[2788,49,2891,53,"argumentsList"],[2788,62,2891,66],[2788,67,2891,71],[2789,10,2892,16],[2789,16,2892,22],[2789,17,2892,23,"index"],[2789,22,2892,28],[2789,23,2892,29],[2789,26,2892,32,"argumentsList"],[2789,39,2892,45],[2790,10,2893,16],[2790,16,2893,22],[2791,12,2893,24,"id"],[2791,14,2893,26],[2792,12,2893,28,"styleId"],[2793,10,2893,36],[2793,11,2893,37],[2793,14,2893,40,"getIdAndStyleId"],[2793,29,2893,55],[2793,30,2893,56,"thisArg"],[2793,37,2893,63],[2793,38,2893,64,"parentStyleSheet"],[2793,54,2893,80],[2793,56,2893,82,"mirror"],[2793,62,2893,88],[2793,64,2893,90,"stylesheetManager"],[2793,81,2893,107],[2793,82,2893,108,"styleMirror"],[2793,93,2893,119],[2793,94,2893,120],[2794,10,2894,16],[2794,14,2894,21,"id"],[2794,16,2894,23],[2794,20,2894,27,"id"],[2794,22,2894,29],[2794,27,2894,34],[2794,28,2894,35],[2794,29,2894,36],[2794,33,2894,42,"styleId"],[2794,40,2894,49],[2794,44,2894,53,"styleId"],[2794,51,2894,60],[2794,56,2894,65],[2794,57,2894,66],[2794,58,2894,68],[2794,60,2894,70],[2795,12,2895,20,"styleSheetRuleCb"],[2795,28,2895,36],[2795,29,2895,37],[2796,14,2896,24,"id"],[2796,16,2896,26],[2797,14,2897,24,"styleId"],[2797,21,2897,31],[2798,14,2898,24,"removes"],[2798,21,2898,31],[2798,23,2898,33],[2798,24,2899,28],[2799,16,2899,30,"index"],[2799,21,2899,35],[2799,23,2899,37],[2799,24,2899,38],[2799,27,2899,41,"getNestedCSSRulePositions"],[2799,52,2899,66],[2799,53,2899,67,"thisArg"],[2799,60,2899,74],[2799,61,2899,75],[2799,63,2899,77,"index"],[2799,68,2899,82],[2800,14,2899,84],[2800,15,2899,85],[2801,12,2901,20],[2801,13,2901,21],[2801,14,2901,22],[2802,10,2902,16],[2803,10,2903,16],[2803,17,2903,23,"target"],[2803,23,2903,29],[2803,24,2903,30,"apply"],[2803,29,2903,35],[2803,30,2903,36,"thisArg"],[2803,37,2903,43],[2803,39,2903,45,"argumentsList"],[2803,52,2903,58],[2803,53,2903,59],[2804,8,2904,12],[2804,9,2904,13],[2805,6,2905,8],[2805,7,2905,9],[2805,8,2905,10],[2806,4,2906,4],[2806,5,2906,5],[2806,6,2906,6],[2807,4,2907,4],[2807,11,2907,11,"callbackWrapper"],[2807,26,2907,26],[2807,27,2907,27],[2807,33,2907,33],[2808,6,2908,8,"win"],[2808,9,2908,11],[2808,10,2908,12,"CSSStyleSheet"],[2808,23,2908,25],[2808,24,2908,26,"prototype"],[2808,33,2908,35],[2808,34,2908,36,"insertRule"],[2808,44,2908,46],[2808,47,2908,49,"insertRule"],[2808,57,2908,59],[2809,6,2909,8,"win"],[2809,9,2909,11],[2809,10,2909,12,"CSSStyleSheet"],[2809,23,2909,25],[2809,24,2909,26,"prototype"],[2809,33,2909,35],[2809,34,2909,36,"deleteRule"],[2809,44,2909,46],[2809,47,2909,49,"deleteRule"],[2809,57,2909,59],[2810,6,2910,8,"replace"],[2810,13,2910,15],[2810,18,2910,20,"win"],[2810,21,2910,23],[2810,22,2910,24,"CSSStyleSheet"],[2810,35,2910,37],[2810,36,2910,38,"prototype"],[2810,45,2910,47],[2810,46,2910,48,"replace"],[2810,53,2910,55],[2810,56,2910,58,"replace"],[2810,63,2910,65],[2810,64,2910,66],[2811,6,2911,8,"replaceSync"],[2811,17,2911,19],[2811,22,2911,24,"win"],[2811,25,2911,27],[2811,26,2911,28,"CSSStyleSheet"],[2811,39,2911,41],[2811,40,2911,42,"prototype"],[2811,49,2911,51],[2811,50,2911,52,"replaceSync"],[2811,61,2911,63],[2811,64,2911,66,"replaceSync"],[2811,75,2911,77],[2811,76,2911,78],[2812,6,2912,8,"Object"],[2812,12,2912,14],[2812,13,2912,15,"entries"],[2812,20,2912,22],[2812,21,2912,23,"supportedNestedCSSRuleTypes"],[2812,48,2912,50],[2812,49,2912,51],[2812,50,2912,52,"forEach"],[2812,57,2912,59],[2812,58,2912,60],[2812,59,2912,61],[2812,60,2912,62,"typeKey"],[2812,67,2912,69],[2812,69,2912,71,"type"],[2812,73,2912,75],[2812,74,2912,76],[2812,79,2912,81],[2813,8,2913,12,"type"],[2813,12,2913,16],[2813,13,2913,17,"prototype"],[2813,22,2913,26],[2813,23,2913,27,"insertRule"],[2813,33,2913,37],[2813,36,2913,40,"unmodifiedFunctions"],[2813,55,2913,59],[2813,56,2913,60,"typeKey"],[2813,63,2913,67],[2813,64,2913,68],[2813,65,2913,69,"insertRule"],[2813,75,2913,79],[2814,8,2914,12,"type"],[2814,12,2914,16],[2814,13,2914,17,"prototype"],[2814,22,2914,26],[2814,23,2914,27,"deleteRule"],[2814,33,2914,37],[2814,36,2914,40,"unmodifiedFunctions"],[2814,55,2914,59],[2814,56,2914,60,"typeKey"],[2814,63,2914,67],[2814,64,2914,68],[2814,65,2914,69,"deleteRule"],[2814,75,2914,79],[2815,6,2915,8],[2815,7,2915,9],[2815,8,2915,10],[2816,4,2916,4],[2816,5,2916,5],[2816,6,2916,6],[2817,2,2917,0],[2818,2,2918,0],[2818,11,2918,9,"initAdoptedStyleSheetObserver"],[2818,40,2918,38,"initAdoptedStyleSheetObserver"],[2818,41,2918,39],[2819,4,2918,41,"mirror"],[2819,10,2918,47],[2820,4,2918,49,"stylesheetManager"],[2821,2,2918,68],[2821,3,2918,69],[2821,5,2918,71,"host"],[2821,9,2918,75],[2821,11,2918,77],[2822,4,2919,4],[2822,8,2919,8,"hostId"],[2822,14,2919,14],[2822,17,2919,17],[2822,21,2919,21],[2823,4,2920,4],[2823,8,2920,8,"host"],[2823,12,2920,12],[2823,13,2920,13,"nodeName"],[2823,21,2920,21],[2823,26,2920,26],[2823,37,2920,37],[2823,39,2921,8,"hostId"],[2823,45,2921,14],[2823,48,2921,17,"mirror"],[2823,54,2921,23],[2823,55,2921,24,"getId"],[2823,60,2921,29],[2823,61,2921,30,"host"],[2823,65,2921,34],[2823,66,2921,35],[2823,67,2921,36],[2823,72,2923,8,"hostId"],[2823,78,2923,14],[2823,81,2923,17,"mirror"],[2823,87,2923,23],[2823,88,2923,24,"getId"],[2823,93,2923,29],[2823,94,2923,30,"host"],[2823,98,2923,34],[2823,99,2923,35,"host"],[2823,103,2923,39],[2823,104,2923,40],[2824,4,2924,4],[2824,10,2924,10,"patchTarget"],[2824,21,2924,21],[2824,24,2924,24,"host"],[2824,28,2924,28],[2824,29,2924,29,"nodeName"],[2824,37,2924,37],[2824,42,2924,42],[2824,53,2924,53],[2824,56,2925,10,"_optionalChain$2"],[2824,72,2925,26],[2824,73,2925,27],[2824,74,2925,28,"host"],[2824,78,2925,32],[2824,80,2925,34],[2824,88,2925,42],[2824,90,2925,44,"_4"],[2824,92,2925,46],[2824,96,2925,50,"_4"],[2824,98,2925,52],[2824,99,2925,53,"defaultView"],[2824,110,2925,64],[2824,112,2925,66],[2824,128,2925,82],[2824,130,2925,84,"_5"],[2824,132,2925,86],[2824,136,2925,90,"_5"],[2824,138,2925,92],[2824,139,2925,93,"Document"],[2824,147,2925,101],[2824,148,2925,102],[2824,149,2925,103],[2824,152,2926,10,"_optionalChain$2"],[2824,168,2926,26],[2824,169,2926,27],[2824,170,2926,28,"host"],[2824,174,2926,32],[2824,176,2926,34],[2824,184,2926,42],[2824,186,2926,44,"_6"],[2824,188,2926,46],[2824,192,2926,50,"_6"],[2824,194,2926,52],[2824,195,2926,53,"ownerDocument"],[2824,208,2926,66],[2824,210,2926,68],[2824,226,2926,84],[2824,228,2926,86,"_7"],[2824,230,2926,88],[2824,234,2926,92,"_7"],[2824,236,2926,94],[2824,237,2926,95,"defaultView"],[2824,248,2926,106],[2824,250,2926,108],[2824,266,2926,124],[2824,268,2926,126,"_8"],[2824,270,2926,128],[2824,274,2926,132,"_8"],[2824,276,2926,134],[2824,277,2926,135,"ShadowRoot"],[2824,287,2926,145],[2824,288,2926,146],[2824,289,2926,147],[2825,4,2927,4],[2825,10,2927,10,"originalPropertyDescriptor"],[2825,36,2927,36],[2825,39,2927,39,"_optionalChain$2"],[2825,55,2927,55],[2825,56,2927,56],[2825,57,2927,57,"patchTarget"],[2825,68,2927,68],[2825,70,2927,70],[2825,86,2927,86],[2825,88,2927,88,"_9"],[2825,90,2927,90],[2825,94,2927,94,"_9"],[2825,96,2927,96],[2825,97,2927,97,"prototype"],[2825,106,2927,106],[2825,107,2927,107],[2825,108,2927,108],[2825,111,2928,10,"Object"],[2825,117,2928,16],[2825,118,2928,17,"getOwnPropertyDescriptor"],[2825,142,2928,41],[2825,143,2928,42,"_optionalChain$2"],[2825,159,2928,58],[2825,160,2928,59],[2825,161,2928,60,"patchTarget"],[2825,172,2928,71],[2825,174,2928,73],[2825,190,2928,89],[2825,192,2928,91,"_10"],[2825,195,2928,94],[2825,199,2928,98,"_10"],[2825,202,2928,101],[2825,203,2928,102,"prototype"],[2825,212,2928,111],[2825,213,2928,112],[2825,214,2928,113],[2825,216,2928,115],[2825,236,2928,135],[2825,237,2928,136],[2825,240,2929,10,"undefined"],[2825,249,2929,19],[2826,4,2930,4],[2826,8,2930,8,"hostId"],[2826,14,2930,14],[2826,19,2930,19],[2826,23,2930,23],[2826,27,2931,8,"hostId"],[2826,33,2931,14],[2826,38,2931,19],[2826,39,2931,20],[2826,40,2931,21],[2826,44,2932,8],[2826,45,2932,9,"patchTarget"],[2826,56,2932,20],[2826,60,2933,8],[2826,61,2933,9,"originalPropertyDescriptor"],[2826,87,2933,35],[2826,89,2934,8],[2826,96,2934,15],[2826,102,2934,21],[2826,103,2935,8],[2826,104,2935,9],[2827,4,2936,4,"Object"],[2827,10,2936,10],[2827,11,2936,11,"defineProperty"],[2827,25,2936,25],[2827,26,2936,26,"host"],[2827,30,2936,30],[2827,32,2936,32],[2827,52,2936,52],[2827,54,2936,54],[2828,6,2937,8,"configurable"],[2828,18,2937,20],[2828,20,2937,22,"originalPropertyDescriptor"],[2828,46,2937,48],[2828,47,2937,49,"configurable"],[2828,59,2937,61],[2829,6,2938,8,"enumerable"],[2829,16,2938,18],[2829,18,2938,20,"originalPropertyDescriptor"],[2829,44,2938,46],[2829,45,2938,47,"enumerable"],[2829,55,2938,57],[2830,6,2939,8,"get"],[2830,9,2939,11,"get"],[2830,10,2939,11],[2830,12,2939,14],[2831,8,2940,12],[2831,15,2940,19,"_optionalChain$2"],[2831,31,2940,35],[2831,32,2940,36],[2831,33,2940,37,"originalPropertyDescriptor"],[2831,59,2940,63],[2831,61,2940,65],[2831,69,2940,73],[2831,71,2940,75,"_11"],[2831,74,2940,78],[2831,78,2940,82,"_11"],[2831,81,2940,85],[2831,82,2940,86,"get"],[2831,85,2940,89],[2831,87,2940,91],[2831,103,2940,107],[2831,105,2940,109,"_12"],[2831,108,2940,112],[2831,112,2940,116,"_12"],[2831,115,2940,119],[2831,116,2940,120,"call"],[2831,120,2940,124],[2831,122,2940,126],[2831,128,2940,132],[2831,130,2940,134,"_13"],[2831,133,2940,137],[2831,137,2940,141,"_13"],[2831,140,2940,144],[2831,141,2940,145],[2831,145,2940,149],[2831,146,2940,150],[2831,147,2940,151],[2831,148,2940,152],[2832,6,2941,8],[2832,7,2941,9],[2833,6,2942,8,"set"],[2833,9,2942,11,"set"],[2833,10,2942,12,"sheets"],[2833,16,2942,18],[2833,18,2942,20],[2834,8,2943,12],[2834,14,2943,18,"result"],[2834,20,2943,24],[2834,23,2943,27,"_optionalChain$2"],[2834,39,2943,43],[2834,40,2943,44],[2834,41,2943,45,"originalPropertyDescriptor"],[2834,67,2943,71],[2834,69,2943,73],[2834,77,2943,81],[2834,79,2943,83,"_14"],[2834,82,2943,86],[2834,86,2943,90,"_14"],[2834,89,2943,93],[2834,90,2943,94,"set"],[2834,93,2943,97],[2834,95,2943,99],[2834,111,2943,115],[2834,113,2943,117,"_15"],[2834,116,2943,120],[2834,120,2943,124,"_15"],[2834,123,2943,127],[2834,124,2943,128,"call"],[2834,128,2943,132],[2834,130,2943,134],[2834,136,2943,140],[2834,138,2943,142,"_16"],[2834,141,2943,145],[2834,145,2943,149,"_16"],[2834,148,2943,152],[2834,149,2943,153],[2834,153,2943,157],[2834,155,2943,159,"sheets"],[2834,161,2943,165],[2834,162,2943,166],[2834,163,2943,167],[2834,164,2943,168],[2835,8,2944,12],[2835,12,2944,16,"hostId"],[2835,18,2944,22],[2835,23,2944,27],[2835,27,2944,31],[2835,31,2944,35,"hostId"],[2835,37,2944,41],[2835,42,2944,46],[2835,43,2944,47],[2835,44,2944,48],[2835,46,2944,50],[2836,10,2945,16],[2836,14,2945,20],[2837,12,2946,20,"stylesheetManager"],[2837,29,2946,37],[2837,30,2946,38,"adoptStyleSheets"],[2837,46,2946,54],[2837,47,2946,55,"sheets"],[2837,53,2946,61],[2837,55,2946,63,"hostId"],[2837,61,2946,69],[2837,62,2946,70],[2838,10,2947,16],[2838,11,2947,17],[2838,12,2948,16],[2838,19,2948,23,"e"],[2838,20,2948,24],[2838,22,2948,26],[2838,23,2949,16],[2839,8,2950,12],[2840,8,2951,12],[2840,15,2951,19,"result"],[2840,21,2951,25],[2841,6,2952,8],[2842,4,2953,4],[2842,5,2953,5],[2842,6,2953,6],[2843,4,2954,4],[2843,11,2954,11,"callbackWrapper"],[2843,26,2954,26],[2843,27,2954,27],[2843,33,2954,33],[2844,6,2955,8,"Object"],[2844,12,2955,14],[2844,13,2955,15,"defineProperty"],[2844,27,2955,29],[2844,28,2955,30,"host"],[2844,32,2955,34],[2844,34,2955,36],[2844,54,2955,56],[2844,56,2955,58],[2845,8,2956,12,"configurable"],[2845,20,2956,24],[2845,22,2956,26,"originalPropertyDescriptor"],[2845,48,2956,52],[2845,49,2956,53,"configurable"],[2845,61,2956,65],[2846,8,2957,12,"enumerable"],[2846,18,2957,22],[2846,20,2957,24,"originalPropertyDescriptor"],[2846,46,2957,50],[2846,47,2957,51,"enumerable"],[2846,57,2957,61],[2847,8,2958,12,"get"],[2847,11,2958,15],[2847,13,2958,17,"originalPropertyDescriptor"],[2847,39,2958,43],[2847,40,2958,44,"get"],[2847,43,2958,47],[2848,8,2959,12,"set"],[2848,11,2959,15],[2848,13,2959,17,"originalPropertyDescriptor"],[2848,39,2959,43],[2848,40,2959,44,"set"],[2849,6,2960,8],[2849,7,2960,9],[2849,8,2960,10],[2850,4,2961,4],[2850,5,2961,5],[2850,6,2961,6],[2851,2,2962,0],[2852,2,2963,0],[2852,11,2963,9,"initStyleDeclarationObserver"],[2852,39,2963,37,"initStyleDeclarationObserver"],[2852,40,2963,38],[2853,4,2963,40,"styleDeclarationCb"],[2853,22,2963,58],[2854,4,2963,60,"mirror"],[2854,10,2963,66],[2855,4,2963,68,"ignoreCSSAttributes"],[2855,23,2963,87],[2856,4,2963,89,"stylesheetManager"],[2857,2,2963,108],[2857,3,2963,109],[2857,5,2963,111],[2858,4,2963,113,"win"],[2859,2,2963,117],[2859,3,2963,118],[2859,5,2963,120],[2860,4,2964,4],[2860,10,2964,10,"setProperty"],[2860,21,2964,21],[2860,24,2964,24,"win"],[2860,27,2964,27],[2860,28,2964,28,"CSSStyleDeclaration"],[2860,47,2964,47],[2860,48,2964,48,"prototype"],[2860,57,2964,57],[2860,58,2964,58,"setProperty"],[2860,69,2964,69],[2861,4,2965,4,"win"],[2861,7,2965,7],[2861,8,2965,8,"CSSStyleDeclaration"],[2861,27,2965,27],[2861,28,2965,28,"prototype"],[2861,37,2965,37],[2861,38,2965,38,"setProperty"],[2861,49,2965,49],[2861,52,2965,52],[2861,56,2965,56,"Proxy"],[2861,61,2965,61],[2861,62,2965,62,"setProperty"],[2861,73,2965,73],[2861,75,2965,75],[2862,6,2966,8,"apply"],[2862,11,2966,13],[2862,13,2966,15,"callbackWrapper"],[2862,28,2966,30],[2862,29,2966,31],[2862,30,2966,32,"target"],[2862,36,2966,38],[2862,38,2966,40,"thisArg"],[2862,45,2966,47],[2862,47,2966,49,"argumentsList"],[2862,60,2966,62],[2862,65,2966,67],[2863,8,2967,12],[2863,14,2967,18],[2863,15,2967,19,"property"],[2863,23,2967,27],[2863,25,2967,29,"value"],[2863,30,2967,34],[2863,32,2967,36,"priority"],[2863,40,2967,44],[2863,41,2967,45],[2863,44,2967,48,"argumentsList"],[2863,57,2967,61],[2864,8,2968,12],[2864,12,2968,16,"ignoreCSSAttributes"],[2864,31,2968,35],[2864,32,2968,36,"has"],[2864,35,2968,39],[2864,36,2968,40,"property"],[2864,44,2968,48],[2864,45,2968,49],[2864,47,2968,51],[2865,10,2969,16],[2865,17,2969,23,"setProperty"],[2865,28,2969,34],[2865,29,2969,35,"apply"],[2865,34,2969,40],[2865,35,2969,41,"thisArg"],[2865,42,2969,48],[2865,44,2969,50],[2865,45,2969,51,"property"],[2865,53,2969,59],[2865,55,2969,61,"value"],[2865,60,2969,66],[2865,62,2969,68,"priority"],[2865,70,2969,76],[2865,71,2969,77],[2865,72,2969,78],[2866,8,2970,12],[2867,8,2971,12],[2867,14,2971,18],[2868,10,2971,20,"id"],[2868,12,2971,22],[2869,10,2971,24,"styleId"],[2870,8,2971,32],[2870,9,2971,33],[2870,12,2971,36,"getIdAndStyleId"],[2870,27,2971,51],[2870,28,2971,52,"_optionalChain$2"],[2870,44,2971,68],[2870,45,2971,69],[2870,46,2971,70,"thisArg"],[2870,53,2971,77],[2870,55,2971,79],[2870,63,2971,87],[2870,65,2971,89,"_17"],[2870,68,2971,92],[2870,72,2971,96,"_17"],[2870,75,2971,99],[2870,76,2971,100,"parentRule"],[2870,86,2971,110],[2870,88,2971,112],[2870,104,2971,128],[2870,106,2971,130,"_18"],[2870,109,2971,133],[2870,113,2971,137,"_18"],[2870,116,2971,140],[2870,117,2971,141,"parentStyleSheet"],[2870,133,2971,157],[2870,134,2971,158],[2870,135,2971,159],[2870,137,2971,161,"mirror"],[2870,143,2971,167],[2870,145,2971,169,"stylesheetManager"],[2870,162,2971,186],[2870,163,2971,187,"styleMirror"],[2870,174,2971,198],[2870,175,2971,199],[2871,8,2972,12],[2871,12,2972,17,"id"],[2871,14,2972,19],[2871,18,2972,23,"id"],[2871,20,2972,25],[2871,25,2972,30],[2871,26,2972,31],[2871,27,2972,32],[2871,31,2972,38,"styleId"],[2871,38,2972,45],[2871,42,2972,49,"styleId"],[2871,49,2972,56],[2871,54,2972,61],[2871,55,2972,62],[2871,56,2972,64],[2871,58,2972,66],[2872,10,2973,16,"styleDeclarationCb"],[2872,28,2973,34],[2872,29,2973,35],[2873,12,2974,20,"id"],[2873,14,2974,22],[2874,12,2975,20,"styleId"],[2874,19,2975,27],[2875,12,2976,20,"set"],[2875,15,2976,23],[2875,17,2976,25],[2876,14,2977,24,"property"],[2876,22,2977,32],[2877,14,2978,24,"value"],[2877,19,2978,29],[2878,14,2979,24,"priority"],[2879,12,2980,20],[2879,13,2980,21],[2880,12,2981,20,"index"],[2880,17,2981,25],[2880,19,2981,27,"getNestedCSSRulePositions"],[2880,44,2981,52],[2880,45,2981,53,"thisArg"],[2880,52,2981,60],[2880,53,2981,61,"parentRule"],[2880,63,2981,71],[2881,10,2982,16],[2881,11,2982,17],[2881,12,2982,18],[2882,8,2983,12],[2883,8,2984,12],[2883,15,2984,19,"target"],[2883,21,2984,25],[2883,22,2984,26,"apply"],[2883,27,2984,31],[2883,28,2984,32,"thisArg"],[2883,35,2984,39],[2883,37,2984,41,"argumentsList"],[2883,50,2984,54],[2883,51,2984,55],[2884,6,2985,8],[2884,7,2985,9],[2885,4,2986,4],[2885,5,2986,5],[2885,6,2986,6],[2886,4,2987,4],[2886,10,2987,10,"removeProperty"],[2886,24,2987,24],[2886,27,2987,27,"win"],[2886,30,2987,30],[2886,31,2987,31,"CSSStyleDeclaration"],[2886,50,2987,50],[2886,51,2987,51,"prototype"],[2886,60,2987,60],[2886,61,2987,61,"removeProperty"],[2886,75,2987,75],[2887,4,2988,4,"win"],[2887,7,2988,7],[2887,8,2988,8,"CSSStyleDeclaration"],[2887,27,2988,27],[2887,28,2988,28,"prototype"],[2887,37,2988,37],[2887,38,2988,38,"removeProperty"],[2887,52,2988,52],[2887,55,2988,55],[2887,59,2988,59,"Proxy"],[2887,64,2988,64],[2887,65,2988,65,"removeProperty"],[2887,79,2988,79],[2887,81,2988,81],[2888,6,2989,8,"apply"],[2888,11,2989,13],[2888,13,2989,15,"callbackWrapper"],[2888,28,2989,30],[2888,29,2989,31],[2888,30,2989,32,"target"],[2888,36,2989,38],[2888,38,2989,40,"thisArg"],[2888,45,2989,47],[2888,47,2989,49,"argumentsList"],[2888,60,2989,62],[2888,65,2989,67],[2889,8,2990,12],[2889,14,2990,18],[2889,15,2990,19,"property"],[2889,23,2990,27],[2889,24,2990,28],[2889,27,2990,31,"argumentsList"],[2889,40,2990,44],[2890,8,2991,12],[2890,12,2991,16,"ignoreCSSAttributes"],[2890,31,2991,35],[2890,32,2991,36,"has"],[2890,35,2991,39],[2890,36,2991,40,"property"],[2890,44,2991,48],[2890,45,2991,49],[2890,47,2991,51],[2891,10,2992,16],[2891,17,2992,23,"removeProperty"],[2891,31,2992,37],[2891,32,2992,38,"apply"],[2891,37,2992,43],[2891,38,2992,44,"thisArg"],[2891,45,2992,51],[2891,47,2992,53],[2891,48,2992,54,"property"],[2891,56,2992,62],[2891,57,2992,63],[2891,58,2992,64],[2892,8,2993,12],[2893,8,2994,12],[2893,14,2994,18],[2894,10,2994,20,"id"],[2894,12,2994,22],[2895,10,2994,24,"styleId"],[2896,8,2994,32],[2896,9,2994,33],[2896,12,2994,36,"getIdAndStyleId"],[2896,27,2994,51],[2896,28,2994,52,"_optionalChain$2"],[2896,44,2994,68],[2896,45,2994,69],[2896,46,2994,70,"thisArg"],[2896,53,2994,77],[2896,55,2994,79],[2896,63,2994,87],[2896,65,2994,89,"_19"],[2896,68,2994,92],[2896,72,2994,96,"_19"],[2896,75,2994,99],[2896,76,2994,100,"parentRule"],[2896,86,2994,110],[2896,88,2994,112],[2896,104,2994,128],[2896,106,2994,130,"_20"],[2896,109,2994,133],[2896,113,2994,137,"_20"],[2896,116,2994,140],[2896,117,2994,141,"parentStyleSheet"],[2896,133,2994,157],[2896,134,2994,158],[2896,135,2994,159],[2896,137,2994,161,"mirror"],[2896,143,2994,167],[2896,145,2994,169,"stylesheetManager"],[2896,162,2994,186],[2896,163,2994,187,"styleMirror"],[2896,174,2994,198],[2896,175,2994,199],[2897,8,2995,12],[2897,12,2995,17,"id"],[2897,14,2995,19],[2897,18,2995,23,"id"],[2897,20,2995,25],[2897,25,2995,30],[2897,26,2995,31],[2897,27,2995,32],[2897,31,2995,38,"styleId"],[2897,38,2995,45],[2897,42,2995,49,"styleId"],[2897,49,2995,56],[2897,54,2995,61],[2897,55,2995,62],[2897,56,2995,64],[2897,58,2995,66],[2898,10,2996,16,"styleDeclarationCb"],[2898,28,2996,34],[2898,29,2996,35],[2899,12,2997,20,"id"],[2899,14,2997,22],[2900,12,2998,20,"styleId"],[2900,19,2998,27],[2901,12,2999,20,"remove"],[2901,18,2999,26],[2901,20,2999,28],[2902,14,3000,24,"property"],[2903,12,3001,20],[2903,13,3001,21],[2904,12,3002,20,"index"],[2904,17,3002,25],[2904,19,3002,27,"getNestedCSSRulePositions"],[2904,44,3002,52],[2904,45,3002,53,"thisArg"],[2904,52,3002,60],[2904,53,3002,61,"parentRule"],[2904,63,3002,71],[2905,10,3003,16],[2905,11,3003,17],[2905,12,3003,18],[2906,8,3004,12],[2907,8,3005,12],[2907,15,3005,19,"target"],[2907,21,3005,25],[2907,22,3005,26,"apply"],[2907,27,3005,31],[2907,28,3005,32,"thisArg"],[2907,35,3005,39],[2907,37,3005,41,"argumentsList"],[2907,50,3005,54],[2907,51,3005,55],[2908,6,3006,8],[2908,7,3006,9],[2909,4,3007,4],[2909,5,3007,5],[2909,6,3007,6],[2910,4,3008,4],[2910,11,3008,11,"callbackWrapper"],[2910,26,3008,26],[2910,27,3008,27],[2910,33,3008,33],[2911,6,3009,8,"win"],[2911,9,3009,11],[2911,10,3009,12,"CSSStyleDeclaration"],[2911,29,3009,31],[2911,30,3009,32,"prototype"],[2911,39,3009,41],[2911,40,3009,42,"setProperty"],[2911,51,3009,53],[2911,54,3009,56,"setProperty"],[2911,65,3009,67],[2912,6,3010,8,"win"],[2912,9,3010,11],[2912,10,3010,12,"CSSStyleDeclaration"],[2912,29,3010,31],[2912,30,3010,32,"prototype"],[2912,39,3010,41],[2912,40,3010,42,"removeProperty"],[2912,54,3010,56],[2912,57,3010,59,"removeProperty"],[2912,71,3010,73],[2913,4,3011,4],[2913,5,3011,5],[2913,6,3011,6],[2914,2,3012,0],[2915,2,3013,0],[2915,11,3013,9,"initMediaInteractionObserver"],[2915,39,3013,37,"initMediaInteractionObserver"],[2915,40,3013,38],[2916,4,3013,40,"mediaInteractionCb"],[2916,22,3013,58],[2917,4,3013,60,"blockClass"],[2917,14,3013,70],[2918,4,3013,72,"blockSelector"],[2918,17,3013,85],[2919,4,3013,87,"unblockSelector"],[2919,19,3013,102],[2920,4,3013,104,"mirror"],[2920,10,3013,110],[2921,4,3013,112,"sampling"],[2921,12,3013,120],[2922,4,3013,122,"doc"],[2923,2,3013,127],[2923,3,3013,128],[2923,5,3013,130],[2924,4,3014,4],[2924,10,3014,10,"handler"],[2924,17,3014,17],[2924,20,3014,20,"callbackWrapper"],[2924,35,3014,35],[2924,36,3014,37,"type"],[2924,40,3014,41],[2924,44,3014,46,"throttle$1"],[2924,54,3014,56],[2924,55,3014,57,"callbackWrapper"],[2924,70,3014,72],[2924,71,3014,74,"event"],[2924,76,3014,79],[2924,80,3014,84],[2925,6,3015,8],[2925,12,3015,14,"target"],[2925,18,3015,20],[2925,21,3015,23,"getEventTarget"],[2925,35,3015,37],[2925,36,3015,38,"event"],[2925,41,3015,43],[2925,42,3015,44],[2926,6,3016,8],[2926,10,3016,12],[2926,11,3016,13,"target"],[2926,17,3016,19],[2926,21,3017,12,"isBlocked"],[2926,30,3017,21],[2926,31,3017,22,"target"],[2926,37,3017,28],[2926,39,3017,30,"blockClass"],[2926,49,3017,40],[2926,51,3017,42,"blockSelector"],[2926,64,3017,55],[2926,66,3017,57,"unblockSelector"],[2926,81,3017,72],[2926,83,3017,74],[2926,87,3017,78],[2926,88,3017,79],[2926,90,3017,81],[2927,8,3018,12],[2928,6,3019,8],[2929,6,3020,8],[2929,12,3020,14],[2930,8,3020,16,"currentTime"],[2930,19,3020,27],[2931,8,3020,29,"volume"],[2931,14,3020,35],[2932,8,3020,37,"muted"],[2932,13,3020,42],[2933,8,3020,44,"playbackRate"],[2934,6,3020,57],[2934,7,3020,58],[2934,10,3020,61,"target"],[2934,16,3020,67],[2935,6,3021,8,"mediaInteractionCb"],[2935,24,3021,26],[2935,25,3021,27],[2936,8,3022,12,"type"],[2936,12,3022,16],[2937,8,3023,12,"id"],[2937,10,3023,14],[2937,12,3023,16,"mirror"],[2937,18,3023,22],[2937,19,3023,23,"getId"],[2937,24,3023,28],[2937,25,3023,29,"target"],[2937,31,3023,35],[2937,32,3023,36],[2938,8,3024,12,"currentTime"],[2938,19,3024,23],[2939,8,3025,12,"volume"],[2939,14,3025,18],[2940,8,3026,12,"muted"],[2940,13,3026,17],[2941,8,3027,12,"playbackRate"],[2942,6,3028,8],[2942,7,3028,9],[2942,8,3028,10],[2943,4,3029,4],[2943,5,3029,5],[2943,6,3029,6],[2943,8,3029,8,"sampling"],[2943,16,3029,16],[2943,17,3029,17,"media"],[2943,22,3029,22],[2943,26,3029,26],[2943,29,3029,29],[2943,30,3029,30],[2943,31,3029,31],[2944,4,3030,4],[2944,10,3030,10,"handlers"],[2944,18,3030,18],[2944,21,3030,21],[2944,22,3031,8,"on"],[2944,24,3031,10],[2944,25,3031,11],[2944,31,3031,17],[2944,33,3031,19,"handler"],[2944,40,3031,26],[2944,41,3031,27],[2944,42,3031,28],[2944,43,3031,29],[2944,45,3031,31,"doc"],[2944,48,3031,34],[2944,49,3031,35],[2944,51,3032,8,"on"],[2944,53,3032,10],[2944,54,3032,11],[2944,61,3032,18],[2944,63,3032,20,"handler"],[2944,70,3032,27],[2944,71,3032,28],[2944,72,3032,29],[2944,73,3032,30],[2944,75,3032,32,"doc"],[2944,78,3032,35],[2944,79,3032,36],[2944,81,3033,8,"on"],[2944,83,3033,10],[2944,84,3033,11],[2944,92,3033,19],[2944,94,3033,21,"handler"],[2944,101,3033,28],[2944,102,3033,29],[2944,103,3033,30],[2944,104,3033,31],[2944,106,3033,33,"doc"],[2944,109,3033,36],[2944,110,3033,37],[2944,112,3034,8,"on"],[2944,114,3034,10],[2944,115,3034,11],[2944,129,3034,25],[2944,131,3034,27,"handler"],[2944,138,3034,34],[2944,139,3034,35],[2944,140,3034,36],[2944,141,3034,37],[2944,143,3034,39,"doc"],[2944,146,3034,42],[2944,147,3034,43],[2944,149,3035,8,"on"],[2944,151,3035,10],[2944,152,3035,11],[2944,164,3035,23],[2944,166,3035,25,"handler"],[2944,173,3035,32],[2944,174,3035,33],[2944,175,3035,34],[2944,176,3035,35],[2944,178,3035,37,"doc"],[2944,181,3035,40],[2944,182,3035,41],[2944,183,3036,5],[2945,4,3037,4],[2945,11,3037,11,"callbackWrapper"],[2945,26,3037,26],[2945,27,3037,27],[2945,33,3037,33],[2946,6,3038,8,"handlers"],[2946,14,3038,16],[2946,15,3038,17,"forEach"],[2946,22,3038,24],[2946,23,3038,26,"h"],[2946,24,3038,27],[2946,28,3038,32,"h"],[2946,29,3038,33],[2946,30,3038,34],[2946,31,3038,35],[2946,32,3038,36],[2947,4,3039,4],[2947,5,3039,5],[2947,6,3039,6],[2948,2,3040,0],[2949,2,3041,0],[2949,11,3041,9,"initFontObserver"],[2949,27,3041,25,"initFontObserver"],[2949,28,3041,26],[2950,4,3041,28,"fontCb"],[2950,10,3041,34],[2951,4,3041,36,"doc"],[2952,2,3041,40],[2952,3,3041,41],[2952,5,3041,43],[2953,4,3042,4],[2953,10,3042,10,"win"],[2953,13,3042,13],[2953,16,3042,16,"doc"],[2953,19,3042,19],[2953,20,3042,20,"defaultView"],[2953,31,3042,31],[2954,4,3043,4],[2954,8,3043,8],[2954,9,3043,9,"win"],[2954,12,3043,12],[2954,14,3043,14],[2955,6,3044,8],[2955,13,3044,15],[2955,19,3044,21],[2955,20,3045,8],[2955,21,3045,9],[2956,4,3046,4],[2957,4,3047,4],[2957,10,3047,10,"handlers"],[2957,18,3047,18],[2957,21,3047,21],[2957,23,3047,23],[2958,4,3048,4],[2958,10,3048,10,"fontMap"],[2958,17,3048,17],[2958,20,3048,20],[2958,24,3048,24,"WeakMap"],[2958,31,3048,31],[2958,32,3048,32],[2958,33,3048,33],[2959,4,3049,4],[2959,10,3049,10,"originalFontFace"],[2959,26,3049,26],[2959,29,3049,29,"win"],[2959,32,3049,32],[2959,33,3049,33,"FontFace"],[2959,41,3049,41],[2960,4,3050,4,"win"],[2960,7,3050,7],[2960,8,3050,8,"FontFace"],[2960,16,3050,16],[2960,19,3050,19],[2960,28,3050,28,"FontFace"],[2960,36,3050,36,"FontFace"],[2960,37,3050,37,"family"],[2960,43,3050,43],[2960,45,3050,45,"source"],[2960,51,3050,51],[2960,53,3050,53,"descriptors"],[2960,64,3050,64],[2960,66,3050,66],[2961,6,3051,8],[2961,12,3051,14,"fontFace"],[2961,20,3051,22],[2961,23,3051,25],[2961,27,3051,29,"originalFontFace"],[2961,43,3051,45],[2961,44,3051,46,"family"],[2961,50,3051,52],[2961,52,3051,54,"source"],[2961,58,3051,60],[2961,60,3051,62,"descriptors"],[2961,71,3051,73],[2961,72,3051,74],[2962,6,3052,8,"fontMap"],[2962,13,3052,15],[2962,14,3052,16,"set"],[2962,17,3052,19],[2962,18,3052,20,"fontFace"],[2962,26,3052,28],[2962,28,3052,30],[2963,8,3053,12,"family"],[2963,14,3053,18],[2964,8,3054,12,"buffer"],[2964,14,3054,18],[2964,16,3054,20],[2964,23,3054,27,"source"],[2964,29,3054,33],[2964,34,3054,38],[2964,42,3054,46],[2965,8,3055,12,"descriptors"],[2965,19,3055,23],[2966,8,3056,12,"fontSource"],[2966,18,3056,22],[2966,20,3056,24],[2966,27,3056,31,"source"],[2966,33,3056,37],[2966,38,3056,42],[2966,46,3056,50],[2966,49,3057,18,"source"],[2966,55,3057,24],[2966,58,3058,18,"JSON"],[2966,62,3058,22],[2966,63,3058,23,"stringify"],[2966,72,3058,32],[2966,73,3058,33,"Array"],[2966,78,3058,38],[2966,79,3058,39,"from"],[2966,83,3058,43],[2966,84,3058,44],[2966,88,3058,48,"Uint8Array"],[2966,98,3058,58],[2966,99,3058,59,"source"],[2966,105,3058,65],[2966,106,3058,66],[2966,107,3058,67],[2967,6,3059,8],[2967,7,3059,9],[2967,8,3059,10],[2968,6,3060,8],[2968,13,3060,15,"fontFace"],[2968,21,3060,23],[2969,4,3061,4],[2969,5,3061,5],[2970,4,3062,4],[2970,10,3062,10,"restoreHandler"],[2970,24,3062,24],[2970,27,3062,27,"patch"],[2970,32,3062,32],[2970,33,3062,33,"doc"],[2970,36,3062,36],[2970,37,3062,37,"fonts"],[2970,42,3062,42],[2970,44,3062,44],[2970,49,3062,49],[2970,51,3062,51],[2970,61,3062,61,"original"],[2970,69,3062,69],[2970,71,3062,71],[2971,6,3063,8],[2971,13,3063,15],[2971,23,3063,25,"fontFace"],[2971,31,3063,33],[2971,33,3063,35],[2972,8,3064,12,"setTimeout$1"],[2972,20,3064,24],[2972,21,3064,25,"callbackWrapper"],[2972,36,3064,40],[2972,37,3064,41],[2972,43,3064,47],[2973,10,3065,16],[2973,16,3065,22,"p"],[2973,17,3065,23],[2973,20,3065,26,"fontMap"],[2973,27,3065,33],[2973,28,3065,34,"get"],[2973,31,3065,37],[2973,32,3065,38,"fontFace"],[2973,40,3065,46],[2973,41,3065,47],[2974,10,3066,16],[2974,14,3066,20,"p"],[2974,15,3066,21],[2974,17,3066,23],[2975,12,3067,20,"fontCb"],[2975,18,3067,26],[2975,19,3067,27,"p"],[2975,20,3067,28],[2975,21,3067,29],[2976,12,3068,20,"fontMap"],[2976,19,3068,27],[2976,20,3068,28,"delete"],[2976,26,3068,34],[2976,27,3068,35,"fontFace"],[2976,35,3068,43],[2976,36,3068,44],[2977,10,3069,16],[2978,8,3070,12],[2978,9,3070,13],[2978,10,3070,14],[2978,12,3070,16],[2978,13,3070,17],[2978,14,3070,18],[2979,8,3071,12],[2979,15,3071,19,"original"],[2979,23,3071,27],[2979,24,3071,28,"apply"],[2979,29,3071,33],[2979,30,3071,34],[2979,34,3071,38],[2979,36,3071,40],[2979,37,3071,41,"fontFace"],[2979,45,3071,49],[2979,46,3071,50],[2979,47,3071,51],[2980,6,3072,8],[2980,7,3072,9],[2981,4,3073,4],[2981,5,3073,5],[2981,6,3073,6],[2982,4,3074,4,"handlers"],[2982,12,3074,12],[2982,13,3074,13,"push"],[2982,17,3074,17],[2982,18,3074,18],[2982,24,3074,24],[2983,6,3075,8,"win"],[2983,9,3075,11],[2983,10,3075,12,"FontFace"],[2983,18,3075,20],[2983,21,3075,23,"originalFontFace"],[2983,37,3075,39],[2984,4,3076,4],[2984,5,3076,5],[2984,6,3076,6],[2985,4,3077,4,"handlers"],[2985,12,3077,12],[2985,13,3077,13,"push"],[2985,17,3077,17],[2985,18,3077,18,"restoreHandler"],[2985,32,3077,32],[2985,33,3077,33],[2986,4,3078,4],[2986,11,3078,11,"callbackWrapper"],[2986,26,3078,26],[2986,27,3078,27],[2986,33,3078,33],[2987,6,3079,8,"handlers"],[2987,14,3079,16],[2987,15,3079,17,"forEach"],[2987,22,3079,24],[2987,23,3079,26,"h"],[2987,24,3079,27],[2987,28,3079,32,"h"],[2987,29,3079,33],[2987,30,3079,34],[2987,31,3079,35],[2987,32,3079,36],[2988,4,3080,4],[2988,5,3080,5],[2988,6,3080,6],[2989,2,3081,0],[2990,2,3082,0],[2990,11,3082,9,"initSelectionObserver"],[2990,32,3082,30,"initSelectionObserver"],[2990,33,3082,31,"param"],[2990,38,3082,36],[2990,40,3082,38],[2991,4,3083,4],[2991,10,3083,10],[2992,6,3083,12,"doc"],[2992,9,3083,15],[2993,6,3083,17,"mirror"],[2993,12,3083,23],[2994,6,3083,25,"blockClass"],[2994,16,3083,35],[2995,6,3083,37,"blockSelector"],[2995,19,3083,50],[2996,6,3083,52,"unblockSelector"],[2996,21,3083,67],[2997,6,3083,69,"selectionCb"],[2998,4,3083,82],[2998,5,3083,83],[2998,8,3083,86,"param"],[2998,13,3083,91],[2999,4,3084,4],[2999,8,3084,8,"collapsed"],[2999,17,3084,17],[2999,20,3084,20],[2999,24,3084,24],[3000,4,3085,4],[3000,10,3085,10,"updateSelection"],[3000,25,3085,25],[3000,28,3085,28,"callbackWrapper"],[3000,43,3085,43],[3000,44,3085,44],[3000,50,3085,50],[3001,6,3086,8],[3001,12,3086,14,"selection"],[3001,21,3086,23],[3001,24,3086,26,"doc"],[3001,27,3086,29],[3001,28,3086,30,"getSelection"],[3001,40,3086,42],[3001,41,3086,43],[3001,42,3086,44],[3002,6,3087,8],[3002,10,3087,12],[3002,11,3087,13,"selection"],[3002,20,3087,22],[3002,24,3087,27,"collapsed"],[3002,33,3087,36],[3002,37,3087,40,"_optionalChain$2"],[3002,53,3087,56],[3002,54,3087,57],[3002,55,3087,58,"selection"],[3002,64,3087,67],[3002,66,3087,69],[3002,82,3087,85],[3002,84,3087,87,"_21"],[3002,87,3087,90],[3002,91,3087,94,"_21"],[3002,94,3087,97],[3002,95,3087,98,"isCollapsed"],[3002,106,3087,109],[3002,107,3087,110],[3002,108,3087,112],[3002,110,3088,12],[3003,6,3089,8,"collapsed"],[3003,15,3089,17],[3003,18,3089,20,"selection"],[3003,27,3089,29],[3003,28,3089,30,"isCollapsed"],[3003,39,3089,41],[3003,43,3089,45],[3003,48,3089,50],[3004,6,3090,8],[3004,12,3090,14,"ranges"],[3004,18,3090,20],[3004,21,3090,23],[3004,23,3090,25],[3005,6,3091,8],[3005,12,3091,14,"count"],[3005,17,3091,19],[3005,20,3091,22,"selection"],[3005,29,3091,31],[3005,30,3091,32,"rangeCount"],[3005,40,3091,42],[3005,44,3091,46],[3005,45,3091,47],[3006,6,3092,8],[3006,11,3092,13],[3006,15,3092,17,"i"],[3006,16,3092,18],[3006,19,3092,21],[3006,20,3092,22],[3006,22,3092,24,"i"],[3006,23,3092,25],[3006,26,3092,28,"count"],[3006,31,3092,33],[3006,33,3092,35,"i"],[3006,34,3092,36],[3006,36,3092,38],[3006,38,3092,40],[3007,8,3093,12],[3007,14,3093,18,"range"],[3007,19,3093,23],[3007,22,3093,26,"selection"],[3007,31,3093,35],[3007,32,3093,36,"getRangeAt"],[3007,42,3093,46],[3007,43,3093,47,"i"],[3007,44,3093,48],[3007,45,3093,49],[3008,8,3094,12],[3008,14,3094,18],[3009,10,3094,20,"startContainer"],[3009,24,3094,34],[3010,10,3094,36,"startOffset"],[3010,21,3094,47],[3011,10,3094,49,"endContainer"],[3011,22,3094,61],[3012,10,3094,63,"endOffset"],[3013,8,3094,73],[3013,9,3094,74],[3013,12,3094,77,"range"],[3013,17,3094,82],[3014,8,3095,12],[3014,14,3095,18,"blocked"],[3014,21,3095,25],[3014,24,3095,28,"isBlocked"],[3014,33,3095,37],[3014,34,3095,38,"startContainer"],[3014,48,3095,52],[3014,50,3095,54,"blockClass"],[3014,60,3095,64],[3014,62,3095,66,"blockSelector"],[3014,75,3095,79],[3014,77,3095,81,"unblockSelector"],[3014,92,3095,96],[3014,94,3095,98],[3014,98,3095,102],[3014,99,3095,103],[3014,103,3096,16,"isBlocked"],[3014,112,3096,25],[3014,113,3096,26,"endContainer"],[3014,125,3096,38],[3014,127,3096,40,"blockClass"],[3014,137,3096,50],[3014,139,3096,52,"blockSelector"],[3014,152,3096,65],[3014,154,3096,67,"unblockSelector"],[3014,169,3096,82],[3014,171,3096,84],[3014,175,3096,88],[3014,176,3096,89],[3015,8,3097,12],[3015,12,3097,16,"blocked"],[3015,19,3097,23],[3015,21,3098,16],[3016,8,3099,12,"ranges"],[3016,14,3099,18],[3016,15,3099,19,"push"],[3016,19,3099,23],[3016,20,3099,24],[3017,10,3100,16,"start"],[3017,15,3100,21],[3017,17,3100,23,"mirror"],[3017,23,3100,29],[3017,24,3100,30,"getId"],[3017,29,3100,35],[3017,30,3100,36,"startContainer"],[3017,44,3100,50],[3017,45,3100,51],[3018,10,3101,16,"startOffset"],[3018,21,3101,27],[3019,10,3102,16,"end"],[3019,13,3102,19],[3019,15,3102,21,"mirror"],[3019,21,3102,27],[3019,22,3102,28,"getId"],[3019,27,3102,33],[3019,28,3102,34,"endContainer"],[3019,40,3102,46],[3019,41,3102,47],[3020,10,3103,16,"endOffset"],[3021,8,3104,12],[3021,9,3104,13],[3021,10,3104,14],[3022,6,3105,8],[3023,6,3106,8,"selectionCb"],[3023,17,3106,19],[3023,18,3106,20],[3024,8,3106,22,"ranges"],[3025,6,3106,29],[3025,7,3106,30],[3025,8,3106,31],[3026,4,3107,4],[3026,5,3107,5],[3026,6,3107,6],[3027,4,3108,4,"updateSelection"],[3027,19,3108,19],[3027,20,3108,20],[3027,21,3108,21],[3028,4,3109,4],[3028,11,3109,11,"on"],[3028,13,3109,13],[3028,14,3109,14],[3028,31,3109,31],[3028,33,3109,33,"updateSelection"],[3028,48,3109,48],[3028,49,3109,49],[3029,2,3110,0],[3030,2,3111,0],[3030,11,3111,9,"initCustomElementObserver"],[3030,36,3111,34,"initCustomElementObserver"],[3030,37,3111,35],[3031,4,3111,37,"doc"],[3031,7,3111,40],[3032,4,3111,42,"customElementCb"],[3033,2,3111,59],[3033,3,3111,60],[3033,5,3111,62],[3034,4,3112,4],[3034,10,3112,10,"win"],[3034,13,3112,13],[3034,16,3112,16,"doc"],[3034,19,3112,19],[3034,20,3112,20,"defaultView"],[3034,31,3112,31],[3035,4,3113,4],[3035,8,3113,8],[3035,9,3113,9,"win"],[3035,12,3113,12],[3035,16,3113,16],[3035,17,3113,17,"win"],[3035,20,3113,20],[3035,21,3113,21,"customElements"],[3035,35,3113,35],[3035,37,3114,8],[3035,44,3114,15],[3035,50,3114,21],[3035,51,3114,23],[3035,52,3114,24],[3036,4,3115,4],[3036,10,3115,10,"restoreHandler"],[3036,24,3115,24],[3036,27,3115,27,"patch"],[3036,32,3115,32],[3036,33,3115,33,"win"],[3036,36,3115,36],[3036,37,3115,37,"customElements"],[3036,51,3115,51],[3036,53,3115,53],[3036,61,3115,61],[3036,63,3115,63],[3036,73,3115,73,"original"],[3036,81,3115,81],[3036,83,3115,83],[3037,6,3116,8],[3037,13,3116,15],[3037,23,3116,25,"name"],[3037,27,3116,29],[3037,29,3116,31,"constructor"],[3037,40,3116,42],[3037,42,3116,44,"options"],[3037,49,3116,51],[3037,51,3116,53],[3038,8,3117,12],[3038,12,3117,16],[3039,10,3118,16,"customElementCb"],[3039,25,3118,31],[3039,26,3118,32],[3040,12,3119,20,"define"],[3040,18,3119,26],[3040,20,3119,28],[3041,14,3120,24,"name"],[3042,12,3121,20],[3043,10,3122,16],[3043,11,3122,17],[3043,12,3122,18],[3044,8,3123,12],[3044,9,3123,13],[3044,10,3124,12],[3044,17,3124,19,"e"],[3044,18,3124,20],[3044,20,3124,22],[3044,21,3125,12],[3045,8,3126,12],[3045,15,3126,19,"original"],[3045,23,3126,27],[3045,24,3126,28,"apply"],[3045,29,3126,33],[3045,30,3126,34],[3045,34,3126,38],[3045,36,3126,40],[3045,37,3126,41,"name"],[3045,41,3126,45],[3045,43,3126,47,"constructor"],[3045,54,3126,58],[3045,56,3126,60,"options"],[3045,63,3126,67],[3045,64,3126,68],[3045,65,3126,69],[3046,6,3127,8],[3046,7,3127,9],[3047,4,3128,4],[3047,5,3128,5],[3047,6,3128,6],[3048,4,3129,4],[3048,11,3129,11,"restoreHandler"],[3048,25,3129,25],[3049,2,3130,0],[3050,2,3131,0],[3050,11,3131,9,"initObservers"],[3050,24,3131,22,"initObservers"],[3050,25,3131,23,"o"],[3050,26,3131,24],[3050,28,3131,26,"_hooks"],[3050,34,3131,32],[3050,37,3131,35],[3050,38,3131,36],[3050,39,3131,37],[3050,41,3131,39],[3051,4,3132,4],[3051,10,3132,10,"currentWindow"],[3051,23,3132,23],[3051,26,3132,26,"o"],[3051,27,3132,27],[3051,28,3132,28,"doc"],[3051,31,3132,31],[3051,32,3132,32,"defaultView"],[3051,43,3132,43],[3052,4,3133,4],[3052,8,3133,8],[3052,9,3133,9,"currentWindow"],[3052,22,3133,22],[3052,24,3133,24],[3053,6,3134,8],[3053,13,3134,15],[3053,19,3134,21],[3053,20,3135,8],[3053,21,3135,9],[3054,4,3136,4],[3055,4,3137,4],[3055,8,3137,8,"mutationObserver"],[3055,24,3137,24],[3056,4,3138,4],[3056,8,3138,8,"o"],[3056,9,3138,9],[3056,10,3138,10,"recordDOM"],[3056,19,3138,19],[3056,21,3138,21],[3057,6,3139,8,"mutationObserver"],[3057,22,3139,24],[3057,25,3139,27,"initMutationObserver"],[3057,45,3139,47],[3057,46,3139,48,"o"],[3057,47,3139,49],[3057,49,3139,51,"o"],[3057,50,3139,52],[3057,51,3139,53,"doc"],[3057,54,3139,56],[3057,55,3139,57],[3058,4,3140,4],[3059,4,3141,4],[3059,10,3141,10,"mousemoveHandler"],[3059,26,3141,26],[3059,29,3141,29,"initMoveObserver"],[3059,45,3141,45],[3059,46,3141,46,"o"],[3059,47,3141,47],[3059,48,3141,48],[3060,4,3142,4],[3060,10,3142,10,"mouseInteractionHandler"],[3060,33,3142,33],[3060,36,3142,36,"initMouseInteractionObserver"],[3060,64,3142,64],[3060,65,3142,65,"o"],[3060,66,3142,66],[3060,67,3142,67],[3061,4,3143,4],[3061,10,3143,10,"scrollHandler"],[3061,23,3143,23],[3061,26,3143,26,"initScrollObserver"],[3061,44,3143,44],[3061,45,3143,45,"o"],[3061,46,3143,46],[3061,47,3143,47],[3062,4,3144,4],[3062,10,3144,10,"viewportResizeHandler"],[3062,31,3144,31],[3062,34,3144,34,"initViewportResizeObserver"],[3062,60,3144,60],[3062,61,3144,61,"o"],[3062,62,3144,62],[3062,64,3144,64],[3063,6,3145,8,"win"],[3063,9,3145,11],[3063,11,3145,13,"currentWindow"],[3064,4,3146,4],[3064,5,3146,5],[3064,6,3146,6],[3065,4,3147,4],[3065,10,3147,10,"inputHandler"],[3065,22,3147,22],[3065,25,3147,25,"initInputObserver"],[3065,42,3147,42],[3065,43,3147,43,"o"],[3065,44,3147,44],[3065,45,3147,45],[3066,4,3148,4],[3066,10,3148,10,"mediaInteractionHandler"],[3066,33,3148,33],[3066,36,3148,36,"initMediaInteractionObserver"],[3066,64,3148,64],[3066,65,3148,65,"o"],[3066,66,3148,66],[3066,67,3148,67],[3067,4,3149,4],[3067,8,3149,8,"styleSheetObserver"],[3067,26,3149,26],[3067,29,3149,29,"styleSheetObserver"],[3067,30,3149,29],[3067,35,3149,35],[3067,36,3149,37],[3067,37,3149,38],[3068,4,3150,4],[3068,8,3150,8,"adoptedStyleSheetObserver"],[3068,33,3150,33],[3068,36,3150,36,"adoptedStyleSheetObserver"],[3068,37,3150,36],[3068,42,3150,42],[3068,43,3150,44],[3068,44,3150,45],[3069,4,3151,4],[3069,8,3151,8,"styleDeclarationObserver"],[3069,32,3151,32],[3069,35,3151,35,"styleDeclarationObserver"],[3069,36,3151,35],[3069,41,3151,41],[3069,42,3151,43],[3069,43,3151,44],[3070,4,3152,4],[3070,8,3152,8,"fontObserver"],[3070,20,3152,20],[3070,23,3152,23,"fontObserver"],[3070,24,3152,23],[3070,29,3152,29],[3070,30,3152,31],[3070,31,3152,32],[3071,4,3153,4],[3071,8,3153,8,"o"],[3071,9,3153,9],[3071,10,3153,10,"recordDOM"],[3071,19,3153,19],[3071,21,3153,21],[3072,6,3154,8,"styleSheetObserver"],[3072,24,3154,26],[3072,27,3154,29,"initStyleSheetObserver"],[3072,49,3154,51],[3072,50,3154,52,"o"],[3072,51,3154,53],[3072,53,3154,55],[3073,8,3154,57,"win"],[3073,11,3154,60],[3073,13,3154,62,"currentWindow"],[3074,6,3154,76],[3074,7,3154,77],[3074,8,3154,78],[3075,6,3155,8,"adoptedStyleSheetObserver"],[3075,31,3155,33],[3075,34,3155,36,"initAdoptedStyleSheetObserver"],[3075,63,3155,65],[3075,64,3155,66,"o"],[3075,65,3155,67],[3075,67,3155,69,"o"],[3075,68,3155,70],[3075,69,3155,71,"doc"],[3075,72,3155,74],[3075,73,3155,75],[3076,6,3156,8,"styleDeclarationObserver"],[3076,30,3156,32],[3076,33,3156,35,"initStyleDeclarationObserver"],[3076,61,3156,63],[3076,62,3156,64,"o"],[3076,63,3156,65],[3076,65,3156,67],[3077,8,3157,12,"win"],[3077,11,3157,15],[3077,13,3157,17,"currentWindow"],[3078,6,3158,8],[3078,7,3158,9],[3078,8,3158,10],[3079,6,3159,8],[3079,10,3159,12,"o"],[3079,11,3159,13],[3079,12,3159,14,"collectFonts"],[3079,24,3159,26],[3079,26,3159,28],[3080,8,3160,12,"fontObserver"],[3080,20,3160,24],[3080,23,3160,27,"initFontObserver"],[3080,39,3160,43],[3080,40,3160,44,"o"],[3080,41,3160,45],[3080,42,3160,46],[3081,6,3161,8],[3082,4,3162,4],[3083,4,3163,4],[3083,10,3163,10,"selectionObserver"],[3083,27,3163,27],[3083,30,3163,30,"initSelectionObserver"],[3083,51,3163,51],[3083,52,3163,52,"o"],[3083,53,3163,53],[3083,54,3163,54],[3084,4,3164,4],[3084,10,3164,10,"customElementObserver"],[3084,31,3164,31],[3084,34,3164,34,"initCustomElementObserver"],[3084,59,3164,59],[3084,60,3164,60,"o"],[3084,61,3164,61],[3084,62,3164,62],[3085,4,3165,4],[3085,10,3165,10,"pluginHandlers"],[3085,24,3165,24],[3085,27,3165,27],[3085,29,3165,29],[3086,4,3166,4],[3086,9,3166,9],[3086,15,3166,15,"plugin"],[3086,21,3166,21],[3086,25,3166,25,"o"],[3086,26,3166,26],[3086,27,3166,27,"plugins"],[3086,34,3166,34],[3086,36,3166,36],[3087,6,3167,8,"pluginHandlers"],[3087,20,3167,22],[3087,21,3167,23,"push"],[3087,25,3167,27],[3087,26,3167,28,"plugin"],[3087,32,3167,34],[3087,33,3167,35,"observer"],[3087,41,3167,43],[3087,42,3167,44,"plugin"],[3087,48,3167,50],[3087,49,3167,51,"callback"],[3087,57,3167,59],[3087,59,3167,61,"currentWindow"],[3087,72,3167,74],[3087,74,3167,76,"plugin"],[3087,80,3167,82],[3087,81,3167,83,"options"],[3087,88,3167,90],[3087,89,3167,91],[3087,90,3167,92],[3088,4,3168,4],[3089,4,3169,4],[3089,11,3169,11,"callbackWrapper"],[3089,26,3169,26],[3089,27,3169,27],[3089,33,3169,33],[3090,6,3170,8,"mutationBuffers"],[3090,21,3170,23],[3090,22,3170,24,"forEach"],[3090,29,3170,31],[3090,30,3170,33,"b"],[3090,31,3170,34],[3090,35,3170,39,"b"],[3090,36,3170,40],[3090,37,3170,41,"reset"],[3090,42,3170,46],[3090,43,3170,47],[3090,44,3170,48],[3090,45,3170,49],[3091,6,3171,8,"_optionalChain$2"],[3091,22,3171,24],[3091,23,3171,25],[3091,24,3171,26,"mutationObserver"],[3091,40,3171,42],[3091,42,3171,44],[3091,58,3171,60],[3091,60,3171,62,"_22"],[3091,63,3171,65],[3091,67,3171,69,"_22"],[3091,70,3171,72],[3091,71,3171,73,"disconnect"],[3091,81,3171,83],[3091,83,3171,85],[3091,89,3171,91],[3091,91,3171,93,"_23"],[3091,94,3171,96],[3091,98,3171,100,"_23"],[3091,101,3171,103],[3091,102,3171,104],[3091,103,3171,105],[3091,104,3171,106],[3091,105,3171,107],[3092,6,3172,8,"mousemoveHandler"],[3092,22,3172,24],[3092,23,3172,25],[3092,24,3172,26],[3093,6,3173,8,"mouseInteractionHandler"],[3093,29,3173,31],[3093,30,3173,32],[3093,31,3173,33],[3094,6,3174,8,"scrollHandler"],[3094,19,3174,21],[3094,20,3174,22],[3094,21,3174,23],[3095,6,3175,8,"viewportResizeHandler"],[3095,27,3175,29],[3095,28,3175,30],[3095,29,3175,31],[3096,6,3176,8,"inputHandler"],[3096,18,3176,20],[3096,19,3176,21],[3096,20,3176,22],[3097,6,3177,8,"mediaInteractionHandler"],[3097,29,3177,31],[3097,30,3177,32],[3097,31,3177,33],[3098,6,3178,8,"styleSheetObserver"],[3098,24,3178,26],[3098,25,3178,27],[3098,26,3178,28],[3099,6,3179,8,"adoptedStyleSheetObserver"],[3099,31,3179,33],[3099,32,3179,34],[3099,33,3179,35],[3100,6,3180,8,"styleDeclarationObserver"],[3100,30,3180,32],[3100,31,3180,33],[3100,32,3180,34],[3101,6,3181,8,"fontObserver"],[3101,18,3181,20],[3101,19,3181,21],[3101,20,3181,22],[3102,6,3182,8,"selectionObserver"],[3102,23,3182,25],[3102,24,3182,26],[3102,25,3182,27],[3103,6,3183,8,"customElementObserver"],[3103,27,3183,29],[3103,28,3183,30],[3103,29,3183,31],[3104,6,3184,8,"pluginHandlers"],[3104,20,3184,22],[3104,21,3184,23,"forEach"],[3104,28,3184,30],[3104,29,3184,32,"h"],[3104,30,3184,33],[3104,34,3184,38,"h"],[3104,35,3184,39],[3104,36,3184,40],[3104,37,3184,41],[3104,38,3184,42],[3105,4,3185,4],[3105,5,3185,5],[3105,6,3185,6],[3106,2,3186,0],[3107,2,3187,0],[3107,11,3187,9,"hasNestedCSSRule"],[3107,27,3187,25,"hasNestedCSSRule"],[3107,28,3187,26,"prop"],[3107,32,3187,30],[3107,34,3187,32],[3108,4,3188,4],[3108,11,3188,11],[3108,18,3188,18,"window"],[3108,24,3188,24],[3108,25,3188,25,"prop"],[3108,29,3188,29],[3108,30,3188,30],[3108,35,3188,35],[3108,46,3188,46],[3109,2,3189,0],[3110,2,3190,0],[3110,11,3190,9,"canMonkeyPatchNestedCSSRule"],[3110,38,3190,36,"canMonkeyPatchNestedCSSRule"],[3110,39,3190,37,"prop"],[3110,43,3190,41],[3110,45,3190,43],[3111,4,3191,4],[3111,11,3191,11,"Boolean"],[3111,18,3191,18],[3111,19,3191,19],[3111,26,3191,26,"window"],[3111,32,3191,32],[3111,33,3191,33,"prop"],[3111,37,3191,37],[3111,38,3191,38],[3111,43,3191,43],[3111,54,3191,54],[3111,58,3192,8,"window"],[3111,64,3192,14],[3111,65,3192,15,"prop"],[3111,69,3192,19],[3111,70,3192,20],[3111,71,3192,21,"prototype"],[3111,80,3192,30],[3111,84,3193,8],[3111,96,3193,20],[3111,100,3193,24,"window"],[3111,106,3193,30],[3111,107,3193,31,"prop"],[3111,111,3193,35],[3111,112,3193,36],[3111,113,3193,37,"prototype"],[3111,122,3193,46],[3111,126,3194,8],[3111,138,3194,20],[3111,142,3194,24,"window"],[3111,148,3194,30],[3111,149,3194,31,"prop"],[3111,153,3194,35],[3111,154,3194,36],[3111,155,3194,37,"prototype"],[3111,164,3194,46],[3111,165,3194,47],[3112,2,3195,0],[3113,2,3197,0],[3113,8,3197,6,"CrossOriginIframeMirror"],[3113,31,3197,29],[3113,32,3197,30],[3114,4,3198,4,"constructor"],[3114,15,3198,15,"constructor"],[3114,16,3198,16,"generateIdFn"],[3114,28,3198,28],[3114,30,3198,30],[3115,6,3199,8],[3115,10,3199,12],[3115,11,3199,13,"generateIdFn"],[3115,23,3199,25],[3115,26,3199,28,"generateIdFn"],[3115,38,3199,40],[3116,6,3200,8],[3116,10,3200,12],[3116,11,3200,13,"iframeIdToRemoteIdMap"],[3116,32,3200,34],[3116,35,3200,37],[3116,39,3200,41,"WeakMap"],[3116,46,3200,48],[3116,47,3200,49],[3116,48,3200,50],[3117,6,3201,8],[3117,10,3201,12],[3117,11,3201,13,"iframeRemoteIdToIdMap"],[3117,32,3201,34],[3117,35,3201,37],[3117,39,3201,41,"WeakMap"],[3117,46,3201,48],[3117,47,3201,49],[3117,48,3201,50],[3118,4,3202,4],[3119,4,3203,4,"getId"],[3119,9,3203,9,"getId"],[3119,10,3203,10,"iframe"],[3119,16,3203,16],[3119,18,3203,18,"remoteId"],[3119,26,3203,26],[3119,28,3203,28,"idToRemoteMap"],[3119,41,3203,41],[3119,43,3203,43,"remoteToIdMap"],[3119,56,3203,56],[3119,58,3203,58],[3120,6,3204,8],[3120,12,3204,14,"idToRemoteIdMap"],[3120,27,3204,29],[3120,30,3204,32,"idToRemoteMap"],[3120,43,3204,45],[3120,47,3204,49],[3120,51,3204,53],[3120,52,3204,54,"getIdToRemoteIdMap"],[3120,70,3204,72],[3120,71,3204,73,"iframe"],[3120,77,3204,79],[3120,78,3204,80],[3121,6,3205,8],[3121,12,3205,14,"remoteIdToIdMap"],[3121,27,3205,29],[3121,30,3205,32,"remoteToIdMap"],[3121,43,3205,45],[3121,47,3205,49],[3121,51,3205,53],[3121,52,3205,54,"getRemoteIdToIdMap"],[3121,70,3205,72],[3121,71,3205,73,"iframe"],[3121,77,3205,79],[3121,78,3205,80],[3122,6,3206,8],[3122,10,3206,12,"id"],[3122,12,3206,14],[3122,15,3206,17,"idToRemoteIdMap"],[3122,30,3206,32],[3122,31,3206,33,"get"],[3122,34,3206,36],[3122,35,3206,37,"remoteId"],[3122,43,3206,45],[3122,44,3206,46],[3123,6,3207,8],[3123,10,3207,12],[3123,11,3207,13,"id"],[3123,13,3207,15],[3123,15,3207,17],[3124,8,3208,12,"id"],[3124,10,3208,14],[3124,13,3208,17],[3124,17,3208,21],[3124,18,3208,22,"generateIdFn"],[3124,30,3208,34],[3124,31,3208,35],[3124,32,3208,36],[3125,8,3209,12,"idToRemoteIdMap"],[3125,23,3209,27],[3125,24,3209,28,"set"],[3125,27,3209,31],[3125,28,3209,32,"remoteId"],[3125,36,3209,40],[3125,38,3209,42,"id"],[3125,40,3209,44],[3125,41,3209,45],[3126,8,3210,12,"remoteIdToIdMap"],[3126,23,3210,27],[3126,24,3210,28,"set"],[3126,27,3210,31],[3126,28,3210,32,"id"],[3126,30,3210,34],[3126,32,3210,36,"remoteId"],[3126,40,3210,44],[3126,41,3210,45],[3127,6,3211,8],[3128,6,3212,8],[3128,13,3212,15,"id"],[3128,15,3212,17],[3129,4,3213,4],[3130,4,3214,4,"getIds"],[3130,10,3214,10,"getIds"],[3130,11,3214,11,"iframe"],[3130,17,3214,17],[3130,19,3214,19,"remoteId"],[3130,27,3214,27],[3130,29,3214,29],[3131,6,3215,8],[3131,12,3215,14,"idToRemoteIdMap"],[3131,27,3215,29],[3131,30,3215,32],[3131,34,3215,36],[3131,35,3215,37,"getIdToRemoteIdMap"],[3131,53,3215,55],[3131,54,3215,56,"iframe"],[3131,60,3215,62],[3131,61,3215,63],[3132,6,3216,8],[3132,12,3216,14,"remoteIdToIdMap"],[3132,27,3216,29],[3132,30,3216,32],[3132,34,3216,36],[3132,35,3216,37,"getRemoteIdToIdMap"],[3132,53,3216,55],[3132,54,3216,56,"iframe"],[3132,60,3216,62],[3132,61,3216,63],[3133,6,3217,8],[3133,13,3217,15,"remoteId"],[3133,21,3217,23],[3133,22,3217,24,"map"],[3133,25,3217,27],[3133,26,3217,29,"id"],[3133,28,3217,31],[3133,32,3217,36],[3133,36,3217,40],[3133,37,3217,41,"getId"],[3133,42,3217,46],[3133,43,3217,47,"iframe"],[3133,49,3217,53],[3133,51,3217,55,"id"],[3133,53,3217,57],[3133,55,3217,59,"idToRemoteIdMap"],[3133,70,3217,74],[3133,72,3217,76,"remoteIdToIdMap"],[3133,87,3217,91],[3133,88,3217,92],[3133,89,3217,93],[3134,4,3218,4],[3135,4,3219,4,"getRemoteId"],[3135,15,3219,15,"getRemoteId"],[3135,16,3219,16,"iframe"],[3135,22,3219,22],[3135,24,3219,24,"id"],[3135,26,3219,26],[3135,28,3219,28,"map"],[3135,31,3219,31],[3135,33,3219,33],[3136,6,3220,8],[3136,12,3220,14,"remoteIdToIdMap"],[3136,27,3220,29],[3136,30,3220,32,"map"],[3136,33,3220,35],[3136,37,3220,39],[3136,41,3220,43],[3136,42,3220,44,"getRemoteIdToIdMap"],[3136,60,3220,62],[3136,61,3220,63,"iframe"],[3136,67,3220,69],[3136,68,3220,70],[3137,6,3221,8],[3137,10,3221,12],[3137,17,3221,19,"id"],[3137,19,3221,21],[3137,24,3221,26],[3137,32,3221,34],[3137,34,3222,12],[3137,41,3222,19,"id"],[3137,43,3222,21],[3138,6,3223,8],[3138,12,3223,14,"remoteId"],[3138,20,3223,22],[3138,23,3223,25,"remoteIdToIdMap"],[3138,38,3223,40],[3138,39,3223,41,"get"],[3138,42,3223,44],[3138,43,3223,45,"id"],[3138,45,3223,47],[3138,46,3223,48],[3139,6,3224,8],[3139,10,3224,12],[3139,11,3224,13,"remoteId"],[3139,19,3224,21],[3139,21,3225,12],[3139,28,3225,19],[3139,29,3225,20],[3139,30,3225,21],[3140,6,3226,8],[3140,13,3226,15,"remoteId"],[3140,21,3226,23],[3141,4,3227,4],[3142,4,3228,4,"getRemoteIds"],[3142,16,3228,16,"getRemoteIds"],[3142,17,3228,17,"iframe"],[3142,23,3228,23],[3142,25,3228,25,"ids"],[3142,28,3228,28],[3142,30,3228,30],[3143,6,3229,8],[3143,12,3229,14,"remoteIdToIdMap"],[3143,27,3229,29],[3143,30,3229,32],[3143,34,3229,36],[3143,35,3229,37,"getRemoteIdToIdMap"],[3143,53,3229,55],[3143,54,3229,56,"iframe"],[3143,60,3229,62],[3143,61,3229,63],[3144,6,3230,8],[3144,13,3230,15,"ids"],[3144,16,3230,18],[3144,17,3230,19,"map"],[3144,20,3230,22],[3144,21,3230,24,"id"],[3144,23,3230,26],[3144,27,3230,31],[3144,31,3230,35],[3144,32,3230,36,"getRemoteId"],[3144,43,3230,47],[3144,44,3230,48,"iframe"],[3144,50,3230,54],[3144,52,3230,56,"id"],[3144,54,3230,58],[3144,56,3230,60,"remoteIdToIdMap"],[3144,71,3230,75],[3144,72,3230,76],[3144,73,3230,77],[3145,4,3231,4],[3146,4,3232,4,"reset"],[3146,9,3232,9,"reset"],[3146,10,3232,10,"iframe"],[3146,16,3232,16],[3146,18,3232,18],[3147,6,3233,8],[3147,10,3233,12],[3147,11,3233,13,"iframe"],[3147,17,3233,19],[3147,19,3233,21],[3148,8,3234,12],[3148,12,3234,16],[3148,13,3234,17,"iframeIdToRemoteIdMap"],[3148,34,3234,38],[3148,37,3234,41],[3148,41,3234,45,"WeakMap"],[3148,48,3234,52],[3148,49,3234,53],[3148,50,3234,54],[3149,8,3235,12],[3149,12,3235,16],[3149,13,3235,17,"iframeRemoteIdToIdMap"],[3149,34,3235,38],[3149,37,3235,41],[3149,41,3235,45,"WeakMap"],[3149,48,3235,52],[3149,49,3235,53],[3149,50,3235,54],[3150,8,3236,12],[3151,6,3237,8],[3152,6,3238,8],[3152,10,3238,12],[3152,11,3238,13,"iframeIdToRemoteIdMap"],[3152,32,3238,34],[3152,33,3238,35,"delete"],[3152,39,3238,41],[3152,40,3238,42,"iframe"],[3152,46,3238,48],[3152,47,3238,49],[3153,6,3239,8],[3153,10,3239,12],[3153,11,3239,13,"iframeRemoteIdToIdMap"],[3153,32,3239,34],[3153,33,3239,35,"delete"],[3153,39,3239,41],[3153,40,3239,42,"iframe"],[3153,46,3239,48],[3153,47,3239,49],[3154,4,3240,4],[3155,4,3241,4,"getIdToRemoteIdMap"],[3155,22,3241,22,"getIdToRemoteIdMap"],[3155,23,3241,23,"iframe"],[3155,29,3241,29],[3155,31,3241,31],[3156,6,3242,8],[3156,10,3242,12,"idToRemoteIdMap"],[3156,25,3242,27],[3156,28,3242,30],[3156,32,3242,34],[3156,33,3242,35,"iframeIdToRemoteIdMap"],[3156,54,3242,56],[3156,55,3242,57,"get"],[3156,58,3242,60],[3156,59,3242,61,"iframe"],[3156,65,3242,67],[3156,66,3242,68],[3157,6,3243,8],[3157,10,3243,12],[3157,11,3243,13,"idToRemoteIdMap"],[3157,26,3243,28],[3157,28,3243,30],[3158,8,3244,12,"idToRemoteIdMap"],[3158,23,3244,27],[3158,26,3244,30],[3158,30,3244,34,"Map"],[3158,33,3244,37],[3158,34,3244,38],[3158,35,3244,39],[3159,8,3245,12],[3159,12,3245,16],[3159,13,3245,17,"iframeIdToRemoteIdMap"],[3159,34,3245,38],[3159,35,3245,39,"set"],[3159,38,3245,42],[3159,39,3245,43,"iframe"],[3159,45,3245,49],[3159,47,3245,51,"idToRemoteIdMap"],[3159,62,3245,66],[3159,63,3245,67],[3160,6,3246,8],[3161,6,3247,8],[3161,13,3247,15,"idToRemoteIdMap"],[3161,28,3247,30],[3162,4,3248,4],[3163,4,3249,4,"getRemoteIdToIdMap"],[3163,22,3249,22,"getRemoteIdToIdMap"],[3163,23,3249,23,"iframe"],[3163,29,3249,29],[3163,31,3249,31],[3164,6,3250,8],[3164,10,3250,12,"remoteIdToIdMap"],[3164,25,3250,27],[3164,28,3250,30],[3164,32,3250,34],[3164,33,3250,35,"iframeRemoteIdToIdMap"],[3164,54,3250,56],[3164,55,3250,57,"get"],[3164,58,3250,60],[3164,59,3250,61,"iframe"],[3164,65,3250,67],[3164,66,3250,68],[3165,6,3251,8],[3165,10,3251,12],[3165,11,3251,13,"remoteIdToIdMap"],[3165,26,3251,28],[3165,28,3251,30],[3166,8,3252,12,"remoteIdToIdMap"],[3166,23,3252,27],[3166,26,3252,30],[3166,30,3252,34,"Map"],[3166,33,3252,37],[3166,34,3252,38],[3166,35,3252,39],[3167,8,3253,12],[3167,12,3253,16],[3167,13,3253,17,"iframeRemoteIdToIdMap"],[3167,34,3253,38],[3167,35,3253,39,"set"],[3167,38,3253,42],[3167,39,3253,43,"iframe"],[3167,45,3253,49],[3167,47,3253,51,"remoteIdToIdMap"],[3167,62,3253,66],[3167,63,3253,67],[3168,6,3254,8],[3169,6,3255,8],[3169,13,3255,15,"remoteIdToIdMap"],[3169,28,3255,30],[3170,4,3256,4],[3171,2,3257,0],[3172,2,3259,0],[3172,11,3259,9,"_optionalChain$1"],[3172,27,3259,25,"_optionalChain$1"],[3172,28,3259,26,"ops"],[3172,31,3259,29],[3172,33,3259,31],[3173,4,3259,33],[3173,8,3259,37,"lastAccessLHS"],[3173,21,3259,50],[3173,24,3259,53,"undefined"],[3173,33,3259,62],[3174,4,3259,64],[3174,8,3259,68,"value"],[3174,13,3259,73],[3174,16,3259,76,"ops"],[3174,19,3259,79],[3174,20,3259,80],[3174,21,3259,81],[3174,22,3259,82],[3175,4,3259,84],[3175,8,3259,88,"i"],[3175,9,3259,89],[3175,12,3259,92],[3175,13,3259,93],[3176,4,3259,95],[3176,11,3259,102,"i"],[3176,12,3259,103],[3176,15,3259,106,"ops"],[3176,18,3259,109],[3176,19,3259,110,"length"],[3176,25,3259,116],[3176,27,3259,118],[3177,6,3259,120],[3177,12,3259,126,"op"],[3177,14,3259,128],[3177,17,3259,131,"ops"],[3177,20,3259,134],[3177,21,3259,135,"i"],[3177,22,3259,136],[3177,23,3259,137],[3178,6,3259,139],[3178,12,3259,145,"fn"],[3178,14,3259,147],[3178,17,3259,150,"ops"],[3178,20,3259,153],[3178,21,3259,154,"i"],[3178,22,3259,155],[3178,25,3259,158],[3178,26,3259,159],[3178,27,3259,160],[3179,6,3259,162,"i"],[3179,7,3259,163],[3179,11,3259,167],[3179,12,3259,168],[3180,6,3259,170],[3180,10,3259,174],[3180,11,3259,175,"op"],[3180,13,3259,177],[3180,18,3259,182],[3180,34,3259,198],[3180,38,3259,202,"op"],[3180,40,3259,204],[3180,45,3259,209],[3180,59,3259,223],[3180,64,3259,228,"value"],[3180,69,3259,233],[3180,73,3259,237],[3180,77,3259,241],[3180,79,3259,243],[3181,8,3259,245],[3181,15,3259,252,"undefined"],[3181,24,3259,261],[3182,6,3259,263],[3183,6,3259,265],[3183,10,3259,269,"op"],[3183,12,3259,271],[3183,17,3259,276],[3183,25,3259,284],[3183,29,3259,288,"op"],[3183,31,3259,290],[3183,36,3259,295],[3183,52,3259,311],[3183,54,3259,313],[3184,8,3259,315,"lastAccessLHS"],[3184,21,3259,328],[3184,24,3259,331,"value"],[3184,29,3259,336],[3185,8,3259,338,"value"],[3185,13,3259,343],[3185,16,3259,346,"fn"],[3185,18,3259,348],[3185,19,3259,349,"value"],[3185,24,3259,354],[3185,25,3259,355],[3186,6,3259,357],[3186,7,3259,358],[3186,13,3259,364],[3186,17,3259,368,"op"],[3186,19,3259,370],[3186,24,3259,375],[3186,30,3259,381],[3186,34,3259,385,"op"],[3186,36,3259,387],[3186,41,3259,392],[3186,55,3259,406],[3186,57,3259,408],[3187,8,3259,410,"value"],[3187,13,3259,415],[3187,16,3259,418,"fn"],[3187,18,3259,420],[3187,19,3259,421],[3187,20,3259,422],[3187,23,3259,425,"args"],[3187,27,3259,429],[3187,32,3259,434,"value"],[3187,37,3259,439],[3187,38,3259,440,"call"],[3187,42,3259,444],[3187,43,3259,445,"lastAccessLHS"],[3187,56,3259,458],[3187,58,3259,460],[3187,61,3259,463,"args"],[3187,65,3259,467],[3187,66,3259,468],[3187,67,3259,469],[3188,8,3259,471,"lastAccessLHS"],[3188,21,3259,484],[3188,24,3259,487,"undefined"],[3188,33,3259,496],[3189,6,3259,498],[3190,4,3259,500],[3191,4,3259,502],[3191,11,3259,509,"value"],[3191,16,3259,514],[3192,2,3259,516],[3193,2,3260,0],[3193,8,3260,6,"IframeManagerNoop"],[3193,25,3260,23],[3193,26,3260,24],[3194,4,3261,4,"constructor"],[3194,15,3261,15,"constructor"],[3194,16,3261,15],[3194,18,3261,18],[3195,6,3262,8],[3195,10,3262,12],[3195,11,3262,13,"crossOriginIframeMirror"],[3195,34,3262,36],[3195,37,3262,39],[3195,41,3262,43,"CrossOriginIframeMirror"],[3195,64,3262,66],[3195,65,3262,67,"genId"],[3195,70,3262,72],[3195,71,3262,73],[3196,6,3263,8],[3196,10,3263,12],[3196,11,3263,13,"crossOriginIframeRootIdMap"],[3196,37,3263,39],[3196,40,3263,42],[3196,44,3263,46,"WeakMap"],[3196,51,3263,53],[3196,52,3263,54],[3196,53,3263,55],[3197,4,3264,4],[3198,4,3265,4,"addIframe"],[3198,13,3265,13,"addIframe"],[3198,14,3265,13],[3198,16,3265,16],[3198,17,3266,4],[3199,4,3267,4,"addLoadListener"],[3199,19,3267,19,"addLoadListener"],[3199,20,3267,19],[3199,22,3267,22],[3199,23,3268,4],[3200,4,3269,4,"attachIframe"],[3200,16,3269,16,"attachIframe"],[3200,17,3269,16],[3200,19,3269,19],[3200,20,3270,4],[3201,2,3271,0],[3202,2,3272,0],[3202,8,3272,6,"IframeManager"],[3202,21,3272,19],[3202,22,3272,20],[3203,4,3273,4,"constructor"],[3203,15,3273,15,"constructor"],[3203,16,3273,16,"options"],[3203,23,3273,23],[3203,25,3273,25],[3204,6,3274,8],[3204,10,3274,12],[3204,11,3274,13,"iframes"],[3204,18,3274,20],[3204,21,3274,23],[3204,25,3274,27,"WeakMap"],[3204,32,3274,34],[3204,33,3274,35],[3204,34,3274,36],[3205,6,3275,8],[3205,10,3275,12],[3205,11,3275,13,"crossOriginIframeMap"],[3205,31,3275,33],[3205,34,3275,36],[3205,38,3275,40,"WeakMap"],[3205,45,3275,47],[3205,46,3275,48],[3205,47,3275,49],[3206,6,3276,8],[3206,10,3276,12],[3206,11,3276,13,"crossOriginIframeMirror"],[3206,34,3276,36],[3206,37,3276,39],[3206,41,3276,43,"CrossOriginIframeMirror"],[3206,64,3276,66],[3206,65,3276,67,"genId"],[3206,70,3276,72],[3206,71,3276,73],[3207,6,3277,8],[3207,10,3277,12],[3207,11,3277,13,"crossOriginIframeRootIdMap"],[3207,37,3277,39],[3207,40,3277,42],[3207,44,3277,46,"WeakMap"],[3207,51,3277,53],[3207,52,3277,54],[3207,53,3277,55],[3208,6,3278,8],[3208,10,3278,12],[3208,11,3278,13,"mutationCb"],[3208,21,3278,23],[3208,24,3278,26,"options"],[3208,31,3278,33],[3208,32,3278,34,"mutationCb"],[3208,42,3278,44],[3209,6,3279,8],[3209,10,3279,12],[3209,11,3279,13,"wrappedEmit"],[3209,22,3279,24],[3209,25,3279,27,"options"],[3209,32,3279,34],[3209,33,3279,35,"wrappedEmit"],[3209,44,3279,46],[3210,6,3280,8],[3210,10,3280,12],[3210,11,3280,13,"stylesheetManager"],[3210,28,3280,30],[3210,31,3280,33,"options"],[3210,38,3280,40],[3210,39,3280,41,"stylesheetManager"],[3210,56,3280,58],[3211,6,3281,8],[3211,10,3281,12],[3211,11,3281,13,"recordCrossOriginIframes"],[3211,35,3281,37],[3211,38,3281,40,"options"],[3211,45,3281,47],[3211,46,3281,48,"recordCrossOriginIframes"],[3211,70,3281,72],[3212,6,3282,8],[3212,10,3282,12],[3212,11,3282,13,"crossOriginIframeStyleMirror"],[3212,39,3282,41],[3212,42,3282,44],[3212,46,3282,48,"CrossOriginIframeMirror"],[3212,69,3282,71],[3212,70,3282,72],[3212,74,3282,76],[3212,75,3282,77,"stylesheetManager"],[3212,92,3282,94],[3212,93,3282,95,"styleMirror"],[3212,104,3282,106],[3212,105,3282,107,"generateId"],[3212,115,3282,117],[3212,116,3282,118,"bind"],[3212,120,3282,122],[3212,121,3282,123],[3212,125,3282,127],[3212,126,3282,128,"stylesheetManager"],[3212,143,3282,145],[3212,144,3282,146,"styleMirror"],[3212,155,3282,157],[3212,156,3282,158],[3212,157,3282,159],[3213,6,3283,8],[3213,10,3283,12],[3213,11,3283,13,"mirror"],[3213,17,3283,19],[3213,20,3283,22,"options"],[3213,27,3283,29],[3213,28,3283,30,"mirror"],[3213,34,3283,36],[3214,6,3284,8],[3214,10,3284,12],[3214,14,3284,16],[3214,15,3284,17,"recordCrossOriginIframes"],[3214,39,3284,41],[3214,41,3284,43],[3215,8,3285,12,"window"],[3215,14,3285,18],[3215,15,3285,19,"addEventListener"],[3215,31,3285,35],[3215,32,3285,36],[3215,41,3285,45],[3215,43,3285,47],[3215,47,3285,51],[3215,48,3285,52,"handleMessage"],[3215,61,3285,65],[3215,62,3285,66,"bind"],[3215,66,3285,70],[3215,67,3285,71],[3215,71,3285,75],[3215,72,3285,76],[3215,73,3285,77],[3216,6,3286,8],[3217,4,3287,4],[3218,4,3288,4,"addIframe"],[3218,13,3288,13,"addIframe"],[3218,14,3288,14,"iframeEl"],[3218,22,3288,22],[3218,24,3288,24],[3219,6,3289,8],[3219,10,3289,12],[3219,11,3289,13,"iframes"],[3219,18,3289,20],[3219,19,3289,21,"set"],[3219,22,3289,24],[3219,23,3289,25,"iframeEl"],[3219,31,3289,33],[3219,33,3289,35],[3219,37,3289,39],[3219,38,3289,40],[3220,6,3290,8],[3220,10,3290,12,"iframeEl"],[3220,18,3290,20],[3220,19,3290,21,"contentWindow"],[3220,32,3290,34],[3220,34,3291,12],[3220,38,3291,16],[3220,39,3291,17,"crossOriginIframeMap"],[3220,59,3291,37],[3220,60,3291,38,"set"],[3220,63,3291,41],[3220,64,3291,42,"iframeEl"],[3220,72,3291,50],[3220,73,3291,51,"contentWindow"],[3220,86,3291,64],[3220,88,3291,66,"iframeEl"],[3220,96,3291,74],[3220,97,3291,75],[3221,4,3292,4],[3222,4,3293,4,"addLoadListener"],[3222,19,3293,19,"addLoadListener"],[3222,20,3293,20,"cb"],[3222,22,3293,22],[3222,24,3293,24],[3223,6,3294,8],[3223,10,3294,12],[3223,11,3294,13,"loadListener"],[3223,23,3294,25],[3223,26,3294,28,"cb"],[3223,28,3294,30],[3224,4,3295,4],[3225,4,3296,4,"attachIframe"],[3225,16,3296,16,"attachIframe"],[3225,17,3296,17,"iframeEl"],[3225,25,3296,25],[3225,27,3296,27,"childSn"],[3225,34,3296,34],[3225,36,3296,36],[3226,6,3297,8],[3226,10,3297,12],[3226,11,3297,13,"mutationCb"],[3226,21,3297,23],[3226,22,3297,24],[3227,8,3298,12,"adds"],[3227,12,3298,16],[3227,14,3298,18],[3227,15,3299,16],[3228,10,3300,20,"parentId"],[3228,18,3300,28],[3228,20,3300,30],[3228,24,3300,34],[3228,25,3300,35,"mirror"],[3228,31,3300,41],[3228,32,3300,42,"getId"],[3228,37,3300,47],[3228,38,3300,48,"iframeEl"],[3228,46,3300,56],[3228,47,3300,57],[3229,10,3301,20,"nextId"],[3229,16,3301,26],[3229,18,3301,28],[3229,22,3301,32],[3230,10,3302,20,"node"],[3230,14,3302,24],[3230,16,3302,26,"childSn"],[3231,8,3303,16],[3231,9,3303,17],[3231,10,3304,13],[3232,8,3305,12,"removes"],[3232,15,3305,19],[3232,17,3305,21],[3232,19,3305,23],[3233,8,3306,12,"texts"],[3233,13,3306,17],[3233,15,3306,19],[3233,17,3306,21],[3234,8,3307,12,"attributes"],[3234,18,3307,22],[3234,20,3307,24],[3234,22,3307,26],[3235,8,3308,12,"isAttachIframe"],[3235,22,3308,26],[3235,24,3308,28],[3236,6,3309,8],[3236,7,3309,9],[3236,8,3309,10],[3237,6,3310,8,"_optionalChain$1"],[3237,22,3310,24],[3237,23,3310,25],[3237,24,3310,26],[3237,28,3310,30],[3237,30,3310,32],[3237,38,3310,40],[3237,40,3310,42,"_"],[3237,41,3310,43],[3237,45,3310,47,"_"],[3237,46,3310,48],[3237,47,3310,49,"loadListener"],[3237,59,3310,61],[3237,61,3310,63],[3237,75,3310,77],[3237,77,3310,79,"_2"],[3237,79,3310,81],[3237,83,3310,85,"_2"],[3237,85,3310,87],[3237,86,3310,88,"iframeEl"],[3237,94,3310,96],[3237,95,3310,97],[3237,96,3310,98],[3237,97,3310,99],[3238,6,3311,8],[3238,12,3311,14,"iframeDoc"],[3238,21,3311,23],[3238,24,3311,26,"getIFrameContentDocument"],[3238,48,3311,50],[3238,49,3311,51,"iframeEl"],[3238,57,3311,59],[3238,58,3311,60],[3239,6,3312,8],[3239,10,3312,12,"iframeDoc"],[3239,19,3312,21],[3239,23,3313,12,"iframeDoc"],[3239,32,3313,21],[3239,33,3313,22,"adoptedStyleSheets"],[3239,51,3313,40],[3239,55,3314,12,"iframeDoc"],[3239,64,3314,21],[3239,65,3314,22,"adoptedStyleSheets"],[3239,83,3314,40],[3239,84,3314,41,"length"],[3239,90,3314,47],[3239,93,3314,50],[3239,94,3314,51],[3239,96,3315,12],[3239,100,3315,16],[3239,101,3315,17,"stylesheetManager"],[3239,118,3315,34],[3239,119,3315,35,"adoptStyleSheets"],[3239,135,3315,51],[3239,136,3315,52,"iframeDoc"],[3239,145,3315,61],[3239,146,3315,62,"adoptedStyleSheets"],[3239,164,3315,80],[3239,166,3315,82],[3239,170,3315,86],[3239,171,3315,87,"mirror"],[3239,177,3315,93],[3239,178,3315,94,"getId"],[3239,183,3315,99],[3239,184,3315,100,"iframeDoc"],[3239,193,3315,109],[3239,194,3315,110],[3239,195,3315,111],[3240,4,3316,4],[3241,4,3317,4,"handleMessage"],[3241,17,3317,17,"handleMessage"],[3241,18,3317,18,"message"],[3241,25,3317,25],[3241,27,3317,27],[3242,6,3318,8],[3242,12,3318,14,"crossOriginMessageEvent"],[3242,35,3318,37],[3242,38,3318,40,"message"],[3242,45,3318,47],[3243,6,3319,8],[3243,10,3319,12,"crossOriginMessageEvent"],[3243,33,3319,35],[3243,34,3319,36,"data"],[3243,38,3319,40],[3243,39,3319,41,"type"],[3243,43,3319,45],[3243,48,3319,50],[3243,55,3319,57],[3243,59,3320,12,"crossOriginMessageEvent"],[3243,82,3320,35],[3243,83,3320,36,"origin"],[3243,89,3320,42],[3243,94,3320,47,"crossOriginMessageEvent"],[3243,117,3320,70],[3243,118,3320,71,"data"],[3243,122,3320,75],[3243,123,3320,76,"origin"],[3243,129,3320,82],[3243,131,3321,12],[3244,6,3322,8],[3244,12,3322,14,"iframeSourceWindow"],[3244,30,3322,32],[3244,33,3322,35,"message"],[3244,40,3322,42],[3244,41,3322,43,"source"],[3244,47,3322,49],[3245,6,3323,8],[3245,10,3323,12],[3245,11,3323,13,"iframeSourceWindow"],[3245,29,3323,31],[3245,31,3324,12],[3246,6,3325,8],[3246,12,3325,14,"iframeEl"],[3246,20,3325,22],[3246,23,3325,25],[3246,27,3325,29],[3246,28,3325,30,"crossOriginIframeMap"],[3246,48,3325,50],[3246,49,3325,51,"get"],[3246,52,3325,54],[3246,53,3325,55,"message"],[3246,60,3325,62],[3246,61,3325,63,"source"],[3246,67,3325,69],[3246,68,3325,70],[3247,6,3326,8],[3247,10,3326,12],[3247,11,3326,13,"iframeEl"],[3247,19,3326,21],[3247,21,3327,12],[3248,6,3328,8],[3248,12,3328,14,"transformedEvent"],[3248,28,3328,30],[3248,31,3328,33],[3248,35,3328,37],[3248,36,3328,38,"transformCrossOriginEvent"],[3248,61,3328,63],[3248,62,3328,64,"iframeEl"],[3248,70,3328,72],[3248,72,3328,74,"crossOriginMessageEvent"],[3248,95,3328,97],[3248,96,3328,98,"data"],[3248,100,3328,102],[3248,101,3328,103,"event"],[3248,106,3328,108],[3248,107,3328,109],[3249,6,3329,8],[3249,10,3329,12,"transformedEvent"],[3249,26,3329,28],[3249,28,3330,12],[3249,32,3330,16],[3249,33,3330,17,"wrappedEmit"],[3249,44,3330,28],[3249,45,3330,29,"transformedEvent"],[3249,61,3330,45],[3249,63,3330,47,"crossOriginMessageEvent"],[3249,86,3330,70],[3249,87,3330,71,"data"],[3249,91,3330,75],[3249,92,3330,76,"isCheckout"],[3249,102,3330,86],[3249,103,3330,87],[3250,4,3331,4],[3251,4,3332,4,"transformCrossOriginEvent"],[3251,29,3332,29,"transformCrossOriginEvent"],[3251,30,3332,30,"iframeEl"],[3251,38,3332,38],[3251,40,3332,40,"e"],[3251,41,3332,41],[3251,43,3332,43],[3252,6,3333,8],[3252,14,3333,16,"e"],[3252,15,3333,17],[3252,16,3333,18,"type"],[3252,20,3333,22],[3253,8,3334,12],[3253,13,3334,17,"EventType"],[3253,22,3334,26],[3253,23,3334,27,"FullSnapshot"],[3253,35,3334,39],[3254,10,3334,41],[3255,12,3335,16],[3255,16,3335,20],[3255,17,3335,21,"crossOriginIframeMirror"],[3255,40,3335,44],[3255,41,3335,45,"reset"],[3255,46,3335,50],[3255,47,3335,51,"iframeEl"],[3255,55,3335,59],[3255,56,3335,60],[3256,12,3336,16],[3256,16,3336,20],[3256,17,3336,21,"crossOriginIframeStyleMirror"],[3256,45,3336,49],[3256,46,3336,50,"reset"],[3256,51,3336,55],[3256,52,3336,56,"iframeEl"],[3256,60,3336,64],[3256,61,3336,65],[3257,12,3337,16],[3257,16,3337,20],[3257,17,3337,21,"replaceIdOnNode"],[3257,32,3337,36],[3257,33,3337,37,"e"],[3257,34,3337,38],[3257,35,3337,39,"data"],[3257,39,3337,43],[3257,40,3337,44,"node"],[3257,44,3337,48],[3257,46,3337,50,"iframeEl"],[3257,54,3337,58],[3257,55,3337,59],[3258,12,3338,16],[3258,18,3338,22,"rootId"],[3258,24,3338,28],[3258,27,3338,31,"e"],[3258,28,3338,32],[3258,29,3338,33,"data"],[3258,33,3338,37],[3258,34,3338,38,"node"],[3258,38,3338,42],[3258,39,3338,43,"id"],[3258,41,3338,45],[3259,12,3339,16],[3259,16,3339,20],[3259,17,3339,21,"crossOriginIframeRootIdMap"],[3259,43,3339,47],[3259,44,3339,48,"set"],[3259,47,3339,51],[3259,48,3339,52,"iframeEl"],[3259,56,3339,60],[3259,58,3339,62,"rootId"],[3259,64,3339,68],[3259,65,3339,69],[3260,12,3340,16],[3260,16,3340,20],[3260,17,3340,21,"patchRootIdOnNode"],[3260,34,3340,38],[3260,35,3340,39,"e"],[3260,36,3340,40],[3260,37,3340,41,"data"],[3260,41,3340,45],[3260,42,3340,46,"node"],[3260,46,3340,50],[3260,48,3340,52,"rootId"],[3260,54,3340,58],[3260,55,3340,59],[3261,12,3341,16],[3261,19,3341,23],[3262,14,3342,20,"timestamp"],[3262,23,3342,29],[3262,25,3342,31,"e"],[3262,26,3342,32],[3262,27,3342,33,"timestamp"],[3262,36,3342,42],[3263,14,3343,20,"type"],[3263,18,3343,24],[3263,20,3343,26,"EventType"],[3263,29,3343,35],[3263,30,3343,36,"IncrementalSnapshot"],[3263,49,3343,55],[3264,14,3344,20,"data"],[3264,18,3344,24],[3264,20,3344,26],[3265,16,3345,24,"source"],[3265,22,3345,30],[3265,24,3345,32,"IncrementalSource"],[3265,41,3345,49],[3265,42,3345,50,"Mutation"],[3265,50,3345,58],[3266,16,3346,24,"adds"],[3266,20,3346,28],[3266,22,3346,30],[3266,23,3347,28],[3267,18,3348,32,"parentId"],[3267,26,3348,40],[3267,28,3348,42],[3267,32,3348,46],[3267,33,3348,47,"mirror"],[3267,39,3348,53],[3267,40,3348,54,"getId"],[3267,45,3348,59],[3267,46,3348,60,"iframeEl"],[3267,54,3348,68],[3267,55,3348,69],[3268,18,3349,32,"nextId"],[3268,24,3349,38],[3268,26,3349,40],[3268,30,3349,44],[3269,18,3350,32,"node"],[3269,22,3350,36],[3269,24,3350,38,"e"],[3269,25,3350,39],[3269,26,3350,40,"data"],[3269,30,3350,44],[3269,31,3350,45,"node"],[3270,16,3351,28],[3270,17,3351,29],[3270,18,3352,25],[3271,16,3353,24,"removes"],[3271,23,3353,31],[3271,25,3353,33],[3271,27,3353,35],[3272,16,3354,24,"texts"],[3272,21,3354,29],[3272,23,3354,31],[3272,25,3354,33],[3273,16,3355,24,"attributes"],[3273,26,3355,34],[3273,28,3355,36],[3273,30,3355,38],[3274,16,3356,24,"isAttachIframe"],[3274,30,3356,38],[3274,32,3356,40],[3275,14,3357,20],[3276,12,3358,16],[3276,13,3358,17],[3277,10,3359,12],[3278,8,3360,12],[3278,13,3360,17,"EventType"],[3278,22,3360,26],[3278,23,3360,27,"Meta"],[3278,27,3360,31],[3279,8,3361,12],[3279,13,3361,17,"EventType"],[3279,22,3361,26],[3279,23,3361,27,"Load"],[3279,27,3361,31],[3280,8,3362,12],[3280,13,3362,17,"EventType"],[3280,22,3362,26],[3280,23,3362,27,"DomContentLoaded"],[3280,39,3362,43],[3281,10,3362,45],[3282,12,3363,16],[3282,19,3363,23],[3282,24,3363,28],[3283,10,3364,12],[3284,8,3365,12],[3284,13,3365,17,"EventType"],[3284,22,3365,26],[3284,23,3365,27,"Plugin"],[3284,29,3365,33],[3285,10,3365,35],[3286,12,3366,16],[3286,19,3366,23,"e"],[3286,20,3366,24],[3287,10,3367,12],[3288,8,3368,12],[3288,13,3368,17,"EventType"],[3288,22,3368,26],[3288,23,3368,27,"Custom"],[3288,29,3368,33],[3289,10,3368,35],[3290,12,3369,16],[3290,16,3369,20],[3290,17,3369,21,"replaceIds"],[3290,27,3369,31],[3290,28,3369,32,"e"],[3290,29,3369,33],[3290,30,3369,34,"data"],[3290,34,3369,38],[3290,35,3369,39,"payload"],[3290,42,3369,46],[3290,44,3369,48,"iframeEl"],[3290,52,3369,56],[3290,54,3369,58],[3290,55,3369,59],[3290,59,3369,63],[3290,61,3369,65],[3290,71,3369,75],[3290,73,3369,77],[3290,85,3369,89],[3290,87,3369,91],[3290,95,3369,99],[3290,96,3369,100],[3290,97,3369,101],[3291,12,3370,16],[3291,19,3370,23,"e"],[3291,20,3370,24],[3292,10,3371,12],[3293,8,3372,12],[3293,13,3372,17,"EventType"],[3293,22,3372,26],[3293,23,3372,27,"IncrementalSnapshot"],[3293,42,3372,46],[3294,10,3372,48],[3295,12,3373,16],[3295,20,3373,24,"e"],[3295,21,3373,25],[3295,22,3373,26,"data"],[3295,26,3373,30],[3295,27,3373,31,"source"],[3295,33,3373,37],[3296,14,3374,20],[3296,19,3374,25,"IncrementalSource"],[3296,36,3374,42],[3296,37,3374,43,"Mutation"],[3296,45,3374,51],[3297,16,3374,53],[3298,18,3375,24,"e"],[3298,19,3375,25],[3298,20,3375,26,"data"],[3298,24,3375,30],[3298,25,3375,31,"adds"],[3298,29,3375,35],[3298,30,3375,36,"forEach"],[3298,37,3375,43],[3298,38,3375,45,"n"],[3298,39,3375,46],[3298,43,3375,51],[3299,20,3376,28],[3299,24,3376,32],[3299,25,3376,33,"replaceIds"],[3299,35,3376,43],[3299,36,3376,44,"n"],[3299,37,3376,45],[3299,39,3376,47,"iframeEl"],[3299,47,3376,55],[3299,49,3376,57],[3299,50,3377,32],[3299,60,3377,42],[3299,62,3378,32],[3299,70,3378,40],[3299,72,3379,32],[3299,84,3379,44],[3299,85,3380,29],[3299,86,3380,30],[3300,20,3381,28],[3300,24,3381,32],[3300,25,3381,33,"replaceIdOnNode"],[3300,40,3381,48],[3300,41,3381,49,"n"],[3300,42,3381,50],[3300,43,3381,51,"node"],[3300,47,3381,55],[3300,49,3381,57,"iframeEl"],[3300,57,3381,65],[3300,58,3381,66],[3301,20,3382,28],[3301,26,3382,34,"rootId"],[3301,32,3382,40],[3301,35,3382,43],[3301,39,3382,47],[3301,40,3382,48,"crossOriginIframeRootIdMap"],[3301,66,3382,74],[3301,67,3382,75,"get"],[3301,70,3382,78],[3301,71,3382,79,"iframeEl"],[3301,79,3382,87],[3301,80,3382,88],[3302,20,3383,28,"rootId"],[3302,26,3383,34],[3302,30,3383,38],[3302,34,3383,42],[3302,35,3383,43,"patchRootIdOnNode"],[3302,52,3383,60],[3302,53,3383,61,"n"],[3302,54,3383,62],[3302,55,3383,63,"node"],[3302,59,3383,67],[3302,61,3383,69,"rootId"],[3302,67,3383,75],[3302,68,3383,76],[3303,18,3384,24],[3303,19,3384,25],[3303,20,3384,26],[3304,18,3385,24,"e"],[3304,19,3385,25],[3304,20,3385,26,"data"],[3304,24,3385,30],[3304,25,3385,31,"removes"],[3304,32,3385,38],[3304,33,3385,39,"forEach"],[3304,40,3385,46],[3304,41,3385,48,"n"],[3304,42,3385,49],[3304,46,3385,54],[3305,20,3386,28],[3305,24,3386,32],[3305,25,3386,33,"replaceIds"],[3305,35,3386,43],[3305,36,3386,44,"n"],[3305,37,3386,45],[3305,39,3386,47,"iframeEl"],[3305,47,3386,55],[3305,49,3386,57],[3305,50,3386,58],[3305,60,3386,68],[3305,62,3386,70],[3305,66,3386,74],[3305,67,3386,75],[3305,68,3386,76],[3306,18,3387,24],[3306,19,3387,25],[3306,20,3387,26],[3307,18,3388,24,"e"],[3307,19,3388,25],[3307,20,3388,26,"data"],[3307,24,3388,30],[3307,25,3388,31,"attributes"],[3307,35,3388,41],[3307,36,3388,42,"forEach"],[3307,43,3388,49],[3307,44,3388,51,"n"],[3307,45,3388,52],[3307,49,3388,57],[3308,20,3389,28],[3308,24,3389,32],[3308,25,3389,33,"replaceIds"],[3308,35,3389,43],[3308,36,3389,44,"n"],[3308,37,3389,45],[3308,39,3389,47,"iframeEl"],[3308,47,3389,55],[3308,49,3389,57],[3308,50,3389,58],[3308,54,3389,62],[3308,55,3389,63],[3308,56,3389,64],[3309,18,3390,24],[3309,19,3390,25],[3309,20,3390,26],[3310,18,3391,24,"e"],[3310,19,3391,25],[3310,20,3391,26,"data"],[3310,24,3391,30],[3310,25,3391,31,"texts"],[3310,30,3391,36],[3310,31,3391,37,"forEach"],[3310,38,3391,44],[3310,39,3391,46,"n"],[3310,40,3391,47],[3310,44,3391,52],[3311,20,3392,28],[3311,24,3392,32],[3311,25,3392,33,"replaceIds"],[3311,35,3392,43],[3311,36,3392,44,"n"],[3311,37,3392,45],[3311,39,3392,47,"iframeEl"],[3311,47,3392,55],[3311,49,3392,57],[3311,50,3392,58],[3311,54,3392,62],[3311,55,3392,63],[3311,56,3392,64],[3312,18,3393,24],[3312,19,3393,25],[3312,20,3393,26],[3313,18,3394,24],[3313,25,3394,31,"e"],[3313,26,3394,32],[3314,16,3395,20],[3315,14,3396,20],[3315,19,3396,25,"IncrementalSource"],[3315,36,3396,42],[3315,37,3396,43,"Drag"],[3315,41,3396,47],[3316,14,3397,20],[3316,19,3397,25,"IncrementalSource"],[3316,36,3397,42],[3316,37,3397,43,"TouchMove"],[3316,46,3397,52],[3317,14,3398,20],[3317,19,3398,25,"IncrementalSource"],[3317,36,3398,42],[3317,37,3398,43,"MouseMove"],[3317,46,3398,52],[3318,16,3398,54],[3319,18,3399,24,"e"],[3319,19,3399,25],[3319,20,3399,26,"data"],[3319,24,3399,30],[3319,25,3399,31,"positions"],[3319,34,3399,40],[3319,35,3399,41,"forEach"],[3319,42,3399,48],[3319,43,3399,50,"p"],[3319,44,3399,51],[3319,48,3399,56],[3320,20,3400,28],[3320,24,3400,32],[3320,25,3400,33,"replaceIds"],[3320,35,3400,43],[3320,36,3400,44,"p"],[3320,37,3400,45],[3320,39,3400,47,"iframeEl"],[3320,47,3400,55],[3320,49,3400,57],[3320,50,3400,58],[3320,54,3400,62],[3320,55,3400,63],[3320,56,3400,64],[3321,18,3401,24],[3321,19,3401,25],[3321,20,3401,26],[3322,18,3402,24],[3322,25,3402,31,"e"],[3322,26,3402,32],[3323,16,3403,20],[3324,14,3404,20],[3324,19,3404,25,"IncrementalSource"],[3324,36,3404,42],[3324,37,3404,43,"ViewportResize"],[3324,51,3404,57],[3325,16,3404,59],[3326,18,3405,24],[3326,25,3405,31],[3326,30,3405,36],[3327,16,3406,20],[3328,14,3407,20],[3328,19,3407,25,"IncrementalSource"],[3328,36,3407,42],[3328,37,3407,43,"MediaInteraction"],[3328,53,3407,59],[3329,14,3408,20],[3329,19,3408,25,"IncrementalSource"],[3329,36,3408,42],[3329,37,3408,43,"MouseInteraction"],[3329,53,3408,59],[3330,14,3409,20],[3330,19,3409,25,"IncrementalSource"],[3330,36,3409,42],[3330,37,3409,43,"Scroll"],[3330,43,3409,49],[3331,14,3410,20],[3331,19,3410,25,"IncrementalSource"],[3331,36,3410,42],[3331,37,3410,43,"CanvasMutation"],[3331,51,3410,57],[3332,14,3411,20],[3332,19,3411,25,"IncrementalSource"],[3332,36,3411,42],[3332,37,3411,43,"Input"],[3332,42,3411,48],[3333,16,3411,50],[3334,18,3412,24],[3334,22,3412,28],[3334,23,3412,29,"replaceIds"],[3334,33,3412,39],[3334,34,3412,40,"e"],[3334,35,3412,41],[3334,36,3412,42,"data"],[3334,40,3412,46],[3334,42,3412,48,"iframeEl"],[3334,50,3412,56],[3334,52,3412,58],[3334,53,3412,59],[3334,57,3412,63],[3334,58,3412,64],[3334,59,3412,65],[3335,18,3413,24],[3335,25,3413,31,"e"],[3335,26,3413,32],[3336,16,3414,20],[3337,14,3415,20],[3337,19,3415,25,"IncrementalSource"],[3337,36,3415,42],[3337,37,3415,43,"StyleSheetRule"],[3337,51,3415,57],[3338,14,3416,20],[3338,19,3416,25,"IncrementalSource"],[3338,36,3416,42],[3338,37,3416,43,"StyleDeclaration"],[3338,53,3416,59],[3339,16,3416,61],[3340,18,3417,24],[3340,22,3417,28],[3340,23,3417,29,"replaceIds"],[3340,33,3417,39],[3340,34,3417,40,"e"],[3340,35,3417,41],[3340,36,3417,42,"data"],[3340,40,3417,46],[3340,42,3417,48,"iframeEl"],[3340,50,3417,56],[3340,52,3417,58],[3340,53,3417,59],[3340,57,3417,63],[3340,58,3417,64],[3340,59,3417,65],[3341,18,3418,24],[3341,22,3418,28],[3341,23,3418,29,"replaceStyleIds"],[3341,38,3418,44],[3341,39,3418,45,"e"],[3341,40,3418,46],[3341,41,3418,47,"data"],[3341,45,3418,51],[3341,47,3418,53,"iframeEl"],[3341,55,3418,61],[3341,57,3418,63],[3341,58,3418,64],[3341,67,3418,73],[3341,68,3418,74],[3341,69,3418,75],[3342,18,3419,24],[3342,25,3419,31,"e"],[3342,26,3419,32],[3343,16,3420,20],[3344,14,3421,20],[3344,19,3421,25,"IncrementalSource"],[3344,36,3421,42],[3344,37,3421,43,"Font"],[3344,41,3421,47],[3345,16,3421,49],[3346,18,3422,24],[3346,25,3422,31,"e"],[3346,26,3422,32],[3347,16,3423,20],[3348,14,3424,20],[3348,19,3424,25,"IncrementalSource"],[3348,36,3424,42],[3348,37,3424,43,"Selection"],[3348,46,3424,52],[3349,16,3424,54],[3350,18,3425,24,"e"],[3350,19,3425,25],[3350,20,3425,26,"data"],[3350,24,3425,30],[3350,25,3425,31,"ranges"],[3350,31,3425,37],[3350,32,3425,38,"forEach"],[3350,39,3425,45],[3350,40,3425,47,"range"],[3350,45,3425,52],[3350,49,3425,57],[3351,20,3426,28],[3351,24,3426,32],[3351,25,3426,33,"replaceIds"],[3351,35,3426,43],[3351,36,3426,44,"range"],[3351,41,3426,49],[3351,43,3426,51,"iframeEl"],[3351,51,3426,59],[3351,53,3426,61],[3351,54,3426,62],[3351,61,3426,69],[3351,63,3426,71],[3351,68,3426,76],[3351,69,3426,77],[3351,70,3426,78],[3352,18,3427,24],[3352,19,3427,25],[3352,20,3427,26],[3353,18,3428,24],[3353,25,3428,31,"e"],[3353,26,3428,32],[3354,16,3429,20],[3355,14,3430,20],[3355,19,3430,25,"IncrementalSource"],[3355,36,3430,42],[3355,37,3430,43,"AdoptedStyleSheet"],[3355,54,3430,60],[3356,16,3430,62],[3357,18,3431,24],[3357,22,3431,28],[3357,23,3431,29,"replaceIds"],[3357,33,3431,39],[3357,34,3431,40,"e"],[3357,35,3431,41],[3357,36,3431,42,"data"],[3357,40,3431,46],[3357,42,3431,48,"iframeEl"],[3357,50,3431,56],[3357,52,3431,58],[3357,53,3431,59],[3357,57,3431,63],[3357,58,3431,64],[3357,59,3431,65],[3358,18,3432,24],[3358,22,3432,28],[3358,23,3432,29,"replaceStyleIds"],[3358,38,3432,44],[3358,39,3432,45,"e"],[3358,40,3432,46],[3358,41,3432,47,"data"],[3358,45,3432,51],[3358,47,3432,53,"iframeEl"],[3358,55,3432,61],[3358,57,3432,63],[3358,58,3432,64],[3358,68,3432,74],[3358,69,3432,75],[3358,70,3432,76],[3359,18,3433,24,"_optionalChain$1"],[3359,34,3433,40],[3359,35,3433,41],[3359,36,3433,42,"e"],[3359,37,3433,43],[3359,39,3433,45],[3359,47,3433,53],[3359,49,3433,55,"_3"],[3359,51,3433,57],[3359,55,3433,61,"_3"],[3359,57,3433,63],[3359,58,3433,64,"data"],[3359,62,3433,68],[3359,64,3433,70],[3359,72,3433,78],[3359,74,3433,80,"_4"],[3359,76,3433,82],[3359,80,3433,86,"_4"],[3359,82,3433,88],[3359,83,3433,89,"styles"],[3359,89,3433,95],[3359,91,3433,97],[3359,107,3433,113],[3359,109,3433,115,"_5"],[3359,111,3433,117],[3359,115,3433,121,"_5"],[3359,117,3433,123],[3359,118,3433,124,"forEach"],[3359,125,3433,131],[3359,127,3433,133],[3359,133,3433,139],[3359,135,3433,141,"_6"],[3359,137,3433,143],[3359,141,3433,147,"_6"],[3359,143,3433,149],[3359,144,3433,151,"style"],[3359,149,3433,156],[3359,153,3433,161],[3360,20,3434,28],[3360,24,3434,32],[3360,25,3434,33,"replaceStyleIds"],[3360,40,3434,48],[3360,41,3434,49,"style"],[3360,46,3434,54],[3360,48,3434,56,"iframeEl"],[3360,56,3434,64],[3360,58,3434,66],[3360,59,3434,67],[3360,68,3434,76],[3360,69,3434,77],[3360,70,3434,78],[3361,18,3435,24],[3361,19,3435,25],[3361,20,3435,26],[3361,21,3435,27],[3361,22,3435,28],[3362,18,3436,24],[3362,25,3436,31,"e"],[3362,26,3436,32],[3363,16,3437,20],[3364,12,3438,16],[3365,10,3439,12],[3366,6,3440,8],[3367,6,3441,8],[3367,13,3441,15],[3367,18,3441,20],[3368,4,3442,4],[3369,4,3443,4,"replace"],[3369,11,3443,11,"replace"],[3369,12,3443,12,"iframeMirror"],[3369,24,3443,24],[3369,26,3443,26,"obj"],[3369,29,3443,29],[3369,31,3443,31,"iframeEl"],[3369,39,3443,39],[3369,41,3443,41,"keys"],[3369,45,3443,45],[3369,47,3443,47],[3370,6,3444,8],[3370,11,3444,13],[3370,17,3444,19,"key"],[3370,20,3444,22],[3370,24,3444,26,"keys"],[3370,28,3444,30],[3370,30,3444,32],[3371,8,3445,12],[3371,12,3445,16],[3371,13,3445,17,"Array"],[3371,18,3445,22],[3371,19,3445,23,"isArray"],[3371,26,3445,30],[3371,27,3445,31,"obj"],[3371,30,3445,34],[3371,31,3445,35,"key"],[3371,34,3445,38],[3371,35,3445,39],[3371,36,3445,40],[3371,40,3445,44],[3371,47,3445,51,"obj"],[3371,50,3445,54],[3371,51,3445,55,"key"],[3371,54,3445,58],[3371,55,3445,59],[3371,60,3445,64],[3371,68,3445,72],[3371,70,3446,16],[3372,8,3447,12],[3372,12,3447,16,"Array"],[3372,17,3447,21],[3372,18,3447,22,"isArray"],[3372,25,3447,29],[3372,26,3447,30,"obj"],[3372,29,3447,33],[3372,30,3447,34,"key"],[3372,33,3447,37],[3372,34,3447,38],[3372,35,3447,39],[3372,37,3447,41],[3373,10,3448,16,"obj"],[3373,13,3448,19],[3373,14,3448,20,"key"],[3373,17,3448,23],[3373,18,3448,24],[3373,21,3448,27,"iframeMirror"],[3373,33,3448,39],[3373,34,3448,40,"getIds"],[3373,40,3448,46],[3373,41,3448,47,"iframeEl"],[3373,49,3448,55],[3373,51,3448,57,"obj"],[3373,54,3448,60],[3373,55,3448,61,"key"],[3373,58,3448,64],[3373,59,3448,65],[3373,60,3448,66],[3374,8,3449,12],[3374,9,3449,13],[3374,15,3450,17],[3375,10,3451,16,"obj"],[3375,13,3451,19],[3375,14,3451,20,"key"],[3375,17,3451,23],[3375,18,3451,24],[3375,21,3451,27,"iframeMirror"],[3375,33,3451,39],[3375,34,3451,40,"getId"],[3375,39,3451,45],[3375,40,3451,46,"iframeEl"],[3375,48,3451,54],[3375,50,3451,56,"obj"],[3375,53,3451,59],[3375,54,3451,60,"key"],[3375,57,3451,63],[3375,58,3451,64],[3375,59,3451,65],[3376,8,3452,12],[3377,6,3453,8],[3378,6,3454,8],[3378,13,3454,15,"obj"],[3378,16,3454,18],[3379,4,3455,4],[3380,4,3456,4,"replaceIds"],[3380,14,3456,14,"replaceIds"],[3380,15,3456,15,"obj"],[3380,18,3456,18],[3380,20,3456,20,"iframeEl"],[3380,28,3456,28],[3380,30,3456,30,"keys"],[3380,34,3456,34],[3380,36,3456,36],[3381,6,3457,8],[3381,13,3457,15],[3381,17,3457,19],[3381,18,3457,20,"replace"],[3381,25,3457,27],[3381,26,3457,28],[3381,30,3457,32],[3381,31,3457,33,"crossOriginIframeMirror"],[3381,54,3457,56],[3381,56,3457,58,"obj"],[3381,59,3457,61],[3381,61,3457,63,"iframeEl"],[3381,69,3457,71],[3381,71,3457,73,"keys"],[3381,75,3457,77],[3381,76,3457,78],[3382,4,3458,4],[3383,4,3459,4,"replaceStyleIds"],[3383,19,3459,19,"replaceStyleIds"],[3383,20,3459,20,"obj"],[3383,23,3459,23],[3383,25,3459,25,"iframeEl"],[3383,33,3459,33],[3383,35,3459,35,"keys"],[3383,39,3459,39],[3383,41,3459,41],[3384,6,3460,8],[3384,13,3460,15],[3384,17,3460,19],[3384,18,3460,20,"replace"],[3384,25,3460,27],[3384,26,3460,28],[3384,30,3460,32],[3384,31,3460,33,"crossOriginIframeStyleMirror"],[3384,59,3460,61],[3384,61,3460,63,"obj"],[3384,64,3460,66],[3384,66,3460,68,"iframeEl"],[3384,74,3460,76],[3384,76,3460,78,"keys"],[3384,80,3460,82],[3384,81,3460,83],[3385,4,3461,4],[3386,4,3462,4,"replaceIdOnNode"],[3386,19,3462,19,"replaceIdOnNode"],[3386,20,3462,20,"node"],[3386,24,3462,24],[3386,26,3462,26,"iframeEl"],[3386,34,3462,34],[3386,36,3462,36],[3387,6,3463,8],[3387,10,3463,12],[3387,11,3463,13,"replaceIds"],[3387,21,3463,23],[3387,22,3463,24,"node"],[3387,26,3463,28],[3387,28,3463,30,"iframeEl"],[3387,36,3463,38],[3387,38,3463,40],[3387,39,3463,41],[3387,43,3463,45],[3387,45,3463,47],[3387,53,3463,55],[3387,54,3463,56],[3387,55,3463,57],[3388,6,3464,8],[3388,10,3464,12],[3388,22,3464,24],[3388,26,3464,28,"node"],[3388,30,3464,32],[3388,32,3464,34],[3389,8,3465,12,"node"],[3389,12,3465,16],[3389,13,3465,17,"childNodes"],[3389,23,3465,27],[3389,24,3465,28,"forEach"],[3389,31,3465,35],[3389,32,3465,37,"child"],[3389,37,3465,42],[3389,41,3465,47],[3390,10,3466,16],[3390,14,3466,20],[3390,15,3466,21,"replaceIdOnNode"],[3390,30,3466,36],[3390,31,3466,37,"child"],[3390,36,3466,42],[3390,38,3466,44,"iframeEl"],[3390,46,3466,52],[3390,47,3466,53],[3391,8,3467,12],[3391,9,3467,13],[3391,10,3467,14],[3392,6,3468,8],[3393,4,3469,4],[3394,4,3470,4,"patchRootIdOnNode"],[3394,21,3470,21,"patchRootIdOnNode"],[3394,22,3470,22,"node"],[3394,26,3470,26],[3394,28,3470,28,"rootId"],[3394,34,3470,34],[3394,36,3470,36],[3395,6,3471,8],[3395,10,3471,12,"node"],[3395,14,3471,16],[3395,15,3471,17,"type"],[3395,19,3471,21],[3395,24,3471,26,"NodeType$3"],[3395,34,3471,36],[3395,35,3471,37,"Document"],[3395,43,3471,45],[3395,47,3471,49],[3395,48,3471,50,"node"],[3395,52,3471,54],[3395,53,3471,55,"rootId"],[3395,59,3471,61],[3395,61,3472,12,"node"],[3395,65,3472,16],[3395,66,3472,17,"rootId"],[3395,72,3472,23],[3395,75,3472,26,"rootId"],[3395,81,3472,32],[3396,6,3473,8],[3396,10,3473,12],[3396,22,3473,24],[3396,26,3473,28,"node"],[3396,30,3473,32],[3396,32,3473,34],[3397,8,3474,12,"node"],[3397,12,3474,16],[3397,13,3474,17,"childNodes"],[3397,23,3474,27],[3397,24,3474,28,"forEach"],[3397,31,3474,35],[3397,32,3474,37,"child"],[3397,37,3474,42],[3397,41,3474,47],[3398,10,3475,16],[3398,14,3475,20],[3398,15,3475,21,"patchRootIdOnNode"],[3398,32,3475,38],[3398,33,3475,39,"child"],[3398,38,3475,44],[3398,40,3475,46,"rootId"],[3398,46,3475,52],[3398,47,3475,53],[3399,8,3476,12],[3399,9,3476,13],[3399,10,3476,14],[3400,6,3477,8],[3401,4,3478,4],[3402,2,3479,0],[3403,2,3481,0],[3403,8,3481,6,"ShadowDomManagerNoop"],[3403,28,3481,26],[3403,29,3481,27],[3404,4,3482,4,"init"],[3404,8,3482,8,"init"],[3404,9,3482,8],[3404,11,3482,11],[3404,12,3483,4],[3405,4,3484,4,"addShadowRoot"],[3405,17,3484,17,"addShadowRoot"],[3405,18,3484,17],[3405,20,3484,20],[3405,21,3485,4],[3406,4,3486,4,"observeAttachShadow"],[3406,23,3486,23,"observeAttachShadow"],[3406,24,3486,23],[3406,26,3486,26],[3406,27,3487,4],[3407,4,3488,4,"reset"],[3407,9,3488,9,"reset"],[3407,10,3488,9],[3407,12,3488,12],[3407,13,3489,4],[3408,2,3490,0],[3409,2,3491,0],[3409,8,3491,6,"ShadowDomManager"],[3409,24,3491,22],[3409,25,3491,23],[3410,4,3492,4,"constructor"],[3410,15,3492,15,"constructor"],[3410,16,3492,16,"options"],[3410,23,3492,23],[3410,25,3492,25],[3411,6,3493,8],[3411,10,3493,12],[3411,11,3493,13,"shadowDoms"],[3411,21,3493,23],[3411,24,3493,26],[3411,28,3493,30,"WeakSet"],[3411,35,3493,37],[3411,36,3493,38],[3411,37,3493,39],[3412,6,3494,8],[3412,10,3494,12],[3412,11,3494,13,"restoreHandlers"],[3412,26,3494,28],[3412,29,3494,31],[3412,31,3494,33],[3413,6,3495,8],[3413,10,3495,12],[3413,11,3495,13,"mutationCb"],[3413,21,3495,23],[3413,24,3495,26,"options"],[3413,31,3495,33],[3413,32,3495,34,"mutationCb"],[3413,42,3495,44],[3414,6,3496,8],[3414,10,3496,12],[3414,11,3496,13,"scrollCb"],[3414,19,3496,21],[3414,22,3496,24,"options"],[3414,29,3496,31],[3414,30,3496,32,"scrollCb"],[3414,38,3496,40],[3415,6,3497,8],[3415,10,3497,12],[3415,11,3497,13,"bypassOptions"],[3415,24,3497,26],[3415,27,3497,29,"options"],[3415,34,3497,36],[3415,35,3497,37,"bypassOptions"],[3415,48,3497,50],[3416,6,3498,8],[3416,10,3498,12],[3416,11,3498,13,"mirror"],[3416,17,3498,19],[3416,20,3498,22,"options"],[3416,27,3498,29],[3416,28,3498,30,"mirror"],[3416,34,3498,36],[3417,6,3499,8],[3417,10,3499,12],[3417,11,3499,13,"init"],[3417,15,3499,17],[3417,16,3499,18],[3417,17,3499,19],[3418,4,3500,4],[3419,4,3501,4,"init"],[3419,8,3501,8,"init"],[3419,9,3501,8],[3419,11,3501,11],[3420,6,3502,8],[3420,10,3502,12],[3420,11,3502,13,"reset"],[3420,16,3502,18],[3420,17,3502,19],[3420,18,3502,20],[3421,6,3503,8],[3421,10,3503,12],[3421,11,3503,13,"patchAttachShadow"],[3421,28,3503,30],[3421,29,3503,31,"Element"],[3421,36,3503,38],[3421,38,3503,40,"document"],[3421,46,3503,48],[3421,47,3503,49],[3422,4,3504,4],[3423,4,3505,4,"addShadowRoot"],[3423,17,3505,17,"addShadowRoot"],[3423,18,3505,18,"shadowRoot"],[3423,28,3505,28],[3423,30,3505,30,"doc"],[3423,33,3505,33],[3423,35,3505,35],[3424,6,3506,8],[3424,10,3506,12],[3424,11,3506,13,"isNativeShadowDom"],[3424,28,3506,30],[3424,29,3506,31,"shadowRoot"],[3424,39,3506,41],[3424,40,3506,42],[3424,42,3507,12],[3425,6,3508,8],[3425,10,3508,12],[3425,14,3508,16],[3425,15,3508,17,"shadowDoms"],[3425,25,3508,27],[3425,26,3508,28,"has"],[3425,29,3508,31],[3425,30,3508,32,"shadowRoot"],[3425,40,3508,42],[3425,41,3508,43],[3425,43,3509,12],[3426,6,3510,8],[3426,10,3510,12],[3426,11,3510,13,"shadowDoms"],[3426,21,3510,23],[3426,22,3510,24,"add"],[3426,25,3510,27],[3426,26,3510,28,"shadowRoot"],[3426,36,3510,38],[3426,37,3510,39],[3427,6,3511,8],[3427,10,3511,12],[3427,11,3511,13,"bypassOptions"],[3427,24,3511,26],[3427,25,3511,27,"canvasManager"],[3427,38,3511,40],[3427,39,3511,41,"addShadowRoot"],[3427,52,3511,54],[3427,53,3511,55,"shadowRoot"],[3427,63,3511,65],[3427,64,3511,66],[3428,6,3512,8],[3428,12,3512,14,"observer"],[3428,20,3512,22],[3428,23,3512,25,"initMutationObserver"],[3428,43,3512,45],[3428,44,3512,46],[3429,8,3513,12],[3429,11,3513,15],[3429,15,3513,19],[3429,16,3513,20,"bypassOptions"],[3429,29,3513,33],[3430,8,3514,12,"doc"],[3430,11,3514,15],[3431,8,3515,12,"mutationCb"],[3431,18,3515,22],[3431,20,3515,24],[3431,24,3515,28],[3431,25,3515,29,"mutationCb"],[3431,35,3515,39],[3432,8,3516,12,"mirror"],[3432,14,3516,18],[3432,16,3516,20],[3432,20,3516,24],[3432,21,3516,25,"mirror"],[3432,27,3516,31],[3433,8,3517,12,"shadowDomManager"],[3433,24,3517,28],[3433,26,3517,30],[3434,6,3518,8],[3434,7,3518,9],[3434,9,3518,11,"shadowRoot"],[3434,19,3518,21],[3434,20,3518,22],[3435,6,3519,8],[3435,10,3519,12],[3435,11,3519,13,"restoreHandlers"],[3435,26,3519,28],[3435,27,3519,29,"push"],[3435,31,3519,33],[3435,32,3519,34],[3435,38,3519,40,"observer"],[3435,46,3519,48],[3435,47,3519,49,"disconnect"],[3435,57,3519,59],[3435,58,3519,60],[3435,59,3519,61],[3435,60,3519,62],[3436,6,3520,8],[3436,10,3520,12],[3436,11,3520,13,"restoreHandlers"],[3436,26,3520,28],[3436,27,3520,29,"push"],[3436,31,3520,33],[3436,32,3520,34,"initScrollObserver"],[3436,50,3520,52],[3436,51,3520,53],[3437,8,3521,12],[3437,11,3521,15],[3437,15,3521,19],[3437,16,3521,20,"bypassOptions"],[3437,29,3521,33],[3438,8,3522,12,"scrollCb"],[3438,16,3522,20],[3438,18,3522,22],[3438,22,3522,26],[3438,23,3522,27,"scrollCb"],[3438,31,3522,35],[3439,8,3523,12,"doc"],[3439,11,3523,15],[3439,13,3523,17,"shadowRoot"],[3439,23,3523,27],[3440,8,3524,12,"mirror"],[3440,14,3524,18],[3440,16,3524,20],[3440,20,3524,24],[3440,21,3524,25,"mirror"],[3441,6,3525,8],[3441,7,3525,9],[3441,8,3525,10],[3441,9,3525,11],[3442,6,3526,8,"setTimeout$1"],[3442,18,3526,20],[3442,19,3526,21],[3442,25,3526,27],[3443,8,3527,12],[3443,12,3527,16,"shadowRoot"],[3443,22,3527,26],[3443,23,3527,27,"adoptedStyleSheets"],[3443,41,3527,45],[3443,45,3528,16,"shadowRoot"],[3443,55,3528,26],[3443,56,3528,27,"adoptedStyleSheets"],[3443,74,3528,45],[3443,75,3528,46,"length"],[3443,81,3528,52],[3443,84,3528,55],[3443,85,3528,56],[3443,87,3529,16],[3443,91,3529,20],[3443,92,3529,21,"bypassOptions"],[3443,105,3529,34],[3443,106,3529,35,"stylesheetManager"],[3443,123,3529,52],[3443,124,3529,53,"adoptStyleSheets"],[3443,140,3529,69],[3443,141,3529,70,"shadowRoot"],[3443,151,3529,80],[3443,152,3529,81,"adoptedStyleSheets"],[3443,170,3529,99],[3443,172,3529,101],[3443,176,3529,105],[3443,177,3529,106,"mirror"],[3443,183,3529,112],[3443,184,3529,113,"getId"],[3443,189,3529,118],[3443,190,3529,119,"shadowRoot"],[3443,200,3529,129],[3443,201,3529,130,"host"],[3443,205,3529,134],[3443,206,3529,135],[3443,207,3529,136],[3444,8,3530,12],[3444,12,3530,16],[3444,13,3530,17,"restoreHandlers"],[3444,28,3530,32],[3444,29,3530,33,"push"],[3444,33,3530,37],[3444,34,3530,38,"initAdoptedStyleSheetObserver"],[3444,63,3530,67],[3444,64,3530,68],[3445,10,3531,16,"mirror"],[3445,16,3531,22],[3445,18,3531,24],[3445,22,3531,28],[3445,23,3531,29,"mirror"],[3445,29,3531,35],[3446,10,3532,16,"stylesheetManager"],[3446,27,3532,33],[3446,29,3532,35],[3446,33,3532,39],[3446,34,3532,40,"bypassOptions"],[3446,47,3532,53],[3446,48,3532,54,"stylesheetManager"],[3447,8,3533,12],[3447,9,3533,13],[3447,11,3533,15,"shadowRoot"],[3447,21,3533,25],[3447,22,3533,26],[3447,23,3533,27],[3448,6,3534,8],[3448,7,3534,9],[3448,9,3534,11],[3448,10,3534,12],[3448,11,3534,13],[3449,4,3535,4],[3450,4,3536,4,"observeAttachShadow"],[3450,23,3536,23,"observeAttachShadow"],[3450,24,3536,24,"iframeElement"],[3450,37,3536,37],[3450,39,3536,39],[3451,6,3537,8],[3451,12,3537,14,"iframeDoc"],[3451,21,3537,23],[3451,24,3537,26,"getIFrameContentDocument"],[3451,48,3537,50],[3451,49,3537,51,"iframeElement"],[3451,62,3537,64],[3451,63,3537,65],[3452,6,3538,8],[3452,12,3538,14,"iframeWindow"],[3452,24,3538,26],[3452,27,3538,29,"getIFrameContentWindow"],[3452,49,3538,51],[3452,50,3538,52,"iframeElement"],[3452,63,3538,65],[3452,64,3538,66],[3453,6,3539,8],[3453,10,3539,12],[3453,11,3539,13,"iframeDoc"],[3453,20,3539,22],[3453,24,3539,26],[3453,25,3539,27,"iframeWindow"],[3453,37,3539,39],[3453,39,3540,12],[3454,6,3541,8],[3454,10,3541,12],[3454,11,3541,13,"patchAttachShadow"],[3454,28,3541,30],[3454,29,3541,31,"iframeWindow"],[3454,41,3541,43],[3454,42,3541,44,"Element"],[3454,49,3541,51],[3454,51,3541,53,"iframeDoc"],[3454,60,3541,62],[3454,61,3541,63],[3455,4,3542,4],[3456,4,3543,4,"patchAttachShadow"],[3456,21,3543,21,"patchAttachShadow"],[3456,22,3543,22,"element"],[3456,29,3543,29],[3456,31,3543,31,"doc"],[3456,34,3543,34],[3456,36,3543,36],[3457,6,3544,8],[3457,12,3544,14,"manager"],[3457,19,3544,21],[3457,22,3544,24],[3457,26,3544,28],[3458,6,3545,8],[3458,10,3545,12],[3458,11,3545,13,"restoreHandlers"],[3458,26,3545,28],[3458,27,3545,29,"push"],[3458,31,3545,33],[3458,32,3545,34,"patch"],[3458,37,3545,39],[3458,38,3545,40,"element"],[3458,45,3545,47],[3458,46,3545,48,"prototype"],[3458,55,3545,57],[3458,57,3545,59],[3458,71,3545,73],[3458,73,3545,75],[3458,83,3545,85,"original"],[3458,91,3545,93],[3458,93,3545,95],[3459,8,3546,12],[3459,15,3546,19],[3459,25,3546,29,"option"],[3459,31,3546,35],[3459,33,3546,37],[3460,10,3547,16],[3460,16,3547,22,"shadowRoot"],[3460,26,3547,32],[3460,29,3547,35,"original"],[3460,37,3547,43],[3460,38,3547,44,"call"],[3460,42,3547,48],[3460,43,3547,49],[3460,47,3547,53],[3460,49,3547,55,"option"],[3460,55,3547,61],[3460,56,3547,62],[3461,10,3548,16],[3461,14,3548,20],[3461,18,3548,24],[3461,19,3548,25,"shadowRoot"],[3461,29,3548,35],[3461,33,3548,39,"inDom"],[3461,38,3548,44],[3461,39,3548,45],[3461,43,3548,49],[3461,44,3548,50],[3461,46,3549,20,"manager"],[3461,53,3549,27],[3461,54,3549,28,"addShadowRoot"],[3461,67,3549,41],[3461,68,3549,42],[3461,72,3549,46],[3461,73,3549,47,"shadowRoot"],[3461,83,3549,57],[3461,85,3549,59,"doc"],[3461,88,3549,62],[3461,89,3549,63],[3462,10,3550,16],[3462,17,3550,23,"shadowRoot"],[3462,27,3550,33],[3463,8,3551,12],[3463,9,3551,13],[3464,6,3552,8],[3464,7,3552,9],[3464,8,3552,10],[3464,9,3552,11],[3465,4,3553,4],[3466,4,3554,4,"reset"],[3466,9,3554,9,"reset"],[3466,10,3554,9],[3466,12,3554,12],[3467,6,3555,8],[3467,10,3555,12],[3467,11,3555,13,"restoreHandlers"],[3467,26,3555,28],[3467,27,3555,29,"forEach"],[3467,34,3555,36],[3467,35,3555,38,"handler"],[3467,42,3555,45],[3467,46,3555,50],[3468,8,3556,12],[3468,12,3556,16],[3469,10,3557,16,"handler"],[3469,17,3557,23],[3469,18,3557,24],[3469,19,3557,25],[3470,8,3558,12],[3470,9,3558,13],[3470,10,3559,12],[3470,17,3559,19,"e"],[3470,18,3559,20],[3470,20,3559,22],[3470,21,3560,12],[3471,6,3561,8],[3471,7,3561,9],[3471,8,3561,10],[3472,6,3562,8],[3472,10,3562,12],[3472,11,3562,13,"restoreHandlers"],[3472,26,3562,28],[3472,29,3562,31],[3472,31,3562,33],[3473,6,3563,8],[3473,10,3563,12],[3473,11,3563,13,"shadowDoms"],[3473,21,3563,23],[3473,24,3563,26],[3473,28,3563,30,"WeakSet"],[3473,35,3563,37],[3473,36,3563,38],[3473,37,3563,39],[3474,6,3564,8],[3474,10,3564,12],[3474,11,3564,13,"bypassOptions"],[3474,24,3564,26],[3474,25,3564,27,"canvasManager"],[3474,38,3564,40],[3474,39,3564,41,"resetShadowRoots"],[3474,55,3564,57],[3474,56,3564,58],[3474,57,3564,59],[3475,4,3565,4],[3476,2,3566,0],[3477,2,3568,0],[3477,8,3568,6,"CanvasManagerNoop"],[3477,25,3568,23],[3477,26,3568,24],[3478,4,3569,4,"reset"],[3478,9,3569,9,"reset"],[3478,10,3569,9],[3478,12,3569,12],[3478,13,3570,4],[3479,4,3571,4,"freeze"],[3479,10,3571,10,"freeze"],[3479,11,3571,10],[3479,13,3571,13],[3479,14,3572,4],[3480,4,3573,4,"unfreeze"],[3480,12,3573,12,"unfreeze"],[3480,13,3573,12],[3480,15,3573,15],[3480,16,3574,4],[3481,4,3575,4,"lock"],[3481,8,3575,8,"lock"],[3481,9,3575,8],[3481,11,3575,11],[3481,12,3576,4],[3482,4,3577,4,"unlock"],[3482,10,3577,10,"unlock"],[3482,11,3577,10],[3482,13,3577,13],[3482,14,3578,4],[3483,4,3579,4,"snapshot"],[3483,12,3579,12,"snapshot"],[3483,13,3579,12],[3483,15,3579,15],[3483,16,3580,4],[3484,4,3581,4,"addWindow"],[3484,13,3581,13,"addWindow"],[3484,14,3581,13],[3484,16,3581,16],[3484,17,3582,4],[3485,4,3583,4,"addShadowRoot"],[3485,17,3583,17,"addShadowRoot"],[3485,18,3583,17],[3485,20,3583,20],[3485,21,3584,4],[3486,4,3585,4,"resetShadowRoots"],[3486,20,3585,20,"resetShadowRoots"],[3486,21,3585,20],[3486,23,3585,23],[3486,24,3586,4],[3487,2,3587,0],[3488,2,3589,0],[3488,8,3589,6,"StylesheetManager"],[3488,25,3589,23],[3488,26,3589,24],[3489,4,3590,4,"constructor"],[3489,15,3590,15,"constructor"],[3489,16,3590,16,"options"],[3489,23,3590,23],[3489,25,3590,25],[3490,6,3591,8],[3490,10,3591,12],[3490,11,3591,13,"trackedLinkElements"],[3490,30,3591,32],[3490,33,3591,35],[3490,37,3591,39,"WeakSet"],[3490,44,3591,46],[3490,45,3591,47],[3490,46,3591,48],[3491,6,3592,8],[3491,10,3592,12],[3491,11,3592,13,"styleMirror"],[3491,22,3592,24],[3491,25,3592,27],[3491,29,3592,31,"StyleSheetMirror"],[3491,45,3592,47],[3491,46,3592,48],[3491,47,3592,49],[3492,6,3593,8],[3492,10,3593,12],[3492,11,3593,13,"mutationCb"],[3492,21,3593,23],[3492,24,3593,26,"options"],[3492,31,3593,33],[3492,32,3593,34,"mutationCb"],[3492,42,3593,44],[3493,6,3594,8],[3493,10,3594,12],[3493,11,3594,13,"adoptedStyleSheetCb"],[3493,30,3594,32],[3493,33,3594,35,"options"],[3493,40,3594,42],[3493,41,3594,43,"adoptedStyleSheetCb"],[3493,60,3594,62],[3494,4,3595,4],[3495,4,3596,4,"attachLinkElement"],[3495,21,3596,21,"attachLinkElement"],[3495,22,3596,22,"linkEl"],[3495,28,3596,28],[3495,30,3596,30,"childSn"],[3495,37,3596,37],[3495,39,3596,39],[3496,6,3597,8],[3496,10,3597,12],[3496,20,3597,22],[3496,24,3597,26,"childSn"],[3496,31,3597,33],[3496,32,3597,34,"attributes"],[3496,42,3597,44],[3496,44,3598,12],[3496,48,3598,16],[3496,49,3598,17,"mutationCb"],[3496,59,3598,27],[3496,60,3598,28],[3497,8,3599,16,"adds"],[3497,12,3599,20],[3497,14,3599,22],[3497,16,3599,24],[3498,8,3600,16,"removes"],[3498,15,3600,23],[3498,17,3600,25],[3498,19,3600,27],[3499,8,3601,16,"texts"],[3499,13,3601,21],[3499,15,3601,23],[3499,17,3601,25],[3500,8,3602,16,"attributes"],[3500,18,3602,26],[3500,20,3602,28],[3500,21,3603,20],[3501,10,3604,24,"id"],[3501,12,3604,26],[3501,14,3604,28,"childSn"],[3501,21,3604,35],[3501,22,3604,36,"id"],[3501,24,3604,38],[3502,10,3605,24,"attributes"],[3502,20,3605,34],[3502,22,3605,36,"childSn"],[3502,29,3605,43],[3502,30,3606,29,"attributes"],[3503,8,3607,20],[3503,9,3607,21],[3504,6,3609,12],[3504,7,3609,13],[3504,8,3609,14],[3505,6,3610,8],[3505,10,3610,12],[3505,11,3610,13,"trackLinkElement"],[3505,27,3610,29],[3505,28,3610,30,"linkEl"],[3505,34,3610,36],[3505,35,3610,37],[3506,4,3611,4],[3507,4,3612,4,"trackLinkElement"],[3507,20,3612,20,"trackLinkElement"],[3507,21,3612,21,"linkEl"],[3507,27,3612,27],[3507,29,3612,29],[3508,6,3613,8],[3508,10,3613,12],[3508,14,3613,16],[3508,15,3613,17,"trackedLinkElements"],[3508,34,3613,36],[3508,35,3613,37,"has"],[3508,38,3613,40],[3508,39,3613,41,"linkEl"],[3508,45,3613,47],[3508,46,3613,48],[3508,48,3614,12],[3509,6,3615,8],[3509,10,3615,12],[3509,11,3615,13,"trackedLinkElements"],[3509,30,3615,32],[3509,31,3615,33,"add"],[3509,34,3615,36],[3509,35,3615,37,"linkEl"],[3509,41,3615,43],[3509,42,3615,44],[3510,6,3616,8],[3510,10,3616,12],[3510,11,3616,13,"trackStylesheetInLinkElement"],[3510,39,3616,41],[3510,40,3616,42,"linkEl"],[3510,46,3616,48],[3510,47,3616,49],[3511,4,3617,4],[3512,4,3618,4,"adoptStyleSheets"],[3512,20,3618,20,"adoptStyleSheets"],[3512,21,3618,21,"sheets"],[3512,27,3618,27],[3512,29,3618,29,"hostId"],[3512,35,3618,35],[3512,37,3618,37],[3513,6,3619,8],[3513,10,3619,12,"sheets"],[3513,16,3619,18],[3513,17,3619,19,"length"],[3513,23,3619,25],[3513,28,3619,30],[3513,29,3619,31],[3513,31,3620,12],[3514,6,3621,8],[3514,12,3621,14,"adoptedStyleSheetData"],[3514,33,3621,35],[3514,36,3621,38],[3515,8,3622,12,"id"],[3515,10,3622,14],[3515,12,3622,16,"hostId"],[3515,18,3622,22],[3516,8,3623,12,"styleIds"],[3516,16,3623,20],[3516,18,3623,22],[3517,6,3624,8],[3517,7,3624,9],[3518,6,3625,8],[3518,12,3625,14,"styles"],[3518,18,3625,20],[3518,21,3625,23],[3518,23,3625,25],[3519,6,3626,8],[3519,11,3626,13],[3519,17,3626,19,"sheet"],[3519,22,3626,24],[3519,26,3626,28,"sheets"],[3519,32,3626,34],[3519,34,3626,36],[3520,8,3627,12],[3520,12,3627,16,"styleId"],[3520,19,3627,23],[3521,8,3628,12],[3521,12,3628,16],[3521,13,3628,17],[3521,17,3628,21],[3521,18,3628,22,"styleMirror"],[3521,29,3628,33],[3521,30,3628,34,"has"],[3521,33,3628,37],[3521,34,3628,38,"sheet"],[3521,39,3628,43],[3521,40,3628,44],[3521,42,3628,46],[3522,10,3629,16,"styleId"],[3522,17,3629,23],[3522,20,3629,26],[3522,24,3629,30],[3522,25,3629,31,"styleMirror"],[3522,36,3629,42],[3522,37,3629,43,"add"],[3522,40,3629,46],[3522,41,3629,47,"sheet"],[3522,46,3629,52],[3522,47,3629,53],[3523,10,3630,16,"styles"],[3523,16,3630,22],[3523,17,3630,23,"push"],[3523,21,3630,27],[3523,22,3630,28],[3524,12,3631,20,"styleId"],[3524,19,3631,27],[3525,12,3632,20,"rules"],[3525,17,3632,25],[3525,19,3632,27,"Array"],[3525,24,3632,32],[3525,25,3632,33,"from"],[3525,29,3632,37],[3525,30,3632,38,"sheet"],[3525,35,3632,43],[3525,36,3632,44,"rules"],[3525,41,3632,49],[3525,45,3632,53,"CSSRule"],[3525,52,3632,60],[3525,54,3632,62],[3525,55,3632,63,"r"],[3525,56,3632,64],[3525,58,3632,66,"index"],[3525,63,3632,71],[3525,69,3632,77],[3526,14,3633,24,"rule"],[3526,18,3633,28],[3526,20,3633,30,"stringifyRule"],[3526,33,3633,43],[3526,34,3633,44,"r"],[3526,35,3633,45],[3526,36,3633,46],[3527,14,3634,24,"index"],[3528,12,3635,20],[3528,13,3635,21],[3528,14,3635,22],[3529,10,3636,16],[3529,11,3636,17],[3529,12,3636,18],[3530,8,3637,12],[3530,9,3637,13],[3530,15,3639,16,"styleId"],[3530,22,3639,23],[3530,25,3639,26],[3530,29,3639,30],[3530,30,3639,31,"styleMirror"],[3530,41,3639,42],[3530,42,3639,43,"getId"],[3530,47,3639,48],[3530,48,3639,49,"sheet"],[3530,53,3639,54],[3530,54,3639,55],[3531,8,3640,12,"adoptedStyleSheetData"],[3531,29,3640,33],[3531,30,3640,34,"styleIds"],[3531,38,3640,42],[3531,39,3640,43,"push"],[3531,43,3640,47],[3531,44,3640,48,"styleId"],[3531,51,3640,55],[3531,52,3640,56],[3532,6,3641,8],[3533,6,3642,8],[3533,10,3642,12,"styles"],[3533,16,3642,18],[3533,17,3642,19,"length"],[3533,23,3642,25],[3533,26,3642,28],[3533,27,3642,29],[3533,29,3643,12,"adoptedStyleSheetData"],[3533,50,3643,33],[3533,51,3643,34,"styles"],[3533,57,3643,40],[3533,60,3643,43,"styles"],[3533,66,3643,49],[3534,6,3644,8],[3534,10,3644,12],[3534,11,3644,13,"adoptedStyleSheetCb"],[3534,30,3644,32],[3534,31,3644,33,"adoptedStyleSheetData"],[3534,52,3644,54],[3534,53,3644,55],[3535,4,3645,4],[3536,4,3646,4,"reset"],[3536,9,3646,9,"reset"],[3536,10,3646,9],[3536,12,3646,12],[3537,6,3647,8],[3537,10,3647,12],[3537,11,3647,13,"styleMirror"],[3537,22,3647,24],[3537,23,3647,25,"reset"],[3537,28,3647,30],[3537,29,3647,31],[3537,30,3647,32],[3538,6,3648,8],[3538,10,3648,12],[3538,11,3648,13,"trackedLinkElements"],[3538,30,3648,32],[3538,33,3648,35],[3538,37,3648,39,"WeakSet"],[3538,44,3648,46],[3538,45,3648,47],[3538,46,3648,48],[3539,4,3649,4],[3540,4,3650,4,"trackStylesheetInLinkElement"],[3540,32,3650,32,"trackStylesheetInLinkElement"],[3540,33,3650,33,"linkEl"],[3540,39,3650,39],[3540,41,3650,41],[3540,42,3651,4],[3541,2,3652,0],[3542,2,3654,0],[3542,8,3654,6,"ProcessedNodeManager"],[3542,28,3654,26],[3542,29,3654,27],[3543,4,3655,4,"constructor"],[3543,15,3655,15,"constructor"],[3543,16,3655,15],[3543,18,3655,18],[3544,6,3656,8],[3544,10,3656,12],[3544,11,3656,13,"nodeMap"],[3544,18,3656,20],[3544,21,3656,23],[3544,25,3656,27,"WeakMap"],[3544,32,3656,34],[3544,33,3656,35],[3544,34,3656,36],[3545,6,3657,8],[3545,10,3657,12],[3545,11,3657,13,"active"],[3545,17,3657,19],[3545,20,3657,22],[3545,25,3657,27],[3546,4,3658,4],[3547,4,3659,4,"inOtherBuffer"],[3547,17,3659,17,"inOtherBuffer"],[3547,18,3659,18,"node"],[3547,22,3659,22],[3547,24,3659,24,"thisBuffer"],[3547,34,3659,34],[3547,36,3659,36],[3548,6,3660,8],[3548,12,3660,14,"buffers"],[3548,19,3660,21],[3548,22,3660,24],[3548,26,3660,28],[3548,27,3660,29,"nodeMap"],[3548,34,3660,36],[3548,35,3660,37,"get"],[3548,38,3660,40],[3548,39,3660,41,"node"],[3548,43,3660,45],[3548,44,3660,46],[3549,6,3661,8],[3549,13,3661,16,"buffers"],[3549,20,3661,23],[3549,24,3661,27,"Array"],[3549,29,3661,32],[3549,30,3661,33,"from"],[3549,34,3661,37],[3549,35,3661,38,"buffers"],[3549,42,3661,45],[3549,43,3661,46],[3549,44,3661,47,"some"],[3549,48,3661,51],[3549,49,3661,53,"buffer"],[3549,55,3661,59],[3549,59,3661,64,"buffer"],[3549,65,3661,70],[3549,70,3661,75,"thisBuffer"],[3549,80,3661,85],[3549,81,3661,86],[3550,4,3662,4],[3551,4,3663,4,"add"],[3551,7,3663,7,"add"],[3551,8,3663,8,"node"],[3551,12,3663,12],[3551,14,3663,14,"buffer"],[3551,20,3663,20],[3551,22,3663,22],[3552,6,3664,8],[3552,10,3664,12],[3552,11,3664,13],[3552,15,3664,17],[3552,16,3664,18,"active"],[3552,22,3664,24],[3552,24,3664,26],[3553,8,3665,12],[3553,12,3665,16],[3553,13,3665,17,"active"],[3553,19,3665,23],[3553,22,3665,26],[3553,26,3665,30],[3554,8,3666,12,"onRequestAnimationFrame"],[3554,31,3666,35],[3554,32,3666,36],[3554,38,3666,42],[3555,10,3667,16],[3555,14,3667,20],[3555,15,3667,21,"nodeMap"],[3555,22,3667,28],[3555,25,3667,31],[3555,29,3667,35,"WeakMap"],[3555,36,3667,42],[3555,37,3667,43],[3555,38,3667,44],[3556,10,3668,16],[3556,14,3668,20],[3556,15,3668,21,"active"],[3556,21,3668,27],[3556,24,3668,30],[3556,29,3668,35],[3557,8,3669,12],[3557,9,3669,13],[3557,10,3669,14],[3558,6,3670,8],[3559,6,3671,8],[3559,10,3671,12],[3559,11,3671,13,"nodeMap"],[3559,18,3671,20],[3559,19,3671,21,"set"],[3559,22,3671,24],[3559,23,3671,25,"node"],[3559,27,3671,29],[3559,29,3671,31],[3559,30,3671,32],[3559,34,3671,36],[3559,35,3671,37,"nodeMap"],[3559,42,3671,44],[3559,43,3671,45,"get"],[3559,46,3671,48],[3559,47,3671,49,"node"],[3559,51,3671,53],[3559,52,3671,54],[3559,56,3671,58],[3559,60,3671,62,"Set"],[3559,63,3671,65],[3559,64,3671,66],[3559,65,3671,67],[3559,67,3671,69,"add"],[3559,70,3671,72],[3559,71,3671,73,"buffer"],[3559,77,3671,79],[3559,78,3671,80],[3559,79,3671,81],[3560,4,3672,4],[3561,4,3673,4,"destroy"],[3561,11,3673,11,"destroy"],[3561,12,3673,11],[3561,14,3673,14],[3561,15,3674,4],[3562,2,3675,0],[3563,2,3677,0],[3563,6,3677,4,"wrappedEmit"],[3563,17,3677,15],[3564,2,3678,0],[3564,6,3678,4,"_takeFullSnapshot"],[3564,23,3678,21],[3565,2,3679,0],[3565,6,3679,4],[3566,4,3680,4],[3566,8,3680,8,"Array"],[3566,13,3680,13],[3566,14,3680,14,"from"],[3566,18,3680,18],[3566,19,3680,19],[3566,20,3680,20],[3566,21,3680,21],[3566,22,3680,22],[3566,24,3680,25,"x"],[3566,25,3680,26],[3566,29,3680,31,"x"],[3566,30,3680,32],[3566,33,3680,35],[3566,34,3680,36],[3566,35,3680,37],[3566,36,3680,38],[3566,37,3680,39],[3566,38,3680,40],[3566,43,3680,45],[3566,44,3680,46],[3566,46,3680,48],[3567,6,3681,8],[3567,12,3681,14,"cleanFrame"],[3567,22,3681,24],[3567,25,3681,27,"document"],[3567,33,3681,35],[3567,34,3681,36,"createElement"],[3567,47,3681,49],[3567,48,3681,50],[3567,56,3681,58],[3567,57,3681,59],[3568,6,3682,8,"document"],[3568,14,3682,16],[3568,15,3682,17,"body"],[3568,19,3682,21],[3568,20,3682,22,"appendChild"],[3568,31,3682,33],[3568,32,3682,34,"cleanFrame"],[3568,42,3682,44],[3568,43,3682,45],[3569,6,3683,8,"Array"],[3569,11,3683,13],[3569,12,3683,14,"from"],[3569,16,3683,18],[3569,19,3683,21],[3569,23,3683,21,"_optionalChain"],[3569,43,3683,35],[3569,45,3683,36],[3569,46,3683,37,"cleanFrame"],[3569,56,3683,47],[3569,58,3683,49],[3569,66,3683,57],[3569,68,3683,59,"_"],[3569,69,3683,60],[3569,73,3683,64,"_"],[3569,74,3683,65],[3569,75,3683,66,"contentWindow"],[3569,88,3683,79],[3569,90,3683,81],[3569,106,3683,97],[3569,108,3683,99,"_2"],[3569,110,3683,101],[3569,114,3683,105,"_2"],[3569,116,3683,107],[3569,117,3683,108,"Array"],[3569,122,3683,113],[3569,124,3683,115],[3569,132,3683,123],[3569,134,3683,125,"_3"],[3569,136,3683,127],[3569,140,3683,131,"_3"],[3569,142,3683,133],[3569,143,3683,134,"from"],[3569,147,3683,138],[3569,148,3683,139],[3569,149,3683,140],[3569,153,3683,144,"Array"],[3569,158,3683,149],[3569,159,3683,150,"from"],[3569,163,3683,154],[3570,6,3684,8,"document"],[3570,14,3684,16],[3570,15,3684,17,"body"],[3570,19,3684,21],[3570,20,3684,22,"removeChild"],[3570,31,3684,33],[3570,32,3684,34,"cleanFrame"],[3570,42,3684,44],[3570,43,3684,45],[3571,4,3685,4],[3572,2,3686,0],[3572,3,3686,1],[3572,4,3687,0],[3572,11,3687,7,"err"],[3572,14,3687,10],[3572,16,3687,12],[3573,4,3688,4,"console"],[3573,11,3688,11],[3573,12,3688,12,"debug"],[3573,17,3688,17],[3573,18,3688,18],[3573,49,3688,49],[3573,51,3688,51,"err"],[3573,54,3688,54],[3573,55,3688,55],[3574,2,3689,0],[3575,2,3690,0],[3575,8,3690,6,"mirror"],[3575,14,3690,12],[3575,17,3690,15,"createMirror"],[3575,29,3690,27],[3575,30,3690,28],[3575,31,3690,29],[3576,2,3691,0],[3576,11,3691,9,"record"],[3576,17,3691,15,"record"],[3576,18,3691,16,"options"],[3576,25,3691,23],[3576,28,3691,26],[3576,29,3691,27],[3576,30,3691,28],[3576,32,3691,30],[3577,4,3692,4],[3577,10,3692,10],[3578,6,3692,12,"emit"],[3578,10,3692,16],[3579,6,3692,18,"checkoutEveryNms"],[3579,22,3692,34],[3580,6,3692,36,"checkoutEveryNth"],[3580,22,3692,52],[3581,6,3692,54,"blockClass"],[3581,16,3692,64],[3581,19,3692,67],[3581,29,3692,77],[3582,6,3692,79,"blockSelector"],[3582,19,3692,92],[3582,22,3692,95],[3582,26,3692,99],[3583,6,3692,101,"unblockSelector"],[3583,21,3692,116],[3583,24,3692,119],[3583,28,3692,123],[3584,6,3692,125,"ignoreClass"],[3584,17,3692,136],[3584,20,3692,139],[3584,31,3692,150],[3585,6,3692,152,"ignoreSelector"],[3585,20,3692,166],[3585,23,3692,169],[3585,27,3692,173],[3586,6,3692,175,"maskAllText"],[3586,17,3692,186],[3586,20,3692,189],[3586,25,3692,194],[3587,6,3692,196,"maskTextClass"],[3587,19,3692,209],[3587,22,3692,212],[3587,31,3692,221],[3588,6,3692,223,"unmaskTextClass"],[3588,21,3692,238],[3588,24,3692,241],[3588,28,3692,245],[3589,6,3692,247,"maskTextSelector"],[3589,22,3692,263],[3589,25,3692,266],[3589,29,3692,270],[3590,6,3692,272,"unmaskTextSelector"],[3590,24,3692,290],[3590,27,3692,293],[3590,31,3692,297],[3591,6,3692,299,"inlineStylesheet"],[3591,22,3692,315],[3591,25,3692,318],[3591,29,3692,322],[3592,6,3692,324,"maskAllInputs"],[3592,19,3692,337],[3593,6,3692,339,"maskInputOptions"],[3593,22,3692,355],[3593,24,3692,357,"_maskInputOptions"],[3593,41,3692,374],[3594,6,3692,376,"slimDOMOptions"],[3594,20,3692,390],[3594,22,3692,392,"_slimDOMOptions"],[3594,37,3692,407],[3595,6,3692,409,"maskAttributeFn"],[3595,21,3692,424],[3596,6,3692,426,"maskInputFn"],[3596,17,3692,437],[3597,6,3692,439,"maskTextFn"],[3597,16,3692,449],[3598,6,3692,451,"maxCanvasSize"],[3598,19,3692,464],[3598,22,3692,467],[3598,26,3692,471],[3599,6,3692,473,"packFn"],[3599,12,3692,479],[3600,6,3692,481,"sampling"],[3600,14,3692,489],[3600,17,3692,492],[3600,18,3692,493],[3600,19,3692,494],[3601,6,3692,496,"dataURLOptions"],[3601,20,3692,510],[3601,23,3692,513],[3601,24,3692,514],[3601,25,3692,515],[3602,6,3692,517,"mousemoveWait"],[3602,19,3692,530],[3603,6,3692,532,"recordDOM"],[3603,15,3692,541],[3603,18,3692,544],[3603,22,3692,548],[3604,6,3692,550,"recordCanvas"],[3604,18,3692,562],[3604,21,3692,565],[3604,26,3692,570],[3605,6,3692,572,"recordCrossOriginIframes"],[3605,30,3692,596],[3605,33,3692,599],[3605,38,3692,604],[3606,6,3692,606,"recordAfter"],[3606,17,3692,617],[3606,20,3692,620,"options"],[3606,27,3692,627],[3606,28,3692,628,"recordAfter"],[3606,39,3692,639],[3606,44,3692,644],[3606,62,3692,662],[3606,65,3693,10,"options"],[3606,72,3693,17],[3606,73,3693,18,"recordAfter"],[3606,84,3693,29],[3606,87,3694,10],[3606,93,3694,16],[3607,6,3694,18,"userTriggeredOnInput"],[3607,26,3694,38],[3607,29,3694,41],[3607,34,3694,46],[3608,6,3694,48,"collectFonts"],[3608,18,3694,60],[3608,21,3694,63],[3608,26,3694,68],[3609,6,3694,70,"inlineImages"],[3609,18,3694,82],[3609,21,3694,85],[3609,26,3694,90],[3610,6,3694,92,"plugins"],[3610,13,3694,99],[3611,6,3694,101,"keepIframeSrcFn"],[3611,21,3694,116],[3611,24,3694,119,"keepIframeSrcFn"],[3611,25,3694,119],[3611,30,3694,125],[3611,35,3694,130],[3612,6,3694,132,"ignoreCSSAttributes"],[3612,25,3694,151],[3612,28,3694,154],[3612,32,3694,158,"Set"],[3612,35,3694,161],[3612,36,3694,162],[3612,38,3694,164],[3612,39,3694,165],[3613,6,3694,167,"errorHandler"],[3613,18,3694,179],[3614,6,3694,181,"onMutation"],[3614,16,3694,191],[3615,6,3694,193,"getCanvasManager"],[3616,4,3694,211],[3616,5,3694,212],[3616,8,3694,215,"options"],[3616,15,3694,222],[3617,4,3695,4,"registerErrorHandler"],[3617,24,3695,24],[3617,25,3695,25,"errorHandler"],[3617,37,3695,37],[3617,38,3695,38],[3618,4,3696,4],[3618,10,3696,10,"inEmittingFrame"],[3618,25,3696,25],[3618,28,3696,28,"recordCrossOriginIframes"],[3618,52,3696,52],[3618,55,3697,10,"window"],[3618,61,3697,16],[3618,62,3697,17,"parent"],[3618,68,3697,23],[3618,73,3697,28,"window"],[3618,79,3697,34],[3618,82,3698,10],[3618,86,3698,14],[3619,4,3699,4],[3619,8,3699,8,"passEmitsToParent"],[3619,25,3699,25],[3619,28,3699,28],[3619,33,3699,33],[3620,4,3700,4],[3620,8,3700,8],[3620,9,3700,9,"inEmittingFrame"],[3620,24,3700,24],[3620,26,3700,26],[3621,6,3701,8],[3621,10,3701,12],[3622,8,3702,12],[3622,12,3702,16,"window"],[3622,18,3702,22],[3622,19,3702,23,"parent"],[3622,25,3702,29],[3622,26,3702,30,"document"],[3622,34,3702,38],[3622,36,3702,40],[3623,10,3703,16,"passEmitsToParent"],[3623,27,3703,33],[3623,30,3703,36],[3623,35,3703,41],[3624,8,3704,12],[3625,6,3705,8],[3625,7,3705,9],[3625,8,3706,8],[3625,15,3706,15,"e"],[3625,16,3706,16],[3625,18,3706,18],[3626,8,3707,12,"passEmitsToParent"],[3626,25,3707,29],[3626,28,3707,32],[3626,32,3707,36],[3627,6,3708,8],[3628,4,3709,4],[3629,4,3710,4],[3629,8,3710,8,"inEmittingFrame"],[3629,23,3710,23],[3629,27,3710,27],[3629,28,3710,28,"emit"],[3629,32,3710,32],[3629,34,3710,34],[3630,6,3711,8],[3630,12,3711,14],[3630,16,3711,18,"Error"],[3630,21,3711,23],[3630,22,3711,24],[3630,49,3711,51],[3630,50,3711,52],[3631,4,3712,4],[3632,4,3713,4],[3632,8,3713,8],[3632,9,3713,9,"inEmittingFrame"],[3632,24,3713,24],[3632,28,3713,28],[3632,29,3713,29,"passEmitsToParent"],[3632,46,3713,46],[3632,48,3713,48],[3633,6,3714,8],[3633,13,3714,15],[3633,19,3714,21],[3633,20,3715,8],[3633,21,3715,9],[3634,4,3716,4],[3635,4,3717,4],[3635,8,3717,8,"mousemoveWait"],[3635,21,3717,21],[3635,26,3717,26,"undefined"],[3635,35,3717,35],[3635,39,3717,39,"sampling"],[3635,47,3717,47],[3635,48,3717,48,"mousemove"],[3635,57,3717,57],[3635,62,3717,62,"undefined"],[3635,71,3717,71],[3635,73,3717,73],[3636,6,3718,8,"sampling"],[3636,14,3718,16],[3636,15,3718,17,"mousemove"],[3636,24,3718,26],[3636,27,3718,29,"mousemoveWait"],[3636,40,3718,42],[3637,4,3719,4],[3638,4,3720,4,"mirror"],[3638,10,3720,10],[3638,11,3720,11,"reset"],[3638,16,3720,16],[3638,17,3720,17],[3638,18,3720,18],[3639,4,3721,4],[3639,10,3721,10,"maskInputOptions"],[3639,26,3721,26],[3639,29,3721,29,"maskAllInputs"],[3639,42,3721,42],[3639,47,3721,47],[3639,51,3721,51],[3639,54,3722,10],[3640,6,3723,12,"color"],[3640,11,3723,17],[3640,13,3723,19],[3640,17,3723,23],[3641,6,3724,12,"date"],[3641,10,3724,16],[3641,12,3724,18],[3641,16,3724,22],[3642,6,3725,12],[3642,22,3725,28],[3642,24,3725,30],[3642,28,3725,34],[3643,6,3726,12,"email"],[3643,11,3726,17],[3643,13,3726,19],[3643,17,3726,23],[3644,6,3727,12,"month"],[3644,11,3727,17],[3644,13,3727,19],[3644,17,3727,23],[3645,6,3728,12,"number"],[3645,12,3728,18],[3645,14,3728,20],[3645,18,3728,24],[3646,6,3729,12,"range"],[3646,11,3729,17],[3646,13,3729,19],[3646,17,3729,23],[3647,6,3730,12,"search"],[3647,12,3730,18],[3647,14,3730,20],[3647,18,3730,24],[3648,6,3731,12,"tel"],[3648,9,3731,15],[3648,11,3731,17],[3648,15,3731,21],[3649,6,3732,12,"text"],[3649,10,3732,16],[3649,12,3732,18],[3649,16,3732,22],[3650,6,3733,12,"time"],[3650,10,3733,16],[3650,12,3733,18],[3650,16,3733,22],[3651,6,3734,12,"url"],[3651,9,3734,15],[3651,11,3734,17],[3651,15,3734,21],[3652,6,3735,12,"week"],[3652,10,3735,16],[3652,12,3735,18],[3652,16,3735,22],[3653,6,3736,12,"textarea"],[3653,14,3736,20],[3653,16,3736,22],[3653,20,3736,26],[3654,6,3737,12,"select"],[3654,12,3737,18],[3654,14,3737,20],[3654,18,3737,24],[3655,6,3738,12,"radio"],[3655,11,3738,17],[3655,13,3738,19],[3655,17,3738,23],[3656,6,3739,12,"checkbox"],[3656,14,3739,20],[3656,16,3739,22],[3657,4,3740,8],[3657,5,3740,9],[3657,8,3741,10,"_maskInputOptions"],[3657,25,3741,27],[3657,30,3741,32,"undefined"],[3657,39,3741,41],[3657,42,3742,14,"_maskInputOptions"],[3657,59,3742,31],[3657,62,3743,14],[3657,63,3743,15],[3657,64,3743,16],[3658,4,3744,4],[3658,10,3744,10,"slimDOMOptions"],[3658,24,3744,24],[3658,27,3744,27,"_slimDOMOptions"],[3658,42,3744,42],[3658,47,3744,47],[3658,51,3744,51],[3658,55,3744,55,"_slimDOMOptions"],[3658,70,3744,70],[3658,75,3744,75],[3658,80,3744,80],[3658,83,3745,10],[3659,6,3746,12,"script"],[3659,12,3746,18],[3659,14,3746,20],[3659,18,3746,24],[3660,6,3747,12,"comment"],[3660,13,3747,19],[3660,15,3747,21],[3660,19,3747,25],[3661,6,3748,12,"headFavicon"],[3661,17,3748,23],[3661,19,3748,25],[3661,23,3748,29],[3662,6,3749,12,"headWhitespace"],[3662,20,3749,26],[3662,22,3749,28],[3662,26,3749,32],[3663,6,3750,12,"headMetaSocial"],[3663,20,3750,26],[3663,22,3750,28],[3663,26,3750,32],[3664,6,3751,12,"headMetaRobots"],[3664,20,3751,26],[3664,22,3751,28],[3664,26,3751,32],[3665,6,3752,12,"headMetaHttpEquiv"],[3665,23,3752,29],[3665,25,3752,31],[3665,29,3752,35],[3666,6,3753,12,"headMetaVerification"],[3666,26,3753,32],[3666,28,3753,34],[3666,32,3753,38],[3667,6,3754,12,"headMetaAuthorship"],[3667,24,3754,30],[3667,26,3754,32,"_slimDOMOptions"],[3667,41,3754,47],[3667,46,3754,52],[3667,51,3754,57],[3668,6,3755,12,"headMetaDescKeywords"],[3668,26,3755,32],[3668,28,3755,34,"_slimDOMOptions"],[3668,43,3755,49],[3668,48,3755,54],[3669,4,3756,8],[3669,5,3756,9],[3669,8,3757,10,"_slimDOMOptions"],[3669,23,3757,25],[3669,26,3758,14,"_slimDOMOptions"],[3669,41,3758,29],[3669,44,3759,14],[3669,45,3759,15],[3669,46,3759,16],[3670,4,3760,4,"polyfill"],[3670,12,3760,12],[3670,13,3760,13],[3670,14,3760,14],[3671,4,3761,4],[3671,8,3761,8,"lastFullSnapshotEvent"],[3671,29,3761,29],[3672,4,3762,4],[3672,8,3762,8,"incrementalSnapshotCount"],[3672,32,3762,32],[3672,35,3762,35],[3672,36,3762,36],[3673,4,3763,4],[3673,10,3763,10,"eventProcessor"],[3673,24,3763,24],[3673,27,3763,28,"e"],[3673,28,3763,29],[3673,32,3763,34],[3674,6,3764,8],[3674,11,3764,13],[3674,17,3764,19,"plugin"],[3674,23,3764,25],[3674,27,3764,29,"plugins"],[3674,34,3764,36],[3674,38,3764,40],[3674,40,3764,42],[3674,42,3764,44],[3675,8,3765,12],[3675,12,3765,16,"plugin"],[3675,18,3765,22],[3675,19,3765,23,"eventProcessor"],[3675,33,3765,37],[3675,35,3765,39],[3676,10,3766,16,"e"],[3676,11,3766,17],[3676,14,3766,20,"plugin"],[3676,20,3766,26],[3676,21,3766,27,"eventProcessor"],[3676,35,3766,41],[3676,36,3766,42,"e"],[3676,37,3766,43],[3676,38,3766,44],[3677,8,3767,12],[3678,6,3768,8],[3679,6,3769,8],[3679,10,3769,12,"packFn"],[3679,16,3769,18],[3679,20,3770,12],[3679,21,3770,13,"passEmitsToParent"],[3679,38,3770,30],[3679,40,3770,32],[3680,8,3771,12,"e"],[3680,9,3771,13],[3680,12,3771,16,"packFn"],[3680,18,3771,22],[3680,19,3771,23,"e"],[3680,20,3771,24],[3680,21,3771,25],[3681,6,3772,8],[3682,6,3773,8],[3682,13,3773,15,"e"],[3682,14,3773,16],[3683,4,3774,4],[3683,5,3774,5],[3684,4,3775,4,"wrappedEmit"],[3684,15,3775,15],[3684,18,3775,18,"wrappedEmit"],[3684,19,3775,19,"r"],[3684,20,3775,20],[3684,22,3775,22,"isCheckout"],[3684,32,3775,32],[3684,37,3775,37],[3685,6,3776,8],[3685,12,3776,14,"e"],[3685,13,3776,15],[3685,16,3776,18,"r"],[3685,17,3776,19],[3686,6,3777,8,"e"],[3686,7,3777,9],[3686,8,3777,10,"timestamp"],[3686,17,3777,19],[3686,20,3777,22,"nowTimestamp"],[3686,32,3777,34],[3686,33,3777,35],[3686,34,3777,36],[3687,6,3778,8],[3687,10,3778,12],[3687,14,3778,12,"_optionalChain"],[3687,34,3778,26],[3687,36,3778,27],[3687,37,3778,28,"mutationBuffers"],[3687,52,3778,43],[3687,54,3778,45],[3687,62,3778,53],[3687,64,3778,55,"_4"],[3687,66,3778,57],[3687,70,3778,61,"_4"],[3687,72,3778,63],[3687,73,3778,64],[3687,74,3778,65],[3687,75,3778,66],[3687,77,3778,68],[3687,93,3778,84],[3687,95,3778,86,"_5"],[3687,97,3778,88],[3687,101,3778,92,"_5"],[3687,103,3778,94],[3687,104,3778,95,"isFrozen"],[3687,112,3778,103],[3687,114,3778,105],[3687,120,3778,111],[3687,122,3778,113,"_6"],[3687,124,3778,115],[3687,128,3778,119,"_6"],[3687,130,3778,121],[3687,131,3778,122],[3687,132,3778,123],[3687,133,3778,124],[3687,134,3778,125],[3687,138,3779,12,"e"],[3687,139,3779,13],[3687,140,3779,14,"type"],[3687,144,3779,18],[3687,149,3779,23,"EventType"],[3687,158,3779,32],[3687,159,3779,33,"FullSnapshot"],[3687,171,3779,45],[3687,175,3780,12],[3687,177,3780,14,"e"],[3687,178,3780,15],[3687,179,3780,16,"type"],[3687,183,3780,20],[3687,188,3780,25,"EventType"],[3687,197,3780,34],[3687,198,3780,35,"IncrementalSnapshot"],[3687,217,3780,54],[3687,221,3781,16,"e"],[3687,222,3781,17],[3687,223,3781,18,"data"],[3687,227,3781,22],[3687,228,3781,23,"source"],[3687,234,3781,29],[3687,239,3781,34,"IncrementalSource"],[3687,256,3781,51],[3687,257,3781,52,"Mutation"],[3687,265,3781,60],[3687,266,3781,61],[3687,268,3781,63],[3688,8,3782,12,"mutationBuffers"],[3688,23,3782,27],[3688,24,3782,28,"forEach"],[3688,31,3782,35],[3688,32,3782,37,"buf"],[3688,35,3782,40],[3688,39,3782,45,"buf"],[3688,42,3782,48],[3688,43,3782,49,"unfreeze"],[3688,51,3782,57],[3688,52,3782,58],[3688,53,3782,59],[3688,54,3782,60],[3689,6,3783,8],[3690,6,3784,8],[3690,10,3784,12,"inEmittingFrame"],[3690,25,3784,27],[3690,27,3784,29],[3691,8,3785,12],[3691,12,3785,12,"_optionalChain"],[3691,32,3785,26],[3691,34,3785,27],[3691,35,3785,28,"emit"],[3691,39,3785,32],[3691,41,3785,34],[3691,55,3785,48],[3691,57,3785,50,"_7"],[3691,59,3785,52],[3691,63,3785,56,"_7"],[3691,65,3785,58],[3691,66,3785,59,"eventProcessor"],[3691,80,3785,73],[3691,81,3785,74,"e"],[3691,82,3785,75],[3691,83,3785,76],[3691,85,3785,78,"isCheckout"],[3691,95,3785,88],[3691,96,3785,89],[3691,97,3785,90],[3691,98,3785,91],[3692,6,3786,8],[3692,7,3786,9],[3692,13,3787,13],[3692,17,3787,17,"passEmitsToParent"],[3692,34,3787,34],[3692,36,3787,36],[3693,8,3788,12],[3693,14,3788,18,"message"],[3693,21,3788,25],[3693,24,3788,28],[3694,10,3789,16,"type"],[3694,14,3789,20],[3694,16,3789,22],[3694,23,3789,29],[3695,10,3790,16,"event"],[3695,15,3790,21],[3695,17,3790,23,"eventProcessor"],[3695,31,3790,37],[3695,32,3790,38,"e"],[3695,33,3790,39],[3695,34,3790,40],[3696,10,3791,16,"origin"],[3696,16,3791,22],[3696,18,3791,24,"window"],[3696,24,3791,30],[3696,25,3791,31,"location"],[3696,33,3791,39],[3696,34,3791,40,"origin"],[3696,40,3791,46],[3697,10,3792,16,"isCheckout"],[3698,8,3793,12],[3698,9,3793,13],[3699,8,3794,12,"window"],[3699,14,3794,18],[3699,15,3794,19,"parent"],[3699,21,3794,25],[3699,22,3794,26,"postMessage"],[3699,33,3794,37],[3699,34,3794,38,"message"],[3699,41,3794,45],[3699,43,3794,47],[3699,46,3794,50],[3699,47,3794,51],[3700,6,3795,8],[3701,6,3796,8],[3701,10,3796,12,"e"],[3701,11,3796,13],[3701,12,3796,14,"type"],[3701,16,3796,18],[3701,21,3796,23,"EventType"],[3701,30,3796,32],[3701,31,3796,33,"FullSnapshot"],[3701,43,3796,45],[3701,45,3796,47],[3702,8,3797,12,"lastFullSnapshotEvent"],[3702,29,3797,33],[3702,32,3797,36,"e"],[3702,33,3797,37],[3703,8,3798,12,"incrementalSnapshotCount"],[3703,32,3798,36],[3703,35,3798,39],[3703,36,3798,40],[3704,6,3799,8],[3704,7,3799,9],[3704,13,3800,13],[3704,17,3800,17,"e"],[3704,18,3800,18],[3704,19,3800,19,"type"],[3704,23,3800,23],[3704,28,3800,28,"EventType"],[3704,37,3800,37],[3704,38,3800,38,"IncrementalSnapshot"],[3704,57,3800,57],[3704,59,3800,59],[3705,8,3801,12],[3705,12,3801,16,"e"],[3705,13,3801,17],[3705,14,3801,18,"data"],[3705,18,3801,22],[3705,19,3801,23,"source"],[3705,25,3801,29],[3705,30,3801,34,"IncrementalSource"],[3705,47,3801,51],[3705,48,3801,52,"Mutation"],[3705,56,3801,60],[3705,60,3802,16,"e"],[3705,61,3802,17],[3705,62,3802,18,"data"],[3705,66,3802,22],[3705,67,3802,23,"isAttachIframe"],[3705,81,3802,37],[3705,83,3802,39],[3706,10,3803,16],[3707,8,3804,12],[3708,8,3805,12,"incrementalSnapshotCount"],[3708,32,3805,36],[3708,34,3805,38],[3709,8,3806,12],[3709,14,3806,18,"exceedCount"],[3709,25,3806,29],[3709,28,3806,32,"checkoutEveryNth"],[3709,44,3806,48],[3709,48,3806,52,"incrementalSnapshotCount"],[3709,72,3806,76],[3709,76,3806,80,"checkoutEveryNth"],[3709,92,3806,96],[3710,8,3807,12],[3710,14,3807,18,"exceedTime"],[3710,24,3807,28],[3710,27,3807,31,"checkoutEveryNms"],[3710,43,3807,47],[3710,47,3808,16,"lastFullSnapshotEvent"],[3710,68,3808,37],[3710,72,3809,16,"e"],[3710,73,3809,17],[3710,74,3809,18,"timestamp"],[3710,83,3809,27],[3710,86,3809,30,"lastFullSnapshotEvent"],[3710,107,3809,51],[3710,108,3809,52,"timestamp"],[3710,117,3809,61],[3710,120,3809,64,"checkoutEveryNms"],[3710,136,3809,80],[3711,8,3810,12],[3711,12,3810,16,"exceedCount"],[3711,23,3810,27],[3711,27,3810,31,"exceedTime"],[3711,37,3810,41],[3711,39,3810,43],[3712,10,3811,16,"takeFullSnapshot"],[3712,26,3811,32],[3712,27,3811,33],[3712,31,3811,37],[3712,32,3811,38],[3713,8,3812,12],[3714,6,3813,8],[3715,4,3814,4],[3715,5,3814,5],[3716,4,3815,4],[3716,10,3815,10,"wrappedMutationEmit"],[3716,29,3815,29],[3716,32,3815,33,"m"],[3716,33,3815,34],[3716,37,3815,39],[3717,6,3816,8,"wrappedEmit"],[3717,17,3816,19],[3717,18,3816,20],[3718,8,3817,12,"type"],[3718,12,3817,16],[3718,14,3817,18,"EventType"],[3718,23,3817,27],[3718,24,3817,28,"IncrementalSnapshot"],[3718,43,3817,47],[3719,8,3818,12,"data"],[3719,12,3818,16],[3719,14,3818,18],[3720,10,3819,16,"source"],[3720,16,3819,22],[3720,18,3819,24,"IncrementalSource"],[3720,35,3819,41],[3720,36,3819,42,"Mutation"],[3720,44,3819,50],[3721,10,3820,16],[3721,13,3820,19,"m"],[3722,8,3821,12],[3723,6,3822,8],[3723,7,3822,9],[3723,8,3822,10],[3724,4,3823,4],[3724,5,3823,5],[3725,4,3824,4],[3725,10,3824,10,"wrappedScrollEmit"],[3725,27,3824,27],[3725,30,3824,31,"p"],[3725,31,3824,32],[3725,35,3824,37,"wrappedEmit"],[3725,46,3824,48],[3725,47,3824,49],[3726,6,3825,8,"type"],[3726,10,3825,12],[3726,12,3825,14,"EventType"],[3726,21,3825,23],[3726,22,3825,24,"IncrementalSnapshot"],[3726,41,3825,43],[3727,6,3826,8,"data"],[3727,10,3826,12],[3727,12,3826,14],[3728,8,3827,12,"source"],[3728,14,3827,18],[3728,16,3827,20,"IncrementalSource"],[3728,33,3827,37],[3728,34,3827,38,"Scroll"],[3728,40,3827,44],[3729,8,3828,12],[3729,11,3828,15,"p"],[3730,6,3829,8],[3731,4,3830,4],[3731,5,3830,5],[3731,6,3830,6],[3732,4,3831,4],[3732,10,3831,10,"wrappedCanvasMutationEmit"],[3732,35,3831,35],[3732,38,3831,39,"p"],[3732,39,3831,40],[3732,43,3831,45,"wrappedEmit"],[3732,54,3831,56],[3732,55,3831,57],[3733,6,3832,8,"type"],[3733,10,3832,12],[3733,12,3832,14,"EventType"],[3733,21,3832,23],[3733,22,3832,24,"IncrementalSnapshot"],[3733,41,3832,43],[3734,6,3833,8,"data"],[3734,10,3833,12],[3734,12,3833,14],[3735,8,3834,12,"source"],[3735,14,3834,18],[3735,16,3834,20,"IncrementalSource"],[3735,33,3834,37],[3735,34,3834,38,"CanvasMutation"],[3735,48,3834,52],[3736,8,3835,12],[3736,11,3835,15,"p"],[3737,6,3836,8],[3738,4,3837,4],[3738,5,3837,5],[3738,6,3837,6],[3739,4,3838,4],[3739,10,3838,10,"wrappedAdoptedStyleSheetEmit"],[3739,38,3838,38],[3739,41,3838,42,"a"],[3739,42,3838,43],[3739,46,3838,48,"wrappedEmit"],[3739,57,3838,59],[3739,58,3838,60],[3740,6,3839,8,"type"],[3740,10,3839,12],[3740,12,3839,14,"EventType"],[3740,21,3839,23],[3740,22,3839,24,"IncrementalSnapshot"],[3740,41,3839,43],[3741,6,3840,8,"data"],[3741,10,3840,12],[3741,12,3840,14],[3742,8,3841,12,"source"],[3742,14,3841,18],[3742,16,3841,20,"IncrementalSource"],[3742,33,3841,37],[3742,34,3841,38,"AdoptedStyleSheet"],[3742,51,3841,55],[3743,8,3842,12],[3743,11,3842,15,"a"],[3744,6,3843,8],[3745,4,3844,4],[3745,5,3844,5],[3745,6,3844,6],[3746,4,3845,4],[3746,10,3845,10,"stylesheetManager"],[3746,27,3845,27],[3746,30,3845,30],[3746,34,3845,34,"StylesheetManager"],[3746,51,3845,51],[3746,52,3845,52],[3747,6,3846,8,"mutationCb"],[3747,16,3846,18],[3747,18,3846,20,"wrappedMutationEmit"],[3747,37,3846,39],[3748,6,3847,8,"adoptedStyleSheetCb"],[3748,25,3847,27],[3748,27,3847,29,"wrappedAdoptedStyleSheetEmit"],[3749,4,3848,4],[3749,5,3848,5],[3749,6,3848,6],[3750,4,3849,4],[3750,10,3849,10,"iframeManager"],[3750,23,3849,23],[3750,26,3849,26],[3750,33,3849,33,"__RRWEB_EXCLUDE_IFRAME__"],[3750,57,3849,57],[3750,62,3849,62],[3750,71,3849,71],[3750,75,3849,75,"__RRWEB_EXCLUDE_IFRAME__"],[3750,99,3849,99],[3750,102,3850,10],[3750,106,3850,14,"IframeManagerNoop"],[3750,123,3850,31],[3750,124,3850,32],[3750,125,3850,33],[3750,128,3851,10],[3750,132,3851,14,"IframeManager"],[3750,145,3851,27],[3750,146,3851,28],[3751,6,3852,12,"mirror"],[3751,12,3852,18],[3752,6,3853,12,"mutationCb"],[3752,16,3853,22],[3752,18,3853,24,"wrappedMutationEmit"],[3752,37,3853,43],[3753,6,3854,12,"stylesheetManager"],[3753,23,3854,29],[3753,25,3854,31,"stylesheetManager"],[3753,42,3854,48],[3754,6,3855,12,"recordCrossOriginIframes"],[3754,30,3855,36],[3755,6,3856,12,"wrappedEmit"],[3756,4,3857,8],[3756,5,3857,9],[3756,6,3857,10],[3757,4,3858,4],[3757,9,3858,9],[3757,15,3858,15,"plugin"],[3757,21,3858,21],[3757,25,3858,25,"plugins"],[3757,32,3858,32],[3757,36,3858,36],[3757,38,3858,38],[3757,40,3858,40],[3758,6,3859,8],[3758,10,3859,12,"plugin"],[3758,16,3859,18],[3758,17,3859,19,"getMirror"],[3758,26,3859,28],[3758,28,3860,12,"plugin"],[3758,34,3860,18],[3758,35,3860,19,"getMirror"],[3758,44,3860,28],[3758,45,3860,29],[3759,8,3861,16,"nodeMirror"],[3759,18,3861,26],[3759,20,3861,28,"mirror"],[3759,26,3861,34],[3760,8,3862,16,"crossOriginIframeMirror"],[3760,31,3862,39],[3760,33,3862,41,"iframeManager"],[3760,46,3862,54],[3760,47,3862,55,"crossOriginIframeMirror"],[3760,70,3862,78],[3761,8,3863,16,"crossOriginIframeStyleMirror"],[3761,36,3863,44],[3761,38,3863,46,"iframeManager"],[3761,51,3863,59],[3761,52,3863,60,"crossOriginIframeStyleMirror"],[3762,6,3864,12],[3762,7,3864,13],[3762,8,3864,14],[3763,4,3865,4],[3764,4,3866,4],[3764,10,3866,10,"processedNodeManager"],[3764,30,3866,30],[3764,33,3866,33],[3764,37,3866,37,"ProcessedNodeManager"],[3764,57,3866,57],[3764,58,3866,58],[3764,59,3866,59],[3765,4,3867,4],[3765,10,3867,10,"canvasManager"],[3765,23,3867,23],[3765,26,3867,26,"_getCanvasManager"],[3765,43,3867,43],[3765,44,3867,44,"getCanvasManager"],[3765,60,3867,60],[3765,62,3867,62],[3766,6,3868,8,"mirror"],[3766,12,3868,14],[3767,6,3869,8,"win"],[3767,9,3869,11],[3767,11,3869,13,"window"],[3767,17,3869,19],[3768,6,3870,8,"mutationCb"],[3768,16,3870,18],[3768,18,3870,21,"p"],[3768,19,3870,22],[3768,23,3870,27,"wrappedEmit"],[3768,34,3870,38],[3768,35,3870,39],[3769,8,3871,12,"type"],[3769,12,3871,16],[3769,14,3871,18,"EventType"],[3769,23,3871,27],[3769,24,3871,28,"IncrementalSnapshot"],[3769,43,3871,47],[3770,8,3872,12,"data"],[3770,12,3872,16],[3770,14,3872,18],[3771,10,3873,16,"source"],[3771,16,3873,22],[3771,18,3873,24,"IncrementalSource"],[3771,35,3873,41],[3771,36,3873,42,"CanvasMutation"],[3771,50,3873,56],[3772,10,3874,16],[3772,13,3874,19,"p"],[3773,8,3875,12],[3774,6,3876,8],[3774,7,3876,9],[3774,8,3876,10],[3775,6,3877,8,"recordCanvas"],[3775,18,3877,20],[3776,6,3878,8,"blockClass"],[3776,16,3878,18],[3777,6,3879,8,"blockSelector"],[3777,19,3879,21],[3778,6,3880,8,"unblockSelector"],[3778,21,3880,23],[3779,6,3881,8,"maxCanvasSize"],[3779,19,3881,21],[3780,6,3882,8,"sampling"],[3780,14,3882,16],[3780,16,3882,18,"sampling"],[3780,24,3882,26],[3780,25,3882,27],[3780,33,3882,35],[3780,34,3882,36],[3781,6,3883,8,"dataURLOptions"],[3781,20,3883,22],[3782,6,3884,8,"errorHandler"],[3783,4,3885,4],[3783,5,3885,5],[3783,6,3885,6],[3784,4,3886,4],[3784,10,3886,10,"shadowDomManager"],[3784,26,3886,26],[3784,29,3886,29],[3784,36,3886,36,"__RRWEB_EXCLUDE_SHADOW_DOM__"],[3784,64,3886,64],[3784,69,3886,69],[3784,78,3886,78],[3784,82,3887,8,"__RRWEB_EXCLUDE_SHADOW_DOM__"],[3784,110,3887,36],[3784,113,3888,10],[3784,117,3888,14,"ShadowDomManagerNoop"],[3784,137,3888,34],[3784,138,3888,35],[3784,139,3888,36],[3784,142,3889,10],[3784,146,3889,14,"ShadowDomManager"],[3784,162,3889,30],[3784,163,3889,31],[3785,6,3890,12,"mutationCb"],[3785,16,3890,22],[3785,18,3890,24,"wrappedMutationEmit"],[3785,37,3890,43],[3786,6,3891,12,"scrollCb"],[3786,14,3891,20],[3786,16,3891,22,"wrappedScrollEmit"],[3786,33,3891,39],[3787,6,3892,12,"bypassOptions"],[3787,19,3892,25],[3787,21,3892,27],[3788,8,3893,16,"onMutation"],[3788,18,3893,26],[3789,8,3894,16,"blockClass"],[3789,18,3894,26],[3790,8,3895,16,"blockSelector"],[3790,21,3895,29],[3791,8,3896,16,"unblockSelector"],[3791,23,3896,31],[3792,8,3897,16,"maskAllText"],[3792,19,3897,27],[3793,8,3898,16,"maskTextClass"],[3793,21,3898,29],[3794,8,3899,16,"unmaskTextClass"],[3794,23,3899,31],[3795,8,3900,16,"maskTextSelector"],[3795,24,3900,32],[3796,8,3901,16,"unmaskTextSelector"],[3796,26,3901,34],[3797,8,3902,16,"inlineStylesheet"],[3797,24,3902,32],[3798,8,3903,16,"maskInputOptions"],[3798,24,3903,32],[3799,8,3904,16,"dataURLOptions"],[3799,22,3904,30],[3800,8,3905,16,"maskAttributeFn"],[3800,23,3905,31],[3801,8,3906,16,"maskTextFn"],[3801,18,3906,26],[3802,8,3907,16,"maskInputFn"],[3802,19,3907,27],[3803,8,3908,16,"recordCanvas"],[3803,20,3908,28],[3804,8,3909,16,"inlineImages"],[3804,20,3909,28],[3805,8,3910,16,"sampling"],[3805,16,3910,24],[3806,8,3911,16,"slimDOMOptions"],[3806,22,3911,30],[3807,8,3912,16,"iframeManager"],[3807,21,3912,29],[3808,8,3913,16,"stylesheetManager"],[3808,25,3913,33],[3809,8,3914,16,"canvasManager"],[3809,21,3914,29],[3810,8,3915,16,"keepIframeSrcFn"],[3810,23,3915,31],[3811,8,3916,16,"processedNodeManager"],[3812,6,3917,12],[3812,7,3917,13],[3813,6,3918,12,"mirror"],[3814,4,3919,8],[3814,5,3919,9],[3814,6,3919,10],[3815,4,3920,4],[3815,10,3920,10,"takeFullSnapshot"],[3815,26,3920,26],[3815,29,3920,29,"takeFullSnapshot"],[3815,30,3920,30,"isCheckout"],[3815,40,3920,40],[3815,43,3920,43],[3815,48,3920,48],[3815,53,3920,53],[3816,6,3921,8],[3816,10,3921,12],[3816,11,3921,13,"recordDOM"],[3816,20,3921,22],[3816,22,3921,24],[3817,8,3922,12],[3818,6,3923,8],[3819,6,3924,8,"wrappedEmit"],[3819,17,3924,19],[3819,18,3924,20],[3820,8,3925,12,"type"],[3820,12,3925,16],[3820,14,3925,18,"EventType"],[3820,23,3925,27],[3820,24,3925,28,"Meta"],[3820,28,3925,32],[3821,8,3926,12,"data"],[3821,12,3926,16],[3821,14,3926,18],[3822,10,3927,16,"href"],[3822,14,3927,20],[3822,16,3927,22,"window"],[3822,22,3927,28],[3822,23,3927,29,"location"],[3822,31,3927,37],[3822,32,3927,38,"href"],[3822,36,3927,42],[3823,10,3928,16,"width"],[3823,15,3928,21],[3823,17,3928,23,"getWindowWidth"],[3823,31,3928,37],[3823,32,3928,38],[3823,33,3928,39],[3824,10,3929,16,"height"],[3824,16,3929,22],[3824,18,3929,24,"getWindowHeight"],[3824,33,3929,39],[3824,34,3929,40],[3825,8,3930,12],[3826,6,3931,8],[3826,7,3931,9],[3826,9,3931,11,"isCheckout"],[3826,19,3931,21],[3826,20,3931,22],[3827,6,3932,8,"stylesheetManager"],[3827,23,3932,25],[3827,24,3932,26,"reset"],[3827,29,3932,31],[3827,30,3932,32],[3827,31,3932,33],[3828,6,3933,8,"shadowDomManager"],[3828,22,3933,24],[3828,23,3933,25,"init"],[3828,27,3933,29],[3828,28,3933,30],[3828,29,3933,31],[3829,6,3934,8,"mutationBuffers"],[3829,21,3934,23],[3829,22,3934,24,"forEach"],[3829,29,3934,31],[3829,30,3934,33,"buf"],[3829,33,3934,36],[3829,37,3934,41,"buf"],[3829,40,3934,44],[3829,41,3934,45,"lock"],[3829,45,3934,49],[3829,46,3934,50],[3829,47,3934,51],[3829,48,3934,52],[3830,6,3935,8],[3830,12,3935,14,"node"],[3830,16,3935,18],[3830,19,3935,21,"snapshot"],[3830,27,3935,29],[3830,28,3935,30,"document"],[3830,36,3935,38],[3830,38,3935,40],[3831,8,3936,12,"mirror"],[3831,14,3936,18],[3832,8,3937,12,"blockClass"],[3832,18,3937,22],[3833,8,3938,12,"blockSelector"],[3833,21,3938,25],[3834,8,3939,12,"unblockSelector"],[3834,23,3939,27],[3835,8,3940,12,"maskAllText"],[3835,19,3940,23],[3836,8,3941,12,"maskTextClass"],[3836,21,3941,25],[3837,8,3942,12,"unmaskTextClass"],[3837,23,3942,27],[3838,8,3943,12,"maskTextSelector"],[3838,24,3943,28],[3839,8,3944,12,"unmaskTextSelector"],[3839,26,3944,30],[3840,8,3945,12,"inlineStylesheet"],[3840,24,3945,28],[3841,8,3946,12,"maskAllInputs"],[3841,21,3946,25],[3841,23,3946,27,"maskInputOptions"],[3841,39,3946,43],[3842,8,3947,12,"maskAttributeFn"],[3842,23,3947,27],[3843,8,3948,12,"maskInputFn"],[3843,19,3948,23],[3844,8,3949,12,"maskTextFn"],[3844,18,3949,22],[3845,8,3950,12,"slimDOM"],[3845,15,3950,19],[3845,17,3950,21,"slimDOMOptions"],[3845,31,3950,35],[3846,8,3951,12,"dataURLOptions"],[3846,22,3951,26],[3847,8,3952,12,"recordCanvas"],[3847,20,3952,24],[3848,8,3953,12,"inlineImages"],[3848,20,3953,24],[3849,8,3954,12,"onSerialize"],[3849,19,3954,23],[3849,21,3954,26,"n"],[3849,22,3954,27],[3849,26,3954,32],[3850,10,3955,16],[3850,14,3955,20,"isSerializedIframe"],[3850,32,3955,38],[3850,33,3955,39,"n"],[3850,34,3955,40],[3850,36,3955,42,"mirror"],[3850,42,3955,48],[3850,43,3955,49],[3850,45,3955,51],[3851,12,3956,20,"iframeManager"],[3851,25,3956,33],[3851,26,3956,34,"addIframe"],[3851,35,3956,43],[3851,36,3956,44,"n"],[3851,37,3956,45],[3851,38,3956,46],[3852,10,3957,16],[3853,10,3958,16],[3853,14,3958,20,"isSerializedStylesheet"],[3853,36,3958,42],[3853,37,3958,43,"n"],[3853,38,3958,44],[3853,40,3958,46,"mirror"],[3853,46,3958,52],[3853,47,3958,53],[3853,49,3958,55],[3854,12,3959,20,"stylesheetManager"],[3854,29,3959,37],[3854,30,3959,38,"trackLinkElement"],[3854,46,3959,54],[3854,47,3959,55,"n"],[3854,48,3959,56],[3854,49,3959,57],[3855,10,3960,16],[3856,10,3961,16],[3856,14,3961,20,"hasShadowRoot"],[3856,27,3961,33],[3856,28,3961,34,"n"],[3856,29,3961,35],[3856,30,3961,36],[3856,32,3961,38],[3857,12,3962,20,"shadowDomManager"],[3857,28,3962,36],[3857,29,3962,37,"addShadowRoot"],[3857,42,3962,50],[3857,43,3962,51,"n"],[3857,44,3962,52],[3857,45,3962,53,"shadowRoot"],[3857,55,3962,63],[3857,57,3962,65,"document"],[3857,65,3962,73],[3857,66,3962,74],[3858,10,3963,16],[3859,8,3964,12],[3859,9,3964,13],[3860,8,3965,12,"onIframeLoad"],[3860,20,3965,24],[3860,22,3965,26,"onIframeLoad"],[3860,23,3965,27,"iframe"],[3860,29,3965,33],[3860,31,3965,35,"childSn"],[3860,38,3965,42],[3860,43,3965,47],[3861,10,3966,16,"iframeManager"],[3861,23,3966,29],[3861,24,3966,30,"attachIframe"],[3861,36,3966,42],[3861,37,3966,43,"iframe"],[3861,43,3966,49],[3861,45,3966,51,"childSn"],[3861,52,3966,58],[3861,53,3966,59],[3862,10,3967,16],[3862,14,3967,20,"iframe"],[3862,20,3967,26],[3862,21,3967,27,"contentWindow"],[3862,34,3967,40],[3862,36,3967,42],[3863,12,3968,20,"canvasManager"],[3863,25,3968,33],[3863,26,3968,34,"addWindow"],[3863,35,3968,43],[3863,36,3968,44,"iframe"],[3863,42,3968,50],[3863,43,3968,51,"contentWindow"],[3863,56,3968,64],[3863,57,3968,65],[3864,10,3969,16],[3865,10,3970,16,"shadowDomManager"],[3865,26,3970,32],[3865,27,3970,33,"observeAttachShadow"],[3865,46,3970,52],[3865,47,3970,53,"iframe"],[3865,53,3970,59],[3865,54,3970,60],[3866,8,3971,12],[3866,9,3971,13],[3867,8,3972,12,"onStylesheetLoad"],[3867,24,3972,28],[3867,26,3972,30,"onStylesheetLoad"],[3867,27,3972,31,"linkEl"],[3867,33,3972,37],[3867,35,3972,39,"childSn"],[3867,42,3972,46],[3867,47,3972,51],[3868,10,3973,16,"stylesheetManager"],[3868,27,3973,33],[3868,28,3973,34,"attachLinkElement"],[3868,45,3973,51],[3868,46,3973,52,"linkEl"],[3868,52,3973,58],[3868,54,3973,60,"childSn"],[3868,61,3973,67],[3868,62,3973,68],[3869,8,3974,12],[3869,9,3974,13],[3870,8,3975,12,"keepIframeSrcFn"],[3871,6,3976,8],[3871,7,3976,9],[3871,8,3976,10],[3872,6,3977,8],[3872,10,3977,12],[3872,11,3977,13,"node"],[3872,15,3977,17],[3872,17,3977,19],[3873,8,3978,12],[3873,15,3978,19,"console"],[3873,22,3978,26],[3873,23,3978,27,"warn"],[3873,27,3978,31],[3873,28,3978,32],[3873,61,3978,65],[3873,62,3978,66],[3874,6,3979,8],[3875,6,3980,8,"wrappedEmit"],[3875,17,3980,19],[3875,18,3980,20],[3876,8,3981,12,"type"],[3876,12,3981,16],[3876,14,3981,18,"EventType"],[3876,23,3981,27],[3876,24,3981,28,"FullSnapshot"],[3876,36,3981,40],[3877,8,3982,12,"data"],[3877,12,3982,16],[3877,14,3982,18],[3878,10,3983,16,"node"],[3878,14,3983,20],[3879,10,3984,16,"initialOffset"],[3879,23,3984,29],[3879,25,3984,31,"getWindowScroll"],[3879,40,3984,46],[3879,41,3984,47,"window"],[3879,47,3984,53],[3880,8,3985,12],[3881,6,3986,8],[3881,7,3986,9],[3881,8,3986,10],[3882,6,3987,8,"mutationBuffers"],[3882,21,3987,23],[3882,22,3987,24,"forEach"],[3882,29,3987,31],[3882,30,3987,33,"buf"],[3882,33,3987,36],[3882,37,3987,41,"buf"],[3882,40,3987,44],[3882,41,3987,45,"unlock"],[3882,47,3987,51],[3882,48,3987,52],[3882,49,3987,53],[3882,50,3987,54],[3883,6,3988,8],[3883,10,3988,12,"document"],[3883,18,3988,20],[3883,19,3988,21,"adoptedStyleSheets"],[3883,37,3988,39],[3883,41,3988,43,"document"],[3883,49,3988,51],[3883,50,3988,52,"adoptedStyleSheets"],[3883,68,3988,70],[3883,69,3988,71,"length"],[3883,75,3988,77],[3883,78,3988,80],[3883,79,3988,81],[3883,81,3989,12,"stylesheetManager"],[3883,98,3989,29],[3883,99,3989,30,"adoptStyleSheets"],[3883,115,3989,46],[3883,116,3989,47,"document"],[3883,124,3989,55],[3883,125,3989,56,"adoptedStyleSheets"],[3883,143,3989,74],[3883,145,3989,76,"mirror"],[3883,151,3989,82],[3883,152,3989,83,"getId"],[3883,157,3989,88],[3883,158,3989,89,"document"],[3883,166,3989,97],[3883,167,3989,98],[3883,168,3989,99],[3884,4,3990,4],[3884,5,3990,5],[3885,4,3991,4,"_takeFullSnapshot"],[3885,21,3991,21],[3885,24,3991,24,"takeFullSnapshot"],[3885,40,3991,40],[3886,4,3992,4],[3886,8,3992,8],[3887,6,3993,8],[3887,12,3993,14,"handlers"],[3887,20,3993,22],[3887,23,3993,25],[3887,25,3993,27],[3888,6,3994,8],[3888,12,3994,14,"observe"],[3888,19,3994,21],[3888,22,3994,25,"doc"],[3888,25,3994,28],[3888,29,3994,33],[3889,8,3995,12],[3889,15,3995,19,"callbackWrapper"],[3889,30,3995,34],[3889,31,3995,35,"initObservers"],[3889,44,3995,48],[3889,45,3995,49],[3889,46,3995,50],[3890,10,3996,16,"onMutation"],[3890,20,3996,26],[3891,10,3997,16,"mutationCb"],[3891,20,3997,26],[3891,22,3997,28,"wrappedMutationEmit"],[3891,41,3997,47],[3892,10,3998,16,"mousemoveCb"],[3892,21,3998,27],[3892,23,3998,29,"mousemoveCb"],[3892,24,3998,30,"positions"],[3892,33,3998,39],[3892,35,3998,41,"source"],[3892,41,3998,47],[3892,46,3998,52,"wrappedEmit"],[3892,57,3998,63],[3892,58,3998,64],[3893,12,3999,20,"type"],[3893,16,3999,24],[3893,18,3999,26,"EventType"],[3893,27,3999,35],[3893,28,3999,36,"IncrementalSnapshot"],[3893,47,3999,55],[3894,12,4000,20,"data"],[3894,16,4000,24],[3894,18,4000,26],[3895,14,4001,24,"source"],[3895,20,4001,30],[3896,14,4002,24,"positions"],[3897,12,4003,20],[3898,10,4004,16],[3898,11,4004,17],[3898,12,4004,18],[3899,10,4005,16,"mouseInteractionCb"],[3899,28,4005,34],[3899,30,4005,37,"d"],[3899,31,4005,38],[3899,35,4005,43,"wrappedEmit"],[3899,46,4005,54],[3899,47,4005,55],[3900,12,4006,20,"type"],[3900,16,4006,24],[3900,18,4006,26,"EventType"],[3900,27,4006,35],[3900,28,4006,36,"IncrementalSnapshot"],[3900,47,4006,55],[3901,12,4007,20,"data"],[3901,16,4007,24],[3901,18,4007,26],[3902,14,4008,24,"source"],[3902,20,4008,30],[3902,22,4008,32,"IncrementalSource"],[3902,39,4008,49],[3902,40,4008,50,"MouseInteraction"],[3902,56,4008,66],[3903,14,4009,24],[3903,17,4009,27,"d"],[3904,12,4010,20],[3905,10,4011,16],[3905,11,4011,17],[3905,12,4011,18],[3906,10,4012,16,"scrollCb"],[3906,18,4012,24],[3906,20,4012,26,"wrappedScrollEmit"],[3906,37,4012,43],[3907,10,4013,16,"viewportResizeCb"],[3907,26,4013,32],[3907,28,4013,35,"d"],[3907,29,4013,36],[3907,33,4013,41,"wrappedEmit"],[3907,44,4013,52],[3907,45,4013,53],[3908,12,4014,20,"type"],[3908,16,4014,24],[3908,18,4014,26,"EventType"],[3908,27,4014,35],[3908,28,4014,36,"IncrementalSnapshot"],[3908,47,4014,55],[3909,12,4015,20,"data"],[3909,16,4015,24],[3909,18,4015,26],[3910,14,4016,24,"source"],[3910,20,4016,30],[3910,22,4016,32,"IncrementalSource"],[3910,39,4016,49],[3910,40,4016,50,"ViewportResize"],[3910,54,4016,64],[3911,14,4017,24],[3911,17,4017,27,"d"],[3912,12,4018,20],[3913,10,4019,16],[3913,11,4019,17],[3913,12,4019,18],[3914,10,4020,16,"inputCb"],[3914,17,4020,23],[3914,19,4020,26,"v"],[3914,20,4020,27],[3914,24,4020,32,"wrappedEmit"],[3914,35,4020,43],[3914,36,4020,44],[3915,12,4021,20,"type"],[3915,16,4021,24],[3915,18,4021,26,"EventType"],[3915,27,4021,35],[3915,28,4021,36,"IncrementalSnapshot"],[3915,47,4021,55],[3916,12,4022,20,"data"],[3916,16,4022,24],[3916,18,4022,26],[3917,14,4023,24,"source"],[3917,20,4023,30],[3917,22,4023,32,"IncrementalSource"],[3917,39,4023,49],[3917,40,4023,50,"Input"],[3917,45,4023,55],[3918,14,4024,24],[3918,17,4024,27,"v"],[3919,12,4025,20],[3920,10,4026,16],[3920,11,4026,17],[3920,12,4026,18],[3921,10,4027,16,"mediaInteractionCb"],[3921,28,4027,34],[3921,30,4027,37,"p"],[3921,31,4027,38],[3921,35,4027,43,"wrappedEmit"],[3921,46,4027,54],[3921,47,4027,55],[3922,12,4028,20,"type"],[3922,16,4028,24],[3922,18,4028,26,"EventType"],[3922,27,4028,35],[3922,28,4028,36,"IncrementalSnapshot"],[3922,47,4028,55],[3923,12,4029,20,"data"],[3923,16,4029,24],[3923,18,4029,26],[3924,14,4030,24,"source"],[3924,20,4030,30],[3924,22,4030,32,"IncrementalSource"],[3924,39,4030,49],[3924,40,4030,50,"MediaInteraction"],[3924,56,4030,66],[3925,14,4031,24],[3925,17,4031,27,"p"],[3926,12,4032,20],[3927,10,4033,16],[3927,11,4033,17],[3927,12,4033,18],[3928,10,4034,16,"styleSheetRuleCb"],[3928,26,4034,32],[3928,28,4034,35,"r"],[3928,29,4034,36],[3928,33,4034,41,"wrappedEmit"],[3928,44,4034,52],[3928,45,4034,53],[3929,12,4035,20,"type"],[3929,16,4035,24],[3929,18,4035,26,"EventType"],[3929,27,4035,35],[3929,28,4035,36,"IncrementalSnapshot"],[3929,47,4035,55],[3930,12,4036,20,"data"],[3930,16,4036,24],[3930,18,4036,26],[3931,14,4037,24,"source"],[3931,20,4037,30],[3931,22,4037,32,"IncrementalSource"],[3931,39,4037,49],[3931,40,4037,50,"StyleSheetRule"],[3931,54,4037,64],[3932,14,4038,24],[3932,17,4038,27,"r"],[3933,12,4039,20],[3934,10,4040,16],[3934,11,4040,17],[3934,12,4040,18],[3935,10,4041,16,"styleDeclarationCb"],[3935,28,4041,34],[3935,30,4041,37,"r"],[3935,31,4041,38],[3935,35,4041,43,"wrappedEmit"],[3935,46,4041,54],[3935,47,4041,55],[3936,12,4042,20,"type"],[3936,16,4042,24],[3936,18,4042,26,"EventType"],[3936,27,4042,35],[3936,28,4042,36,"IncrementalSnapshot"],[3936,47,4042,55],[3937,12,4043,20,"data"],[3937,16,4043,24],[3937,18,4043,26],[3938,14,4044,24,"source"],[3938,20,4044,30],[3938,22,4044,32,"IncrementalSource"],[3938,39,4044,49],[3938,40,4044,50,"StyleDeclaration"],[3938,56,4044,66],[3939,14,4045,24],[3939,17,4045,27,"r"],[3940,12,4046,20],[3941,10,4047,16],[3941,11,4047,17],[3941,12,4047,18],[3942,10,4048,16,"canvasMutationCb"],[3942,26,4048,32],[3942,28,4048,34,"wrappedCanvasMutationEmit"],[3942,53,4048,59],[3943,10,4049,16,"fontCb"],[3943,16,4049,22],[3943,18,4049,25,"p"],[3943,19,4049,26],[3943,23,4049,31,"wrappedEmit"],[3943,34,4049,42],[3943,35,4049,43],[3944,12,4050,20,"type"],[3944,16,4050,24],[3944,18,4050,26,"EventType"],[3944,27,4050,35],[3944,28,4050,36,"IncrementalSnapshot"],[3944,47,4050,55],[3945,12,4051,20,"data"],[3945,16,4051,24],[3945,18,4051,26],[3946,14,4052,24,"source"],[3946,20,4052,30],[3946,22,4052,32,"IncrementalSource"],[3946,39,4052,49],[3946,40,4052,50,"Font"],[3946,44,4052,54],[3947,14,4053,24],[3947,17,4053,27,"p"],[3948,12,4054,20],[3949,10,4055,16],[3949,11,4055,17],[3949,12,4055,18],[3950,10,4056,16,"selectionCb"],[3950,21,4056,27],[3950,23,4056,30,"p"],[3950,24,4056,31],[3950,28,4056,36],[3951,12,4057,20,"wrappedEmit"],[3951,23,4057,31],[3951,24,4057,32],[3952,14,4058,24,"type"],[3952,18,4058,28],[3952,20,4058,30,"EventType"],[3952,29,4058,39],[3952,30,4058,40,"IncrementalSnapshot"],[3952,49,4058,59],[3953,14,4059,24,"data"],[3953,18,4059,28],[3953,20,4059,30],[3954,16,4060,28,"source"],[3954,22,4060,34],[3954,24,4060,36,"IncrementalSource"],[3954,41,4060,53],[3954,42,4060,54,"Selection"],[3954,51,4060,63],[3955,16,4061,28],[3955,19,4061,31,"p"],[3956,14,4062,24],[3957,12,4063,20],[3957,13,4063,21],[3957,14,4063,22],[3958,10,4064,16],[3958,11,4064,17],[3959,10,4065,16,"customElementCb"],[3959,25,4065,31],[3959,27,4065,34,"c"],[3959,28,4065,35],[3959,32,4065,40],[3960,12,4066,20,"wrappedEmit"],[3960,23,4066,31],[3960,24,4066,32],[3961,14,4067,24,"type"],[3961,18,4067,28],[3961,20,4067,30,"EventType"],[3961,29,4067,39],[3961,30,4067,40,"IncrementalSnapshot"],[3961,49,4067,59],[3962,14,4068,24,"data"],[3962,18,4068,28],[3962,20,4068,30],[3963,16,4069,28,"source"],[3963,22,4069,34],[3963,24,4069,36,"IncrementalSource"],[3963,41,4069,53],[3963,42,4069,54,"CustomElement"],[3963,55,4069,67],[3964,16,4070,28],[3964,19,4070,31,"c"],[3965,14,4071,24],[3966,12,4072,20],[3966,13,4072,21],[3966,14,4072,22],[3967,10,4073,16],[3967,11,4073,17],[3968,10,4074,16,"blockClass"],[3968,20,4074,26],[3969,10,4075,16,"ignoreClass"],[3969,21,4075,27],[3970,10,4076,16,"ignoreSelector"],[3970,24,4076,30],[3971,10,4077,16,"maskAllText"],[3971,21,4077,27],[3972,10,4078,16,"maskTextClass"],[3972,23,4078,29],[3973,10,4079,16,"unmaskTextClass"],[3973,25,4079,31],[3974,10,4080,16,"maskTextSelector"],[3974,26,4080,32],[3975,10,4081,16,"unmaskTextSelector"],[3975,28,4081,34],[3976,10,4082,16,"maskInputOptions"],[3976,26,4082,32],[3977,10,4083,16,"inlineStylesheet"],[3977,26,4083,32],[3978,10,4084,16,"sampling"],[3978,18,4084,24],[3979,10,4085,16,"recordDOM"],[3979,19,4085,25],[3980,10,4086,16,"recordCanvas"],[3980,22,4086,28],[3981,10,4087,16,"inlineImages"],[3981,22,4087,28],[3982,10,4088,16,"userTriggeredOnInput"],[3982,30,4088,36],[3983,10,4089,16,"collectFonts"],[3983,22,4089,28],[3984,10,4090,16,"doc"],[3984,13,4090,19],[3985,10,4091,16,"maskAttributeFn"],[3985,25,4091,31],[3986,10,4092,16,"maskInputFn"],[3986,21,4092,27],[3987,10,4093,16,"maskTextFn"],[3987,20,4093,26],[3988,10,4094,16,"keepIframeSrcFn"],[3988,25,4094,31],[3989,10,4095,16,"blockSelector"],[3989,23,4095,29],[3990,10,4096,16,"unblockSelector"],[3990,25,4096,31],[3991,10,4097,16,"slimDOMOptions"],[3991,24,4097,30],[3992,10,4098,16,"dataURLOptions"],[3992,24,4098,30],[3993,10,4099,16,"mirror"],[3993,16,4099,22],[3994,10,4100,16,"iframeManager"],[3994,23,4100,29],[3995,10,4101,16,"stylesheetManager"],[3995,27,4101,33],[3996,10,4102,16,"shadowDomManager"],[3996,26,4102,32],[3997,10,4103,16,"processedNodeManager"],[3997,30,4103,36],[3998,10,4104,16,"canvasManager"],[3998,23,4104,29],[3999,10,4105,16,"ignoreCSSAttributes"],[3999,29,4105,35],[4000,10,4106,16,"plugins"],[4000,17,4106,23],[4000,19,4106,25],[4000,23,4106,25,"_optionalChain"],[4000,43,4106,39],[4000,45,4106,40],[4000,46,4106,41,"plugins"],[4000,53,4106,48],[4000,55,4107,2],[4000,71,4107,18],[4000,73,4107,20,"_8"],[4000,75,4107,22],[4000,79,4107,26,"_8"],[4000,81,4107,28],[4000,82,4107,29,"filter"],[4000,88,4107,35],[4000,90,4107,37],[4000,96,4107,43],[4000,98,4107,45,"_9"],[4000,100,4107,47],[4000,104,4107,51,"_9"],[4000,106,4107,53],[4000,107,4107,55,"p"],[4000,108,4107,56],[4000,112,4107,61,"p"],[4000,113,4107,62],[4000,114,4107,63,"observer"],[4000,122,4107,71],[4000,123,4107,72],[4000,125,4108,2],[4000,141,4108,18],[4000,143,4108,20,"_10"],[4000,146,4108,23],[4000,150,4108,27,"_10"],[4000,153,4108,30],[4000,154,4108,31,"map"],[4000,157,4108,34],[4000,159,4108,36],[4000,165,4108,42],[4000,167,4108,44,"_11"],[4000,170,4108,47],[4000,174,4108,51,"_11"],[4000,177,4108,54],[4000,178,4108,56,"p"],[4000,179,4108,57],[4000,184,4108,63],[4001,12,4109,20,"observer"],[4001,20,4109,28],[4001,22,4109,30,"p"],[4001,23,4109,31],[4001,24,4109,32,"observer"],[4001,32,4109,40],[4002,12,4110,20,"options"],[4002,19,4110,27],[4002,21,4110,29,"p"],[4002,22,4110,30],[4002,23,4110,31,"options"],[4002,30,4110,38],[4003,12,4111,20,"callback"],[4003,20,4111,28],[4003,22,4111,31,"payload"],[4003,29,4111,38],[4003,33,4111,43,"wrappedEmit"],[4003,44,4111,54],[4003,45,4111,55],[4004,14,4112,24,"type"],[4004,18,4112,28],[4004,20,4112,30,"EventType"],[4004,29,4112,39],[4004,30,4112,40,"Plugin"],[4004,36,4112,46],[4005,14,4113,24,"data"],[4005,18,4113,28],[4005,20,4113,30],[4006,16,4114,28,"plugin"],[4006,22,4114,34],[4006,24,4114,36,"p"],[4006,25,4114,37],[4006,26,4114,38,"name"],[4006,30,4114,42],[4007,16,4115,28,"payload"],[4008,14,4116,24],[4009,12,4117,20],[4009,13,4117,21],[4010,10,4118,16],[4010,11,4118,17],[4010,12,4118,18],[4010,13,4118,19],[4010,14,4118,20],[4010,15,4118,21],[4010,19,4118,25],[4011,8,4119,12],[4011,9,4119,13],[4011,11,4119,15],[4011,12,4119,16],[4011,13,4119,17],[4011,14,4119,18],[4012,6,4120,8],[4012,7,4120,9],[4013,6,4121,8,"iframeManager"],[4013,19,4121,21],[4013,20,4121,22,"addLoadListener"],[4013,35,4121,37],[4013,36,4121,39,"iframeEl"],[4013,44,4121,47],[4013,48,4121,52],[4014,8,4122,12],[4014,12,4122,16],[4015,10,4123,16,"handlers"],[4015,18,4123,24],[4015,19,4123,25,"push"],[4015,23,4123,29],[4015,24,4123,30,"observe"],[4015,31,4123,37],[4015,32,4123,38,"iframeEl"],[4015,40,4123,46],[4015,41,4123,47,"contentDocument"],[4015,56,4123,62],[4015,57,4123,63],[4015,58,4123,64],[4016,8,4124,12],[4016,9,4124,13],[4016,10,4125,12],[4016,17,4125,19,"error"],[4016,22,4125,24],[4016,24,4125,26],[4017,10,4126,16,"console"],[4017,17,4126,23],[4017,18,4126,24,"warn"],[4017,22,4126,28],[4017,23,4126,29,"error"],[4017,28,4126,34],[4017,29,4126,35],[4018,8,4127,12],[4019,6,4128,8],[4019,7,4128,9],[4019,8,4128,10],[4020,6,4129,8],[4020,12,4129,14,"init"],[4020,16,4129,18],[4020,19,4129,21,"init"],[4020,20,4129,21],[4020,25,4129,27],[4021,8,4130,12,"takeFullSnapshot"],[4021,24,4130,28],[4021,25,4130,29],[4021,26,4130,30],[4022,8,4131,12,"handlers"],[4022,16,4131,20],[4022,17,4131,21,"push"],[4022,21,4131,25],[4022,22,4131,26,"observe"],[4022,29,4131,33],[4022,30,4131,34,"document"],[4022,38,4131,42],[4022,39,4131,43],[4022,40,4131,44],[4023,6,4132,8],[4023,7,4132,9],[4024,6,4133,8],[4024,10,4133,12,"document"],[4024,18,4133,20],[4024,19,4133,21,"readyState"],[4024,29,4133,31],[4024,34,4133,36],[4024,47,4133,49],[4024,51,4134,12,"document"],[4024,59,4134,20],[4024,60,4134,21,"readyState"],[4024,70,4134,31],[4024,75,4134,36],[4024,85,4134,46],[4024,87,4134,48],[4025,8,4135,12,"init"],[4025,12,4135,16],[4025,13,4135,17],[4025,14,4135,18],[4026,6,4136,8],[4026,7,4136,9],[4026,13,4137,13],[4027,8,4138,12,"handlers"],[4027,16,4138,20],[4027,17,4138,21,"push"],[4027,21,4138,25],[4027,22,4138,26,"on"],[4027,24,4138,28],[4027,25,4138,29],[4027,43,4138,47],[4027,45,4138,49],[4027,51,4138,55],[4028,10,4139,16,"wrappedEmit"],[4028,21,4139,27],[4028,22,4139,28],[4029,12,4140,20,"type"],[4029,16,4140,24],[4029,18,4140,26,"EventType"],[4029,27,4140,35],[4029,28,4140,36,"DomContentLoaded"],[4029,44,4140,52],[4030,12,4141,20,"data"],[4030,16,4141,24],[4030,18,4141,26],[4030,19,4141,27],[4031,10,4142,16],[4031,11,4142,17],[4031,12,4142,18],[4032,10,4143,16],[4032,14,4143,20,"recordAfter"],[4032,25,4143,31],[4032,30,4143,36],[4032,48,4143,54],[4032,50,4144,20,"init"],[4032,54,4144,24],[4032,55,4144,25],[4032,56,4144,26],[4033,8,4145,12],[4033,9,4145,13],[4033,10,4145,14],[4033,11,4145,15],[4034,8,4146,12,"handlers"],[4034,16,4146,20],[4034,17,4146,21,"push"],[4034,21,4146,25],[4034,22,4146,26,"on"],[4034,24,4146,28],[4034,25,4146,29],[4034,31,4146,35],[4034,33,4146,37],[4034,39,4146,43],[4035,10,4147,16,"wrappedEmit"],[4035,21,4147,27],[4035,22,4147,28],[4036,12,4148,20,"type"],[4036,16,4148,24],[4036,18,4148,26,"EventType"],[4036,27,4148,35],[4036,28,4148,36,"Load"],[4036,32,4148,40],[4037,12,4149,20,"data"],[4037,16,4149,24],[4037,18,4149,26],[4037,19,4149,27],[4038,10,4150,16],[4038,11,4150,17],[4038,12,4150,18],[4039,10,4151,16],[4039,14,4151,20,"recordAfter"],[4039,25,4151,31],[4039,30,4151,36],[4039,36,4151,42],[4039,38,4152,20,"init"],[4039,42,4152,24],[4039,43,4152,25],[4039,44,4152,26],[4040,8,4153,12],[4040,9,4153,13],[4040,11,4153,15,"window"],[4040,17,4153,21],[4040,18,4153,22],[4040,19,4153,23],[4041,6,4154,8],[4042,6,4155,8],[4042,13,4155,15],[4042,19,4155,21],[4043,8,4156,12,"handlers"],[4043,16,4156,20],[4043,17,4156,21,"forEach"],[4043,24,4156,28],[4043,25,4156,30,"h"],[4043,26,4156,31],[4043,30,4156,36,"h"],[4043,31,4156,37],[4043,32,4156,38],[4043,33,4156,39],[4043,34,4156,40],[4044,8,4157,12,"processedNodeManager"],[4044,28,4157,32],[4044,29,4157,33,"destroy"],[4044,36,4157,40],[4044,37,4157,41],[4044,38,4157,42],[4045,8,4158,12,"_takeFullSnapshot"],[4045,25,4158,29],[4045,28,4158,32,"undefined"],[4045,37,4158,41],[4046,8,4159,12,"unregisterErrorHandler"],[4046,30,4159,34],[4046,31,4159,35],[4046,32,4159,36],[4047,6,4160,8],[4047,7,4160,9],[4048,4,4161,4],[4048,5,4161,5],[4048,6,4162,4],[4048,13,4162,11,"error"],[4048,18,4162,16],[4048,20,4162,18],[4049,6,4163,8,"console"],[4049,13,4163,15],[4049,14,4163,16,"warn"],[4049,18,4163,20],[4049,19,4163,21,"error"],[4049,24,4163,26],[4049,25,4163,27],[4050,4,4164,4],[4051,2,4165,0],[4052,2,4166,0],[4052,11,4166,9,"takeFullSnapshot"],[4052,27,4166,25,"takeFullSnapshot"],[4052,28,4166,26,"isCheckout"],[4052,38,4166,36],[4052,40,4166,38],[4053,4,4167,4],[4053,8,4167,8],[4053,9,4167,9,"_takeFullSnapshot"],[4053,26,4167,26],[4053,28,4167,28],[4054,6,4168,8],[4054,12,4168,14],[4054,16,4168,18,"Error"],[4054,21,4168,23],[4054,22,4168,24],[4054,71,4168,73],[4054,72,4168,74],[4055,4,4169,4],[4056,4,4170,4,"_takeFullSnapshot"],[4056,21,4170,21],[4056,22,4170,22,"isCheckout"],[4056,32,4170,32],[4056,33,4170,33],[4057,2,4171,0],[4058,2,4172,0,"record"],[4058,8,4172,6],[4058,9,4172,7,"mirror"],[4058,15,4172,13],[4058,18,4172,16,"mirror"],[4058,24,4172,22],[4059,2,4173,0,"record"],[4059,8,4173,6],[4059,9,4173,7,"takeFullSnapshot"],[4059,25,4173,23],[4059,28,4173,26,"takeFullSnapshot"],[4059,44,4173,42],[4060,2,4174,0],[4060,11,4174,9,"_getCanvasManager"],[4060,28,4174,26,"_getCanvasManager"],[4060,29,4174,27,"getCanvasManagerFn"],[4060,47,4174,45],[4060,49,4174,47,"options"],[4060,56,4174,54],[4060,58,4174,56],[4061,4,4175,4],[4061,8,4175,8],[4062,6,4176,8],[4062,13,4176,15,"getCanvasManagerFn"],[4062,31,4176,33],[4062,34,4177,14,"getCanvasManagerFn"],[4062,52,4177,32],[4062,53,4177,33,"options"],[4062,60,4177,40],[4062,61,4177,41],[4062,64,4178,14],[4062,68,4178,18,"CanvasManagerNoop"],[4062,85,4178,35],[4062,86,4178,36],[4062,87,4178,37],[4063,4,4179,4],[4063,5,4179,5],[4063,6,4180,4],[4063,13,4180,11,"e2"],[4063,15,4180,13],[4063,17,4180,15],[4064,6,4181,8,"console"],[4064,13,4181,15],[4064,14,4181,16,"warn"],[4064,18,4181,20],[4064,19,4181,21],[4064,55,4181,57],[4064,56,4181,58],[4065,6,4182,8],[4065,13,4182,15],[4065,17,4182,19,"CanvasManagerNoop"],[4065,34,4182,36],[4065,35,4182,37],[4065,36,4182,38],[4066,4,4183,4],[4067,2,4184,0],[4068,2,4186,0],[4068,8,4186,6,"ReplayEventTypeIncrementalSnapshot"],[4068,42,4186,40],[4068,45,4186,43],[4068,46,4186,44],[4069,2,4187,0],[4069,8,4187,6,"ReplayEventTypeCustom"],[4069,29,4187,27],[4069,32,4187,30],[4069,33,4187,31],[4071,2,4189,0],[4072,0,4190,0],[4073,0,4191,0],[4074,2,4192,0],[4074,11,4192,9,"timestampToMs"],[4074,24,4192,22,"timestampToMs"],[4074,25,4192,23,"timestamp"],[4074,34,4192,32],[4074,36,4192,34],[4075,4,4193,2],[4075,10,4193,8,"isMs"],[4075,14,4193,12],[4075,17,4193,15,"timestamp"],[4075,26,4193,24],[4075,29,4193,27],[4075,39,4193,37],[4076,4,4194,2],[4076,11,4194,9,"isMs"],[4076,15,4194,13],[4076,18,4194,16,"timestamp"],[4076,27,4194,25],[4076,30,4194,28,"timestamp"],[4076,39,4194,37],[4076,42,4194,40],[4076,46,4194,44],[4077,2,4195,0],[4079,2,4197,0],[4080,0,4198,0],[4081,0,4199,0],[4082,2,4200,0],[4082,11,4200,9,"timestampToS"],[4082,23,4200,21,"timestampToS"],[4082,24,4200,22,"timestamp"],[4082,33,4200,31],[4082,35,4200,33],[4083,4,4201,2],[4083,10,4201,8,"isMs"],[4083,14,4201,12],[4083,17,4201,15,"timestamp"],[4083,26,4201,24],[4083,29,4201,27],[4083,39,4201,37],[4084,4,4202,2],[4084,11,4202,9,"isMs"],[4084,15,4202,13],[4084,18,4202,16,"timestamp"],[4084,27,4202,25],[4084,30,4202,28],[4084,34,4202,32],[4084,37,4202,35,"timestamp"],[4084,46,4202,44],[4085,2,4203,0],[4087,2,4205,0],[4088,0,4206,0],[4089,0,4207,0],[4090,2,4208,0],[4090,11,4208,9,"addBreadcrumbEvent"],[4090,29,4208,27,"addBreadcrumbEvent"],[4090,30,4208,28,"replay"],[4090,36,4208,34],[4090,38,4208,36,"breadcrumb"],[4090,48,4208,46],[4090,50,4208,48],[4091,4,4209,2],[4091,8,4209,6,"breadcrumb"],[4091,18,4209,16],[4091,19,4209,17,"category"],[4091,27,4209,25],[4091,32,4209,30],[4091,52,4209,50],[4091,54,4209,52],[4092,6,4210,4],[4093,4,4211,2],[4094,4,4213,2],[4094,8,4213,6],[4094,9,4213,7],[4094,19,4213,17],[4094,21,4213,19],[4094,31,4213,29],[4094,32,4213,30],[4094,33,4213,31,"includes"],[4094,41,4213,39],[4094,42,4213,40,"breadcrumb"],[4094,52,4213,50],[4094,53,4213,51,"category"],[4094,61,4213,60],[4094,62,4213,61],[4094,64,4213,63],[4095,6,4214,4,"replay"],[4095,12,4214,10],[4095,13,4214,11,"triggerUserActivity"],[4095,32,4214,30],[4095,33,4214,31],[4095,34,4214,32],[4096,4,4215,2],[4096,5,4215,3],[4096,11,4215,9],[4097,6,4216,4,"replay"],[4097,12,4216,10],[4097,13,4216,11,"checkAndHandleExpiredSession"],[4097,41,4216,39],[4097,42,4216,40],[4097,43,4216,41],[4098,4,4217,2],[4099,4,4219,2,"replay"],[4099,10,4219,8],[4099,11,4219,9,"addUpdate"],[4099,20,4219,18],[4099,21,4219,19],[4099,27,4219,25],[4100,6,4220,4],[4101,6,4221,4],[4102,6,4222,4,"replay"],[4102,12,4222,10],[4102,13,4222,11,"throttledAddEvent"],[4102,30,4222,28],[4102,31,4222,29],[4103,8,4223,6,"type"],[4103,12,4223,10],[4103,14,4223,12,"EventType"],[4103,23,4223,21],[4103,24,4223,22,"Custom"],[4103,30,4223,28],[4104,8,4224,6],[4105,8,4225,6],[4106,8,4226,6,"timestamp"],[4106,17,4226,15],[4106,19,4226,17],[4106,20,4226,18,"breadcrumb"],[4106,30,4226,28],[4106,31,4226,29,"timestamp"],[4106,40,4226,38],[4106,44,4226,42],[4106,45,4226,43],[4106,49,4226,47],[4106,53,4226,51],[4107,8,4227,6,"data"],[4107,12,4227,10],[4107,14,4227,12],[4108,10,4228,8,"tag"],[4108,13,4228,11],[4108,15,4228,13],[4108,27,4228,25],[4109,10,4229,8],[4110,10,4230,8,"payload"],[4110,17,4230,15],[4110,19,4230,17],[4110,23,4230,17,"normalize"],[4110,38,4230,26],[4110,40,4230,27,"breadcrumb"],[4110,50,4230,37],[4110,52,4230,39],[4110,54,4230,41],[4110,56,4230,43],[4110,60,4230,47],[4111,8,4231,6],[4112,6,4232,4],[4112,7,4232,5],[4112,8,4232,6],[4114,6,4234,4],[4115,6,4235,4],[4115,13,4235,11,"breadcrumb"],[4115,23,4235,21],[4115,24,4235,22,"category"],[4115,32,4235,30],[4115,37,4235,35],[4115,46,4235,44],[4116,4,4236,2],[4116,5,4236,3],[4116,6,4236,4],[4117,2,4237,0],[4118,2,4239,0],[4118,8,4239,6,"INTERACTIVE_SELECTOR"],[4118,28,4239,26],[4118,31,4239,29],[4118,41,4239,39],[4120,2,4241,0],[4121,2,4242,0],[4121,11,4242,9,"getClosestInteractive"],[4121,32,4242,30,"getClosestInteractive"],[4121,33,4242,31,"element"],[4121,40,4242,38],[4121,42,4242,40],[4122,4,4243,2],[4122,10,4243,8,"closestInteractive"],[4122,28,4243,26],[4122,31,4243,29,"element"],[4122,38,4243,36],[4122,39,4243,37,"closest"],[4122,46,4243,44],[4122,47,4243,45,"INTERACTIVE_SELECTOR"],[4122,67,4243,65],[4122,68,4243,66],[4123,4,4244,2],[4123,11,4244,9,"closestInteractive"],[4123,29,4244,27],[4123,33,4244,31,"element"],[4123,40,4244,38],[4124,2,4245,0],[4126,2,4247,0],[4127,0,4248,0],[4128,0,4249,0],[4129,0,4250,0],[4130,0,4251,0],[4131,0,4252,0],[4132,2,4253,0],[4132,11,4253,9,"getClickTargetNode"],[4132,29,4253,27,"getClickTargetNode"],[4132,30,4253,28,"event"],[4132,35,4253,33],[4132,37,4253,35],[4133,4,4254,2],[4133,10,4254,8,"target"],[4133,16,4254,14],[4133,19,4254,17,"getTargetNode"],[4133,32,4254,30],[4133,33,4254,31,"event"],[4133,38,4254,36],[4133,39,4254,37],[4134,4,4256,2],[4134,8,4256,6],[4134,9,4256,7,"target"],[4134,15,4256,13],[4134,19,4256,17],[4134,21,4256,19,"target"],[4134,27,4256,25],[4134,39,4256,37,"Element"],[4134,46,4256,44],[4134,47,4256,45],[4134,49,4256,47],[4135,6,4257,4],[4135,13,4257,11,"target"],[4135,19,4257,17],[4136,4,4258,2],[4137,4,4260,2],[4137,11,4260,9,"getClosestInteractive"],[4137,32,4260,30],[4137,33,4260,31,"target"],[4137,39,4260,37],[4137,40,4260,38],[4138,2,4261,0],[4140,2,4263,0],[4141,2,4264,0],[4141,11,4264,9,"getTargetNode"],[4141,24,4264,22,"getTargetNode"],[4141,25,4264,23,"event"],[4141,30,4264,28],[4141,32,4264,30],[4142,4,4265,2],[4142,8,4265,6,"isEventWithTarget"],[4142,25,4265,23],[4142,26,4265,24,"event"],[4142,31,4265,29],[4142,32,4265,30],[4142,34,4265,32],[4143,6,4266,4],[4143,13,4266,11,"event"],[4143,18,4266,16],[4143,19,4266,17,"target"],[4143,25,4266,23],[4144,4,4267,2],[4145,4,4269,2],[4145,11,4269,9,"event"],[4145,16,4269,14],[4146,2,4270,0],[4147,2,4272,0],[4147,11,4272,9,"isEventWithTarget"],[4147,28,4272,26,"isEventWithTarget"],[4147,29,4272,27,"event"],[4147,34,4272,32],[4147,36,4272,34],[4148,4,4273,2],[4148,11,4273,9],[4148,18,4273,16,"event"],[4148,23,4273,21],[4148,28,4273,26],[4148,36,4273,34],[4148,40,4273,38],[4148,41,4273,39],[4148,42,4273,40,"event"],[4148,47,4273,45],[4148,51,4273,49],[4148,59,4273,57],[4148,63,4273,61,"event"],[4148,68,4273,66],[4149,2,4274,0],[4150,2,4276,0],[4150,6,4276,4,"handlers"],[4150,14,4276,12],[4152,2,4278,0],[4153,0,4279,0],[4154,0,4280,0],[4155,0,4281,0],[4156,2,4282,0],[4156,11,4282,9,"onWindowOpen"],[4156,23,4282,21,"onWindowOpen"],[4156,24,4282,22,"cb"],[4156,26,4282,24],[4156,28,4282,26],[4157,4,4283,2],[4158,4,4284,2],[4158,8,4284,6],[4158,9,4284,7,"handlers"],[4158,17,4284,15],[4158,19,4284,17],[4159,6,4285,4,"handlers"],[4159,14,4285,12],[4159,17,4285,15],[4159,19,4285,17],[4160,6,4286,4,"monkeyPatchWindowOpen"],[4160,27,4286,25],[4160,28,4286,26],[4160,29,4286,27],[4161,4,4287,2],[4162,4,4289,2,"handlers"],[4162,12,4289,10],[4162,13,4289,11,"push"],[4162,17,4289,15],[4162,18,4289,16,"cb"],[4162,20,4289,18],[4162,21,4289,19],[4163,4,4291,2],[4163,11,4291,9],[4163,17,4291,15],[4164,6,4292,4],[4164,12,4292,10,"pos"],[4164,15,4292,13],[4164,18,4292,16,"handlers"],[4164,26,4292,24],[4164,29,4292,27,"handlers"],[4164,37,4292,35],[4164,38,4292,36,"indexOf"],[4164,45,4292,43],[4164,46,4292,44,"cb"],[4164,48,4292,46],[4164,49,4292,47],[4164,52,4292,50],[4164,53,4292,51],[4164,54,4292,52],[4165,6,4293,4],[4165,10,4293,8,"pos"],[4165,13,4293,11],[4165,16,4293,14],[4165,17,4293,15],[4165,18,4293,16],[4165,20,4293,18],[4166,8,4294,7,"handlers"],[4166,16,4294,15],[4166,17,4294,18,"splice"],[4166,23,4294,24],[4166,24,4294,25,"pos"],[4166,27,4294,28],[4166,29,4294,30],[4166,30,4294,31],[4166,31,4294,32],[4167,6,4295,4],[4168,4,4296,2],[4168,5,4296,3],[4169,2,4297,0],[4170,2,4299,0],[4170,11,4299,9,"monkeyPatchWindowOpen"],[4170,32,4299,30,"monkeyPatchWindowOpen"],[4170,33,4299,30],[4170,35,4299,33],[4171,4,4300,2],[4171,8,4300,2,"fill"],[4171,18,4300,6],[4171,20,4300,7,"WINDOW"],[4171,26,4300,13],[4171,28,4300,15],[4171,34,4300,21],[4171,36,4300,23],[4171,46,4300,33,"originalWindowOpen"],[4171,64,4300,51],[4171,66,4300,53],[4172,6,4301,4],[4172,13,4301,11],[4172,23,4301,21],[4172,26,4301,24,"args"],[4172,30,4301,28],[4172,32,4301,30],[4173,8,4302,6],[4173,12,4302,10,"handlers"],[4173,20,4302,18],[4173,22,4302,20],[4174,10,4303,8],[4174,14,4303,12],[4175,12,4304,10,"handlers"],[4175,20,4304,18],[4175,21,4304,19,"forEach"],[4175,28,4304,26],[4175,29,4304,27,"handler"],[4175,36,4304,34],[4175,40,4304,38,"handler"],[4175,47,4304,45],[4175,48,4304,46],[4175,49,4304,47],[4175,50,4304,48],[4176,10,4305,8],[4176,11,4305,9],[4176,12,4305,10],[4176,19,4305,17,"e"],[4176,20,4305,18],[4176,22,4305,20],[4177,12,4306,10],[4178,10,4306,10],[4179,8,4308,6],[4180,8,4310,6],[4180,15,4310,13,"originalWindowOpen"],[4180,33,4310,31],[4180,34,4310,32,"apply"],[4180,39,4310,37],[4180,40,4310,38,"WINDOW"],[4180,46,4310,44],[4180,48,4310,46,"args"],[4180,52,4310,50],[4180,53,4310,51],[4181,6,4311,4],[4181,7,4311,5],[4182,4,4312,2],[4182,5,4312,3],[4182,6,4312,4],[4183,2,4313,0],[4185,2,4315,0],[4186,2,4316,0],[4186,8,4316,6,"IncrementalMutationSources"],[4186,34,4316,32],[4186,37,4316,35],[4186,41,4316,39,"Set"],[4186,44,4316,42],[4186,45,4316,43],[4186,46,4317,2,"IncrementalSource"],[4186,63,4317,19],[4186,64,4317,20,"Mutation"],[4186,72,4317,28],[4186,74,4318,2,"IncrementalSource"],[4186,91,4318,19],[4186,92,4318,20,"StyleSheetRule"],[4186,106,4318,34],[4186,108,4319,2,"IncrementalSource"],[4186,125,4319,19],[4186,126,4319,20,"StyleDeclaration"],[4186,142,4319,36],[4186,144,4320,2,"IncrementalSource"],[4186,161,4320,19],[4186,162,4320,20,"AdoptedStyleSheet"],[4186,179,4320,37],[4186,181,4321,2,"IncrementalSource"],[4186,198,4321,19],[4186,199,4321,20,"CanvasMutation"],[4186,213,4321,34],[4186,215,4322,2,"IncrementalSource"],[4186,232,4322,19],[4186,233,4322,20,"Selection"],[4186,242,4322,29],[4186,244,4323,2,"IncrementalSource"],[4186,261,4323,19],[4186,262,4323,20,"MediaInteraction"],[4186,278,4323,36],[4186,279,4324,1],[4186,280,4324,2],[4188,2,4326,0],[4189,2,4327,0],[4189,11,4327,9,"handleClick"],[4189,22,4327,20,"handleClick"],[4189,23,4327,21,"clickDetector"],[4189,36,4327,34],[4189,38,4327,36,"clickBreadcrumb"],[4189,53,4327,51],[4189,55,4327,53,"node"],[4189,59,4327,57],[4189,61,4327,59],[4190,4,4328,2,"clickDetector"],[4190,17,4328,15],[4190,18,4328,16,"handleClick"],[4190,29,4328,27],[4190,30,4328,28,"clickBreadcrumb"],[4190,45,4328,43],[4190,47,4328,45,"node"],[4190,51,4328,49],[4190,52,4328,50],[4191,2,4329,0],[4193,2,4331,0],[4194,2,4332,0],[4194,8,4332,6,"ClickDetector"],[4194,21,4332,19],[4194,22,4332,21],[4195,4,4333,2],[4197,4,4335,3,"constructor"],[4197,15,4335,14,"constructor"],[4197,16,4336,4,"replay"],[4197,22,4336,10],[4197,24,4337,4,"slowClickConfig"],[4197,39,4337,19],[4198,4,4338,4],[4199,4,4339,4,"_addBreadcrumbEvent"],[4199,23,4339,23],[4199,26,4339,26,"addBreadcrumbEvent"],[4199,44,4339,44],[4199,46,4340,4],[4200,6,4341,4],[4200,10,4341,8],[4200,11,4341,9,"_lastMutation"],[4200,24,4341,22],[4200,27,4341,25],[4200,28,4341,26],[4201,6,4342,4],[4201,10,4342,8],[4201,11,4342,9,"_lastScroll"],[4201,22,4342,20],[4201,25,4342,23],[4201,26,4342,24],[4202,6,4343,4],[4202,10,4343,8],[4202,11,4343,9,"_clicks"],[4202,18,4343,16],[4202,21,4343,19],[4202,23,4343,21],[4204,6,4345,4],[4205,6,4346,4],[4205,10,4346,8],[4205,11,4346,9,"_timeout"],[4205,19,4346,17],[4205,22,4346,20,"slowClickConfig"],[4205,37,4346,35],[4205,38,4346,36,"timeout"],[4205,45,4346,43],[4205,48,4346,46],[4205,52,4346,50],[4206,6,4347,4],[4206,10,4347,8],[4206,11,4347,9,"_threshold"],[4206,21,4347,19],[4206,24,4347,22,"slowClickConfig"],[4206,39,4347,37],[4206,40,4347,38,"threshold"],[4206,49,4347,47],[4206,52,4347,50],[4206,56,4347,54],[4207,6,4348,4],[4207,10,4348,8],[4207,11,4348,9,"_scrollTimeout"],[4207,25,4348,23],[4207,28,4348,26,"slowClickConfig"],[4207,43,4348,41],[4207,44,4348,42,"scrollTimeout"],[4207,57,4348,55],[4207,60,4348,58],[4207,64,4348,62],[4208,6,4349,4],[4208,10,4349,8],[4208,11,4349,9,"_replay"],[4208,18,4349,16],[4208,21,4349,19,"replay"],[4208,27,4349,25],[4209,6,4350,4],[4209,10,4350,8],[4209,11,4350,9,"_ignoreSelector"],[4209,26,4350,24],[4209,29,4350,27,"slowClickConfig"],[4209,44,4350,42],[4209,45,4350,43,"ignoreSelector"],[4209,59,4350,57],[4210,6,4351,4],[4210,10,4351,8],[4210,11,4351,9,"_addBreadcrumbEvent"],[4210,30,4351,28],[4210,33,4351,31,"_addBreadcrumbEvent"],[4210,52,4351,50],[4211,4,4352,2],[4213,4,4354,2],[4214,4,4355,3,"addListeners"],[4214,16,4355,15,"addListeners"],[4214,17,4355,15],[4214,19,4355,18],[4215,6,4356,4],[4215,12,4356,10,"cleanupWindowOpen"],[4215,29,4356,27],[4215,32,4356,30,"onWindowOpen"],[4215,44,4356,42],[4215,45,4356,43],[4215,51,4356,49],[4216,8,4357,6],[4217,8,4358,6],[4217,12,4358,10],[4217,13,4358,11,"_lastMutation"],[4217,26,4358,24],[4217,29,4358,27,"nowInSeconds"],[4217,41,4358,39],[4217,42,4358,40],[4217,43,4358,41],[4218,6,4359,4],[4218,7,4359,5],[4218,8,4359,6],[4219,6,4361,4],[4219,10,4361,8],[4219,11,4361,9,"_teardown"],[4219,20,4361,18],[4219,23,4361,21],[4219,29,4361,27],[4220,8,4362,6,"cleanupWindowOpen"],[4220,25,4362,23],[4220,26,4362,24],[4220,27,4362,25],[4221,8,4364,6],[4221,12,4364,10],[4221,13,4364,11,"_clicks"],[4221,20,4364,18],[4221,23,4364,21],[4221,25,4364,23],[4222,8,4365,6],[4222,12,4365,10],[4222,13,4365,11,"_lastMutation"],[4222,26,4365,24],[4222,29,4365,27],[4222,30,4365,28],[4223,8,4366,6],[4223,12,4366,10],[4223,13,4366,11,"_lastScroll"],[4223,24,4366,22],[4223,27,4366,25],[4223,28,4366,26],[4224,6,4367,4],[4224,7,4367,5],[4225,4,4368,2],[4227,4,4370,2],[4228,4,4371,3,"removeListeners"],[4228,19,4371,18,"removeListeners"],[4228,20,4371,18],[4228,22,4371,21],[4229,6,4372,4],[4229,10,4372,8],[4229,14,4372,12],[4229,15,4372,13,"_teardown"],[4229,24,4372,22],[4229,26,4372,24],[4230,8,4373,6],[4230,12,4373,10],[4230,13,4373,11,"_teardown"],[4230,22,4373,20],[4230,23,4373,21],[4230,24,4373,22],[4231,6,4374,4],[4232,6,4376,4],[4232,10,4376,8],[4232,14,4376,12],[4232,15,4376,13,"_checkClickTimeout"],[4232,33,4376,31],[4232,35,4376,33],[4233,8,4377,6,"clearTimeout"],[4233,20,4377,18],[4233,21,4377,19],[4233,25,4377,23],[4233,26,4377,24,"_checkClickTimeout"],[4233,44,4377,42],[4233,45,4377,43],[4234,6,4378,4],[4235,4,4379,2],[4237,4,4381,2],[4238,4,4382,3,"handleClick"],[4238,15,4382,14,"handleClick"],[4238,16,4382,15,"breadcrumb"],[4238,26,4382,25],[4238,28,4382,27,"node"],[4238,32,4382,31],[4238,34,4382,33],[4239,6,4383,4],[4239,10,4383,8,"ignoreElement"],[4239,23,4383,21],[4239,24,4383,22,"node"],[4239,28,4383,26],[4239,30,4383,28],[4239,34,4383,32],[4239,35,4383,33,"_ignoreSelector"],[4239,50,4383,48],[4239,51,4383,49],[4239,55,4383,53],[4239,56,4383,54,"isClickBreadcrumb"],[4239,73,4383,71],[4239,74,4383,72,"breadcrumb"],[4239,84,4383,82],[4239,85,4383,83],[4239,87,4383,85],[4240,8,4384,6],[4241,6,4385,4],[4242,6,4387,4],[4242,12,4387,10,"newClick"],[4242,20,4387,18],[4242,23,4387,21],[4243,8,4388,6,"timestamp"],[4243,17,4388,15],[4243,19,4388,17,"timestampToS"],[4243,31,4388,29],[4243,32,4388,30,"breadcrumb"],[4243,42,4388,40],[4243,43,4388,41,"timestamp"],[4243,52,4388,50],[4243,53,4388,51],[4244,8,4389,6,"clickBreadcrumb"],[4244,23,4389,21],[4244,25,4389,23,"breadcrumb"],[4244,35,4389,33],[4245,8,4390,6],[4246,8,4391,6,"clickCount"],[4246,18,4391,16],[4246,20,4391,18],[4246,21,4391,19],[4247,8,4392,6,"node"],[4248,6,4393,4],[4248,7,4393,5],[4250,6,4395,4],[4251,6,4396,4],[4251,10,4397,6],[4251,14,4397,10],[4251,15,4397,11,"_clicks"],[4251,22,4397,18],[4251,23,4397,19,"some"],[4251,27,4397,23],[4251,28,4397,24,"click"],[4251,33,4397,29],[4251,37,4397,33,"click"],[4251,42,4397,38],[4251,43,4397,39,"node"],[4251,47,4397,43],[4251,52,4397,48,"newClick"],[4251,60,4397,56],[4251,61,4397,57,"node"],[4251,65,4397,61],[4251,69,4397,65,"Math"],[4251,73,4397,69],[4251,74,4397,70,"abs"],[4251,77,4397,73],[4251,78,4397,74,"click"],[4251,83,4397,79],[4251,84,4397,80,"timestamp"],[4251,93,4397,89],[4251,96,4397,92,"newClick"],[4251,104,4397,100],[4251,105,4397,101,"timestamp"],[4251,114,4397,110],[4251,115,4397,111],[4251,118,4397,114],[4251,119,4397,115],[4251,120,4397,116],[4251,122,4398,6],[4252,8,4399,6],[4253,6,4400,4],[4254,6,4402,4],[4254,10,4402,8],[4254,11,4402,9,"_clicks"],[4254,18,4402,16],[4254,19,4402,17,"push"],[4254,23,4402,21],[4254,24,4402,22,"newClick"],[4254,32,4402,30],[4254,33,4402,31],[4256,6,4404,4],[4257,6,4405,4],[4257,10,4405,8],[4257,14,4405,12],[4257,15,4405,13,"_clicks"],[4257,22,4405,20],[4257,23,4405,21,"length"],[4257,29,4405,27],[4257,34,4405,32],[4257,35,4405,33],[4257,37,4405,35],[4258,8,4406,6],[4258,12,4406,10],[4258,13,4406,11,"_scheduleCheckClicks"],[4258,33,4406,31],[4258,34,4406,32],[4258,35,4406,33],[4259,6,4407,4],[4260,4,4408,2],[4262,4,4410,2],[4263,4,4411,3,"registerMutation"],[4263,20,4411,19,"registerMutation"],[4263,21,4411,20,"timestamp"],[4263,30,4411,29],[4263,33,4411,32,"Date"],[4263,37,4411,36],[4263,38,4411,37,"now"],[4263,41,4411,40],[4263,42,4411,41],[4263,43,4411,42],[4263,45,4411,44],[4264,6,4412,4],[4264,10,4412,8],[4264,11,4412,9,"_lastMutation"],[4264,24,4412,22],[4264,27,4412,25,"timestampToS"],[4264,39,4412,37],[4264,40,4412,38,"timestamp"],[4264,49,4412,47],[4264,50,4412,48],[4265,4,4413,2],[4267,4,4415,2],[4268,4,4416,3,"registerScroll"],[4268,18,4416,17,"registerScroll"],[4268,19,4416,18,"timestamp"],[4268,28,4416,27],[4268,31,4416,30,"Date"],[4268,35,4416,34],[4268,36,4416,35,"now"],[4268,39,4416,38],[4268,40,4416,39],[4268,41,4416,40],[4268,43,4416,42],[4269,6,4417,4],[4269,10,4417,8],[4269,11,4417,9,"_lastScroll"],[4269,22,4417,20],[4269,25,4417,23,"timestampToS"],[4269,37,4417,35],[4269,38,4417,36,"timestamp"],[4269,47,4417,45],[4269,48,4417,46],[4270,4,4418,2],[4272,4,4420,2],[4273,4,4421,3,"registerClick"],[4273,17,4421,16,"registerClick"],[4273,18,4421,17,"element"],[4273,25,4421,24],[4273,27,4421,26],[4274,6,4422,4],[4274,12,4422,10,"node"],[4274,16,4422,14],[4274,19,4422,17,"getClosestInteractive"],[4274,40,4422,38],[4274,41,4422,39,"element"],[4274,48,4422,46],[4274,49,4422,47],[4275,6,4423,4],[4275,10,4423,8],[4275,11,4423,9,"_handleMultiClick"],[4275,28,4423,26],[4275,29,4423,27,"node"],[4275,33,4423,32],[4275,34,4423,33],[4276,4,4424,2],[4278,4,4426,2],[4279,4,4427,3,"_handleMultiClick"],[4279,21,4427,20,"_handleMultiClick"],[4279,22,4427,21,"node"],[4279,26,4427,25],[4279,28,4427,27],[4280,6,4428,4],[4280,10,4428,8],[4280,11,4428,9,"_getClicks"],[4280,21,4428,19],[4280,22,4428,20,"node"],[4280,26,4428,24],[4280,27,4428,25],[4280,28,4428,26,"forEach"],[4280,35,4428,33],[4280,36,4428,34,"click"],[4280,41,4428,39],[4280,45,4428,43],[4281,8,4429,6,"click"],[4281,13,4429,11],[4281,14,4429,12,"clickCount"],[4281,24,4429,22],[4281,26,4429,24],[4282,6,4430,4],[4282,7,4430,5],[4282,8,4430,6],[4283,4,4431,2],[4285,4,4433,2],[4286,4,4434,3,"_getClicks"],[4286,14,4434,13,"_getClicks"],[4286,15,4434,14,"node"],[4286,19,4434,18],[4286,21,4434,20],[4287,6,4435,4],[4287,13,4435,11],[4287,17,4435,15],[4287,18,4435,16,"_clicks"],[4287,25,4435,23],[4287,26,4435,24,"filter"],[4287,32,4435,30],[4287,33,4435,31,"click"],[4287,38,4435,36],[4287,42,4435,40,"click"],[4287,47,4435,45],[4287,48,4435,46,"node"],[4287,52,4435,50],[4287,57,4435,55,"node"],[4287,61,4435,59],[4287,62,4435,60],[4288,4,4436,2],[4290,4,4438,2],[4291,4,4439,3,"_checkClicks"],[4291,16,4439,15,"_checkClicks"],[4291,17,4439,15],[4291,19,4439,18],[4292,6,4440,4],[4292,12,4440,10,"timedOutClicks"],[4292,26,4440,24],[4292,29,4440,27],[4292,31,4440,29],[4293,6,4442,4],[4293,12,4442,10,"now"],[4293,15,4442,13],[4293,18,4442,16,"nowInSeconds"],[4293,30,4442,28],[4293,31,4442,29],[4293,32,4442,30],[4294,6,4444,4],[4294,10,4444,8],[4294,11,4444,9,"_clicks"],[4294,18,4444,16],[4294,19,4444,17,"forEach"],[4294,26,4444,24],[4294,27,4444,25,"click"],[4294,32,4444,30],[4294,36,4444,34],[4295,8,4445,6],[4295,12,4445,10],[4295,13,4445,11,"click"],[4295,18,4445,16],[4295,19,4445,17,"mutationAfter"],[4295,32,4445,30],[4295,36,4445,34],[4295,40,4445,38],[4295,41,4445,39,"_lastMutation"],[4295,54,4445,52],[4295,56,4445,54],[4296,10,4446,8,"click"],[4296,15,4446,13],[4296,16,4446,14,"mutationAfter"],[4296,29,4446,27],[4296,32,4446,30,"click"],[4296,37,4446,35],[4296,38,4446,36,"timestamp"],[4296,47,4446,45],[4296,51,4446,49],[4296,55,4446,53],[4296,56,4446,54,"_lastMutation"],[4296,69,4446,67],[4296,72,4446,70],[4296,76,4446,74],[4296,77,4446,75,"_lastMutation"],[4296,90,4446,88],[4296,93,4446,91,"click"],[4296,98,4446,96],[4296,99,4446,97,"timestamp"],[4296,108,4446,106],[4296,111,4446,109,"undefined"],[4296,120,4446,118],[4297,8,4447,6],[4298,8,4448,6],[4298,12,4448,10],[4298,13,4448,11,"click"],[4298,18,4448,16],[4298,19,4448,17,"scrollAfter"],[4298,30,4448,28],[4298,34,4448,32],[4298,38,4448,36],[4298,39,4448,37,"_lastScroll"],[4298,50,4448,48],[4298,52,4448,50],[4299,10,4449,8,"click"],[4299,15,4449,13],[4299,16,4449,14,"scrollAfter"],[4299,27,4449,25],[4299,30,4449,28,"click"],[4299,35,4449,33],[4299,36,4449,34,"timestamp"],[4299,45,4449,43],[4299,49,4449,47],[4299,53,4449,51],[4299,54,4449,52,"_lastScroll"],[4299,65,4449,63],[4299,68,4449,66],[4299,72,4449,70],[4299,73,4449,71,"_lastScroll"],[4299,84,4449,82],[4299,87,4449,85,"click"],[4299,92,4449,90],[4299,93,4449,91,"timestamp"],[4299,102,4449,100],[4299,105,4449,103,"undefined"],[4299,114,4449,112],[4300,8,4450,6],[4302,8,4452,6],[4303,8,4453,6],[4303,12,4453,10,"click"],[4303,17,4453,15],[4303,18,4453,16,"timestamp"],[4303,27,4453,25],[4303,30,4453,28],[4303,34,4453,32],[4303,35,4453,33,"_timeout"],[4303,43,4453,41],[4303,47,4453,45,"now"],[4303,50,4453,48],[4303,52,4453,50],[4304,10,4454,8,"timedOutClicks"],[4304,24,4454,22],[4304,25,4454,23,"push"],[4304,29,4454,27],[4304,30,4454,28,"click"],[4304,35,4454,33],[4304,36,4454,34],[4305,8,4455,6],[4306,6,4456,4],[4306,7,4456,5],[4306,8,4456,6],[4308,6,4458,4],[4309,6,4459,4],[4309,11,4459,9],[4309,17,4459,15,"click"],[4309,22,4459,20],[4309,26,4459,24,"timedOutClicks"],[4309,40,4459,38],[4309,42,4459,40],[4310,8,4460,6],[4310,14,4460,12,"pos"],[4310,17,4460,15],[4310,20,4460,18],[4310,24,4460,22],[4310,25,4460,23,"_clicks"],[4310,32,4460,30],[4310,33,4460,31,"indexOf"],[4310,40,4460,38],[4310,41,4460,39,"click"],[4310,46,4460,44],[4310,47,4460,45],[4311,8,4462,6],[4311,12,4462,10,"pos"],[4311,15,4462,13],[4311,18,4462,16],[4311,19,4462,17],[4311,20,4462,18],[4311,22,4462,20],[4312,10,4463,8],[4312,14,4463,12],[4312,15,4463,13,"_generateBreadcrumbs"],[4312,35,4463,33],[4312,36,4463,34,"click"],[4312,41,4463,39],[4312,42,4463,40],[4313,10,4464,8],[4313,14,4464,12],[4313,15,4464,13,"_clicks"],[4313,22,4464,20],[4313,23,4464,21,"splice"],[4313,29,4464,27],[4313,30,4464,28,"pos"],[4313,33,4464,31],[4313,35,4464,33],[4313,36,4464,34],[4313,37,4464,35],[4314,8,4465,6],[4315,6,4466,4],[4317,6,4468,4],[4318,6,4469,4],[4318,10,4469,8],[4318,14,4469,12],[4318,15,4469,13,"_clicks"],[4318,22,4469,20],[4318,23,4469,21,"length"],[4318,29,4469,27],[4318,31,4469,29],[4319,8,4470,6],[4319,12,4470,10],[4319,13,4470,11,"_scheduleCheckClicks"],[4319,33,4470,31],[4319,34,4470,32],[4319,35,4470,33],[4320,6,4471,4],[4321,4,4472,2],[4323,4,4474,2],[4324,4,4475,3,"_generateBreadcrumbs"],[4324,24,4475,23,"_generateBreadcrumbs"],[4324,25,4475,24,"click"],[4324,30,4475,29],[4324,32,4475,31],[4325,6,4476,4],[4325,12,4476,10,"replay"],[4325,18,4476,16],[4325,21,4476,19],[4325,25,4476,23],[4325,26,4476,24,"_replay"],[4325,33,4476,31],[4326,6,4477,4],[4326,12,4477,10,"hadScroll"],[4326,21,4477,19],[4326,24,4477,22,"click"],[4326,29,4477,27],[4326,30,4477,28,"scrollAfter"],[4326,41,4477,39],[4326,45,4477,43,"click"],[4326,50,4477,48],[4326,51,4477,49,"scrollAfter"],[4326,62,4477,60],[4326,66,4477,64],[4326,70,4477,68],[4326,71,4477,69,"_scrollTimeout"],[4326,85,4477,83],[4327,6,4478,4],[4327,12,4478,10,"hadMutation"],[4327,23,4478,21],[4327,26,4478,24,"click"],[4327,31,4478,29],[4327,32,4478,30,"mutationAfter"],[4327,45,4478,43],[4327,49,4478,47,"click"],[4327,54,4478,52],[4327,55,4478,53,"mutationAfter"],[4327,68,4478,66],[4327,72,4478,70],[4327,76,4478,74],[4327,77,4478,75,"_threshold"],[4327,87,4478,85],[4328,6,4480,4],[4328,12,4480,10,"isSlowClick"],[4328,23,4480,21],[4328,26,4480,24],[4328,27,4480,25,"hadScroll"],[4328,36,4480,34],[4328,40,4480,38],[4328,41,4480,39,"hadMutation"],[4328,52,4480,50],[4329,6,4481,4],[4329,12,4481,10],[4330,8,4481,12,"clickCount"],[4330,18,4481,22],[4331,8,4481,24,"clickBreadcrumb"],[4332,6,4481,40],[4332,7,4481,41],[4332,10,4481,44,"click"],[4332,15,4481,49],[4334,6,4483,4],[4335,6,4484,4],[4335,10,4484,8,"isSlowClick"],[4335,21,4484,19],[4335,23,4484,21],[4336,8,4485,6],[4337,8,4486,6],[4338,8,4487,6],[4338,14,4487,12,"timeAfterClickMs"],[4338,30,4487,28],[4338,33,4487,31,"Math"],[4338,37,4487,35],[4338,38,4487,36,"min"],[4338,41,4487,39],[4338,42,4487,40,"click"],[4338,47,4487,45],[4338,48,4487,46,"mutationAfter"],[4338,61,4487,59],[4338,65,4487,63],[4338,69,4487,67],[4338,70,4487,68,"_timeout"],[4338,78,4487,76],[4338,80,4487,78],[4338,84,4487,82],[4338,85,4487,83,"_timeout"],[4338,93,4487,91],[4338,94,4487,92],[4338,97,4487,95],[4338,101,4487,99],[4339,8,4488,6],[4339,14,4488,12,"endReason"],[4339,23,4488,21],[4339,26,4488,24,"timeAfterClickMs"],[4339,42,4488,40],[4339,45,4488,43],[4339,49,4488,47],[4339,50,4488,48,"_timeout"],[4339,58,4488,56],[4339,61,4488,59],[4339,65,4488,63],[4339,68,4488,66],[4339,78,4488,76],[4339,81,4488,79],[4339,90,4488,88],[4340,8,4490,6],[4340,14,4490,12,"breadcrumb"],[4340,24,4490,22],[4340,27,4490,25],[4341,10,4491,8,"type"],[4341,14,4491,12],[4341,16,4491,14],[4341,25,4491,23],[4342,10,4492,8,"message"],[4342,17,4492,15],[4342,19,4492,17,"clickBreadcrumb"],[4342,34,4492,32],[4342,35,4492,33,"message"],[4342,42,4492,40],[4343,10,4493,8,"timestamp"],[4343,19,4493,17],[4343,21,4493,19,"clickBreadcrumb"],[4343,36,4493,34],[4343,37,4493,35,"timestamp"],[4343,46,4493,44],[4344,10,4494,8,"category"],[4344,18,4494,16],[4344,20,4494,18],[4344,42,4494,40],[4345,10,4495,8,"data"],[4345,14,4495,12],[4345,16,4495,14],[4346,12,4496,10],[4346,15,4496,13,"clickBreadcrumb"],[4346,30,4496,28],[4346,31,4496,29,"data"],[4346,35,4496,33],[4347,12,4497,10,"url"],[4347,15,4497,13],[4347,17,4497,15,"WINDOW"],[4347,23,4497,21],[4347,24,4497,22,"location"],[4347,32,4497,30],[4347,33,4497,31,"href"],[4347,37,4497,35],[4348,12,4498,10,"route"],[4348,17,4498,15],[4348,19,4498,17,"replay"],[4348,25,4498,23],[4348,26,4498,24,"getCurrentRoute"],[4348,41,4498,39],[4348,42,4498,40],[4348,43,4498,41],[4349,12,4499,10,"timeAfterClickMs"],[4349,28,4499,26],[4350,12,4500,10,"endReason"],[4350,21,4500,19],[4351,12,4501,10],[4352,12,4502,10],[4353,12,4503,10,"clickCount"],[4353,22,4503,20],[4353,24,4503,22,"clickCount"],[4353,34,4503,32],[4353,38,4503,36],[4354,10,4504,8],[4355,8,4505,6],[4355,9,4505,7],[4356,8,4507,6],[4356,12,4507,10],[4356,13,4507,11,"_addBreadcrumbEvent"],[4356,32,4507,30],[4356,33,4507,31,"replay"],[4356,39,4507,37],[4356,41,4507,39,"breadcrumb"],[4356,51,4507,49],[4356,52,4507,50],[4357,8,4508,6],[4358,6,4509,4],[4360,6,4511,4],[4361,6,4512,4],[4361,10,4512,8,"clickCount"],[4361,20,4512,18],[4361,23,4512,21],[4361,24,4512,22],[4361,26,4512,24],[4362,8,4513,6],[4362,14,4513,12,"breadcrumb"],[4362,24,4513,22],[4362,27,4513,25],[4363,10,4514,8,"type"],[4363,14,4514,12],[4363,16,4514,14],[4363,25,4514,23],[4364,10,4515,8,"message"],[4364,17,4515,15],[4364,19,4515,17,"clickBreadcrumb"],[4364,34,4515,32],[4364,35,4515,33,"message"],[4364,42,4515,40],[4365,10,4516,8,"timestamp"],[4365,19,4516,17],[4365,21,4516,19,"clickBreadcrumb"],[4365,36,4516,34],[4365,37,4516,35,"timestamp"],[4365,46,4516,44],[4366,10,4517,8,"category"],[4366,18,4517,16],[4366,20,4517,18],[4366,35,4517,33],[4367,10,4518,8,"data"],[4367,14,4518,12],[4367,16,4518,14],[4368,12,4519,10],[4368,15,4519,13,"clickBreadcrumb"],[4368,30,4519,28],[4368,31,4519,29,"data"],[4368,35,4519,33],[4369,12,4520,10,"url"],[4369,15,4520,13],[4369,17,4520,15,"WINDOW"],[4369,23,4520,21],[4369,24,4520,22,"location"],[4369,32,4520,30],[4369,33,4520,31,"href"],[4369,37,4520,35],[4370,12,4521,10,"route"],[4370,17,4521,15],[4370,19,4521,17,"replay"],[4370,25,4521,23],[4370,26,4521,24,"getCurrentRoute"],[4370,41,4521,39],[4370,42,4521,40],[4370,43,4521,41],[4371,12,4522,10,"clickCount"],[4371,22,4522,20],[4372,12,4523,10,"metric"],[4372,18,4523,16],[4372,20,4523,18],[4373,10,4524,8],[4374,8,4525,6],[4374,9,4525,7],[4375,8,4527,6],[4375,12,4527,10],[4375,13,4527,11,"_addBreadcrumbEvent"],[4375,32,4527,30],[4375,33,4527,31,"replay"],[4375,39,4527,37],[4375,41,4527,39,"breadcrumb"],[4375,51,4527,49],[4375,52,4527,50],[4376,6,4528,4],[4377,4,4529,2],[4379,4,4531,2],[4380,4,4532,3,"_scheduleCheckClicks"],[4380,24,4532,23,"_scheduleCheckClicks"],[4380,25,4532,23],[4380,27,4532,26],[4381,6,4533,4],[4381,10,4533,8],[4381,14,4533,12],[4381,15,4533,13,"_checkClickTimeout"],[4381,33,4533,31],[4381,35,4533,33],[4382,8,4534,6,"clearTimeout"],[4382,20,4534,18],[4382,21,4534,19],[4382,25,4534,23],[4382,26,4534,24,"_checkClickTimeout"],[4382,44,4534,42],[4382,45,4534,43],[4383,6,4535,4],[4384,6,4537,4],[4384,10,4537,8],[4384,11,4537,9,"_checkClickTimeout"],[4384,29,4537,27],[4384,32,4537,30],[4384,36,4537,30,"setTimeout$3"],[4384,60,4537,42],[4384,62,4537,43],[4384,68,4537,49],[4384,72,4537,53],[4384,73,4537,54,"_checkClicks"],[4384,85,4537,66],[4384,86,4537,67],[4384,87,4537,68],[4384,89,4537,70],[4384,93,4537,74],[4384,94,4537,75],[4385,4,4538,2],[4386,2,4539,0],[4387,2,4541,0],[4387,8,4541,6,"SLOW_CLICK_TAGS"],[4387,23,4541,21],[4387,26,4541,24],[4387,27,4541,25],[4387,30,4541,28],[4387,32,4541,30],[4387,40,4541,38],[4387,42,4541,40],[4387,49,4541,47],[4387,50,4541,48],[4389,2,4543,0],[4390,2,4544,0],[4390,11,4544,9,"ignoreElement"],[4390,24,4544,22,"ignoreElement"],[4390,25,4544,23,"node"],[4390,29,4544,27],[4390,31,4544,29,"ignoreSelector"],[4390,45,4544,43],[4390,47,4544,45],[4391,4,4545,2],[4391,8,4545,6],[4391,9,4545,7,"SLOW_CLICK_TAGS"],[4391,24,4545,22],[4391,25,4545,23,"includes"],[4391,33,4545,31],[4391,34,4545,32,"node"],[4391,38,4545,36],[4391,39,4545,37,"tagName"],[4391,46,4545,44],[4391,47,4545,45],[4391,49,4545,47],[4392,6,4546,4],[4392,13,4546,11],[4392,17,4546,15],[4393,4,4547,2],[4395,4,4549,2],[4396,4,4550,2],[4396,8,4550,6,"node"],[4396,12,4550,10],[4396,13,4550,11,"tagName"],[4396,20,4550,18],[4396,25,4550,23],[4396,32,4550,30],[4396,36,4550,34],[4396,37,4550,35],[4396,38,4550,36],[4396,46,4550,44],[4396,48,4550,46],[4396,56,4550,54],[4396,57,4550,55],[4396,58,4550,56,"includes"],[4396,66,4550,64],[4396,67,4550,65,"node"],[4396,71,4550,69],[4396,72,4550,70,"getAttribute"],[4396,84,4550,82],[4396,85,4550,83],[4396,91,4550,89],[4396,92,4550,90],[4396,96,4550,94],[4396,98,4550,96],[4396,99,4550,97],[4396,101,4550,99],[4397,6,4551,4],[4397,13,4551,11],[4397,17,4551,15],[4398,4,4552,2],[4400,4,4554,2],[4401,4,4555,2],[4402,4,4556,2],[4403,4,4557,2],[4403,8,4558,4,"node"],[4403,12,4558,8],[4403,13,4558,9,"tagName"],[4403,20,4558,16],[4403,25,4558,21],[4403,28,4558,24],[4403,33,4559,5,"node"],[4403,37,4559,9],[4403,38,4559,10,"hasAttribute"],[4403,50,4559,22],[4403,51,4559,23],[4403,61,4559,33],[4403,62,4559,34],[4403,66,4559,39,"node"],[4403,70,4559,43],[4403,71,4559,44,"hasAttribute"],[4403,83,4559,56],[4403,84,4559,57],[4403,92,4559,65],[4403,93,4559,66],[4403,97,4559,70,"node"],[4403,101,4559,74],[4403,102,4559,75,"getAttribute"],[4403,114,4559,87],[4403,115,4559,88],[4403,123,4559,96],[4403,124,4559,97],[4403,129,4559,102],[4403,136,4559,110],[4403,137,4559,111],[4403,139,4560,4],[4404,6,4561,4],[4404,13,4561,11],[4404,17,4561,15],[4405,4,4562,2],[4406,4,4564,2],[4406,8,4564,6,"ignoreSelector"],[4406,22,4564,20],[4406,26,4564,24,"node"],[4406,30,4564,28],[4406,31,4564,29,"matches"],[4406,38,4564,36],[4406,39,4564,37,"ignoreSelector"],[4406,53,4564,51],[4406,54,4564,52],[4406,56,4564,54],[4407,6,4565,4],[4407,13,4565,11],[4407,17,4565,15],[4408,4,4566,2],[4409,4,4568,2],[4409,11,4568,9],[4409,16,4568,14],[4410,2,4569,0],[4411,2,4571,0],[4411,11,4571,9,"isClickBreadcrumb"],[4411,28,4571,26,"isClickBreadcrumb"],[4411,29,4571,27,"breadcrumb"],[4411,39,4571,37],[4411,41,4571,39],[4412,4,4572,2],[4412,11,4572,9],[4412,12,4572,10],[4412,14,4572,12,"breadcrumb"],[4412,24,4572,22],[4412,25,4572,23,"data"],[4412,29,4572,27],[4412,33,4572,31],[4412,40,4572,38,"breadcrumb"],[4412,50,4572,48],[4412,51,4572,49,"data"],[4412,55,4572,53],[4412,56,4572,54,"nodeId"],[4412,62,4572,60],[4412,67,4572,65],[4412,75,4572,73],[4412,79,4572,77,"breadcrumb"],[4412,89,4572,87],[4412,90,4572,88,"timestamp"],[4412,99,4572,97],[4412,100,4572,98],[4413,2,4573,0],[4415,2,4575,0],[4416,2,4576,0],[4416,11,4576,9,"nowInSeconds"],[4416,23,4576,21,"nowInSeconds"],[4416,24,4576,21],[4416,26,4576,24],[4417,4,4577,2],[4417,11,4577,9,"Date"],[4417,15,4577,13],[4417,16,4577,14,"now"],[4417,19,4577,17],[4417,20,4577,18],[4417,21,4577,19],[4417,24,4577,22],[4417,28,4577,26],[4418,2,4578,0],[4420,2,4580,0],[4421,2,4581,0],[4421,11,4581,9,"updateClickDetectorForRecordingEvent"],[4421,47,4581,45,"updateClickDetectorForRecordingEvent"],[4421,48,4581,46,"clickDetector"],[4421,61,4581,59],[4421,63,4581,61,"event"],[4421,68,4581,66],[4421,70,4581,68],[4422,4,4582,2],[4422,8,4582,6],[4423,6,4583,4],[4424,6,4584,4],[4425,6,4585,4],[4426,6,4586,4],[4427,6,4587,4],[4428,6,4588,4],[4429,6,4589,4],[4431,6,4591,4],[4431,10,4591,8],[4431,11,4591,9,"isIncrementalEvent"],[4431,29,4591,27],[4431,30,4591,28,"event"],[4431,35,4591,33],[4431,36,4591,34],[4431,38,4591,36],[4432,8,4592,6],[4433,6,4593,4],[4434,6,4595,4],[4434,12,4595,10],[4435,8,4595,12,"source"],[4436,6,4595,19],[4436,7,4595,20],[4436,10,4595,23,"event"],[4436,15,4595,28],[4436,16,4595,29,"data"],[4436,20,4595,33],[4437,6,4596,4],[4437,10,4596,8,"IncrementalMutationSources"],[4437,36,4596,34],[4437,37,4596,35,"has"],[4437,40,4596,38],[4437,41,4596,39,"source"],[4437,47,4596,45],[4437,48,4596,46],[4437,50,4596,48],[4438,8,4597,6,"clickDetector"],[4438,21,4597,19],[4438,22,4597,20,"registerMutation"],[4438,38,4597,36],[4438,39,4597,37,"event"],[4438,44,4597,42],[4438,45,4597,43,"timestamp"],[4438,54,4597,52],[4438,55,4597,53],[4439,6,4598,4],[4440,6,4600,4],[4440,10,4600,8,"source"],[4440,16,4600,14],[4440,21,4600,19,"IncrementalSource"],[4440,38,4600,36],[4440,39,4600,37,"Scroll"],[4440,45,4600,43],[4440,47,4600,45],[4441,8,4601,6,"clickDetector"],[4441,21,4601,19],[4441,22,4601,20,"registerScroll"],[4441,36,4601,34],[4441,37,4601,35,"event"],[4441,42,4601,40],[4441,43,4601,41,"timestamp"],[4441,52,4601,50],[4441,53,4601,51],[4442,6,4602,4],[4443,6,4604,4],[4443,10,4604,8,"isIncrementalMouseInteraction"],[4443,39,4604,37],[4443,40,4604,38,"event"],[4443,45,4604,43],[4443,46,4604,44],[4443,48,4604,46],[4444,8,4605,6],[4444,14,4605,12],[4445,10,4605,14,"type"],[4445,14,4605,18],[4446,10,4605,20,"id"],[4447,8,4605,23],[4447,9,4605,24],[4447,12,4605,27,"event"],[4447,17,4605,32],[4447,18,4605,33,"data"],[4447,22,4605,37],[4448,8,4606,6],[4448,14,4606,12,"node"],[4448,18,4606,16],[4448,21,4606,19,"record"],[4448,27,4606,25],[4448,28,4606,26,"mirror"],[4448,34,4606,32],[4448,35,4606,33,"getNode"],[4448,42,4606,40],[4448,43,4606,41,"id"],[4448,45,4606,43],[4448,46,4606,44],[4449,8,4608,6],[4449,12,4608,10,"node"],[4449,16,4608,14],[4449,28,4608,26,"HTMLElement"],[4449,39,4608,37],[4449,43,4608,41,"type"],[4449,47,4608,45],[4449,52,4608,50,"MouseInteractions"],[4449,69,4608,67],[4449,70,4608,68,"Click"],[4449,75,4608,73],[4449,77,4608,75],[4450,10,4609,8,"clickDetector"],[4450,23,4609,21],[4450,24,4609,22,"registerClick"],[4450,37,4609,35],[4450,38,4609,36,"node"],[4450,42,4609,40],[4450,43,4609,41],[4451,8,4610,6],[4452,6,4611,4],[4453,4,4612,2],[4453,5,4612,3],[4453,6,4612,4],[4453,13,4612,11,"e"],[4453,14,4612,12],[4453,16,4612,14],[4454,6,4613,4],[4455,4,4613,4],[4456,2,4615,0],[4457,2,4617,0],[4457,11,4617,9,"isIncrementalEvent"],[4457,29,4617,27,"isIncrementalEvent"],[4457,30,4617,28,"event"],[4457,35,4617,33],[4457,37,4617,35],[4458,4,4618,2],[4458,11,4618,9,"event"],[4458,16,4618,14],[4458,17,4618,15,"type"],[4458,21,4618,19],[4458,26,4618,24,"ReplayEventTypeIncrementalSnapshot"],[4458,60,4618,58],[4459,2,4619,0],[4460,2,4621,0],[4460,11,4621,9,"isIncrementalMouseInteraction"],[4460,40,4621,38,"isIncrementalMouseInteraction"],[4460,41,4622,2,"event"],[4460,46,4622,7],[4460,48,4623,2],[4461,4,4624,2],[4461,11,4624,9,"event"],[4461,16,4624,14],[4461,17,4624,15,"data"],[4461,21,4624,19],[4461,22,4624,20,"source"],[4461,28,4624,26],[4461,33,4624,31,"IncrementalSource"],[4461,50,4624,48],[4461,51,4624,49,"MouseInteraction"],[4461,67,4624,65],[4462,2,4625,0],[4464,2,4627,0],[4465,0,4628,0],[4466,0,4629,0],[4467,2,4630,0],[4467,11,4630,9,"createBreadcrumb"],[4467,27,4630,25,"createBreadcrumb"],[4467,28,4631,2,"breadcrumb"],[4467,38,4631,12],[4467,40,4632,2],[4468,4,4633,2],[4468,11,4633,9],[4469,6,4634,4,"timestamp"],[4469,15,4634,13],[4469,17,4634,15,"Date"],[4469,21,4634,19],[4469,22,4634,20,"now"],[4469,25,4634,23],[4469,26,4634,24],[4469,27,4634,25],[4469,30,4634,28],[4469,34,4634,32],[4470,6,4635,4,"type"],[4470,10,4635,8],[4470,12,4635,10],[4470,21,4635,19],[4471,6,4636,4],[4471,9,4636,7,"breadcrumb"],[4472,4,4637,2],[4472,5,4637,3],[4473,2,4638,0],[4474,2,4640,0],[4474,6,4640,4,"NodeType"],[4474,14,4640,12],[4475,2,4641,0],[4475,3,4641,1],[4475,13,4641,11,"NodeType"],[4475,21,4641,19],[4475,23,4641,21],[4476,4,4642,4,"NodeType"],[4476,12,4642,12],[4476,13,4642,13,"NodeType"],[4476,21,4642,21],[4476,22,4642,22],[4476,32,4642,32],[4476,33,4642,33],[4476,36,4642,36],[4476,37,4642,37],[4476,38,4642,38],[4476,41,4642,41],[4476,51,4642,51],[4477,4,4643,4,"NodeType"],[4477,12,4643,12],[4477,13,4643,13,"NodeType"],[4477,21,4643,21],[4477,22,4643,22],[4477,36,4643,36],[4477,37,4643,37],[4477,40,4643,40],[4477,41,4643,41],[4477,42,4643,42],[4477,45,4643,45],[4477,59,4643,59],[4478,4,4644,4,"NodeType"],[4478,12,4644,12],[4478,13,4644,13,"NodeType"],[4478,21,4644,21],[4478,22,4644,22],[4478,31,4644,31],[4478,32,4644,32],[4478,35,4644,35],[4478,36,4644,36],[4478,37,4644,37],[4478,40,4644,40],[4478,49,4644,49],[4479,4,4645,4,"NodeType"],[4479,12,4645,12],[4479,13,4645,13,"NodeType"],[4479,21,4645,21],[4479,22,4645,22],[4479,28,4645,28],[4479,29,4645,29],[4479,32,4645,32],[4479,33,4645,33],[4479,34,4645,34],[4479,37,4645,37],[4479,43,4645,43],[4480,4,4646,4,"NodeType"],[4480,12,4646,12],[4480,13,4646,13,"NodeType"],[4480,21,4646,21],[4480,22,4646,22],[4480,29,4646,29],[4480,30,4646,30],[4480,33,4646,33],[4480,34,4646,34],[4480,35,4646,35],[4480,38,4646,38],[4480,45,4646,45],[4481,4,4647,4,"NodeType"],[4481,12,4647,12],[4481,13,4647,13,"NodeType"],[4481,21,4647,21],[4481,22,4647,22],[4481,31,4647,31],[4481,32,4647,32],[4481,35,4647,35],[4481,36,4647,36],[4481,37,4647,37],[4481,40,4647,40],[4481,49,4647,49],[4482,2,4648,0],[4482,3,4648,1],[4482,5,4648,3,"NodeType"],[4482,13,4648,11],[4482,18,4648,16,"NodeType"],[4482,26,4648,24],[4482,29,4648,27],[4482,30,4648,28],[4482,31,4648,29],[4482,32,4648,30],[4482,33,4648,31],[4484,2,4650,0],[4485,2,4651,0],[4486,2,4652,0],[4486,8,4652,6,"ATTRIBUTES_TO_RECORD"],[4486,28,4652,26],[4486,31,4652,29],[4486,35,4652,33,"Set"],[4486,38,4652,36],[4486,39,4652,37],[4486,40,4653,2],[4486,44,4653,6],[4486,46,4654,2],[4486,53,4654,9],[4486,55,4655,2],[4486,67,4655,14],[4486,69,4656,2],[4486,75,4656,8],[4486,77,4657,2],[4486,83,4657,8],[4486,85,4658,2],[4486,90,4658,7],[4486,92,4659,2],[4486,99,4659,9],[4486,101,4660,2],[4486,115,4660,16],[4486,117,4661,2],[4486,130,4661,15],[4486,132,4662,2],[4486,142,4662,12],[4486,144,4663,2],[4486,159,4663,17],[4486,161,4664,2],[4486,184,4664,25],[4486,185,4665,1],[4486,186,4665,2],[4488,2,4667,0],[4489,0,4668,0],[4490,0,4669,0],[4491,2,4670,0],[4491,11,4670,9,"getAttributesToRecord"],[4491,32,4670,30,"getAttributesToRecord"],[4491,33,4670,31,"attributes"],[4491,43,4670,41],[4491,45,4670,43],[4492,4,4671,2],[4492,10,4671,8,"obj"],[4492,13,4671,11],[4492,16,4671,14],[4492,17,4671,15],[4492,18,4671,16],[4493,4,4672,2],[4493,8,4672,6],[4493,9,4672,7,"attributes"],[4493,19,4672,17],[4493,20,4672,18],[4493,43,4672,41],[4493,44,4672,42],[4493,48,4672,46,"attributes"],[4493,58,4672,56],[4493,59,4672,57],[4493,80,4672,78],[4493,81,4672,79],[4493,83,4672,81],[4494,6,4673,4,"attributes"],[4494,16,4673,14],[4494,17,4673,15],[4494,40,4673,38],[4494,41,4673,39],[4494,44,4673,42,"attributes"],[4494,54,4673,52],[4494,55,4673,53],[4494,76,4673,74],[4494,77,4673,75],[4495,4,4674,2],[4496,4,4675,2],[4496,9,4675,7],[4496,15,4675,13,"key"],[4496,18,4675,16],[4496,22,4675,20,"attributes"],[4496,32,4675,30],[4496,34,4675,32],[4497,6,4676,4],[4497,10,4676,8,"ATTRIBUTES_TO_RECORD"],[4497,30,4676,28],[4497,31,4676,29,"has"],[4497,34,4676,32],[4497,35,4676,33,"key"],[4497,38,4676,36],[4497,39,4676,37],[4497,41,4676,39],[4498,8,4677,6],[4498,12,4677,10,"normalizedKey"],[4498,25,4677,23],[4498,28,4677,26,"key"],[4498,31,4677,29],[4499,8,4679,6],[4499,12,4679,10,"key"],[4499,15,4679,13],[4499,20,4679,18],[4499,33,4679,31],[4499,37,4679,35,"key"],[4499,40,4679,38],[4499,45,4679,43],[4499,59,4679,57],[4499,61,4679,59],[4500,10,4680,8,"normalizedKey"],[4500,23,4680,21],[4500,26,4680,24],[4500,34,4680,32],[4501,8,4681,6],[4502,8,4683,6,"obj"],[4502,11,4683,9],[4502,12,4683,10,"normalizedKey"],[4502,25,4683,23],[4502,26,4683,24],[4502,29,4683,27,"attributes"],[4502,39,4683,37],[4502,40,4683,38,"key"],[4502,43,4683,41],[4502,44,4683,42],[4503,6,4684,4],[4504,4,4685,2],[4505,4,4687,2],[4505,11,4687,9,"obj"],[4505,14,4687,12],[4506,2,4688,0],[4507,2,4690,0],[4507,8,4690,6,"handleDomListener"],[4507,25,4690,23],[4507,28,4691,2,"replay"],[4507,34,4691,8],[4507,38,4692,5],[4508,4,4693,2],[4508,11,4693,10,"handlerData"],[4508,22,4693,21],[4508,26,4693,26],[4509,6,4694,4],[4509,10,4694,8],[4509,11,4694,9,"replay"],[4509,17,4694,15],[4509,18,4694,16,"isEnabled"],[4509,27,4694,25],[4509,28,4694,26],[4509,29,4694,27],[4509,31,4694,29],[4510,8,4695,6],[4511,6,4696,4],[4512,6,4698,4],[4512,12,4698,10,"result"],[4512,18,4698,16],[4512,21,4698,19,"handleDom"],[4512,30,4698,28],[4512,31,4698,29,"handlerData"],[4512,42,4698,40],[4512,43,4698,41],[4513,6,4700,4],[4513,10,4700,8],[4513,11,4700,9,"result"],[4513,17,4700,15],[4513,19,4700,17],[4514,8,4701,6],[4515,6,4702,4],[4516,6,4704,4],[4516,12,4704,10,"isClick"],[4516,19,4704,17],[4516,22,4704,20,"handlerData"],[4516,33,4704,31],[4516,34,4704,32,"name"],[4516,38,4704,36],[4516,43,4704,41],[4516,50,4704,48],[4517,6,4705,4],[4517,12,4705,10,"event"],[4517,17,4705,15],[4517,20,4705,18,"isClick"],[4517,27,4705,25],[4517,30,4705,29,"handlerData"],[4517,41,4705,40],[4517,42,4705,41,"event"],[4517,47,4705,46],[4517,50,4705,51,"undefined"],[4517,59,4705,60],[4518,6,4706,4],[4519,6,4707,4],[4519,10,4708,6,"isClick"],[4519,17,4708,13],[4519,21,4709,6,"replay"],[4519,27,4709,12],[4519,28,4709,13,"clickDetector"],[4519,41,4709,26],[4519,45,4710,6,"event"],[4519,50,4710,11],[4519,54,4711,6,"event"],[4519,59,4711,11],[4519,60,4711,12,"target"],[4519,66,4711,18],[4519,70,4712,6],[4519,71,4712,7,"event"],[4519,76,4712,12],[4519,77,4712,13,"altKey"],[4519,83,4712,19],[4519,87,4713,6],[4519,88,4713,7,"event"],[4519,93,4713,12],[4519,94,4713,13,"metaKey"],[4519,101,4713,20],[4519,105,4714,6],[4519,106,4714,7,"event"],[4519,111,4714,12],[4519,112,4714,13,"ctrlKey"],[4519,119,4714,20],[4519,123,4715,6],[4519,124,4715,7,"event"],[4519,129,4715,12],[4519,130,4715,13,"shiftKey"],[4519,138,4715,21],[4519,140,4716,6],[4520,8,4717,6,"handleClick"],[4520,19,4717,17],[4520,20,4718,8,"replay"],[4520,26,4718,14],[4520,27,4718,15,"clickDetector"],[4520,40,4718,28],[4520,42,4719,8,"result"],[4520,48,4719,14],[4520,50,4720,8,"getClickTargetNode"],[4520,68,4720,26],[4520,69,4720,27,"handlerData"],[4520,80,4720,38],[4520,81,4720,39,"event"],[4520,86,4720,45],[4520,87,4721,6],[4520,88,4721,7],[4521,6,4722,4],[4522,6,4724,4,"addBreadcrumbEvent"],[4522,24,4724,22],[4522,25,4724,23,"replay"],[4522,31,4724,29],[4522,33,4724,31,"result"],[4522,39,4724,37],[4522,40,4724,38],[4523,4,4725,2],[4523,5,4725,3],[4524,2,4726,0],[4524,3,4726,1],[4526,2,4728,0],[4527,2,4729,0],[4527,11,4729,9,"getBaseDomBreadcrumb"],[4527,31,4729,29,"getBaseDomBreadcrumb"],[4527,32,4729,30,"target"],[4527,38,4729,36],[4527,40,4729,38,"message"],[4527,47,4729,45],[4527,49,4729,47],[4528,4,4730,2],[4528,10,4730,8,"nodeId"],[4528,16,4730,14],[4528,19,4730,17,"record"],[4528,25,4730,23],[4528,26,4730,24,"mirror"],[4528,32,4730,30],[4528,33,4730,31,"getId"],[4528,38,4730,36],[4528,39,4730,37,"target"],[4528,45,4730,43],[4528,46,4730,44],[4529,4,4731,2],[4529,10,4731,8,"node"],[4529,14,4731,12],[4529,17,4731,15,"nodeId"],[4529,23,4731,21],[4529,27,4731,25,"record"],[4529,33,4731,31],[4529,34,4731,32,"mirror"],[4529,40,4731,38],[4529,41,4731,39,"getNode"],[4529,48,4731,46],[4529,49,4731,47,"nodeId"],[4529,55,4731,53],[4529,56,4731,54],[4530,4,4732,2],[4530,10,4732,8,"meta"],[4530,14,4732,12],[4530,17,4732,15,"node"],[4530,21,4732,19],[4530,25,4732,23,"record"],[4530,31,4732,29],[4530,32,4732,30,"mirror"],[4530,38,4732,36],[4530,39,4732,37,"getMeta"],[4530,46,4732,44],[4530,47,4732,45,"node"],[4530,51,4732,49],[4530,52,4732,50],[4531,4,4733,2],[4531,10,4733,8,"element"],[4531,17,4733,15],[4531,20,4733,18,"meta"],[4531,24,4733,22],[4531,28,4733,26,"isElement"],[4531,37,4733,35],[4531,38,4733,36,"meta"],[4531,42,4733,40],[4531,43,4733,41],[4531,46,4733,44,"meta"],[4531,50,4733,48],[4531,53,4733,51],[4531,57,4733,55],[4532,4,4735,2],[4532,11,4735,9],[4533,6,4736,4,"message"],[4533,13,4736,11],[4534,6,4737,4,"data"],[4534,10,4737,8],[4534,12,4737,10,"element"],[4534,19,4737,17],[4534,22,4738,8],[4535,8,4739,10,"nodeId"],[4535,14,4739,16],[4536,8,4740,10,"node"],[4536,12,4740,14],[4536,14,4740,16],[4537,10,4741,12,"id"],[4537,12,4741,14],[4537,14,4741,16,"nodeId"],[4537,20,4741,22],[4538,10,4742,12,"tagName"],[4538,17,4742,19],[4538,19,4742,21,"element"],[4538,26,4742,28],[4538,27,4742,29,"tagName"],[4538,34,4742,36],[4539,10,4743,12,"textContent"],[4539,21,4743,23],[4539,23,4743,25,"Array"],[4539,28,4743,30],[4539,29,4743,31,"from"],[4539,33,4743,35],[4539,34,4743,36,"element"],[4539,41,4743,43],[4539,42,4743,44,"childNodes"],[4539,52,4743,54],[4539,53,4743,55],[4539,54,4744,15,"map"],[4539,57,4744,18],[4539,58,4744,20,"node"],[4539,62,4744,24],[4539,66,4744,29,"node"],[4539,70,4744,33],[4539,71,4744,34,"type"],[4539,75,4744,38],[4539,80,4744,43,"NodeType"],[4539,88,4744,51],[4539,89,4744,52,"Text"],[4539,93,4744,56],[4539,97,4744,60,"node"],[4539,101,4744,64],[4539,102,4744,65,"textContent"],[4539,113,4744,76],[4539,114,4744,77],[4539,115,4745,15,"filter"],[4539,121,4745,21],[4539,122,4745,22,"Boolean"],[4539,129,4745,29],[4539,130,4745,30],[4539,131,4745,31],[4540,10,4745,31],[4540,11,4746,15,"map"],[4540,14,4746,18],[4540,15,4746,19,"text"],[4540,19,4746,23],[4540,23,4746,28,"text"],[4540,27,4746,32],[4540,28,4746,35,"trim"],[4540,32,4746,39],[4540,33,4746,40],[4540,34,4746,41],[4540,35,4746,42],[4540,36,4747,15,"join"],[4540,40,4747,19],[4540,41,4747,20],[4540,43,4747,22],[4540,44,4747,23],[4541,10,4748,12,"attributes"],[4541,20,4748,22],[4541,22,4748,24,"getAttributesToRecord"],[4541,43,4748,45],[4541,44,4748,46,"element"],[4541,51,4748,53],[4541,52,4748,54,"attributes"],[4541,62,4748,64],[4542,8,4749,10],[4543,6,4750,8],[4543,7,4750,9],[4543,10,4751,8],[4543,11,4751,9],[4544,4,4752,2],[4544,5,4752,3],[4545,2,4753,0],[4547,2,4755,0],[4548,0,4756,0],[4549,0,4757,0],[4550,0,4758,0],[4551,2,4759,0],[4551,11,4759,9,"handleDom"],[4551,20,4759,18,"handleDom"],[4551,21,4759,19,"handlerData"],[4551,32,4759,30],[4551,34,4759,32],[4552,4,4760,2],[4552,10,4760,8],[4553,6,4760,10,"target"],[4553,12,4760,16],[4554,6,4760,18,"message"],[4555,4,4760,26],[4555,5,4760,27],[4555,8,4760,30,"getDomTarget"],[4555,20,4760,42],[4555,21,4760,43,"handlerData"],[4555,32,4760,54],[4555,33,4760,55],[4556,4,4762,2],[4556,11,4762,9,"createBreadcrumb"],[4556,27,4762,25],[4556,28,4762,26],[4557,6,4763,4,"category"],[4557,14,4763,12],[4557,16,4763,14],[4557,22,4763,20,"handlerData"],[4557,33,4763,31],[4557,34,4763,32,"name"],[4557,38,4763,36],[4557,40,4763,38],[4558,6,4764,4],[4558,9,4764,7,"getBaseDomBreadcrumb"],[4558,29,4764,27],[4558,30,4764,28,"target"],[4558,36,4764,34],[4558,38,4764,36,"message"],[4558,45,4764,43],[4559,4,4765,2],[4559,5,4765,3],[4559,6,4765,4],[4560,2,4766,0],[4561,2,4768,0],[4561,11,4768,9,"getDomTarget"],[4561,23,4768,21,"getDomTarget"],[4561,24,4768,22,"handlerData"],[4561,35,4768,33],[4561,37,4768,35],[4562,4,4769,2],[4562,10,4769,8,"isClick"],[4562,17,4769,15],[4562,20,4769,18,"handlerData"],[4562,31,4769,29],[4562,32,4769,30,"name"],[4562,36,4769,34],[4562,41,4769,39],[4562,48,4769,46],[4563,4,4771,2],[4563,8,4771,6,"message"],[4563,15,4771,13],[4564,4,4772,2],[4564,8,4772,6,"target"],[4564,14,4772,12],[4564,17,4772,15],[4564,21,4772,19],[4566,4,4774,2],[4567,4,4775,2],[4567,8,4775,6],[4568,6,4776,4,"target"],[4568,12,4776,10],[4568,15,4776,13,"isClick"],[4568,22,4776,20],[4568,25,4776,23,"getClickTargetNode"],[4568,43,4776,41],[4568,44,4776,42,"handlerData"],[4568,55,4776,53],[4568,56,4776,54,"event"],[4568,61,4776,60],[4568,62,4776,61],[4568,65,4776,64,"getTargetNode"],[4568,78,4776,77],[4568,79,4776,78,"handlerData"],[4568,90,4776,89],[4568,91,4776,90,"event"],[4568,96,4776,96],[4568,97,4776,97],[4569,6,4777,4,"message"],[4569,13,4777,11],[4569,16,4777,14],[4569,20,4777,14,"htmlTreeAsString"],[4569,42,4777,30],[4569,44,4777,31,"target"],[4569,50,4777,37],[4569,52,4777,39],[4570,8,4777,41,"maxStringLength"],[4570,23,4777,56],[4570,25,4777,58],[4571,6,4777,62],[4571,7,4777,63],[4571,8,4777,64],[4571,12,4777,68],[4571,23,4777,79],[4572,4,4778,2],[4572,5,4778,3],[4572,6,4778,4],[4572,13,4778,11,"e"],[4572,14,4778,12],[4572,16,4778,14],[4573,6,4779,4,"message"],[4573,13,4779,11],[4573,16,4779,14],[4573,27,4779,25],[4574,4,4780,2],[4575,4,4782,2],[4575,11,4782,9],[4576,6,4782,11,"target"],[4576,12,4782,17],[4577,6,4782,19,"message"],[4578,4,4782,27],[4578,5,4782,28],[4579,2,4783,0],[4580,2,4785,0],[4580,11,4785,9,"isElement"],[4580,20,4785,18,"isElement"],[4580,21,4785,19,"node"],[4580,25,4785,23],[4580,27,4785,25],[4581,4,4786,2],[4581,11,4786,9,"node"],[4581,15,4786,13],[4581,16,4786,14,"type"],[4581,20,4786,18],[4581,25,4786,23,"NodeType"],[4581,33,4786,31],[4581,34,4786,32,"Element"],[4581,41,4786,39],[4582,2,4787,0],[4584,2,4789,0],[4585,2,4790,0],[4585,11,4790,9,"handleKeyboardEvent"],[4585,30,4790,28,"handleKeyboardEvent"],[4585,31,4790,29,"replay"],[4585,37,4790,35],[4585,39,4790,37,"event"],[4585,44,4790,42],[4585,46,4790,44],[4586,4,4791,2],[4586,8,4791,6],[4586,9,4791,7,"replay"],[4586,15,4791,13],[4586,16,4791,14,"isEnabled"],[4586,25,4791,23],[4586,26,4791,24],[4586,27,4791,25],[4586,29,4791,27],[4587,6,4792,4],[4588,4,4793,2],[4590,4,4795,2],[4591,4,4796,2],[4592,4,4797,2],[4593,4,4798,2,"replay"],[4593,10,4798,8],[4593,11,4798,9,"updateUserActivity"],[4593,29,4798,27],[4593,30,4798,28],[4593,31,4798,29],[4594,4,4800,2],[4594,10,4800,8,"breadcrumb"],[4594,20,4800,18],[4594,23,4800,21,"getKeyboardBreadcrumb"],[4594,44,4800,42],[4594,45,4800,43,"event"],[4594,50,4800,48],[4594,51,4800,49],[4595,4,4802,2],[4595,8,4802,6],[4595,9,4802,7,"breadcrumb"],[4595,19,4802,17],[4595,21,4802,19],[4596,6,4803,4],[4597,4,4804,2],[4598,4,4806,2,"addBreadcrumbEvent"],[4598,22,4806,20],[4598,23,4806,21,"replay"],[4598,29,4806,27],[4598,31,4806,29,"breadcrumb"],[4598,41,4806,39],[4598,42,4806,40],[4599,2,4807,0],[4601,2,4809,0],[4602,2,4810,0],[4602,11,4810,9,"getKeyboardBreadcrumb"],[4602,32,4810,30,"getKeyboardBreadcrumb"],[4602,33,4810,31,"event"],[4602,38,4810,36],[4602,40,4810,38],[4603,4,4811,2],[4603,10,4811,8],[4604,6,4811,10,"metaKey"],[4604,13,4811,17],[4605,6,4811,19,"shiftKey"],[4605,14,4811,27],[4606,6,4811,29,"ctrlKey"],[4606,13,4811,36],[4607,6,4811,38,"altKey"],[4607,12,4811,44],[4608,6,4811,46,"key"],[4608,9,4811,49],[4609,6,4811,51,"target"],[4610,4,4811,58],[4610,5,4811,59],[4610,8,4811,62,"event"],[4610,13,4811,67],[4612,4,4813,2],[4613,4,4814,2],[4613,8,4814,6],[4613,9,4814,7,"target"],[4613,15,4814,13],[4613,19,4814,17,"isInputElement"],[4613,33,4814,31],[4613,34,4814,32,"target"],[4613,40,4814,39],[4613,41,4814,40],[4613,45,4814,44],[4613,46,4814,45,"key"],[4613,49,4814,48],[4613,51,4814,50],[4614,6,4815,4],[4614,13,4815,11],[4614,17,4815,15],[4615,4,4816,2],[4617,4,4818,2],[4618,4,4819,2],[4618,10,4819,8,"hasModifierKey"],[4618,24,4819,22],[4618,27,4819,25,"metaKey"],[4618,34,4819,32],[4618,38,4819,36,"ctrlKey"],[4618,45,4819,43],[4618,49,4819,47,"altKey"],[4618,55,4819,53],[4619,4,4820,2],[4619,10,4820,8,"isCharacterKey"],[4619,24,4820,22],[4619,27,4820,25,"key"],[4619,30,4820,28],[4619,31,4820,29,"length"],[4619,37,4820,35],[4619,42,4820,40],[4619,43,4820,41],[4619,44,4820,42],[4619,45,4820,43],[4621,4,4822,2],[4622,4,4823,2],[4623,4,4824,2],[4623,8,4824,6],[4623,9,4824,7,"hasModifierKey"],[4623,23,4824,21],[4623,27,4824,25,"isCharacterKey"],[4623,41,4824,39],[4623,43,4824,41],[4624,6,4825,4],[4624,13,4825,11],[4624,17,4825,15],[4625,4,4826,2],[4626,4,4828,2],[4626,10,4828,8,"message"],[4626,17,4828,15],[4626,20,4828,18],[4626,24,4828,18,"htmlTreeAsString"],[4626,46,4828,34],[4626,48,4828,35,"target"],[4626,54,4828,41],[4626,56,4828,43],[4627,6,4828,45,"maxStringLength"],[4627,21,4828,60],[4627,23,4828,62],[4628,4,4828,66],[4628,5,4828,67],[4628,6,4828,68],[4628,10,4828,72],[4628,21,4828,83],[4629,4,4829,2],[4629,10,4829,8,"baseBreadcrumb"],[4629,24,4829,22],[4629,27,4829,25,"getBaseDomBreadcrumb"],[4629,47,4829,45],[4629,48,4829,46,"target"],[4629,54,4829,52],[4629,56,4829,55,"message"],[4629,63,4829,62],[4629,64,4829,63],[4630,4,4831,2],[4630,11,4831,9,"createBreadcrumb"],[4630,27,4831,25],[4630,28,4831,26],[4631,6,4832,4,"category"],[4631,14,4832,12],[4631,16,4832,14],[4631,28,4832,26],[4632,6,4833,4,"message"],[4632,13,4833,11],[4633,6,4834,4,"data"],[4633,10,4834,8],[4633,12,4834,10],[4634,8,4835,6],[4634,11,4835,9,"baseBreadcrumb"],[4634,25,4835,23],[4634,26,4835,24,"data"],[4634,30,4835,28],[4635,8,4836,6,"metaKey"],[4635,15,4836,13],[4636,8,4837,6,"shiftKey"],[4636,16,4837,14],[4637,8,4838,6,"ctrlKey"],[4637,15,4838,13],[4638,8,4839,6,"altKey"],[4638,14,4839,12],[4639,8,4840,6,"key"],[4640,6,4841,4],[4641,4,4842,2],[4641,5,4842,3],[4641,6,4842,4],[4642,2,4843,0],[4643,2,4845,0],[4643,11,4845,9,"isInputElement"],[4643,25,4845,23,"isInputElement"],[4643,26,4845,24,"target"],[4643,32,4845,30],[4643,34,4845,32],[4644,4,4846,2],[4644,11,4846,9,"target"],[4644,17,4846,15],[4644,18,4846,16,"tagName"],[4644,25,4846,23],[4644,30,4846,28],[4644,37,4846,35],[4644,41,4846,39,"target"],[4644,47,4846,45],[4644,48,4846,46,"tagName"],[4644,55,4846,53],[4644,60,4846,58],[4644,70,4846,68],[4644,74,4846,72,"target"],[4644,80,4846,78],[4644,81,4846,79,"isContentEditable"],[4644,98,4846,96],[4645,2,4847,0],[4647,2,4849,0],[4648,2,4850,0],[4648,8,4850,6,"ENTRY_TYPES"],[4648,19,4850,17],[4648,22,4852,3],[4649,4,4853,2],[4650,4,4854,2,"resource"],[4650,12,4854,10],[4650,14,4854,12,"createResourceEntry"],[4650,33,4854,31],[4651,4,4855,2,"paint"],[4651,9,4855,7],[4651,11,4855,9,"createPaintEntry"],[4651,27,4855,25],[4652,4,4856,2],[4653,4,4857,2,"navigation"],[4653,14,4857,12],[4653,16,4857,14,"createNavigationEntry"],[4654,2,4858,0],[4654,3,4858,1],[4656,2,4860,0],[4657,0,4861,0],[4658,0,4862,0],[4659,2,4863,0],[4659,11,4863,9,"webVitalHandler"],[4659,26,4863,24,"webVitalHandler"],[4659,27,4864,2,"getter"],[4659,33,4864,8],[4659,35,4865,2,"replay"],[4659,41,4865,8],[4659,43,4866,2],[4660,4,4867,2],[4660,11,4867,9],[4660,12,4867,10],[4661,6,4867,12,"metric"],[4662,4,4867,19],[4662,5,4867,20],[4662,10,4867,25],[4662,15,4867,30,"replay"],[4662,21,4867,36],[4662,22,4867,37,"replayPerformanceEntries"],[4662,46,4867,61],[4662,47,4867,62,"push"],[4662,51,4867,66],[4662,52,4867,67,"getter"],[4662,58,4867,73],[4662,59,4867,74,"metric"],[4662,65,4867,80],[4662,66,4867,81],[4662,67,4867,82],[4663,2,4868,0],[4665,2,4870,0],[4666,0,4871,0],[4667,0,4872,0],[4668,2,4873,0],[4668,11,4873,9,"createPerformanceEntries"],[4668,35,4873,33,"createPerformanceEntries"],[4668,36,4874,2,"entries"],[4668,43,4874,9],[4668,45,4875,2],[4669,4,4876,2],[4669,11,4876,9,"entries"],[4669,18,4876,16],[4669,19,4876,17,"map"],[4669,22,4876,20],[4669,23,4876,21,"createPerformanceEntry"],[4669,45,4876,43],[4669,46,4876,44],[4669,47,4876,45,"filter"],[4669,53,4876,51],[4669,54,4876,52,"Boolean"],[4669,61,4876,59],[4669,62,4876,60],[4670,2,4877,0],[4671,2,4879,0],[4671,11,4879,9,"createPerformanceEntry"],[4671,33,4879,31,"createPerformanceEntry"],[4671,34,4879,32,"entry"],[4671,39,4879,37],[4671,41,4879,39],[4672,4,4880,2],[4672,10,4880,8,"entryType"],[4672,19,4880,17],[4672,22,4880,20,"ENTRY_TYPES"],[4672,33,4880,31],[4672,34,4880,32,"entry"],[4672,39,4880,37],[4672,40,4880,38,"entryType"],[4672,49,4880,47],[4672,50,4880,48],[4673,4,4881,2],[4673,8,4881,6],[4673,9,4881,7,"entryType"],[4673,18,4881,16],[4673,20,4881,18],[4674,6,4882,4],[4674,13,4882,11],[4674,17,4882,15],[4675,4,4883,2],[4676,4,4885,2],[4676,11,4885,9,"entryType"],[4676,20,4885,18],[4676,21,4885,19,"entry"],[4676,26,4885,24],[4676,27,4885,25],[4677,2,4886,0],[4678,2,4888,0],[4678,11,4888,9,"getAbsoluteTime"],[4678,26,4888,24,"getAbsoluteTime"],[4678,27,4888,25,"time"],[4678,31,4888,29],[4678,33,4888,31],[4679,4,4889,2],[4680,4,4890,2],[4681,4,4891,2],[4681,11,4891,9],[4681,12,4891,10],[4681,13,4891,11,"browserPerformanceTimeOrigin"],[4681,47,4891,39],[4681,51,4891,43,"WINDOW"],[4681,57,4891,49],[4681,58,4891,50,"performance"],[4681,69,4891,61],[4681,70,4891,62,"timeOrigin"],[4681,80,4891,72],[4681,84,4891,76,"time"],[4681,88,4891,80],[4681,92,4891,84],[4681,96,4891,88],[4682,2,4892,0],[4683,2,4894,0],[4683,11,4894,9,"createPaintEntry"],[4683,27,4894,25,"createPaintEntry"],[4683,28,4894,26,"entry"],[4683,33,4894,31],[4683,35,4894,33],[4684,4,4895,2],[4684,10,4895,8],[4685,6,4895,10,"duration"],[4685,14,4895,18],[4686,6,4895,20,"entryType"],[4686,15,4895,29],[4687,6,4895,31,"name"],[4687,10,4895,35],[4688,6,4895,37,"startTime"],[4689,4,4895,47],[4689,5,4895,48],[4689,8,4895,51,"entry"],[4689,13,4895,56],[4690,4,4897,2],[4690,10,4897,8,"start"],[4690,15,4897,13],[4690,18,4897,16,"getAbsoluteTime"],[4690,33,4897,31],[4690,34,4897,32,"startTime"],[4690,43,4897,41],[4690,44,4897,42],[4691,4,4898,2],[4691,11,4898,9],[4692,6,4899,4,"type"],[4692,10,4899,8],[4692,12,4899,10,"entryType"],[4692,21,4899,19],[4693,6,4900,4,"name"],[4693,10,4900,8],[4694,6,4901,4,"start"],[4694,11,4901,9],[4695,6,4902,4,"end"],[4695,9,4902,7],[4695,11,4902,9,"start"],[4695,16,4902,14],[4695,19,4902,17,"duration"],[4695,27,4902,25],[4696,6,4903,4,"data"],[4696,10,4903,8],[4696,12,4903,10,"undefined"],[4697,4,4904,2],[4697,5,4904,3],[4698,2,4905,0],[4699,2,4907,0],[4699,11,4907,9,"createNavigationEntry"],[4699,32,4907,30,"createNavigationEntry"],[4699,33,4907,31,"entry"],[4699,38,4907,36],[4699,40,4907,38],[4700,4,4908,2],[4700,10,4908,8],[4701,6,4909,4,"entryType"],[4701,15,4909,13],[4702,6,4910,4,"name"],[4702,10,4910,8],[4703,6,4911,4,"decodedBodySize"],[4703,21,4911,19],[4704,6,4912,4,"duration"],[4704,14,4912,12],[4705,6,4913,4,"domComplete"],[4705,17,4913,15],[4706,6,4914,4,"encodedBodySize"],[4706,21,4914,19],[4707,6,4915,4,"domContentLoadedEventStart"],[4707,32,4915,30],[4708,6,4916,4,"domContentLoadedEventEnd"],[4708,30,4916,28],[4709,6,4917,4,"domInteractive"],[4709,20,4917,18],[4710,6,4918,4,"loadEventStart"],[4710,20,4918,18],[4711,6,4919,4,"loadEventEnd"],[4711,18,4919,16],[4712,6,4920,4,"redirectCount"],[4712,19,4920,17],[4713,6,4921,4,"startTime"],[4713,15,4921,13],[4714,6,4922,4,"transferSize"],[4714,18,4922,16],[4715,6,4923,4,"type"],[4716,4,4924,2],[4716,5,4924,3],[4716,8,4924,6,"entry"],[4716,13,4924,11],[4718,4,4926,2],[4719,4,4927,2],[4719,8,4927,6,"duration"],[4719,16,4927,14],[4719,21,4927,19],[4719,22,4927,20],[4719,24,4927,22],[4720,6,4928,4],[4720,13,4928,11],[4720,17,4928,15],[4721,4,4929,2],[4722,4,4931,2],[4722,11,4931,9],[4723,6,4932,4,"type"],[4723,10,4932,8],[4723,12,4932,10],[4723,15,4932,13,"entryType"],[4723,24,4932,22],[4723,28,4932,26,"type"],[4723,32,4932,30],[4723,34,4932,32],[4724,6,4933,4,"start"],[4724,11,4933,9],[4724,13,4933,11,"getAbsoluteTime"],[4724,28,4933,26],[4724,29,4933,27,"startTime"],[4724,38,4933,36],[4724,39,4933,37],[4725,6,4934,4,"end"],[4725,9,4934,7],[4725,11,4934,9,"getAbsoluteTime"],[4725,26,4934,24],[4725,27,4934,25,"domComplete"],[4725,38,4934,36],[4725,39,4934,37],[4726,6,4935,4,"name"],[4726,10,4935,8],[4727,6,4936,4,"data"],[4727,10,4936,8],[4727,12,4936,10],[4728,8,4937,6,"size"],[4728,12,4937,10],[4728,14,4937,12,"transferSize"],[4728,26,4937,24],[4729,8,4938,6,"decodedBodySize"],[4729,23,4938,21],[4730,8,4939,6,"encodedBodySize"],[4730,23,4939,21],[4731,8,4940,6,"duration"],[4731,16,4940,14],[4732,8,4941,6,"domInteractive"],[4732,22,4941,20],[4733,8,4942,6,"domContentLoadedEventStart"],[4733,34,4942,32],[4734,8,4943,6,"domContentLoadedEventEnd"],[4734,32,4943,30],[4735,8,4944,6,"loadEventStart"],[4735,22,4944,20],[4736,8,4945,6,"loadEventEnd"],[4736,20,4945,18],[4737,8,4946,6,"domComplete"],[4737,19,4946,17],[4738,8,4947,6,"redirectCount"],[4739,6,4948,4],[4740,4,4949,2],[4740,5,4949,3],[4741,2,4950,0],[4742,2,4952,0],[4742,11,4952,9,"createResourceEntry"],[4742,30,4952,28,"createResourceEntry"],[4742,31,4953,2,"entry"],[4742,36,4953,7],[4742,38,4954,2],[4743,4,4955,2],[4743,10,4955,8],[4744,6,4956,4,"entryType"],[4744,15,4956,13],[4745,6,4957,4,"initiatorType"],[4745,19,4957,17],[4746,6,4958,4,"name"],[4746,10,4958,8],[4747,6,4959,4,"responseEnd"],[4747,17,4959,15],[4748,6,4960,4,"startTime"],[4748,15,4960,13],[4749,6,4961,4,"decodedBodySize"],[4749,21,4961,19],[4750,6,4962,4,"encodedBodySize"],[4750,21,4962,19],[4751,6,4963,4,"responseStatus"],[4751,20,4963,18],[4752,6,4964,4,"transferSize"],[4753,4,4965,2],[4753,5,4965,3],[4753,8,4965,6,"entry"],[4753,13,4965,11],[4755,4,4967,2],[4756,4,4968,2],[4756,8,4968,6],[4756,9,4968,7],[4756,16,4968,14],[4756,18,4968,16],[4756,34,4968,32],[4756,35,4968,33],[4756,36,4968,34,"includes"],[4756,44,4968,42],[4756,45,4968,43,"initiatorType"],[4756,58,4968,56],[4756,59,4968,57],[4756,61,4968,59],[4757,6,4969,4],[4757,13,4969,11],[4757,17,4969,15],[4758,4,4970,2],[4759,4,4972,2],[4759,11,4972,9],[4760,6,4973,4,"type"],[4760,10,4973,8],[4760,12,4973,10],[4760,15,4973,13,"entryType"],[4760,24,4973,22],[4760,28,4973,26,"initiatorType"],[4760,41,4973,39],[4760,43,4973,41],[4761,6,4974,4,"start"],[4761,11,4974,9],[4761,13,4974,11,"getAbsoluteTime"],[4761,28,4974,26],[4761,29,4974,27,"startTime"],[4761,38,4974,36],[4761,39,4974,37],[4762,6,4975,4,"end"],[4762,9,4975,7],[4762,11,4975,9,"getAbsoluteTime"],[4762,26,4975,24],[4762,27,4975,25,"responseEnd"],[4762,38,4975,36],[4762,39,4975,37],[4763,6,4976,4,"name"],[4763,10,4976,8],[4764,6,4977,4,"data"],[4764,10,4977,8],[4764,12,4977,10],[4765,8,4978,6,"size"],[4765,12,4978,10],[4765,14,4978,12,"transferSize"],[4765,26,4978,24],[4766,8,4979,6,"statusCode"],[4766,18,4979,16],[4766,20,4979,18,"responseStatus"],[4766,34,4979,32],[4767,8,4980,6,"decodedBodySize"],[4767,23,4980,21],[4768,8,4981,6,"encodedBodySize"],[4769,6,4982,4],[4770,4,4983,2],[4770,5,4983,3],[4771,2,4984,0],[4773,2,4986,0],[4774,0,4987,0],[4775,0,4988,0],[4776,2,4989,0],[4776,11,4989,9,"getLargestContentfulPaint"],[4776,36,4989,34,"getLargestContentfulPaint"],[4776,37,4989,35,"metric"],[4776,43,4989,41],[4776,45,4989,43],[4777,4,4990,2],[4777,10,4990,8,"lastEntry"],[4777,19,4990,17],[4777,22,4990,20,"metric"],[4777,28,4990,26],[4777,29,4990,27,"entries"],[4777,36,4990,34],[4777,37,4990,35,"metric"],[4777,43,4990,41],[4777,44,4990,42,"entries"],[4777,51,4990,49],[4777,52,4990,50,"length"],[4777,58,4990,56],[4777,61,4990,59],[4777,62,4990,60],[4777,63,4990,61],[4778,4,4991,2],[4778,10,4991,8,"node"],[4778,14,4991,12],[4778,17,4991,15,"lastEntry"],[4778,26,4991,24],[4778,30,4991,28,"lastEntry"],[4778,39,4991,37],[4778,40,4991,38,"element"],[4778,47,4991,45],[4778,50,4991,48],[4778,51,4991,49,"lastEntry"],[4778,60,4991,58],[4778,61,4991,59,"element"],[4778,68,4991,66],[4778,69,4991,67],[4778,72,4991,70,"undefined"],[4778,81,4991,79],[4779,4,4992,2],[4779,11,4992,9,"getWebVital"],[4779,22,4992,20],[4779,23,4992,21,"metric"],[4779,29,4992,27],[4779,31,4992,29],[4779,57,4992,55],[4779,59,4992,57,"node"],[4779,63,4992,61],[4779,64,4992,62],[4780,2,4993,0],[4781,2,4995,0],[4781,11,4995,9,"isLayoutShift"],[4781,24,4995,22,"isLayoutShift"],[4781,25,4995,23,"entry"],[4781,30,4995,28],[4781,32,4995,30],[4782,4,4996,2],[4782,11,4996,10,"entry"],[4782,16,4996,15],[4782,17,4996,18,"sources"],[4782,24,4996,25],[4782,29,4996,30,"undefined"],[4782,38,4996,39],[4783,2,4997,0],[4785,2,4999,0],[4786,0,5000,0],[4787,0,5001,0],[4788,2,5002,0],[4788,11,5002,9,"getCumulativeLayoutShift"],[4788,35,5002,33,"getCumulativeLayoutShift"],[4788,36,5002,34,"metric"],[4788,42,5002,40],[4788,44,5002,42],[4789,4,5003,2],[4789,10,5003,8,"layoutShifts"],[4789,22,5003,20],[4789,25,5003,23],[4789,27,5003,25],[4790,4,5004,2],[4790,10,5004,8,"nodes"],[4790,15,5004,13],[4790,18,5004,16],[4790,20,5004,18],[4791,4,5005,2],[4791,9,5005,7],[4791,15,5005,13,"entry"],[4791,20,5005,18],[4791,24,5005,22,"metric"],[4791,30,5005,28],[4791,31,5005,29,"entries"],[4791,38,5005,36],[4791,40,5005,38],[4792,6,5006,4],[4792,10,5006,8,"isLayoutShift"],[4792,23,5006,21],[4792,24,5006,22,"entry"],[4792,29,5006,27],[4792,30,5006,28],[4792,32,5006,30],[4793,8,5007,6],[4793,14,5007,12,"nodeIds"],[4793,21,5007,19],[4793,24,5007,22],[4793,26,5007,24],[4794,8,5008,6],[4794,13,5008,11],[4794,19,5008,17,"source"],[4794,25,5008,23],[4794,29,5008,27,"entry"],[4794,34,5008,32],[4794,35,5008,33,"sources"],[4794,42,5008,40],[4794,44,5008,42],[4795,10,5009,8],[4795,14,5009,12,"source"],[4795,20,5009,18],[4795,21,5009,19,"node"],[4795,25,5009,23],[4795,27,5009,25],[4796,12,5010,10,"nodes"],[4796,17,5010,15],[4796,18,5010,16,"push"],[4796,22,5010,20],[4796,23,5010,21,"source"],[4796,29,5010,27],[4796,30,5010,28,"node"],[4796,34,5010,32],[4796,35,5010,33],[4797,12,5011,10],[4797,18,5011,16,"nodeId"],[4797,24,5011,22],[4797,27,5011,25,"record"],[4797,33,5011,31],[4797,34,5011,32,"mirror"],[4797,40,5011,38],[4797,41,5011,39,"getId"],[4797,46,5011,44],[4797,47,5011,45,"source"],[4797,53,5011,51],[4797,54,5011,52,"node"],[4797,58,5011,56],[4797,59,5011,57],[4798,12,5012,10],[4798,16,5012,14,"nodeId"],[4798,22,5012,20],[4798,24,5012,22],[4799,14,5013,12,"nodeIds"],[4799,21,5013,19],[4799,22,5013,20,"push"],[4799,26,5013,24],[4799,27,5013,25,"nodeId"],[4799,33,5013,31],[4799,34,5013,32],[4800,12,5014,10],[4801,10,5015,8],[4802,8,5016,6],[4803,8,5017,6,"layoutShifts"],[4803,20,5017,18],[4803,21,5017,19,"push"],[4803,25,5017,23],[4803,26,5017,24],[4804,10,5017,26,"value"],[4804,15,5017,31],[4804,17,5017,33,"entry"],[4804,22,5017,38],[4804,23,5017,39,"value"],[4804,28,5017,44],[4805,10,5017,46,"nodeIds"],[4805,17,5017,53],[4805,19,5017,55,"nodeIds"],[4805,26,5017,62],[4805,27,5017,63,"length"],[4805,33,5017,69],[4805,36,5017,72,"nodeIds"],[4805,43,5017,79],[4805,46,5017,82,"undefined"],[4806,8,5017,92],[4806,9,5017,93],[4806,10,5017,94],[4807,6,5018,4],[4808,4,5019,2],[4809,4,5021,2],[4809,11,5021,9,"getWebVital"],[4809,22,5021,20],[4809,23,5021,21,"metric"],[4809,29,5021,27],[4809,31,5021,29],[4809,56,5021,54],[4809,58,5021,56,"nodes"],[4809,63,5021,61],[4809,65,5021,63,"layoutShifts"],[4809,77,5021,75],[4809,78,5021,76],[4810,2,5022,0],[4812,2,5024,0],[4813,0,5025,0],[4814,0,5026,0],[4815,2,5027,0],[4815,11,5027,9,"getFirstInputDelay"],[4815,29,5027,27,"getFirstInputDelay"],[4815,30,5027,28,"metric"],[4815,36,5027,34],[4815,38,5027,36],[4816,4,5028,2],[4816,10,5028,8,"lastEntry"],[4816,19,5028,17],[4816,22,5028,20,"metric"],[4816,28,5028,26],[4816,29,5028,27,"entries"],[4816,36,5028,34],[4816,37,5028,35,"metric"],[4816,43,5028,41],[4816,44,5028,42,"entries"],[4816,51,5028,49],[4816,52,5028,50,"length"],[4816,58,5028,56],[4816,61,5028,59],[4816,62,5028,60],[4816,63,5028,61],[4817,4,5029,2],[4817,10,5029,8,"node"],[4817,14,5029,12],[4817,17,5029,15,"lastEntry"],[4817,26,5029,24],[4817,30,5029,28,"lastEntry"],[4817,39,5029,37],[4817,40,5029,38,"target"],[4817,46,5029,44],[4817,49,5029,47],[4817,50,5029,48,"lastEntry"],[4817,59,5029,57],[4817,60,5029,58,"target"],[4817,66,5029,64],[4817,67,5029,65],[4817,70,5029,68,"undefined"],[4817,79,5029,77],[4818,4,5030,2],[4818,11,5030,9,"getWebVital"],[4818,22,5030,20],[4818,23,5030,21,"metric"],[4818,29,5030,27],[4818,31,5030,29],[4818,50,5030,48],[4818,52,5030,50,"node"],[4818,56,5030,54],[4818,57,5030,55],[4819,2,5031,0],[4821,2,5033,0],[4822,0,5034,0],[4823,0,5035,0],[4824,2,5036,0],[4824,11,5036,9,"getInteractionToNextPaint"],[4824,36,5036,34,"getInteractionToNextPaint"],[4824,37,5036,35,"metric"],[4824,43,5036,41],[4824,45,5036,43],[4825,4,5037,2],[4825,10,5037,8,"lastEntry"],[4825,19,5037,17],[4825,22,5037,20,"metric"],[4825,28,5037,26],[4825,29,5037,27,"entries"],[4825,36,5037,34],[4825,37,5037,35,"metric"],[4825,43,5037,41],[4825,44,5037,42,"entries"],[4825,51,5037,49],[4825,52,5037,50,"length"],[4825,58,5037,56],[4825,61,5037,59],[4825,62,5037,60],[4825,63,5037,61],[4826,4,5038,2],[4826,10,5038,8,"node"],[4826,14,5038,12],[4826,17,5038,15,"lastEntry"],[4826,26,5038,24],[4826,30,5038,28,"lastEntry"],[4826,39,5038,37],[4826,40,5038,38,"target"],[4826,46,5038,44],[4826,49,5038,47],[4826,50,5038,48,"lastEntry"],[4826,59,5038,57],[4826,60,5038,58,"target"],[4826,66,5038,64],[4826,67,5038,65],[4826,70,5038,68,"undefined"],[4826,79,5038,77],[4827,4,5039,2],[4827,11,5039,9,"getWebVital"],[4827,22,5039,20],[4827,23,5039,21,"metric"],[4827,29,5039,27],[4827,31,5039,29],[4827,58,5039,56],[4827,60,5039,58,"node"],[4827,64,5039,62],[4827,65,5039,63],[4828,2,5040,0],[4830,2,5042,0],[4831,0,5043,0],[4832,0,5044,0],[4833,2,5045,0],[4833,11,5045,9,"getWebVital"],[4833,22,5045,20,"getWebVital"],[4833,23,5046,2,"metric"],[4833,29,5046,8],[4833,31,5047,2,"name"],[4833,35,5047,6],[4833,37,5048,2,"nodes"],[4833,42,5048,7],[4833,44,5049,2,"attributions"],[4833,56,5049,14],[4833,58,5050,2],[4834,4,5051,2],[4834,10,5051,8,"value"],[4834,15,5051,13],[4834,18,5051,16,"metric"],[4834,24,5051,22],[4834,25,5051,23,"value"],[4834,30,5051,28],[4835,4,5052,2],[4835,10,5052,8,"rating"],[4835,16,5052,14],[4835,19,5052,17,"metric"],[4835,25,5052,23],[4835,26,5052,24,"rating"],[4835,32,5052,30],[4836,4,5054,2],[4836,10,5054,8,"end"],[4836,13,5054,11],[4836,16,5054,14,"getAbsoluteTime"],[4836,31,5054,29],[4836,32,5054,30,"value"],[4836,37,5054,35],[4836,38,5054,36],[4837,4,5056,2],[4837,11,5056,9],[4838,6,5057,4,"type"],[4838,10,5057,8],[4838,12,5057,10],[4838,23,5057,21],[4839,6,5058,4,"name"],[4839,10,5058,8],[4840,6,5059,4,"start"],[4840,11,5059,9],[4840,13,5059,11,"end"],[4840,16,5059,14],[4841,6,5060,4,"end"],[4841,9,5060,7],[4842,6,5061,4,"data"],[4842,10,5061,8],[4842,12,5061,10],[4843,8,5062,6,"value"],[4843,13,5062,11],[4844,8,5063,6,"size"],[4844,12,5063,10],[4844,14,5063,12,"value"],[4844,19,5063,17],[4845,8,5064,6,"rating"],[4845,14,5064,12],[4846,8,5065,6,"nodeIds"],[4846,15,5065,13],[4846,17,5065,15,"nodes"],[4846,22,5065,20],[4846,25,5065,23,"nodes"],[4846,30,5065,28],[4846,31,5065,29,"map"],[4846,34,5065,32],[4846,35,5065,33,"node"],[4846,39,5065,37],[4846,43,5065,41,"record"],[4846,49,5065,47],[4846,50,5065,48,"mirror"],[4846,56,5065,54],[4846,57,5065,55,"getId"],[4846,62,5065,60],[4846,63,5065,61,"node"],[4846,67,5065,65],[4846,68,5065,66],[4846,69,5065,67],[4846,72,5065,70,"undefined"],[4846,81,5065,79],[4847,8,5066,6,"attributions"],[4848,6,5067,4],[4849,4,5068,2],[4849,5,5068,3],[4850,2,5069,0],[4852,2,5071,0],[4853,0,5072,0],[4854,0,5073,0],[4855,0,5074,0],[4856,2,5075,0],[4856,11,5075,9,"setupPerformanceObserver"],[4856,35,5075,33,"setupPerformanceObserver"],[4856,36,5075,34,"replay"],[4856,42,5075,40],[4856,44,5075,42],[4857,4,5076,2],[4857,13,5076,11,"addPerformanceEntry"],[4857,32,5076,30,"addPerformanceEntry"],[4857,33,5076,31,"entry"],[4857,38,5076,36],[4857,40,5076,38],[4858,6,5077,4],[4859,6,5078,4],[4859,10,5078,8],[4859,11,5078,9,"replay"],[4859,17,5078,15],[4859,18,5078,16,"performanceEntries"],[4859,36,5078,34],[4859,37,5078,35,"includes"],[4859,45,5078,43],[4859,46,5078,44,"entry"],[4859,51,5078,49],[4859,52,5078,50],[4859,54,5078,52],[4860,8,5079,6,"replay"],[4860,14,5079,12],[4860,15,5079,13,"performanceEntries"],[4860,33,5079,31],[4860,34,5079,32,"push"],[4860,38,5079,36],[4860,39,5079,37,"entry"],[4860,44,5079,42],[4860,45,5079,43],[4861,6,5080,4],[4862,4,5081,2],[4863,4,5083,2],[4863,13,5083,11,"onEntries"],[4863,22,5083,20,"onEntries"],[4863,23,5083,21],[4864,6,5083,23,"entries"],[4865,4,5083,31],[4865,5,5083,32],[4865,7,5083,34],[4866,6,5084,4,"entries"],[4866,13,5084,11],[4866,14,5084,12,"forEach"],[4866,21,5084,19],[4866,22,5084,20,"addPerformanceEntry"],[4866,41,5084,39],[4866,42,5084,40],[4867,4,5085,2],[4868,4,5087,2],[4868,10,5087,8,"clearCallbacks"],[4868,24,5087,22],[4868,27,5087,25],[4868,29,5087,27],[4869,4,5089,3],[4869,5,5089,4],[4869,17,5089,16],[4869,19,5089,18],[4869,26,5089,25],[4869,28,5089,27],[4869,38,5089,37],[4869,39,5089,38],[4869,40,5089,41,"forEach"],[4869,47,5089,48],[4869,48,5089,49,"type"],[4869,52,5089,53],[4869,56,5089,57],[4870,6,5090,4,"clearCallbacks"],[4870,20,5090,18],[4870,21,5090,19,"push"],[4870,25,5090,23],[4870,26,5090,24],[4870,30,5090,24,"addPerformanceInstrumentationHandler"],[4870,80,5090,60],[4870,82,5090,61,"type"],[4870,86,5090,65],[4870,88,5090,67,"onEntries"],[4870,97,5090,76],[4870,98,5090,77],[4870,99,5090,78],[4871,4,5091,2],[4871,5,5091,3],[4871,6,5091,4],[4872,4,5093,2,"clearCallbacks"],[4872,18,5093,16],[4872,19,5093,17,"push"],[4872,23,5093,21],[4872,24,5094,4],[4872,28,5094,4,"addLcpInstrumentationHandler"],[4872,70,5094,32],[4872,72,5094,33,"webVitalHandler"],[4872,87,5094,48],[4872,88,5094,49,"getLargestContentfulPaint"],[4872,113,5094,74],[4872,115,5094,76,"replay"],[4872,121,5094,82],[4872,122,5094,83],[4872,123,5094,84],[4872,125,5095,4],[4872,129,5095,4,"addClsInstrumentationHandler"],[4872,171,5095,32],[4872,173,5095,33,"webVitalHandler"],[4872,188,5095,48],[4872,189,5095,49,"getCumulativeLayoutShift"],[4872,213,5095,73],[4872,215,5095,75,"replay"],[4872,221,5095,81],[4872,222,5095,82],[4872,223,5095,83],[4872,225,5096,4],[4872,229,5096,4,"addFidInstrumentationHandler"],[4872,271,5096,32],[4872,273,5096,33,"webVitalHandler"],[4872,288,5096,48],[4872,289,5096,49,"getFirstInputDelay"],[4872,307,5096,67],[4872,309,5096,69,"replay"],[4872,315,5096,75],[4872,316,5096,76],[4872,317,5096,77],[4872,319,5097,4],[4872,323,5097,4,"addInpInstrumentationHandler"],[4872,365,5097,32],[4872,367,5097,33,"webVitalHandler"],[4872,382,5097,48],[4872,383,5097,49,"getInteractionToNextPaint"],[4872,408,5097,74],[4872,410,5097,76,"replay"],[4872,416,5097,82],[4872,417,5097,83],[4872,418,5098,2],[4872,419,5098,3],[4874,4,5100,2],[4875,4,5101,2],[4875,11,5101,9],[4875,17,5101,15],[4876,6,5102,4,"clearCallbacks"],[4876,20,5102,18],[4876,21,5102,19,"forEach"],[4876,28,5102,26],[4876,29,5102,27,"clearCallback"],[4876,42,5102,40],[4876,46,5102,44,"clearCallback"],[4876,59,5102,57],[4876,60,5102,58],[4876,61,5102,59],[4876,62,5102,60],[4877,4,5103,2],[4877,5,5103,3],[4878,2,5104,0],[4880,2,5106,0],[4881,0,5107,0],[4882,0,5108,0],[4883,0,5109,0],[4884,0,5110,0],[4885,2,5111,0],[4885,8,5111,6,"DEBUG_BUILD"],[4885,19,5111,17],[4885,22,5111,21],[4885,29,5111,28,"__SENTRY_DEBUG__"],[4885,45,5111,44],[4885,50,5111,49],[4885,61,5111,60],[4885,65,5111,64,"__SENTRY_DEBUG__"],[4885,81,5111,81],[4886,2,5113,0],[4886,8,5113,6,"r"],[4886,9,5113,7],[4886,12,5113,10],[4886,10208,5113,10206],[4887,2,5115,0],[4887,11,5115,9,"e"],[4887,12,5115,10,"e"],[4887,13,5115,10],[4887,15,5115,12],[4888,4,5115,13],[4888,10,5115,19,"e"],[4888,11,5115,20],[4888,14,5115,21],[4888,18,5115,25,"Blob"],[4888,22,5115,29],[4888,23,5115,30],[4888,24,5115,31,"r"],[4888,25,5115,32],[4888,26,5115,33],[4888,27,5115,34],[4889,4,5115,35],[4889,11,5115,42,"URL"],[4889,14,5115,45],[4889,15,5115,46,"createObjectURL"],[4889,30,5115,61],[4889,31,5115,62,"e"],[4889,32,5115,63],[4889,33,5115,64],[4890,2,5115,64],[4891,2,5117,0],[4891,8,5117,6,"CONSOLE_LEVELS"],[4891,22,5117,20],[4891,25,5117,23],[4891,26,5117,24],[4891,32,5117,30],[4891,34,5117,32],[4891,40,5117,38],[4891,42,5117,40],[4891,49,5117,47],[4891,51,5117,49],[4891,56,5117,54],[4891,57,5117,55],[4892,2,5118,0],[4892,8,5118,6,"PREFIX"],[4892,14,5118,12],[4892,17,5118,15],[4892,28,5118,26],[4893,2,5120,0],[4893,11,5120,9,"_addBreadcrumb"],[4893,25,5120,23,"_addBreadcrumb"],[4893,26,5120,24,"message"],[4893,33,5120,31],[4893,35,5120,33,"level"],[4893,40,5120,38],[4893,43,5120,41],[4893,49,5120,47],[4893,51,5120,49],[4894,4,5121,2],[4894,8,5121,2,"addBreadcrumb"],[4894,27,5121,15],[4894,29,5122,4],[4895,6,5123,6,"category"],[4895,14,5123,14],[4895,16,5123,16],[4895,25,5123,25],[4896,6,5124,6,"data"],[4896,10,5124,10],[4896,12,5124,12],[4897,8,5125,8,"logger"],[4897,14,5125,14],[4897,16,5125,16],[4898,6,5126,6],[4898,7,5126,7],[4899,6,5127,6,"level"],[4899,11,5127,11],[4900,6,5128,6,"message"],[4900,13,5128,13],[4900,15,5128,15],[4900,18,5128,18,"PREFIX"],[4900,24,5128,24],[4900,27,5128,27,"message"],[4900,34,5128,34],[4901,4,5129,4],[4901,5,5129,5],[4901,7,5130,4],[4902,6,5130,6,"level"],[4903,4,5130,12],[4903,5,5131,2],[4903,6,5131,3],[4904,2,5132,0],[4905,2,5134,0],[4905,11,5134,9,"makeReplayLogger"],[4905,27,5134,25,"makeReplayLogger"],[4905,28,5134,25],[4905,30,5134,28],[4906,4,5135,2],[4906,8,5135,6,"_capture"],[4906,16,5135,14],[4906,19,5135,17],[4906,24,5135,22],[4907,4,5136,2],[4907,8,5136,6,"_trace"],[4907,14,5136,12],[4907,17,5136,15],[4907,22,5136,20],[4908,4,5138,2],[4908,10,5138,8,"_logger"],[4908,17,5138,15],[4908,20,5138,18],[4909,6,5139,4,"exception"],[4909,15,5139,13],[4909,17,5139,15,"exception"],[4909,18,5139,15],[4909,23,5139,21,"undefined"],[4909,32,5139,30],[4910,6,5140,4,"infoTick"],[4910,14,5140,12],[4910,16,5140,14,"infoTick"],[4910,17,5140,14],[4910,22,5140,20,"undefined"],[4910,31,5140,29],[4911,6,5141,4,"setConfig"],[4911,15,5141,13],[4911,17,5141,16,"opts"],[4911,21,5141,20],[4911,25,5141,25],[4912,8,5142,6,"_capture"],[4912,16,5142,14],[4912,19,5142,17,"opts"],[4912,23,5142,21],[4912,24,5142,22,"captureExceptions"],[4912,41,5142,39],[4913,8,5143,6,"_trace"],[4913,14,5143,12],[4913,17,5143,15,"opts"],[4913,21,5143,19],[4913,22,5143,20,"traceInternals"],[4913,36,5143,34],[4914,6,5144,4],[4915,4,5145,2],[4915,5,5145,3],[4916,4,5147,2],[4916,8,5147,6,"DEBUG_BUILD"],[4916,19,5147,17],[4916,21,5147,19],[4917,6,5148,4,"CONSOLE_LEVELS"],[4917,20,5148,18],[4917,21,5148,19,"forEach"],[4917,28,5148,26],[4917,29,5148,27,"name"],[4917,33,5148,31],[4917,37,5148,35],[4918,8,5149,6,"_logger"],[4918,15,5149,13],[4918,16,5149,14,"name"],[4918,20,5149,18],[4918,21,5149,19],[4918,24,5149,22],[4918,25,5149,23],[4918,28,5149,26,"args"],[4918,32,5149,30],[4918,37,5149,35],[4919,10,5150,8,"logger$1"],[4919,22,5150,16],[4919,23,5150,17,"name"],[4919,27,5150,21],[4919,28,5150,22],[4919,29,5150,23,"PREFIX"],[4919,35,5150,29],[4919,37,5150,31],[4919,40,5150,34,"args"],[4919,44,5150,38],[4919,45,5150,39],[4920,10,5151,8],[4920,14,5151,12,"_trace"],[4920,20,5151,18],[4920,22,5151,20],[4921,12,5152,10,"_addBreadcrumb"],[4921,26,5152,24],[4921,27,5152,25,"args"],[4921,31,5152,29],[4921,32,5152,30,"join"],[4921,36,5152,34],[4921,37,5152,35],[4921,39,5152,37],[4921,40,5152,38],[4921,42,5152,40],[4921,46,5152,40,"severityLevelFromString"],[4921,75,5152,63],[4921,77,5152,64,"name"],[4921,81,5152,68],[4921,82,5152,69],[4921,83,5152,70],[4922,10,5153,8],[4923,8,5154,6],[4923,9,5154,7],[4924,6,5155,4],[4924,7,5155,5],[4924,8,5155,6],[4925,6,5157,4,"_logger"],[4925,13,5157,11],[4925,14,5157,12,"exception"],[4925,23,5157,21],[4925,26,5157,24],[4925,27,5157,25,"error"],[4925,32,5157,30],[4925,34,5157,32],[4925,37,5157,35,"message"],[4925,44,5157,42],[4925,49,5157,47],[4926,8,5158,6],[4926,12,5158,10,"message"],[4926,19,5158,17],[4926,20,5158,18,"length"],[4926,26,5158,24],[4926,30,5158,28,"_logger"],[4926,37,5158,35],[4926,38,5158,36,"error"],[4926,43,5158,41],[4926,45,5158,43],[4927,10,5159,8,"_logger"],[4927,17,5159,15],[4927,18,5159,16,"error"],[4927,23,5159,21],[4927,24,5159,22],[4927,27,5159,25,"message"],[4927,34,5159,32],[4927,35,5159,33],[4928,8,5160,6],[4929,8,5162,6,"logger$1"],[4929,20,5162,14],[4929,21,5162,15,"error"],[4929,26,5162,20],[4929,27,5162,21,"PREFIX"],[4929,33,5162,27],[4929,35,5162,29,"error"],[4929,40,5162,34],[4929,41,5162,35],[4930,8,5164,6],[4930,12,5164,10,"_capture"],[4930,20,5164,18],[4930,22,5164,20],[4931,10,5165,8],[4931,14,5165,8,"captureException"],[4931,36,5165,24],[4931,38,5165,25,"error"],[4931,43,5165,30],[4931,44,5165,31],[4932,8,5166,6],[4932,9,5166,7],[4932,15,5166,13],[4932,19,5166,17,"_trace"],[4932,25,5166,23],[4932,27,5166,25],[4933,10,5167,8],[4934,10,5168,8],[4935,10,5169,8,"_addBreadcrumb"],[4935,24,5169,22],[4935,25,5169,23,"error"],[4935,30,5169,28],[4935,32,5169,30],[4935,39,5169,37],[4935,40,5169,38],[4936,8,5170,6],[4937,6,5171,4],[4937,7,5171,5],[4938,6,5173,4,"_logger"],[4938,13,5173,11],[4938,14,5173,12,"infoTick"],[4938,22,5173,20],[4938,25,5173,23],[4938,26,5173,24],[4938,29,5173,27,"args"],[4938,33,5173,31],[4938,38,5173,36],[4939,8,5174,6,"logger$1"],[4939,20,5174,14],[4939,21,5174,15,"info"],[4939,25,5174,19],[4939,26,5174,20,"PREFIX"],[4939,32,5174,26],[4939,34,5174,28],[4939,37,5174,31,"args"],[4939,41,5174,35],[4939,42,5174,36],[4940,8,5175,6],[4940,12,5175,10,"_trace"],[4940,18,5175,16],[4940,20,5175,18],[4941,10,5176,8],[4942,10,5177,8],[4943,10,5178,8,"setTimeout"],[4943,20,5178,18],[4943,21,5178,19],[4943,27,5178,25,"_addBreadcrumb"],[4943,41,5178,39],[4943,42,5178,40,"args"],[4943,46,5178,44],[4943,47,5178,45],[4943,48,5178,46],[4943,49,5178,47],[4943,50,5178,48],[4943,52,5178,50],[4943,53,5178,51],[4943,54,5178,52],[4944,8,5179,6],[4945,6,5180,4],[4945,7,5180,5],[4946,4,5181,2],[4946,5,5181,3],[4946,11,5181,9],[4947,6,5182,4,"CONSOLE_LEVELS"],[4947,20,5182,18],[4947,21,5182,19,"forEach"],[4947,28,5182,26],[4947,29,5182,27,"name"],[4947,33,5182,31],[4947,37,5182,35],[4948,8,5183,6,"_logger"],[4948,15,5183,13],[4948,16,5183,14,"name"],[4948,20,5183,18],[4948,21,5183,19],[4948,24,5183,22],[4948,30,5183,28,"undefined"],[4948,39,5183,37],[4949,6,5184,4],[4949,7,5184,5],[4949,8,5184,6],[4950,4,5185,2],[4951,4,5187,2],[4951,11,5187,9,"_logger"],[4951,18,5187,16],[4952,2,5188,0],[4953,2,5190,0],[4953,8,5190,6,"logger"],[4953,14,5190,12],[4953,17,5190,15,"makeReplayLogger"],[4953,33,5190,31],[4953,34,5190,32],[4953,35,5190,33],[4955,2,5192,0],[4956,2,5193,0],[4956,8,5193,6,"EventBufferSizeExceededError"],[4956,36,5193,34],[4956,45,5193,43,"Error"],[4956,50,5193,48],[4956,51,5193,49],[4957,4,5194,3,"constructor"],[4957,15,5194,14,"constructor"],[4957,16,5194,14],[4957,18,5194,17],[4958,6,5195,4],[4958,11,5195,9],[4958,12,5195,10],[4958,53,5195,51,"REPLAY_MAX_EVENT_BUFFER_SIZE"],[4958,81,5195,79],[4958,84,5195,82],[4958,85,5195,83],[4959,4,5196,2],[4960,2,5197,0],[4962,2,5199,0],[4963,0,5200,0],[4964,0,5201,0],[4965,0,5202,0],[4966,2,5203,0],[4966,8,5203,6,"EventBufferArray"],[4966,24,5203,22],[4966,25,5203,24],[4967,4,5204,2],[4969,4,5206,2],[4971,4,5208,2],[4973,4,5210,3,"constructor"],[4973,15,5210,14,"constructor"],[4973,16,5210,14],[4973,18,5210,17],[4974,6,5211,4],[4974,10,5211,8],[4974,11,5211,9,"events"],[4974,17,5211,15],[4974,20,5211,18],[4974,22,5211,20],[4975,6,5212,4],[4975,10,5212,8],[4975,11,5212,9,"_totalSize"],[4975,21,5212,19],[4975,24,5212,22],[4975,25,5212,23],[4976,6,5213,4],[4976,10,5213,8],[4976,11,5213,9,"hasCheckout"],[4976,22,5213,20],[4976,25,5213,23],[4976,30,5213,28],[4977,6,5214,4],[4977,10,5214,8],[4977,11,5214,9,"waitForCheckout"],[4977,26,5214,24],[4977,29,5214,27],[4977,34,5214,32],[4978,4,5215,2],[4980,4,5217,2],[4981,4,5218,3],[4981,8,5218,7,"hasEvents"],[4981,17,5218,16,"hasEvents"],[4981,18,5218,16],[4981,20,5218,19],[4982,6,5219,4],[4982,13,5219,11],[4982,17,5219,15],[4982,18,5219,16,"events"],[4982,24,5219,22],[4982,25,5219,23,"length"],[4982,31,5219,29],[4982,34,5219,32],[4982,35,5219,33],[4983,4,5220,2],[4985,4,5222,2],[4986,4,5223,3],[4986,8,5223,7,"type"],[4986,12,5223,11,"type"],[4986,13,5223,11],[4986,15,5223,14],[4987,6,5224,4],[4987,13,5224,11],[4987,19,5224,17],[4988,4,5225,2],[4990,4,5227,2],[4991,4,5228,3,"destroy"],[4991,11,5228,10,"destroy"],[4991,12,5228,10],[4991,14,5228,13],[4992,6,5229,4],[4992,10,5229,8],[4992,11,5229,9,"events"],[4992,17,5229,15],[4992,20,5229,18],[4992,22,5229,20],[4993,4,5230,2],[4995,4,5232,2],[4996,4,5233,3],[4996,10,5233,9,"addEvent"],[4996,18,5233,17,"addEvent"],[4996,19,5233,18,"event"],[4996,24,5233,23],[4996,26,5233,25],[4997,6,5234,4],[4997,12,5234,10,"eventSize"],[4997,21,5234,19],[4997,24,5234,22,"JSON"],[4997,28,5234,26],[4997,29,5234,27,"stringify"],[4997,38,5234,36],[4997,39,5234,37,"event"],[4997,44,5234,42],[4997,45,5234,43],[4997,46,5234,44,"length"],[4997,52,5234,50],[4998,6,5235,4],[4998,10,5235,8],[4998,11,5235,9,"_totalSize"],[4998,21,5235,19],[4998,25,5235,23,"eventSize"],[4998,34,5235,32],[4999,6,5236,4],[4999,10,5236,8],[4999,14,5236,12],[4999,15,5236,13,"_totalSize"],[4999,25,5236,23],[4999,28,5236,26,"REPLAY_MAX_EVENT_BUFFER_SIZE"],[4999,56,5236,54],[4999,58,5236,56],[5000,8,5237,6],[5000,14,5237,12],[5000,18,5237,16,"EventBufferSizeExceededError"],[5000,46,5237,44],[5000,47,5237,45],[5000,48,5237,46],[5001,6,5238,4],[5002,6,5240,4],[5002,10,5240,8],[5002,11,5240,9,"events"],[5002,17,5240,15],[5002,18,5240,16,"push"],[5002,22,5240,20],[5002,23,5240,21,"event"],[5002,28,5240,26],[5002,29,5240,27],[5003,4,5241,2],[5005,4,5243,2],[5006,4,5244,3,"finish"],[5006,10,5244,9,"finish"],[5006,11,5244,9],[5006,13,5244,12],[5007,6,5245,4],[5007,13,5245,11],[5007,17,5245,15,"Promise"],[5007,24,5245,22],[5007,25,5245,23,"resolve"],[5007,32,5245,30],[5007,36,5245,34],[5008,8,5246,6],[5009,8,5247,6],[5010,8,5248,6],[5011,8,5249,6],[5011,14,5249,12,"eventsRet"],[5011,23,5249,21],[5011,26,5249,24],[5011,30,5249,28],[5011,31,5249,29,"events"],[5011,37,5249,35],[5012,8,5250,6],[5012,12,5250,10],[5012,13,5250,11,"clear"],[5012,18,5250,16],[5012,19,5250,17],[5012,20,5250,18],[5013,8,5251,6,"resolve"],[5013,15,5251,13],[5013,16,5251,14,"JSON"],[5013,20,5251,18],[5013,21,5251,19,"stringify"],[5013,30,5251,28],[5013,31,5251,29,"eventsRet"],[5013,40,5251,38],[5013,41,5251,39],[5013,42,5251,40],[5014,6,5252,4],[5014,7,5252,5],[5014,8,5252,6],[5015,4,5253,2],[5017,4,5255,2],[5018,4,5256,3,"clear"],[5018,9,5256,8,"clear"],[5018,10,5256,8],[5018,12,5256,11],[5019,6,5257,4],[5019,10,5257,8],[5019,11,5257,9,"events"],[5019,17,5257,15],[5019,20,5257,18],[5019,22,5257,20],[5020,6,5258,4],[5020,10,5258,8],[5020,11,5258,9,"_totalSize"],[5020,21,5258,19],[5020,24,5258,22],[5020,25,5258,23],[5021,6,5259,4],[5021,10,5259,8],[5021,11,5259,9,"hasCheckout"],[5021,22,5259,20],[5021,25,5259,23],[5021,30,5259,28],[5022,4,5260,2],[5024,4,5262,2],[5025,4,5263,3,"getEarliestTimestamp"],[5025,24,5263,23,"getEarliestTimestamp"],[5025,25,5263,23],[5025,27,5263,26],[5026,6,5264,4],[5026,12,5264,10,"timestamp"],[5026,21,5264,19],[5026,24,5264,22],[5026,28,5264,26],[5026,29,5264,27,"events"],[5026,35,5264,33],[5026,36,5264,34,"map"],[5026,39,5264,37],[5026,40,5264,38,"event"],[5026,45,5264,43],[5026,49,5264,47,"event"],[5026,54,5264,52],[5026,55,5264,53,"timestamp"],[5026,64,5264,62],[5026,65,5264,63],[5026,66,5264,64,"sort"],[5026,70,5264,68],[5026,71,5264,69],[5026,72,5264,70],[5026,73,5264,71],[5026,74,5264,72],[5026,75,5264,73],[5027,6,5266,4],[5027,10,5266,8],[5027,11,5266,9,"timestamp"],[5027,20,5266,18],[5027,22,5266,20],[5028,8,5267,6],[5028,15,5267,13],[5028,19,5267,17],[5029,6,5268,4],[5030,6,5270,4],[5030,13,5270,11,"timestampToMs"],[5030,26,5270,24],[5030,27,5270,25,"timestamp"],[5030,36,5270,34],[5030,37,5270,35],[5031,4,5271,2],[5032,2,5272,0],[5034,2,5274,0],[5035,0,5275,0],[5036,0,5276,0],[5037,0,5277,0],[5038,2,5278,0],[5038,8,5278,6,"WorkerHandler"],[5038,21,5278,19],[5038,22,5278,20],[5039,4,5280,3,"constructor"],[5039,15,5280,14,"constructor"],[5039,16,5280,15,"worker"],[5039,22,5280,21],[5039,24,5280,23],[5040,6,5281,4],[5040,10,5281,8],[5040,11,5281,9,"_worker"],[5040,18,5281,16],[5040,21,5281,19,"worker"],[5040,27,5281,25],[5041,6,5282,4],[5041,10,5282,8],[5041,11,5282,9,"_id"],[5041,14,5282,12],[5041,17,5282,15],[5041,18,5282,16],[5042,4,5283,2],[5044,4,5285,2],[5045,0,5286,0],[5046,0,5287,0],[5047,0,5288,0],[5048,4,5289,3,"ensureReady"],[5048,15,5289,14,"ensureReady"],[5048,16,5289,14],[5048,18,5289,17],[5049,6,5290,4],[5050,6,5291,4],[5050,10,5291,8],[5050,14,5291,12],[5050,15,5291,13,"_ensureReadyPromise"],[5050,34,5291,32],[5050,36,5291,34],[5051,8,5292,6],[5051,15,5292,13],[5051,19,5292,17],[5051,20,5292,18,"_ensureReadyPromise"],[5051,39,5292,37],[5052,6,5293,4],[5053,6,5295,4],[5053,10,5295,8],[5053,11,5295,9,"_ensureReadyPromise"],[5053,30,5295,28],[5053,33,5295,31],[5053,37,5295,35,"Promise"],[5053,44,5295,42],[5053,45,5295,43],[5053,46,5295,44,"resolve"],[5053,53,5295,51],[5053,55,5295,53,"reject"],[5053,61,5295,59],[5053,66,5295,64],[5054,8,5296,6],[5054,12,5296,10],[5054,13,5296,11,"_worker"],[5054,20,5296,18],[5054,21,5296,19,"addEventListener"],[5054,37,5296,35],[5054,38,5297,8],[5054,47,5297,17],[5054,49,5298,8],[5054,50,5298,9],[5055,10,5298,11,"data"],[5056,8,5298,16],[5056,9,5298,17],[5056,14,5298,22],[5057,10,5299,10],[5057,14,5299,15,"data"],[5057,18,5299,19],[5057,19,5299,22,"success"],[5057,26,5299,29],[5057,28,5299,31],[5058,12,5300,12,"resolve"],[5058,19,5300,19],[5058,20,5300,20],[5058,21,5300,21],[5059,10,5301,10],[5059,11,5301,11],[5059,17,5301,17],[5060,12,5302,12,"reject"],[5060,18,5302,18],[5060,19,5302,19],[5060,20,5302,20],[5061,10,5303,10],[5062,8,5304,8],[5062,9,5304,9],[5062,11,5305,8],[5063,10,5305,10,"once"],[5063,14,5305,14],[5063,16,5305,16],[5064,8,5305,21],[5064,9,5306,6],[5064,10,5306,7],[5065,8,5308,6],[5065,12,5308,10],[5065,13,5308,11,"_worker"],[5065,20,5308,18],[5065,21,5308,19,"addEventListener"],[5065,37,5308,35],[5065,38,5309,8],[5065,45,5309,15],[5065,47,5310,8,"error"],[5065,52,5310,13],[5065,56,5310,17],[5066,10,5311,10,"reject"],[5066,16,5311,16],[5066,17,5311,17,"error"],[5066,22,5311,22],[5066,23,5311,23],[5067,8,5312,8],[5067,9,5312,9],[5067,11,5313,8],[5068,10,5313,10,"once"],[5068,14,5313,14],[5068,16,5313,16],[5069,8,5313,21],[5069,9,5314,6],[5069,10,5314,7],[5070,6,5315,4],[5070,7,5315,5],[5070,8,5315,6],[5071,6,5317,4],[5071,13,5317,11],[5071,17,5317,15],[5071,18,5317,16,"_ensureReadyPromise"],[5071,37,5317,35],[5072,4,5318,2],[5074,4,5320,2],[5075,0,5321,0],[5076,0,5322,0],[5077,4,5323,3,"destroy"],[5077,11,5323,10,"destroy"],[5077,12,5323,10],[5077,14,5323,13],[5078,6,5324,4,"DEBUG_BUILD"],[5078,17,5324,15],[5078,21,5324,19,"logger"],[5078,27,5324,25],[5078,28,5324,26,"info"],[5078,32,5324,30],[5078,33,5324,31],[5078,64,5324,62],[5078,65,5324,63],[5079,6,5325,4],[5079,10,5325,8],[5079,11,5325,9,"_worker"],[5079,18,5325,16],[5079,19,5325,17,"terminate"],[5079,28,5325,26],[5079,29,5325,27],[5079,30,5325,28],[5080,4,5326,2],[5082,4,5328,2],[5083,0,5329,0],[5084,0,5330,0],[5085,4,5331,3,"postMessage"],[5085,15,5331,14,"postMessage"],[5085,16,5331,15,"method"],[5085,22,5331,21],[5085,24,5331,23,"arg"],[5085,27,5331,26],[5085,29,5331,28],[5086,6,5332,4],[5086,12,5332,10,"id"],[5086,14,5332,12],[5086,17,5332,15],[5086,21,5332,19],[5086,22,5332,20,"_getAndIncrementId"],[5086,40,5332,38],[5086,41,5332,39],[5086,42,5332,40],[5087,6,5334,4],[5087,13,5334,11],[5087,17,5334,15,"Promise"],[5087,24,5334,22],[5087,25,5334,23],[5087,26,5334,24,"resolve"],[5087,33,5334,31],[5087,35,5334,33,"reject"],[5087,41,5334,39],[5087,46,5334,44],[5088,8,5335,6],[5088,14,5335,12,"listener"],[5088,22,5335,20],[5088,25,5335,23,"listener"],[5088,26,5335,24],[5089,10,5335,26,"data"],[5090,8,5335,31],[5090,9,5335,32],[5090,14,5335,37],[5091,10,5336,8],[5091,16,5336,14,"response"],[5091,24,5336,22],[5091,27,5336,25,"data"],[5091,31,5336,29],[5092,10,5337,8],[5092,14,5337,12,"response"],[5092,22,5337,20],[5092,23,5337,21,"method"],[5092,29,5337,27],[5092,34,5337,32,"method"],[5092,40,5337,38],[5092,42,5337,40],[5093,12,5338,10],[5094,10,5339,8],[5096,10,5341,8],[5097,10,5342,8],[5098,10,5343,8],[5098,14,5343,12,"response"],[5098,22,5343,20],[5098,23,5343,21,"id"],[5098,25,5343,23],[5098,30,5343,28,"id"],[5098,32,5343,30],[5098,34,5343,32],[5099,12,5344,10],[5100,10,5345,8],[5102,10,5347,8],[5103,10,5348,8],[5103,14,5348,12],[5103,15,5348,13,"_worker"],[5103,22,5348,20],[5103,23,5348,21,"removeEventListener"],[5103,42,5348,40],[5103,43,5348,41],[5103,52,5348,50],[5103,54,5348,52,"listener"],[5103,62,5348,60],[5103,63,5348,61],[5104,10,5350,8],[5104,14,5350,12],[5104,15,5350,13,"response"],[5104,23,5350,21],[5104,24,5350,22,"success"],[5104,31,5350,29],[5104,33,5350,31],[5105,12,5351,10],[5106,12,5352,10,"DEBUG_BUILD"],[5106,23,5352,21],[5106,27,5352,25,"logger"],[5106,33,5352,31],[5106,34,5352,32,"error"],[5106,39,5352,37],[5106,40,5352,38],[5106,71,5352,69],[5106,73,5352,71,"response"],[5106,81,5352,79],[5106,82,5352,80,"response"],[5106,90,5352,88],[5106,91,5352,89],[5107,12,5354,10,"reject"],[5107,18,5354,16],[5107,19,5354,17],[5107,23,5354,21,"Error"],[5107,28,5354,26],[5107,29,5354,27],[5107,58,5354,56],[5107,59,5354,57],[5107,60,5354,58],[5108,12,5355,10],[5109,10,5356,8],[5110,10,5358,8,"resolve"],[5110,17,5358,15],[5110,18,5358,16,"response"],[5110,26,5358,24],[5110,27,5358,25,"response"],[5110,35,5358,34],[5110,36,5358,35],[5111,8,5359,6],[5111,9,5359,7],[5113,8,5361,6],[5114,8,5362,6],[5115,8,5363,6],[5115,12,5363,10],[5115,13,5363,11,"_worker"],[5115,20,5363,18],[5115,21,5363,19,"addEventListener"],[5115,37,5363,35],[5115,38,5363,36],[5115,47,5363,45],[5115,49,5363,47,"listener"],[5115,57,5363,55],[5115,58,5363,56],[5116,8,5364,6],[5116,12,5364,10],[5116,13,5364,11,"_worker"],[5116,20,5364,18],[5116,21,5364,19,"postMessage"],[5116,32,5364,30],[5116,33,5364,31],[5117,10,5364,33,"id"],[5117,12,5364,35],[5118,10,5364,37,"method"],[5118,16,5364,43],[5119,10,5364,45,"arg"],[5120,8,5364,49],[5120,9,5364,50],[5120,10,5364,51],[5121,6,5365,4],[5121,7,5365,5],[5121,8,5365,6],[5122,4,5366,2],[5124,4,5368,2],[5125,4,5369,3,"_getAndIncrementId"],[5125,22,5369,21,"_getAndIncrementId"],[5125,23,5369,21],[5125,25,5369,24],[5126,6,5370,4],[5126,13,5370,11],[5126,17,5370,15],[5126,18,5370,16,"_id"],[5126,21,5370,19],[5126,23,5370,21],[5127,4,5371,2],[5128,2,5372,0],[5130,2,5374,0],[5131,0,5375,0],[5132,0,5376,0],[5133,0,5377,0],[5134,2,5378,0],[5134,8,5378,6,"EventBufferCompressionWorker"],[5134,36,5378,34],[5134,37,5378,36],[5135,4,5379,2],[5137,4,5381,2],[5139,4,5383,3,"constructor"],[5139,15,5383,14,"constructor"],[5139,16,5383,15,"worker"],[5139,22,5383,21],[5139,24,5383,23],[5140,6,5384,4],[5140,10,5384,8],[5140,11,5384,9,"_worker"],[5140,18,5384,16],[5140,21,5384,19],[5140,25,5384,23,"WorkerHandler"],[5140,38,5384,36],[5140,39,5384,37,"worker"],[5140,45,5384,43],[5140,46,5384,44],[5141,6,5385,4],[5141,10,5385,8],[5141,11,5385,9,"_earliestTimestamp"],[5141,29,5385,27],[5141,32,5385,30],[5141,36,5385,34],[5142,6,5386,4],[5142,10,5386,8],[5142,11,5386,9,"_totalSize"],[5142,21,5386,19],[5142,24,5386,22],[5142,25,5386,23],[5143,6,5387,4],[5143,10,5387,8],[5143,11,5387,9,"hasCheckout"],[5143,22,5387,20],[5143,25,5387,23],[5143,30,5387,28],[5144,6,5388,4],[5144,10,5388,8],[5144,11,5388,9,"waitForCheckout"],[5144,26,5388,24],[5144,29,5388,27],[5144,34,5388,32],[5145,4,5389,2],[5147,4,5391,2],[5148,4,5392,3],[5148,8,5392,7,"hasEvents"],[5148,17,5392,16,"hasEvents"],[5148,18,5392,16],[5148,20,5392,19],[5149,6,5393,4],[5149,13,5393,11],[5149,14,5393,12],[5149,15,5393,13],[5149,19,5393,17],[5149,20,5393,18,"_earliestTimestamp"],[5149,38,5393,36],[5150,4,5394,2],[5152,4,5396,2],[5153,4,5397,3],[5153,8,5397,7,"type"],[5153,12,5397,11,"type"],[5153,13,5397,11],[5153,15,5397,14],[5154,6,5398,4],[5154,13,5398,11],[5154,21,5398,19],[5155,4,5399,2],[5157,4,5401,2],[5158,0,5402,0],[5159,0,5403,0],[5160,0,5404,0],[5161,4,5405,3,"ensureReady"],[5161,15,5405,14,"ensureReady"],[5161,16,5405,14],[5161,18,5405,17],[5162,6,5406,4],[5162,13,5406,11],[5162,17,5406,15],[5162,18,5406,16,"_worker"],[5162,25,5406,23],[5162,26,5406,24,"ensureReady"],[5162,37,5406,35],[5162,38,5406,36],[5162,39,5406,37],[5163,4,5407,2],[5165,4,5409,2],[5166,0,5410,0],[5167,0,5411,0],[5168,4,5412,3,"destroy"],[5168,11,5412,10,"destroy"],[5168,12,5412,10],[5168,14,5412,13],[5169,6,5413,4],[5169,10,5413,8],[5169,11,5413,9,"_worker"],[5169,18,5413,16],[5169,19,5413,17,"destroy"],[5169,26,5413,24],[5169,27,5413,25],[5169,28,5413,26],[5170,4,5414,2],[5172,4,5416,2],[5173,0,5417,0],[5174,0,5418,0],[5175,0,5419,0],[5176,0,5420,0],[5177,4,5421,3,"addEvent"],[5177,12,5421,11,"addEvent"],[5177,13,5421,12,"event"],[5177,18,5421,17],[5177,20,5421,19],[5178,6,5422,4],[5178,12,5422,10,"timestamp"],[5178,21,5422,19],[5178,24,5422,22,"timestampToMs"],[5178,37,5422,35],[5178,38,5422,36,"event"],[5178,43,5422,41],[5178,44,5422,42,"timestamp"],[5178,53,5422,51],[5178,54,5422,52],[5179,6,5423,4],[5179,10,5423,8],[5179,11,5423,9],[5179,15,5423,13],[5179,16,5423,14,"_earliestTimestamp"],[5179,34,5423,32],[5179,38,5423,36,"timestamp"],[5179,47,5423,45],[5179,50,5423,48],[5179,54,5423,52],[5179,55,5423,53,"_earliestTimestamp"],[5179,73,5423,71],[5179,75,5423,73],[5180,8,5424,6],[5180,12,5424,10],[5180,13,5424,11,"_earliestTimestamp"],[5180,31,5424,29],[5180,34,5424,32,"timestamp"],[5180,43,5424,41],[5181,6,5425,4],[5182,6,5427,4],[5182,12,5427,10,"data"],[5182,16,5427,14],[5182,19,5427,17,"JSON"],[5182,23,5427,21],[5182,24,5427,22,"stringify"],[5182,33,5427,31],[5182,34,5427,32,"event"],[5182,39,5427,37],[5182,40,5427,38],[5183,6,5428,4],[5183,10,5428,8],[5183,11,5428,9,"_totalSize"],[5183,21,5428,19],[5183,25,5428,23,"data"],[5183,29,5428,27],[5183,30,5428,28,"length"],[5183,36,5428,34],[5184,6,5430,4],[5184,10,5430,8],[5184,14,5430,12],[5184,15,5430,13,"_totalSize"],[5184,25,5430,23],[5184,28,5430,26,"REPLAY_MAX_EVENT_BUFFER_SIZE"],[5184,56,5430,54],[5184,58,5430,56],[5185,8,5431,6],[5185,15,5431,13,"Promise"],[5185,22,5431,20],[5185,23,5431,21,"reject"],[5185,29,5431,27],[5185,30,5431,28],[5185,34,5431,32,"EventBufferSizeExceededError"],[5185,62,5431,60],[5185,63,5431,61],[5185,64,5431,62],[5185,65,5431,63],[5186,6,5432,4],[5187,6,5434,4],[5187,13,5434,11],[5187,17,5434,15],[5187,18,5434,16,"_sendEventToWorker"],[5187,36,5434,34],[5187,37,5434,35,"data"],[5187,41,5434,39],[5187,42,5434,40],[5188,4,5435,2],[5190,4,5437,2],[5191,0,5438,0],[5192,0,5439,0],[5193,4,5440,3,"finish"],[5193,10,5440,9,"finish"],[5193,11,5440,9],[5193,13,5440,12],[5194,6,5441,4],[5194,13,5441,11],[5194,17,5441,15],[5194,18,5441,16,"_finishRequest"],[5194,32,5441,30],[5194,33,5441,31],[5194,34,5441,32],[5195,4,5442,2],[5197,4,5444,2],[5198,4,5445,3,"clear"],[5198,9,5445,8,"clear"],[5198,10,5445,8],[5198,12,5445,11],[5199,6,5446,4],[5199,10,5446,8],[5199,11,5446,9,"_earliestTimestamp"],[5199,29,5446,27],[5199,32,5446,30],[5199,36,5446,34],[5200,6,5447,4],[5200,10,5447,8],[5200,11,5447,9,"_totalSize"],[5200,21,5447,19],[5200,24,5447,22],[5200,25,5447,23],[5201,6,5448,4],[5201,10,5448,8],[5201,11,5448,9,"hasCheckout"],[5201,22,5448,20],[5201,25,5448,23],[5201,30,5448,28],[5203,6,5450,4],[5204,6,5451,4],[5204,10,5451,8],[5204,11,5451,9,"_worker"],[5204,18,5451,16],[5204,19,5451,17,"postMessage"],[5204,30,5451,28],[5204,31,5451,29],[5204,38,5451,36],[5204,39,5451,37],[5204,40,5451,38,"then"],[5204,44,5451,42],[5204,45,5451,43],[5204,49,5451,47],[5204,51,5451,49,"e"],[5204,52,5451,50],[5204,56,5451,54],[5205,8,5452,6,"DEBUG_BUILD"],[5205,19,5452,17],[5205,23,5452,21,"logger"],[5205,29,5452,27],[5205,30,5452,28,"exception"],[5205,39,5452,37],[5205,40,5452,38,"e"],[5205,41,5452,39],[5205,43,5452,41],[5205,85,5452,83],[5205,87,5452,85,"e"],[5205,88,5452,86],[5205,89,5452,87],[5206,6,5453,4],[5206,7,5453,5],[5206,8,5453,6],[5207,4,5454,2],[5209,4,5456,2],[5210,4,5457,3,"getEarliestTimestamp"],[5210,24,5457,23,"getEarliestTimestamp"],[5210,25,5457,23],[5210,27,5457,26],[5211,6,5458,4],[5211,13,5458,11],[5211,17,5458,15],[5211,18,5458,16,"_earliestTimestamp"],[5211,36,5458,34],[5212,4,5459,2],[5214,4,5461,2],[5215,0,5462,0],[5216,0,5463,0],[5217,4,5464,3,"_sendEventToWorker"],[5217,22,5464,21,"_sendEventToWorker"],[5217,23,5464,22,"data"],[5217,27,5464,26],[5217,29,5464,28],[5218,6,5465,4],[5218,13,5465,11],[5218,17,5465,15],[5218,18,5465,16,"_worker"],[5218,25,5465,23],[5218,26,5465,24,"postMessage"],[5218,37,5465,35],[5218,38,5465,36],[5218,48,5465,46],[5218,50,5465,48,"data"],[5218,54,5465,52],[5218,55,5465,53],[5219,4,5466,2],[5221,4,5468,2],[5222,0,5469,0],[5223,0,5470,0],[5224,4,5471,3],[5224,10,5471,9,"_finishRequest"],[5224,24,5471,23,"_finishRequest"],[5224,25,5471,23],[5224,27,5471,26],[5225,6,5472,4],[5225,12,5472,10,"response"],[5225,20,5472,18],[5225,23,5472,21],[5225,29,5472,27],[5225,33,5472,31],[5225,34,5472,32,"_worker"],[5225,41,5472,39],[5225,42,5472,40,"postMessage"],[5225,53,5472,51],[5225,54,5472,52],[5225,62,5472,60],[5225,63,5472,61],[5226,6,5474,4],[5226,10,5474,8],[5226,11,5474,9,"_earliestTimestamp"],[5226,29,5474,27],[5226,32,5474,30],[5226,36,5474,34],[5227,6,5475,4],[5227,10,5475,8],[5227,11,5475,9,"_totalSize"],[5227,21,5475,19],[5227,24,5475,22],[5227,25,5475,23],[5228,6,5477,4],[5228,13,5477,11,"response"],[5228,21,5477,19],[5229,4,5478,2],[5230,2,5479,0],[5232,2,5481,0],[5233,0,5482,0],[5234,0,5483,0],[5235,0,5484,0],[5236,0,5485,0],[5237,2,5486,0],[5237,8,5486,6,"EventBufferProxy"],[5237,24,5486,22],[5237,25,5486,24],[5238,4,5488,3,"constructor"],[5238,15,5488,14,"constructor"],[5238,16,5488,15,"worker"],[5238,22,5488,21],[5238,24,5488,23],[5239,6,5489,4],[5239,10,5489,8],[5239,11,5489,9,"_fallback"],[5239,20,5489,18],[5239,23,5489,21],[5239,27,5489,25,"EventBufferArray"],[5239,43,5489,41],[5239,44,5489,42],[5239,45,5489,43],[5240,6,5490,4],[5240,10,5490,8],[5240,11,5490,9,"_compression"],[5240,23,5490,21],[5240,26,5490,24],[5240,30,5490,28,"EventBufferCompressionWorker"],[5240,58,5490,56],[5240,59,5490,57,"worker"],[5240,65,5490,63],[5240,66,5490,64],[5241,6,5491,4],[5241,10,5491,8],[5241,11,5491,9,"_used"],[5241,16,5491,14],[5241,19,5491,17],[5241,23,5491,21],[5241,24,5491,22,"_fallback"],[5241,33,5491,31],[5242,6,5493,4],[5242,10,5493,8],[5242,11,5493,9,"_ensureWorkerIsLoadedPromise"],[5242,39,5493,37],[5242,42,5493,40],[5242,46,5493,44],[5242,47,5493,45,"_ensureWorkerIsLoaded"],[5242,68,5493,66],[5242,69,5493,67],[5242,70,5493,68],[5243,4,5494,2],[5245,4,5496,2],[5246,4,5497,3],[5246,8,5497,7,"waitForCheckout"],[5246,23,5497,22,"waitForCheckout"],[5246,24,5497,22],[5246,26,5497,25],[5247,6,5498,4],[5247,13,5498,11],[5247,17,5498,15],[5247,18,5498,16,"_used"],[5247,23,5498,21],[5247,24,5498,22,"waitForCheckout"],[5247,39,5498,37],[5248,4,5499,2],[5250,4,5501,2],[5251,4,5502,3],[5251,8,5502,7,"type"],[5251,12,5502,11,"type"],[5251,13,5502,11],[5251,15,5502,14],[5252,6,5503,4],[5252,13,5503,11],[5252,17,5503,15],[5252,18,5503,16,"_used"],[5252,23,5503,21],[5252,24,5503,22,"type"],[5252,28,5503,26],[5253,4,5504,2],[5255,4,5506,2],[5256,4,5507,3],[5256,8,5507,7,"hasEvents"],[5256,17,5507,16,"hasEvents"],[5256,18,5507,16],[5256,20,5507,19],[5257,6,5508,4],[5257,13,5508,11],[5257,17,5508,15],[5257,18,5508,16,"_used"],[5257,23,5508,21],[5257,24,5508,22,"hasEvents"],[5257,33,5508,31],[5258,4,5509,2],[5260,4,5511,2],[5261,4,5512,3],[5261,8,5512,7,"hasCheckout"],[5261,19,5512,18,"hasCheckout"],[5261,20,5512,18],[5261,22,5512,21],[5262,6,5513,4],[5262,13,5513,11],[5262,17,5513,15],[5262,18,5513,16,"_used"],[5262,23,5513,21],[5262,24,5513,22,"hasCheckout"],[5262,35,5513,33],[5263,4,5514,2],[5264,4,5515,2],[5265,4,5516,3],[5265,8,5516,7,"hasCheckout"],[5265,19,5516,18,"hasCheckout"],[5265,20,5516,19,"value"],[5265,25,5516,24],[5265,27,5516,26],[5266,6,5517,4],[5266,10,5517,8],[5266,11,5517,9,"_used"],[5266,16,5517,14],[5266,17,5517,15,"hasCheckout"],[5266,28,5517,26],[5266,31,5517,29,"value"],[5266,36,5517,34],[5267,4,5518,2],[5269,4,5520,2],[5270,4,5521,2],[5271,4,5522,3],[5271,8,5522,7,"waitForCheckout"],[5271,23,5522,22,"waitForCheckout"],[5271,24,5522,23,"value"],[5271,29,5522,28],[5271,31,5522,30],[5272,6,5523,4],[5272,10,5523,8],[5272,11,5523,9,"_used"],[5272,16,5523,14],[5272,17,5523,15,"waitForCheckout"],[5272,32,5523,30],[5272,35,5523,33,"value"],[5272,40,5523,38],[5273,4,5524,2],[5275,4,5526,2],[5276,4,5527,3,"destroy"],[5276,11,5527,10,"destroy"],[5276,12,5527,10],[5276,14,5527,13],[5277,6,5528,4],[5277,10,5528,8],[5277,11,5528,9,"_fallback"],[5277,20,5528,18],[5277,21,5528,19,"destroy"],[5277,28,5528,26],[5277,29,5528,27],[5277,30,5528,28],[5278,6,5529,4],[5278,10,5529,8],[5278,11,5529,9,"_compression"],[5278,23,5529,21],[5278,24,5529,22,"destroy"],[5278,31,5529,29],[5278,32,5529,30],[5278,33,5529,31],[5279,4,5530,2],[5281,4,5532,2],[5282,4,5533,3,"clear"],[5282,9,5533,8,"clear"],[5282,10,5533,8],[5282,12,5533,11],[5283,6,5534,4],[5283,13,5534,11],[5283,17,5534,15],[5283,18,5534,16,"_used"],[5283,23,5534,21],[5283,24,5534,22,"clear"],[5283,29,5534,27],[5283,30,5534,28],[5283,31,5534,29],[5284,4,5535,2],[5286,4,5537,2],[5287,4,5538,3,"getEarliestTimestamp"],[5287,24,5538,23,"getEarliestTimestamp"],[5287,25,5538,23],[5287,27,5538,26],[5288,6,5539,4],[5288,13,5539,11],[5288,17,5539,15],[5288,18,5539,16,"_used"],[5288,23,5539,21],[5288,24,5539,22,"getEarliestTimestamp"],[5288,44,5539,42],[5288,45,5539,43],[5288,46,5539,44],[5289,4,5540,2],[5291,4,5542,2],[5292,0,5543,0],[5293,0,5544,0],[5294,0,5545,0],[5295,0,5546,0],[5296,4,5547,3,"addEvent"],[5296,12,5547,11,"addEvent"],[5296,13,5547,12,"event"],[5296,18,5547,17],[5296,20,5547,19],[5297,6,5548,4],[5297,13,5548,11],[5297,17,5548,15],[5297,18,5548,16,"_used"],[5297,23,5548,21],[5297,24,5548,22,"addEvent"],[5297,32,5548,30],[5297,33,5548,31,"event"],[5297,38,5548,36],[5297,39,5548,37],[5298,4,5549,2],[5300,4,5551,2],[5301,4,5552,3],[5301,10,5552,9,"finish"],[5301,16,5552,15,"finish"],[5301,17,5552,15],[5301,19,5552,18],[5302,6,5553,4],[5303,6,5554,4],[5303,12,5554,10],[5303,16,5554,14],[5303,17,5554,15,"ensureWorkerIsLoaded"],[5303,37,5554,35],[5303,38,5554,36],[5303,39,5554,37],[5304,6,5556,4],[5304,13,5556,11],[5304,17,5556,15],[5304,18,5556,16,"_used"],[5304,23,5556,21],[5304,24,5556,22,"finish"],[5304,30,5556,28],[5304,31,5556,29],[5304,32,5556,30],[5305,4,5557,2],[5307,4,5559,2],[5308,4,5560,3,"ensureWorkerIsLoaded"],[5308,24,5560,23,"ensureWorkerIsLoaded"],[5308,25,5560,23],[5308,27,5560,26],[5309,6,5561,4],[5309,13,5561,11],[5309,17,5561,15],[5309,18,5561,16,"_ensureWorkerIsLoadedPromise"],[5309,46,5561,44],[5310,4,5562,2],[5312,4,5564,2],[5313,4,5565,3],[5313,10,5565,9,"_ensureWorkerIsLoaded"],[5313,31,5565,30,"_ensureWorkerIsLoaded"],[5313,32,5565,30],[5313,34,5565,33],[5314,6,5566,4],[5314,10,5566,8],[5315,8,5567,6],[5315,14,5567,12],[5315,18,5567,16],[5315,19,5567,17,"_compression"],[5315,31,5567,29],[5315,32,5567,30,"ensureReady"],[5315,43,5567,41],[5315,44,5567,42],[5315,45,5567,43],[5316,6,5568,4],[5316,7,5568,5],[5316,8,5568,6],[5316,15,5568,13,"error"],[5316,20,5568,18],[5316,22,5568,20],[5317,8,5569,6],[5318,8,5570,6],[5319,8,5571,6,"DEBUG_BUILD"],[5319,19,5571,17],[5319,23,5571,21,"logger"],[5319,29,5571,27],[5319,30,5571,28,"exception"],[5319,39,5571,37],[5319,40,5571,38,"error"],[5319,45,5571,43],[5319,47,5571,45],[5319,117,5571,115],[5319,118,5571,116],[5320,8,5572,6],[5321,6,5573,4],[5323,6,5575,4],[5324,6,5576,4],[5324,12,5576,10],[5324,16,5576,14],[5324,17,5576,15,"_switchToCompressionWorker"],[5324,43,5576,41],[5324,44,5576,42],[5324,45,5576,43],[5325,4,5577,2],[5327,4,5579,2],[5328,4,5580,3],[5328,10,5580,9,"_switchToCompressionWorker"],[5328,36,5580,35,"_switchToCompressionWorker"],[5328,37,5580,35],[5328,39,5580,38],[5329,6,5581,4],[5329,12,5581,10],[5330,8,5581,12,"events"],[5330,14,5581,18],[5331,8,5581,20,"hasCheckout"],[5331,19,5581,31],[5332,8,5581,33,"waitForCheckout"],[5333,6,5581,49],[5333,7,5581,50],[5333,10,5581,53],[5333,14,5581,57],[5333,15,5581,58,"_fallback"],[5333,24,5581,67],[5334,6,5583,4],[5334,12,5583,10,"addEventPromises"],[5334,28,5583,26],[5334,31,5583,29],[5334,33,5583,31],[5335,6,5584,4],[5335,11,5584,9],[5335,17,5584,15,"event"],[5335,22,5584,20],[5335,26,5584,24,"events"],[5335,32,5584,30],[5335,34,5584,32],[5336,8,5585,6,"addEventPromises"],[5336,24,5585,22],[5336,25,5585,23,"push"],[5336,29,5585,27],[5336,30,5585,28],[5336,34,5585,32],[5336,35,5585,33,"_compression"],[5336,47,5585,45],[5336,48,5585,46,"addEvent"],[5336,56,5585,54],[5336,57,5585,55,"event"],[5336,62,5585,60],[5336,63,5585,61],[5336,64,5585,62],[5337,6,5586,4],[5338,6,5588,4],[5338,10,5588,8],[5338,11,5588,9,"_compression"],[5338,23,5588,21],[5338,24,5588,22,"hasCheckout"],[5338,35,5588,33],[5338,38,5588,36,"hasCheckout"],[5338,49,5588,47],[5339,6,5589,4],[5339,10,5589,8],[5339,11,5589,9,"_compression"],[5339,23,5589,21],[5339,24,5589,22,"waitForCheckout"],[5339,39,5589,37],[5339,42,5589,40,"waitForCheckout"],[5339,57,5589,55],[5341,6,5591,4],[5342,6,5592,4],[5343,6,5593,4],[5343,10,5593,8],[5343,11,5593,9,"_used"],[5343,16,5593,14],[5343,19,5593,17],[5343,23,5593,21],[5343,24,5593,22,"_compression"],[5343,36,5593,34],[5345,6,5595,4],[5346,6,5596,4],[5346,10,5596,8],[5347,8,5597,6],[5347,14,5597,12,"Promise"],[5347,21,5597,19],[5347,22,5597,20,"all"],[5347,25,5597,23],[5347,26,5597,24,"addEventPromises"],[5347,42,5597,40],[5347,43,5597,41],[5349,8,5599,6],[5350,8,5600,6],[5350,12,5600,10],[5350,13,5600,11,"_fallback"],[5350,22,5600,20],[5350,23,5600,21,"clear"],[5350,28,5600,26],[5350,29,5600,27],[5350,30,5600,28],[5351,6,5601,4],[5351,7,5601,5],[5351,8,5601,6],[5351,15,5601,13,"error"],[5351,20,5601,18],[5351,22,5601,20],[5352,8,5602,6,"DEBUG_BUILD"],[5352,19,5602,17],[5352,23,5602,21,"logger"],[5352,29,5602,27],[5352,30,5602,28,"exception"],[5352,39,5602,37],[5352,40,5602,38,"error"],[5352,45,5602,43],[5352,47,5602,45],[5352,93,5602,91],[5352,94,5602,92],[5353,6,5603,4],[5354,4,5604,2],[5355,2,5605,0],[5357,2,5607,0],[5358,0,5608,0],[5359,0,5609,0],[5360,2,5610,0],[5360,11,5610,9,"createEventBuffer"],[5360,28,5610,26,"createEventBuffer"],[5360,29,5610,27],[5361,4,5611,2,"useCompression"],[5361,18,5611,16],[5362,4,5612,2,"workerUrl"],[5362,13,5612,11],[5362,15,5612,13,"customWorkerUrl"],[5363,2,5613,0],[5363,3,5613,1],[5363,5,5613,3],[5364,4,5614,2],[5364,8,5615,4,"useCompression"],[5364,22,5615,18],[5365,4,5616,4],[5366,4,5617,4,"window"],[5366,10,5617,10],[5366,11,5617,11,"Worker"],[5366,17,5617,17],[5366,19,5618,4],[5367,6,5619,4],[5367,12,5619,10,"worker"],[5367,18,5619,16],[5367,21,5619,19,"_loadWorker"],[5367,32,5619,30],[5367,33,5619,31,"customWorkerUrl"],[5367,48,5619,46],[5367,49,5619,47],[5368,6,5621,4],[5368,10,5621,8,"worker"],[5368,16,5621,14],[5368,18,5621,16],[5369,8,5622,6],[5369,15,5622,13,"worker"],[5369,21,5622,19],[5370,6,5623,4],[5371,4,5624,2],[5372,4,5626,2,"DEBUG_BUILD"],[5372,15,5626,13],[5372,19,5626,17,"logger"],[5372,25,5626,23],[5372,26,5626,24,"info"],[5372,30,5626,28],[5372,31,5626,29],[5372,52,5626,50],[5372,53,5626,51],[5373,4,5627,2],[5373,11,5627,9],[5373,15,5627,13,"EventBufferArray"],[5373,31,5627,29],[5373,32,5627,30],[5373,33,5627,31],[5374,2,5628,0],[5375,2,5630,0],[5375,11,5630,9,"_loadWorker"],[5375,22,5630,20,"_loadWorker"],[5375,23,5630,21,"customWorkerUrl"],[5375,38,5630,36],[5375,40,5630,38],[5376,4,5631,2],[5376,8,5631,6],[5377,6,5632,4],[5377,12,5632,10,"workerUrl"],[5377,21,5632,19],[5377,24,5632,22,"customWorkerUrl"],[5377,39,5632,37],[5377,43,5632,41,"_getWorkerUrl"],[5377,56,5632,54],[5377,57,5632,55],[5377,58,5632,56],[5378,6,5634,4],[5378,10,5634,8],[5378,11,5634,9,"workerUrl"],[5378,20,5634,18],[5378,22,5634,20],[5379,8,5635,6],[5380,6,5636,4],[5381,6,5638,4,"DEBUG_BUILD"],[5381,17,5638,15],[5381,21,5638,19,"logger"],[5381,27,5638,25],[5381,28,5638,26,"info"],[5381,32,5638,30],[5381,33,5638,31],[5381,60,5638,58,"customWorkerUrl"],[5381,75,5638,73],[5381,78,5638,76],[5381,87,5638,85,"customWorkerUrl"],[5381,102,5638,100],[5381,104,5638,102],[5381,107,5638,105],[5381,109,5638,107],[5381,111,5638,109],[5381,112,5638,110],[5382,6,5639,4],[5382,12,5639,10,"worker"],[5382,18,5639,16],[5382,21,5639,19],[5382,25,5639,23,"Worker"],[5382,31,5639,29],[5382,32,5639,30,"workerUrl"],[5382,41,5639,39],[5382,42,5639,40],[5383,6,5640,4],[5383,13,5640,11],[5383,17,5640,15,"EventBufferProxy"],[5383,33,5640,31],[5383,34,5640,32,"worker"],[5383,40,5640,38],[5383,41,5640,39],[5384,4,5641,2],[5384,5,5641,3],[5384,6,5641,4],[5384,13,5641,11,"error"],[5384,18,5641,16],[5384,20,5641,18],[5385,6,5642,4,"DEBUG_BUILD"],[5385,17,5642,15],[5385,21,5642,19,"logger"],[5385,27,5642,25],[5385,28,5642,26,"exception"],[5385,37,5642,35],[5385,38,5642,36,"error"],[5385,43,5642,41],[5385,45,5642,43],[5385,82,5642,80],[5385,83,5642,81],[5386,6,5643,4],[5387,4,5644,2],[5388,2,5645,0],[5389,2,5647,0],[5389,11,5647,9,"_getWorkerUrl"],[5389,24,5647,22,"_getWorkerUrl"],[5389,25,5647,22],[5389,27,5647,25],[5390,4,5648,2],[5390,8,5648,6],[5390,15,5648,13,"__SENTRY_EXCLUDE_REPLAY_WORKER__"],[5390,47,5648,45],[5390,52,5648,50],[5390,63,5648,61],[5390,67,5648,65],[5390,68,5648,66,"__SENTRY_EXCLUDE_REPLAY_WORKER__"],[5390,100,5648,98],[5390,102,5648,100],[5391,6,5649,4],[5391,13,5649,11,"e"],[5391,14,5649,12],[5391,15,5649,13],[5391,16,5649,14],[5392,4,5650,2],[5393,4,5652,2],[5393,11,5652,9],[5393,13,5652,11],[5394,2,5653,0],[5396,2,5655,0],[5397,2,5656,0],[5397,11,5656,9,"hasSessionStorage"],[5397,28,5656,26,"hasSessionStorage"],[5397,29,5656,26],[5397,31,5656,29],[5398,4,5657,2],[5398,8,5657,6],[5399,6,5658,4],[5400,6,5659,4],[5400,13,5659,11],[5400,29,5659,27],[5400,33,5659,31,"WINDOW"],[5400,39,5659,37],[5400,43,5659,41],[5400,44,5659,42],[5400,45,5659,43,"WINDOW"],[5400,51,5659,49],[5400,52,5659,50,"sessionStorage"],[5400,66,5659,64],[5401,4,5660,2],[5401,5,5660,3],[5401,6,5660,4],[5401,13,5660,11,"e"],[5401,14,5660,12],[5401,16,5660,14],[5402,6,5661,4],[5402,13,5661,11],[5402,18,5661,16],[5403,4,5662,2],[5404,2,5663,0],[5406,2,5665,0],[5407,0,5666,0],[5408,0,5667,0],[5409,2,5668,0],[5409,11,5668,9,"clearSession"],[5409,23,5668,21,"clearSession"],[5409,24,5668,22,"replay"],[5409,30,5668,28],[5409,32,5668,30],[5410,4,5669,2,"deleteSession"],[5410,17,5669,15],[5410,18,5669,16],[5410,19,5669,17],[5411,4,5670,2,"replay"],[5411,10,5670,8],[5411,11,5670,9,"session"],[5411,18,5670,16],[5411,21,5670,19,"undefined"],[5411,30,5670,28],[5412,2,5671,0],[5414,2,5673,0],[5415,0,5674,0],[5416,0,5675,0],[5417,2,5676,0],[5417,11,5676,9,"deleteSession"],[5417,24,5676,22,"deleteSession"],[5417,25,5676,22],[5417,27,5676,25],[5418,4,5677,2],[5418,8,5677,6],[5418,9,5677,7,"hasSessionStorage"],[5418,26,5677,24],[5418,27,5677,25],[5418,28,5677,26],[5418,30,5677,28],[5419,6,5678,4],[5420,4,5679,2],[5421,4,5681,2],[5421,8,5681,6],[5422,6,5682,4,"WINDOW"],[5422,12,5682,10],[5422,13,5682,11,"sessionStorage"],[5422,27,5682,25],[5422,28,5682,26,"removeItem"],[5422,38,5682,36],[5422,39,5682,37,"REPLAY_SESSION_KEY"],[5422,57,5682,55],[5422,58,5682,56],[5423,4,5683,2],[5423,5,5683,3],[5423,6,5683,4],[5423,13,5683,11,"e"],[5423,14,5683,12],[5423,16,5683,14],[5424,6,5684,4],[5425,4,5684,4],[5426,2,5686,0],[5428,2,5688,0],[5429,0,5689,0],[5430,0,5690,0],[5431,0,5691,0],[5432,0,5692,0],[5433,0,5693,0],[5434,2,5694,0],[5434,11,5694,9,"isSampled"],[5434,20,5694,18,"isSampled"],[5434,21,5694,19,"sampleRate"],[5434,31,5694,29],[5434,33,5694,31],[5435,4,5695,2],[5435,8,5695,6,"sampleRate"],[5435,18,5695,16],[5435,23,5695,21,"undefined"],[5435,32,5695,30],[5435,34,5695,32],[5436,6,5696,4],[5436,13,5696,11],[5436,18,5696,16],[5437,4,5697,2],[5439,4,5699,2],[5440,4,5700,2],[5440,11,5700,9,"Math"],[5440,15,5700,13],[5440,16,5700,14,"random"],[5440,22,5700,20],[5440,23,5700,21],[5440,24,5700,22],[5440,27,5700,25,"sampleRate"],[5440,37,5700,35],[5441,2,5701,0],[5443,2,5703,0],[5444,0,5704,0],[5445,0,5705,0],[5446,2,5706,0],[5446,11,5706,9,"makeSession"],[5446,22,5706,20,"makeSession"],[5446,23,5706,21,"session"],[5446,30,5706,28],[5446,32,5706,30],[5447,4,5707,2],[5447,10,5707,8,"now"],[5447,13,5707,11],[5447,16,5707,14,"Date"],[5447,20,5707,18],[5447,21,5707,19,"now"],[5447,24,5707,22],[5447,25,5707,23],[5447,26,5707,24],[5448,4,5708,2],[5448,10,5708,8,"id"],[5448,12,5708,10],[5448,15,5708,13,"session"],[5448,22,5708,20],[5448,23,5708,21,"id"],[5448,25,5708,23],[5448,29,5708,27],[5448,33,5708,27,"uuid4"],[5448,44,5708,32],[5448,46,5708,33],[5448,47,5708,34],[5449,4,5709,2],[5450,4,5710,2],[5450,10,5710,8,"started"],[5450,17,5710,15],[5450,20,5710,18,"session"],[5450,27,5710,25],[5450,28,5710,26,"started"],[5450,35,5710,33],[5450,39,5710,37,"now"],[5450,42,5710,40],[5451,4,5711,2],[5451,10,5711,8,"lastActivity"],[5451,22,5711,20],[5451,25,5711,23,"session"],[5451,32,5711,30],[5451,33,5711,31,"lastActivity"],[5451,45,5711,43],[5451,49,5711,47,"now"],[5451,52,5711,50],[5452,4,5712,2],[5452,10,5712,8,"segmentId"],[5452,19,5712,17],[5452,22,5712,20,"session"],[5452,29,5712,27],[5452,30,5712,28,"segmentId"],[5452,39,5712,37],[5452,43,5712,41],[5452,44,5712,42],[5453,4,5713,2],[5453,10,5713,8,"sampled"],[5453,17,5713,15],[5453,20,5713,18,"session"],[5453,27,5713,25],[5453,28,5713,26,"sampled"],[5453,35,5713,33],[5454,4,5714,2],[5454,10,5714,8,"previousSessionId"],[5454,27,5714,25],[5454,30,5714,28,"session"],[5454,37,5714,35],[5454,38,5714,36,"previousSessionId"],[5454,55,5714,53],[5455,4,5716,2],[5455,11,5716,9],[5456,6,5717,4,"id"],[5456,8,5717,6],[5457,6,5718,4,"started"],[5457,13,5718,11],[5458,6,5719,4,"lastActivity"],[5458,18,5719,16],[5459,6,5720,4,"segmentId"],[5459,15,5720,13],[5460,6,5721,4,"sampled"],[5460,13,5721,11],[5461,6,5722,4,"previousSessionId"],[5462,4,5723,2],[5462,5,5723,3],[5463,2,5724,0],[5465,2,5726,0],[5466,0,5727,0],[5467,0,5728,0],[5468,2,5729,0],[5468,11,5729,9,"saveSession"],[5468,22,5729,20,"saveSession"],[5468,23,5729,21,"session"],[5468,30,5729,28],[5468,32,5729,30],[5469,4,5730,2],[5469,8,5730,6],[5469,9,5730,7,"hasSessionStorage"],[5469,26,5730,24],[5469,27,5730,25],[5469,28,5730,26],[5469,30,5730,28],[5470,6,5731,4],[5471,4,5732,2],[5472,4,5734,2],[5472,8,5734,6],[5473,6,5735,4,"WINDOW"],[5473,12,5735,10],[5473,13,5735,11,"sessionStorage"],[5473,27,5735,25],[5473,28,5735,26,"setItem"],[5473,35,5735,33],[5473,36,5735,34,"REPLAY_SESSION_KEY"],[5473,54,5735,52],[5473,56,5735,54,"JSON"],[5473,60,5735,58],[5473,61,5735,59,"stringify"],[5473,70,5735,68],[5473,71,5735,69,"session"],[5473,78,5735,76],[5473,79,5735,77],[5473,80,5735,78],[5474,4,5736,2],[5474,5,5736,3],[5474,6,5736,4],[5474,13,5736,11,"e"],[5474,14,5736,12],[5474,16,5736,14],[5475,6,5737,4],[5476,4,5737,4],[5477,2,5739,0],[5479,2,5741,0],[5480,0,5742,0],[5481,0,5743,0],[5482,2,5744,0],[5482,11,5744,9,"getSessionSampleType"],[5482,31,5744,29,"getSessionSampleType"],[5482,32,5744,30,"sessionSampleRate"],[5482,49,5744,47],[5482,51,5744,49,"allowBuffering"],[5482,65,5744,63],[5482,67,5744,65],[5483,4,5745,2],[5483,11,5745,9,"isSampled"],[5483,20,5745,18],[5483,21,5745,19,"sessionSampleRate"],[5483,38,5745,36],[5483,39,5745,37],[5483,42,5745,40],[5483,51,5745,49],[5483,54,5745,52,"allowBuffering"],[5483,68,5745,66],[5483,71,5745,69],[5483,79,5745,77],[5483,82,5745,80],[5483,87,5745,85],[5484,2,5746,0],[5486,2,5748,0],[5487,0,5749,0],[5488,0,5750,0],[5489,0,5751,0],[5490,0,5752,0],[5491,2,5753,0],[5491,11,5753,9,"createSession"],[5491,24,5753,22,"createSession"],[5491,25,5754,2],[5492,4,5754,4,"sessionSampleRate"],[5492,21,5754,21],[5493,4,5754,23,"allowBuffering"],[5493,18,5754,37],[5494,4,5754,39,"stickySession"],[5494,17,5754,52],[5494,20,5754,55],[5495,2,5754,61],[5495,3,5754,62],[5495,5,5755,2],[5496,4,5755,4,"previousSessionId"],[5497,2,5755,22],[5497,3,5755,23],[5497,6,5755,26],[5497,7,5755,27],[5497,8,5755,28],[5497,10,5756,2],[5498,4,5757,2],[5498,10,5757,8,"sampled"],[5498,17,5757,15],[5498,20,5757,18,"getSessionSampleType"],[5498,40,5757,38],[5498,41,5757,39,"sessionSampleRate"],[5498,58,5757,56],[5498,60,5757,58,"allowBuffering"],[5498,74,5757,72],[5498,75,5757,73],[5499,4,5758,2],[5499,10,5758,8,"session"],[5499,17,5758,15],[5499,20,5758,18,"makeSession"],[5499,31,5758,29],[5499,32,5758,30],[5500,6,5759,4,"sampled"],[5500,13,5759,11],[5501,6,5760,4,"previousSessionId"],[5502,4,5761,2],[5502,5,5761,3],[5502,6,5761,4],[5503,4,5763,2],[5503,8,5763,6,"stickySession"],[5503,21,5763,19],[5503,23,5763,21],[5504,6,5764,4,"saveSession"],[5504,17,5764,15],[5504,18,5764,16,"session"],[5504,25,5764,23],[5504,26,5764,24],[5505,4,5765,2],[5506,4,5767,2],[5506,11,5767,9,"session"],[5506,18,5767,16],[5507,2,5768,0],[5509,2,5770,0],[5510,0,5771,0],[5511,0,5772,0],[5512,2,5773,0],[5512,11,5773,9,"fetchSession"],[5512,23,5773,21,"fetchSession"],[5512,24,5773,21],[5512,26,5773,24],[5513,4,5774,2],[5513,8,5774,6],[5513,9,5774,7,"hasSessionStorage"],[5513,26,5774,24],[5513,27,5774,25],[5513,28,5774,26],[5513,30,5774,28],[5514,6,5775,4],[5514,13,5775,11],[5514,17,5775,15],[5515,4,5776,2],[5516,4,5778,2],[5516,8,5778,6],[5517,6,5779,4],[5518,6,5780,4],[5518,12,5780,10,"sessionStringFromStorage"],[5518,36,5780,34],[5518,39,5780,37,"WINDOW"],[5518,45,5780,43],[5518,46,5780,44,"sessionStorage"],[5518,60,5780,58],[5518,61,5780,59,"getItem"],[5518,68,5780,66],[5518,69,5780,67,"REPLAY_SESSION_KEY"],[5518,87,5780,85],[5518,88,5780,86],[5519,6,5782,4],[5519,10,5782,8],[5519,11,5782,9,"sessionStringFromStorage"],[5519,35,5782,33],[5519,37,5782,35],[5520,8,5783,6],[5520,15,5783,13],[5520,19,5783,17],[5521,6,5784,4],[5522,6,5786,4],[5522,12,5786,10,"sessionObj"],[5522,22,5786,20],[5522,25,5786,23,"JSON"],[5522,29,5786,27],[5522,30,5786,28,"parse"],[5522,35,5786,33],[5522,36,5786,34,"sessionStringFromStorage"],[5522,60,5786,58],[5522,61,5786,59],[5523,6,5788,4,"DEBUG_BUILD"],[5523,17,5788,15],[5523,21,5788,19,"logger"],[5523,27,5788,25],[5523,28,5788,26,"infoTick"],[5523,36,5788,34],[5523,37,5788,35],[5523,63,5788,61],[5523,64,5788,62],[5524,6,5790,4],[5524,13,5790,11,"makeSession"],[5524,24,5790,22],[5524,25,5790,23,"sessionObj"],[5524,35,5790,33],[5524,36,5790,34],[5525,4,5791,2],[5525,5,5791,3],[5525,6,5791,4],[5525,13,5791,11,"e"],[5525,14,5791,12],[5525,16,5791,14],[5526,6,5792,4],[5526,13,5792,11],[5526,17,5792,15],[5527,4,5793,2],[5528,2,5794,0],[5530,2,5796,0],[5531,0,5797,0],[5532,0,5798,0],[5533,0,5799,0],[5534,2,5800,0],[5534,11,5800,9,"isExpired"],[5534,20,5800,18,"isExpired"],[5534,21,5801,2,"initialTime"],[5534,32,5801,13],[5534,34,5802,2,"expiry"],[5534,40,5802,8],[5534,42,5803,2,"targetTime"],[5534,52,5803,12],[5534,55,5803,15],[5534,56,5803,16],[5534,60,5803,20,"Date"],[5534,64,5803,24],[5534,65,5803,25],[5534,66,5803,26],[5534,68,5804,2],[5535,4,5805,2],[5536,4,5806,2],[5536,8,5806,6,"initialTime"],[5536,19,5806,17],[5536,24,5806,22],[5536,28,5806,26],[5536,32,5806,30,"expiry"],[5536,38,5806,36],[5536,43,5806,41,"undefined"],[5536,52,5806,50],[5536,56,5806,54,"expiry"],[5536,62,5806,60],[5536,65,5806,63],[5536,66,5806,64],[5536,68,5806,66],[5537,6,5807,4],[5537,13,5807,11],[5537,17,5807,15],[5538,4,5808,2],[5540,4,5810,2],[5541,4,5811,2],[5541,8,5811,6,"expiry"],[5541,14,5811,12],[5541,19,5811,17],[5541,20,5811,18],[5541,22,5811,20],[5542,6,5812,4],[5542,13,5812,11],[5542,18,5812,16],[5543,4,5813,2],[5544,4,5815,2],[5544,11,5815,9,"initialTime"],[5544,22,5815,20],[5544,25,5815,23,"expiry"],[5544,31,5815,29],[5544,35,5815,33,"targetTime"],[5544,45,5815,43],[5545,2,5816,0],[5547,2,5818,0],[5548,0,5819,0],[5549,0,5820,0],[5550,2,5821,0],[5550,11,5821,9,"isSessionExpired"],[5550,27,5821,25,"isSessionExpired"],[5550,28,5822,2,"session"],[5550,35,5822,9],[5550,37,5823,2],[5551,4,5824,4,"maxReplayDuration"],[5551,21,5824,21],[5552,4,5825,4,"sessionIdleExpire"],[5552,21,5825,21],[5553,4,5826,4,"targetTime"],[5553,14,5826,14],[5553,17,5826,17,"Date"],[5553,21,5826,21],[5553,22,5826,22,"now"],[5553,25,5826,25],[5553,26,5826,26],[5554,2,5827,2],[5554,3,5827,3],[5554,5,5828,2],[5555,4,5829,2],[5556,6,5830,4],[5557,6,5831,4,"isExpired"],[5557,15,5831,13],[5557,16,5831,14,"session"],[5557,23,5831,21],[5557,24,5831,22,"started"],[5557,31,5831,29],[5557,33,5831,31,"maxReplayDuration"],[5557,50,5831,48],[5557,52,5831,50,"targetTime"],[5557,62,5831,60],[5557,63,5831,61],[5558,6,5832,4],[5559,6,5833,4],[5560,6,5834,4,"isExpired"],[5560,15,5834,13],[5560,16,5834,14,"session"],[5560,23,5834,21],[5560,24,5834,22,"lastActivity"],[5560,36,5834,34],[5560,38,5834,36,"sessionIdleExpire"],[5560,55,5834,53],[5560,57,5834,55,"targetTime"],[5560,67,5834,65],[5561,4,5834,66],[5562,2,5836,0],[5564,2,5838,0],[5565,2,5839,0],[5565,11,5839,9,"shouldRefreshSession"],[5565,31,5839,29,"shouldRefreshSession"],[5565,32,5840,2,"session"],[5565,39,5840,9],[5565,41,5841,2],[5566,4,5841,4,"sessionIdleExpire"],[5566,21,5841,21],[5567,4,5841,23,"maxReplayDuration"],[5568,2,5841,41],[5568,3,5841,42],[5568,5,5842,2],[5569,4,5843,2],[5570,4,5844,2],[5570,8,5844,6],[5570,9,5844,7,"isSessionExpired"],[5570,25,5844,23],[5570,26,5844,24,"session"],[5570,33,5844,31],[5570,35,5844,33],[5571,6,5844,35,"sessionIdleExpire"],[5571,23,5844,52],[5572,6,5844,54,"maxReplayDuration"],[5573,4,5844,72],[5573,5,5844,73],[5573,6,5844,74],[5573,8,5844,76],[5574,6,5845,4],[5574,13,5845,11],[5574,18,5845,16],[5575,4,5846,2],[5577,4,5848,2],[5578,4,5849,2],[5578,8,5849,6,"session"],[5578,15,5849,13],[5578,16,5849,14,"sampled"],[5578,23,5849,21],[5578,28,5849,26],[5578,36,5849,34],[5578,40,5849,38,"session"],[5578,47,5849,45],[5578,48,5849,46,"segmentId"],[5578,57,5849,55],[5578,62,5849,60],[5578,63,5849,61],[5578,65,5849,63],[5579,6,5850,4],[5579,13,5850,11],[5579,18,5850,16],[5580,4,5851,2],[5581,4,5853,2],[5581,11,5853,9],[5581,15,5853,13],[5582,2,5854,0],[5584,2,5856,0],[5585,0,5857,0],[5586,0,5858,0],[5587,0,5859,0],[5588,2,5860,0],[5588,11,5860,9,"loadOrCreateSession"],[5588,30,5860,28,"loadOrCreateSession"],[5588,31,5861,2],[5589,4,5862,4,"sessionIdleExpire"],[5589,21,5862,21],[5590,4,5863,4,"maxReplayDuration"],[5590,21,5863,21],[5591,4,5864,4,"previousSessionId"],[5592,2,5865,2],[5592,3,5865,3],[5592,5,5868,2,"sessionOptions"],[5592,19,5868,16],[5592,21,5869,2],[5593,4,5870,2],[5593,10,5870,8,"existingSession"],[5593,25,5870,23],[5593,28,5870,26,"sessionOptions"],[5593,42,5870,40],[5593,43,5870,41,"stickySession"],[5593,56,5870,54],[5593,60,5870,58,"fetchSession"],[5593,72,5870,70],[5593,73,5870,71],[5593,74,5870,72],[5595,4,5872,2],[5596,4,5873,2],[5596,8,5873,6],[5596,9,5873,7,"existingSession"],[5596,24,5873,22],[5596,26,5873,24],[5597,6,5874,4,"DEBUG_BUILD"],[5597,17,5874,15],[5597,21,5874,19,"logger"],[5597,27,5874,25],[5597,28,5874,26,"infoTick"],[5597,36,5874,34],[5597,37,5874,35],[5597,59,5874,57],[5597,60,5874,58],[5598,6,5875,4],[5598,13,5875,11,"createSession"],[5598,26,5875,24],[5598,27,5875,25,"sessionOptions"],[5598,41,5875,39],[5598,43,5875,41],[5599,8,5875,43,"previousSessionId"],[5600,6,5875,61],[5600,7,5875,62],[5600,8,5875,63],[5601,4,5876,2],[5602,4,5878,2],[5602,8,5878,6],[5602,9,5878,7,"shouldRefreshSession"],[5602,29,5878,27],[5602,30,5878,28,"existingSession"],[5602,45,5878,43],[5602,47,5878,45],[5603,6,5878,47,"sessionIdleExpire"],[5603,23,5878,64],[5604,6,5878,66,"maxReplayDuration"],[5605,4,5878,84],[5605,5,5878,85],[5605,6,5878,86],[5605,8,5878,88],[5606,6,5879,4],[5606,13,5879,11,"existingSession"],[5606,28,5879,26],[5607,4,5880,2],[5608,4,5882,2,"DEBUG_BUILD"],[5608,15,5882,13],[5608,19,5882,17,"logger"],[5608,25,5882,23],[5608,26,5882,24,"infoTick"],[5608,34,5882,32],[5608,35,5882,33],[5608,94,5882,92],[5608,95,5882,93],[5609,4,5883,2],[5609,11,5883,9,"createSession"],[5609,24,5883,22],[5609,25,5883,23,"sessionOptions"],[5609,39,5883,37],[5609,41,5883,39],[5610,6,5883,41,"previousSessionId"],[5610,23,5883,58],[5610,25,5883,60,"existingSession"],[5610,40,5883,75],[5610,41,5883,76,"id"],[5611,4,5883,79],[5611,5,5883,80],[5611,6,5883,81],[5612,2,5884,0],[5613,2,5886,0],[5613,11,5886,9,"isCustomEvent"],[5613,24,5886,22,"isCustomEvent"],[5613,25,5886,23,"event"],[5613,30,5886,28],[5613,32,5886,30],[5614,4,5887,2],[5614,11,5887,9,"event"],[5614,16,5887,14],[5614,17,5887,15,"type"],[5614,21,5887,19],[5614,26,5887,24,"EventType"],[5614,35,5887,33],[5614,36,5887,34,"Custom"],[5614,42,5887,40],[5615,2,5888,0],[5617,2,5890,0],[5618,0,5891,0],[5619,0,5892,0],[5620,0,5893,0],[5621,0,5894,0],[5622,0,5895,0],[5623,0,5896,0],[5624,0,5897,0],[5625,2,5898,0],[5625,11,5898,9,"addEventSync"],[5625,23,5898,21,"addEventSync"],[5625,24,5898,22,"replay"],[5625,30,5898,28],[5625,32,5898,30,"event"],[5625,37,5898,35],[5625,39,5898,37,"isCheckout"],[5625,49,5898,47],[5625,51,5898,49],[5626,4,5899,2],[5626,8,5899,6],[5626,9,5899,7,"shouldAddEvent"],[5626,23,5899,21],[5626,24,5899,22,"replay"],[5626,30,5899,28],[5626,32,5899,30,"event"],[5626,37,5899,35],[5626,38,5899,36],[5626,40,5899,38],[5627,6,5900,4],[5627,13,5900,11],[5627,18,5900,16],[5628,4,5901,2],[5630,4,5903,2],[5631,4,5904,2],[5632,4,5905,2,"_addEvent"],[5632,13,5905,11],[5632,14,5905,12,"replay"],[5632,20,5905,18],[5632,22,5905,20,"event"],[5632,27,5905,25],[5632,29,5905,27,"isCheckout"],[5632,39,5905,37],[5632,40,5905,38],[5633,4,5907,2],[5633,11,5907,9],[5633,15,5907,13],[5634,2,5908,0],[5636,2,5910,0],[5637,0,5911,0],[5638,0,5912,0],[5639,0,5913,0],[5640,0,5914,0],[5641,0,5915,0],[5642,2,5916,0],[5642,11,5916,9,"addEvent"],[5642,19,5916,17,"addEvent"],[5642,20,5917,2,"replay"],[5642,26,5917,8],[5642,28,5918,2,"event"],[5642,33,5918,7],[5642,35,5919,2,"isCheckout"],[5642,45,5919,12],[5642,47,5920,2],[5643,4,5921,2],[5643,8,5921,6],[5643,9,5921,7,"shouldAddEvent"],[5643,23,5921,21],[5643,24,5921,22,"replay"],[5643,30,5921,28],[5643,32,5921,30,"event"],[5643,37,5921,35],[5643,38,5921,36],[5643,40,5921,38],[5644,6,5922,4],[5644,13,5922,11,"Promise"],[5644,20,5922,18],[5644,21,5922,19,"resolve"],[5644,28,5922,26],[5644,29,5922,27],[5644,33,5922,31],[5644,34,5922,32],[5645,4,5923,2],[5646,4,5925,2],[5646,11,5925,9,"_addEvent"],[5646,20,5925,18],[5646,21,5925,19,"replay"],[5646,27,5925,25],[5646,29,5925,27,"event"],[5646,34,5925,32],[5646,36,5925,34,"isCheckout"],[5646,46,5925,44],[5646,47,5925,45],[5647,2,5926,0],[5648,2,5928,0],[5648,17,5928,15,"_addEvent"],[5648,26,5928,24,"_addEvent"],[5648,27,5929,2,"replay"],[5648,33,5929,8],[5648,35,5930,2,"event"],[5648,40,5930,7],[5648,42,5931,2,"isCheckout"],[5648,52,5931,12],[5648,54,5932,2],[5649,4,5933,2],[5649,10,5933,8],[5650,6,5933,10,"eventBuffer"],[5651,4,5933,22],[5651,5,5933,23],[5651,8,5933,26,"replay"],[5651,14,5933,32],[5652,4,5935,2],[5652,8,5935,6],[5652,9,5935,7,"eventBuffer"],[5652,20,5935,18],[5652,24,5935,23,"eventBuffer"],[5652,35,5935,34],[5652,36,5935,35,"waitForCheckout"],[5652,51,5935,50],[5652,55,5935,54],[5652,56,5935,55,"isCheckout"],[5652,66,5935,66],[5652,68,5935,68],[5653,6,5936,4],[5653,13,5936,11],[5653,17,5936,15],[5654,4,5937,2],[5655,4,5939,2],[5655,10,5939,8,"isBufferMode"],[5655,22,5939,20],[5655,25,5939,23,"replay"],[5655,31,5939,29],[5655,32,5939,30,"recordingMode"],[5655,45,5939,43],[5655,50,5939,48],[5655,58,5939,56],[5656,4,5941,2],[5656,8,5941,6],[5657,6,5942,4],[5657,10,5942,8,"isCheckout"],[5657,20,5942,18],[5657,24,5942,22,"isBufferMode"],[5657,36,5942,34],[5657,38,5942,36],[5658,8,5943,6,"eventBuffer"],[5658,19,5943,17],[5658,20,5943,18,"clear"],[5658,25,5943,23],[5658,26,5943,24],[5658,27,5943,25],[5659,6,5944,4],[5660,6,5946,4],[5660,10,5946,8,"isCheckout"],[5660,20,5946,18],[5660,22,5946,20],[5661,8,5947,6,"eventBuffer"],[5661,19,5947,17],[5661,20,5947,18,"hasCheckout"],[5661,31,5947,29],[5661,34,5947,32],[5661,38,5947,36],[5662,8,5948,6,"eventBuffer"],[5662,19,5948,17],[5662,20,5948,18,"waitForCheckout"],[5662,35,5948,33],[5662,38,5948,36],[5662,43,5948,41],[5663,6,5949,4],[5664,6,5951,4],[5664,12,5951,10,"replayOptions"],[5664,25,5951,23],[5664,28,5951,26,"replay"],[5664,34,5951,32],[5664,35,5951,33,"getOptions"],[5664,45,5951,43],[5664,46,5951,44],[5664,47,5951,45],[5665,6,5953,4],[5665,12,5953,10,"eventAfterPossibleCallback"],[5665,38,5953,36],[5665,41,5953,39,"maybeApplyCallback"],[5665,59,5953,57],[5665,60,5953,58,"event"],[5665,65,5953,63],[5665,67,5953,65,"replayOptions"],[5665,80,5953,78],[5665,81,5953,79,"beforeAddRecordingEvent"],[5665,104,5953,102],[5665,105,5953,103],[5666,6,5955,4],[5666,10,5955,8],[5666,11,5955,9,"eventAfterPossibleCallback"],[5666,37,5955,35],[5666,39,5955,37],[5667,8,5956,6],[5668,6,5957,4],[5669,6,5959,4],[5669,13,5959,11],[5669,19,5959,17,"eventBuffer"],[5669,30,5959,28],[5669,31,5959,29,"addEvent"],[5669,39,5959,37],[5669,40,5959,38,"eventAfterPossibleCallback"],[5669,66,5959,64],[5669,67,5959,65],[5670,4,5960,2],[5670,5,5960,3],[5670,6,5960,4],[5670,13,5960,11,"error"],[5670,18,5960,16],[5670,20,5960,18],[5671,6,5961,4],[5671,12,5961,10,"isExceeded"],[5671,22,5961,20],[5671,25,5961,23,"error"],[5671,30,5961,28],[5671,34,5961,32,"error"],[5671,39,5961,37],[5671,51,5961,49,"EventBufferSizeExceededError"],[5671,79,5961,77],[5672,6,5962,4],[5672,12,5962,10,"reason"],[5672,18,5962,16],[5672,21,5962,19,"isExceeded"],[5672,31,5962,29],[5672,34,5962,32],[5672,56,5962,54],[5672,59,5962,57],[5672,69,5962,67],[5673,6,5964,4],[5673,10,5964,8,"isExceeded"],[5673,20,5964,18],[5673,24,5964,22,"isBufferMode"],[5673,36,5964,34],[5673,38,5964,36],[5674,8,5965,6],[5675,8,5966,6,"eventBuffer"],[5675,19,5966,17],[5675,20,5966,18,"clear"],[5675,25,5966,23],[5675,26,5966,24],[5675,27,5966,25],[5676,8,5967,6,"eventBuffer"],[5676,19,5967,17],[5676,20,5967,18,"waitForCheckout"],[5676,35,5967,33],[5676,38,5967,36],[5676,42,5967,40],[5677,8,5969,6],[5677,15,5969,13],[5677,19,5969,17],[5678,6,5970,4],[5679,6,5972,4,"replay"],[5679,12,5972,10],[5679,13,5972,11,"handleException"],[5679,28,5972,26],[5679,29,5972,27,"error"],[5679,34,5972,32],[5679,35,5972,33],[5680,6,5974,4],[5680,12,5974,10,"replay"],[5680,18,5974,16],[5680,19,5974,17,"stop"],[5680,23,5974,21],[5680,24,5974,22],[5681,8,5974,24,"reason"],[5682,6,5974,31],[5682,7,5974,32],[5682,8,5974,33],[5683,6,5976,4],[5683,12,5976,10,"client"],[5683,18,5976,16],[5683,21,5976,19],[5683,25,5976,19,"getClient"],[5683,40,5976,28],[5683,42,5976,29],[5683,43,5976,30],[5684,6,5978,4],[5684,10,5978,8,"client"],[5684,16,5978,14],[5684,18,5978,16],[5685,8,5979,6,"client"],[5685,14,5979,12],[5685,15,5979,13,"recordDroppedEvent"],[5685,33,5979,31],[5685,34,5979,32],[5685,54,5979,52],[5685,56,5979,54],[5685,64,5979,62],[5685,65,5979,63],[5686,6,5980,4],[5687,4,5981,2],[5688,2,5982,0],[5690,2,5984,0],[5691,2,5985,0],[5691,11,5985,9,"shouldAddEvent"],[5691,25,5985,23,"shouldAddEvent"],[5691,26,5985,24,"replay"],[5691,32,5985,30],[5691,34,5985,32,"event"],[5691,39,5985,37],[5691,41,5985,39],[5692,4,5986,2],[5692,8,5986,6],[5692,9,5986,7,"replay"],[5692,15,5986,13],[5692,16,5986,14,"eventBuffer"],[5692,27,5986,25],[5692,31,5986,29,"replay"],[5692,37,5986,35],[5692,38,5986,36,"isPaused"],[5692,46,5986,44],[5692,47,5986,45],[5692,48,5986,46],[5692,52,5986,50],[5692,53,5986,51,"replay"],[5692,59,5986,57],[5692,60,5986,58,"isEnabled"],[5692,69,5986,67],[5692,70,5986,68],[5692,71,5986,69],[5692,73,5986,71],[5693,6,5987,4],[5693,13,5987,11],[5693,18,5987,16],[5694,4,5988,2],[5695,4,5990,2],[5695,10,5990,8,"timestampInMs"],[5695,23,5990,21],[5695,26,5990,24,"timestampToMs"],[5695,39,5990,37],[5695,40,5990,38,"event"],[5695,45,5990,43],[5695,46,5990,44,"timestamp"],[5695,55,5990,53],[5695,56,5990,54],[5697,4,5992,2],[5698,4,5993,2],[5699,4,5994,2],[5700,4,5995,2],[5701,4,5996,2],[5701,8,5996,6,"timestampInMs"],[5701,21,5996,19],[5701,24,5996,22,"replay"],[5701,30,5996,28],[5701,31,5996,29,"timeouts"],[5701,39,5996,37],[5701,40,5996,38,"sessionIdlePause"],[5701,56,5996,54],[5701,59,5996,57,"Date"],[5701,63,5996,61],[5701,64,5996,62,"now"],[5701,67,5996,65],[5701,68,5996,66],[5701,69,5996,67],[5701,71,5996,69],[5702,6,5997,4],[5702,13,5997,11],[5702,18,5997,16],[5703,4,5998,2],[5705,4,6000,2],[5706,4,6001,2],[5706,8,6001,6,"timestampInMs"],[5706,21,6001,19],[5706,24,6001,22,"replay"],[5706,30,6001,28],[5706,31,6001,29,"getContext"],[5706,41,6001,39],[5706,42,6001,40],[5706,43,6001,41],[5706,44,6001,42,"initialTimestamp"],[5706,60,6001,58],[5706,63,6001,61,"replay"],[5706,69,6001,67],[5706,70,6001,68,"getOptions"],[5706,80,6001,78],[5706,81,6001,79],[5706,82,6001,80],[5706,83,6001,81,"maxReplayDuration"],[5706,100,6001,98],[5706,102,6001,100],[5707,6,6002,4,"DEBUG_BUILD"],[5707,17,6002,15],[5707,21,6003,6,"logger"],[5707,27,6003,12],[5707,28,6003,13,"infoTick"],[5707,36,6003,21],[5707,37,6003,22],[5707,70,6003,55,"timestampInMs"],[5707,83,6003,68],[5707,123,6003,108],[5707,124,6003,109],[5708,6,6004,4],[5708,13,6004,11],[5708,18,6004,16],[5709,4,6005,2],[5710,4,6007,2],[5710,11,6007,9],[5710,15,6007,13],[5711,2,6008,0],[5712,2,6010,0],[5712,11,6010,9,"maybeApplyCallback"],[5712,29,6010,27,"maybeApplyCallback"],[5712,30,6011,2,"event"],[5712,35,6011,7],[5712,37,6012,2,"callback"],[5712,45,6012,10],[5712,47,6013,2],[5713,4,6014,2],[5713,8,6014,6],[5714,6,6015,4],[5714,10,6015,8],[5714,17,6015,15,"callback"],[5714,25,6015,23],[5714,30,6015,28],[5714,40,6015,38],[5714,44,6015,42,"isCustomEvent"],[5714,57,6015,55],[5714,58,6015,56,"event"],[5714,63,6015,61],[5714,64,6015,62],[5714,66,6015,64],[5715,8,6016,6],[5715,15,6016,13,"callback"],[5715,23,6016,21],[5715,24,6016,22,"event"],[5715,29,6016,27],[5715,30,6016,28],[5716,6,6017,4],[5717,4,6018,2],[5717,5,6018,3],[5717,6,6018,4],[5717,13,6018,11,"error"],[5717,18,6018,16],[5717,20,6018,18],[5718,6,6019,4,"DEBUG_BUILD"],[5718,17,6019,15],[5718,21,6020,6,"logger"],[5718,27,6020,12],[5718,28,6020,13,"exception"],[5718,37,6020,22],[5718,38,6020,23,"error"],[5718,43,6020,28],[5718,45,6020,30],[5718,129,6020,114],[5718,130,6020,115],[5719,6,6021,4],[5719,13,6021,11],[5719,17,6021,15],[5720,4,6022,2],[5721,4,6024,2],[5721,11,6024,9,"event"],[5721,16,6024,14],[5722,2,6025,0],[5724,2,6027,0],[5725,2,6028,0],[5725,11,6028,9,"isErrorEvent"],[5725,23,6028,21,"isErrorEvent"],[5725,24,6028,22,"event"],[5725,29,6028,27],[5725,31,6028,29],[5726,4,6029,2],[5726,11,6029,9],[5726,12,6029,10,"event"],[5726,17,6029,15],[5726,18,6029,16,"type"],[5726,22,6029,20],[5727,2,6030,0],[5729,2,6032,0],[5730,2,6033,0],[5730,11,6033,9,"isTransactionEvent"],[5730,29,6033,27,"isTransactionEvent"],[5730,30,6033,28,"event"],[5730,35,6033,33],[5730,37,6033,35],[5731,4,6034,2],[5731,11,6034,9,"event"],[5731,16,6034,14],[5731,17,6034,15,"type"],[5731,21,6034,19],[5731,26,6034,24],[5731,39,6034,37],[5732,2,6035,0],[5734,2,6037,0],[5735,2,6038,0],[5735,11,6038,9,"isReplayEvent"],[5735,24,6038,22,"isReplayEvent"],[5735,25,6038,23,"event"],[5735,30,6038,28],[5735,32,6038,30],[5736,4,6039,2],[5736,11,6039,9,"event"],[5736,16,6039,14],[5736,17,6039,15,"type"],[5736,21,6039,19],[5736,26,6039,24],[5736,40,6039,38],[5737,2,6040,0],[5739,2,6042,0],[5740,2,6043,0],[5740,11,6043,9,"isFeedbackEvent"],[5740,26,6043,24,"isFeedbackEvent"],[5740,27,6043,25,"event"],[5740,32,6043,30],[5740,34,6043,32],[5741,4,6044,2],[5741,11,6044,9,"event"],[5741,16,6044,14],[5741,17,6044,15,"type"],[5741,21,6044,19],[5741,26,6044,24],[5741,36,6044,34],[5742,2,6045,0],[5744,2,6047,0],[5745,0,6048,0],[5746,0,6049,0],[5747,2,6050,0],[5747,11,6050,9,"handleAfterSendEvent"],[5747,31,6050,29,"handleAfterSendEvent"],[5747,32,6050,30,"replay"],[5747,38,6050,36],[5747,40,6050,38],[5748,4,6051,2],[5748,11,6051,9],[5748,12,6051,10,"event"],[5748,17,6051,15],[5748,19,6051,17,"sendResponse"],[5748,31,6051,29],[5748,36,6051,34],[5749,6,6052,4],[5749,10,6052,8],[5749,11,6052,9,"replay"],[5749,17,6052,15],[5749,18,6052,16,"isEnabled"],[5749,27,6052,25],[5749,28,6052,26],[5749,29,6052,27],[5749,33,6052,32],[5749,34,6052,33,"isErrorEvent"],[5749,46,6052,45],[5749,47,6052,46,"event"],[5749,52,6052,51],[5749,53,6052,52],[5749,57,6052,56],[5749,58,6052,57,"isTransactionEvent"],[5749,76,6052,75],[5749,77,6052,76,"event"],[5749,82,6052,81],[5749,83,6052,83],[5749,85,6052,85],[5750,8,6053,6],[5751,6,6054,4],[5752,6,6056,4],[5752,12,6056,10,"statusCode"],[5752,22,6056,20],[5752,25,6056,23,"sendResponse"],[5752,37,6056,35],[5752,41,6056,39,"sendResponse"],[5752,53,6056,51],[5752,54,6056,52,"statusCode"],[5752,64,6056,62],[5754,6,6058,4],[5755,6,6059,4],[5756,6,6060,4],[5757,6,6061,4],[5757,10,6061,8],[5757,11,6061,9,"statusCode"],[5757,21,6061,19],[5757,25,6061,23,"statusCode"],[5757,35,6061,33],[5757,38,6061,36],[5757,41,6061,39],[5757,45,6061,43,"statusCode"],[5757,55,6061,53],[5757,59,6061,57],[5757,62,6061,60],[5757,64,6061,62],[5758,8,6062,6],[5759,6,6063,4],[5760,6,6065,4],[5760,10,6065,8,"isTransactionEvent"],[5760,28,6065,26],[5760,29,6065,27,"event"],[5760,34,6065,32],[5760,35,6065,33],[5760,37,6065,35],[5761,8,6066,6,"handleTransactionEvent"],[5761,30,6066,28],[5761,31,6066,29,"replay"],[5761,37,6066,35],[5761,39,6066,37,"event"],[5761,44,6066,42],[5761,45,6066,43],[5762,8,6067,6],[5763,6,6068,4],[5764,6,6070,4,"handleErrorEvent"],[5764,22,6070,20],[5764,23,6070,21,"replay"],[5764,29,6070,27],[5764,31,6070,29,"event"],[5764,36,6070,34],[5764,37,6070,35],[5765,4,6071,2],[5765,5,6071,3],[5766,2,6072,0],[5767,2,6074,0],[5767,11,6074,9,"handleTransactionEvent"],[5767,33,6074,31,"handleTransactionEvent"],[5767,34,6074,32,"replay"],[5767,40,6074,38],[5767,42,6074,40,"event"],[5767,47,6074,45],[5767,49,6074,47],[5768,4,6075,2],[5768,10,6075,8,"replayContext"],[5768,23,6075,21],[5768,26,6075,24,"replay"],[5768,32,6075,30],[5768,33,6075,31,"getContext"],[5768,43,6075,41],[5768,44,6075,42],[5768,45,6075,43],[5770,4,6077,2],[5771,4,6078,2],[5772,4,6079,2],[5773,4,6080,2],[5773,8,6080,6,"event"],[5773,13,6080,11],[5773,14,6080,12,"contexts"],[5773,22,6080,20],[5773,26,6080,24,"event"],[5773,31,6080,29],[5773,32,6080,30,"contexts"],[5773,40,6080,38],[5773,41,6080,39,"trace"],[5773,46,6080,44],[5773,50,6080,48,"event"],[5773,55,6080,53],[5773,56,6080,54,"contexts"],[5773,64,6080,62],[5773,65,6080,63,"trace"],[5773,70,6080,68],[5773,71,6080,69,"trace_id"],[5773,79,6080,77],[5773,83,6080,81,"replayContext"],[5773,96,6080,94],[5773,97,6080,95,"traceIds"],[5773,105,6080,103],[5773,106,6080,104,"size"],[5773,110,6080,108],[5773,113,6080,111],[5773,116,6080,114],[5773,118,6080,116],[5774,6,6081,4,"replayContext"],[5774,19,6081,17],[5774,20,6081,18,"traceIds"],[5774,28,6081,26],[5774,29,6081,27,"add"],[5774,32,6081,30],[5774,33,6081,31,"event"],[5774,38,6081,36],[5774,39,6081,37,"contexts"],[5774,47,6081,45],[5774,48,6081,46,"trace"],[5774,53,6081,51],[5774,54,6081,52,"trace_id"],[5774,62,6081,61],[5774,63,6081,62],[5775,4,6082,2],[5776,2,6083,0],[5777,2,6085,0],[5777,11,6085,9,"handleErrorEvent"],[5777,27,6085,25,"handleErrorEvent"],[5777,28,6085,26,"replay"],[5777,34,6085,32],[5777,36,6085,34,"event"],[5777,41,6085,39],[5777,43,6085,41],[5778,4,6086,2],[5778,10,6086,8,"replayContext"],[5778,23,6086,21],[5778,26,6086,24,"replay"],[5778,32,6086,30],[5778,33,6086,31,"getContext"],[5778,43,6086,41],[5778,44,6086,42],[5778,45,6086,43],[5780,4,6088,2],[5781,4,6089,2],[5782,4,6090,2],[5783,4,6091,2],[5784,4,6092,2],[5785,4,6093,2],[5786,4,6094,2],[5786,8,6094,6,"event"],[5786,13,6094,11],[5786,14,6094,12,"event_id"],[5786,22,6094,20],[5786,26,6094,24,"replayContext"],[5786,39,6094,37],[5786,40,6094,38,"errorIds"],[5786,48,6094,46],[5786,49,6094,47,"size"],[5786,53,6094,51],[5786,56,6094,54],[5786,59,6094,57],[5786,61,6094,59],[5787,6,6095,4,"replayContext"],[5787,19,6095,17],[5787,20,6095,18,"errorIds"],[5787,28,6095,26],[5787,29,6095,27,"add"],[5787,32,6095,30],[5787,33,6095,31,"event"],[5787,38,6095,36],[5787,39,6095,37,"event_id"],[5787,47,6095,45],[5787,48,6095,46],[5788,4,6096,2],[5790,4,6098,2],[5791,4,6099,2],[5792,4,6100,2],[5792,8,6100,6,"replay"],[5792,14,6100,12],[5792,15,6100,13,"recordingMode"],[5792,28,6100,26],[5792,33,6100,31],[5792,41,6100,39],[5792,45,6100,43],[5792,46,6100,44,"event"],[5792,51,6100,49],[5792,52,6100,50,"tags"],[5792,56,6100,54],[5792,60,6100,58],[5792,61,6100,59,"event"],[5792,66,6100,64],[5792,67,6100,65,"tags"],[5792,71,6100,69],[5792,72,6100,70,"replayId"],[5792,80,6100,78],[5792,82,6100,80],[5793,6,6101,4],[5794,4,6102,2],[5795,4,6104,2],[5795,10,6104,8],[5796,6,6104,10,"beforeErrorSampling"],[5797,4,6104,30],[5797,5,6104,31],[5797,8,6104,34,"replay"],[5797,14,6104,40],[5797,15,6104,41,"getOptions"],[5797,25,6104,51],[5797,26,6104,52],[5797,27,6104,53],[5798,4,6105,2],[5798,8,6105,6],[5798,15,6105,13,"beforeErrorSampling"],[5798,34,6105,32],[5798,39,6105,37],[5798,49,6105,47],[5798,53,6105,51],[5798,54,6105,52,"beforeErrorSampling"],[5798,73,6105,71],[5798,74,6105,72,"event"],[5798,79,6105,77],[5798,80,6105,78],[5798,82,6105,80],[5799,6,6106,4],[5800,4,6107,2],[5801,4,6109,2],[5801,8,6109,2,"setTimeout$3"],[5801,32,6109,14],[5801,34,6109,15],[5801,46,6109,27],[5802,6,6110,4],[5802,10,6110,8],[5803,8,6111,6],[5804,8,6112,6],[5804,14,6112,12,"replay"],[5804,20,6112,18],[5804,21,6112,19,"sendBufferedReplayOrFlush"],[5804,46,6112,44],[5804,47,6112,45],[5804,48,6112,46],[5805,6,6113,4],[5805,7,6113,5],[5805,8,6113,6],[5805,15,6113,13,"err"],[5805,18,6113,16],[5805,20,6113,18],[5806,8,6114,6,"replay"],[5806,14,6114,12],[5806,15,6114,13,"handleException"],[5806,30,6114,28],[5806,31,6114,29,"err"],[5806,34,6114,32],[5806,35,6114,33],[5807,6,6115,4],[5808,4,6116,2],[5808,5,6116,3],[5808,6,6116,4],[5809,2,6117,0],[5811,2,6119,0],[5812,0,6120,0],[5813,0,6121,0],[5814,2,6122,0],[5814,11,6122,9,"handleBeforeSendEvent"],[5814,32,6122,30,"handleBeforeSendEvent"],[5814,33,6122,31,"replay"],[5814,39,6122,37],[5814,41,6122,39],[5815,4,6123,2],[5815,11,6123,10,"event"],[5815,16,6123,15],[5815,20,6123,20],[5816,6,6124,4],[5816,10,6124,8],[5816,11,6124,9,"replay"],[5816,17,6124,15],[5816,18,6124,16,"isEnabled"],[5816,27,6124,25],[5816,28,6124,26],[5816,29,6124,27],[5816,33,6124,31],[5816,34,6124,32,"isErrorEvent"],[5816,46,6124,44],[5816,47,6124,45,"event"],[5816,52,6124,50],[5816,53,6124,51],[5816,55,6124,53],[5817,8,6125,6],[5818,6,6126,4],[5819,6,6128,4,"handleHydrationError"],[5819,26,6128,24],[5819,27,6128,25,"replay"],[5819,33,6128,31],[5819,35,6128,33,"event"],[5819,40,6128,38],[5819,41,6128,39],[5820,4,6129,2],[5820,5,6129,3],[5821,2,6130,0],[5822,2,6132,0],[5822,11,6132,9,"handleHydrationError"],[5822,31,6132,29,"handleHydrationError"],[5822,32,6132,30,"replay"],[5822,38,6132,36],[5822,40,6132,38,"event"],[5822,45,6132,43],[5822,47,6132,45],[5823,4,6133,2],[5823,10,6133,8,"exceptionValue"],[5823,24,6133,22],[5823,27,6134,4,"event"],[5823,32,6134,9],[5823,33,6134,10,"exception"],[5823,42,6134,19],[5823,46,6134,23,"event"],[5823,51,6134,28],[5823,52,6134,29,"exception"],[5823,61,6134,38],[5823,62,6134,39,"values"],[5823,68,6134,45],[5823,72,6134,49,"event"],[5823,77,6134,54],[5823,78,6134,55,"exception"],[5823,87,6134,64],[5823,88,6134,65,"values"],[5823,94,6134,71],[5823,95,6134,72],[5823,96,6134,73],[5823,97,6134,74],[5823,101,6134,78,"event"],[5823,106,6134,83],[5823,107,6134,84,"exception"],[5823,116,6134,93],[5823,117,6134,94,"values"],[5823,123,6134,100],[5823,124,6134,101],[5823,125,6134,102],[5823,126,6134,103],[5823,127,6134,104,"value"],[5823,132,6134,109],[5824,4,6135,2],[5824,8,6135,6],[5824,15,6135,13,"exceptionValue"],[5824,29,6135,27],[5824,34,6135,32],[5824,42,6135,40],[5824,44,6135,42],[5825,6,6136,4],[5826,4,6137,2],[5827,4,6139,2],[5828,4,6140,4],[5829,4,6141,4],[5830,4,6142,4],[5831,4,6143,4,"exceptionValue"],[5831,18,6143,18],[5831,19,6143,19,"match"],[5831,24,6143,24],[5831,25,6144,6],[5831,122,6145,4],[5831,123,6145,5],[5832,4,6146,4],[5833,4,6147,4],[5834,4,6148,4],[5835,4,6149,4,"exceptionValue"],[5835,18,6149,18],[5835,19,6149,19,"match"],[5835,24,6149,24],[5835,25,6149,25],[5835,90,6149,90],[5835,91,6149,91],[5835,93,6150,4],[5836,6,6151,4],[5836,12,6151,10,"breadcrumb"],[5836,22,6151,20],[5836,25,6151,23,"createBreadcrumb"],[5836,41,6151,39],[5836,42,6151,40],[5837,8,6152,6,"category"],[5837,16,6152,14],[5837,18,6152,16],[5837,40,6152,38],[5838,8,6153,6,"data"],[5838,12,6153,10],[5838,14,6153,12],[5839,10,6154,8,"url"],[5839,13,6154,11],[5839,15,6154,13],[5839,19,6154,13,"getLocationHref"],[5839,40,6154,28],[5839,42,6154,29],[5840,8,6155,6],[5841,6,6156,4],[5841,7,6156,5],[5841,8,6156,6],[5842,6,6157,4,"addBreadcrumbEvent"],[5842,24,6157,22],[5842,25,6157,23,"replay"],[5842,31,6157,29],[5842,33,6157,31,"breadcrumb"],[5842,43,6157,41],[5842,44,6157,42],[5843,4,6158,2],[5844,2,6159,0],[5846,2,6161,0],[5847,0,6162,0],[5848,0,6163,0],[5849,2,6164,0],[5849,11,6164,9,"handleBreadcrumbs"],[5849,28,6164,26,"handleBreadcrumbs"],[5849,29,6164,27,"replay"],[5849,35,6164,33],[5849,37,6164,35],[5850,4,6165,2],[5850,10,6165,8,"client"],[5850,16,6165,14],[5850,19,6165,17],[5850,23,6165,17,"getClient"],[5850,38,6165,26],[5850,40,6165,27],[5850,41,6165,28],[5851,4,6167,2],[5851,8,6167,6],[5851,9,6167,7,"client"],[5851,15,6167,13],[5851,17,6167,15],[5852,6,6168,4],[5853,4,6169,2],[5854,4,6171,2,"client"],[5854,10,6171,8],[5854,11,6171,9,"on"],[5854,13,6171,11],[5854,14,6171,12],[5854,35,6171,33],[5854,37,6171,35,"breadcrumb"],[5854,47,6171,45],[5854,51,6171,49,"beforeAddBreadcrumb"],[5854,70,6171,68],[5854,71,6171,69,"replay"],[5854,77,6171,75],[5854,79,6171,77,"breadcrumb"],[5854,89,6171,87],[5854,90,6171,88],[5854,91,6171,89],[5855,2,6172,0],[5856,2,6174,0],[5856,11,6174,9,"beforeAddBreadcrumb"],[5856,30,6174,28,"beforeAddBreadcrumb"],[5856,31,6174,29,"replay"],[5856,37,6174,35],[5856,39,6174,37,"breadcrumb"],[5856,49,6174,47],[5856,51,6174,49],[5857,4,6175,2],[5857,8,6175,6],[5857,9,6175,7,"replay"],[5857,15,6175,13],[5857,16,6175,14,"isEnabled"],[5857,25,6175,23],[5857,26,6175,24],[5857,27,6175,25],[5857,31,6175,29],[5857,32,6175,30,"isBreadcrumbWithCategory"],[5857,56,6175,54],[5857,57,6175,55,"breadcrumb"],[5857,67,6175,65],[5857,68,6175,66],[5857,70,6175,68],[5858,6,6176,4],[5859,4,6177,2],[5860,4,6179,2],[5860,10,6179,8,"result"],[5860,16,6179,14],[5860,19,6179,17,"normalizeBreadcrumb"],[5860,38,6179,36],[5860,39,6179,37,"breadcrumb"],[5860,49,6179,47],[5860,50,6179,48],[5861,4,6180,2],[5861,8,6180,6,"result"],[5861,14,6180,12],[5861,16,6180,14],[5862,6,6181,4,"addBreadcrumbEvent"],[5862,24,6181,22],[5862,25,6181,23,"replay"],[5862,31,6181,29],[5862,33,6181,31,"result"],[5862,39,6181,37],[5862,40,6181,38],[5863,4,6182,2],[5864,2,6183,0],[5866,2,6185,0],[5867,2,6186,0],[5867,11,6186,9,"normalizeBreadcrumb"],[5867,30,6186,28,"normalizeBreadcrumb"],[5867,31,6186,29,"breadcrumb"],[5867,41,6186,39],[5867,43,6186,41],[5868,4,6187,2],[5868,8,6188,4],[5868,9,6188,5,"isBreadcrumbWithCategory"],[5868,33,6188,29],[5868,34,6188,30,"breadcrumb"],[5868,44,6188,40],[5868,45,6188,41],[5868,49,6189,4],[5869,4,6190,6],[5870,4,6191,6],[5870,11,6191,13],[5870,13,6192,6],[5870,18,6192,11],[5871,4,6193,6],[5872,4,6194,6],[5872,18,6194,20],[5872,20,6195,6],[5872,40,6195,26],[5872,41,6196,5],[5872,42,6196,6,"includes"],[5872,50,6196,14],[5872,51,6196,15,"breadcrumb"],[5872,61,6196,25],[5872,62,6196,26,"category"],[5872,70,6196,34],[5872,71,6196,35],[5873,4,6197,4],[5874,4,6198,4,"breadcrumb"],[5874,14,6198,14],[5874,15,6198,15,"category"],[5874,23,6198,23],[5874,24,6198,24,"startsWith"],[5874,34,6198,34],[5874,35,6198,35],[5874,40,6198,40],[5874,41,6198,41],[5874,43,6199,4],[5875,6,6200,4],[5875,13,6200,11],[5875,17,6200,15],[5876,4,6201,2],[5877,4,6203,2],[5877,8,6203,6,"breadcrumb"],[5877,18,6203,16],[5877,19,6203,17,"category"],[5877,27,6203,25],[5877,32,6203,30],[5877,41,6203,39],[5877,43,6203,41],[5878,6,6204,4],[5878,13,6204,11,"normalizeConsoleBreadcrumb"],[5878,39,6204,37],[5878,40,6204,38,"breadcrumb"],[5878,50,6204,48],[5878,51,6204,49],[5879,4,6205,2],[5880,4,6207,2],[5880,11,6207,9,"createBreadcrumb"],[5880,27,6207,25],[5880,28,6207,26,"breadcrumb"],[5880,38,6207,36],[5880,39,6207,37],[5881,2,6208,0],[5883,2,6210,0],[5884,2,6211,0],[5884,11,6211,9,"normalizeConsoleBreadcrumb"],[5884,37,6211,35,"normalizeConsoleBreadcrumb"],[5884,38,6212,2,"breadcrumb"],[5884,48,6212,12],[5884,50,6213,2],[5885,4,6214,2],[5885,10,6214,8,"args"],[5885,14,6214,12],[5885,17,6214,15,"breadcrumb"],[5885,27,6214,25],[5885,28,6214,26,"data"],[5885,32,6214,30],[5885,36,6214,34,"breadcrumb"],[5885,46,6214,44],[5885,47,6214,45,"data"],[5885,51,6214,49],[5885,52,6214,50,"arguments"],[5885,61,6214,59],[5886,4,6216,2],[5886,8,6216,6],[5886,9,6216,7,"Array"],[5886,14,6216,12],[5886,15,6216,13,"isArray"],[5886,22,6216,20],[5886,23,6216,21,"args"],[5886,27,6216,25],[5886,28,6216,26],[5886,32,6216,30,"args"],[5886,36,6216,34],[5886,37,6216,35,"length"],[5886,43,6216,41],[5886,48,6216,46],[5886,49,6216,47],[5886,51,6216,49],[5887,6,6217,4],[5887,13,6217,11,"createBreadcrumb"],[5887,29,6217,27],[5887,30,6217,28,"breadcrumb"],[5887,40,6217,38],[5887,41,6217,39],[5888,4,6218,2],[5889,4,6220,2],[5889,8,6220,6,"isTruncated"],[5889,19,6220,17],[5889,22,6220,20],[5889,27,6220,25],[5891,4,6222,2],[5892,4,6223,2],[5892,10,6223,8,"normalizedArgs"],[5892,24,6223,22],[5892,27,6223,25,"args"],[5892,31,6223,29],[5892,32,6223,30,"map"],[5892,35,6223,33],[5892,36,6223,34,"arg"],[5892,39,6223,37],[5892,43,6223,41],[5893,6,6224,4],[5893,10,6224,8],[5893,11,6224,9,"arg"],[5893,14,6224,12],[5893,16,6224,14],[5894,8,6225,6],[5894,15,6225,13,"arg"],[5894,18,6225,16],[5895,6,6226,4],[5896,6,6227,4],[5896,10,6227,8],[5896,17,6227,15,"arg"],[5896,20,6227,18],[5896,25,6227,23],[5896,33,6227,31],[5896,35,6227,33],[5897,8,6228,6],[5897,12,6228,10,"arg"],[5897,15,6228,13],[5897,16,6228,14,"length"],[5897,22,6228,20],[5897,25,6228,23,"CONSOLE_ARG_MAX_SIZE"],[5897,45,6228,43],[5897,47,6228,45],[5898,10,6229,8,"isTruncated"],[5898,21,6229,19],[5898,24,6229,22],[5898,28,6229,26],[5899,10,6230,8],[5899,17,6230,15],[5899,20,6230,18,"arg"],[5899,23,6230,21],[5899,24,6230,22,"slice"],[5899,29,6230,27],[5899,30,6230,28],[5899,31,6230,29],[5899,33,6230,31,"CONSOLE_ARG_MAX_SIZE"],[5899,53,6230,51],[5899,54,6230,52],[5899,57,6230,55],[5900,8,6231,6],[5901,8,6233,6],[5901,15,6233,13,"arg"],[5901,18,6233,16],[5902,6,6234,4],[5903,6,6235,4],[5903,10,6235,8],[5903,17,6235,15,"arg"],[5903,20,6235,18],[5903,25,6235,23],[5903,33,6235,31],[5903,35,6235,33],[5904,8,6236,6],[5904,12,6236,10],[5905,10,6237,8],[5905,16,6237,14,"normalizedArg"],[5905,29,6237,27],[5905,32,6237,30],[5905,36,6237,30,"normalize"],[5905,51,6237,39],[5905,53,6237,40,"arg"],[5905,56,6237,43],[5905,58,6237,45],[5905,59,6237,46],[5905,60,6237,47],[5906,10,6238,8],[5906,16,6238,14,"stringified"],[5906,27,6238,25],[5906,30,6238,28,"JSON"],[5906,34,6238,32],[5906,35,6238,33,"stringify"],[5906,44,6238,42],[5906,45,6238,43,"normalizedArg"],[5906,58,6238,56],[5906,59,6238,57],[5907,10,6239,8],[5907,14,6239,12,"stringified"],[5907,25,6239,23],[5907,26,6239,24,"length"],[5907,32,6239,30],[5907,35,6239,33,"CONSOLE_ARG_MAX_SIZE"],[5907,55,6239,53],[5907,57,6239,55],[5908,12,6240,10,"isTruncated"],[5908,23,6240,21],[5908,26,6240,24],[5908,30,6240,28],[5909,12,6241,10],[5910,12,6242,10],[5910,19,6242,17],[5910,22,6242,20,"JSON"],[5910,26,6242,24],[5910,27,6242,25,"stringify"],[5910,36,6242,34],[5910,37,6242,35,"normalizedArg"],[5910,50,6242,48],[5910,52,6242,50],[5910,56,6242,54],[5910,58,6242,56],[5910,59,6242,57],[5910,60,6242,58],[5910,61,6242,59,"slice"],[5910,66,6242,64],[5910,67,6242,65],[5910,68,6242,66],[5910,70,6242,68,"CONSOLE_ARG_MAX_SIZE"],[5910,90,6242,88],[5910,91,6242,89],[5910,94,6242,92],[5911,10,6243,8],[5912,10,6244,8],[5912,17,6244,15,"normalizedArg"],[5912,30,6244,28],[5913,8,6245,6],[5913,9,6245,7],[5913,10,6245,8],[5913,17,6245,15,"e"],[5913,18,6245,16],[5913,20,6245,18],[5914,10,6246,8],[5915,8,6246,8],[5916,6,6248,4],[5917,6,6250,4],[5917,13,6250,11,"arg"],[5917,16,6250,14],[5918,4,6251,2],[5918,5,6251,3],[5918,6,6251,4],[5919,4,6253,2],[5919,11,6253,9,"createBreadcrumb"],[5919,27,6253,25],[5919,28,6253,26],[5920,6,6254,4],[5920,9,6254,7,"breadcrumb"],[5920,19,6254,17],[5921,6,6255,4,"data"],[5921,10,6255,8],[5921,12,6255,10],[5922,8,6256,6],[5922,11,6256,9,"breadcrumb"],[5922,21,6256,19],[5922,22,6256,20,"data"],[5922,26,6256,24],[5923,8,6257,6,"arguments"],[5923,17,6257,15],[5923,19,6257,17,"normalizedArgs"],[5923,33,6257,31],[5924,8,6258,6],[5924,12,6258,10,"isTruncated"],[5924,23,6258,21],[5924,26,6258,24],[5925,10,6258,26,"_meta"],[5925,15,6258,31],[5925,17,6258,33],[5926,12,6258,35,"warnings"],[5926,20,6258,43],[5926,22,6258,45],[5926,23,6258,46],[5926,46,6258,69],[5927,10,6258,71],[5928,8,6258,73],[5928,9,6258,74],[5928,12,6258,77],[5928,13,6258,78],[5928,14,6258,79],[5929,6,6259,4],[5930,4,6260,2],[5930,5,6260,3],[5930,6,6260,4],[5931,2,6261,0],[5932,2,6263,0],[5932,11,6263,9,"isBreadcrumbWithCategory"],[5932,35,6263,33,"isBreadcrumbWithCategory"],[5932,36,6263,34,"breadcrumb"],[5932,46,6263,44],[5932,48,6263,46],[5933,4,6264,2],[5933,11,6264,9],[5933,12,6264,10],[5933,13,6264,11,"breadcrumb"],[5933,23,6264,21],[5933,24,6264,22,"category"],[5933,32,6264,30],[5934,2,6265,0],[5936,2,6267,0],[5937,0,6268,0],[5938,0,6269,0],[5939,2,6270,0],[5939,11,6270,9,"isRrwebError"],[5939,23,6270,21,"isRrwebError"],[5939,24,6270,22,"event"],[5939,29,6270,27],[5939,31,6270,29,"hint"],[5939,35,6270,33],[5939,37,6270,35],[5940,4,6271,2],[5940,8,6271,6,"event"],[5940,13,6271,11],[5940,14,6271,12,"type"],[5940,18,6271,16],[5940,22,6271,20],[5940,23,6271,21,"event"],[5940,28,6271,26],[5940,29,6271,27,"exception"],[5940,38,6271,36],[5940,42,6271,40],[5940,43,6271,41,"event"],[5940,48,6271,46],[5940,49,6271,47,"exception"],[5940,58,6271,56],[5940,59,6271,57,"values"],[5940,65,6271,63],[5940,69,6271,67],[5940,70,6271,68,"event"],[5940,75,6271,73],[5940,76,6271,74,"exception"],[5940,85,6271,83],[5940,86,6271,84,"values"],[5940,92,6271,90],[5940,93,6271,91,"length"],[5940,99,6271,97],[5940,101,6271,99],[5941,6,6272,4],[5941,13,6272,11],[5941,18,6272,16],[5942,4,6273,2],[5944,4,6275,2],[5945,4,6276,2],[5945,8,6276,6,"hint"],[5945,12,6276,10],[5945,13,6276,11,"originalException"],[5945,30,6276,28],[5945,34,6276,32,"hint"],[5945,38,6276,36],[5945,39,6276,37,"originalException"],[5945,56,6276,54],[5945,57,6276,55,"__rrweb__"],[5945,66,6276,64],[5945,68,6276,66],[5946,6,6277,4],[5946,13,6277,11],[5946,17,6277,15],[5947,4,6278,2],[5948,4,6280,2],[5948,11,6280,9],[5948,16,6280,14],[5949,2,6281,0],[5951,2,6283,0],[5952,0,6284,0],[5953,0,6285,0],[5954,2,6286,0],[5954,11,6286,9,"resetReplayIdOnDynamicSamplingContext"],[5954,48,6286,46,"resetReplayIdOnDynamicSamplingContext"],[5954,49,6286,46],[5954,51,6286,49],[5955,4,6287,2],[5956,4,6288,2],[5956,10,6288,8,"dsc"],[5956,13,6288,11],[5956,16,6288,14],[5956,20,6288,14,"getCurrentScope"],[5956,41,6288,29],[5956,43,6288,30],[5956,44,6288,31],[5956,45,6288,32,"getPropagationContext"],[5956,66,6288,53],[5956,67,6288,54],[5956,68,6288,55],[5956,69,6288,56,"dsc"],[5956,72,6288,59],[5957,4,6289,2],[5957,8,6289,6,"dsc"],[5957,11,6289,9],[5957,13,6289,11],[5958,6,6290,4],[5958,13,6290,11,"dsc"],[5958,16,6290,14],[5958,17,6290,15,"replay_id"],[5958,26,6290,24],[5959,4,6291,2],[5961,4,6293,2],[5962,4,6294,2],[5962,10,6294,8,"activeSpan"],[5962,20,6294,18],[5962,23,6294,21],[5962,27,6294,21,"getActiveSpan"],[5962,46,6294,34],[5962,48,6294,35],[5962,49,6294,36],[5963,4,6295,2],[5963,8,6295,6,"activeSpan"],[5963,18,6295,16],[5963,20,6295,18],[5964,6,6296,4],[5964,12,6296,10,"dsc"],[5964,15,6296,13],[5964,18,6296,16],[5964,22,6296,16,"getDynamicSamplingContextFromSpan"],[5964,61,6296,49],[5964,63,6296,50,"activeSpan"],[5964,73,6296,60],[5964,74,6296,61],[5965,6,6297,4],[5965,13,6297,12,"dsc"],[5965,16,6297,15],[5965,17,6297,18,"replay_id"],[5965,26,6297,27],[5966,4,6298,2],[5967,2,6299,0],[5969,2,6301,0],[5970,0,6302,0],[5971,0,6303,0],[5972,2,6304,0],[5972,11,6304,9,"addFeedbackBreadcrumb"],[5972,32,6304,30,"addFeedbackBreadcrumb"],[5972,33,6304,31,"replay"],[5972,39,6304,37],[5972,41,6304,39,"event"],[5972,46,6304,44],[5972,48,6304,46],[5973,4,6305,2,"replay"],[5973,10,6305,8],[5973,11,6305,9,"triggerUserActivity"],[5973,30,6305,28],[5973,31,6305,29],[5973,32,6305,30],[5974,4,6306,2,"replay"],[5974,10,6306,8],[5974,11,6306,9,"addUpdate"],[5974,20,6306,18],[5974,21,6306,19],[5974,27,6306,25],[5975,6,6307,4],[5975,10,6307,8],[5975,11,6307,9,"event"],[5975,16,6307,14],[5975,17,6307,15,"timestamp"],[5975,26,6307,24],[5975,28,6307,26],[5976,8,6308,6],[5977,8,6309,6],[5978,8,6310,6],[5978,15,6310,13],[5978,19,6310,17],[5979,6,6311,4],[5981,6,6313,4],[5982,6,6314,4],[5983,6,6315,4,"replay"],[5983,12,6315,10],[5983,13,6315,11,"throttledAddEvent"],[5983,30,6315,28],[5983,31,6315,29],[5984,8,6316,6,"type"],[5984,12,6316,10],[5984,14,6316,12,"EventType"],[5984,23,6316,21],[5984,24,6316,22,"Custom"],[5984,30,6316,28],[5985,8,6317,6,"timestamp"],[5985,17,6317,15],[5985,19,6317,17,"event"],[5985,24,6317,22],[5985,25,6317,23,"timestamp"],[5985,34,6317,32],[5985,37,6317,35],[5985,41,6317,39],[5986,8,6318,6,"data"],[5986,12,6318,10],[5986,14,6318,12],[5987,10,6319,8,"tag"],[5987,13,6319,11],[5987,15,6319,13],[5987,27,6319,25],[5988,10,6320,8,"payload"],[5988,17,6320,15],[5988,19,6320,17],[5989,12,6321,10,"timestamp"],[5989,21,6321,19],[5989,23,6321,21,"event"],[5989,28,6321,26],[5989,29,6321,27,"timestamp"],[5989,38,6321,36],[5990,12,6322,10,"type"],[5990,16,6322,14],[5990,18,6322,16],[5990,27,6322,25],[5991,12,6323,10,"category"],[5991,20,6323,18],[5991,22,6323,20],[5991,39,6323,37],[5992,12,6324,10,"data"],[5992,16,6324,14],[5992,18,6324,16],[5993,14,6325,12,"feedbackId"],[5993,24,6325,22],[5993,26,6325,24,"event"],[5993,31,6325,29],[5993,32,6325,30,"event_id"],[5994,12,6326,10],[5995,10,6327,8],[5996,8,6328,6],[5997,6,6329,4],[5997,7,6329,6],[5997,8,6329,7],[5998,6,6331,4],[5998,13,6331,11],[5998,18,6331,16],[5999,4,6332,2],[5999,5,6332,3],[5999,6,6332,4],[6000,2,6333,0],[6002,2,6335,0],[6003,0,6336,0],[6004,0,6337,0],[6005,0,6338,0],[6006,0,6339,0],[6007,2,6340,0],[6007,11,6340,9,"shouldSampleForBufferEvent"],[6007,37,6340,35,"shouldSampleForBufferEvent"],[6007,38,6340,36,"replay"],[6007,44,6340,42],[6007,46,6340,44,"event"],[6007,51,6340,49],[6007,53,6340,51],[6008,4,6341,2],[6008,8,6341,6,"replay"],[6008,14,6341,12],[6008,15,6341,13,"recordingMode"],[6008,28,6341,26],[6008,33,6341,31],[6008,41,6341,39],[6008,43,6341,41],[6009,6,6342,4],[6009,13,6342,11],[6009,18,6342,16],[6010,4,6343,2],[6012,4,6345,2],[6013,4,6346,2],[6014,4,6347,2],[6014,8,6347,6,"event"],[6014,13,6347,11],[6014,14,6347,12,"message"],[6014,21,6347,19],[6014,26,6347,24,"UNABLE_TO_SEND_REPLAY"],[6014,47,6347,45],[6014,49,6347,47],[6015,6,6348,4],[6015,13,6348,11],[6015,18,6348,16],[6016,4,6349,2],[6018,4,6351,2],[6019,4,6352,2],[6019,8,6352,6],[6019,9,6352,7,"event"],[6019,14,6352,12],[6019,15,6352,13,"exception"],[6019,24,6352,22],[6019,28,6352,26,"event"],[6019,33,6352,31],[6019,34,6352,32,"type"],[6019,38,6352,36],[6019,40,6352,38],[6020,6,6353,4],[6020,13,6353,11],[6020,18,6353,16],[6021,4,6354,2],[6022,4,6356,2],[6022,11,6356,9,"isSampled"],[6022,20,6356,18],[6022,21,6356,19,"replay"],[6022,27,6356,25],[6022,28,6356,26,"getOptions"],[6022,38,6356,36],[6022,39,6356,37],[6022,40,6356,38],[6022,41,6356,39,"errorSampleRate"],[6022,56,6356,54],[6022,57,6356,55],[6023,2,6357,0],[6025,2,6359,0],[6026,0,6360,0],[6027,0,6361,0],[6028,2,6362,0],[6028,11,6362,9,"handleGlobalEventListener"],[6028,36,6362,34,"handleGlobalEventListener"],[6028,37,6362,35,"replay"],[6028,43,6362,41],[6028,45,6362,43],[6029,4,6363,2],[6029,11,6363,9,"Object"],[6029,17,6363,15],[6029,18,6363,16,"assign"],[6029,24,6363,22],[6029,25,6364,4],[6029,26,6364,5,"event"],[6029,31,6364,10],[6029,33,6364,12,"hint"],[6029,37,6364,16],[6029,42,6364,21],[6030,6,6365,6],[6031,6,6366,6],[6031,10,6366,10],[6031,11,6366,11,"replay"],[6031,17,6366,17],[6031,18,6366,18,"isEnabled"],[6031,27,6366,27],[6031,28,6366,28],[6031,29,6366,29],[6031,33,6366,33,"replay"],[6031,39,6366,39],[6031,40,6366,40,"isPaused"],[6031,48,6366,48],[6031,49,6366,49],[6031,50,6366,50],[6031,52,6366,52],[6032,8,6367,8],[6032,15,6367,15,"event"],[6032,20,6367,20],[6033,6,6368,6],[6034,6,6370,6],[6034,10,6370,10,"isReplayEvent"],[6034,23,6370,23],[6034,24,6370,24,"event"],[6034,29,6370,29],[6034,30,6370,30],[6034,32,6370,32],[6035,8,6371,8],[6036,8,6372,8],[6037,8,6373,8],[6037,15,6373,15,"event"],[6037,20,6373,20],[6037,21,6373,21,"breadcrumbs"],[6037,32,6373,32],[6038,8,6374,8],[6038,15,6374,15,"event"],[6038,20,6374,20],[6039,6,6375,6],[6041,6,6377,6],[6042,6,6378,6],[6042,10,6378,10],[6042,11,6378,11,"isErrorEvent"],[6042,23,6378,23],[6042,24,6378,24,"event"],[6042,29,6378,29],[6042,30,6378,30],[6042,34,6378,34],[6042,35,6378,35,"isTransactionEvent"],[6042,53,6378,53],[6042,54,6378,54,"event"],[6042,59,6378,59],[6042,60,6378,60],[6042,64,6378,64],[6042,65,6378,65,"isFeedbackEvent"],[6042,80,6378,80],[6042,81,6378,81,"event"],[6042,86,6378,86],[6042,87,6378,87],[6042,89,6378,89],[6043,8,6379,8],[6043,15,6379,15,"event"],[6043,20,6379,20],[6044,6,6380,6],[6046,6,6382,6],[6047,6,6383,6],[6047,12,6383,12,"isSessionActive"],[6047,27,6383,27],[6047,30,6383,30,"replay"],[6047,36,6383,36],[6047,37,6383,37,"checkAndHandleExpiredSession"],[6047,65,6383,65],[6047,66,6383,66],[6047,67,6383,67],[6048,6,6384,6],[6048,10,6384,10],[6048,11,6384,11,"isSessionActive"],[6048,26,6384,26],[6048,28,6384,28],[6049,8,6385,8],[6050,8,6386,8,"resetReplayIdOnDynamicSamplingContext"],[6050,45,6386,45],[6050,46,6386,46],[6050,47,6386,47],[6051,8,6387,8],[6051,15,6387,15,"event"],[6051,20,6387,20],[6052,6,6388,6],[6053,6,6390,6],[6053,10,6390,10,"isFeedbackEvent"],[6053,25,6390,25],[6053,26,6390,26,"event"],[6053,31,6390,31],[6053,32,6390,32],[6053,34,6390,34],[6054,8,6391,8],[6055,8,6392,8],[6056,8,6393,8,"replay"],[6056,14,6393,14],[6056,15,6393,15,"flush"],[6056,20,6393,20],[6056,21,6393,21],[6056,22,6393,22],[6057,8,6394,8,"event"],[6057,13,6394,13],[6057,14,6394,14,"contexts"],[6057,22,6394,22],[6057,23,6394,23,"feedback"],[6057,31,6394,31],[6057,32,6394,32,"replay_id"],[6057,41,6394,41],[6057,44,6394,44,"replay"],[6057,50,6394,50],[6057,51,6394,51,"getSessionId"],[6057,63,6394,63],[6057,64,6394,64],[6057,65,6394,65],[6058,8,6395,8],[6059,8,6396,8,"addFeedbackBreadcrumb"],[6059,29,6396,29],[6059,30,6396,30,"replay"],[6059,36,6396,36],[6059,38,6396,38,"event"],[6059,43,6396,43],[6059,44,6396,44],[6060,8,6397,8],[6060,15,6397,15,"event"],[6060,20,6397,20],[6061,6,6398,6],[6063,6,6400,6],[6064,6,6401,6],[6065,6,6402,6],[6065,10,6402,10,"isRrwebError"],[6065,22,6402,22],[6065,23,6402,23,"event"],[6065,28,6402,28],[6065,30,6402,30,"hint"],[6065,34,6402,34],[6065,35,6402,35],[6065,39,6402,39],[6065,40,6402,40,"replay"],[6065,46,6402,46],[6065,47,6402,47,"getOptions"],[6065,57,6402,57],[6065,58,6402,58],[6065,59,6402,59],[6065,60,6402,60,"_experiments"],[6065,72,6402,72],[6065,73,6402,73,"captureExceptions"],[6065,90,6402,90],[6065,92,6402,92],[6066,8,6403,8,"DEBUG_BUILD"],[6066,19,6403,19],[6066,23,6403,23,"logger"],[6066,29,6403,29],[6066,30,6403,30,"log"],[6066,33,6403,33],[6066,34,6403,34],[6066,71,6403,71],[6066,73,6403,73,"event"],[6066,78,6403,78],[6066,79,6403,79],[6067,8,6404,8],[6067,15,6404,15],[6067,19,6404,19],[6068,6,6405,6],[6070,6,6407,6],[6071,6,6408,6],[6072,6,6409,6],[6073,6,6410,6],[6073,12,6410,12,"isErrorEventSampled"],[6073,31,6410,31],[6073,34,6410,34,"shouldSampleForBufferEvent"],[6073,60,6410,60],[6073,61,6410,61,"replay"],[6073,67,6410,67],[6073,69,6410,69,"event"],[6073,74,6410,74],[6073,75,6410,75],[6075,6,6412,6],[6076,6,6413,6],[6077,6,6414,6],[6077,12,6414,12,"shouldTagReplayId"],[6077,29,6414,29],[6077,32,6414,32,"isErrorEventSampled"],[6077,51,6414,51],[6077,55,6414,55,"replay"],[6077,61,6414,61],[6077,62,6414,62,"recordingMode"],[6077,75,6414,75],[6077,80,6414,80],[6077,89,6414,89],[6078,6,6416,6],[6078,10,6416,10,"shouldTagReplayId"],[6078,27,6416,27],[6078,29,6416,29],[6079,8,6417,8,"event"],[6079,13,6417,13],[6079,14,6417,14,"tags"],[6079,18,6417,18],[6079,21,6417,21],[6080,10,6417,23],[6080,13,6417,26,"event"],[6080,18,6417,31],[6080,19,6417,32,"tags"],[6080,23,6417,36],[6081,10,6417,38,"replayId"],[6081,18,6417,46],[6081,20,6417,48,"replay"],[6081,26,6417,54],[6081,27,6417,55,"getSessionId"],[6081,39,6417,67],[6081,40,6417,68],[6082,8,6417,70],[6082,9,6417,71],[6083,6,6418,6],[6084,6,6420,6],[6084,13,6420,13,"event"],[6084,18,6420,18],[6085,4,6421,4],[6085,5,6421,5],[6085,7,6422,4],[6086,6,6422,6,"id"],[6086,8,6422,8],[6086,10,6422,10],[6087,4,6422,19],[6087,5,6423,2],[6087,6,6423,3],[6088,2,6424,0],[6090,2,6426,0],[6091,0,6427,0],[6092,0,6428,0],[6093,2,6429,0],[6093,11,6429,9,"createPerformanceSpans"],[6093,33,6429,31,"createPerformanceSpans"],[6093,34,6430,2,"replay"],[6093,40,6430,8],[6093,42,6431,2,"entries"],[6093,49,6431,9],[6093,51,6432,2],[6094,4,6433,2],[6094,11,6433,9,"entries"],[6094,18,6433,16],[6094,19,6433,17,"map"],[6094,22,6433,20],[6094,23,6433,21],[6094,24,6433,22],[6095,6,6433,24,"type"],[6095,10,6433,28],[6096,6,6433,30,"start"],[6096,11,6433,35],[6097,6,6433,37,"end"],[6097,9,6433,40],[6098,6,6433,42,"name"],[6098,10,6433,46],[6099,6,6433,48,"data"],[6100,4,6433,53],[6100,5,6433,54],[6100,10,6433,59],[6101,6,6434,4],[6101,12,6434,10,"response"],[6101,20,6434,18],[6101,23,6434,21,"replay"],[6101,29,6434,27],[6101,30,6434,28,"throttledAddEvent"],[6101,47,6434,45],[6101,48,6434,46],[6102,8,6435,6,"type"],[6102,12,6435,10],[6102,14,6435,12,"EventType"],[6102,23,6435,21],[6102,24,6435,22,"Custom"],[6102,30,6435,28],[6103,8,6436,6,"timestamp"],[6103,17,6436,15],[6103,19,6436,17,"start"],[6103,24,6436,22],[6104,8,6437,6,"data"],[6104,12,6437,10],[6104,14,6437,12],[6105,10,6438,8,"tag"],[6105,13,6438,11],[6105,15,6438,13],[6105,32,6438,30],[6106,10,6439,8,"payload"],[6106,17,6439,15],[6106,19,6439,17],[6107,12,6440,10,"op"],[6107,14,6440,12],[6107,16,6440,14,"type"],[6107,20,6440,18],[6108,12,6441,10,"description"],[6108,23,6441,21],[6108,25,6441,23,"name"],[6108,29,6441,27],[6109,12,6442,10,"startTimestamp"],[6109,26,6442,24],[6109,28,6442,26,"start"],[6109,33,6442,31],[6110,12,6443,10,"endTimestamp"],[6110,24,6443,22],[6110,26,6443,24,"end"],[6110,29,6443,27],[6111,12,6444,10,"data"],[6112,10,6445,8],[6113,8,6446,6],[6114,6,6447,4],[6114,7,6447,5],[6114,8,6447,6],[6116,6,6449,4],[6117,6,6450,4],[6117,13,6450,11],[6117,20,6450,18,"response"],[6117,28,6450,26],[6117,33,6450,31],[6117,41,6450,39],[6117,44,6450,42,"Promise"],[6117,51,6450,49],[6117,52,6450,50,"resolve"],[6117,59,6450,57],[6117,60,6450,58],[6117,64,6450,62],[6117,65,6450,63],[6117,68,6450,66,"response"],[6117,76,6450,74],[6118,4,6451,2],[6118,5,6451,3],[6118,6,6451,4],[6119,2,6452,0],[6120,2,6454,0],[6120,11,6454,9,"handleHistory"],[6120,24,6454,22,"handleHistory"],[6120,25,6454,23,"handlerData"],[6120,36,6454,34],[6120,38,6454,36],[6121,4,6455,2],[6121,10,6455,8],[6122,6,6455,10,"from"],[6122,10,6455,14],[6123,6,6455,16,"to"],[6124,4,6455,19],[6124,5,6455,20],[6124,8,6455,23,"handlerData"],[6124,19,6455,34],[6125,4,6457,2],[6125,10,6457,8,"now"],[6125,13,6457,11],[6125,16,6457,14,"Date"],[6125,20,6457,18],[6125,21,6457,19,"now"],[6125,24,6457,22],[6125,25,6457,23],[6125,26,6457,24],[6125,29,6457,27],[6125,33,6457,31],[6126,4,6459,2],[6126,11,6459,9],[6127,6,6460,4,"type"],[6127,10,6460,8],[6127,12,6460,10],[6127,29,6460,27],[6128,6,6461,4,"start"],[6128,11,6461,9],[6128,13,6461,11,"now"],[6128,16,6461,14],[6129,6,6462,4,"end"],[6129,9,6462,7],[6129,11,6462,9,"now"],[6129,14,6462,12],[6130,6,6463,4,"name"],[6130,10,6463,8],[6130,12,6463,10,"to"],[6130,14,6463,12],[6131,6,6464,4,"data"],[6131,10,6464,8],[6131,12,6464,10],[6132,8,6465,6,"previous"],[6132,16,6465,14],[6132,18,6465,16,"from"],[6133,6,6466,4],[6134,4,6467,2],[6134,5,6467,3],[6135,2,6468,0],[6137,2,6470,0],[6138,0,6471,0],[6139,0,6472,0],[6140,2,6473,0],[6140,11,6473,9,"handleHistorySpanListener"],[6140,36,6473,34,"handleHistorySpanListener"],[6140,37,6473,35,"replay"],[6140,43,6473,41],[6140,45,6473,43],[6141,4,6474,2],[6141,11,6474,10,"handlerData"],[6141,22,6474,21],[6141,26,6474,26],[6142,6,6475,4],[6142,10,6475,8],[6142,11,6475,9,"replay"],[6142,17,6475,15],[6142,18,6475,16,"isEnabled"],[6142,27,6475,25],[6142,28,6475,26],[6142,29,6475,27],[6142,31,6475,29],[6143,8,6476,6],[6144,6,6477,4],[6145,6,6479,4],[6145,12,6479,10,"result"],[6145,18,6479,16],[6145,21,6479,19,"handleHistory"],[6145,34,6479,32],[6145,35,6479,33,"handlerData"],[6145,46,6479,44],[6145,47,6479,45],[6146,6,6481,4],[6146,10,6481,8,"result"],[6146,16,6481,14],[6146,21,6481,19],[6146,25,6481,23],[6146,27,6481,25],[6147,8,6482,6],[6148,6,6483,4],[6150,6,6485,4],[6151,6,6486,4,"replay"],[6151,12,6486,10],[6151,13,6486,11,"getContext"],[6151,23,6486,21],[6151,24,6486,22],[6151,25,6486,23],[6151,26,6486,24,"urls"],[6151,30,6486,28],[6151,31,6486,29,"push"],[6151,35,6486,33],[6151,36,6486,34,"result"],[6151,42,6486,40],[6151,43,6486,41,"name"],[6151,47,6486,45],[6151,48,6486,46],[6152,6,6487,4,"replay"],[6152,12,6487,10],[6152,13,6487,11,"triggerUserActivity"],[6152,32,6487,30],[6152,33,6487,31],[6152,34,6487,32],[6153,6,6489,4,"replay"],[6153,12,6489,10],[6153,13,6489,11,"addUpdate"],[6153,22,6489,20],[6153,23,6489,21],[6153,29,6489,27],[6154,8,6490,6,"createPerformanceSpans"],[6154,30,6490,28],[6154,31,6490,29,"replay"],[6154,37,6490,35],[6154,39,6490,37],[6154,40,6490,38,"result"],[6154,46,6490,44],[6154,47,6490,45],[6154,48,6490,46],[6155,8,6491,6],[6156,8,6492,6],[6156,15,6492,13],[6156,20,6492,18],[6157,6,6493,4],[6157,7,6493,5],[6157,8,6493,6],[6158,4,6494,2],[6158,5,6494,3],[6159,2,6495,0],[6161,2,6497,0],[6162,0,6498,0],[6163,0,6499,0],[6164,0,6500,0],[6165,2,6501,0],[6165,11,6501,9,"shouldFilterRequest"],[6165,30,6501,28,"shouldFilterRequest"],[6165,31,6501,29,"replay"],[6165,37,6501,35],[6165,39,6501,37,"url"],[6165,42,6501,40],[6165,44,6501,42],[6166,4,6502,2],[6167,4,6503,2],[6167,8,6503,6,"DEBUG_BUILD"],[6167,19,6503,17],[6167,23,6503,21,"replay"],[6167,29,6503,27],[6167,30,6503,28,"getOptions"],[6167,40,6503,38],[6167,41,6503,39],[6167,42,6503,40],[6167,43,6503,41,"_experiments"],[6167,55,6503,53],[6167,56,6503,54,"traceInternals"],[6167,70,6503,68],[6167,72,6503,70],[6168,6,6504,4],[6168,13,6504,11],[6168,18,6504,16],[6169,4,6505,2],[6170,4,6507,2],[6170,11,6507,9],[6170,15,6507,9,"isSentryRequestUrl"],[6170,39,6507,27],[6170,41,6507,28,"url"],[6170,44,6507,31],[6170,46,6507,33],[6170,50,6507,33,"getClient"],[6170,65,6507,42],[6170,67,6507,43],[6170,68,6507,44],[6170,69,6507,45],[6171,2,6508,0],[6173,2,6510,0],[6174,2,6511,0],[6174,11,6511,9,"addNetworkBreadcrumb"],[6174,31,6511,29,"addNetworkBreadcrumb"],[6174,32,6512,2,"replay"],[6174,38,6512,8],[6174,40,6513,2,"result"],[6174,46,6513,8],[6174,48,6514,2],[6175,4,6515,2],[6175,8,6515,6],[6175,9,6515,7,"replay"],[6175,15,6515,13],[6175,16,6515,14,"isEnabled"],[6175,25,6515,23],[6175,26,6515,24],[6175,27,6515,25],[6175,29,6515,27],[6176,6,6516,4],[6177,4,6517,2],[6178,4,6519,2],[6178,8,6519,6,"result"],[6178,14,6519,12],[6178,19,6519,17],[6178,23,6519,21],[6178,25,6519,23],[6179,6,6520,4],[6180,4,6521,2],[6181,4,6523,2],[6181,8,6523,6,"shouldFilterRequest"],[6181,27,6523,25],[6181,28,6523,26,"replay"],[6181,34,6523,32],[6181,36,6523,34,"result"],[6181,42,6523,40],[6181,43,6523,41,"name"],[6181,47,6523,45],[6181,48,6523,46],[6181,50,6523,48],[6182,6,6524,4],[6183,4,6525,2],[6184,4,6527,2,"replay"],[6184,10,6527,8],[6184,11,6527,9,"addUpdate"],[6184,20,6527,18],[6184,21,6527,19],[6184,27,6527,25],[6185,6,6528,4,"createPerformanceSpans"],[6185,28,6528,26],[6185,29,6528,27,"replay"],[6185,35,6528,33],[6185,37,6528,35],[6185,38,6528,36,"result"],[6185,44,6528,42],[6185,45,6528,43],[6185,46,6528,44],[6186,6,6529,4],[6187,6,6530,4],[6188,6,6531,4],[6189,6,6532,4],[6189,13,6532,11],[6189,17,6532,15],[6190,4,6533,2],[6190,5,6533,3],[6190,6,6533,4],[6191,2,6534,0],[6193,2,6536,0],[6194,2,6537,0],[6194,11,6537,9,"getBodySize"],[6194,22,6537,20,"getBodySize"],[6194,23,6537,21,"body"],[6194,27,6537,25],[6194,29,6537,27],[6195,4,6538,2],[6195,8,6538,6],[6195,9,6538,7,"body"],[6195,13,6538,11],[6195,15,6538,13],[6196,6,6539,4],[6196,13,6539,11,"undefined"],[6196,22,6539,20],[6197,4,6540,2],[6198,4,6542,2],[6198,10,6542,8,"textEncoder"],[6198,21,6542,19],[6198,24,6542,22],[6198,28,6542,26,"TextEncoder"],[6198,39,6542,37],[6198,40,6542,38],[6198,41,6542,39],[6199,4,6544,2],[6199,8,6544,6],[6200,6,6545,4],[6200,10,6545,8],[6200,17,6545,15,"body"],[6200,21,6545,19],[6200,26,6545,24],[6200,34,6545,32],[6200,36,6545,34],[6201,8,6546,6],[6201,15,6546,13,"textEncoder"],[6201,26,6546,24],[6201,27,6546,25,"encode"],[6201,33,6546,31],[6201,34,6546,32,"body"],[6201,38,6546,36],[6201,39,6546,37],[6201,40,6546,38,"length"],[6201,46,6546,44],[6202,6,6547,4],[6203,6,6549,4],[6203,10,6549,8,"body"],[6203,14,6549,12],[6203,26,6549,24,"URLSearchParams"],[6203,41,6549,39],[6203,43,6549,41],[6204,8,6550,6],[6204,15,6550,13,"textEncoder"],[6204,26,6550,24],[6204,27,6550,25,"encode"],[6204,33,6550,31],[6204,34,6550,32,"body"],[6204,38,6550,36],[6204,39,6550,37,"toString"],[6204,47,6550,45],[6204,48,6550,46],[6204,49,6550,47],[6204,50,6550,48],[6204,51,6550,49,"length"],[6204,57,6550,55],[6205,6,6551,4],[6206,6,6553,4],[6206,10,6553,8,"body"],[6206,14,6553,12],[6206,26,6553,24,"FormData"],[6206,34,6553,32],[6206,36,6553,34],[6207,8,6554,6],[6207,14,6554,12,"formDataStr"],[6207,25,6554,23],[6207,28,6554,26,"_serializeFormData"],[6207,46,6554,44],[6207,47,6554,45,"body"],[6207,51,6554,49],[6207,52,6554,50],[6208,8,6555,6],[6208,15,6555,13,"textEncoder"],[6208,26,6555,24],[6208,27,6555,25,"encode"],[6208,33,6555,31],[6208,34,6555,32,"formDataStr"],[6208,45,6555,43],[6208,46,6555,44],[6208,47,6555,45,"length"],[6208,53,6555,51],[6209,6,6556,4],[6210,6,6558,4],[6210,10,6558,8,"body"],[6210,14,6558,12],[6210,26,6558,24,"Blob"],[6210,30,6558,28],[6210,32,6558,30],[6211,8,6559,6],[6211,15,6559,13,"body"],[6211,19,6559,17],[6211,20,6559,18,"size"],[6211,24,6559,22],[6212,6,6560,4],[6213,6,6562,4],[6213,10,6562,8,"body"],[6213,14,6562,12],[6213,26,6562,24,"ArrayBuffer"],[6213,37,6562,35],[6213,39,6562,37],[6214,8,6563,6],[6214,15,6563,13,"body"],[6214,19,6563,17],[6214,20,6563,18,"byteLength"],[6214,30,6563,28],[6215,6,6564,4],[6217,6,6566,4],[6218,4,6567,2],[6218,5,6567,3],[6218,6,6567,4],[6218,13,6567,11,"e"],[6218,14,6567,12],[6218,16,6567,14],[6219,6,6568,4],[6220,4,6568,4],[6221,4,6571,2],[6221,11,6571,9,"undefined"],[6221,20,6571,18],[6222,2,6572,0],[6224,2,6574,0],[6225,2,6575,0],[6225,11,6575,9,"parseContentLengthHeader"],[6225,35,6575,33,"parseContentLengthHeader"],[6225,36,6575,34,"header"],[6225,42,6575,40],[6225,44,6575,42],[6226,4,6576,2],[6226,8,6576,6],[6226,9,6576,7,"header"],[6226,15,6576,13],[6226,17,6576,15],[6227,6,6577,4],[6227,13,6577,11,"undefined"],[6227,22,6577,20],[6228,4,6578,2],[6229,4,6580,2],[6229,10,6580,8,"size"],[6229,14,6580,12],[6229,17,6580,15,"parseInt"],[6229,25,6580,23],[6229,26,6580,24,"header"],[6229,32,6580,30],[6229,34,6580,32],[6229,36,6580,34],[6229,37,6580,35],[6230,4,6581,2],[6230,11,6581,9,"isNaN"],[6230,16,6581,14],[6230,17,6581,15,"size"],[6230,21,6581,19],[6230,22,6581,20],[6230,25,6581,23,"undefined"],[6230,34,6581,32],[6230,37,6581,35,"size"],[6230,41,6581,39],[6231,2,6582,0],[6233,2,6584,0],[6234,2,6585,0],[6234,11,6585,9,"getBodyString"],[6234,24,6585,22,"getBodyString"],[6234,25,6585,23,"body"],[6234,29,6585,27],[6234,31,6585,29],[6235,4,6586,2],[6235,8,6586,6],[6236,6,6587,4],[6236,10,6587,8],[6236,17,6587,15,"body"],[6236,21,6587,19],[6236,26,6587,24],[6236,34,6587,32],[6236,36,6587,34],[6237,8,6588,6],[6237,15,6588,13],[6237,16,6588,14,"body"],[6237,20,6588,18],[6237,21,6588,19],[6238,6,6589,4],[6239,6,6591,4],[6239,10,6591,8,"body"],[6239,14,6591,12],[6239,26,6591,24,"URLSearchParams"],[6239,41,6591,39],[6239,43,6591,41],[6240,8,6592,6],[6240,15,6592,13],[6240,16,6592,14,"body"],[6240,20,6592,18],[6240,21,6592,19,"toString"],[6240,29,6592,27],[6240,30,6592,28],[6240,31,6592,29],[6240,32,6592,30],[6241,6,6593,4],[6242,6,6595,4],[6242,10,6595,8,"body"],[6242,14,6595,12],[6242,26,6595,24,"FormData"],[6242,34,6595,32],[6242,36,6595,34],[6243,8,6596,6],[6243,15,6596,13],[6243,16,6596,14,"_serializeFormData"],[6243,34,6596,32],[6243,35,6596,33,"body"],[6243,39,6596,37],[6243,40,6596,38],[6243,41,6596,39],[6244,6,6597,4],[6245,6,6599,4],[6245,10,6599,8],[6245,11,6599,9,"body"],[6245,15,6599,13],[6245,17,6599,15],[6246,8,6600,6],[6246,15,6600,13],[6246,16,6600,14,"undefined"],[6246,25,6600,23],[6246,26,6600,24],[6247,6,6601,4],[6248,4,6602,2],[6248,5,6602,3],[6248,6,6602,4],[6248,13,6602,11,"error"],[6248,18,6602,16],[6248,20,6602,18],[6249,6,6603,4,"DEBUG_BUILD"],[6249,17,6603,15],[6249,21,6603,19,"logger"],[6249,27,6603,25],[6249,28,6603,26,"exception"],[6249,37,6603,35],[6249,38,6603,36,"error"],[6249,43,6603,41],[6249,45,6603,43],[6249,71,6603,69],[6249,73,6603,71,"body"],[6249,77,6603,75],[6249,78,6603,76],[6250,6,6604,4],[6250,13,6604,11],[6250,14,6604,12,"undefined"],[6250,23,6604,21],[6250,25,6604,23],[6250,43,6604,41],[6250,44,6604,42],[6251,4,6605,2],[6252,4,6607,2,"DEBUG_BUILD"],[6252,15,6607,13],[6252,19,6607,17,"logger"],[6252,25,6607,23],[6252,26,6607,24,"info"],[6252,30,6607,28],[6252,31,6607,29],[6252,75,6607,73],[6252,77,6607,75,"body"],[6252,81,6607,79],[6252,82,6607,80],[6253,4,6609,2],[6253,11,6609,9],[6253,12,6609,10,"undefined"],[6253,21,6609,19],[6253,23,6609,21],[6253,46,6609,44],[6253,47,6609,45],[6254,2,6610,0],[6256,2,6612,0],[6257,2,6613,0],[6257,11,6613,9,"mergeWarning"],[6257,23,6613,21,"mergeWarning"],[6257,24,6614,2,"info"],[6257,28,6614,6],[6257,30,6615,2,"warning"],[6257,37,6615,9],[6257,39,6616,2],[6258,4,6617,2],[6258,8,6617,6],[6258,9,6617,7,"info"],[6258,13,6617,11],[6258,15,6617,13],[6259,6,6618,4],[6259,13,6618,11],[6260,8,6619,6,"headers"],[6260,15,6619,13],[6260,17,6619,15],[6260,18,6619,16],[6260,19,6619,17],[6261,8,6620,6,"size"],[6261,12,6620,10],[6261,14,6620,12,"undefined"],[6261,23,6620,21],[6262,8,6621,6,"_meta"],[6262,13,6621,11],[6262,15,6621,13],[6263,10,6622,8,"warnings"],[6263,18,6622,16],[6263,20,6622,18],[6263,21,6622,19,"warning"],[6263,28,6622,26],[6264,8,6623,6],[6265,6,6624,4],[6265,7,6624,5],[6266,4,6625,2],[6267,4,6627,2],[6267,10,6627,8,"newMeta"],[6267,17,6627,15],[6267,20,6627,18],[6268,6,6627,20],[6268,9,6627,23,"info"],[6268,13,6627,27],[6268,14,6627,28,"_meta"],[6269,4,6627,34],[6269,5,6627,35],[6270,4,6628,2],[6270,10,6628,8,"existingWarnings"],[6270,26,6628,24],[6270,29,6628,27,"newMeta"],[6270,36,6628,34],[6270,37,6628,35,"warnings"],[6270,45,6628,43],[6270,49,6628,47],[6270,51,6628,49],[6271,4,6629,2,"newMeta"],[6271,11,6629,9],[6271,12,6629,10,"warnings"],[6271,20,6629,18],[6271,23,6629,21],[6271,24,6629,22],[6271,27,6629,25,"existingWarnings"],[6271,43,6629,41],[6271,45,6629,43,"warning"],[6271,52,6629,50],[6271,53,6629,51],[6272,4,6631,2,"info"],[6272,8,6631,6],[6272,9,6631,7,"_meta"],[6272,14,6631,12],[6272,17,6631,15,"newMeta"],[6272,24,6631,22],[6273,4,6632,2],[6273,11,6632,9,"info"],[6273,15,6632,13],[6274,2,6633,0],[6276,2,6635,0],[6277,2,6636,0],[6277,11,6636,9,"makeNetworkReplayBreadcrumb"],[6277,38,6636,36,"makeNetworkReplayBreadcrumb"],[6277,39,6637,2,"type"],[6277,43,6637,6],[6277,45,6638,2,"data"],[6277,49,6638,6],[6277,51,6639,2],[6278,4,6640,2],[6278,8,6640,6],[6278,9,6640,7,"data"],[6278,13,6640,11],[6278,15,6640,13],[6279,6,6641,4],[6279,13,6641,11],[6279,17,6641,15],[6280,4,6642,2],[6281,4,6644,2],[6281,10,6644,8],[6282,6,6644,10,"startTimestamp"],[6282,20,6644,24],[6283,6,6644,26,"endTimestamp"],[6283,18,6644,38],[6284,6,6644,40,"url"],[6284,9,6644,43],[6285,6,6644,45,"method"],[6285,12,6644,51],[6286,6,6644,53,"statusCode"],[6286,16,6644,63],[6287,6,6644,65,"request"],[6287,13,6644,72],[6288,6,6644,74,"response"],[6289,4,6644,83],[6289,5,6644,84],[6289,8,6644,87,"data"],[6289,12,6644,91],[6290,4,6646,2],[6290,10,6646,8,"result"],[6290,16,6646,14],[6290,19,6646,17],[6291,6,6647,4,"type"],[6291,10,6647,8],[6292,6,6648,4,"start"],[6292,11,6648,9],[6292,13,6648,11,"startTimestamp"],[6292,27,6648,25],[6292,30,6648,28],[6292,34,6648,32],[6293,6,6649,4,"end"],[6293,9,6649,7],[6293,11,6649,9,"endTimestamp"],[6293,23,6649,21],[6293,26,6649,24],[6293,30,6649,28],[6294,6,6650,4,"name"],[6294,10,6650,8],[6294,12,6650,10,"url"],[6294,15,6650,13],[6295,6,6651,4,"data"],[6295,10,6651,8],[6295,12,6651,10],[6295,16,6651,10,"dropUndefinedKeys"],[6295,39,6651,27],[6295,41,6651,28],[6296,8,6652,6,"method"],[6296,14,6652,12],[6297,8,6653,6,"statusCode"],[6297,18,6653,16],[6298,8,6654,6,"request"],[6298,15,6654,13],[6299,8,6655,6,"response"],[6300,6,6656,4],[6300,7,6656,5],[6301,4,6657,2],[6301,5,6657,3],[6302,4,6659,2],[6302,11,6659,9,"result"],[6302,17,6659,15],[6303,2,6660,0],[6305,2,6662,0],[6306,2,6663,0],[6306,11,6663,9,"buildSkippedNetworkRequestOrResponse"],[6306,47,6663,45,"buildSkippedNetworkRequestOrResponse"],[6306,48,6663,46,"bodySize"],[6306,56,6663,54],[6306,58,6663,56],[6307,4,6664,2],[6307,11,6664,9],[6308,6,6665,4,"headers"],[6308,13,6665,11],[6308,15,6665,13],[6308,16,6665,14],[6308,17,6665,15],[6309,6,6666,4,"size"],[6309,10,6666,8],[6309,12,6666,10,"bodySize"],[6309,20,6666,18],[6310,6,6667,4,"_meta"],[6310,11,6667,9],[6310,13,6667,11],[6311,8,6668,6,"warnings"],[6311,16,6668,14],[6311,18,6668,16],[6311,19,6668,17],[6311,32,6668,30],[6312,6,6669,4],[6313,4,6670,2],[6313,5,6670,3],[6314,2,6671,0],[6316,2,6673,0],[6317,2,6674,0],[6317,11,6674,9,"buildNetworkRequestOrResponse"],[6317,40,6674,38,"buildNetworkRequestOrResponse"],[6317,41,6675,2,"headers"],[6317,48,6675,9],[6317,50,6676,2,"bodySize"],[6317,58,6676,10],[6317,60,6677,2,"body"],[6317,64,6677,6],[6317,66,6678,2],[6318,4,6679,2],[6318,8,6679,6],[6318,9,6679,7,"bodySize"],[6318,17,6679,15],[6318,21,6679,19,"Object"],[6318,27,6679,25],[6318,28,6679,26,"keys"],[6318,32,6679,30],[6318,33,6679,31,"headers"],[6318,40,6679,38],[6318,41,6679,39],[6318,42,6679,40,"length"],[6318,48,6679,46],[6318,53,6679,51],[6318,54,6679,52],[6318,56,6679,54],[6319,6,6680,4],[6319,13,6680,11,"undefined"],[6319,22,6680,20],[6320,4,6681,2],[6321,4,6683,2],[6321,8,6683,6],[6321,9,6683,7,"bodySize"],[6321,17,6683,15],[6321,19,6683,17],[6322,6,6684,4],[6322,13,6684,11],[6323,8,6685,6,"headers"],[6324,6,6686,4],[6324,7,6686,5],[6325,4,6687,2],[6326,4,6689,2],[6326,8,6689,6],[6326,9,6689,7,"body"],[6326,13,6689,11],[6326,15,6689,13],[6327,6,6690,4],[6327,13,6690,11],[6328,8,6691,6,"headers"],[6328,15,6691,13],[6329,8,6692,6,"size"],[6329,12,6692,10],[6329,14,6692,12,"bodySize"],[6330,6,6693,4],[6330,7,6693,5],[6331,4,6694,2],[6332,4,6696,2],[6332,10,6696,8,"info"],[6332,14,6696,12],[6332,17,6696,15],[6333,6,6697,4,"headers"],[6333,13,6697,11],[6334,6,6698,4,"size"],[6334,10,6698,8],[6334,12,6698,10,"bodySize"],[6335,4,6699,2],[6335,5,6699,3],[6336,4,6701,2],[6336,10,6701,8],[6337,6,6701,10,"body"],[6337,10,6701,14],[6337,12,6701,16,"normalizedBody"],[6337,26,6701,30],[6338,6,6701,32,"warnings"],[6339,4,6701,41],[6339,5,6701,42],[6339,8,6701,45,"normalizeNetworkBody"],[6339,28,6701,65],[6339,29,6701,66,"body"],[6339,33,6701,70],[6339,34,6701,71],[6340,4,6702,2,"info"],[6340,8,6702,6],[6340,9,6702,7,"body"],[6340,13,6702,11],[6340,16,6702,14,"normalizedBody"],[6340,30,6702,28],[6341,4,6703,2],[6341,8,6703,6,"warnings"],[6341,16,6703,14],[6341,20,6703,18,"warnings"],[6341,28,6703,26],[6341,29,6703,27,"length"],[6341,35,6703,33],[6341,38,6703,36],[6341,39,6703,37],[6341,41,6703,39],[6342,6,6704,4,"info"],[6342,10,6704,8],[6342,11,6704,9,"_meta"],[6342,16,6704,14],[6342,19,6704,17],[6343,8,6705,6,"warnings"],[6344,6,6706,4],[6344,7,6706,5],[6345,4,6707,2],[6346,4,6709,2],[6346,11,6709,9,"info"],[6346,15,6709,13],[6347,2,6710,0],[6349,2,6712,0],[6350,2,6713,0],[6350,11,6713,9,"getAllowedHeaders"],[6350,28,6713,26,"getAllowedHeaders"],[6350,29,6713,27,"headers"],[6350,36,6713,34],[6350,38,6713,36,"allowedHeaders"],[6350,52,6713,50],[6350,54,6713,52],[6351,4,6714,2],[6351,11,6714,9,"Object"],[6351,17,6714,15],[6351,18,6714,16,"entries"],[6351,25,6714,23],[6351,26,6714,24,"headers"],[6351,33,6714,31],[6351,34,6714,32],[6351,35,6714,33,"reduce"],[6351,41,6714,39],[6351,42,6714,40],[6351,43,6714,41,"filteredHeaders"],[6351,58,6714,56],[6351,60,6714,58],[6351,61,6714,59,"key"],[6351,64,6714,62],[6351,66,6714,64,"value"],[6351,71,6714,69],[6351,72,6714,70],[6351,77,6714,75],[6352,6,6715,4],[6352,12,6715,10,"normalizedKey"],[6352,25,6715,23],[6352,28,6715,26,"key"],[6352,31,6715,29],[6352,32,6715,30,"toLowerCase"],[6352,43,6715,41],[6352,44,6715,42],[6352,45,6715,43],[6353,6,6716,4],[6354,6,6717,4],[6354,10,6717,8,"allowedHeaders"],[6354,24,6717,22],[6354,25,6717,23,"includes"],[6354,33,6717,31],[6354,34,6717,32,"normalizedKey"],[6354,47,6717,45],[6354,48,6717,46],[6354,52,6717,50,"headers"],[6354,59,6717,57],[6354,60,6717,58,"key"],[6354,63,6717,61],[6354,64,6717,62],[6354,66,6717,64],[6355,8,6718,6,"filteredHeaders"],[6355,23,6718,21],[6355,24,6718,22,"normalizedKey"],[6355,37,6718,35],[6355,38,6718,36],[6355,41,6718,39,"value"],[6355,46,6718,44],[6356,6,6719,4],[6357,6,6720,4],[6357,13,6720,11,"filteredHeaders"],[6357,28,6720,26],[6358,4,6721,2],[6358,5,6721,3],[6358,7,6721,5],[6358,8,6721,6],[6358,9,6721,7],[6358,10,6721,8],[6359,2,6722,0],[6360,2,6724,0],[6360,11,6724,9,"_serializeFormData"],[6360,29,6724,27,"_serializeFormData"],[6360,30,6724,28,"formData"],[6360,38,6724,36],[6360,40,6724,38],[6361,4,6725,2],[6362,4,6726,2],[6363,4,6727,2],[6364,4,6728,2],[6364,11,6728,9],[6364,15,6728,13,"URLSearchParams"],[6364,30,6728,28],[6364,31,6728,29,"formData"],[6364,39,6728,37],[6364,40,6728,38],[6364,41,6728,39,"toString"],[6364,49,6728,47],[6364,50,6728,48],[6364,51,6728,49],[6365,2,6729,0],[6366,2,6731,0],[6366,11,6731,9,"normalizeNetworkBody"],[6366,31,6731,29,"normalizeNetworkBody"],[6366,32,6731,30,"body"],[6366,36,6731,34],[6366,38,6733,1],[6367,4,6734,2],[6367,8,6734,6],[6367,9,6734,7,"body"],[6367,13,6734,11],[6367,17,6734,15],[6367,24,6734,22,"body"],[6367,28,6734,26],[6367,33,6734,31],[6367,41,6734,39],[6367,43,6734,41],[6368,6,6735,4],[6368,13,6735,11],[6369,8,6736,6,"body"],[6370,6,6737,4],[6370,7,6737,5],[6371,4,6738,2],[6372,4,6740,2],[6372,10,6740,8,"exceedsSizeLimit"],[6372,26,6740,24],[6372,29,6740,27,"body"],[6372,33,6740,31],[6372,34,6740,32,"length"],[6372,40,6740,38],[6372,43,6740,41,"NETWORK_BODY_MAX_SIZE"],[6372,64,6740,62],[6373,4,6741,2],[6373,10,6741,8,"isProbablyJson"],[6373,24,6741,22],[6373,27,6741,25,"_strIsProbablyJson"],[6373,45,6741,43],[6373,46,6741,44,"body"],[6373,50,6741,48],[6373,51,6741,49],[6374,4,6743,2],[6374,8,6743,6,"exceedsSizeLimit"],[6374,24,6743,22],[6374,26,6743,24],[6375,6,6744,4],[6375,12,6744,10,"truncatedBody"],[6375,25,6744,23],[6375,28,6744,26,"body"],[6375,32,6744,30],[6375,33,6744,31,"slice"],[6375,38,6744,36],[6375,39,6744,37],[6375,40,6744,38],[6375,42,6744,40,"NETWORK_BODY_MAX_SIZE"],[6375,63,6744,61],[6375,64,6744,62],[6376,6,6746,4],[6376,10,6746,8,"isProbablyJson"],[6376,24,6746,22],[6376,26,6746,24],[6377,8,6747,6],[6377,15,6747,13],[6378,10,6748,8,"body"],[6378,14,6748,12],[6378,16,6748,14,"truncatedBody"],[6378,29,6748,27],[6379,10,6749,8,"warnings"],[6379,18,6749,16],[6379,20,6749,18],[6379,21,6749,19],[6379,43,6749,41],[6380,8,6750,6],[6380,9,6750,7],[6381,6,6751,4],[6382,6,6753,4],[6382,13,6753,11],[6383,8,6754,6,"body"],[6383,12,6754,10],[6383,14,6754,12],[6383,17,6754,15,"truncatedBody"],[6383,30,6754,28],[6383,33,6754,31],[6384,8,6755,6,"warnings"],[6384,16,6755,14],[6384,18,6755,16],[6384,19,6755,17],[6384,35,6755,33],[6385,6,6756,4],[6385,7,6756,5],[6386,4,6757,2],[6387,4,6759,2],[6387,8,6759,6,"isProbablyJson"],[6387,22,6759,20],[6387,24,6759,22],[6388,6,6760,4],[6388,10,6760,8],[6389,8,6761,6],[6389,14,6761,12,"jsonBody"],[6389,22,6761,20],[6389,25,6761,23,"JSON"],[6389,29,6761,27],[6389,30,6761,28,"parse"],[6389,35,6761,33],[6389,36,6761,34,"body"],[6389,40,6761,38],[6389,41,6761,39],[6390,8,6762,6],[6390,15,6762,13],[6391,10,6763,8,"body"],[6391,14,6763,12],[6391,16,6763,14,"jsonBody"],[6392,8,6764,6],[6392,9,6764,7],[6393,6,6765,4],[6393,7,6765,5],[6393,8,6765,6],[6393,15,6765,13,"e2"],[6393,17,6765,15],[6393,19,6765,17],[6394,8,6766,6],[6395,6,6766,6],[6396,4,6768,2],[6397,4,6770,2],[6397,11,6770,9],[6398,6,6771,4,"body"],[6399,4,6772,2],[6399,5,6772,3],[6400,2,6773,0],[6401,2,6775,0],[6401,11,6775,9,"_strIsProbablyJson"],[6401,29,6775,27,"_strIsProbablyJson"],[6401,30,6775,28,"str"],[6401,33,6775,31],[6401,35,6775,33],[6402,4,6776,2],[6402,10,6776,8,"first"],[6402,15,6776,13],[6402,18,6776,16,"str"],[6402,21,6776,19],[6402,22,6776,20],[6402,23,6776,21],[6402,24,6776,22],[6403,4,6777,2],[6403,10,6777,8,"last"],[6403,14,6777,12],[6403,17,6777,15,"str"],[6403,20,6777,18],[6403,21,6777,19,"str"],[6403,24,6777,22],[6403,25,6777,23,"length"],[6403,31,6777,29],[6403,34,6777,32],[6403,35,6777,33],[6403,36,6777,34],[6405,4,6779,2],[6406,4,6780,2],[6406,11,6780,10,"first"],[6406,16,6780,15],[6406,21,6780,20],[6406,24,6780,23],[6406,28,6780,27,"last"],[6406,32,6780,31],[6406,37,6780,36],[6406,40,6780,39],[6406,44,6780,45,"first"],[6406,49,6780,50],[6406,54,6780,55],[6406,57,6780,58],[6406,61,6780,62,"last"],[6406,65,6780,66],[6406,70,6780,71],[6406,73,6780,75],[6407,2,6781,0],[6409,2,6783,0],[6410,2,6784,0],[6410,11,6784,9,"urlMatches"],[6410,21,6784,19,"urlMatches"],[6410,22,6784,20,"url"],[6410,25,6784,23],[6410,27,6784,25,"urls"],[6410,31,6784,29],[6410,33,6784,31],[6411,4,6785,2],[6411,10,6785,8,"fullUrl"],[6411,17,6785,15],[6411,20,6785,18,"getFullUrl"],[6411,30,6785,28],[6411,31,6785,29,"url"],[6411,34,6785,32],[6411,35,6785,33],[6412,4,6787,2],[6412,11,6787,9],[6412,15,6787,9,"stringMatchesSomePattern"],[6412,45,6787,33],[6412,47,6787,34,"fullUrl"],[6412,54,6787,41],[6412,56,6787,43,"urls"],[6412,60,6787,47],[6412,61,6787,48],[6413,2,6788,0],[6415,2,6790,0],[6416,2,6791,0],[6416,11,6791,9,"getFullUrl"],[6416,21,6791,19,"getFullUrl"],[6416,22,6791,20,"url"],[6416,25,6791,23],[6416,27,6791,25,"baseURI"],[6416,34,6791,32],[6416,37,6791,35,"WINDOW"],[6416,43,6791,41],[6416,44,6791,42,"document"],[6416,52,6791,50],[6416,53,6791,51,"baseURI"],[6416,60,6791,58],[6416,62,6791,60],[6417,4,6792,2],[6418,4,6793,2],[6418,8,6793,6,"url"],[6418,11,6793,9],[6418,12,6793,10,"startsWith"],[6418,22,6793,20],[6418,23,6793,21],[6418,32,6793,30],[6418,33,6793,31],[6418,37,6793,35,"url"],[6418,40,6793,38],[6418,41,6793,39,"startsWith"],[6418,51,6793,49],[6418,52,6793,50],[6418,62,6793,60],[6418,63,6793,61],[6418,67,6793,65,"url"],[6418,70,6793,68],[6418,71,6793,69,"startsWith"],[6418,81,6793,79],[6418,82,6793,80,"WINDOW"],[6418,88,6793,86],[6418,89,6793,87,"location"],[6418,97,6793,95],[6418,98,6793,96,"origin"],[6418,104,6793,102],[6418,105,6793,103],[6418,107,6793,105],[6419,6,6794,4],[6419,13,6794,11,"url"],[6419,16,6794,14],[6420,4,6795,2],[6421,4,6796,2],[6421,10,6796,8,"fixedUrl"],[6421,18,6796,16],[6421,21,6796,19],[6421,25,6796,23,"URL"],[6421,28,6796,26],[6421,29,6796,27,"url"],[6421,32,6796,30],[6421,34,6796,32,"baseURI"],[6421,41,6796,39],[6421,42,6796,40],[6423,4,6798,2],[6424,4,6799,2],[6424,8,6799,6,"fixedUrl"],[6424,16,6799,14],[6424,17,6799,15,"origin"],[6424,23,6799,21],[6424,28,6799,26],[6424,32,6799,30,"URL"],[6424,35,6799,33],[6424,36,6799,34,"baseURI"],[6424,43,6799,41],[6424,44,6799,42],[6424,45,6799,43,"origin"],[6424,51,6799,49],[6424,53,6799,51],[6425,6,6800,4],[6425,13,6800,11,"url"],[6425,16,6800,14],[6426,4,6801,2],[6427,4,6803,2],[6427,10,6803,8,"fullUrl"],[6427,17,6803,15],[6427,20,6803,18,"fixedUrl"],[6427,28,6803,26],[6427,29,6803,27,"href"],[6427,33,6803,31],[6429,4,6805,2],[6430,4,6806,2],[6430,8,6806,6],[6430,9,6806,7,"url"],[6430,12,6806,10],[6430,13,6806,11,"endsWith"],[6430,21,6806,19],[6430,22,6806,20],[6430,25,6806,23],[6430,26,6806,24],[6430,30,6806,28,"fullUrl"],[6430,37,6806,35],[6430,38,6806,36,"endsWith"],[6430,46,6806,44],[6430,47,6806,45],[6430,50,6806,48],[6430,51,6806,49],[6430,53,6806,51],[6431,6,6807,4],[6431,13,6807,11,"fullUrl"],[6431,20,6807,18],[6431,21,6807,19,"slice"],[6431,26,6807,24],[6431,27,6807,25],[6431,28,6807,26],[6431,30,6807,28],[6431,31,6807,29],[6431,32,6807,30],[6431,33,6807,31],[6432,4,6808,2],[6433,4,6810,2],[6433,11,6810,9,"fullUrl"],[6433,18,6810,16],[6434,2,6811,0],[6436,2,6813,0],[6437,0,6814,0],[6438,0,6815,0],[6439,0,6816,0],[6440,2,6817,0],[6440,17,6817,15,"captureFetchBreadcrumbToReplay"],[6440,47,6817,45,"captureFetchBreadcrumbToReplay"],[6440,48,6818,2,"breadcrumb"],[6440,58,6818,12],[6440,60,6819,2,"hint"],[6440,64,6819,6],[6440,66,6820,2,"options"],[6440,73,6820,9],[6440,75,6823,2],[6441,4,6824,2],[6441,8,6824,6],[6442,6,6825,4],[6442,12,6825,10,"data"],[6442,16,6825,14],[6442,19,6825,17],[6442,25,6825,23,"_prepareFetchData"],[6442,42,6825,40],[6442,43,6825,41,"breadcrumb"],[6442,53,6825,51],[6442,55,6825,53,"hint"],[6442,59,6825,57],[6442,61,6825,59,"options"],[6442,68,6825,66],[6442,69,6825,67],[6444,6,6827,4],[6445,6,6828,4],[6445,12,6828,10,"result"],[6445,18,6828,16],[6445,21,6828,19,"makeNetworkReplayBreadcrumb"],[6445,48,6828,46],[6445,49,6828,47],[6445,65,6828,63],[6445,67,6828,65,"data"],[6445,71,6828,69],[6445,72,6828,70],[6446,6,6829,4,"addNetworkBreadcrumb"],[6446,26,6829,24],[6446,27,6829,25,"options"],[6446,34,6829,32],[6446,35,6829,33,"replay"],[6446,41,6829,39],[6446,43,6829,41,"result"],[6446,49,6829,47],[6446,50,6829,48],[6447,4,6830,2],[6447,5,6830,3],[6447,6,6830,4],[6447,13,6830,11,"error"],[6447,18,6830,16],[6447,20,6830,18],[6448,6,6831,4,"DEBUG_BUILD"],[6448,17,6831,15],[6448,21,6831,19,"logger"],[6448,27,6831,25],[6448,28,6831,26,"exception"],[6448,37,6831,35],[6448,38,6831,36,"error"],[6448,43,6831,41],[6448,45,6831,43],[6448,81,6831,79],[6448,82,6831,80],[6449,4,6832,2],[6450,2,6833,0],[6452,2,6835,0],[6453,0,6836,0],[6454,0,6837,0],[6455,0,6838,0],[6456,0,6839,0],[6457,2,6840,0],[6457,11,6840,9,"enrichFetchBreadcrumb"],[6457,32,6840,30,"enrichFetchBreadcrumb"],[6457,33,6841,2,"breadcrumb"],[6457,43,6841,12],[6457,45,6842,2,"hint"],[6457,49,6842,6],[6457,51,6843,2],[6458,4,6844,2],[6458,10,6844,8],[6459,6,6844,10,"input"],[6459,11,6844,15],[6460,6,6844,17,"response"],[6461,4,6844,26],[6461,5,6844,27],[6461,8,6844,30,"hint"],[6461,12,6844,34],[6462,4,6846,2],[6462,10,6846,8,"body"],[6462,14,6846,12],[6462,17,6846,15,"input"],[6462,22,6846,20],[6462,25,6846,23,"_getFetchRequestArgBody"],[6462,48,6846,46],[6462,49,6846,47,"input"],[6462,54,6846,52],[6462,55,6846,53],[6462,58,6846,56,"undefined"],[6462,67,6846,65],[6463,4,6847,2],[6463,10,6847,8,"reqSize"],[6463,17,6847,15],[6463,20,6847,18,"getBodySize"],[6463,31,6847,29],[6463,32,6847,30,"body"],[6463,36,6847,34],[6463,37,6847,35],[6464,4,6849,2],[6464,10,6849,8,"resSize"],[6464,17,6849,15],[6464,20,6849,18,"response"],[6464,28,6849,26],[6464,31,6849,29,"parseContentLengthHeader"],[6464,55,6849,53],[6464,56,6849,54,"response"],[6464,64,6849,62],[6464,65,6849,63,"headers"],[6464,72,6849,70],[6464,73,6849,71,"get"],[6464,76,6849,74],[6464,77,6849,75],[6464,93,6849,91],[6464,94,6849,92],[6464,95,6849,93],[6464,98,6849,96,"undefined"],[6464,107,6849,105],[6465,4,6851,2],[6465,8,6851,6,"reqSize"],[6465,15,6851,13],[6465,20,6851,18,"undefined"],[6465,29,6851,27],[6465,31,6851,29],[6466,6,6852,4,"breadcrumb"],[6466,16,6852,14],[6466,17,6852,15,"data"],[6466,21,6852,19],[6466,22,6852,20,"request_body_size"],[6466,39,6852,37],[6466,42,6852,40,"reqSize"],[6466,49,6852,47],[6467,4,6853,2],[6468,4,6854,2],[6468,8,6854,6,"resSize"],[6468,15,6854,13],[6468,20,6854,18,"undefined"],[6468,29,6854,27],[6468,31,6854,29],[6469,6,6855,4,"breadcrumb"],[6469,16,6855,14],[6469,17,6855,15,"data"],[6469,21,6855,19],[6469,22,6855,20,"response_body_size"],[6469,40,6855,38],[6469,43,6855,41,"resSize"],[6469,50,6855,48],[6470,4,6856,2],[6471,2,6857,0],[6472,2,6859,0],[6472,17,6859,15,"_prepareFetchData"],[6472,34,6859,32,"_prepareFetchData"],[6472,35,6860,2,"breadcrumb"],[6472,45,6860,12],[6472,47,6861,2,"hint"],[6472,51,6861,6],[6472,53,6862,2,"options"],[6472,60,6862,9],[6472,62,6863,2],[6473,4,6864,2],[6473,10,6864,8,"now"],[6473,13,6864,11],[6473,16,6864,14,"Date"],[6473,20,6864,18],[6473,21,6864,19,"now"],[6473,24,6864,22],[6473,25,6864,23],[6473,26,6864,24],[6474,4,6865,2],[6474,10,6865,8],[6475,6,6865,10,"startTimestamp"],[6475,20,6865,24],[6475,23,6865,27,"now"],[6475,26,6865,30],[6476,6,6865,32,"endTimestamp"],[6476,18,6865,44],[6476,21,6865,47,"now"],[6477,4,6865,51],[6477,5,6865,52],[6477,8,6865,55,"hint"],[6477,12,6865,59],[6478,4,6867,2],[6478,10,6867,8],[6479,6,6868,4,"url"],[6479,9,6868,7],[6480,6,6869,4,"method"],[6480,12,6869,10],[6481,6,6870,4,"status_code"],[6481,17,6870,15],[6481,19,6870,17,"statusCode"],[6481,29,6870,27],[6481,32,6870,30],[6481,33,6870,31],[6482,6,6871,4,"request_body_size"],[6482,23,6871,21],[6482,25,6871,23,"requestBodySize"],[6482,40,6871,38],[6483,6,6872,4,"response_body_size"],[6483,24,6872,22],[6483,26,6872,24,"responseBodySize"],[6484,4,6873,2],[6484,5,6873,3],[6484,8,6873,6,"breadcrumb"],[6484,18,6873,16],[6484,19,6873,17,"data"],[6484,23,6873,21],[6485,4,6875,2],[6485,10,6875,8,"captureDetails"],[6485,24,6875,22],[6485,27,6876,4,"urlMatches"],[6485,37,6876,14],[6485,38,6876,15,"url"],[6485,41,6876,18],[6485,43,6876,20,"options"],[6485,50,6876,27],[6485,51,6876,28,"networkDetailAllowUrls"],[6485,73,6876,50],[6485,74,6876,51],[6485,78,6876,55],[6485,79,6876,56,"urlMatches"],[6485,89,6876,66],[6485,90,6876,67,"url"],[6485,93,6876,70],[6485,95,6876,72,"options"],[6485,102,6876,79],[6485,103,6876,80,"networkDetailDenyUrls"],[6485,124,6876,101],[6485,125,6876,102],[6486,4,6878,2],[6486,10,6878,8,"request"],[6486,17,6878,15],[6486,20,6878,18,"captureDetails"],[6486,34,6878,32],[6486,37,6879,6,"_getRequestInfo"],[6486,52,6879,21],[6486,53,6879,22,"options"],[6486,60,6879,29],[6486,62,6879,31,"hint"],[6486,66,6879,35],[6486,67,6879,36,"input"],[6486,72,6879,41],[6486,74,6879,43,"requestBodySize"],[6486,89,6879,58],[6486,90,6879,59],[6486,93,6880,6,"buildSkippedNetworkRequestOrResponse"],[6486,129,6880,42],[6486,130,6880,43,"requestBodySize"],[6486,145,6880,58],[6486,146,6880,59],[6487,4,6881,2],[6487,10,6881,8,"response"],[6487,18,6881,16],[6487,21,6881,19],[6487,27,6881,25,"_getResponseInfo"],[6487,43,6881,41],[6487,44,6881,42,"captureDetails"],[6487,58,6881,56],[6487,60,6881,58,"options"],[6487,67,6881,65],[6487,69,6881,67,"hint"],[6487,73,6881,71],[6487,74,6881,72,"response"],[6487,82,6881,80],[6487,84,6881,82,"responseBodySize"],[6487,100,6881,98],[6487,101,6881,99],[6488,4,6883,2],[6488,11,6883,9],[6489,6,6884,4,"startTimestamp"],[6489,20,6884,18],[6490,6,6885,4,"endTimestamp"],[6490,18,6885,16],[6491,6,6886,4,"url"],[6491,9,6886,7],[6492,6,6887,4,"method"],[6492,12,6887,10],[6493,6,6888,4,"statusCode"],[6493,16,6888,14],[6494,6,6889,4,"request"],[6494,13,6889,11],[6495,6,6890,4,"response"],[6496,4,6891,2],[6496,5,6891,3],[6497,2,6892,0],[6498,2,6894,0],[6498,11,6894,9,"_getRequestInfo"],[6498,26,6894,24,"_getRequestInfo"],[6498,27,6895,2],[6499,4,6895,4,"networkCaptureBodies"],[6499,24,6895,24],[6500,4,6895,26,"networkRequestHeaders"],[6501,2,6895,48],[6501,3,6895,49],[6501,5,6896,2,"input"],[6501,10,6896,7],[6501,12,6897,2,"requestBodySize"],[6501,27,6897,17],[6501,29,6898,2],[6502,4,6899,2],[6502,10,6899,8,"headers"],[6502,17,6899,15],[6502,20,6899,18,"input"],[6502,25,6899,23],[6502,28,6899,26,"getRequestHeaders"],[6502,45,6899,43],[6502,46,6899,44,"input"],[6502,51,6899,49],[6502,53,6899,51,"networkRequestHeaders"],[6502,74,6899,72],[6502,75,6899,73],[6502,78,6899,76],[6502,79,6899,77],[6502,80,6899,78],[6503,4,6901,2],[6503,8,6901,6],[6503,9,6901,7,"networkCaptureBodies"],[6503,29,6901,27],[6503,31,6901,29],[6504,6,6902,4],[6504,13,6902,11,"buildNetworkRequestOrResponse"],[6504,42,6902,40],[6504,43,6902,41,"headers"],[6504,50,6902,48],[6504,52,6902,50,"requestBodySize"],[6504,67,6902,65],[6504,69,6902,67,"undefined"],[6504,78,6902,76],[6504,79,6902,77],[6505,4,6903,2],[6507,4,6905,2],[6508,4,6906,2],[6508,10,6906,8,"requestBody"],[6508,21,6906,19],[6508,24,6906,22,"_getFetchRequestArgBody"],[6508,47,6906,45],[6508,48,6906,46,"input"],[6508,53,6906,51],[6508,54,6906,52],[6509,4,6907,2],[6509,10,6907,8],[6509,11,6907,9,"bodyStr"],[6509,18,6907,16],[6509,20,6907,18,"warning"],[6509,27,6907,25],[6509,28,6907,26],[6509,31,6907,29,"getBodyString"],[6509,44,6907,42],[6509,45,6907,43,"requestBody"],[6509,56,6907,54],[6509,57,6907,55],[6510,4,6908,2],[6510,10,6908,8,"data"],[6510,14,6908,12],[6510,17,6908,15,"buildNetworkRequestOrResponse"],[6510,46,6908,44],[6510,47,6908,45,"headers"],[6510,54,6908,52],[6510,56,6908,54,"requestBodySize"],[6510,71,6908,69],[6510,73,6908,71,"bodyStr"],[6510,80,6908,78],[6510,81,6908,79],[6511,4,6910,2],[6511,8,6910,6,"warning"],[6511,15,6910,13],[6511,17,6910,15],[6512,6,6911,4],[6512,13,6911,11,"mergeWarning"],[6512,25,6911,23],[6512,26,6911,24,"data"],[6512,30,6911,28],[6512,32,6911,30,"warning"],[6512,39,6911,37],[6512,40,6911,38],[6513,4,6912,2],[6514,4,6914,2],[6514,11,6914,9,"data"],[6514,15,6914,13],[6515,2,6915,0],[6517,2,6917,0],[6518,2,6918,0],[6518,17,6918,15,"_getResponseInfo"],[6518,33,6918,31,"_getResponseInfo"],[6518,34,6919,2,"captureDetails"],[6518,48,6919,16],[6518,50,6920,2],[6519,4,6921,4,"networkCaptureBodies"],[6519,24,6921,24],[6520,4,6922,4,"networkResponseHeaders"],[6521,2,6923,2],[6521,3,6923,3],[6521,5,6924,2,"response"],[6521,13,6924,10],[6521,15,6925,2,"responseBodySize"],[6521,31,6925,18],[6521,33,6926,2],[6522,4,6927,2],[6522,8,6927,6],[6522,9,6927,7,"captureDetails"],[6522,23,6927,21],[6522,27,6927,25,"responseBodySize"],[6522,43,6927,41],[6522,48,6927,46,"undefined"],[6522,57,6927,55],[6522,59,6927,57],[6523,6,6928,4],[6523,13,6928,11,"buildSkippedNetworkRequestOrResponse"],[6523,49,6928,47],[6523,50,6928,48,"responseBodySize"],[6523,66,6928,64],[6523,67,6928,65],[6524,4,6929,2],[6525,4,6931,2],[6525,10,6931,8,"headers"],[6525,17,6931,15],[6525,20,6931,18,"response"],[6525,28,6931,26],[6525,31,6931,29,"getAllHeaders"],[6525,44,6931,42],[6525,45,6931,43,"response"],[6525,53,6931,51],[6525,54,6931,52,"headers"],[6525,61,6931,59],[6525,63,6931,61,"networkResponseHeaders"],[6525,85,6931,83],[6525,86,6931,84],[6525,89,6931,87],[6525,90,6931,88],[6525,91,6931,89],[6526,4,6933,2],[6526,8,6933,6],[6526,9,6933,7,"response"],[6526,17,6933,15],[6526,21,6933,20],[6526,22,6933,21,"networkCaptureBodies"],[6526,42,6933,41],[6526,46,6933,45,"responseBodySize"],[6526,62,6933,61],[6526,67,6933,66,"undefined"],[6526,76,6933,76],[6526,78,6933,78],[6527,6,6934,4],[6527,13,6934,11,"buildNetworkRequestOrResponse"],[6527,42,6934,40],[6527,43,6934,41,"headers"],[6527,50,6934,48],[6527,52,6934,50,"responseBodySize"],[6527,68,6934,66],[6527,70,6934,68,"undefined"],[6527,79,6934,77],[6527,80,6934,78],[6528,4,6935,2],[6529,4,6937,2],[6529,10,6937,8],[6529,11,6937,9,"bodyText"],[6529,19,6937,17],[6529,21,6937,19,"warning"],[6529,28,6937,26],[6529,29,6937,27],[6529,32,6937,30],[6529,38,6937,36,"_parseFetchResponseBody"],[6529,61,6937,59],[6529,62,6937,60,"response"],[6529,70,6937,68],[6529,71,6937,69],[6530,4,6938,2],[6530,10,6938,8,"result"],[6530,16,6938,14],[6530,19,6938,17,"getResponseData"],[6530,34,6938,32],[6530,35,6938,33,"bodyText"],[6530,43,6938,41],[6530,45,6938,43],[6531,6,6939,4,"networkCaptureBodies"],[6531,26,6939,24],[6532,6,6941,4,"responseBodySize"],[6532,22,6941,20],[6533,6,6942,4,"captureDetails"],[6533,20,6942,18],[6534,6,6943,4,"headers"],[6535,4,6944,2],[6535,5,6944,3],[6535,6,6944,4],[6536,4,6946,2],[6536,8,6946,6,"warning"],[6536,15,6946,13],[6536,17,6946,15],[6537,6,6947,4],[6537,13,6947,11,"mergeWarning"],[6537,25,6947,23],[6537,26,6947,24,"result"],[6537,32,6947,30],[6537,34,6947,32,"warning"],[6537,41,6947,39],[6537,42,6947,40],[6538,4,6948,2],[6539,4,6950,2],[6539,11,6950,9,"result"],[6539,17,6950,15],[6540,2,6951,0],[6541,2,6953,0],[6541,11,6953,9,"getResponseData"],[6541,26,6953,24,"getResponseData"],[6541,27,6954,2,"bodyText"],[6541,35,6954,10],[6541,37,6955,2],[6542,4,6956,4,"networkCaptureBodies"],[6542,24,6956,24],[6543,4,6957,4,"responseBodySize"],[6543,20,6957,20],[6544,4,6958,4,"captureDetails"],[6544,18,6958,18],[6545,4,6959,4,"headers"],[6546,2,6960,2],[6546,3,6960,3],[6546,5,6963,2],[6547,4,6964,2],[6547,8,6964,6],[6548,6,6965,4],[6548,12,6965,10,"size"],[6548,16,6965,14],[6548,19,6966,6,"bodyText"],[6548,27,6966,14],[6548,31,6966,18,"bodyText"],[6548,39,6966,26],[6548,40,6966,27,"length"],[6548,46,6966,33],[6548,50,6966,37,"responseBodySize"],[6548,66,6966,53],[6548,71,6966,58,"undefined"],[6548,80,6966,67],[6548,83,6966,70,"getBodySize"],[6548,94,6966,81],[6548,95,6966,82,"bodyText"],[6548,103,6966,90],[6548,104,6966,91],[6548,107,6966,94,"responseBodySize"],[6548,123,6966,110],[6549,6,6968,4],[6549,10,6968,8],[6549,11,6968,9,"captureDetails"],[6549,25,6968,23],[6549,27,6968,25],[6550,8,6969,6],[6550,15,6969,13,"buildSkippedNetworkRequestOrResponse"],[6550,51,6969,49],[6550,52,6969,50,"size"],[6550,56,6969,54],[6550,57,6969,55],[6551,6,6970,4],[6552,6,6972,4],[6552,10,6972,8,"networkCaptureBodies"],[6552,30,6972,28],[6552,32,6972,30],[6553,8,6973,6],[6553,15,6973,13,"buildNetworkRequestOrResponse"],[6553,44,6973,42],[6553,45,6973,43,"headers"],[6553,52,6973,50],[6553,54,6973,52,"size"],[6553,58,6973,56],[6553,60,6973,58,"bodyText"],[6553,68,6973,66],[6553,69,6973,67],[6554,6,6974,4],[6555,6,6976,4],[6555,13,6976,11,"buildNetworkRequestOrResponse"],[6555,42,6976,40],[6555,43,6976,41,"headers"],[6555,50,6976,48],[6555,52,6976,50,"size"],[6555,56,6976,54],[6555,58,6976,56,"undefined"],[6555,67,6976,65],[6555,68,6976,66],[6556,4,6977,2],[6556,5,6977,3],[6556,6,6977,4],[6556,13,6977,11,"error"],[6556,18,6977,16],[6556,20,6977,18],[6557,6,6978,4,"DEBUG_BUILD"],[6557,17,6978,15],[6557,21,6978,19,"logger"],[6557,27,6978,25],[6557,28,6978,26,"exception"],[6557,37,6978,35],[6557,38,6978,36,"error"],[6557,43,6978,41],[6557,45,6978,43],[6557,80,6978,78],[6557,81,6978,79],[6558,6,6979,4],[6559,6,6980,4],[6559,13,6980,11,"buildNetworkRequestOrResponse"],[6559,42,6980,40],[6559,43,6980,41,"headers"],[6559,50,6980,48],[6559,52,6980,50,"responseBodySize"],[6559,68,6980,66],[6559,70,6980,68,"undefined"],[6559,79,6980,77],[6559,80,6980,78],[6560,4,6981,2],[6561,2,6982,0],[6562,2,6984,0],[6562,17,6984,15,"_parseFetchResponseBody"],[6562,40,6984,38,"_parseFetchResponseBody"],[6562,41,6984,39,"response"],[6562,49,6984,47],[6562,51,6984,49],[6563,4,6985,2],[6563,10,6985,8,"res"],[6563,13,6985,11],[6563,16,6985,14,"_tryCloneResponse"],[6563,33,6985,31],[6563,34,6985,32,"response"],[6563,42,6985,40],[6563,43,6985,41],[6564,4,6987,2],[6564,8,6987,6],[6564,9,6987,7,"res"],[6564,12,6987,10],[6564,14,6987,12],[6565,6,6988,4],[6565,13,6988,11],[6565,14,6988,12,"undefined"],[6565,23,6988,21],[6565,25,6988,23],[6565,43,6988,41],[6565,44,6988,42],[6566,4,6989,2],[6567,4,6991,2],[6567,8,6991,6],[6568,6,6992,4],[6568,12,6992,10,"text"],[6568,16,6992,14],[6568,19,6992,17],[6568,25,6992,23,"_tryGetResponseText"],[6568,44,6992,42],[6568,45,6992,43,"res"],[6568,48,6992,46],[6568,49,6992,47],[6569,6,6993,4],[6569,13,6993,11],[6569,14,6993,12,"text"],[6569,18,6993,16],[6569,19,6993,17],[6570,4,6994,2],[6570,5,6994,3],[6570,6,6994,4],[6570,13,6994,11,"error"],[6570,18,6994,16],[6570,20,6994,18],[6571,6,6995,4],[6571,10,6995,8,"error"],[6571,15,6995,13],[6571,27,6995,25,"Error"],[6571,32,6995,30],[6571,36,6995,34,"error"],[6571,41,6995,39],[6571,42,6995,40,"message"],[6571,49,6995,47],[6571,50,6995,48,"indexOf"],[6571,57,6995,55],[6571,58,6995,56],[6571,67,6995,65],[6571,68,6995,66],[6571,71,6995,69],[6571,72,6995,70],[6571,73,6995,71],[6571,75,6995,73],[6572,8,6996,6,"DEBUG_BUILD"],[6572,19,6996,17],[6572,23,6996,21,"logger"],[6572,29,6996,27],[6572,30,6996,28,"warn"],[6572,34,6996,32],[6572,35,6996,33],[6572,78,6996,76],[6572,79,6996,77],[6573,8,6997,6],[6573,15,6997,13],[6573,16,6997,14,"undefined"],[6573,25,6997,23],[6573,27,6997,25],[6573,47,6997,45],[6573,48,6997,46],[6574,6,6998,4],[6575,6,7000,4,"DEBUG_BUILD"],[6575,17,7000,15],[6575,21,7000,19,"logger"],[6575,27,7000,25],[6575,28,7000,26,"exception"],[6575,37,7000,35],[6575,38,7000,36,"error"],[6575,43,7000,41],[6575,45,7000,43],[6575,84,7000,82],[6575,85,7000,83],[6576,6,7001,4],[6576,13,7001,11],[6576,14,7001,12,"undefined"],[6576,23,7001,21],[6576,25,7001,23],[6576,43,7001,41],[6576,44,7001,42],[6577,4,7002,2],[6578,2,7003,0],[6579,2,7005,0],[6579,11,7005,9,"_getFetchRequestArgBody"],[6579,34,7005,32,"_getFetchRequestArgBody"],[6579,35,7005,33,"fetchArgs"],[6579,44,7005,42],[6579,47,7005,45],[6579,49,7005,47],[6579,51,7005,49],[6580,4,7006,2],[6581,4,7007,2],[6581,8,7007,6,"fetchArgs"],[6581,17,7007,15],[6581,18,7007,16,"length"],[6581,24,7007,22],[6581,29,7007,27],[6581,30,7007,28],[6581,34,7007,32],[6581,41,7007,39,"fetchArgs"],[6581,50,7007,48],[6581,51,7007,49],[6581,52,7007,50],[6581,53,7007,51],[6581,58,7007,56],[6581,66,7007,64],[6581,68,7007,66],[6582,6,7008,4],[6582,13,7008,11,"undefined"],[6582,22,7008,20],[6583,4,7009,2],[6584,4,7011,2],[6584,11,7011,10,"fetchArgs"],[6584,20,7011,19],[6584,21,7011,20],[6584,22,7011,21],[6584,23,7011,22],[6584,24,7011,25,"body"],[6584,28,7011,29],[6585,2,7012,0],[6586,2,7014,0],[6586,11,7014,9,"getAllHeaders"],[6586,24,7014,22,"getAllHeaders"],[6586,25,7014,23,"headers"],[6586,32,7014,30],[6586,34,7014,32,"allowedHeaders"],[6586,48,7014,46],[6586,50,7014,48],[6587,4,7015,2],[6587,10,7015,8,"allHeaders"],[6587,20,7015,18],[6587,23,7015,21],[6587,24,7015,22],[6587,25,7015,23],[6588,4,7017,2,"allowedHeaders"],[6588,18,7017,16],[6588,19,7017,17,"forEach"],[6588,26,7017,24],[6588,27,7017,25,"header"],[6588,33,7017,31],[6588,37,7017,35],[6589,6,7018,4],[6589,10,7018,8,"headers"],[6589,17,7018,15],[6589,18,7018,16,"get"],[6589,21,7018,19],[6589,22,7018,20,"header"],[6589,28,7018,26],[6589,29,7018,27],[6589,31,7018,29],[6590,8,7019,6,"allHeaders"],[6590,18,7019,16],[6590,19,7019,17,"header"],[6590,25,7019,23],[6590,26,7019,24],[6590,29,7019,27,"headers"],[6590,36,7019,34],[6590,37,7019,35,"get"],[6590,40,7019,38],[6590,41,7019,39,"header"],[6590,47,7019,45],[6590,48,7019,46],[6591,6,7020,4],[6592,4,7021,2],[6592,5,7021,3],[6592,6,7021,4],[6593,4,7023,2],[6593,11,7023,9,"allHeaders"],[6593,21,7023,19],[6594,2,7024,0],[6595,2,7026,0],[6595,11,7026,9,"getRequestHeaders"],[6595,28,7026,26,"getRequestHeaders"],[6595,29,7026,27,"fetchArgs"],[6595,38,7026,36],[6595,40,7026,38,"allowedHeaders"],[6595,54,7026,52],[6595,56,7026,54],[6596,4,7027,2],[6596,8,7027,6,"fetchArgs"],[6596,17,7027,15],[6596,18,7027,16,"length"],[6596,24,7027,22],[6596,29,7027,27],[6596,30,7027,28],[6596,34,7027,32],[6596,41,7027,39,"fetchArgs"],[6596,50,7027,48],[6596,51,7027,49],[6596,52,7027,50],[6596,53,7027,51],[6596,58,7027,56],[6596,66,7027,64],[6596,68,7027,66],[6597,6,7028,4],[6597,13,7028,11,"getHeadersFromOptions"],[6597,34,7028,32],[6597,35,7028,33,"fetchArgs"],[6597,44,7028,42],[6597,45,7028,43],[6597,46,7028,44],[6597,47,7028,45],[6597,49,7028,48,"allowedHeaders"],[6597,63,7028,62],[6597,64,7028,63],[6598,4,7029,2],[6599,4,7031,2],[6599,8,7031,6,"fetchArgs"],[6599,17,7031,15],[6599,18,7031,16,"length"],[6599,24,7031,22],[6599,29,7031,27],[6599,30,7031,28],[6599,32,7031,30],[6600,6,7032,4],[6600,13,7032,11,"getHeadersFromOptions"],[6600,34,7032,32],[6600,35,7032,33,"fetchArgs"],[6600,44,7032,42],[6600,45,7032,43],[6600,46,7032,44],[6600,47,7032,45],[6600,49,7032,48,"allowedHeaders"],[6600,63,7032,62],[6600,64,7032,63],[6601,4,7033,2],[6602,4,7035,2],[6602,11,7035,9],[6602,12,7035,10],[6602,13,7035,11],[6603,2,7036,0],[6604,2,7038,0],[6604,11,7038,9,"getHeadersFromOptions"],[6604,32,7038,30,"getHeadersFromOptions"],[6604,33,7039,2,"input"],[6604,38,7039,7],[6604,40,7040,2,"allowedHeaders"],[6604,54,7040,16],[6604,56,7041,2],[6605,4,7042,2],[6605,8,7042,6],[6605,9,7042,7,"input"],[6605,14,7042,12],[6605,16,7042,14],[6606,6,7043,4],[6606,13,7043,11],[6606,14,7043,12],[6606,15,7043,13],[6607,4,7044,2],[6608,4,7046,2],[6608,10,7046,8,"headers"],[6608,17,7046,15],[6608,20,7046,18,"input"],[6608,25,7046,23],[6608,26,7046,24,"headers"],[6608,33,7046,31],[6609,4,7048,2],[6609,8,7048,6],[6609,9,7048,7,"headers"],[6609,16,7048,14],[6609,18,7048,16],[6610,6,7049,4],[6610,13,7049,11],[6610,14,7049,12],[6610,15,7049,13],[6611,4,7050,2],[6612,4,7052,2],[6612,8,7052,6,"headers"],[6612,15,7052,13],[6612,27,7052,25,"Headers"],[6612,34,7052,32],[6612,36,7052,34],[6613,6,7053,4],[6613,13,7053,11,"getAllHeaders"],[6613,26,7053,24],[6613,27,7053,25,"headers"],[6613,34,7053,32],[6613,36,7053,34,"allowedHeaders"],[6613,50,7053,48],[6613,51,7053,49],[6614,4,7054,2],[6616,4,7056,2],[6617,4,7057,2],[6617,8,7057,6,"Array"],[6617,13,7057,11],[6617,14,7057,12,"isArray"],[6617,21,7057,19],[6617,22,7057,20,"headers"],[6617,29,7057,27],[6617,30,7057,28],[6617,32,7057,30],[6618,6,7058,4],[6618,13,7058,11],[6618,14,7058,12],[6618,15,7058,13],[6619,4,7059,2],[6620,4,7061,2],[6620,11,7061,9,"getAllowedHeaders"],[6620,28,7061,26],[6620,29,7061,27,"headers"],[6620,36,7061,34],[6620,38,7061,36,"allowedHeaders"],[6620,52,7061,50],[6620,53,7061,51],[6621,2,7062,0],[6622,2,7064,0],[6622,11,7064,9,"_tryCloneResponse"],[6622,28,7064,26,"_tryCloneResponse"],[6622,29,7064,27,"response"],[6622,37,7064,35],[6622,39,7064,37],[6623,4,7065,2],[6623,8,7065,6],[6624,6,7066,4],[6625,6,7067,4],[6625,13,7067,11,"response"],[6625,21,7067,19],[6625,22,7067,20,"clone"],[6625,27,7067,25],[6625,28,7067,26],[6625,29,7067,27],[6626,4,7068,2],[6626,5,7068,3],[6626,6,7068,4],[6626,13,7068,11,"error"],[6626,18,7068,16],[6626,20,7068,18],[6627,6,7069,4],[6628,6,7070,4,"DEBUG_BUILD"],[6628,17,7070,15],[6628,21,7070,19,"logger"],[6628,27,7070,25],[6628,28,7070,26,"exception"],[6628,37,7070,35],[6628,38,7070,36,"error"],[6628,43,7070,41],[6628,45,7070,43],[6628,76,7070,74],[6628,77,7070,75],[6629,4,7071,2],[6630,2,7072,0],[6632,2,7074,0],[6633,0,7075,0],[6634,0,7076,0],[6635,0,7077,0],[6636,0,7078,0],[6637,2,7079,0],[6637,11,7079,9,"_tryGetResponseText"],[6637,30,7079,28,"_tryGetResponseText"],[6637,31,7079,29,"response"],[6637,39,7079,37],[6637,41,7079,39],[6638,4,7080,2],[6638,11,7080,9],[6638,15,7080,13,"Promise"],[6638,22,7080,20],[6638,23,7080,21],[6638,24,7080,22,"resolve"],[6638,31,7080,29],[6638,33,7080,31,"reject"],[6638,39,7080,37],[6638,44,7080,42],[6639,6,7081,4],[6639,12,7081,10,"timeout"],[6639,19,7081,17],[6639,22,7081,20],[6639,26,7081,20,"setTimeout$3"],[6639,50,7081,32],[6639,52,7081,33],[6639,58,7081,39,"reject"],[6639,64,7081,45],[6639,65,7081,46],[6639,69,7081,50,"Error"],[6639,74,7081,55],[6639,75,7081,56],[6639,119,7081,100],[6639,120,7081,101],[6639,121,7081,102],[6639,123,7081,104],[6639,126,7081,107],[6639,127,7081,108],[6640,6,7083,4,"_getResponseText"],[6640,22,7083,20],[6640,23,7083,21,"response"],[6640,31,7083,29],[6640,32,7083,30],[6640,33,7084,7,"then"],[6640,37,7084,11],[6640,38,7085,8,"txt"],[6640,41,7085,11],[6640,45,7085,15,"resolve"],[6640,52,7085,22],[6640,53,7085,23,"txt"],[6640,56,7085,26],[6640,57,7085,27],[6640,59,7086,8,"reason"],[6640,65,7086,14],[6640,69,7086,18,"reject"],[6640,75,7086,24],[6640,76,7086,25,"reason"],[6640,82,7086,31],[6640,83,7087,6],[6640,84,7087,7],[6640,85,7088,7,"finally"],[6640,92,7088,14],[6640,93,7088,15],[6640,99,7088,21,"clearTimeout"],[6640,111,7088,33],[6640,112,7088,34,"timeout"],[6640,119,7088,41],[6640,120,7088,42],[6640,121,7088,43],[6641,4,7089,2],[6641,5,7089,3],[6641,6,7089,4],[6642,2,7090,0],[6643,2,7092,0],[6643,17,7092,15,"_getResponseText"],[6643,33,7092,31,"_getResponseText"],[6643,34,7092,32,"response"],[6643,42,7092,40],[6643,44,7092,42],[6644,4,7093,2],[6645,4,7094,2],[6646,4,7095,2],[6646,11,7095,9],[6646,17,7095,15,"response"],[6646,25,7095,23],[6646,26,7095,24,"text"],[6646,30,7095,28],[6646,31,7095,29],[6646,32,7095,30],[6647,2,7096,0],[6649,2,7098,0],[6650,0,7099,0],[6651,0,7100,0],[6652,0,7101,0],[6653,2,7102,0],[6653,17,7102,15,"captureXhrBreadcrumbToReplay"],[6653,45,7102,43,"captureXhrBreadcrumbToReplay"],[6653,46,7103,2,"breadcrumb"],[6653,56,7103,12],[6653,58,7104,2,"hint"],[6653,62,7104,6],[6653,64,7105,2,"options"],[6653,71,7105,9],[6653,73,7106,2],[6654,4,7107,2],[6654,8,7107,6],[6655,6,7108,4],[6655,12,7108,10,"data"],[6655,16,7108,14],[6655,19,7108,17,"_prepareXhrData"],[6655,34,7108,32],[6655,35,7108,33,"breadcrumb"],[6655,45,7108,43],[6655,47,7108,45,"hint"],[6655,51,7108,49],[6655,53,7108,51,"options"],[6655,60,7108,58],[6655,61,7108,59],[6657,6,7110,4],[6658,6,7111,4],[6658,12,7111,10,"result"],[6658,18,7111,16],[6658,21,7111,19,"makeNetworkReplayBreadcrumb"],[6658,48,7111,46],[6658,49,7111,47],[6658,63,7111,61],[6658,65,7111,63,"data"],[6658,69,7111,67],[6658,70,7111,68],[6659,6,7112,4,"addNetworkBreadcrumb"],[6659,26,7112,24],[6659,27,7112,25,"options"],[6659,34,7112,32],[6659,35,7112,33,"replay"],[6659,41,7112,39],[6659,43,7112,41,"result"],[6659,49,7112,47],[6659,50,7112,48],[6660,4,7113,2],[6660,5,7113,3],[6660,6,7113,4],[6660,13,7113,11,"error"],[6660,18,7113,16],[6660,20,7113,18],[6661,6,7114,4,"DEBUG_BUILD"],[6661,17,7114,15],[6661,21,7114,19,"logger"],[6661,27,7114,25],[6661,28,7114,26,"exception"],[6661,37,7114,35],[6661,38,7114,36,"error"],[6661,43,7114,41],[6661,45,7114,43],[6661,79,7114,77],[6661,80,7114,78],[6662,4,7115,2],[6663,2,7116,0],[6665,2,7118,0],[6666,0,7119,0],[6667,0,7120,0],[6668,0,7121,0],[6669,0,7122,0],[6670,2,7123,0],[6670,11,7123,9,"enrichXhrBreadcrumb"],[6670,30,7123,28,"enrichXhrBreadcrumb"],[6670,31,7124,2,"breadcrumb"],[6670,41,7124,12],[6670,43,7125,2,"hint"],[6670,47,7125,6],[6670,49,7126,2],[6671,4,7127,2],[6671,10,7127,8],[6672,6,7127,10,"xhr"],[6672,9,7127,13],[6673,6,7127,15,"input"],[6674,4,7127,21],[6674,5,7127,22],[6674,8,7127,25,"hint"],[6674,12,7127,29],[6675,4,7129,2],[6675,8,7129,6],[6675,9,7129,7,"xhr"],[6675,12,7129,10],[6675,14,7129,12],[6676,6,7130,4],[6677,4,7131,2],[6678,4,7133,2],[6678,10,7133,8,"reqSize"],[6678,17,7133,15],[6678,20,7133,18,"getBodySize"],[6678,31,7133,29],[6678,32,7133,30,"input"],[6678,37,7133,35],[6678,38,7133,36],[6679,4,7134,2],[6679,10,7134,8,"resSize"],[6679,17,7134,15],[6679,20,7134,18,"xhr"],[6679,23,7134,21],[6679,24,7134,22,"getResponseHeader"],[6679,41,7134,39],[6679,42,7134,40],[6679,58,7134,56],[6679,59,7134,57],[6679,62,7135,6,"parseContentLengthHeader"],[6679,86,7135,30],[6679,87,7135,31,"xhr"],[6679,90,7135,34],[6679,91,7135,35,"getResponseHeader"],[6679,108,7135,52],[6679,109,7135,53],[6679,125,7135,69],[6679,126,7135,70],[6679,127,7135,71],[6679,130,7136,6,"_getBodySize"],[6679,142,7136,18],[6679,143,7136,19,"xhr"],[6679,146,7136,22],[6679,147,7136,23,"response"],[6679,155,7136,31],[6679,157,7136,33,"xhr"],[6679,160,7136,36],[6679,161,7136,37,"responseType"],[6679,173,7136,49],[6679,174,7136,50],[6680,4,7138,2],[6680,8,7138,6,"reqSize"],[6680,15,7138,13],[6680,20,7138,18,"undefined"],[6680,29,7138,27],[6680,31,7138,29],[6681,6,7139,4,"breadcrumb"],[6681,16,7139,14],[6681,17,7139,15,"data"],[6681,21,7139,19],[6681,22,7139,20,"request_body_size"],[6681,39,7139,37],[6681,42,7139,40,"reqSize"],[6681,49,7139,47],[6682,4,7140,2],[6683,4,7141,2],[6683,8,7141,6,"resSize"],[6683,15,7141,13],[6683,20,7141,18,"undefined"],[6683,29,7141,27],[6683,31,7141,29],[6684,6,7142,4,"breadcrumb"],[6684,16,7142,14],[6684,17,7142,15,"data"],[6684,21,7142,19],[6684,22,7142,20,"response_body_size"],[6684,40,7142,38],[6684,43,7142,41,"resSize"],[6684,50,7142,48],[6685,4,7143,2],[6686,2,7144,0],[6687,2,7146,0],[6687,11,7146,9,"_prepareXhrData"],[6687,26,7146,24,"_prepareXhrData"],[6687,27,7147,2,"breadcrumb"],[6687,37,7147,12],[6687,39,7148,2,"hint"],[6687,43,7148,6],[6687,45,7149,2,"options"],[6687,52,7149,9],[6687,54,7150,2],[6688,4,7151,2],[6688,10,7151,8,"now"],[6688,13,7151,11],[6688,16,7151,14,"Date"],[6688,20,7151,18],[6688,21,7151,19,"now"],[6688,24,7151,22],[6688,25,7151,23],[6688,26,7151,24],[6689,4,7152,2],[6689,10,7152,8],[6690,6,7152,10,"startTimestamp"],[6690,20,7152,24],[6690,23,7152,27,"now"],[6690,26,7152,30],[6691,6,7152,32,"endTimestamp"],[6691,18,7152,44],[6691,21,7152,47,"now"],[6691,24,7152,50],[6692,6,7152,52,"input"],[6692,11,7152,57],[6693,6,7152,59,"xhr"],[6694,4,7152,63],[6694,5,7152,64],[6694,8,7152,67,"hint"],[6694,12,7152,71],[6695,4,7154,2],[6695,10,7154,8],[6696,6,7155,4,"url"],[6696,9,7155,7],[6697,6,7156,4,"method"],[6697,12,7156,10],[6698,6,7157,4,"status_code"],[6698,17,7157,15],[6698,19,7157,17,"statusCode"],[6698,29,7157,27],[6698,32,7157,30],[6698,33,7157,31],[6699,6,7158,4,"request_body_size"],[6699,23,7158,21],[6699,25,7158,23,"requestBodySize"],[6699,40,7158,38],[6700,6,7159,4,"response_body_size"],[6700,24,7159,22],[6700,26,7159,24,"responseBodySize"],[6701,4,7160,2],[6701,5,7160,3],[6701,8,7160,6,"breadcrumb"],[6701,18,7160,16],[6701,19,7160,17,"data"],[6701,23,7160,21],[6702,4,7162,2],[6702,8,7162,6],[6702,9,7162,7,"url"],[6702,12,7162,10],[6702,14,7162,12],[6703,6,7163,4],[6703,13,7163,11],[6703,17,7163,15],[6704,4,7164,2],[6705,4,7166,2],[6705,8,7166,6],[6705,9,7166,7,"xhr"],[6705,12,7166,10],[6705,16,7166,14],[6705,17,7166,15,"urlMatches"],[6705,27,7166,25],[6705,28,7166,26,"url"],[6705,31,7166,29],[6705,33,7166,31,"options"],[6705,40,7166,38],[6705,41,7166,39,"networkDetailAllowUrls"],[6705,63,7166,61],[6705,64,7166,62],[6705,68,7166,66,"urlMatches"],[6705,78,7166,76],[6705,79,7166,77,"url"],[6705,82,7166,80],[6705,84,7166,82,"options"],[6705,91,7166,89],[6705,92,7166,90,"networkDetailDenyUrls"],[6705,113,7166,111],[6705,114,7166,112],[6705,116,7166,114],[6706,6,7167,4],[6706,12,7167,10,"request"],[6706,19,7167,17],[6706,22,7167,20,"buildSkippedNetworkRequestOrResponse"],[6706,58,7167,56],[6706,59,7167,57,"requestBodySize"],[6706,74,7167,72],[6706,75,7167,73],[6707,6,7168,4],[6707,12,7168,10,"response"],[6707,20,7168,18],[6707,23,7168,21,"buildSkippedNetworkRequestOrResponse"],[6707,59,7168,57],[6707,60,7168,58,"responseBodySize"],[6707,76,7168,74],[6707,77,7168,75],[6708,6,7169,4],[6708,13,7169,11],[6709,8,7170,6,"startTimestamp"],[6709,22,7170,20],[6710,8,7171,6,"endTimestamp"],[6710,20,7171,18],[6711,8,7172,6,"url"],[6711,11,7172,9],[6712,8,7173,6,"method"],[6712,14,7173,12],[6713,8,7174,6,"statusCode"],[6713,18,7174,16],[6714,8,7175,6,"request"],[6714,15,7175,13],[6715,8,7176,6,"response"],[6716,6,7177,4],[6716,7,7177,5],[6717,4,7178,2],[6718,4,7180,2],[6718,10,7180,8,"xhrInfo"],[6718,17,7180,15],[6718,20,7180,18,"xhr"],[6718,23,7180,21],[6718,24,7180,22,"SENTRY_XHR_DATA_KEY"],[6718,57,7180,41],[6718,58,7180,42],[6719,4,7181,2],[6719,10,7181,8,"networkRequestHeaders"],[6719,31,7181,29],[6719,34,7181,32,"xhrInfo"],[6719,41,7181,39],[6719,44,7182,6,"getAllowedHeaders"],[6719,61,7182,23],[6719,62,7182,24,"xhrInfo"],[6719,69,7182,31],[6719,70,7182,32,"request_headers"],[6719,85,7182,47],[6719,87,7182,49,"options"],[6719,94,7182,56],[6719,95,7182,57,"networkRequestHeaders"],[6719,116,7182,78],[6719,117,7182,79],[6719,120,7183,6],[6719,121,7183,7],[6719,122,7183,8],[6720,4,7184,2],[6720,10,7184,8,"networkResponseHeaders"],[6720,32,7184,30],[6720,35,7184,33,"getAllowedHeaders"],[6720,52,7184,50],[6720,53,7184,51,"getResponseHeaders"],[6720,71,7184,69],[6720,72,7184,70,"xhr"],[6720,75,7184,73],[6720,76,7184,74],[6720,78,7184,76,"options"],[6720,85,7184,83],[6720,86,7184,84,"networkResponseHeaders"],[6720,108,7184,106],[6720,109,7184,107],[6721,4,7186,2],[6721,10,7186,8],[6721,11,7186,9,"requestBody"],[6721,22,7186,20],[6721,24,7186,22,"requestWarning"],[6721,38,7186,36],[6721,39,7186,37],[6721,42,7186,40,"options"],[6721,49,7186,47],[6721,50,7186,48,"networkCaptureBodies"],[6721,70,7186,68],[6721,73,7186,71,"getBodyString"],[6721,86,7186,84],[6721,87,7186,85,"input"],[6721,92,7186,90],[6721,93,7186,91],[6721,96,7186,94],[6721,97,7186,95,"undefined"],[6721,106,7186,104],[6721,107,7186,105],[6722,4,7187,2],[6722,10,7187,8],[6722,11,7187,9,"responseBody"],[6722,23,7187,21],[6722,25,7187,23,"responseWarning"],[6722,40,7187,38],[6722,41,7187,39],[6722,44,7187,42,"options"],[6722,51,7187,49],[6722,52,7187,50,"networkCaptureBodies"],[6722,72,7187,70],[6722,75,7187,73,"_getXhrResponseBody"],[6722,94,7187,92],[6722,95,7187,93,"xhr"],[6722,98,7187,96],[6722,99,7187,97],[6722,102,7187,100],[6722,103,7187,101,"undefined"],[6722,112,7187,110],[6722,113,7187,111],[6723,4,7189,2],[6723,10,7189,8,"request"],[6723,17,7189,15],[6723,20,7189,18,"buildNetworkRequestOrResponse"],[6723,49,7189,47],[6723,50,7189,48,"networkRequestHeaders"],[6723,71,7189,69],[6723,73,7189,71,"requestBodySize"],[6723,88,7189,86],[6723,90,7189,88,"requestBody"],[6723,101,7189,99],[6723,102,7189,100],[6724,4,7190,2],[6724,10,7190,8,"response"],[6724,18,7190,16],[6724,21,7190,19,"buildNetworkRequestOrResponse"],[6724,50,7190,48],[6724,51,7190,49,"networkResponseHeaders"],[6724,73,7190,71],[6724,75,7190,73,"responseBodySize"],[6724,91,7190,89],[6724,93,7190,91,"responseBody"],[6724,105,7190,103],[6724,106,7190,104],[6725,4,7192,2],[6725,11,7192,9],[6726,6,7193,4,"startTimestamp"],[6726,20,7193,18],[6727,6,7194,4,"endTimestamp"],[6727,18,7194,16],[6728,6,7195,4,"url"],[6728,9,7195,7],[6729,6,7196,4,"method"],[6729,12,7196,10],[6730,6,7197,4,"statusCode"],[6730,16,7197,14],[6731,6,7198,4,"request"],[6731,13,7198,11],[6731,15,7198,13,"requestWarning"],[6731,29,7198,27],[6731,32,7198,30,"mergeWarning"],[6731,44,7198,42],[6731,45,7198,43,"request"],[6731,52,7198,50],[6731,54,7198,52,"requestWarning"],[6731,68,7198,66],[6731,69,7198,67],[6731,72,7198,70,"request"],[6731,79,7198,77],[6732,6,7199,4,"response"],[6732,14,7199,12],[6732,16,7199,14,"responseWarning"],[6732,31,7199,29],[6732,34,7199,32,"mergeWarning"],[6732,46,7199,44],[6732,47,7199,45,"response"],[6732,55,7199,53],[6732,57,7199,55,"responseWarning"],[6732,72,7199,70],[6732,73,7199,71],[6732,76,7199,74,"response"],[6733,4,7200,2],[6733,5,7200,3],[6734,2,7201,0],[6735,2,7203,0],[6735,11,7203,9,"getResponseHeaders"],[6735,29,7203,27,"getResponseHeaders"],[6735,30,7203,28,"xhr"],[6735,33,7203,31],[6735,35,7203,33],[6736,4,7204,2],[6736,10,7204,8,"headers"],[6736,17,7204,15],[6736,20,7204,18,"xhr"],[6736,23,7204,21],[6736,24,7204,22,"getAllResponseHeaders"],[6736,45,7204,43],[6736,46,7204,44],[6736,47,7204,45],[6737,4,7206,2],[6737,8,7206,6],[6737,9,7206,7,"headers"],[6737,16,7206,14],[6737,18,7206,16],[6738,6,7207,4],[6738,13,7207,11],[6738,14,7207,12],[6738,15,7207,13],[6739,4,7208,2],[6740,4,7210,2],[6740,11,7210,9,"headers"],[6740,18,7210,16],[6740,19,7210,17,"split"],[6740,24,7210,22],[6740,25,7210,23],[6740,31,7210,29],[6740,32,7210,30],[6740,33,7210,31,"reduce"],[6740,39,7210,37],[6740,40,7210,38],[6740,41,7210,39,"acc"],[6740,44,7210,42],[6740,46,7210,44,"line"],[6740,50,7210,48],[6740,55,7210,53],[6741,6,7211,4],[6741,12,7211,10],[6741,13,7211,11,"key"],[6741,16,7211,14],[6741,18,7211,16,"value"],[6741,23,7211,21],[6741,24,7211,22],[6741,27,7211,25,"line"],[6741,31,7211,29],[6741,32,7211,30,"split"],[6741,37,7211,35],[6741,38,7211,36],[6741,42,7211,40],[6741,43,7211,41],[6742,6,7212,4],[6742,10,7212,8,"value"],[6742,15,7212,13],[6742,17,7212,15],[6743,8,7213,6,"acc"],[6743,11,7213,9],[6743,12,7213,10,"key"],[6743,15,7213,13],[6743,16,7213,14,"toLowerCase"],[6743,27,7213,25],[6743,28,7213,26],[6743,29,7213,27],[6743,30,7213,28],[6743,33,7213,31,"value"],[6743,38,7213,36],[6744,6,7214,4],[6745,6,7215,4],[6745,13,7215,11,"acc"],[6745,16,7215,14],[6746,4,7216,2],[6746,5,7216,3],[6746,7,7216,5],[6746,8,7216,6],[6746,9,7216,7],[6746,10,7216,8],[6747,2,7217,0],[6748,2,7219,0],[6748,11,7219,9,"_getXhrResponseBody"],[6748,30,7219,28,"_getXhrResponseBody"],[6748,31,7219,29,"xhr"],[6748,34,7219,32],[6748,36,7219,34],[6749,4,7220,2],[6750,4,7221,2],[6750,10,7221,8,"errors"],[6750,16,7221,14],[6750,19,7221,17],[6750,21,7221,19],[6751,4,7223,2],[6751,8,7223,6],[6752,6,7224,4],[6752,13,7224,11],[6752,14,7224,12,"xhr"],[6752,17,7224,15],[6752,18,7224,16,"responseText"],[6752,30,7224,28],[6752,31,7224,29],[6753,4,7225,2],[6753,5,7225,3],[6753,6,7225,4],[6753,13,7225,11,"e"],[6753,14,7225,12],[6753,16,7225,14],[6754,6,7226,4,"errors"],[6754,12,7226,10],[6754,13,7226,11,"push"],[6754,17,7226,15],[6754,18,7226,16,"e"],[6754,19,7226,17],[6754,20,7226,18],[6755,4,7227,2],[6757,4,7229,2],[6758,4,7230,2],[6758,8,7230,6],[6759,6,7231,4],[6759,13,7231,11,"_parseXhrResponse"],[6759,30,7231,28],[6759,31,7231,29,"xhr"],[6759,34,7231,32],[6759,35,7231,33,"response"],[6759,43,7231,41],[6759,45,7231,43,"xhr"],[6759,48,7231,46],[6759,49,7231,47,"responseType"],[6759,61,7231,59],[6759,62,7231,60],[6760,4,7232,2],[6760,5,7232,3],[6760,6,7232,4],[6760,13,7232,11,"e"],[6760,14,7232,12],[6760,16,7232,14],[6761,6,7233,4,"errors"],[6761,12,7233,10],[6761,13,7233,11,"push"],[6761,17,7233,15],[6761,18,7233,16,"e"],[6761,19,7233,17],[6761,20,7233,18],[6762,4,7234,2],[6763,4,7236,2,"DEBUG_BUILD"],[6763,15,7236,13],[6763,19,7236,17,"logger"],[6763,25,7236,23],[6763,26,7236,24,"warn"],[6763,30,7236,28],[6763,31,7236,29],[6763,64,7236,62],[6763,66,7236,64],[6763,69,7236,67,"errors"],[6763,75,7236,73],[6763,76,7236,74],[6764,4,7238,2],[6764,11,7238,9],[6764,12,7238,10,"undefined"],[6764,21,7238,19],[6764,22,7238,20],[6765,2,7239,0],[6767,2,7241,0],[6768,0,7242,0],[6769,0,7243,0],[6770,0,7244,0],[6771,0,7245,0],[6772,0,7246,0],[6773,0,7247,0],[6774,0,7248,0],[6775,0,7249,0],[6776,0,7250,0],[6777,0,7251,0],[6778,2,7252,0],[6778,11,7252,9,"_parseXhrResponse"],[6778,28,7252,26,"_parseXhrResponse"],[6778,29,7253,2,"body"],[6778,33,7253,6],[6778,35,7254,2,"responseType"],[6778,47,7254,14],[6778,49,7255,2],[6779,4,7256,2],[6779,8,7256,6],[6780,6,7257,4],[6780,10,7257,8],[6780,17,7257,15,"body"],[6780,21,7257,19],[6780,26,7257,24],[6780,34,7257,32],[6780,36,7257,34],[6781,8,7258,6],[6781,15,7258,13],[6781,16,7258,14,"body"],[6781,20,7258,18],[6781,21,7258,19],[6782,6,7259,4],[6783,6,7261,4],[6783,10,7261,8,"body"],[6783,14,7261,12],[6783,26,7261,24,"Document"],[6783,34,7261,32],[6783,36,7261,34],[6784,8,7262,6],[6784,15,7262,13],[6784,16,7262,14,"body"],[6784,20,7262,18],[6784,21,7262,19,"body"],[6784,25,7262,23],[6784,26,7262,24,"outerHTML"],[6784,35,7262,33],[6784,36,7262,34],[6785,6,7263,4],[6786,6,7265,4],[6786,10,7265,8,"responseType"],[6786,22,7265,20],[6786,27,7265,25],[6786,33,7265,31],[6786,37,7265,35,"body"],[6786,41,7265,39],[6786,45,7265,43],[6786,52,7265,50,"body"],[6786,56,7265,54],[6786,61,7265,59],[6786,69,7265,67],[6786,71,7265,69],[6787,8,7266,6],[6787,15,7266,13],[6787,16,7266,14,"JSON"],[6787,20,7266,18],[6787,21,7266,19,"stringify"],[6787,30,7266,28],[6787,31,7266,29,"body"],[6787,35,7266,33],[6787,36,7266,34],[6787,37,7266,35],[6788,6,7267,4],[6789,6,7269,4],[6789,10,7269,8],[6789,11,7269,9,"body"],[6789,15,7269,13],[6789,17,7269,15],[6790,8,7270,6],[6790,15,7270,13],[6790,16,7270,14,"undefined"],[6790,25,7270,23],[6790,26,7270,24],[6791,6,7271,4],[6792,4,7272,2],[6792,5,7272,3],[6792,6,7272,4],[6792,13,7272,11,"error"],[6792,18,7272,16],[6792,20,7272,18],[6793,6,7273,4,"DEBUG_BUILD"],[6793,17,7273,15],[6793,21,7273,19,"logger"],[6793,27,7273,25],[6793,28,7273,26,"exception"],[6793,37,7273,35],[6793,38,7273,36,"error"],[6793,43,7273,41],[6793,45,7273,43],[6793,71,7273,69],[6793,73,7273,71,"body"],[6793,77,7273,75],[6793,78,7273,76],[6794,6,7274,4],[6794,13,7274,11],[6794,14,7274,12,"undefined"],[6794,23,7274,21],[6794,25,7274,23],[6794,43,7274,41],[6794,44,7274,42],[6795,4,7275,2],[6796,4,7277,2,"DEBUG_BUILD"],[6796,15,7277,13],[6796,19,7277,17,"logger"],[6796,25,7277,23],[6796,26,7277,24,"info"],[6796,30,7277,28],[6796,31,7277,29],[6796,75,7277,73],[6796,77,7277,75,"body"],[6796,81,7277,79],[6796,82,7277,80],[6797,4,7279,2],[6797,11,7279,9],[6797,12,7279,10,"undefined"],[6797,21,7279,19],[6797,23,7279,21],[6797,46,7279,44],[6797,47,7279,45],[6798,2,7280,0],[6799,2,7282,0],[6799,11,7282,9,"_getBodySize"],[6799,23,7282,21,"_getBodySize"],[6799,24,7283,2,"body"],[6799,28,7283,6],[6799,30,7284,2,"responseType"],[6799,42,7284,14],[6799,44,7285,2],[6800,4,7286,2],[6800,8,7286,6],[6801,6,7287,4],[6801,12,7287,10,"bodyStr"],[6801,19,7287,17],[6801,22,7287,20,"responseType"],[6801,34,7287,32],[6801,39,7287,37],[6801,45,7287,43],[6801,49,7287,47,"body"],[6801,53,7287,51],[6801,57,7287,55],[6801,64,7287,62,"body"],[6801,68,7287,66],[6801,73,7287,71],[6801,81,7287,79],[6801,84,7287,82,"JSON"],[6801,88,7287,86],[6801,89,7287,87,"stringify"],[6801,98,7287,96],[6801,99,7287,97,"body"],[6801,103,7287,101],[6801,104,7287,102],[6801,107,7287,105,"body"],[6801,111,7287,109],[6802,6,7288,4],[6802,13,7288,11,"getBodySize"],[6802,24,7288,22],[6802,25,7288,23,"bodyStr"],[6802,32,7288,30],[6802,33,7288,31],[6803,4,7289,2],[6803,5,7289,3],[6803,6,7289,4],[6803,13,7289,11,"e2"],[6803,15,7289,13],[6803,17,7289,15],[6804,6,7290,4],[6804,13,7290,11,"undefined"],[6804,22,7290,20],[6805,4,7291,2],[6806,2,7292,0],[6808,2,7294,0],[6809,0,7295,0],[6810,0,7296,0],[6811,0,7297,0],[6812,0,7298,0],[6813,0,7299,0],[6814,2,7300,0],[6814,11,7300,9,"handleNetworkBreadcrumbs"],[6814,35,7300,33,"handleNetworkBreadcrumbs"],[6814,36,7300,34,"replay"],[6814,42,7300,40],[6814,44,7300,42],[6815,4,7301,2],[6815,10,7301,8,"client"],[6815,16,7301,14],[6815,19,7301,17],[6815,23,7301,17,"getClient"],[6815,38,7301,26],[6815,40,7301,27],[6815,41,7301,28],[6816,4,7303,2],[6816,8,7303,6],[6817,6,7304,4],[6817,12,7304,10],[6818,8,7305,6,"networkDetailAllowUrls"],[6818,30,7305,28],[6819,8,7306,6,"networkDetailDenyUrls"],[6819,29,7306,27],[6820,8,7307,6,"networkCaptureBodies"],[6820,28,7307,26],[6821,8,7308,6,"networkRequestHeaders"],[6821,29,7308,27],[6822,8,7309,6,"networkResponseHeaders"],[6823,6,7310,4],[6823,7,7310,5],[6823,10,7310,8,"replay"],[6823,16,7310,14],[6823,17,7310,15,"getOptions"],[6823,27,7310,25],[6823,28,7310,26],[6823,29,7310,27],[6824,6,7312,4],[6824,12,7312,10,"options"],[6824,19,7312,17],[6824,22,7312,20],[6825,8,7313,6,"replay"],[6825,14,7313,12],[6826,8,7314,6,"networkDetailAllowUrls"],[6826,30,7314,28],[6827,8,7315,6,"networkDetailDenyUrls"],[6827,29,7315,27],[6828,8,7316,6,"networkCaptureBodies"],[6828,28,7316,26],[6829,8,7317,6,"networkRequestHeaders"],[6829,29,7317,27],[6830,8,7318,6,"networkResponseHeaders"],[6831,6,7319,4],[6831,7,7319,5],[6832,6,7321,4],[6832,10,7321,8,"client"],[6832,16,7321,14],[6832,18,7321,16],[6833,8,7322,6,"client"],[6833,14,7322,12],[6833,15,7322,13,"on"],[6833,17,7322,15],[6833,18,7322,16],[6833,39,7322,37],[6833,41,7322,39],[6833,42,7322,40,"breadcrumb"],[6833,52,7322,50],[6833,54,7322,52,"hint"],[6833,58,7322,56],[6833,63,7322,61,"beforeAddNetworkBreadcrumb"],[6833,89,7322,87],[6833,90,7322,88,"options"],[6833,97,7322,95],[6833,99,7322,97,"breadcrumb"],[6833,109,7322,107],[6833,111,7322,109,"hint"],[6833,115,7322,113],[6833,116,7322,114],[6833,117,7322,115],[6834,6,7323,4],[6835,4,7324,2],[6835,5,7324,3],[6835,6,7324,4],[6835,13,7324,11,"e2"],[6835,15,7324,13],[6835,17,7324,15],[6836,6,7325,4],[6837,4,7325,4],[6838,2,7327,0],[6840,2,7329,0],[6841,2,7330,0],[6841,11,7330,9,"beforeAddNetworkBreadcrumb"],[6841,37,7330,35,"beforeAddNetworkBreadcrumb"],[6841,38,7331,2,"options"],[6841,45,7331,9],[6841,47,7332,2,"breadcrumb"],[6841,57,7332,12],[6841,59,7333,2,"hint"],[6841,63,7333,6],[6841,65,7334,2],[6842,4,7335,2],[6842,8,7335,6],[6842,9,7335,7,"breadcrumb"],[6842,19,7335,17],[6842,20,7335,18,"data"],[6842,24,7335,22],[6842,26,7335,24],[6843,6,7336,4],[6844,4,7337,2],[6845,4,7339,2],[6845,8,7339,6],[6846,6,7340,4],[6846,10,7340,8,"_isXhrBreadcrumb"],[6846,26,7340,24],[6846,27,7340,25,"breadcrumb"],[6846,37,7340,35],[6846,38,7340,36],[6846,42,7340,40,"_isXhrHint"],[6846,52,7340,50],[6846,53,7340,51,"hint"],[6846,57,7340,55],[6846,58,7340,56],[6846,60,7340,58],[6847,8,7341,6],[6848,8,7342,6],[6849,8,7343,6],[6850,8,7344,6,"enrichXhrBreadcrumb"],[6850,27,7344,25],[6850,28,7344,26,"breadcrumb"],[6850,38,7344,36],[6850,40,7344,38,"hint"],[6850,44,7344,42],[6850,45,7344,43],[6852,8,7346,6],[6853,8,7347,6],[6854,8,7348,6,"captureXhrBreadcrumbToReplay"],[6854,36,7348,34],[6854,37,7348,35,"breadcrumb"],[6854,47,7348,45],[6854,49,7348,47,"hint"],[6854,53,7348,51],[6854,55,7348,53,"options"],[6854,62,7348,60],[6854,63,7348,61],[6855,6,7349,4],[6856,6,7351,4],[6856,10,7351,8,"_isFetchBreadcrumb"],[6856,28,7351,26],[6856,29,7351,27,"breadcrumb"],[6856,39,7351,37],[6856,40,7351,38],[6856,44,7351,42,"_isFetchHint"],[6856,56,7351,54],[6856,57,7351,55,"hint"],[6856,61,7351,59],[6856,62,7351,60],[6856,64,7351,62],[6857,8,7352,6],[6858,8,7353,6],[6859,8,7354,6],[6860,8,7355,6,"enrichFetchBreadcrumb"],[6860,29,7355,27],[6860,30,7355,28,"breadcrumb"],[6860,40,7355,38],[6860,42,7355,40,"hint"],[6860,46,7355,44],[6860,47,7355,45],[6862,8,7357,6],[6863,8,7358,6],[6864,8,7359,6,"captureFetchBreadcrumbToReplay"],[6864,38,7359,36],[6864,39,7359,37,"breadcrumb"],[6864,49,7359,47],[6864,51,7359,49,"hint"],[6864,55,7359,53],[6864,57,7359,55,"options"],[6864,64,7359,62],[6864,65,7359,63],[6865,6,7360,4],[6866,4,7361,2],[6866,5,7361,3],[6866,6,7361,4],[6866,13,7361,11,"e"],[6866,14,7361,12],[6866,16,7361,14],[6867,6,7362,4,"DEBUG_BUILD"],[6867,17,7362,15],[6867,21,7362,19,"logger"],[6867,27,7362,25],[6867,28,7362,26,"exception"],[6867,37,7362,35],[6867,38,7362,36,"e"],[6867,39,7362,37],[6867,41,7362,39],[6867,82,7362,80],[6867,83,7362,81],[6868,4,7363,2],[6869,2,7364,0],[6870,2,7366,0],[6870,11,7366,9,"_isXhrBreadcrumb"],[6870,27,7366,25,"_isXhrBreadcrumb"],[6870,28,7366,26,"breadcrumb"],[6870,38,7366,36],[6870,40,7366,38],[6871,4,7367,2],[6871,11,7367,9,"breadcrumb"],[6871,21,7367,19],[6871,22,7367,20,"category"],[6871,30,7367,28],[6871,35,7367,33],[6871,40,7367,38],[6872,2,7368,0],[6873,2,7370,0],[6873,11,7370,9,"_isFetchBreadcrumb"],[6873,29,7370,27,"_isFetchBreadcrumb"],[6873,30,7370,28,"breadcrumb"],[6873,40,7370,38],[6873,42,7370,40],[6874,4,7371,2],[6874,11,7371,9,"breadcrumb"],[6874,21,7371,19],[6874,22,7371,20,"category"],[6874,30,7371,28],[6874,35,7371,33],[6874,42,7371,40],[6875,2,7372,0],[6876,2,7374,0],[6876,11,7374,9,"_isXhrHint"],[6876,21,7374,19,"_isXhrHint"],[6876,22,7374,20,"hint"],[6876,26,7374,24],[6876,28,7374,26],[6877,4,7375,2],[6877,11,7375,9,"hint"],[6877,15,7375,13],[6877,19,7375,17,"hint"],[6877,23,7375,21],[6877,24,7375,22,"xhr"],[6877,27,7375,25],[6878,2,7376,0],[6879,2,7378,0],[6879,11,7378,9,"_isFetchHint"],[6879,23,7378,21,"_isFetchHint"],[6879,24,7378,22,"hint"],[6879,28,7378,26],[6879,30,7378,28],[6880,4,7379,2],[6880,11,7379,9,"hint"],[6880,15,7379,13],[6880,19,7379,17,"hint"],[6880,23,7379,21],[6880,24,7379,22,"response"],[6880,32,7379,30],[6881,2,7380,0],[6883,2,7382,0],[6884,0,7383,0],[6885,0,7384,0],[6886,2,7385,0],[6886,11,7385,9,"addGlobalListeners"],[6886,29,7385,27,"addGlobalListeners"],[6886,30,7385,28,"replay"],[6886,36,7385,34],[6886,38,7385,36],[6887,4,7386,2],[6888,4,7387,2],[6888,10,7387,8,"client"],[6888,16,7387,14],[6888,19,7387,17],[6888,23,7387,17,"getClient"],[6888,38,7387,26],[6888,40,7387,27],[6888,41,7387,28],[6889,4,7389,2],[6889,8,7389,2,"addClickKeypressInstrumentationHandler"],[6889,60,7389,40],[6889,62,7389,41,"handleDomListener"],[6889,79,7389,58],[6889,80,7389,59,"replay"],[6889,86,7389,65],[6889,87,7389,66],[6889,88,7389,67],[6890,4,7390,2],[6890,8,7390,2,"addHistoryInstrumentationHandler"],[6890,54,7390,34],[6890,56,7390,35,"handleHistorySpanListener"],[6890,81,7390,60],[6890,82,7390,61,"replay"],[6890,88,7390,67],[6890,89,7390,68],[6890,90,7390,69],[6891,4,7391,2,"handleBreadcrumbs"],[6891,21,7391,19],[6891,22,7391,20,"replay"],[6891,28,7391,26],[6891,29,7391,27],[6892,4,7392,2,"handleNetworkBreadcrumbs"],[6892,28,7392,26],[6892,29,7392,27,"replay"],[6892,35,7392,33],[6892,36,7392,34],[6894,4,7394,2],[6895,4,7395,2],[6896,4,7396,2],[6896,10,7396,8,"eventProcessor"],[6896,24,7396,22],[6896,27,7396,25,"handleGlobalEventListener"],[6896,52,7396,50],[6896,53,7396,51,"replay"],[6896,59,7396,57],[6896,60,7396,58],[6897,4,7397,2],[6897,8,7397,2,"addEventProcessor"],[6897,31,7397,19],[6897,33,7397,20,"eventProcessor"],[6897,47,7397,34],[6897,48,7397,35],[6899,4,7399,2],[6900,4,7400,2],[6900,8,7400,6,"client"],[6900,14,7400,12],[6900,16,7400,14],[6901,6,7401,4,"client"],[6901,12,7401,10],[6901,13,7401,11,"on"],[6901,15,7401,13],[6901,16,7401,14],[6901,33,7401,31],[6901,35,7401,33,"handleBeforeSendEvent"],[6901,56,7401,54],[6901,57,7401,55,"replay"],[6901,63,7401,61],[6901,64,7401,62],[6901,65,7401,63],[6902,6,7402,4,"client"],[6902,12,7402,10],[6902,13,7402,11,"on"],[6902,15,7402,13],[6902,16,7402,14],[6902,32,7402,30],[6902,34,7402,32,"handleAfterSendEvent"],[6902,54,7402,52],[6902,55,7402,53,"replay"],[6902,61,7402,59],[6902,62,7402,60],[6902,63,7402,61],[6903,6,7403,4,"client"],[6903,12,7403,10],[6903,13,7403,11,"on"],[6903,15,7403,13],[6903,16,7403,14],[6903,27,7403,25],[6903,29,7403,28,"dsc"],[6903,32,7403,31],[6903,36,7403,36],[6904,8,7404,6],[6904,14,7404,12,"replayId"],[6904,22,7404,20],[6904,25,7404,23,"replay"],[6904,31,7404,29],[6904,32,7404,30,"getSessionId"],[6904,44,7404,42],[6904,45,7404,43],[6904,46,7404,44],[6905,8,7405,6],[6906,8,7406,6],[6906,12,7406,10,"replayId"],[6906,20,7406,18],[6906,24,7406,22,"replay"],[6906,30,7406,28],[6906,31,7406,29,"isEnabled"],[6906,40,7406,38],[6906,41,7406,39],[6906,42,7406,40],[6906,46,7406,44,"replay"],[6906,52,7406,50],[6906,53,7406,51,"recordingMode"],[6906,66,7406,64],[6906,71,7406,69],[6906,80,7406,78],[6906,82,7406,80],[6907,10,7407,8],[6908,10,7408,8],[6908,16,7408,14,"isSessionActive"],[6908,31,7408,29],[6908,34,7408,32,"replay"],[6908,40,7408,38],[6908,41,7408,39,"checkAndHandleExpiredSession"],[6908,69,7408,67],[6908,70,7408,68],[6908,71,7408,69],[6909,10,7409,8],[6909,14,7409,12,"isSessionActive"],[6909,29,7409,27],[6909,31,7409,29],[6910,12,7410,10,"dsc"],[6910,15,7410,13],[6910,16,7410,14,"replay_id"],[6910,25,7410,23],[6910,28,7410,26,"replayId"],[6910,36,7410,34],[6911,10,7411,8],[6912,8,7412,6],[6913,6,7413,4],[6913,7,7413,5],[6913,8,7413,6],[6914,6,7415,4,"client"],[6914,12,7415,10],[6914,13,7415,11,"on"],[6914,15,7415,13],[6914,16,7415,14],[6914,27,7415,25],[6914,29,7415,27,"span"],[6914,33,7415,31],[6914,37,7415,35],[6915,8,7416,6,"replay"],[6915,14,7416,12],[6915,15,7416,13,"lastActiveSpan"],[6915,29,7416,27],[6915,32,7416,30,"span"],[6915,36,7416,34],[6916,6,7417,4],[6916,7,7417,5],[6916,8,7417,6],[6918,6,7419,4],[6919,6,7420,4],[6920,6,7421,4,"client"],[6920,12,7421,10],[6920,13,7421,11,"on"],[6920,15,7421,13],[6920,16,7421,14],[6920,25,7421,23],[6920,27,7421,25,"span"],[6920,31,7421,29],[6920,35,7421,33],[6921,8,7422,6,"replay"],[6921,14,7422,12],[6921,15,7422,13,"lastActiveSpan"],[6921,29,7422,27],[6921,32,7422,30,"span"],[6921,36,7422,34],[6922,6,7423,4],[6922,7,7423,5],[6922,8,7423,6],[6924,6,7425,4],[6925,6,7426,4,"client"],[6925,12,7426,10],[6925,13,7426,11,"on"],[6925,15,7426,13],[6925,16,7426,14],[6925,36,7426,34],[6925,38,7426,36],[6925,39,7426,37,"feedbackEvent"],[6925,52,7426,50],[6925,54,7426,52,"options"],[6925,61,7426,59],[6925,66,7426,64],[6926,8,7427,6],[6926,14,7427,12,"replayId"],[6926,22,7427,20],[6926,25,7427,23,"replay"],[6926,31,7427,29],[6926,32,7427,30,"getSessionId"],[6926,44,7427,42],[6926,45,7427,43],[6926,46,7427,44],[6927,8,7428,6],[6927,12,7428,10,"options"],[6927,19,7428,17],[6927,23,7428,21,"options"],[6927,30,7428,28],[6927,31,7428,29,"includeReplay"],[6927,44,7428,42],[6927,48,7428,46,"replay"],[6927,54,7428,52],[6927,55,7428,53,"isEnabled"],[6927,64,7428,62],[6927,65,7428,63],[6927,66,7428,64],[6927,70,7428,68,"replayId"],[6927,78,7428,76],[6927,80,7428,78],[6928,10,7429,8],[6929,10,7430,8],[6929,14,7430,12,"feedbackEvent"],[6929,27,7430,25],[6929,28,7430,26,"contexts"],[6929,36,7430,34],[6929,40,7430,38,"feedbackEvent"],[6929,53,7430,51],[6929,54,7430,52,"contexts"],[6929,62,7430,60],[6929,63,7430,61,"feedback"],[6929,71,7430,69],[6929,73,7430,71],[6930,12,7431,10,"feedbackEvent"],[6930,25,7431,23],[6930,26,7431,24,"contexts"],[6930,34,7431,32],[6930,35,7431,33,"feedback"],[6930,43,7431,41],[6930,44,7431,42,"replay_id"],[6930,53,7431,51],[6930,56,7431,54,"replayId"],[6930,64,7431,62],[6931,10,7432,8],[6932,8,7433,6],[6933,6,7434,4],[6933,7,7434,5],[6933,8,7434,6],[6934,4,7435,2],[6935,2,7436,0],[6937,2,7438,0],[6938,0,7439,0],[6939,0,7440,0],[6940,0,7441,0],[6941,2,7442,0],[6941,17,7442,15,"addMemoryEntry"],[6941,31,7442,29,"addMemoryEntry"],[6941,32,7442,30,"replay"],[6941,38,7442,36],[6941,40,7442,38],[6942,4,7443,2],[6943,4,7444,2],[6943,8,7444,6],[6944,6,7445,4],[6944,13,7445,11,"Promise"],[6944,20,7445,18],[6944,21,7445,19,"all"],[6944,24,7445,22],[6944,25,7446,6,"createPerformanceSpans"],[6944,47,7446,28],[6944,48,7446,29,"replay"],[6944,54,7446,35],[6944,56,7446,37],[6945,6,7447,8],[6946,6,7448,8,"createMemoryEntry"],[6946,23,7448,25],[6946,24,7448,26,"WINDOW"],[6946,30,7448,32],[6946,31,7448,33,"performance"],[6946,42,7448,44],[6946,43,7448,45,"memory"],[6946,49,7448,51],[6946,50,7448,52],[6946,51,7449,7],[6946,52,7450,4],[6946,53,7450,5],[6947,4,7451,2],[6947,5,7451,3],[6947,6,7451,4],[6947,13,7451,11,"error"],[6947,18,7451,16],[6947,20,7451,18],[6948,6,7452,4],[6949,6,7453,4],[6949,13,7453,11],[6949,15,7453,13],[6950,4,7454,2],[6951,2,7455,0],[6952,2,7457,0],[6952,11,7457,9,"createMemoryEntry"],[6952,28,7457,26,"createMemoryEntry"],[6952,29,7457,27,"memoryEntry"],[6952,40,7457,38],[6952,42,7457,40],[6953,4,7458,2],[6953,10,7458,8],[6954,6,7458,10,"jsHeapSizeLimit"],[6954,21,7458,25],[6955,6,7458,27,"totalJSHeapSize"],[6955,21,7458,42],[6956,6,7458,44,"usedJSHeapSize"],[6957,4,7458,59],[6957,5,7458,60],[6957,8,7458,63,"memoryEntry"],[6957,19,7458,74],[6958,4,7459,2],[6959,4,7460,2],[6960,4,7461,2],[6960,10,7461,8,"time"],[6960,14,7461,12],[6960,17,7461,15,"Date"],[6960,21,7461,19],[6960,22,7461,20,"now"],[6960,25,7461,23],[6960,26,7461,24],[6960,27,7461,25],[6960,30,7461,28],[6960,34,7461,32],[6961,4,7462,2],[6961,11,7462,9],[6962,6,7463,4,"type"],[6962,10,7463,8],[6962,12,7463,10],[6962,20,7463,18],[6963,6,7464,4,"name"],[6963,10,7464,8],[6963,12,7464,10],[6963,20,7464,18],[6964,6,7465,4,"start"],[6964,11,7465,9],[6964,13,7465,11,"time"],[6964,17,7465,15],[6965,6,7466,4,"end"],[6965,9,7466,7],[6965,11,7466,9,"time"],[6965,15,7466,13],[6966,6,7467,4,"data"],[6966,10,7467,8],[6966,12,7467,10],[6967,8,7468,6,"memory"],[6967,14,7468,12],[6967,16,7468,14],[6968,10,7469,8,"jsHeapSizeLimit"],[6968,25,7469,23],[6969,10,7470,8,"totalJSHeapSize"],[6969,25,7470,23],[6970,10,7471,8,"usedJSHeapSize"],[6971,8,7472,6],[6972,6,7473,4],[6973,4,7474,2],[6973,5,7474,3],[6974,2,7475,0],[6976,2,7477,0],[6977,0,7478,0],[6978,0,7479,0],[6979,0,7480,0],[6980,0,7481,0],[6981,0,7482,0],[6982,0,7483,0],[6983,0,7484,0],[6984,0,7485,0],[6985,0,7486,0],[6986,0,7487,0],[6987,0,7488,0],[6988,0,7489,0],[6989,0,7490,0],[6990,0,7491,0],[6991,0,7492,0],[6992,0,7493,0],[6993,0,7494,0],[6994,2,7495,0],[6994,11,7495,9,"debounce"],[6994,19,7495,17,"debounce"],[6994,20,7495,18,"func"],[6994,24,7495,22],[6994,26,7495,24,"wait"],[6994,30,7495,28],[6994,32,7495,30,"options"],[6994,39,7495,37],[6994,41,7495,39],[6995,4,7496,2],[6995,8,7496,6,"callbackReturnValue"],[6995,27,7496,25],[6996,4,7498,2],[6996,8,7498,6,"timerId"],[6996,15,7498,13],[6997,4,7499,2],[6997,8,7499,6,"maxTimerId"],[6997,18,7499,16],[6998,4,7501,2],[6998,10,7501,8,"maxWait"],[6998,17,7501,15],[6998,20,7501,18,"options"],[6998,27,7501,25],[6998,31,7501,29,"options"],[6998,38,7501,36],[6998,39,7501,37,"maxWait"],[6998,46,7501,44],[6998,49,7501,47,"Math"],[6998,53,7501,51],[6998,54,7501,52,"max"],[6998,57,7501,55],[6998,58,7501,56,"options"],[6998,65,7501,63],[6998,66,7501,64,"maxWait"],[6998,73,7501,71],[6998,75,7501,73,"wait"],[6998,79,7501,77],[6998,80,7501,78],[6998,83,7501,81],[6998,84,7501,82],[6999,4,7503,2],[6999,13,7503,11,"invokeFunc"],[6999,23,7503,21,"invokeFunc"],[6999,24,7503,21],[6999,26,7503,24],[7000,6,7504,4,"cancelTimers"],[7000,18,7504,16],[7000,19,7504,17],[7000,20,7504,18],[7001,6,7505,4,"callbackReturnValue"],[7001,25,7505,23],[7001,28,7505,26,"func"],[7001,32,7505,30],[7001,33,7505,31],[7001,34,7505,32],[7002,6,7506,4],[7002,13,7506,11,"callbackReturnValue"],[7002,32,7506,30],[7003,4,7507,2],[7004,4,7509,2],[7004,13,7509,11,"cancelTimers"],[7004,25,7509,23,"cancelTimers"],[7004,26,7509,23],[7004,28,7509,26],[7005,6,7510,4,"timerId"],[7005,13,7510,11],[7005,18,7510,16,"undefined"],[7005,27,7510,25],[7005,31,7510,29,"clearTimeout"],[7005,43,7510,41],[7005,44,7510,42,"timerId"],[7005,51,7510,49],[7005,52,7510,50],[7006,6,7511,4,"maxTimerId"],[7006,16,7511,14],[7006,21,7511,19,"undefined"],[7006,30,7511,28],[7006,34,7511,32,"clearTimeout"],[7006,46,7511,44],[7006,47,7511,45,"maxTimerId"],[7006,57,7511,55],[7006,58,7511,56],[7007,6,7512,4,"timerId"],[7007,13,7512,11],[7007,16,7512,14,"maxTimerId"],[7007,26,7512,24],[7007,29,7512,27,"undefined"],[7007,38,7512,36],[7008,4,7513,2],[7009,4,7515,2],[7009,13,7515,11,"flush"],[7009,18,7515,16,"flush"],[7009,19,7515,16],[7009,21,7515,19],[7010,6,7516,4],[7010,10,7516,8,"timerId"],[7010,17,7516,15],[7010,22,7516,20,"undefined"],[7010,31,7516,29],[7010,35,7516,33,"maxTimerId"],[7010,45,7516,43],[7010,50,7516,48,"undefined"],[7010,59,7516,57],[7010,61,7516,59],[7011,8,7517,6],[7011,15,7517,13,"invokeFunc"],[7011,25,7517,23],[7011,26,7517,24],[7011,27,7517,25],[7012,6,7518,4],[7013,6,7519,4],[7013,13,7519,11,"callbackReturnValue"],[7013,32,7519,30],[7014,4,7520,2],[7015,4,7522,2],[7015,13,7522,11,"debounced"],[7015,22,7522,20,"debounced"],[7015,23,7522,20],[7015,25,7522,23],[7016,6,7523,4],[7016,10,7523,8,"timerId"],[7016,17,7523,15],[7016,19,7523,17],[7017,8,7524,6,"clearTimeout"],[7017,20,7524,18],[7017,21,7524,19,"timerId"],[7017,28,7524,26],[7017,29,7524,27],[7018,6,7525,4],[7019,6,7526,4,"timerId"],[7019,13,7526,11],[7019,16,7526,14],[7019,20,7526,14,"setTimeout$3"],[7019,44,7526,26],[7019,46,7526,27,"invokeFunc"],[7019,56,7526,37],[7019,58,7526,39,"wait"],[7019,62,7526,43],[7019,63,7526,44],[7020,6,7528,4],[7020,10,7528,8,"maxWait"],[7020,17,7528,15],[7020,21,7528,19,"maxTimerId"],[7020,31,7528,29],[7020,36,7528,34,"undefined"],[7020,45,7528,43],[7020,47,7528,45],[7021,8,7529,6,"maxTimerId"],[7021,18,7529,16],[7021,21,7529,19],[7021,25,7529,19,"setTimeout$3"],[7021,49,7529,31],[7021,51,7529,32,"invokeFunc"],[7021,61,7529,42],[7021,63,7529,44,"maxWait"],[7021,70,7529,51],[7021,71,7529,52],[7022,6,7530,4],[7023,6,7532,4],[7023,13,7532,11,"callbackReturnValue"],[7023,32,7532,30],[7024,4,7533,2],[7025,4,7535,2,"debounced"],[7025,13,7535,11],[7025,14,7535,12,"cancel"],[7025,20,7535,18],[7025,23,7535,21,"cancelTimers"],[7025,35,7535,33],[7026,4,7536,2,"debounced"],[7026,13,7536,11],[7026,14,7536,12,"flush"],[7026,19,7536,17],[7026,22,7536,20,"flush"],[7026,27,7536,25],[7027,4,7537,2],[7027,11,7537,9,"debounced"],[7027,20,7537,18],[7028,2,7538,0],[7029,2,7540,0],[7029,8,7540,6,"NAVIGATOR"],[7029,17,7540,15],[7029,20,7540,18,"GLOBAL_OBJ"],[7029,36,7540,28],[7029,37,7540,29,"navigator"],[7029,46,7540,38],[7031,2,7542,0],[7032,0,7543,0],[7033,0,7544,0],[7034,0,7545,0],[7035,2,7546,0],[7035,11,7546,9,"getRecordingSamplingOptions"],[7035,38,7546,36,"getRecordingSamplingOptions"],[7035,39,7546,36],[7035,41,7546,39],[7036,4,7547,2],[7036,8,7548,4],[7036,27,7548,23],[7036,28,7548,24,"test"],[7036,32,7548,28],[7036,33,7548,30,"NAVIGATOR"],[7036,42,7548,39],[7036,46,7548,43,"NAVIGATOR"],[7036,55,7548,52],[7036,56,7548,53,"userAgent"],[7036,65,7548,62],[7036,69,7548,67],[7036,71,7548,69],[7036,72,7548,70],[7036,76,7549,5],[7036,88,7549,17],[7036,89,7549,18,"test"],[7036,93,7549,22],[7036,94,7549,24,"NAVIGATOR"],[7036,103,7549,33],[7036,107,7549,37,"NAVIGATOR"],[7036,116,7549,46],[7036,117,7549,47,"userAgent"],[7036,126,7549,56],[7036,130,7549,61],[7036,132,7549,63],[7036,133,7549,64],[7036,137,7550,6,"NAVIGATOR"],[7036,146,7550,15],[7036,150,7551,6,"NAVIGATOR"],[7036,159,7551,15],[7036,160,7551,16,"maxTouchPoints"],[7036,174,7551,30],[7036,178,7552,6,"NAVIGATOR"],[7036,187,7552,15],[7036,188,7552,16,"maxTouchPoints"],[7036,202,7552,30],[7036,205,7552,33],[7036,206,7552,35],[7036,208,7553,4],[7037,6,7554,4],[7037,13,7554,11],[7038,8,7555,6,"sampling"],[7038,16,7555,14],[7038,18,7555,16],[7039,10,7556,8,"mousemove"],[7039,19,7556,17],[7039,21,7556,19],[7040,8,7557,6],[7041,6,7558,4],[7041,7,7558,5],[7042,4,7559,2],[7043,4,7561,2],[7043,11,7561,9],[7043,12,7561,10],[7043,13,7561,11],[7044,2,7562,0],[7046,2,7564,0],[7047,0,7565,0],[7048,0,7566,0],[7049,0,7567,0],[7050,0,7568,0],[7051,2,7569,0],[7051,11,7569,9,"getHandleRecordingEmit"],[7051,33,7569,31,"getHandleRecordingEmit"],[7051,34,7569,32,"replay"],[7051,40,7569,38],[7051,42,7569,40],[7052,4,7570,2],[7052,8,7570,6,"hadFirstEvent"],[7052,21,7570,19],[7052,24,7570,22],[7052,29,7570,27],[7053,4,7572,2],[7053,11,7572,9],[7053,12,7572,10,"event"],[7053,17,7572,15],[7053,19,7572,17,"_isCheckout"],[7053,30,7572,28],[7053,35,7572,33],[7054,6,7573,4],[7055,6,7574,4],[7055,10,7574,8],[7055,11,7574,9,"replay"],[7055,17,7574,15],[7055,18,7574,16,"checkAndHandleExpiredSession"],[7055,46,7574,44],[7055,47,7574,45],[7055,48,7574,46],[7055,50,7574,48],[7056,8,7575,6,"DEBUG_BUILD"],[7056,19,7575,17],[7056,23,7575,21,"logger"],[7056,29,7575,27],[7056,30,7575,28,"warn"],[7056,34,7575,32],[7056,35,7575,33],[7056,81,7575,79],[7056,82,7575,80],[7057,8,7577,6],[7058,6,7578,4],[7060,6,7580,4],[7061,6,7581,4],[7062,6,7582,4],[7062,12,7582,10,"isCheckout"],[7062,22,7582,20],[7062,25,7582,23,"_isCheckout"],[7062,36,7582,34],[7062,40,7582,38],[7062,41,7582,39,"hadFirstEvent"],[7062,54,7582,52],[7063,6,7583,4,"hadFirstEvent"],[7063,19,7583,17],[7063,22,7583,20],[7063,26,7583,24],[7064,6,7585,4],[7064,10,7585,8,"replay"],[7064,16,7585,14],[7064,17,7585,15,"clickDetector"],[7064,30,7585,28],[7064,32,7585,30],[7065,8,7586,6,"updateClickDetectorForRecordingEvent"],[7065,44,7586,42],[7065,45,7586,43,"replay"],[7065,51,7586,49],[7065,52,7586,50,"clickDetector"],[7065,65,7586,63],[7065,67,7586,65,"event"],[7065,72,7586,70],[7065,73,7586,71],[7066,6,7587,4],[7068,6,7589,4],[7069,6,7590,4,"replay"],[7069,12,7590,10],[7069,13,7590,11,"addUpdate"],[7069,22,7590,20],[7069,23,7590,21],[7069,29,7590,27],[7070,8,7591,6],[7071,8,7592,6],[7072,8,7593,6],[7073,8,7594,6],[7074,8,7595,6],[7075,8,7596,6],[7075,12,7596,10,"replay"],[7075,18,7596,16],[7075,19,7596,17,"recordingMode"],[7075,32,7596,30],[7075,37,7596,35],[7075,45,7596,43],[7075,49,7596,47,"isCheckout"],[7075,59,7596,57],[7075,61,7596,59],[7076,10,7597,8,"replay"],[7076,16,7597,14],[7076,17,7597,15,"setInitialState"],[7076,32,7597,30],[7076,33,7597,31],[7076,34,7597,32],[7077,8,7598,6],[7079,8,7600,6],[7080,8,7601,6],[7081,8,7602,6],[7081,12,7602,10],[7081,13,7602,11,"addEventSync"],[7081,25,7602,23],[7081,26,7602,24,"replay"],[7081,32,7602,30],[7081,34,7602,32,"event"],[7081,39,7602,37],[7081,41,7602,39,"isCheckout"],[7081,51,7602,49],[7081,52,7602,50],[7081,54,7602,52],[7082,10,7603,8],[7083,10,7604,8],[7083,17,7604,15],[7083,21,7604,19],[7084,8,7605,6],[7086,8,7607,6],[7087,8,7608,6],[7088,8,7609,6],[7088,12,7609,10],[7088,13,7609,11,"isCheckout"],[7088,23,7609,21],[7088,25,7609,23],[7089,10,7610,8],[7089,17,7610,15],[7089,22,7610,20],[7090,8,7611,6],[7091,8,7613,6],[7091,14,7613,12,"session"],[7091,21,7613,19],[7091,24,7613,22,"replay"],[7091,30,7613,28],[7091,31,7613,29,"session"],[7091,38,7613,36],[7093,8,7615,6],[7094,8,7616,6],[7095,8,7617,6],[7096,8,7618,6],[7097,8,7619,6],[7098,8,7620,6],[7099,8,7621,6],[7100,8,7622,6],[7101,8,7623,6],[7102,8,7624,6,"addSettingsEvent"],[7102,24,7624,22],[7102,25,7624,23,"replay"],[7102,31,7624,29],[7102,33,7624,31,"isCheckout"],[7102,43,7624,41],[7102,44,7624,42],[7104,8,7626,6],[7105,8,7627,6],[7106,8,7628,6],[7106,12,7628,10,"replay"],[7106,18,7628,16],[7106,19,7628,17,"recordingMode"],[7106,32,7628,30],[7106,37,7628,35],[7106,45,7628,43],[7106,49,7628,47,"session"],[7106,56,7628,54],[7106,60,7628,58,"replay"],[7106,66,7628,64],[7106,67,7628,65,"eventBuffer"],[7106,78,7628,76],[7106,80,7628,78],[7107,10,7629,8],[7107,16,7629,14,"earliestEvent"],[7107,29,7629,27],[7107,32,7629,30,"replay"],[7107,38,7629,36],[7107,39,7629,37,"eventBuffer"],[7107,50,7629,48],[7107,51,7629,49,"getEarliestTimestamp"],[7107,71,7629,69],[7107,72,7629,70],[7107,73,7629,71],[7108,10,7630,8],[7108,14,7630,12,"earliestEvent"],[7108,27,7630,25],[7108,29,7630,27],[7109,12,7631,10,"DEBUG_BUILD"],[7109,23,7631,21],[7109,27,7632,12,"logger"],[7109,33,7632,18],[7109,34,7632,19,"info"],[7109,38,7632,23],[7109,39,7632,24],[7109,101,7632,86],[7109,105,7632,90,"Date"],[7109,109,7632,94],[7109,110,7632,95,"earliestEvent"],[7109,123,7632,108],[7109,124,7632,109],[7109,126,7632,111],[7109,127,7632,112],[7110,12,7634,10,"session"],[7110,19,7634,17],[7110,20,7634,18,"started"],[7110,27,7634,25],[7110,30,7634,28,"earliestEvent"],[7110,43,7634,41],[7111,12,7636,10],[7111,16,7636,14,"replay"],[7111,22,7636,20],[7111,23,7636,21,"getOptions"],[7111,33,7636,31],[7111,34,7636,32],[7111,35,7636,33],[7111,36,7636,34,"stickySession"],[7111,49,7636,47],[7111,51,7636,49],[7112,14,7637,12,"saveSession"],[7112,25,7637,23],[7112,26,7637,24,"session"],[7112,33,7637,31],[7112,34,7637,32],[7113,12,7638,10],[7114,10,7639,8],[7115,8,7640,6],[7117,8,7642,6],[7118,8,7643,6],[7119,8,7644,6],[7120,8,7645,6],[7121,8,7646,6],[7122,8,7647,6],[7123,8,7648,6],[7123,12,7648,10,"session"],[7123,19,7648,17],[7123,23,7648,21,"session"],[7123,30,7648,28],[7123,31,7648,29,"previousSessionId"],[7123,48,7648,46],[7123,50,7648,48],[7124,10,7649,8],[7124,17,7649,15],[7124,21,7649,19],[7125,8,7650,6],[7126,8,7652,6],[7126,12,7652,10,"replay"],[7126,18,7652,16],[7126,19,7652,17,"recordingMode"],[7126,32,7652,30],[7126,37,7652,35],[7126,46,7652,44],[7126,48,7652,46],[7127,10,7653,8],[7128,10,7654,8],[7129,10,7655,8],[7130,10,7656,8],[7132,10,7658,8],[7133,10,7659,8],[7134,10,7660,8],[7134,15,7660,13,"replay"],[7134,21,7660,19],[7134,22,7660,20,"flush"],[7134,27,7660,25],[7134,28,7660,26],[7134,29,7660,27],[7135,8,7661,6],[7136,8,7663,6],[7136,15,7663,13],[7136,19,7663,17],[7137,6,7664,4],[7137,7,7664,5],[7137,8,7664,6],[7138,4,7665,2],[7138,5,7665,3],[7139,2,7666,0],[7141,2,7668,0],[7142,0,7669,0],[7143,0,7670,0],[7144,2,7671,0],[7144,11,7671,9,"createOptionsEvent"],[7144,29,7671,27,"createOptionsEvent"],[7144,30,7671,28,"replay"],[7144,36,7671,34],[7144,38,7671,36],[7145,4,7672,2],[7145,10,7672,8,"options"],[7145,17,7672,15],[7145,20,7672,18,"replay"],[7145,26,7672,24],[7145,27,7672,25,"getOptions"],[7145,37,7672,35],[7145,38,7672,36],[7145,39,7672,37],[7146,4,7673,2],[7146,11,7673,9],[7147,6,7674,4,"type"],[7147,10,7674,8],[7147,12,7674,10,"EventType"],[7147,21,7674,19],[7147,22,7674,20,"Custom"],[7147,28,7674,26],[7148,6,7675,4,"timestamp"],[7148,15,7675,13],[7148,17,7675,15,"Date"],[7148,21,7675,19],[7148,22,7675,20,"now"],[7148,25,7675,23],[7148,26,7675,24],[7148,27,7675,25],[7149,6,7676,4,"data"],[7149,10,7676,8],[7149,12,7676,10],[7150,8,7677,6,"tag"],[7150,11,7677,9],[7150,13,7677,11],[7150,22,7677,20],[7151,8,7678,6,"payload"],[7151,15,7678,13],[7151,17,7678,15],[7152,10,7679,8,"shouldRecordCanvas"],[7152,28,7679,26],[7152,30,7679,28,"replay"],[7152,36,7679,34],[7152,37,7679,35,"isRecordingCanvas"],[7152,54,7679,52],[7152,55,7679,53],[7152,56,7679,54],[7153,10,7680,8,"sessionSampleRate"],[7153,27,7680,25],[7153,29,7680,27,"options"],[7153,36,7680,34],[7153,37,7680,35,"sessionSampleRate"],[7153,54,7680,52],[7154,10,7681,8,"errorSampleRate"],[7154,25,7681,23],[7154,27,7681,25,"options"],[7154,34,7681,32],[7154,35,7681,33,"errorSampleRate"],[7154,50,7681,48],[7155,10,7682,8,"useCompressionOption"],[7155,30,7682,28],[7155,32,7682,30,"options"],[7155,39,7682,37],[7155,40,7682,38,"useCompression"],[7155,54,7682,52],[7156,10,7683,8,"blockAllMedia"],[7156,23,7683,21],[7156,25,7683,23,"options"],[7156,32,7683,30],[7156,33,7683,31,"blockAllMedia"],[7156,46,7683,44],[7157,10,7684,8,"maskAllText"],[7157,21,7684,19],[7157,23,7684,21,"options"],[7157,30,7684,28],[7157,31,7684,29,"maskAllText"],[7157,42,7684,40],[7158,10,7685,8,"maskAllInputs"],[7158,23,7685,21],[7158,25,7685,23,"options"],[7158,32,7685,30],[7158,33,7685,31,"maskAllInputs"],[7158,46,7685,44],[7159,10,7686,8,"useCompression"],[7159,24,7686,22],[7159,26,7686,24,"replay"],[7159,32,7686,30],[7159,33,7686,31,"eventBuffer"],[7159,44,7686,42],[7159,47,7686,45,"replay"],[7159,53,7686,51],[7159,54,7686,52,"eventBuffer"],[7159,65,7686,63],[7159,66,7686,64,"type"],[7159,70,7686,68],[7159,75,7686,73],[7159,83,7686,81],[7159,86,7686,84],[7159,91,7686,89],[7160,10,7687,8,"networkDetailHasUrls"],[7160,30,7687,28],[7160,32,7687,30,"options"],[7160,39,7687,37],[7160,40,7687,38,"networkDetailAllowUrls"],[7160,62,7687,60],[7160,63,7687,61,"length"],[7160,69,7687,67],[7160,72,7687,70],[7160,73,7687,71],[7161,10,7688,8,"networkCaptureBodies"],[7161,30,7688,28],[7161,32,7688,30,"options"],[7161,39,7688,37],[7161,40,7688,38,"networkCaptureBodies"],[7161,60,7688,58],[7162,10,7689,8,"networkRequestHasHeaders"],[7162,34,7689,32],[7162,36,7689,34,"options"],[7162,43,7689,41],[7162,44,7689,42,"networkRequestHeaders"],[7162,65,7689,63],[7162,66,7689,64,"length"],[7162,72,7689,70],[7162,75,7689,73],[7162,76,7689,74],[7163,10,7690,8,"networkResponseHasHeaders"],[7163,35,7690,33],[7163,37,7690,35,"options"],[7163,44,7690,42],[7163,45,7690,43,"networkResponseHeaders"],[7163,67,7690,65],[7163,68,7690,66,"length"],[7163,74,7690,72],[7163,77,7690,75],[7164,8,7691,6],[7165,6,7692,4],[7166,4,7693,2],[7166,5,7693,3],[7167,2,7694,0],[7169,2,7696,0],[7170,0,7697,0],[7171,0,7698,0],[7172,0,7699,0],[7173,2,7700,0],[7173,11,7700,9,"addSettingsEvent"],[7173,27,7700,25,"addSettingsEvent"],[7173,28,7700,26,"replay"],[7173,34,7700,32],[7173,36,7700,34,"isCheckout"],[7173,46,7700,44],[7173,48,7700,46],[7174,4,7701,2],[7175,4,7702,2],[7175,8,7702,6],[7175,9,7702,7,"isCheckout"],[7175,19,7702,17],[7175,23,7702,21],[7175,24,7702,22,"replay"],[7175,30,7702,28],[7175,31,7702,29,"session"],[7175,38,7702,36],[7175,42,7702,40,"replay"],[7175,48,7702,46],[7175,49,7702,47,"session"],[7175,56,7702,54],[7175,57,7702,55,"segmentId"],[7175,66,7702,64],[7175,71,7702,69],[7175,72,7702,70],[7175,74,7702,72],[7176,6,7703,4],[7177,4,7704,2],[7178,4,7706,2,"addEventSync"],[7178,16,7706,14],[7178,17,7706,15,"replay"],[7178,23,7706,21],[7178,25,7706,23,"createOptionsEvent"],[7178,43,7706,41],[7178,44,7706,42,"replay"],[7178,50,7706,48],[7178,51,7706,49],[7178,53,7706,51],[7178,58,7706,56],[7178,59,7706,57],[7179,2,7707,0],[7181,2,7709,0],[7182,0,7710,0],[7183,0,7711,0],[7184,0,7712,0],[7185,2,7713,0],[7185,11,7713,9,"createReplayEnvelope"],[7185,31,7713,29,"createReplayEnvelope"],[7185,32,7714,2,"replayEvent"],[7185,43,7714,13],[7185,45,7715,2,"recordingData"],[7185,58,7715,15],[7185,60,7716,2,"dsn"],[7185,63,7716,5],[7185,65,7717,2,"tunnel"],[7185,71,7717,8],[7185,73,7718,2],[7186,4,7719,2],[7186,11,7719,9],[7186,15,7719,9,"createEnvelope"],[7186,35,7719,23],[7186,37,7720,4],[7186,41,7720,4,"createEventEnvelopeHeaders"],[7186,73,7720,30],[7186,75,7720,31,"replayEvent"],[7186,86,7720,42],[7186,88,7720,44],[7186,92,7720,44,"getSdkMetadataForEnvelopeHeader"],[7186,129,7720,75],[7186,131,7720,76,"replayEvent"],[7186,142,7720,87],[7186,143,7720,88],[7186,145,7720,90,"tunnel"],[7186,151,7720,96],[7186,153,7720,98,"dsn"],[7186,156,7720,101],[7186,157,7720,102],[7186,159,7721,4],[7186,160,7722,6],[7186,161,7722,7],[7187,6,7722,9,"type"],[7187,10,7722,13],[7187,12,7722,15],[7188,4,7722,30],[7188,5,7722,31],[7188,7,7722,33,"replayEvent"],[7188,18,7722,44],[7188,19,7722,45],[7188,21,7723,6],[7188,22,7724,8],[7189,6,7725,10,"type"],[7189,10,7725,14],[7189,12,7725,16],[7189,30,7725,34],[7190,6,7726,10],[7191,6,7727,10],[7192,6,7728,10],[7193,6,7729,10,"length"],[7193,12,7729,16],[7193,14,7730,12],[7193,21,7730,19,"recordingData"],[7193,34,7730,32],[7193,39,7730,37],[7193,47,7730,45],[7193,50,7730,48],[7193,54,7730,52,"TextEncoder"],[7193,65,7730,63],[7193,66,7730,64],[7193,67,7730,65],[7193,68,7730,66,"encode"],[7193,74,7730,72],[7193,75,7730,73,"recordingData"],[7193,88,7730,86],[7193,89,7730,87],[7193,90,7730,88,"length"],[7193,96,7730,94],[7193,99,7730,97,"recordingData"],[7193,112,7730,110],[7193,113,7730,111,"length"],[7194,4,7731,8],[7194,5,7731,9],[7194,7,7732,8,"recordingData"],[7194,20,7732,21],[7194,21,7733,7],[7194,22,7735,2],[7194,23,7735,3],[7195,2,7736,0],[7197,2,7738,0],[7198,0,7739,0],[7199,0,7740,0],[7200,2,7741,0],[7200,11,7741,9,"prepareRecordingData"],[7200,31,7741,29,"prepareRecordingData"],[7200,32,7741,30],[7201,4,7742,2,"recordingData"],[7201,17,7742,15],[7202,4,7743,2,"headers"],[7203,2,7744,0],[7203,3,7744,1],[7203,5,7746,2],[7204,4,7747,2],[7204,8,7747,6,"payloadWithSequence"],[7204,27,7747,25],[7206,4,7749,2],[7207,4,7750,2],[7207,10,7750,8,"replayHeaders"],[7207,23,7750,21],[7207,26,7750,24],[7207,29,7750,27,"JSON"],[7207,33,7750,31],[7207,34,7750,32,"stringify"],[7207,43,7750,41],[7207,44,7750,42,"headers"],[7207,51,7750,49],[7207,52,7750,50],[7208,0,7751,0],[7208,1,7751,1],[7209,4,7753,2],[7209,8,7753,6],[7209,15,7753,13,"recordingData"],[7209,28,7753,26],[7209,33,7753,31],[7209,41,7753,39],[7209,43,7753,41],[7210,6,7754,4,"payloadWithSequence"],[7210,25,7754,23],[7210,28,7754,26],[7210,31,7754,29,"replayHeaders"],[7210,44,7754,42],[7210,47,7754,45,"recordingData"],[7210,60,7754,58],[7210,62,7754,60],[7211,4,7755,2],[7211,5,7755,3],[7211,11,7755,9],[7212,6,7756,4],[7212,12,7756,10,"enc"],[7212,15,7756,13],[7212,18,7756,16],[7212,22,7756,20,"TextEncoder"],[7212,33,7756,31],[7212,34,7756,32],[7212,35,7756,33],[7213,6,7757,4],[7214,6,7758,4],[7214,12,7758,10,"sequence"],[7214,20,7758,18],[7214,23,7758,21,"enc"],[7214,26,7758,24],[7214,27,7758,25,"encode"],[7214,33,7758,31],[7214,34,7758,32,"replayHeaders"],[7214,47,7758,45],[7214,48,7758,46],[7215,6,7759,4],[7216,6,7760,4,"payloadWithSequence"],[7216,25,7760,23],[7216,28,7760,26],[7216,32,7760,30,"Uint8Array"],[7216,42,7760,40],[7216,43,7760,41,"sequence"],[7216,51,7760,49],[7216,52,7760,50,"length"],[7216,58,7760,56],[7216,61,7760,59,"recordingData"],[7216,74,7760,72],[7216,75,7760,73,"length"],[7216,81,7760,79],[7216,82,7760,80],[7217,6,7761,4,"payloadWithSequence"],[7217,25,7761,23],[7217,26,7761,24,"set"],[7217,29,7761,27],[7217,30,7761,28,"sequence"],[7217,38,7761,36],[7217,39,7761,37],[7218,6,7762,4,"payloadWithSequence"],[7218,25,7762,23],[7218,26,7762,24,"set"],[7218,29,7762,27],[7218,30,7762,28,"recordingData"],[7218,43,7762,41],[7218,45,7762,43,"sequence"],[7218,53,7762,51],[7218,54,7762,52,"length"],[7218,60,7762,58],[7218,61,7762,59],[7219,4,7763,2],[7220,4,7765,2],[7220,11,7765,9,"payloadWithSequence"],[7220,30,7765,28],[7221,2,7766,0],[7223,2,7768,0],[7224,0,7769,0],[7225,0,7770,0],[7226,2,7771,0],[7226,17,7771,15,"prepareReplayEvent"],[7226,35,7771,33,"prepareReplayEvent"],[7226,36,7771,34],[7227,4,7772,2,"client"],[7227,10,7772,8],[7228,4,7773,2,"scope"],[7228,9,7773,7],[7229,4,7774,2,"replayId"],[7229,12,7774,10],[7229,14,7774,12,"event_id"],[7229,22,7774,20],[7230,4,7775,2,"event"],[7231,2,7776,0],[7231,3,7776,1],[7231,5,7778,2],[7232,4,7779,2],[7232,10,7779,8,"integrations"],[7232,22,7779,20],[7232,25,7780,4],[7232,32,7780,11,"client"],[7232,38,7780,17],[7232,39,7780,18,"_integrations"],[7232,52,7780,31],[7232,57,7780,36],[7232,65,7780,44],[7232,69,7780,48,"client"],[7232,75,7780,54],[7232,76,7780,55,"_integrations"],[7232,89,7780,68],[7232,94,7780,73],[7232,98,7780,77],[7232,102,7780,81],[7232,103,7780,82,"Array"],[7232,108,7780,87],[7232,109,7780,88,"isArray"],[7232,116,7780,95],[7232,117,7780,96,"client"],[7232,123,7780,102],[7232,124,7780,103,"_integrations"],[7232,137,7780,116],[7232,138,7780,117],[7232,141,7781,8,"Object"],[7232,147,7781,14],[7232,148,7781,15,"keys"],[7232,152,7781,19],[7232,153,7781,20,"client"],[7232,159,7781,26],[7232,160,7781,27,"_integrations"],[7232,173,7781,40],[7232,174,7781,41],[7232,177,7782,8,"undefined"],[7232,186,7782,17],[7233,4,7784,2],[7233,10,7784,8,"eventHint"],[7233,19,7784,17],[7233,22,7784,20],[7234,6,7784,22,"event_id"],[7234,14,7784,30],[7235,6,7784,32,"integrations"],[7236,4,7784,45],[7236,5,7784,46],[7237,4,7786,2,"client"],[7237,10,7786,8],[7237,11,7786,9,"emit"],[7237,15,7786,13],[7237,16,7786,14],[7237,33,7786,31],[7237,35,7786,33,"event"],[7237,40,7786,38],[7237,42,7786,40,"eventHint"],[7237,51,7786,49],[7237,52,7786,50],[7238,4,7788,2],[7238,10,7788,8,"preparedEvent"],[7238,23,7788,21],[7238,26,7788,25],[7238,32,7788,31],[7238,36,7788,31,"prepareEvent"],[7238,54,7788,43],[7238,56,7789,4,"client"],[7238,62,7789,10],[7238,63,7789,11,"getOptions"],[7238,73,7789,21],[7238,74,7789,22],[7238,75,7789,23],[7238,77,7790,4,"event"],[7238,82,7790,9],[7238,84,7791,4,"eventHint"],[7238,93,7791,13],[7238,95,7792,4,"scope"],[7238,100,7792,9],[7238,102,7793,4,"client"],[7238,108,7793,10],[7238,110,7794,4],[7238,114,7794,4,"getIsolationScope"],[7238,137,7794,21],[7238,139,7794,22],[7238,140,7795,2],[7238,141,7795,4],[7240,4,7797,2],[7241,4,7798,2],[7241,8,7798,6],[7241,9,7798,7,"preparedEvent"],[7241,22,7798,20],[7241,24,7798,22],[7242,6,7799,4],[7242,13,7799,11],[7242,17,7799,15],[7243,4,7800,2],[7245,4,7802,2],[7246,4,7803,2],[7247,4,7804,2],[7248,4,7805,2,"preparedEvent"],[7248,17,7805,15],[7248,18,7805,16,"platform"],[7248,26,7805,24],[7248,29,7805,27,"preparedEvent"],[7248,42,7805,40],[7248,43,7805,41,"platform"],[7248,51,7805,49],[7248,55,7805,53],[7248,67,7805,65],[7250,4,7807,2],[7251,4,7808,2],[7251,10,7808,8,"metadata"],[7251,18,7808,16],[7251,21,7808,19,"client"],[7251,27,7808,25],[7251,28,7808,26,"getSdkMetadata"],[7251,42,7808,40],[7251,43,7808,41],[7251,44,7808,42],[7252,4,7809,2],[7252,10,7809,8],[7253,6,7809,10,"name"],[7253,10,7809,14],[7254,6,7809,16,"version"],[7255,4,7809,24],[7255,5,7809,25],[7255,8,7809,29,"metadata"],[7255,16,7809,37],[7255,20,7809,41,"metadata"],[7255,28,7809,49],[7255,29,7809,50,"sdk"],[7255,32,7809,53],[7255,36,7809,58],[7255,37,7809,59],[7255,38,7809,60],[7256,4,7811,2,"preparedEvent"],[7256,17,7811,15],[7256,18,7811,16,"sdk"],[7256,21,7811,19],[7256,24,7811,22],[7257,6,7812,4],[7257,9,7812,7,"preparedEvent"],[7257,22,7812,20],[7257,23,7812,21,"sdk"],[7257,26,7812,24],[7258,6,7813,4,"name"],[7258,10,7813,8],[7258,12,7813,10,"name"],[7258,16,7813,14],[7258,20,7813,18],[7258,47,7813,45],[7259,6,7814,4,"version"],[7259,13,7814,11],[7259,15,7814,13,"version"],[7259,22,7814,20],[7259,26,7814,24],[7260,4,7815,2],[7260,5,7815,3],[7261,4,7817,2],[7261,11,7817,9,"preparedEvent"],[7261,24,7817,22],[7262,2,7818,0],[7264,2,7820,0],[7265,0,7821,0],[7266,0,7822,0],[7267,2,7823,0],[7267,17,7823,15,"sendReplayRequest"],[7267,34,7823,32,"sendReplayRequest"],[7267,35,7823,33],[7268,4,7824,2,"recordingData"],[7268,17,7824,15],[7269,4,7825,2,"replayId"],[7269,12,7825,10],[7270,4,7826,2,"segmentId"],[7270,13,7826,11],[7270,15,7826,13,"segment_id"],[7270,25,7826,23],[7271,4,7827,2,"eventContext"],[7271,16,7827,14],[7272,4,7828,2,"timestamp"],[7272,13,7828,11],[7273,4,7829,2,"session"],[7274,2,7830,0],[7274,3,7830,1],[7274,5,7830,3],[7275,4,7831,2],[7275,10,7831,8,"preparedRecordingData"],[7275,31,7831,29],[7275,34,7831,32,"prepareRecordingData"],[7275,54,7831,52],[7275,55,7831,53],[7276,6,7832,4,"recordingData"],[7276,19,7832,17],[7277,6,7833,4,"headers"],[7277,13,7833,11],[7277,15,7833,13],[7278,8,7834,6,"segment_id"],[7279,6,7835,4],[7280,4,7836,2],[7280,5,7836,3],[7280,6,7836,4],[7281,4,7838,2],[7281,10,7838,8],[7282,6,7838,10,"urls"],[7282,10,7838,14],[7283,6,7838,16,"errorIds"],[7283,14,7838,24],[7284,6,7838,26,"traceIds"],[7284,14,7838,34],[7285,6,7838,36,"initialTimestamp"],[7286,4,7838,53],[7286,5,7838,54],[7286,8,7838,57,"eventContext"],[7286,20,7838,69],[7287,4,7840,2],[7287,10,7840,8,"client"],[7287,16,7840,14],[7287,19,7840,17],[7287,23,7840,17,"getClient"],[7287,38,7840,26],[7287,40,7840,27],[7287,41,7840,28],[7288,4,7841,2],[7288,10,7841,8,"scope"],[7288,15,7841,13],[7288,18,7841,16],[7288,22,7841,16,"getCurrentScope"],[7288,43,7841,31],[7288,45,7841,32],[7288,46,7841,33],[7289,4,7842,2],[7289,10,7842,8,"transport"],[7289,19,7842,17],[7289,22,7842,20,"client"],[7289,28,7842,26],[7289,32,7842,30,"client"],[7289,38,7842,36],[7289,39,7842,37,"getTransport"],[7289,51,7842,49],[7289,52,7842,50],[7289,53,7842,51],[7290,4,7843,2],[7290,10,7843,8,"dsn"],[7290,13,7843,11],[7290,16,7843,14,"client"],[7290,22,7843,20],[7290,26,7843,24,"client"],[7290,32,7843,30],[7290,33,7843,31,"getDsn"],[7290,39,7843,37],[7290,40,7843,38],[7290,41,7843,39],[7291,4,7845,2],[7291,8,7845,6],[7291,9,7845,7,"client"],[7291,15,7845,13],[7291,19,7845,17],[7291,20,7845,18,"transport"],[7291,29,7845,27],[7291,33,7845,31],[7291,34,7845,32,"dsn"],[7291,37,7845,35],[7291,41,7845,39],[7291,42,7845,40,"session"],[7291,49,7845,47],[7291,50,7845,48,"sampled"],[7291,57,7845,55],[7291,59,7845,57],[7292,6,7846,4],[7292,13,7846,11],[7292,17,7846,11,"resolvedSyncPromise"],[7292,42,7846,30],[7292,44,7846,31],[7292,45,7846,32],[7292,46,7846,33],[7292,47,7846,34],[7293,4,7847,2],[7294,4,7849,2],[7294,10,7849,8,"baseEvent"],[7294,19,7849,17],[7294,22,7849,20],[7295,6,7850,4,"type"],[7295,10,7850,8],[7295,12,7850,10,"REPLAY_EVENT_NAME"],[7295,29,7850,27],[7296,6,7851,4,"replay_start_timestamp"],[7296,28,7851,26],[7296,30,7851,28,"initialTimestamp"],[7296,46,7851,44],[7296,49,7851,47],[7296,53,7851,51],[7297,6,7852,4,"timestamp"],[7297,15,7852,13],[7297,17,7852,15,"timestamp"],[7297,26,7852,24],[7297,29,7852,27],[7297,33,7852,31],[7298,6,7853,4,"error_ids"],[7298,15,7853,13],[7298,17,7853,15,"errorIds"],[7298,25,7853,23],[7299,6,7854,4,"trace_ids"],[7299,15,7854,13],[7299,17,7854,15,"traceIds"],[7299,25,7854,23],[7300,6,7855,4,"urls"],[7300,10,7855,8],[7301,6,7856,4,"replay_id"],[7301,15,7856,13],[7301,17,7856,15,"replayId"],[7301,25,7856,23],[7302,6,7857,4,"segment_id"],[7302,16,7857,14],[7303,6,7858,4,"replay_type"],[7303,17,7858,15],[7303,19,7858,17,"session"],[7303,26,7858,24],[7303,27,7858,25,"sampled"],[7304,4,7859,2],[7304,5,7859,3],[7305,4,7861,2],[7305,10,7861,8,"replayEvent"],[7305,21,7861,19],[7305,24,7861,22],[7305,30,7861,28,"prepareReplayEvent"],[7305,48,7861,46],[7305,49,7861,47],[7306,6,7861,49,"scope"],[7306,11,7861,54],[7307,6,7861,56,"client"],[7307,12,7861,62],[7308,6,7861,64,"replayId"],[7308,14,7861,72],[7309,6,7861,74,"event"],[7309,11,7861,79],[7309,13,7861,81,"baseEvent"],[7310,4,7861,91],[7310,5,7861,92],[7310,6,7861,93],[7311,4,7863,2],[7311,8,7863,6],[7311,9,7863,7,"replayEvent"],[7311,20,7863,18],[7311,22,7863,20],[7312,6,7864,4],[7313,6,7865,4,"client"],[7313,12,7865,10],[7313,13,7865,11,"recordDroppedEvent"],[7313,31,7865,29],[7313,32,7865,30],[7313,49,7865,47],[7313,51,7865,49],[7313,59,7865,57],[7313,61,7865,59,"baseEvent"],[7313,70,7865,68],[7313,71,7865,69],[7314,6,7866,4,"DEBUG_BUILD"],[7314,17,7866,15],[7314,21,7866,19,"logger"],[7314,27,7866,25],[7314,28,7866,26,"info"],[7314,32,7866,30],[7314,33,7866,31],[7314,91,7866,89],[7314,92,7866,90],[7315,6,7867,4],[7315,13,7867,11],[7315,17,7867,11,"resolvedSyncPromise"],[7315,42,7867,30],[7315,44,7867,31],[7315,45,7867,32],[7315,46,7867,33],[7315,47,7867,34],[7316,4,7868,2],[7318,4,7870,2],[7319,0,7871,0],[7320,0,7872,0],[7321,0,7873,0],[7322,0,7874,0],[7323,0,7875,0],[7324,0,7876,0],[7325,0,7877,0],[7326,0,7878,0],[7327,0,7879,0],[7328,0,7880,0],[7329,0,7881,0],[7330,0,7882,0],[7331,0,7883,0],[7332,0,7884,0],[7333,0,7885,0],[7334,0,7886,0],[7335,0,7887,0],[7336,0,7888,0],[7337,0,7889,0],[7338,0,7890,0],[7339,0,7891,0],[7340,0,7892,0],[7341,0,7893,0],[7342,0,7894,0],[7343,0,7895,0],[7344,0,7896,0],[7345,0,7897,0],[7346,0,7898,0],[7347,0,7899,0],[7348,0,7900,0],[7349,0,7901,0],[7350,0,7902,0],[7352,4,7904,2],[7353,4,7905,2],[7354,4,7906,2],[7355,4,7907,2],[7356,4,7908,2],[7356,11,7908,9,"replayEvent"],[7356,22,7908,20],[7356,23,7908,21,"sdkProcessingMetadata"],[7356,44,7908,42],[7357,4,7910,2],[7357,10,7910,8,"envelope"],[7357,18,7910,16],[7357,21,7910,19,"createReplayEnvelope"],[7357,41,7910,39],[7357,42,7910,40,"replayEvent"],[7357,53,7910,51],[7357,55,7910,53,"preparedRecordingData"],[7357,76,7910,74],[7357,78,7910,76,"dsn"],[7357,81,7910,79],[7357,83,7910,81,"client"],[7357,89,7910,87],[7357,90,7910,88,"getOptions"],[7357,100,7910,98],[7357,101,7910,99],[7357,102,7910,100],[7357,103,7910,101,"tunnel"],[7357,109,7910,107],[7357,110,7910,108],[7358,4,7912,2],[7358,8,7912,6,"response"],[7358,16,7912,14],[7359,4,7914,2],[7359,8,7914,6],[7360,6,7915,4,"response"],[7360,14,7915,12],[7360,17,7915,15],[7360,23,7915,21,"transport"],[7360,32,7915,30],[7360,33,7915,31,"send"],[7360,37,7915,35],[7360,38,7915,36,"envelope"],[7360,46,7915,44],[7360,47,7915,45],[7361,4,7916,2],[7361,5,7916,3],[7361,6,7916,4],[7361,13,7916,11,"err"],[7361,16,7916,14],[7361,18,7916,16],[7362,6,7917,4],[7362,12,7917,10,"error"],[7362,17,7917,15],[7362,20,7917,18],[7362,24,7917,22,"Error"],[7362,29,7917,27],[7362,30,7917,28,"UNABLE_TO_SEND_REPLAY"],[7362,51,7917,49],[7362,52,7917,50],[7363,6,7919,4],[7363,10,7919,8],[7364,8,7920,6],[7365,8,7921,6],[7366,8,7922,6,"error"],[7366,13,7922,11],[7366,14,7922,12,"cause"],[7366,19,7922,17],[7366,22,7922,20,"err"],[7366,25,7922,23],[7367,6,7923,4],[7367,7,7923,5],[7367,8,7923,6],[7367,15,7923,13,"e"],[7367,16,7923,14],[7367,18,7923,16],[7368,8,7924,6],[7369,6,7924,6],[7370,6,7926,4],[7370,12,7926,10,"error"],[7370,17,7926,15],[7371,4,7927,2],[7373,4,7929,2],[7374,4,7930,2],[7374,8,7930,6],[7374,15,7930,13,"response"],[7374,23,7930,21],[7374,24,7930,22,"statusCode"],[7374,34,7930,32],[7374,39,7930,37],[7374,47,7930,45],[7374,52,7930,50,"response"],[7374,60,7930,58],[7374,61,7930,59,"statusCode"],[7374,71,7930,69],[7374,74,7930,72],[7374,77,7930,75],[7374,81,7930,79,"response"],[7374,89,7930,87],[7374,90,7930,88,"statusCode"],[7374,100,7930,98],[7374,104,7930,102],[7374,107,7930,105],[7374,108,7930,106],[7374,110,7930,108],[7375,6,7931,4],[7375,12,7931,10],[7375,16,7931,14,"TransportStatusCodeError"],[7375,40,7931,38],[7375,41,7931,39,"response"],[7375,49,7931,47],[7375,50,7931,48,"statusCode"],[7375,60,7931,58],[7375,61,7931,59],[7376,4,7932,2],[7377,4,7934,2],[7377,10,7934,8,"rateLimits"],[7377,20,7934,18],[7377,23,7934,21],[7377,27,7934,21,"updateRateLimits"],[7377,49,7934,37],[7377,51,7934,38],[7377,52,7934,39],[7377,53,7934,40],[7377,55,7934,42,"response"],[7377,63,7934,50],[7377,64,7934,51],[7378,4,7935,2],[7378,8,7935,6],[7378,12,7935,6,"isRateLimited"],[7378,31,7935,19],[7378,33,7935,20,"rateLimits"],[7378,43,7935,30],[7378,45,7935,32],[7378,53,7935,40],[7378,54,7935,41],[7378,56,7935,43],[7379,6,7936,4],[7379,12,7936,10],[7379,16,7936,14,"RateLimitError"],[7379,30,7936,28],[7379,31,7936,29,"rateLimits"],[7379,41,7936,39],[7379,42,7936,40],[7380,4,7937,2],[7381,4,7939,2],[7381,11,7939,9,"response"],[7381,19,7939,17],[7382,2,7940,0],[7384,2,7942,0],[7385,0,7943,0],[7386,0,7944,0],[7387,2,7945,0],[7387,8,7945,6,"TransportStatusCodeError"],[7387,32,7945,30],[7387,41,7945,39,"Error"],[7387,46,7945,44],[7387,47,7945,45],[7388,4,7946,3,"constructor"],[7388,15,7946,14,"constructor"],[7388,16,7946,15,"statusCode"],[7388,26,7946,25],[7388,28,7946,27],[7389,6,7947,4],[7389,11,7947,9],[7389,12,7947,10],[7389,46,7947,44,"statusCode"],[7389,56,7947,54],[7389,58,7947,56],[7389,59,7947,57],[7390,4,7948,2],[7391,2,7949,0],[7393,2,7951,0],[7394,0,7952,0],[7395,0,7953,0],[7396,2,7954,0],[7396,8,7954,6,"RateLimitError"],[7396,22,7954,20],[7396,31,7954,29,"Error"],[7396,36,7954,34],[7396,37,7954,35],[7397,4,7956,3,"constructor"],[7397,15,7956,14,"constructor"],[7397,16,7956,15,"rateLimits"],[7397,26,7956,25],[7397,28,7956,27],[7398,6,7957,4],[7398,11,7957,9],[7398,12,7957,10],[7398,28,7957,26],[7398,29,7957,27],[7399,6,7958,4],[7399,10,7958,8],[7399,11,7958,9,"rateLimits"],[7399,21,7958,19],[7399,24,7958,22,"rateLimits"],[7399,34,7958,32],[7400,4,7959,2],[7401,2,7960,0],[7403,2,7962,0],[7404,0,7963,0],[7405,0,7964,0],[7406,2,7965,0],[7406,17,7965,15,"sendReplay"],[7406,27,7965,25,"sendReplay"],[7406,28,7966,2,"replayData"],[7406,38,7966,12],[7406,40,7967,2,"retryConfig"],[7406,51,7967,13],[7406,54,7967,16],[7407,4,7968,4,"count"],[7407,9,7968,9],[7407,11,7968,11],[7407,12,7968,12],[7408,4,7969,4,"interval"],[7408,12,7969,12],[7408,14,7969,14,"RETRY_BASE_INTERVAL"],[7409,2,7970,2],[7409,3,7970,3],[7409,5,7971,2],[7410,4,7972,2],[7410,10,7972,8],[7411,6,7972,10,"recordingData"],[7411,19,7972,23],[7412,6,7972,25,"onError"],[7413,4,7972,33],[7413,5,7972,34],[7413,8,7972,37,"replayData"],[7413,18,7972,47],[7415,4,7974,2],[7416,4,7975,2],[7416,8,7975,6],[7416,9,7975,7,"recordingData"],[7416,22,7975,20],[7416,23,7975,21,"length"],[7416,29,7975,27],[7416,31,7975,29],[7417,6,7976,4],[7418,4,7977,2],[7419,4,7979,2],[7419,8,7979,6],[7420,6,7980,4],[7420,12,7980,10,"sendReplayRequest"],[7420,29,7980,27],[7420,30,7980,28,"replayData"],[7420,40,7980,38],[7420,41,7980,39],[7421,6,7981,4],[7421,13,7981,11],[7421,17,7981,15],[7422,4,7982,2],[7422,5,7982,3],[7422,6,7982,4],[7422,13,7982,11,"err"],[7422,16,7982,14],[7422,18,7982,16],[7423,6,7983,4],[7423,10,7983,8,"err"],[7423,13,7983,11],[7423,25,7983,23,"TransportStatusCodeError"],[7423,49,7983,47],[7423,53,7983,51,"err"],[7423,56,7983,54],[7423,68,7983,66,"RateLimitError"],[7423,82,7983,80],[7423,84,7983,82],[7424,8,7984,6],[7424,14,7984,12,"err"],[7424,17,7984,15],[7425,6,7985,4],[7427,6,7987,4],[7428,6,7988,4],[7428,10,7988,4,"setContext"],[7428,26,7988,14],[7428,28,7988,15],[7428,37,7988,24],[7428,39,7988,26],[7429,8,7989,6,"_retryCount"],[7429,19,7989,17],[7429,21,7989,19,"retryConfig"],[7429,32,7989,30],[7429,33,7989,31,"count"],[7430,6,7990,4],[7430,7,7990,5],[7430,8,7990,6],[7431,6,7992,4],[7431,10,7992,8,"onError"],[7431,17,7992,15],[7431,19,7992,17],[7432,8,7993,6,"onError"],[7432,15,7993,13],[7432,16,7993,14,"err"],[7432,19,7993,17],[7432,20,7993,18],[7433,6,7994,4],[7435,6,7996,4],[7436,6,7997,4],[7437,6,7998,4],[7437,10,7998,8,"retryConfig"],[7437,21,7998,19],[7437,22,7998,20,"count"],[7437,27,7998,25],[7437,31,7998,29,"RETRY_MAX_COUNT"],[7437,46,7998,44],[7437,48,7998,46],[7438,8,7999,6],[7438,14,7999,12,"error"],[7438,19,7999,17],[7438,22,7999,20],[7438,26,7999,24,"Error"],[7438,31,7999,29],[7438,32,7999,30],[7438,35,7999,33,"UNABLE_TO_SEND_REPLAY"],[7438,56,7999,54],[7438,81,7999,79],[7438,82,7999,80],[7439,8,8001,6],[7439,12,8001,10],[7440,10,8002,8],[7441,10,8003,8],[7442,10,8004,8,"error"],[7442,15,8004,13],[7442,16,8004,14,"cause"],[7442,21,8004,19],[7442,24,8004,22,"err"],[7442,27,8004,25],[7443,8,8005,6],[7443,9,8005,7],[7443,10,8005,8],[7443,17,8005,15,"e"],[7443,18,8005,16],[7443,20,8005,18],[7444,10,8006,8],[7445,8,8006,8],[7446,8,8009,6],[7446,14,8009,12,"error"],[7446,19,8009,17],[7447,6,8010,4],[7449,6,8012,4],[7450,6,8013,4,"retryConfig"],[7450,17,8013,15],[7450,18,8013,16,"interval"],[7450,26,8013,24],[7450,30,8013,28],[7450,32,8013,30,"retryConfig"],[7450,43,8013,41],[7450,44,8013,42,"count"],[7450,49,8013,47],[7451,6,8015,4],[7451,13,8015,11],[7451,17,8015,15,"Promise"],[7451,24,8015,22],[7451,25,8015,23],[7451,26,8015,24,"resolve"],[7451,33,8015,31],[7451,35,8015,33,"reject"],[7451,41,8015,39],[7451,46,8015,44],[7452,8,8016,6],[7452,12,8016,6,"setTimeout$3"],[7452,36,8016,18],[7452,38,8016,19],[7452,50,8016,31],[7453,10,8017,8],[7453,14,8017,12],[7454,12,8018,10],[7454,18,8018,16,"sendReplay"],[7454,28,8018,26],[7454,29,8018,27,"replayData"],[7454,39,8018,37],[7454,41,8018,39,"retryConfig"],[7454,52,8018,50],[7454,53,8018,51],[7455,12,8019,10,"resolve"],[7455,19,8019,17],[7455,20,8019,18],[7455,24,8019,22],[7455,25,8019,23],[7456,10,8020,8],[7456,11,8020,9],[7456,12,8020,10],[7456,19,8020,17,"err"],[7456,22,8020,20],[7456,24,8020,22],[7457,12,8021,10,"reject"],[7457,18,8021,16],[7457,19,8021,17,"err"],[7457,22,8021,20],[7457,23,8021,21],[7458,10,8022,8],[7459,8,8023,6],[7459,9,8023,7],[7459,11,8023,9,"retryConfig"],[7459,22,8023,20],[7459,23,8023,21,"interval"],[7459,31,8023,29],[7459,32,8023,30],[7460,6,8024,4],[7460,7,8024,5],[7460,8,8024,6],[7461,4,8025,2],[7462,2,8026,0],[7463,2,8028,0],[7463,8,8028,6,"THROTTLED"],[7463,17,8028,15],[7463,20,8028,18],[7463,33,8028,31],[7464,2,8029,0],[7464,8,8029,6,"SKIPPED"],[7464,15,8029,13],[7464,18,8029,16],[7464,29,8029,27],[7466,2,8031,0],[7467,0,8032,0],[7468,0,8033,0],[7469,0,8034,0],[7470,0,8035,0],[7471,0,8036,0],[7472,0,8037,0],[7473,0,8038,0],[7474,2,8039,0],[7475,2,8040,0],[7475,11,8040,9,"throttle"],[7475,19,8040,17,"throttle"],[7475,20,8041,2,"fn"],[7475,22,8041,4],[7475,24,8042,2,"maxCount"],[7475,32,8042,10],[7475,34,8043,2,"durationSeconds"],[7475,49,8043,17],[7475,51,8044,2],[7476,4,8045,2],[7476,10,8045,8,"counter"],[7476,17,8045,15],[7476,20,8045,18],[7476,24,8045,22,"Map"],[7476,27,8045,25],[7476,28,8045,26],[7476,29,8045,27],[7477,4,8047,2],[7477,10,8047,8,"_cleanup"],[7477,18,8047,16],[7477,21,8047,20,"now"],[7477,24,8047,23],[7477,28,8047,28],[7478,6,8048,4],[7478,12,8048,10,"threshold"],[7478,21,8048,19],[7478,24,8048,22,"now"],[7478,27,8048,25],[7478,30,8048,28,"durationSeconds"],[7478,45,8048,43],[7479,6,8049,4,"counter"],[7479,13,8049,11],[7479,14,8049,12,"forEach"],[7479,21,8049,19],[7479,22,8049,20],[7479,23,8049,21,"_value"],[7479,29,8049,27],[7479,31,8049,29,"key"],[7479,34,8049,32],[7479,39,8049,37],[7480,8,8050,6],[7480,12,8050,10,"key"],[7480,15,8050,13],[7480,18,8050,16,"threshold"],[7480,27,8050,25],[7480,29,8050,27],[7481,10,8051,8,"counter"],[7481,17,8051,15],[7481,18,8051,16,"delete"],[7481,24,8051,22],[7481,25,8051,23,"key"],[7481,28,8051,26],[7481,29,8051,27],[7482,8,8052,6],[7483,6,8053,4],[7483,7,8053,5],[7483,8,8053,6],[7484,4,8054,2],[7484,5,8054,3],[7485,4,8056,2],[7485,10,8056,8,"_getTotalCount"],[7485,24,8056,22],[7485,27,8056,25,"_getTotalCount"],[7485,28,8056,25],[7485,33,8056,31],[7486,6,8057,4],[7486,13,8057,11],[7486,14,8057,12],[7486,17,8057,15,"counter"],[7486,24,8057,22],[7486,25,8057,23,"values"],[7486,31,8057,29],[7486,32,8057,30],[7486,33,8057,31],[7486,34,8057,32],[7486,35,8057,33,"reduce"],[7486,41,8057,39],[7486,42,8057,40],[7486,43,8057,41,"a"],[7486,44,8057,42],[7486,46,8057,44,"b"],[7486,47,8057,45],[7486,52,8057,50,"a"],[7486,53,8057,51],[7486,56,8057,54,"b"],[7486,57,8057,55],[7486,59,8057,57],[7486,60,8057,58],[7486,61,8057,59],[7487,4,8058,2],[7487,5,8058,3],[7488,4,8060,2],[7488,8,8060,6,"isThrottled"],[7488,19,8060,17],[7488,22,8060,20],[7488,27,8060,25],[7489,4,8062,2],[7489,11,8062,9],[7489,12,8062,10],[7489,15,8062,13,"rest"],[7489,19,8062,17],[7489,24,8062,22],[7490,6,8063,4],[7491,6,8064,4],[7491,12,8064,10,"now"],[7491,15,8064,13],[7491,18,8064,16,"Math"],[7491,22,8064,20],[7491,23,8064,21,"floor"],[7491,28,8064,26],[7491,29,8064,27,"Date"],[7491,33,8064,31],[7491,34,8064,32,"now"],[7491,37,8064,35],[7491,38,8064,36],[7491,39,8064,37],[7491,42,8064,40],[7491,46,8064,44],[7491,47,8064,45],[7493,6,8066,4],[7494,6,8067,4,"_cleanup"],[7494,14,8067,12],[7494,15,8067,13,"now"],[7494,18,8067,16],[7494,19,8067,17],[7496,6,8069,4],[7497,6,8070,4],[7497,10,8070,8,"_getTotalCount"],[7497,24,8070,22],[7497,25,8070,23],[7497,26,8070,24],[7497,30,8070,28,"maxCount"],[7497,38,8070,36],[7497,40,8070,38],[7498,8,8071,6],[7498,14,8071,12,"wasThrottled"],[7498,26,8071,24],[7498,29,8071,27,"isThrottled"],[7498,40,8071,38],[7499,8,8072,6,"isThrottled"],[7499,19,8072,17],[7499,22,8072,20],[7499,26,8072,24],[7500,8,8073,6],[7500,15,8073,13,"wasThrottled"],[7500,27,8073,25],[7500,30,8073,28,"SKIPPED"],[7500,37,8073,35],[7500,40,8073,38,"THROTTLED"],[7500,49,8073,47],[7501,6,8074,4],[7502,6,8076,4,"isThrottled"],[7502,17,8076,15],[7502,20,8076,18],[7502,25,8076,23],[7503,6,8077,4],[7503,12,8077,10,"count"],[7503,17,8077,15],[7503,20,8077,18,"counter"],[7503,27,8077,25],[7503,28,8077,26,"get"],[7503,31,8077,29],[7503,32,8077,30,"now"],[7503,35,8077,33],[7503,36,8077,34],[7503,40,8077,38],[7503,41,8077,39],[7504,6,8078,4,"counter"],[7504,13,8078,11],[7504,14,8078,12,"set"],[7504,17,8078,15],[7504,18,8078,16,"now"],[7504,21,8078,19],[7504,23,8078,21,"count"],[7504,28,8078,26],[7504,31,8078,29],[7504,32,8078,30],[7504,33,8078,31],[7505,6,8080,4],[7505,13,8080,11,"fn"],[7505,15,8080,13],[7505,16,8080,14],[7505,19,8080,17,"rest"],[7505,23,8080,21],[7505,24,8080,22],[7506,4,8081,2],[7506,5,8081,3],[7507,2,8082,0],[7509,2,8084,0],[7509,33,8084,31],[7511,2,8086,0],[7512,0,8087,0],[7513,0,8088,0],[7514,2,8089,0],[7514,8,8089,6,"ReplayContainer"],[7514,23,8089,21],[7514,24,8089,23],[7515,4,8091,2],[7516,0,8092,0],[7517,0,8093,0],[7518,0,8094,0],[7519,0,8095,0],[7520,0,8096,0],[7521,0,8097,0],[7523,4,8099,2],[7524,0,8100,0],[7525,0,8101,0],[7526,0,8102,0],[7528,4,8104,2],[7529,0,8105,0],[7530,0,8106,0],[7531,0,8107,0],[7533,4,8109,2],[7535,4,8111,2],[7536,0,8112,0],[7537,0,8113,0],[7539,4,8115,2],[7540,0,8116,0],[7541,0,8117,0],[7543,4,8119,2],[7544,0,8120,0],[7545,0,8121,0],[7547,4,8123,2],[7548,0,8124,0],[7549,0,8125,0],[7550,0,8126,0],[7551,0,8127,0],[7553,4,8129,2],[7554,0,8130,0],[7555,0,8131,0],[7556,0,8132,0],[7558,4,8134,2],[7559,0,8135,0],[7560,0,8136,0],[7562,4,8138,2],[7563,0,8139,0],[7564,0,8140,0],[7566,4,8142,3,"constructor"],[7566,15,8142,14,"constructor"],[7566,16,8142,15],[7567,6,8143,4,"options"],[7567,13,8143,11],[7568,6,8144,4,"recordingOptions"],[7569,4,8145,2],[7569,5,8145,3],[7569,7,8147,2],[7570,6,8147,3,"ReplayContainer"],[7570,21,8147,18],[7570,22,8147,19,"prototype"],[7570,31,8147,28],[7570,32,8147,29,"__init"],[7570,38,8147,35],[7570,39,8147,36,"call"],[7570,43,8147,40],[7570,44,8147,41],[7570,48,8147,45],[7570,49,8147,46],[7571,6,8147,47,"ReplayContainer"],[7571,21,8147,62],[7571,22,8147,63,"prototype"],[7571,31,8147,72],[7571,32,8147,73,"__init2"],[7571,39,8147,80],[7571,40,8147,81,"call"],[7571,44,8147,85],[7571,45,8147,86],[7571,49,8147,90],[7571,50,8147,91],[7572,6,8147,92,"ReplayContainer"],[7572,21,8147,107],[7572,22,8147,108,"prototype"],[7572,31,8147,117],[7572,32,8147,118,"__init3"],[7572,39,8147,125],[7572,40,8147,126,"call"],[7572,44,8147,130],[7572,45,8147,131],[7572,49,8147,135],[7572,50,8147,136],[7573,6,8147,137,"ReplayContainer"],[7573,21,8147,152],[7573,22,8147,153,"prototype"],[7573,31,8147,162],[7573,32,8147,163,"__init4"],[7573,39,8147,170],[7573,40,8147,171,"call"],[7573,44,8147,175],[7573,45,8147,176],[7573,49,8147,180],[7573,50,8147,181],[7574,6,8147,182,"ReplayContainer"],[7574,21,8147,197],[7574,22,8147,198,"prototype"],[7574,31,8147,207],[7574,32,8147,208,"__init5"],[7574,39,8147,215],[7574,40,8147,216,"call"],[7574,44,8147,220],[7574,45,8147,221],[7574,49,8147,225],[7574,50,8147,226],[7575,6,8147,227,"ReplayContainer"],[7575,21,8147,242],[7575,22,8147,243,"prototype"],[7575,31,8147,252],[7575,32,8147,253,"__init6"],[7575,39,8147,260],[7575,40,8147,261,"call"],[7575,44,8147,265],[7575,45,8147,266],[7575,49,8147,270],[7575,50,8147,271],[7576,6,8148,4],[7576,10,8148,8],[7576,11,8148,9,"eventBuffer"],[7576,22,8148,20],[7576,25,8148,23],[7576,29,8148,27],[7577,6,8149,4],[7577,10,8149,8],[7577,11,8149,9,"performanceEntries"],[7577,29,8149,27],[7577,32,8149,30],[7577,34,8149,32],[7578,6,8150,4],[7578,10,8150,8],[7578,11,8150,9,"replayPerformanceEntries"],[7578,35,8150,33],[7578,38,8150,36],[7578,40,8150,38],[7579,6,8151,4],[7579,10,8151,8],[7579,11,8151,9,"recordingMode"],[7579,24,8151,22],[7579,27,8151,25],[7579,36,8151,34],[7580,6,8152,4],[7580,10,8152,8],[7580,11,8152,9,"timeouts"],[7580,19,8152,17],[7580,22,8152,20],[7581,8,8153,6,"sessionIdlePause"],[7581,24,8153,22],[7581,26,8153,24,"SESSION_IDLE_PAUSE_DURATION"],[7581,53,8153,51],[7582,8,8154,6,"sessionIdleExpire"],[7582,25,8154,23],[7582,27,8154,25,"SESSION_IDLE_EXPIRE_DURATION"],[7583,6,8155,4],[7583,7,8155,5],[7584,6,8156,4],[7584,10,8156,8],[7584,11,8156,9,"_lastActivity"],[7584,24,8156,22],[7584,27,8156,25,"Date"],[7584,31,8156,29],[7584,32,8156,30,"now"],[7584,35,8156,33],[7584,36,8156,34],[7584,37,8156,35],[7585,6,8157,4],[7585,10,8157,8],[7585,11,8157,9,"_isEnabled"],[7585,21,8157,19],[7585,24,8157,22],[7585,29,8157,27],[7586,6,8158,4],[7586,10,8158,8],[7586,11,8158,9,"_isPaused"],[7586,20,8158,18],[7586,23,8158,21],[7586,28,8158,26],[7587,6,8159,4],[7587,10,8159,8],[7587,11,8159,9,"_requiresManualStart"],[7587,31,8159,29],[7587,34,8159,32],[7587,39,8159,37],[7588,6,8160,4],[7588,10,8160,8],[7588,11,8160,9,"_hasInitializedCoreListeners"],[7588,39,8160,37],[7588,42,8160,40],[7588,47,8160,45],[7589,6,8161,4],[7589,10,8161,8],[7589,11,8161,9,"_context"],[7589,19,8161,17],[7589,22,8161,20],[7590,8,8162,6,"errorIds"],[7590,16,8162,14],[7590,18,8162,16],[7590,22,8162,20,"Set"],[7590,25,8162,23],[7590,26,8162,24],[7590,27,8162,25],[7591,8,8163,6,"traceIds"],[7591,16,8163,14],[7591,18,8163,16],[7591,22,8163,20,"Set"],[7591,25,8163,23],[7591,26,8163,24],[7591,27,8163,25],[7592,8,8164,6,"urls"],[7592,12,8164,10],[7592,14,8164,12],[7592,16,8164,14],[7593,8,8165,6,"initialTimestamp"],[7593,24,8165,22],[7593,26,8165,24,"Date"],[7593,30,8165,28],[7593,31,8165,29,"now"],[7593,34,8165,32],[7593,35,8165,33],[7593,36,8165,34],[7594,8,8166,6,"initialUrl"],[7594,18,8166,16],[7594,20,8166,18],[7595,6,8167,4],[7595,7,8167,5],[7596,6,8169,4],[7596,10,8169,8],[7596,11,8169,9,"_recordingOptions"],[7596,28,8169,26],[7596,31,8169,29,"recordingOptions"],[7596,47,8169,45],[7597,6,8170,4],[7597,10,8170,8],[7597,11,8170,9,"_options"],[7597,19,8170,17],[7597,22,8170,20,"options"],[7597,29,8170,27],[7598,6,8172,4],[7598,10,8172,8],[7598,11,8172,9,"_debouncedFlush"],[7598,26,8172,24],[7598,29,8172,27,"debounce"],[7598,37,8172,35],[7598,38,8172,36],[7598,44,8172,42],[7598,48,8172,46],[7598,49,8172,47,"_flush"],[7598,55,8172,53],[7598,56,8172,54],[7598,57,8172,55],[7598,59,8172,57],[7598,63,8172,61],[7598,64,8172,62,"_options"],[7598,72,8172,70],[7598,73,8172,71,"flushMinDelay"],[7598,86,8172,84],[7598,88,8172,86],[7599,8,8173,6,"maxWait"],[7599,15,8173,13],[7599,17,8173,15],[7599,21,8173,19],[7599,22,8173,20,"_options"],[7599,30,8173,28],[7599,31,8173,29,"flushMaxDelay"],[7600,6,8174,4],[7600,7,8174,5],[7600,8,8174,6],[7601,6,8176,4],[7601,10,8176,8],[7601,11,8176,9,"_throttledAddEvent"],[7601,29,8176,27],[7601,32,8176,30,"throttle"],[7601,40,8176,38],[7601,41,8177,6],[7601,42,8177,7,"event"],[7601,47,8177,12],[7601,49,8177,14,"isCheckout"],[7601,59,8177,24],[7601,64,8177,29,"addEvent"],[7601,72,8177,37],[7601,73,8177,38],[7601,77,8177,42],[7601,79,8177,44,"event"],[7601,84,8177,49],[7601,86,8177,51,"isCheckout"],[7601,96,8177,61],[7601,97,8177,62],[7602,6,8178,6],[7603,6,8179,6],[7603,9,8179,9],[7604,6,8180,6],[7605,6,8181,6],[7605,7,8182,4],[7605,8,8182,5],[7606,6,8184,4],[7606,12,8184,10],[7607,8,8184,12,"slowClickTimeout"],[7607,24,8184,28],[7608,8,8184,30,"slowClickIgnoreSelectors"],[7609,6,8184,55],[7609,7,8184,56],[7609,10,8184,59],[7609,14,8184,63],[7609,15,8184,64,"getOptions"],[7609,25,8184,74],[7609,26,8184,75],[7609,27,8184,76],[7610,6,8186,4],[7610,12,8186,10,"slowClickConfig"],[7610,27,8186,25],[7610,30,8186,28,"slowClickTimeout"],[7610,46,8186,44],[7610,49,8187,8],[7611,8,8188,10,"threshold"],[7611,17,8188,19],[7611,19,8188,21,"Math"],[7611,23,8188,25],[7611,24,8188,26,"min"],[7611,27,8188,29],[7611,28,8188,30,"SLOW_CLICK_THRESHOLD"],[7611,48,8188,50],[7611,50,8188,52,"slowClickTimeout"],[7611,66,8188,68],[7611,67,8188,69],[7612,8,8189,10,"timeout"],[7612,15,8189,17],[7612,17,8189,19,"slowClickTimeout"],[7612,33,8189,35],[7613,8,8190,10,"scrollTimeout"],[7613,21,8190,23],[7613,23,8190,25,"SLOW_CLICK_SCROLL_TIMEOUT"],[7613,48,8190,50],[7614,8,8191,10,"ignoreSelector"],[7614,22,8191,24],[7614,24,8191,26,"slowClickIgnoreSelectors"],[7614,48,8191,50],[7614,51,8191,53,"slowClickIgnoreSelectors"],[7614,75,8191,77],[7614,76,8191,78,"join"],[7614,80,8191,82],[7614,81,8191,83],[7614,84,8191,86],[7614,85,8191,87],[7614,88,8191,90],[7615,6,8192,8],[7615,7,8192,9],[7615,10,8193,8,"undefined"],[7615,19,8193,17],[7616,6,8195,4],[7616,10,8195,8,"slowClickConfig"],[7616,25,8195,23],[7616,27,8195,25],[7617,8,8196,6],[7617,12,8196,10],[7617,13,8196,11,"clickDetector"],[7617,26,8196,24],[7617,29,8196,27],[7617,33,8196,31,"ClickDetector"],[7617,46,8196,44],[7617,47,8196,45],[7617,51,8196,49],[7617,53,8196,51,"slowClickConfig"],[7617,68,8196,66],[7617,69,8196,67],[7618,6,8197,4],[7620,6,8199,4],[7621,6,8200,4],[7621,10,8200,8,"DEBUG_BUILD"],[7621,21,8200,19],[7621,23,8200,21],[7622,8,8201,6],[7622,14,8201,12,"experiments"],[7622,25,8201,23],[7622,28,8201,26,"options"],[7622,35,8201,33],[7622,36,8201,34,"_experiments"],[7622,48,8201,46],[7623,8,8202,6,"logger"],[7623,14,8202,12],[7623,15,8202,13,"setConfig"],[7623,24,8202,22],[7623,25,8202,23],[7624,10,8203,8,"captureExceptions"],[7624,27,8203,25],[7624,29,8203,27],[7624,30,8203,28],[7624,31,8203,29,"experiments"],[7624,42,8203,40],[7624,43,8203,41,"captureExceptions"],[7624,60,8203,58],[7625,10,8204,8,"traceInternals"],[7625,24,8204,22],[7625,26,8204,24],[7625,27,8204,25],[7625,28,8204,26,"experiments"],[7625,39,8204,37],[7625,40,8204,38,"traceInternals"],[7626,8,8205,6],[7626,9,8205,7],[7626,10,8205,8],[7627,6,8206,4],[7628,4,8207,2],[7630,4,8209,2],[7631,4,8210,3,"getContext"],[7631,14,8210,13,"getContext"],[7631,15,8210,13],[7631,17,8210,16],[7632,6,8211,4],[7632,13,8211,11],[7632,17,8211,15],[7632,18,8211,16,"_context"],[7632,26,8211,24],[7633,4,8212,2],[7635,4,8214,2],[7636,4,8215,3,"isEnabled"],[7636,13,8215,12,"isEnabled"],[7636,14,8215,12],[7636,16,8215,15],[7637,6,8216,4],[7637,13,8216,11],[7637,17,8216,15],[7637,18,8216,16,"_isEnabled"],[7637,28,8216,26],[7638,4,8217,2],[7640,4,8219,2],[7641,4,8220,3,"isPaused"],[7641,12,8220,11,"isPaused"],[7641,13,8220,11],[7641,15,8220,14],[7642,6,8221,4],[7642,13,8221,11],[7642,17,8221,15],[7642,18,8221,16,"_isPaused"],[7642,27,8221,25],[7643,4,8222,2],[7645,4,8224,2],[7646,0,8225,0],[7647,0,8226,0],[7648,4,8227,3,"isRecordingCanvas"],[7648,21,8227,20,"isRecordingCanvas"],[7648,22,8227,20],[7648,24,8227,23],[7649,6,8228,4],[7649,13,8228,11,"Boolean"],[7649,20,8228,18],[7649,21,8228,19],[7649,25,8228,23],[7649,26,8228,24,"_canvas"],[7649,33,8228,31],[7649,34,8228,32],[7650,4,8229,2],[7652,4,8231,2],[7653,4,8232,3,"getOptions"],[7653,14,8232,13,"getOptions"],[7653,15,8232,13],[7653,17,8232,16],[7654,6,8233,4],[7654,13,8233,11],[7654,17,8233,15],[7654,18,8233,16,"_options"],[7654,26,8233,24],[7655,4,8234,2],[7657,4,8236,2],[7658,4,8237,3,"handleException"],[7658,19,8237,18,"handleException"],[7658,20,8237,19,"error"],[7658,25,8237,24],[7658,27,8237,26],[7659,6,8238,4,"DEBUG_BUILD"],[7659,17,8238,15],[7659,21,8238,19,"logger"],[7659,27,8238,25],[7659,28,8238,26,"exception"],[7659,37,8238,35],[7659,38,8238,36,"error"],[7659,43,8238,41],[7659,44,8238,42],[7660,6,8239,4],[7660,10,8239,8],[7660,14,8239,12],[7660,15,8239,13,"_options"],[7660,23,8239,21],[7660,24,8239,22,"onError"],[7660,31,8239,29],[7660,33,8239,31],[7661,8,8240,6],[7661,12,8240,10],[7661,13,8240,11,"_options"],[7661,21,8240,19],[7661,22,8240,20,"onError"],[7661,29,8240,27],[7661,30,8240,28,"error"],[7661,35,8240,33],[7661,36,8240,34],[7662,6,8241,4],[7663,4,8242,2],[7665,4,8244,2],[7666,0,8245,0],[7667,0,8246,0],[7668,0,8247,0],[7669,4,8248,3,"initializeSampling"],[7669,22,8248,21,"initializeSampling"],[7669,23,8248,22,"previousSessionId"],[7669,40,8248,39],[7669,42,8248,41],[7670,6,8249,4],[7670,12,8249,10],[7671,8,8249,12,"errorSampleRate"],[7671,23,8249,27],[7672,8,8249,29,"sessionSampleRate"],[7673,6,8249,47],[7673,7,8249,48],[7673,10,8249,51],[7673,14,8249,55],[7673,15,8249,56,"_options"],[7673,23,8249,64],[7675,6,8251,4],[7676,6,8252,4],[7677,6,8253,4],[7677,12,8253,10,"requiresManualStart"],[7677,31,8253,29],[7677,34,8253,32,"errorSampleRate"],[7677,49,8253,47],[7677,53,8253,51],[7677,54,8253,52],[7677,58,8253,56,"sessionSampleRate"],[7677,75,8253,73],[7677,79,8253,77],[7677,80,8253,78],[7678,6,8255,4],[7678,10,8255,8],[7678,11,8255,9,"_requiresManualStart"],[7678,31,8255,29],[7678,34,8255,32,"requiresManualStart"],[7678,53,8255,51],[7679,6,8257,4],[7679,10,8257,8,"requiresManualStart"],[7679,29,8257,27],[7679,31,8257,29],[7680,8,8258,6],[7681,6,8259,4],[7683,6,8261,4],[7684,6,8262,4],[7685,6,8263,4],[7685,10,8263,8],[7685,11,8263,9,"_initializeSessionForSampling"],[7685,40,8263,38],[7685,41,8263,39,"previousSessionId"],[7685,58,8263,56],[7685,59,8263,57],[7686,6,8265,4],[7686,10,8265,8],[7686,11,8265,9],[7686,15,8265,13],[7686,16,8265,14,"session"],[7686,23,8265,21],[7686,25,8265,23],[7687,8,8266,6],[7688,8,8267,6,"DEBUG_BUILD"],[7688,19,8267,17],[7688,23,8267,21,"logger"],[7688,29,8267,27],[7688,30,8267,28,"exception"],[7688,39,8267,37],[7688,40,8267,38],[7688,44,8267,42,"Error"],[7688,49,8267,47],[7688,50,8267,48],[7688,91,8267,89],[7688,92,8267,90],[7688,93,8267,91],[7689,8,8268,6],[7690,6,8269,4],[7691,6,8271,4],[7691,10,8271,8],[7691,14,8271,12],[7691,15,8271,13,"session"],[7691,22,8271,20],[7691,23,8271,21,"sampled"],[7691,30,8271,28],[7691,35,8271,33],[7691,40,8271,38],[7691,42,8271,40],[7692,8,8272,6],[7693,8,8273,6],[7694,8,8274,6],[7695,6,8275,4],[7697,6,8277,4],[7698,6,8278,4],[7699,6,8279,4],[7699,10,8279,8],[7699,11,8279,9,"recordingMode"],[7699,24,8279,22],[7699,27,8279,25],[7699,31,8279,29],[7699,32,8279,30,"session"],[7699,39,8279,37],[7699,40,8279,38,"sampled"],[7699,47,8279,45],[7699,52,8279,50],[7699,60,8279,58],[7699,64,8279,62],[7699,68,8279,66],[7699,69,8279,67,"session"],[7699,76,8279,74],[7699,77,8279,75,"segmentId"],[7699,86,8279,84],[7699,91,8279,89],[7699,92,8279,90],[7699,95,8279,93],[7699,103,8279,101],[7699,106,8279,104],[7699,115,8279,113],[7700,6,8281,4,"DEBUG_BUILD"],[7700,17,8281,15],[7700,21,8281,19,"logger"],[7700,27,8281,25],[7700,28,8281,26,"infoTick"],[7700,36,8281,34],[7700,37,8281,35],[7700,59,8281,57],[7700,63,8281,61],[7700,64,8281,62,"recordingMode"],[7700,77,8281,75],[7700,84,8281,82],[7700,85,8281,83],[7701,6,8283,4],[7701,10,8283,8],[7701,11,8283,9,"_initializeRecording"],[7701,31,8283,29],[7701,32,8283,30],[7701,33,8283,31],[7702,4,8284,2],[7704,4,8286,2],[7705,0,8287,0],[7706,0,8288,0],[7707,0,8289,0],[7708,0,8290,0],[7709,0,8291,0],[7710,0,8292,0],[7711,4,8293,3,"start"],[7711,9,8293,8,"start"],[7711,10,8293,8],[7711,12,8293,11],[7712,6,8294,4],[7712,10,8294,8],[7712,14,8294,12],[7712,15,8294,13,"_isEnabled"],[7712,25,8294,23],[7712,29,8294,27],[7712,33,8294,31],[7712,34,8294,32,"recordingMode"],[7712,47,8294,45],[7712,52,8294,50],[7712,61,8294,59],[7712,63,8294,61],[7713,8,8295,6,"DEBUG_BUILD"],[7713,19,8295,17],[7713,23,8295,21,"logger"],[7713,29,8295,27],[7713,30,8295,28,"info"],[7713,34,8295,32],[7713,35,8295,33],[7713,69,8295,67],[7713,70,8295,68],[7714,8,8296,6],[7715,6,8297,4],[7716,6,8299,4],[7716,10,8299,8],[7716,14,8299,12],[7716,15,8299,13,"_isEnabled"],[7716,25,8299,23],[7716,29,8299,27],[7716,33,8299,31],[7716,34,8299,32,"recordingMode"],[7716,47,8299,45],[7716,52,8299,50],[7716,60,8299,58],[7716,62,8299,60],[7717,8,8300,6,"DEBUG_BUILD"],[7717,19,8300,17],[7717,23,8300,21,"logger"],[7717,29,8300,27],[7717,30,8300,28,"info"],[7717,34,8300,32],[7717,35,8300,33],[7717,96,8300,94],[7717,97,8300,95],[7718,8,8301,6],[7719,6,8302,4],[7720,6,8304,4,"DEBUG_BUILD"],[7720,17,8304,15],[7720,21,8304,19,"logger"],[7720,27,8304,25],[7720,28,8304,26,"infoTick"],[7720,36,8304,34],[7720,37,8304,35],[7720,70,8304,68],[7720,71,8304,69],[7722,6,8306,4],[7723,6,8307,4],[7724,6,8308,4],[7725,6,8309,4],[7726,6,8310,4],[7726,10,8310,8],[7726,11,8310,9,"_updateUserActivity"],[7726,30,8310,28],[7726,31,8310,29],[7726,32,8310,30],[7727,6,8312,4],[7727,12,8312,10,"session"],[7727,19,8312,17],[7727,22,8312,20,"loadOrCreateSession"],[7727,41,8312,39],[7727,42,8313,6],[7728,8,8314,8,"maxReplayDuration"],[7728,25,8314,25],[7728,27,8314,27],[7728,31,8314,31],[7728,32,8314,32,"_options"],[7728,40,8314,40],[7728,41,8314,41,"maxReplayDuration"],[7728,58,8314,58],[7729,8,8315,8,"sessionIdleExpire"],[7729,25,8315,25],[7729,27,8315,27],[7729,31,8315,31],[7729,32,8315,32,"timeouts"],[7729,40,8315,40],[7729,41,8315,41,"sessionIdleExpire"],[7730,6,8316,6],[7730,7,8316,7],[7730,9,8317,6],[7731,8,8318,8,"stickySession"],[7731,21,8318,21],[7731,23,8318,23],[7731,27,8318,27],[7731,28,8318,28,"_options"],[7731,36,8318,36],[7731,37,8318,37,"stickySession"],[7731,50,8318,50],[7732,8,8319,8],[7733,8,8320,8,"sessionSampleRate"],[7733,25,8320,25],[7733,27,8320,27],[7733,28,8320,28],[7734,8,8321,8,"allowBuffering"],[7734,22,8321,22],[7734,24,8321,24],[7735,6,8322,6],[7735,7,8323,4],[7735,8,8323,5],[7736,6,8325,4],[7736,10,8325,8],[7736,11,8325,9,"session"],[7736,18,8325,16],[7736,21,8325,19,"session"],[7736,28,8325,26],[7737,6,8327,4],[7737,10,8327,8],[7737,11,8327,9,"_initializeRecording"],[7737,31,8327,29],[7737,32,8327,30],[7737,33,8327,31],[7738,4,8328,2],[7740,4,8330,2],[7741,0,8331,0],[7742,0,8332,0],[7743,0,8333,0],[7744,4,8334,3,"startBuffering"],[7744,18,8334,17,"startBuffering"],[7744,19,8334,17],[7744,21,8334,20],[7745,6,8335,4],[7745,10,8335,8],[7745,14,8335,12],[7745,15,8335,13,"_isEnabled"],[7745,25,8335,23],[7745,27,8335,25],[7746,8,8336,6,"DEBUG_BUILD"],[7746,19,8336,17],[7746,23,8336,21,"logger"],[7746,29,8336,27],[7746,30,8336,28,"info"],[7746,34,8336,32],[7746,35,8336,33],[7746,96,8336,94],[7746,97,8336,95],[7747,8,8337,6],[7748,6,8338,4],[7749,6,8340,4,"DEBUG_BUILD"],[7749,17,8340,15],[7749,21,8340,19,"logger"],[7749,27,8340,25],[7749,28,8340,26,"infoTick"],[7749,36,8340,34],[7749,37,8340,35],[7749,69,8340,67],[7749,70,8340,68],[7750,6,8342,4],[7750,12,8342,10,"session"],[7750,19,8342,17],[7750,22,8342,20,"loadOrCreateSession"],[7750,41,8342,39],[7750,42,8343,6],[7751,8,8344,8,"sessionIdleExpire"],[7751,25,8344,25],[7751,27,8344,27],[7751,31,8344,31],[7751,32,8344,32,"timeouts"],[7751,40,8344,40],[7751,41,8344,41,"sessionIdleExpire"],[7751,58,8344,58],[7752,8,8345,8,"maxReplayDuration"],[7752,25,8345,25],[7752,27,8345,27],[7752,31,8345,31],[7752,32,8345,32,"_options"],[7752,40,8345,40],[7752,41,8345,41,"maxReplayDuration"],[7753,6,8346,6],[7753,7,8346,7],[7753,9,8347,6],[7754,8,8348,8,"stickySession"],[7754,21,8348,21],[7754,23,8348,23],[7754,27,8348,27],[7754,28,8348,28,"_options"],[7754,36,8348,36],[7754,37,8348,37,"stickySession"],[7754,50,8348,50],[7755,8,8349,8,"sessionSampleRate"],[7755,25,8349,25],[7755,27,8349,27],[7755,28,8349,28],[7756,8,8350,8,"allowBuffering"],[7756,22,8350,22],[7756,24,8350,24],[7757,6,8351,6],[7757,7,8352,4],[7757,8,8352,5],[7758,6,8354,4],[7758,10,8354,8],[7758,11,8354,9,"session"],[7758,18,8354,16],[7758,21,8354,19,"session"],[7758,28,8354,26],[7759,6,8356,4],[7759,10,8356,8],[7759,11,8356,9,"recordingMode"],[7759,24,8356,22],[7759,27,8356,25],[7759,35,8356,33],[7760,6,8357,4],[7760,10,8357,8],[7760,11,8357,9,"_initializeRecording"],[7760,31,8357,29],[7760,32,8357,30],[7760,33,8357,31],[7761,4,8358,2],[7763,4,8360,2],[7764,0,8361,0],[7765,0,8362,0],[7766,0,8363,0],[7767,0,8364,0],[7768,4,8365,3,"startRecording"],[7768,18,8365,17,"startRecording"],[7768,19,8365,17],[7768,21,8365,20],[7769,6,8366,4],[7769,10,8366,8],[7770,8,8367,6],[7770,14,8367,12,"canvasOptions"],[7770,27,8367,25],[7770,30,8367,28],[7770,34,8367,32],[7770,35,8367,33,"_canvas"],[7770,42,8367,40],[7771,8,8369,6],[7771,12,8369,10],[7771,13,8369,11,"_stopRecording"],[7771,27,8369,25],[7771,30,8369,28,"record"],[7771,36,8369,34],[7771,37,8369,35],[7772,10,8370,8],[7772,13,8370,11],[7772,17,8370,15],[7772,18,8370,16,"_recordingOptions"],[7772,35,8370,33],[7773,10,8371,8],[7774,10,8372,8],[7775,10,8373,8],[7776,10,8374,8],[7776,14,8374,12],[7776,18,8374,16],[7776,19,8374,17,"recordingMode"],[7776,32,8374,30],[7776,37,8374,35],[7776,45,8374,43],[7776,48,8375,12],[7777,12,8375,14,"checkoutEveryNms"],[7777,28,8375,30],[7777,30,8375,32,"BUFFER_CHECKOUT_TIME"],[7778,10,8375,53],[7778,11,8375,54],[7779,10,8376,12],[7780,10,8377,12],[7781,10,8378,12],[7782,10,8379,12],[7783,10,8380,12],[7784,10,8381,12],[7785,10,8382,12],[7786,10,8383,12],[7786,14,8383,16],[7786,15,8383,17,"_options"],[7786,23,8383,25],[7786,24,8383,26,"_experiments"],[7786,36,8383,38],[7786,37,8383,39,"continuousCheckout"],[7786,55,8383,57],[7786,59,8383,61],[7787,12,8384,14],[7788,12,8385,14,"checkoutEveryNms"],[7788,28,8385,30],[7788,30,8385,32,"Math"],[7788,34,8385,36],[7788,35,8385,37,"max"],[7788,38,8385,40],[7788,39,8385,41],[7788,45,8385,47],[7788,47,8385,49],[7788,51,8385,53],[7788,52,8385,54,"_options"],[7788,60,8385,62],[7788,61,8385,63,"_experiments"],[7788,73,8385,75],[7788,74,8385,76,"continuousCheckout"],[7788,92,8385,94],[7789,10,8386,12],[7789,11,8386,13],[7789,12,8386,14],[7790,10,8387,8,"emit"],[7790,14,8387,12],[7790,16,8387,14,"getHandleRecordingEmit"],[7790,38,8387,36],[7790,39,8387,37],[7790,43,8387,41],[7790,44,8387,42],[7791,10,8388,8],[7791,13,8388,11,"getRecordingSamplingOptions"],[7791,40,8388,38],[7791,41,8388,39],[7791,42,8388,40],[7792,10,8389,8,"onMutation"],[7792,20,8389,18],[7792,22,8389,20],[7792,26,8389,24],[7792,27,8389,25,"_onMutationHandler"],[7792,45,8389,43],[7793,10,8390,8],[7793,14,8390,12,"canvasOptions"],[7793,27,8390,25],[7793,30,8391,12],[7794,12,8392,14,"recordCanvas"],[7794,24,8392,26],[7794,26,8392,28,"canvasOptions"],[7794,39,8392,41],[7794,40,8392,42,"recordCanvas"],[7794,52,8392,54],[7795,12,8393,14,"getCanvasManager"],[7795,28,8393,30],[7795,30,8393,32,"canvasOptions"],[7795,43,8393,45],[7795,44,8393,46,"getCanvasManager"],[7795,60,8393,62],[7796,12,8394,14,"sampling"],[7796,20,8394,22],[7796,22,8394,24,"canvasOptions"],[7796,35,8394,37],[7796,36,8394,38,"sampling"],[7796,44,8394,46],[7797,12,8395,14,"dataURLOptions"],[7797,26,8395,28],[7797,28,8395,30,"canvasOptions"],[7797,41,8395,43],[7797,42,8395,44,"dataURLOptions"],[7798,10,8396,12],[7798,11,8396,13],[7798,14,8397,12],[7798,15,8397,13],[7798,16,8397,14],[7799,8,8398,6],[7799,9,8398,7],[7799,10,8398,8],[7800,6,8399,4],[7800,7,8399,5],[7800,8,8399,6],[7800,15,8399,13,"err"],[7800,18,8399,16],[7800,20,8399,18],[7801,8,8400,6],[7801,12,8400,10],[7801,13,8400,11,"handleException"],[7801,28,8400,26],[7801,29,8400,27,"err"],[7801,32,8400,30],[7801,33,8400,31],[7802,6,8401,4],[7803,4,8402,2],[7805,4,8404,2],[7806,0,8405,0],[7807,0,8406,0],[7808,0,8407,0],[7809,0,8408,0],[7810,0,8409,0],[7811,4,8410,3,"stopRecording"],[7811,17,8410,16,"stopRecording"],[7811,18,8410,16],[7811,20,8410,19],[7812,6,8411,4],[7812,10,8411,8],[7813,8,8412,6],[7813,12,8412,10],[7813,16,8412,14],[7813,17,8412,15,"_stopRecording"],[7813,31,8412,29],[7813,33,8412,31],[7814,10,8413,8],[7814,14,8413,12],[7814,15,8413,13,"_stopRecording"],[7814,29,8413,27],[7814,30,8413,28],[7814,31,8413,29],[7815,10,8414,8],[7815,14,8414,12],[7815,15,8414,13,"_stopRecording"],[7815,29,8414,27],[7815,32,8414,30,"undefined"],[7815,41,8414,39],[7816,8,8415,6],[7817,8,8417,6],[7817,15,8417,13],[7817,19,8417,17],[7818,6,8418,4],[7818,7,8418,5],[7818,8,8418,6],[7818,15,8418,13,"err"],[7818,18,8418,16],[7818,20,8418,18],[7819,8,8419,6],[7819,12,8419,10],[7819,13,8419,11,"handleException"],[7819,28,8419,26],[7819,29,8419,27,"err"],[7819,32,8419,30],[7819,33,8419,31],[7820,8,8420,6],[7820,15,8420,13],[7820,20,8420,18],[7821,6,8421,4],[7822,4,8422,2],[7824,4,8424,2],[7825,0,8425,0],[7826,0,8426,0],[7827,0,8427,0],[7828,4,8428,3],[7828,10,8428,9,"stop"],[7828,14,8428,13,"stop"],[7828,15,8428,14],[7829,6,8428,16,"forceFlush"],[7829,16,8428,26],[7829,19,8428,29],[7829,24,8428,34],[7830,6,8428,36,"reason"],[7831,4,8428,43],[7831,5,8428,44],[7831,8,8428,47],[7831,9,8428,48],[7831,10,8428,49],[7831,12,8428,51],[7832,6,8429,4],[7832,10,8429,8],[7832,11,8429,9],[7832,15,8429,13],[7832,16,8429,14,"_isEnabled"],[7832,26,8429,24],[7832,28,8429,26],[7833,8,8430,6],[7834,6,8431,4],[7836,6,8433,4],[7837,6,8434,4],[7838,6,8435,4],[7838,10,8435,8],[7838,11,8435,9,"_isEnabled"],[7838,21,8435,19],[7838,24,8435,22],[7838,29,8435,27],[7839,6,8437,4],[7839,10,8437,8],[7840,8,8438,6,"DEBUG_BUILD"],[7840,19,8438,17],[7840,23,8438,21,"logger"],[7840,29,8438,27],[7840,30,8438,28,"info"],[7840,34,8438,32],[7840,35,8438,33],[7840,53,8438,51,"reason"],[7840,59,8438,57],[7840,62,8438,60],[7840,79,8438,77,"reason"],[7840,85,8438,83],[7840,87,8438,85],[7840,90,8438,88],[7840,92,8438,90],[7840,94,8438,92],[7840,95,8438,93],[7841,8,8440,6,"resetReplayIdOnDynamicSamplingContext"],[7841,45,8440,43],[7841,46,8440,44],[7841,47,8440,45],[7842,8,8442,6],[7842,12,8442,10],[7842,13,8442,11,"_removeListeners"],[7842,29,8442,27],[7842,30,8442,28],[7842,31,8442,29],[7843,8,8443,6],[7843,12,8443,10],[7843,13,8443,11,"stopRecording"],[7843,26,8443,24],[7843,27,8443,25],[7843,28,8443,26],[7844,8,8445,6],[7844,12,8445,10],[7844,13,8445,11,"_debouncedFlush"],[7844,28,8445,26],[7844,29,8445,27,"cancel"],[7844,35,8445,33],[7844,36,8445,34],[7844,37,8445,35],[7845,8,8446,6],[7846,8,8447,6],[7847,8,8448,6],[7847,12,8448,10,"forceFlush"],[7847,22,8448,20],[7847,24,8448,22],[7848,10,8449,8],[7848,16,8449,14],[7848,20,8449,18],[7848,21,8449,19,"_flush"],[7848,27,8449,25],[7848,28,8449,26],[7849,12,8449,28,"force"],[7849,17,8449,33],[7849,19,8449,35],[7850,10,8449,40],[7850,11,8449,41],[7850,12,8449,42],[7851,8,8450,6],[7853,8,8452,6],[7854,8,8453,6],[7854,12,8453,10],[7854,13,8453,11,"eventBuffer"],[7854,24,8453,22],[7854,28,8453,26],[7854,32,8453,30],[7854,33,8453,31,"eventBuffer"],[7854,44,8453,42],[7854,45,8453,43,"destroy"],[7854,52,8453,50],[7854,53,8453,51],[7854,54,8453,52],[7855,8,8454,6],[7855,12,8454,10],[7855,13,8454,11,"eventBuffer"],[7855,24,8454,22],[7855,27,8454,25],[7855,31,8454,29],[7857,8,8456,6],[7858,8,8457,6],[7859,8,8458,6,"clearSession"],[7859,20,8458,18],[7859,21,8458,19],[7859,25,8458,23],[7859,26,8458,24],[7860,6,8459,4],[7860,7,8459,5],[7860,8,8459,6],[7860,15,8459,13,"err"],[7860,18,8459,16],[7860,20,8459,18],[7861,8,8460,6],[7861,12,8460,10],[7861,13,8460,11,"handleException"],[7861,28,8460,26],[7861,29,8460,27,"err"],[7861,32,8460,30],[7861,33,8460,31],[7862,6,8461,4],[7863,4,8462,2],[7865,4,8464,2],[7866,0,8465,0],[7867,0,8466,0],[7868,0,8467,0],[7869,0,8468,0],[7870,4,8469,3,"pause"],[7870,9,8469,8,"pause"],[7870,10,8469,8],[7870,12,8469,11],[7871,6,8470,4],[7871,10,8470,8],[7871,14,8470,12],[7871,15,8470,13,"_isPaused"],[7871,24,8470,22],[7871,26,8470,24],[7872,8,8471,6],[7873,6,8472,4],[7874,6,8474,4],[7874,10,8474,8],[7874,11,8474,9,"_isPaused"],[7874,20,8474,18],[7874,23,8474,21],[7874,27,8474,25],[7875,6,8475,4],[7875,10,8475,8],[7875,11,8475,9,"stopRecording"],[7875,24,8475,22],[7875,25,8475,23],[7875,26,8475,24],[7876,6,8477,4,"DEBUG_BUILD"],[7876,17,8477,15],[7876,21,8477,19,"logger"],[7876,27,8477,25],[7876,28,8477,26,"info"],[7876,32,8477,30],[7876,33,8477,31],[7876,49,8477,47],[7876,50,8477,48],[7877,4,8478,2],[7879,4,8480,2],[7880,0,8481,0],[7881,0,8482,0],[7882,0,8483,0],[7883,0,8484,0],[7884,0,8485,0],[7885,4,8486,3,"resume"],[7885,10,8486,9,"resume"],[7885,11,8486,9],[7885,13,8486,12],[7886,6,8487,4],[7886,10,8487,8],[7886,11,8487,9],[7886,15,8487,13],[7886,16,8487,14,"_isPaused"],[7886,25,8487,23],[7886,29,8487,27],[7886,30,8487,28],[7886,34,8487,32],[7886,35,8487,33,"_checkSession"],[7886,48,8487,46],[7886,49,8487,47],[7886,50,8487,48],[7886,52,8487,50],[7887,8,8488,6],[7888,6,8489,4],[7889,6,8491,4],[7889,10,8491,8],[7889,11,8491,9,"_isPaused"],[7889,20,8491,18],[7889,23,8491,21],[7889,28,8491,26],[7890,6,8492,4],[7890,10,8492,8],[7890,11,8492,9,"startRecording"],[7890,25,8492,23],[7890,26,8492,24],[7890,27,8492,25],[7891,6,8494,4,"DEBUG_BUILD"],[7891,17,8494,15],[7891,21,8494,19,"logger"],[7891,27,8494,25],[7891,28,8494,26,"info"],[7891,32,8494,30],[7891,33,8494,31],[7891,50,8494,48],[7891,51,8494,49],[7892,4,8495,2],[7894,4,8497,2],[7895,0,8498,0],[7896,0,8499,0],[7897,0,8500,0],[7898,0,8501,0],[7899,0,8502,0],[7900,0,8503,0],[7901,4,8504,3],[7901,10,8504,9,"sendBufferedReplayOrFlush"],[7901,35,8504,34,"sendBufferedReplayOrFlush"],[7901,36,8504,35],[7902,6,8504,37,"continueRecording"],[7902,23,8504,54],[7902,26,8504,57],[7903,4,8504,62],[7903,5,8504,63],[7903,8,8504,66],[7903,9,8504,67],[7903,10,8504,68],[7903,12,8504,70],[7904,6,8505,4],[7904,10,8505,8],[7904,14,8505,12],[7904,15,8505,13,"recordingMode"],[7904,28,8505,26],[7904,33,8505,31],[7904,42,8505,40],[7904,44,8505,42],[7905,8,8506,6],[7905,15,8506,13],[7905,19,8506,17],[7905,20,8506,18,"flushImmediate"],[7905,34,8506,32],[7905,35,8506,33],[7905,36,8506,34],[7906,6,8507,4],[7907,6,8509,4],[7907,12,8509,10,"activityTime"],[7907,24,8509,22],[7907,27,8509,25,"Date"],[7907,31,8509,29],[7907,32,8509,30,"now"],[7907,35,8509,33],[7907,36,8509,34],[7907,37,8509,35],[7908,6,8511,4,"DEBUG_BUILD"],[7908,17,8511,15],[7908,21,8511,19,"logger"],[7908,27,8511,25],[7908,28,8511,26,"info"],[7908,32,8511,30],[7908,33,8511,31],[7908,63,8511,61],[7908,64,8511,62],[7910,6,8513,4],[7911,6,8514,4],[7912,6,8515,4],[7913,6,8516,4],[7914,6,8517,4],[7914,12,8517,10],[7914,16,8517,14],[7914,17,8517,15,"flushImmediate"],[7914,31,8517,29],[7914,32,8517,30],[7914,33,8517,31],[7915,6,8519,4],[7915,12,8519,10,"hasStoppedRecording"],[7915,31,8519,29],[7915,34,8519,32],[7915,38,8519,36],[7915,39,8519,37,"stopRecording"],[7915,52,8519,50],[7915,53,8519,51],[7915,54,8519,52],[7916,6,8521,4],[7916,10,8521,8],[7916,11,8521,9,"continueRecording"],[7916,28,8521,26],[7916,32,8521,30],[7916,33,8521,31,"hasStoppedRecording"],[7916,52,8521,50],[7916,54,8521,52],[7917,8,8522,6],[7918,6,8523,4],[7920,6,8525,4],[7921,6,8526,4],[7921,10,8526,9],[7921,14,8526,13],[7921,15,8526,14,"recordingMode"],[7921,28,8526,27],[7921,33,8526,34],[7921,42,8526,43],[7921,44,8526,45],[7922,8,8527,6],[7923,6,8528,4],[7925,6,8530,4],[7926,6,8531,4],[7926,10,8531,8],[7926,11,8531,9,"recordingMode"],[7926,24,8531,22],[7926,27,8531,25],[7926,36,8531,34],[7928,6,8533,4],[7929,6,8534,4],[7929,10,8534,8],[7929,14,8534,12],[7929,15,8534,13,"session"],[7929,22,8534,20],[7929,24,8534,22],[7930,8,8535,6],[7930,12,8535,10],[7930,13,8535,11,"_updateUserActivity"],[7930,32,8535,30],[7930,33,8535,31,"activityTime"],[7930,45,8535,43],[7930,46,8535,44],[7931,8,8536,6],[7931,12,8536,10],[7931,13,8536,11,"_updateSessionActivity"],[7931,35,8536,33],[7931,36,8536,34,"activityTime"],[7931,48,8536,46],[7931,49,8536,47],[7932,8,8537,6],[7932,12,8537,10],[7932,13,8537,11,"_maybeSaveSession"],[7932,30,8537,28],[7932,31,8537,29],[7932,32,8537,30],[7933,6,8538,4],[7934,6,8540,4],[7934,10,8540,8],[7934,11,8540,9,"startRecording"],[7934,25,8540,23],[7934,26,8540,24],[7934,27,8540,25],[7935,4,8541,2],[7937,4,8543,2],[7938,0,8544,0],[7939,0,8545,0],[7940,0,8546,0],[7941,0,8547,0],[7942,0,8548,0],[7943,0,8549,0],[7944,0,8550,0],[7945,4,8551,3,"addUpdate"],[7945,13,8551,12,"addUpdate"],[7945,14,8551,13,"cb"],[7945,16,8551,15],[7945,18,8551,17],[7946,6,8552,4],[7947,6,8553,4],[7947,12,8553,10,"cbResult"],[7947,20,8553,18],[7947,23,8553,21,"cb"],[7947,25,8553,23],[7947,26,8553,24],[7947,27,8553,25],[7949,6,8555,4],[7950,6,8556,4],[7951,6,8557,4],[7951,10,8557,8],[7951,14,8557,12],[7951,15,8557,13,"recordingMode"],[7951,28,8557,26],[7951,33,8557,31],[7951,41,8557,39],[7951,43,8557,41],[7952,8,8558,6],[7953,6,8559,4],[7955,6,8561,4],[7956,6,8562,4],[7957,6,8563,4],[7957,10,8563,8,"cbResult"],[7957,18,8563,16],[7957,23,8563,21],[7957,27,8563,25],[7957,29,8563,27],[7958,8,8564,6],[7959,6,8565,4],[7961,6,8567,4],[7962,6,8568,4],[7963,6,8569,4],[7963,10,8569,8],[7963,11,8569,9,"_debouncedFlush"],[7963,26,8569,24],[7963,27,8569,25],[7963,28,8569,26],[7964,4,8570,2],[7966,4,8572,2],[7967,0,8573,0],[7968,0,8574,0],[7969,0,8575,0],[7970,0,8576,0],[7971,4,8577,3,"triggerUserActivity"],[7971,23,8577,22,"triggerUserActivity"],[7971,24,8577,22],[7971,26,8577,25],[7972,6,8578,4],[7972,10,8578,8],[7972,11,8578,9,"_updateUserActivity"],[7972,30,8578,28],[7972,31,8578,29],[7972,32,8578,30],[7974,6,8580,4],[7975,6,8581,4],[7976,6,8582,4],[7976,10,8582,8],[7976,11,8582,9],[7976,15,8582,13],[7976,16,8582,14,"_stopRecording"],[7976,30,8582,28],[7976,32,8582,30],[7977,8,8583,6],[7978,8,8584,6],[7979,8,8585,6],[7979,12,8585,10],[7979,13,8585,11],[7979,17,8585,15],[7979,18,8585,16,"_checkSession"],[7979,31,8585,29],[7979,32,8585,30],[7979,33,8585,31],[7979,35,8585,33],[7980,10,8586,8],[7981,8,8587,6],[7983,8,8589,6],[7984,8,8590,6],[7984,12,8590,10],[7984,13,8590,11,"resume"],[7984,19,8590,17],[7984,20,8590,18],[7984,21,8590,19],[7985,8,8591,6],[7986,6,8592,4],[7988,6,8594,4],[7989,6,8595,4],[7989,10,8595,8],[7989,11,8595,9,"checkAndHandleExpiredSession"],[7989,39,8595,37],[7989,40,8595,38],[7989,41,8595,39],[7990,6,8597,4],[7990,10,8597,8],[7990,11,8597,9,"_updateSessionActivity"],[7990,33,8597,31],[7990,34,8597,32],[7990,35,8597,33],[7991,4,8598,2],[7993,4,8600,2],[7994,0,8601,0],[7995,0,8602,0],[7996,0,8603,0],[7997,0,8604,0],[7998,0,8605,0],[7999,0,8606,0],[8000,4,8607,3,"updateUserActivity"],[8000,22,8607,21,"updateUserActivity"],[8000,23,8607,21],[8000,25,8607,24],[8001,6,8608,4],[8001,10,8608,8],[8001,11,8608,9,"_updateUserActivity"],[8001,30,8608,28],[8001,31,8608,29],[8001,32,8608,30],[8002,6,8609,4],[8002,10,8609,8],[8002,11,8609,9,"_updateSessionActivity"],[8002,33,8609,31],[8002,34,8609,32],[8002,35,8609,33],[8003,4,8610,2],[8005,4,8612,2],[8006,0,8613,0],[8007,0,8614,0],[8008,4,8615,3,"conditionalFlush"],[8008,20,8615,19,"conditionalFlush"],[8008,21,8615,19],[8008,23,8615,22],[8009,6,8616,4],[8009,10,8616,8],[8009,14,8616,12],[8009,15,8616,13,"recordingMode"],[8009,28,8616,26],[8009,33,8616,31],[8009,41,8616,39],[8009,43,8616,41],[8010,8,8617,6],[8010,15,8617,13,"Promise"],[8010,22,8617,20],[8010,23,8617,21,"resolve"],[8010,30,8617,28],[8010,31,8617,29],[8010,32,8617,30],[8011,6,8618,4],[8012,6,8620,4],[8012,13,8620,11],[8012,17,8620,15],[8012,18,8620,16,"flushImmediate"],[8012,32,8620,30],[8012,33,8620,31],[8012,34,8620,32],[8013,4,8621,2],[8015,4,8623,2],[8016,0,8624,0],[8017,0,8625,0],[8018,4,8626,3,"flush"],[8018,9,8626,8,"flush"],[8018,10,8626,8],[8018,12,8626,11],[8019,6,8627,4],[8019,13,8627,11],[8019,17,8627,15],[8019,18,8627,16,"_debouncedFlush"],[8019,33,8627,31],[8019,34,8627,32],[8019,35,8627,33],[8020,4,8628,2],[8022,4,8630,2],[8023,0,8631,0],[8024,0,8632,0],[8025,0,8633,0],[8026,0,8634,0],[8027,4,8635,3,"flushImmediate"],[8027,18,8635,17,"flushImmediate"],[8027,19,8635,17],[8027,21,8635,20],[8028,6,8636,4],[8028,10,8636,8],[8028,11,8636,9,"_debouncedFlush"],[8028,26,8636,24],[8028,27,8636,25],[8028,28,8636,26],[8029,6,8637,4],[8030,6,8638,4],[8030,13,8638,11],[8030,17,8638,15],[8030,18,8638,16,"_debouncedFlush"],[8030,33,8638,31],[8030,34,8638,32,"flush"],[8030,39,8638,37],[8030,40,8638,38],[8030,41,8638,39],[8031,4,8639,2],[8033,4,8641,2],[8034,0,8642,0],[8035,0,8643,0],[8036,4,8644,3,"cancelFlush"],[8036,15,8644,14,"cancelFlush"],[8036,16,8644,14],[8036,18,8644,17],[8037,6,8645,4],[8037,10,8645,8],[8037,11,8645,9,"_debouncedFlush"],[8037,26,8645,24],[8037,27,8645,25,"cancel"],[8037,33,8645,31],[8037,34,8645,32],[8037,35,8645,33],[8038,4,8646,2],[8040,4,8648,2],[8041,4,8649,3,"getSessionId"],[8041,16,8649,15,"getSessionId"],[8041,17,8649,15],[8041,19,8649,18],[8042,6,8650,4],[8042,13,8650,11],[8042,17,8650,15],[8042,18,8650,16,"session"],[8042,25,8650,23],[8042,29,8650,27],[8042,33,8650,31],[8042,34,8650,32,"session"],[8042,41,8650,39],[8042,42,8650,40,"id"],[8042,44,8650,42],[8043,4,8651,2],[8045,4,8653,2],[8046,0,8654,0],[8047,0,8655,0],[8048,0,8656,0],[8049,0,8657,0],[8050,0,8658,0],[8051,0,8659,0],[8052,0,8660,0],[8053,4,8661,3,"checkAndHandleExpiredSession"],[8053,32,8661,31,"checkAndHandleExpiredSession"],[8053,33,8661,31],[8053,35,8661,34],[8054,6,8662,4],[8055,6,8663,4],[8056,6,8664,4],[8057,6,8665,4],[8058,6,8666,4],[8058,10,8667,6],[8058,14,8667,10],[8058,15,8667,11,"_lastActivity"],[8058,28,8667,24],[8058,32,8668,6,"isExpired"],[8058,41,8668,15],[8058,42,8668,16],[8058,46,8668,20],[8058,47,8668,21,"_lastActivity"],[8058,60,8668,34],[8058,62,8668,36],[8058,66,8668,40],[8058,67,8668,41,"timeouts"],[8058,75,8668,49],[8058,76,8668,50,"sessionIdlePause"],[8058,92,8668,66],[8058,93,8668,67],[8058,97,8669,6],[8058,101,8669,10],[8058,102,8669,11,"session"],[8058,109,8669,18],[8058,113,8670,6],[8058,117,8670,10],[8058,118,8670,11,"session"],[8058,125,8670,18],[8058,126,8670,19,"sampled"],[8058,133,8670,26],[8058,138,8670,31],[8058,147,8670,40],[8058,149,8671,6],[8059,8,8672,6],[8060,8,8673,6],[8061,8,8674,6],[8062,8,8675,6],[8063,8,8676,6],[8063,12,8676,10],[8063,13,8676,11,"pause"],[8063,18,8676,16],[8063,19,8676,17],[8063,20,8676,18],[8064,8,8677,6],[8065,6,8678,4],[8067,6,8680,4],[8068,6,8681,4],[8069,6,8682,4],[8069,10,8682,8],[8069,11,8682,9],[8069,15,8682,13],[8069,16,8682,14,"_checkSession"],[8069,29,8682,27],[8069,30,8682,28],[8069,31,8682,29],[8069,33,8682,31],[8070,8,8683,6],[8071,8,8684,6],[8071,15,8684,13],[8071,20,8684,18],[8072,6,8685,4],[8073,6,8687,4],[8073,13,8687,11],[8073,17,8687,15],[8074,4,8688,2],[8076,4,8690,2],[8077,0,8691,0],[8078,0,8692,0],[8079,0,8693,0],[8080,0,8694,0],[8081,4,8695,3,"setInitialState"],[8081,19,8695,18,"setInitialState"],[8081,20,8695,18],[8081,22,8695,21],[8082,6,8696,4],[8082,12,8696,10,"urlPath"],[8082,19,8696,17],[8082,22,8696,20],[8082,25,8696,23,"WINDOW"],[8082,31,8696,29],[8082,32,8696,30,"location"],[8082,40,8696,38],[8082,41,8696,39,"pathname"],[8082,49,8696,47],[8082,52,8696,50,"WINDOW"],[8082,58,8696,56],[8082,59,8696,57,"location"],[8082,67,8696,65],[8082,68,8696,66,"hash"],[8082,72,8696,70],[8082,75,8696,73,"WINDOW"],[8082,81,8696,79],[8082,82,8696,80,"location"],[8082,90,8696,88],[8082,91,8696,89,"search"],[8082,97,8696,95],[8082,99,8696,97],[8083,6,8697,4],[8083,12,8697,10,"url"],[8083,15,8697,13],[8083,18,8697,16],[8083,21,8697,19,"WINDOW"],[8083,27,8697,25],[8083,28,8697,26,"location"],[8083,36,8697,34],[8083,37,8697,35,"origin"],[8083,43,8697,41],[8083,46,8697,44,"urlPath"],[8083,53,8697,51],[8083,55,8697,53],[8084,6,8699,4],[8084,10,8699,8],[8084,11,8699,9,"performanceEntries"],[8084,29,8699,27],[8084,32,8699,30],[8084,34,8699,32],[8085,6,8700,4],[8085,10,8700,8],[8085,11,8700,9,"replayPerformanceEntries"],[8085,35,8700,33],[8085,38,8700,36],[8085,40,8700,38],[8087,6,8702,4],[8088,6,8703,4],[8088,10,8703,8],[8088,11,8703,9,"_clearContext"],[8088,24,8703,22],[8088,25,8703,23],[8088,26,8703,24],[8089,6,8705,4],[8089,10,8705,8],[8089,11,8705,9,"_context"],[8089,19,8705,17],[8089,20,8705,18,"initialUrl"],[8089,30,8705,28],[8089,33,8705,31,"url"],[8089,36,8705,34],[8090,6,8706,4],[8090,10,8706,8],[8090,11,8706,9,"_context"],[8090,19,8706,17],[8090,20,8706,18,"initialTimestamp"],[8090,36,8706,34],[8090,39,8706,37,"Date"],[8090,43,8706,41],[8090,44,8706,42,"now"],[8090,47,8706,45],[8090,48,8706,46],[8090,49,8706,47],[8091,6,8707,4],[8091,10,8707,8],[8091,11,8707,9,"_context"],[8091,19,8707,17],[8091,20,8707,18,"urls"],[8091,24,8707,22],[8091,25,8707,23,"push"],[8091,29,8707,27],[8091,30,8707,28,"url"],[8091,33,8707,31],[8091,34,8707,32],[8092,4,8708,2],[8094,4,8710,2],[8095,0,8711,0],[8096,0,8712,0],[8097,0,8713,0],[8098,4,8714,3,"throttledAddEvent"],[8098,21,8714,20,"throttledAddEvent"],[8098,22,8715,4,"event"],[8098,27,8715,9],[8098,29,8716,4,"isCheckout"],[8098,39,8716,14],[8098,41,8717,4],[8099,6,8718,4],[8099,12,8718,10,"res"],[8099,15,8718,13],[8099,18,8718,16],[8099,22,8718,20],[8099,23,8718,21,"_throttledAddEvent"],[8099,41,8718,39],[8099,42,8718,40,"event"],[8099,47,8718,45],[8099,49,8718,47,"isCheckout"],[8099,59,8718,57],[8099,60,8718,58],[8101,6,8720,4],[8102,6,8721,4],[8103,6,8722,4],[8103,10,8722,8,"res"],[8103,13,8722,11],[8103,18,8722,16,"THROTTLED"],[8103,27,8722,25],[8103,29,8722,27],[8104,8,8723,6],[8104,14,8723,12,"breadcrumb"],[8104,24,8723,22],[8104,27,8723,25,"createBreadcrumb"],[8104,43,8723,41],[8104,44,8723,42],[8105,10,8724,8,"category"],[8105,18,8724,16],[8105,20,8724,18],[8106,8,8725,6],[8106,9,8725,7],[8106,10,8725,8],[8107,8,8727,6],[8107,12,8727,10],[8107,13,8727,11,"addUpdate"],[8107,22,8727,20],[8107,23,8727,21],[8107,29,8727,27],[8108,10,8728,8],[8109,10,8729,8],[8109,17,8729,15],[8109,18,8729,16,"addEventSync"],[8109,30,8729,28],[8109,31,8729,29],[8109,35,8729,33],[8109,37,8729,35],[8110,12,8730,10,"type"],[8110,16,8730,14],[8110,18,8730,16,"ReplayEventTypeCustom"],[8110,39,8730,37],[8111,12,8731,10,"timestamp"],[8111,21,8731,19],[8111,23,8731,21,"breadcrumb"],[8111,33,8731,31],[8111,34,8731,32,"timestamp"],[8111,43,8731,41],[8111,47,8731,45],[8111,48,8731,46],[8112,12,8732,10,"data"],[8112,16,8732,14],[8112,18,8732,16],[8113,14,8733,12,"tag"],[8113,17,8733,15],[8113,19,8733,17],[8113,31,8733,29],[8114,14,8734,12,"payload"],[8114,21,8734,19],[8114,23,8734,21,"breadcrumb"],[8114,33,8734,31],[8115,14,8735,12,"metric"],[8115,20,8735,18],[8115,22,8735,20],[8116,12,8736,10],[8117,10,8737,8],[8117,11,8737,9],[8117,12,8737,10],[8118,8,8738,6],[8118,9,8738,7],[8118,10,8738,8],[8119,6,8739,4],[8120,6,8741,4],[8120,13,8741,11,"res"],[8120,16,8741,14],[8121,4,8742,2],[8123,4,8744,2],[8124,0,8745,0],[8125,0,8746,0],[8126,0,8747,0],[8127,4,8748,3,"getCurrentRoute"],[8127,19,8748,18,"getCurrentRoute"],[8127,20,8748,18],[8127,22,8748,21],[8128,6,8749,4],[8128,12,8749,10,"lastActiveSpan"],[8128,26,8749,24],[8128,29,8749,27],[8128,33,8749,31],[8128,34,8749,32,"lastActiveSpan"],[8128,48,8749,46],[8128,52,8749,50],[8128,56,8749,50,"getActiveSpan"],[8128,75,8749,63],[8128,77,8749,64],[8128,78,8749,65],[8129,6,8750,4],[8129,12,8750,10,"lastRootSpan"],[8129,24,8750,22],[8129,27,8750,25,"lastActiveSpan"],[8129,41,8750,39],[8129,45,8750,43],[8129,49,8750,43,"getRootSpan"],[8129,66,8750,54],[8129,68,8750,55,"lastActiveSpan"],[8129,82,8750,69],[8129,83,8750,70],[8130,6,8752,4],[8130,12,8752,10,"attributes"],[8130,22,8752,20],[8130,25,8752,24,"lastRootSpan"],[8130,37,8752,36],[8130,41,8752,40],[8130,45,8752,40,"spanToJSON"],[8130,61,8752,50],[8130,63,8752,51,"lastRootSpan"],[8130,75,8752,63],[8130,76,8752,64],[8130,77,8752,65,"data"],[8130,81,8752,69],[8130,85,8752,74],[8130,86,8752,75],[8130,87,8752,76],[8131,6,8753,4],[8131,12,8753,10,"source"],[8131,18,8753,16],[8131,21,8753,19,"attributes"],[8131,31,8753,29],[8131,32,8753,30,"SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],[8131,70,8753,62],[8131,71,8753,63],[8132,6,8754,4],[8132,10,8754,8],[8132,11,8754,9,"lastRootSpan"],[8132,23,8754,21],[8132,27,8754,25],[8132,28,8754,26,"source"],[8132,34,8754,32],[8132,38,8754,36],[8132,39,8754,37],[8132,40,8754,38],[8132,47,8754,45],[8132,49,8754,47],[8132,57,8754,55],[8132,58,8754,56],[8132,59,8754,57,"includes"],[8132,67,8754,65],[8132,68,8754,66,"source"],[8132,74,8754,72],[8132,75,8754,73],[8132,77,8754,75],[8133,8,8755,6],[8133,15,8755,13,"undefined"],[8133,24,8755,22],[8134,6,8756,4],[8135,6,8758,4],[8135,13,8758,11],[8135,17,8758,11,"spanToJSON"],[8135,33,8758,21],[8135,35,8758,22,"lastRootSpan"],[8135,47,8758,34],[8135,48,8758,35],[8135,49,8758,36,"description"],[8135,60,8758,47],[8136,4,8759,2],[8138,4,8761,2],[8139,0,8762,0],[8140,0,8763,0],[8141,0,8764,0],[8142,4,8765,3,"_initializeRecording"],[8142,24,8765,23,"_initializeRecording"],[8142,25,8765,23],[8142,27,8765,26],[8143,6,8766,4],[8143,10,8766,8],[8143,11,8766,9,"setInitialState"],[8143,26,8766,24],[8143,27,8766,25],[8143,28,8766,26],[8145,6,8768,4],[8146,6,8769,4],[8147,6,8770,4],[8147,10,8770,8],[8147,11,8770,9,"_updateSessionActivity"],[8147,33,8770,31],[8147,34,8770,32],[8147,35,8770,33],[8148,6,8772,4],[8148,10,8772,8],[8148,11,8772,9,"eventBuffer"],[8148,22,8772,20],[8148,25,8772,23,"createEventBuffer"],[8148,42,8772,40],[8148,43,8772,41],[8149,8,8773,6,"useCompression"],[8149,22,8773,20],[8149,24,8773,22],[8149,28,8773,26],[8149,29,8773,27,"_options"],[8149,37,8773,35],[8149,38,8773,36,"useCompression"],[8149,52,8773,50],[8150,8,8774,6,"workerUrl"],[8150,17,8774,15],[8150,19,8774,17],[8150,23,8774,21],[8150,24,8774,22,"_options"],[8150,32,8774,30],[8150,33,8774,31,"workerUrl"],[8151,6,8775,4],[8151,7,8775,5],[8151,8,8775,6],[8152,6,8777,4],[8152,10,8777,8],[8152,11,8777,9,"_removeListeners"],[8152,27,8777,25],[8152,28,8777,26],[8152,29,8777,27],[8153,6,8778,4],[8153,10,8778,8],[8153,11,8778,9,"_addListeners"],[8153,24,8778,22],[8153,25,8778,23],[8153,26,8778,24],[8155,6,8780,4],[8156,6,8781,4],[8156,10,8781,8],[8156,11,8781,9,"_isEnabled"],[8156,21,8781,19],[8156,24,8781,22],[8156,28,8781,26],[8157,6,8782,4],[8157,10,8782,8],[8157,11,8782,9,"_isPaused"],[8157,20,8782,18],[8157,23,8782,21],[8157,28,8782,26],[8158,6,8784,4],[8158,10,8784,8],[8158,11,8784,9,"startRecording"],[8158,25,8784,23],[8158,26,8784,24],[8158,27,8784,25],[8159,4,8785,2],[8161,4,8787,2],[8162,0,8788,0],[8163,0,8789,0],[8164,4,8790,3,"_initializeSessionForSampling"],[8164,33,8790,32,"_initializeSessionForSampling"],[8164,34,8790,33,"previousSessionId"],[8164,51,8790,50],[8164,53,8790,52],[8165,6,8791,4],[8166,6,8792,4],[8167,6,8793,4],[8167,12,8793,10,"allowBuffering"],[8167,26,8793,24],[8167,29,8793,27],[8167,33,8793,31],[8167,34,8793,32,"_options"],[8167,42,8793,40],[8167,43,8793,41,"errorSampleRate"],[8167,58,8793,56],[8167,61,8793,59],[8167,62,8793,60],[8168,6,8795,4],[8168,12,8795,10,"session"],[8168,19,8795,17],[8168,22,8795,20,"loadOrCreateSession"],[8168,41,8795,39],[8168,42,8796,6],[8169,8,8797,8,"sessionIdleExpire"],[8169,25,8797,25],[8169,27,8797,27],[8169,31,8797,31],[8169,32,8797,32,"timeouts"],[8169,40,8797,40],[8169,41,8797,41,"sessionIdleExpire"],[8169,58,8797,58],[8170,8,8798,8,"maxReplayDuration"],[8170,25,8798,25],[8170,27,8798,27],[8170,31,8798,31],[8170,32,8798,32,"_options"],[8170,40,8798,40],[8170,41,8798,41,"maxReplayDuration"],[8170,58,8798,58],[8171,8,8799,8,"previousSessionId"],[8172,6,8800,6],[8172,7,8800,7],[8172,9,8801,6],[8173,8,8802,8,"stickySession"],[8173,21,8802,21],[8173,23,8802,23],[8173,27,8802,27],[8173,28,8802,28,"_options"],[8173,36,8802,36],[8173,37,8802,37,"stickySession"],[8173,50,8802,50],[8174,8,8803,8,"sessionSampleRate"],[8174,25,8803,25],[8174,27,8803,27],[8174,31,8803,31],[8174,32,8803,32,"_options"],[8174,40,8803,40],[8174,41,8803,41,"sessionSampleRate"],[8174,58,8803,58],[8175,8,8804,8,"allowBuffering"],[8176,6,8805,6],[8176,7,8806,4],[8176,8,8806,5],[8177,6,8808,4],[8177,10,8808,8],[8177,11,8808,9,"session"],[8177,18,8808,16],[8177,21,8808,19,"session"],[8177,28,8808,26],[8178,4,8809,2],[8180,4,8811,2],[8181,0,8812,0],[8182,0,8813,0],[8183,0,8814,0],[8184,4,8815,3,"_checkSession"],[8184,17,8815,16,"_checkSession"],[8184,18,8815,16],[8184,20,8815,19],[8185,6,8816,4],[8186,6,8817,4],[8187,6,8818,4],[8187,10,8818,8],[8187,11,8818,9],[8187,15,8818,13],[8187,16,8818,14,"session"],[8187,23,8818,21],[8187,25,8818,23],[8188,8,8819,6],[8188,15,8819,13],[8188,20,8819,18],[8189,6,8820,4],[8190,6,8822,4],[8190,12,8822,10,"currentSession"],[8190,26,8822,24],[8190,29,8822,27],[8190,33,8822,31],[8190,34,8822,32,"session"],[8190,41,8822,39],[8191,6,8824,4],[8191,10,8825,6,"shouldRefreshSession"],[8191,30,8825,26],[8191,31,8825,27,"currentSession"],[8191,45,8825,41],[8191,47,8825,43],[8192,8,8826,8,"sessionIdleExpire"],[8192,25,8826,25],[8192,27,8826,27],[8192,31,8826,31],[8192,32,8826,32,"timeouts"],[8192,40,8826,40],[8192,41,8826,41,"sessionIdleExpire"],[8192,58,8826,58],[8193,8,8827,8,"maxReplayDuration"],[8193,25,8827,25],[8193,27,8827,27],[8193,31,8827,31],[8193,32,8827,32,"_options"],[8193,40,8827,40],[8193,41,8827,41,"maxReplayDuration"],[8194,6,8828,6],[8194,7,8828,7],[8194,8,8828,8],[8194,10,8829,6],[8195,8,8830,6],[8196,8,8831,6],[8197,8,8832,6],[8197,12,8832,10],[8197,13,8832,11,"_refreshSession"],[8197,28,8832,26],[8197,29,8832,27,"currentSession"],[8197,43,8832,41],[8197,44,8832,42],[8198,8,8833,6],[8198,15,8833,13],[8198,20,8833,18],[8199,6,8834,4],[8200,6,8836,4],[8200,13,8836,11],[8200,17,8836,15],[8201,4,8837,2],[8203,4,8839,2],[8204,0,8840,0],[8205,0,8841,0],[8206,0,8842,0],[8207,0,8843,0],[8208,4,8844,3],[8208,10,8844,9,"_refreshSession"],[8208,25,8844,24,"_refreshSession"],[8208,26,8844,25,"session"],[8208,33,8844,32],[8208,35,8844,34],[8209,6,8845,4],[8209,10,8845,8],[8209,11,8845,9],[8209,15,8845,13],[8209,16,8845,14,"_isEnabled"],[8209,26,8845,24],[8209,28,8845,26],[8210,8,8846,6],[8211,6,8847,4],[8212,6,8848,4],[8212,12,8848,10],[8212,16,8848,14],[8212,17,8848,15,"stop"],[8212,21,8848,19],[8212,22,8848,20],[8213,8,8848,22,"reason"],[8213,14,8848,28],[8213,16,8848,30],[8214,6,8848,48],[8214,7,8848,49],[8214,8,8848,50],[8215,6,8849,4],[8215,10,8849,8],[8215,11,8849,9,"initializeSampling"],[8215,29,8849,27],[8215,30,8849,28,"session"],[8215,37,8849,35],[8215,38,8849,36,"id"],[8215,40,8849,38],[8215,41,8849,39],[8216,4,8850,2],[8218,4,8852,2],[8219,0,8853,0],[8220,0,8854,0],[8221,4,8855,3,"_addListeners"],[8221,17,8855,16,"_addListeners"],[8221,18,8855,16],[8221,20,8855,19],[8222,6,8856,4],[8222,10,8856,8],[8223,8,8857,6,"WINDOW"],[8223,14,8857,12],[8223,15,8857,13,"document"],[8223,23,8857,21],[8223,24,8857,22,"addEventListener"],[8223,40,8857,38],[8223,41,8857,39],[8223,59,8857,57],[8223,61,8857,59],[8223,65,8857,63],[8223,66,8857,64,"_handleVisibilityChange"],[8223,89,8857,87],[8223,90,8857,88],[8224,8,8858,6,"WINDOW"],[8224,14,8858,12],[8224,15,8858,13,"addEventListener"],[8224,31,8858,29],[8224,32,8858,30],[8224,38,8858,36],[8224,40,8858,38],[8224,44,8858,42],[8224,45,8858,43,"_handleWindowBlur"],[8224,62,8858,60],[8224,63,8858,61],[8225,8,8859,6,"WINDOW"],[8225,14,8859,12],[8225,15,8859,13,"addEventListener"],[8225,31,8859,29],[8225,32,8859,30],[8225,39,8859,37],[8225,41,8859,39],[8225,45,8859,43],[8225,46,8859,44,"_handleWindowFocus"],[8225,64,8859,62],[8225,65,8859,63],[8226,8,8860,6,"WINDOW"],[8226,14,8860,12],[8226,15,8860,13,"addEventListener"],[8226,31,8860,29],[8226,32,8860,30],[8226,41,8860,39],[8226,43,8860,41],[8226,47,8860,45],[8226,48,8860,46,"_handleKeyboardEvent"],[8226,68,8860,66],[8226,69,8860,67],[8227,8,8862,6],[8227,12,8862,10],[8227,16,8862,14],[8227,17,8862,15,"clickDetector"],[8227,30,8862,28],[8227,32,8862,30],[8228,10,8863,8],[8228,14,8863,12],[8228,15,8863,13,"clickDetector"],[8228,28,8863,26],[8228,29,8863,27,"addListeners"],[8228,41,8863,39],[8228,42,8863,40],[8228,43,8863,41],[8229,8,8864,6],[8231,8,8866,6],[8232,8,8867,6],[8232,12,8867,10],[8232,13,8867,11],[8232,17,8867,15],[8232,18,8867,16,"_hasInitializedCoreListeners"],[8232,46,8867,44],[8232,48,8867,46],[8233,10,8868,8,"addGlobalListeners"],[8233,28,8868,26],[8233,29,8868,27],[8233,33,8868,31],[8233,34,8868,32],[8234,10,8870,8],[8234,14,8870,12],[8234,15,8870,13,"_hasInitializedCoreListeners"],[8234,43,8870,41],[8234,46,8870,44],[8234,50,8870,48],[8235,8,8871,6],[8236,6,8872,4],[8236,7,8872,5],[8236,8,8872,6],[8236,15,8872,13,"err"],[8236,18,8872,16],[8236,20,8872,18],[8237,8,8873,6],[8237,12,8873,10],[8237,13,8873,11,"handleException"],[8237,28,8873,26],[8237,29,8873,27,"err"],[8237,32,8873,30],[8237,33,8873,31],[8238,6,8874,4],[8239,6,8876,4],[8239,10,8876,8],[8239,11,8876,9,"_performanceCleanupCallback"],[8239,38,8876,36],[8239,41,8876,39,"setupPerformanceObserver"],[8239,65,8876,63],[8239,66,8876,64],[8239,70,8876,68],[8239,71,8876,69],[8240,4,8877,2],[8242,4,8879,2],[8243,0,8880,0],[8244,0,8881,0],[8245,4,8882,3,"_removeListeners"],[8245,20,8882,19,"_removeListeners"],[8245,21,8882,19],[8245,23,8882,22],[8246,6,8883,4],[8246,10,8883,8],[8247,8,8884,6,"WINDOW"],[8247,14,8884,12],[8247,15,8884,13,"document"],[8247,23,8884,21],[8247,24,8884,22,"removeEventListener"],[8247,43,8884,41],[8247,44,8884,42],[8247,62,8884,60],[8247,64,8884,62],[8247,68,8884,66],[8247,69,8884,67,"_handleVisibilityChange"],[8247,92,8884,90],[8247,93,8884,91],[8248,8,8886,6,"WINDOW"],[8248,14,8886,12],[8248,15,8886,13,"removeEventListener"],[8248,34,8886,32],[8248,35,8886,33],[8248,41,8886,39],[8248,43,8886,41],[8248,47,8886,45],[8248,48,8886,46,"_handleWindowBlur"],[8248,65,8886,63],[8248,66,8886,64],[8249,8,8887,6,"WINDOW"],[8249,14,8887,12],[8249,15,8887,13,"removeEventListener"],[8249,34,8887,32],[8249,35,8887,33],[8249,42,8887,40],[8249,44,8887,42],[8249,48,8887,46],[8249,49,8887,47,"_handleWindowFocus"],[8249,67,8887,65],[8249,68,8887,66],[8250,8,8888,6,"WINDOW"],[8250,14,8888,12],[8250,15,8888,13,"removeEventListener"],[8250,34,8888,32],[8250,35,8888,33],[8250,44,8888,42],[8250,46,8888,44],[8250,50,8888,48],[8250,51,8888,49,"_handleKeyboardEvent"],[8250,71,8888,69],[8250,72,8888,70],[8251,8,8890,6],[8251,12,8890,10],[8251,16,8890,14],[8251,17,8890,15,"clickDetector"],[8251,30,8890,28],[8251,32,8890,30],[8252,10,8891,8],[8252,14,8891,12],[8252,15,8891,13,"clickDetector"],[8252,28,8891,26],[8252,29,8891,27,"removeListeners"],[8252,44,8891,42],[8252,45,8891,43],[8252,46,8891,44],[8253,8,8892,6],[8254,8,8894,6],[8254,12,8894,10],[8254,16,8894,14],[8254,17,8894,15,"_performanceCleanupCallback"],[8254,44,8894,42],[8254,46,8894,44],[8255,10,8895,8],[8255,14,8895,12],[8255,15,8895,13,"_performanceCleanupCallback"],[8255,42,8895,40],[8255,43,8895,41],[8255,44,8895,42],[8256,8,8896,6],[8257,6,8897,4],[8257,7,8897,5],[8257,8,8897,6],[8257,15,8897,13,"err"],[8257,18,8897,16],[8257,20,8897,18],[8258,8,8898,6],[8258,12,8898,10],[8258,13,8898,11,"handleException"],[8258,28,8898,26],[8258,29,8898,27,"err"],[8258,32,8898,30],[8258,33,8898,31],[8259,6,8899,4],[8260,4,8900,2],[8262,4,8902,2],[8263,0,8903,0],[8264,0,8904,0],[8265,0,8905,0],[8266,0,8906,0],[8267,0,8907,0],[8268,4,8908,3,"__init"],[8268,10,8908,9,"__init"],[8268,11,8908,9],[8268,13,8908,12],[8269,6,8908,13],[8269,10,8908,17],[8269,11,8908,18,"_handleVisibilityChange"],[8269,34,8908,41],[8269,37,8908,44],[8269,43,8908,50],[8270,8,8909,4],[8270,12,8909,8,"WINDOW"],[8270,18,8909,14],[8270,19,8909,15,"document"],[8270,27,8909,23],[8270,28,8909,24,"visibilityState"],[8270,43,8909,39],[8270,48,8909,44],[8270,57,8909,53],[8270,59,8909,55],[8271,10,8910,6],[8271,14,8910,10],[8271,15,8910,11,"_doChangeToForegroundTasks"],[8271,41,8910,37],[8271,42,8910,38],[8271,43,8910,39],[8272,8,8911,4],[8272,9,8911,5],[8272,15,8911,11],[8273,10,8912,6],[8273,14,8912,10],[8273,15,8912,11,"_doChangeToBackgroundTasks"],[8273,41,8912,37],[8273,42,8912,38],[8273,43,8912,39],[8274,8,8913,4],[8275,6,8914,2],[8275,7,8914,3],[8276,4,8914,4],[8278,4,8916,2],[8279,0,8917,0],[8280,0,8918,0],[8281,4,8919,3,"__init2"],[8281,11,8919,10,"__init2"],[8281,12,8919,10],[8281,14,8919,13],[8282,6,8919,14],[8282,10,8919,18],[8282,11,8919,19,"_handleWindowBlur"],[8282,28,8919,36],[8282,31,8919,39],[8282,37,8919,45],[8283,8,8920,4],[8283,14,8920,10,"breadcrumb"],[8283,24,8920,20],[8283,27,8920,23,"createBreadcrumb"],[8283,43,8920,39],[8283,44,8920,40],[8284,10,8921,6,"category"],[8284,18,8921,14],[8284,20,8921,16],[8285,8,8922,4],[8285,9,8922,5],[8285,10,8922,6],[8287,8,8924,4],[8288,8,8925,4],[8289,8,8926,4],[8289,12,8926,8],[8289,13,8926,9,"_doChangeToBackgroundTasks"],[8289,39,8926,35],[8289,40,8926,36,"breadcrumb"],[8289,50,8926,46],[8289,51,8926,47],[8290,6,8927,2],[8290,7,8927,3],[8291,4,8927,4],[8293,4,8929,2],[8294,0,8930,0],[8295,0,8931,0],[8296,4,8932,3,"__init3"],[8296,11,8932,10,"__init3"],[8296,12,8932,10],[8296,14,8932,13],[8297,6,8932,14],[8297,10,8932,18],[8297,11,8932,19,"_handleWindowFocus"],[8297,29,8932,37],[8297,32,8932,40],[8297,38,8932,46],[8298,8,8933,4],[8298,14,8933,10,"breadcrumb"],[8298,24,8933,20],[8298,27,8933,23,"createBreadcrumb"],[8298,43,8933,39],[8298,44,8933,40],[8299,10,8934,6,"category"],[8299,18,8934,14],[8299,20,8934,16],[8300,8,8935,4],[8300,9,8935,5],[8300,10,8935,6],[8302,8,8937,4],[8303,8,8938,4],[8304,8,8939,4],[8304,12,8939,8],[8304,13,8939,9,"_doChangeToForegroundTasks"],[8304,39,8939,35],[8304,40,8939,36,"breadcrumb"],[8304,50,8939,46],[8304,51,8939,47],[8305,6,8940,2],[8305,7,8940,3],[8306,4,8940,4],[8308,4,8942,2],[8309,4,8943,3,"__init4"],[8309,11,8943,10,"__init4"],[8309,12,8943,10],[8309,14,8943,13],[8310,6,8943,14],[8310,10,8943,18],[8310,11,8943,19,"_handleKeyboardEvent"],[8310,31,8943,39],[8310,34,8943,43,"event"],[8310,39,8943,48],[8310,43,8943,53],[8311,8,8944,4,"handleKeyboardEvent"],[8311,27,8944,23],[8311,28,8944,24],[8311,32,8944,28],[8311,34,8944,30,"event"],[8311,39,8944,35],[8311,40,8944,36],[8312,6,8945,2],[8312,7,8945,3],[8313,4,8945,4],[8315,4,8947,2],[8316,0,8948,0],[8317,0,8949,0],[8318,4,8950,3,"_doChangeToBackgroundTasks"],[8318,30,8950,29,"_doChangeToBackgroundTasks"],[8318,31,8950,30,"breadcrumb"],[8318,41,8950,40],[8318,43,8950,42],[8319,6,8951,4],[8319,10,8951,8],[8319,11,8951,9],[8319,15,8951,13],[8319,16,8951,14,"session"],[8319,23,8951,21],[8319,25,8951,23],[8320,8,8952,6],[8321,6,8953,4],[8322,6,8955,4],[8322,12,8955,10,"expired"],[8322,19,8955,17],[8322,22,8955,20,"isSessionExpired"],[8322,38,8955,36],[8322,39,8955,37],[8322,43,8955,41],[8322,44,8955,42,"session"],[8322,51,8955,49],[8322,53,8955,51],[8323,8,8956,6,"maxReplayDuration"],[8323,25,8956,23],[8323,27,8956,25],[8323,31,8956,29],[8323,32,8956,30,"_options"],[8323,40,8956,38],[8323,41,8956,39,"maxReplayDuration"],[8323,58,8956,56],[8324,8,8957,6,"sessionIdleExpire"],[8324,25,8957,23],[8324,27,8957,25],[8324,31,8957,29],[8324,32,8957,30,"timeouts"],[8324,40,8957,38],[8324,41,8957,39,"sessionIdleExpire"],[8325,6,8958,4],[8325,7,8958,5],[8325,8,8958,6],[8326,6,8960,4],[8326,10,8960,8,"expired"],[8326,17,8960,15],[8326,19,8960,17],[8327,8,8961,6],[8328,6,8962,4],[8329,6,8964,4],[8329,10,8964,8,"breadcrumb"],[8329,20,8964,18],[8329,22,8964,20],[8330,8,8965,6],[8330,12,8965,10],[8330,13,8965,11,"_createCustomBreadcrumb"],[8330,36,8965,34],[8330,37,8965,35,"breadcrumb"],[8330,47,8965,45],[8330,48,8965,46],[8331,6,8966,4],[8333,6,8968,4],[8334,6,8969,4],[8335,6,8970,4],[8336,6,8971,4],[8337,6,8972,4],[8338,6,8973,4],[8338,11,8973,9],[8338,15,8973,13],[8338,16,8973,14,"conditionalFlush"],[8338,32,8973,30],[8338,33,8973,31],[8338,34,8973,32],[8339,4,8974,2],[8341,4,8976,2],[8342,0,8977,0],[8343,0,8978,0],[8344,4,8979,3,"_doChangeToForegroundTasks"],[8344,30,8979,29,"_doChangeToForegroundTasks"],[8344,31,8979,30,"breadcrumb"],[8344,41,8979,40],[8344,43,8979,42],[8345,6,8980,4],[8345,10,8980,8],[8345,11,8980,9],[8345,15,8980,13],[8345,16,8980,14,"session"],[8345,23,8980,21],[8345,25,8980,23],[8346,8,8981,6],[8347,6,8982,4],[8348,6,8984,4],[8348,12,8984,10,"isSessionActive"],[8348,27,8984,25],[8348,30,8984,28],[8348,34,8984,32],[8348,35,8984,33,"checkAndHandleExpiredSession"],[8348,63,8984,61],[8348,64,8984,62],[8348,65,8984,63],[8349,6,8986,4],[8349,10,8986,8],[8349,11,8986,9,"isSessionActive"],[8349,26,8986,24],[8349,28,8986,26],[8350,8,8987,6],[8351,8,8988,6],[8352,8,8989,6],[8353,8,8990,6,"DEBUG_BUILD"],[8353,19,8990,17],[8353,23,8990,21,"logger"],[8353,29,8990,27],[8353,30,8990,28,"info"],[8353,34,8990,32],[8353,35,8990,33],[8353,88,8990,86],[8353,89,8990,87],[8354,8,8991,6],[8355,6,8992,4],[8356,6,8994,4],[8356,10,8994,8,"breadcrumb"],[8356,20,8994,18],[8356,22,8994,20],[8357,8,8995,6],[8357,12,8995,10],[8357,13,8995,11,"_createCustomBreadcrumb"],[8357,36,8995,34],[8357,37,8995,35,"breadcrumb"],[8357,47,8995,45],[8357,48,8995,46],[8358,6,8996,4],[8359,4,8997,2],[8361,4,8999,2],[8362,0,9000,0],[8363,0,9001,0],[8364,4,9002,3,"_updateUserActivity"],[8364,23,9002,22,"_updateUserActivity"],[8364,24,9002,23,"_lastActivity"],[8364,37,9002,36],[8364,40,9002,39,"Date"],[8364,44,9002,43],[8364,45,9002,44,"now"],[8364,48,9002,47],[8364,49,9002,48],[8364,50,9002,49],[8364,52,9002,51],[8365,6,9003,4],[8365,10,9003,8],[8365,11,9003,9,"_lastActivity"],[8365,24,9003,22],[8365,27,9003,25,"_lastActivity"],[8365,40,9003,38],[8366,4,9004,2],[8368,4,9006,2],[8369,0,9007,0],[8370,0,9008,0],[8371,4,9009,3,"_updateSessionActivity"],[8371,26,9009,25,"_updateSessionActivity"],[8371,27,9009,26,"_lastActivity"],[8371,40,9009,39],[8371,43,9009,42,"Date"],[8371,47,9009,46],[8371,48,9009,47,"now"],[8371,51,9009,50],[8371,52,9009,51],[8371,53,9009,52],[8371,55,9009,54],[8372,6,9010,4],[8372,10,9010,8],[8372,14,9010,12],[8372,15,9010,13,"session"],[8372,22,9010,20],[8372,24,9010,22],[8373,8,9011,6],[8373,12,9011,10],[8373,13,9011,11,"session"],[8373,20,9011,18],[8373,21,9011,19,"lastActivity"],[8373,33,9011,31],[8373,36,9011,34,"_lastActivity"],[8373,49,9011,47],[8374,8,9012,6],[8374,12,9012,10],[8374,13,9012,11,"_maybeSaveSession"],[8374,30,9012,28],[8374,31,9012,29],[8374,32,9012,30],[8375,6,9013,4],[8376,4,9014,2],[8378,4,9016,2],[8379,0,9017,0],[8380,0,9018,0],[8381,4,9019,3,"_createCustomBreadcrumb"],[8381,27,9019,26,"_createCustomBreadcrumb"],[8381,28,9019,27,"breadcrumb"],[8381,38,9019,37],[8381,40,9019,39],[8382,6,9020,4],[8382,10,9020,8],[8382,11,9020,9,"addUpdate"],[8382,20,9020,18],[8382,21,9020,19],[8382,27,9020,25],[8383,8,9021,6],[8384,8,9022,6],[8385,8,9023,6],[8385,12,9023,10],[8385,13,9023,11,"throttledAddEvent"],[8385,30,9023,28],[8385,31,9023,29],[8386,10,9024,8,"type"],[8386,14,9024,12],[8386,16,9024,14,"EventType"],[8386,25,9024,23],[8386,26,9024,24,"Custom"],[8386,32,9024,30],[8387,10,9025,8,"timestamp"],[8387,19,9025,17],[8387,21,9025,19,"breadcrumb"],[8387,31,9025,29],[8387,32,9025,30,"timestamp"],[8387,41,9025,39],[8387,45,9025,43],[8387,46,9025,44],[8388,10,9026,8,"data"],[8388,14,9026,12],[8388,16,9026,14],[8389,12,9027,10,"tag"],[8389,15,9027,13],[8389,17,9027,15],[8389,29,9027,27],[8390,12,9028,10,"payload"],[8390,19,9028,17],[8390,21,9028,19,"breadcrumb"],[8391,10,9029,8],[8392,8,9030,6],[8392,9,9030,7],[8392,10,9030,8],[8393,6,9031,4],[8393,7,9031,5],[8393,8,9031,6],[8394,4,9032,2],[8396,4,9034,2],[8397,0,9035,0],[8398,0,9036,0],[8399,0,9037,0],[8400,4,9038,3,"_addPerformanceEntries"],[8400,26,9038,25,"_addPerformanceEntries"],[8400,27,9038,25],[8400,29,9038,28],[8401,6,9039,4],[8401,10,9039,8,"performanceEntries"],[8401,28,9039,26],[8401,31,9039,29,"createPerformanceEntries"],[8401,55,9039,53],[8401,56,9039,54],[8401,60,9039,58],[8401,61,9039,59,"performanceEntries"],[8401,79,9039,77],[8401,80,9039,78],[8401,81,9039,79,"concat"],[8401,87,9039,85],[8401,88,9039,86],[8401,92,9039,90],[8401,93,9039,91,"replayPerformanceEntries"],[8401,117,9039,115],[8401,118,9039,116],[8402,6,9041,4],[8402,10,9041,8],[8402,11,9041,9,"performanceEntries"],[8402,29,9041,27],[8402,32,9041,30],[8402,34,9041,32],[8403,6,9042,4],[8403,10,9042,8],[8403,11,9042,9,"replayPerformanceEntries"],[8403,35,9042,33],[8403,38,9042,36],[8403,40,9042,38],[8405,6,9044,4],[8406,6,9045,4],[8407,6,9046,4],[8408,6,9047,4],[8409,6,9048,4],[8410,6,9049,4],[8411,6,9050,4],[8411,10,9050,8],[8411,14,9050,12],[8411,15,9050,13,"_requiresManualStart"],[8411,35,9050,33],[8411,37,9050,35],[8412,8,9051,6],[8412,14,9051,12,"initialTimestampInSeconds"],[8412,39,9051,37],[8412,42,9051,40],[8412,46,9051,44],[8412,47,9051,45,"_context"],[8412,55,9051,53],[8412,56,9051,54,"initialTimestamp"],[8412,72,9051,70],[8412,75,9051,73],[8412,79,9051,77],[8413,8,9052,6,"performanceEntries"],[8413,26,9052,24],[8413,29,9052,27,"performanceEntries"],[8413,47,9052,45],[8413,48,9052,46,"filter"],[8413,54,9052,52],[8413,55,9052,53,"entry"],[8413,60,9052,58],[8413,64,9052,62,"entry"],[8413,69,9052,67],[8413,70,9052,68,"start"],[8413,75,9052,73],[8413,79,9052,77,"initialTimestampInSeconds"],[8413,104,9052,102],[8413,105,9052,103],[8414,6,9053,4],[8415,6,9055,4],[8415,13,9055,11,"Promise"],[8415,20,9055,18],[8415,21,9055,19,"all"],[8415,24,9055,22],[8415,25,9055,23,"createPerformanceSpans"],[8415,47,9055,45],[8415,48,9055,46],[8415,52,9055,50],[8415,54,9055,52,"performanceEntries"],[8415,72,9055,70],[8415,73,9055,71],[8415,74,9055,72],[8416,4,9056,2],[8418,4,9058,2],[8419,0,9059,0],[8420,0,9060,0],[8421,4,9061,3,"_clearContext"],[8421,17,9061,16,"_clearContext"],[8421,18,9061,16],[8421,20,9061,19],[8422,6,9062,4],[8423,6,9063,4],[8423,10,9063,8],[8423,11,9063,9,"_context"],[8423,19,9063,17],[8423,20,9063,18,"errorIds"],[8423,28,9063,26],[8423,29,9063,27,"clear"],[8423,34,9063,32],[8423,35,9063,33],[8423,36,9063,34],[8424,6,9064,4],[8424,10,9064,8],[8424,11,9064,9,"_context"],[8424,19,9064,17],[8424,20,9064,18,"traceIds"],[8424,28,9064,26],[8424,29,9064,27,"clear"],[8424,34,9064,32],[8424,35,9064,33],[8424,36,9064,34],[8425,6,9065,4],[8425,10,9065,8],[8425,11,9065,9,"_context"],[8425,19,9065,17],[8425,20,9065,18,"urls"],[8425,24,9065,22],[8425,27,9065,25],[8425,29,9065,27],[8426,4,9066,2],[8428,4,9068,2],[8429,4,9069,3,"_updateInitialTimestampFromEventBuffer"],[8429,42,9069,41,"_updateInitialTimestampFromEventBuffer"],[8429,43,9069,41],[8429,45,9069,44],[8430,6,9070,4],[8430,12,9070,10],[8431,8,9070,12,"session"],[8431,15,9070,19],[8432,8,9070,21,"eventBuffer"],[8433,6,9070,33],[8433,7,9070,34],[8433,10,9070,37],[8433,14,9070,41],[8434,6,9071,4],[8435,6,9072,4],[8436,6,9073,4],[8436,10,9073,8],[8436,11,9073,9,"session"],[8436,18,9073,16],[8436,22,9073,20],[8436,23,9073,21,"eventBuffer"],[8436,34,9073,32],[8436,38,9073,36],[8436,42,9073,40],[8436,43,9073,41,"_requiresManualStart"],[8436,63,9073,61],[8436,65,9073,63],[8437,8,9074,6],[8438,6,9075,4],[8440,6,9077,4],[8441,6,9078,4],[8441,10,9078,8,"session"],[8441,17,9078,15],[8441,18,9078,16,"segmentId"],[8441,27,9078,25],[8441,29,9078,27],[8442,8,9079,6],[8443,6,9080,4],[8444,6,9082,4],[8444,12,9082,10,"earliestEvent"],[8444,25,9082,23],[8444,28,9082,26,"eventBuffer"],[8444,39,9082,37],[8444,40,9082,38,"getEarliestTimestamp"],[8444,60,9082,58],[8444,61,9082,59],[8444,62,9082,60],[8445,6,9083,4],[8445,10,9083,8,"earliestEvent"],[8445,23,9083,21],[8445,27,9083,25,"earliestEvent"],[8445,40,9083,38],[8445,43,9083,41],[8445,47,9083,45],[8445,48,9083,46,"_context"],[8445,56,9083,54],[8445,57,9083,55,"initialTimestamp"],[8445,73,9083,71],[8445,75,9083,73],[8446,8,9084,6],[8446,12,9084,10],[8446,13,9084,11,"_context"],[8446,21,9084,19],[8446,22,9084,20,"initialTimestamp"],[8446,38,9084,36],[8446,41,9084,39,"earliestEvent"],[8446,54,9084,52],[8447,6,9085,4],[8448,4,9086,2],[8450,4,9088,2],[8451,0,9089,0],[8452,0,9090,0],[8453,4,9091,3,"_popEventContext"],[8453,20,9091,19,"_popEventContext"],[8453,21,9091,19],[8453,23,9091,22],[8454,6,9092,4],[8454,12,9092,10,"_context"],[8454,20,9092,18],[8454,23,9092,21],[8455,8,9093,6,"initialTimestamp"],[8455,24,9093,22],[8455,26,9093,24],[8455,30,9093,28],[8455,31,9093,29,"_context"],[8455,39,9093,37],[8455,40,9093,38,"initialTimestamp"],[8455,56,9093,54],[8456,8,9094,6,"initialUrl"],[8456,18,9094,16],[8456,20,9094,18],[8456,24,9094,22],[8456,25,9094,23,"_context"],[8456,33,9094,31],[8456,34,9094,32,"initialUrl"],[8456,44,9094,42],[8457,8,9095,6,"errorIds"],[8457,16,9095,14],[8457,18,9095,16,"Array"],[8457,23,9095,21],[8457,24,9095,22,"from"],[8457,28,9095,26],[8457,29,9095,27],[8457,33,9095,31],[8457,34,9095,32,"_context"],[8457,42,9095,40],[8457,43,9095,41,"errorIds"],[8457,51,9095,49],[8457,52,9095,50],[8458,8,9096,6,"traceIds"],[8458,16,9096,14],[8458,18,9096,16,"Array"],[8458,23,9096,21],[8458,24,9096,22,"from"],[8458,28,9096,26],[8458,29,9096,27],[8458,33,9096,31],[8458,34,9096,32,"_context"],[8458,42,9096,40],[8458,43,9096,41,"traceIds"],[8458,51,9096,49],[8458,52,9096,50],[8459,8,9097,6,"urls"],[8459,12,9097,10],[8459,14,9097,12],[8459,18,9097,16],[8459,19,9097,17,"_context"],[8459,27,9097,25],[8459,28,9097,26,"urls"],[8460,6,9098,4],[8460,7,9098,5],[8461,6,9100,4],[8461,10,9100,8],[8461,11,9100,9,"_clearContext"],[8461,24,9100,22],[8461,25,9100,23],[8461,26,9100,24],[8462,6,9102,4],[8462,13,9102,11,"_context"],[8462,21,9102,19],[8463,4,9103,2],[8465,4,9105,2],[8466,0,9106,0],[8467,0,9107,0],[8468,0,9108,0],[8469,0,9109,0],[8470,0,9110,0],[8471,0,9111,0],[8472,0,9112,0],[8473,4,9113,3],[8473,10,9113,9,"_runFlush"],[8473,19,9113,18,"_runFlush"],[8473,20,9113,18],[8473,22,9113,21],[8474,6,9114,4],[8474,12,9114,10,"replayId"],[8474,20,9114,18],[8474,23,9114,21],[8474,27,9114,25],[8474,28,9114,26,"getSessionId"],[8474,40,9114,38],[8474,41,9114,39],[8474,42,9114,40],[8475,6,9116,4],[8475,10,9116,8],[8475,11,9116,9],[8475,15,9116,13],[8475,16,9116,14,"session"],[8475,23,9116,21],[8475,27,9116,25],[8475,28,9116,26],[8475,32,9116,30],[8475,33,9116,31,"eventBuffer"],[8475,44,9116,42],[8475,48,9116,46],[8475,49,9116,47,"replayId"],[8475,57,9116,55],[8475,59,9116,57],[8476,8,9117,6,"DEBUG_BUILD"],[8476,19,9117,17],[8476,23,9117,21,"logger"],[8476,29,9117,27],[8476,30,9117,28,"error"],[8476,35,9117,33],[8476,36,9117,34],[8476,79,9117,77],[8476,80,9117,78],[8477,8,9118,6],[8478,6,9119,4],[8479,6,9121,4],[8479,12,9121,10],[8479,16,9121,14],[8479,17,9121,15,"_addPerformanceEntries"],[8479,39,9121,37],[8479,40,9121,38],[8479,41,9121,39],[8481,6,9123,4],[8482,6,9124,4],[8482,10,9124,8],[8482,11,9124,9],[8482,15,9124,13],[8482,16,9124,14,"eventBuffer"],[8482,27,9124,25],[8482,31,9124,29],[8482,32,9124,30],[8482,36,9124,34],[8482,37,9124,35,"eventBuffer"],[8482,48,9124,46],[8482,49,9124,47,"hasEvents"],[8482,58,9124,56],[8482,60,9124,58],[8483,8,9125,6],[8484,6,9126,4],[8486,6,9128,4],[8487,6,9129,4],[8487,12,9129,10,"addMemoryEntry"],[8487,26,9129,24],[8487,27,9129,25],[8487,31,9129,29],[8487,32,9129,30],[8489,6,9131,4],[8490,6,9132,4],[8490,10,9132,8],[8490,11,9132,9],[8490,15,9132,13],[8490,16,9132,14,"eventBuffer"],[8490,27,9132,25],[8490,29,9132,27],[8491,8,9133,6],[8492,6,9134,4],[8494,6,9136,4],[8495,6,9137,4],[8495,10,9137,8,"replayId"],[8495,18,9137,16],[8495,23,9137,21],[8495,27,9137,25],[8495,28,9137,26,"getSessionId"],[8495,40,9137,38],[8495,41,9137,39],[8495,42,9137,40],[8495,44,9137,42],[8496,8,9138,6],[8497,6,9139,4],[8498,6,9141,4],[8498,10,9141,8],[8499,8,9142,6],[8500,8,9143,6],[8500,12,9143,10],[8500,13,9143,11,"_updateInitialTimestampFromEventBuffer"],[8500,51,9143,49],[8500,52,9143,50],[8500,53,9143,51],[8501,8,9145,6],[8501,14,9145,12,"timestamp"],[8501,23,9145,21],[8501,26,9145,24,"Date"],[8501,30,9145,28],[8501,31,9145,29,"now"],[8501,34,9145,32],[8501,35,9145,33],[8501,36,9145,34],[8503,8,9147,6],[8504,8,9148,6],[8505,8,9149,6],[8506,8,9150,6],[8506,12,9150,10,"timestamp"],[8506,21,9150,19],[8506,24,9150,22],[8506,28,9150,26],[8506,29,9150,27,"_context"],[8506,37,9150,35],[8506,38,9150,36,"initialTimestamp"],[8506,54,9150,52],[8506,57,9150,55],[8506,61,9150,59],[8506,62,9150,60,"_options"],[8506,70,9150,68],[8506,71,9150,69,"maxReplayDuration"],[8506,88,9150,86],[8506,91,9150,89],[8506,96,9150,94],[8506,98,9150,96],[8507,10,9151,8],[8507,16,9151,14],[8507,20,9151,18,"Error"],[8507,25,9151,23],[8507,26,9151,24],[8507,67,9151,65],[8507,68,9151,66],[8508,8,9152,6],[8509,8,9154,6],[8509,14,9154,12,"eventContext"],[8509,26,9154,24],[8509,29,9154,27],[8509,33,9154,31],[8509,34,9154,32,"_popEventContext"],[8509,50,9154,48],[8509,51,9154,49],[8509,52,9154,50],[8510,8,9155,6],[8511,8,9156,6],[8511,14,9156,12,"segmentId"],[8511,23,9156,21],[8511,26,9156,24],[8511,30,9156,28],[8511,31,9156,29,"session"],[8511,38,9156,36],[8511,39,9156,37,"segmentId"],[8511,48,9156,46],[8511,50,9156,48],[8512,8,9157,6],[8512,12,9157,10],[8512,13,9157,11,"_maybeSaveSession"],[8512,30,9157,28],[8512,31,9157,29],[8512,32,9157,30],[8514,8,9159,6],[8515,8,9160,6],[8515,14,9160,12,"recordingData"],[8515,27,9160,25],[8515,30,9160,28],[8515,36,9160,34],[8515,40,9160,38],[8515,41,9160,39,"eventBuffer"],[8515,52,9160,50],[8515,53,9160,51,"finish"],[8515,59,9160,57],[8515,60,9160,58],[8515,61,9160,59],[8516,8,9162,6],[8516,14,9162,12,"sendReplay"],[8516,24,9162,22],[8516,25,9162,23],[8517,10,9163,8,"replayId"],[8517,18,9163,16],[8518,10,9164,8,"recordingData"],[8518,23,9164,21],[8519,10,9165,8,"segmentId"],[8519,19,9165,17],[8520,10,9166,8,"eventContext"],[8520,22,9166,20],[8521,10,9167,8,"session"],[8521,17,9167,15],[8521,19,9167,17],[8521,23,9167,21],[8521,24,9167,22,"session"],[8521,31,9167,29],[8522,10,9168,8,"timestamp"],[8522,19,9168,17],[8523,10,9169,8,"onError"],[8523,17,9169,15],[8523,19,9169,17,"err"],[8523,22,9169,20],[8523,26,9169,24],[8523,30,9169,28],[8523,31,9169,29,"handleException"],[8523,46,9169,44],[8523,47,9169,45,"err"],[8523,50,9169,48],[8524,8,9170,6],[8524,9,9170,7],[8524,10,9170,8],[8525,6,9171,4],[8525,7,9171,5],[8525,8,9171,6],[8525,15,9171,13,"err"],[8525,18,9171,16],[8525,20,9171,18],[8526,8,9172,6],[8526,12,9172,10],[8526,13,9172,11,"handleException"],[8526,28,9172,26],[8526,29,9172,27,"err"],[8526,32,9172,30],[8526,33,9172,31],[8528,8,9174,6],[8529,8,9175,6],[8530,8,9176,6],[8531,8,9177,6],[8532,8,9178,6],[8533,8,9179,6],[8533,12,9179,10],[8533,13,9179,11,"stop"],[8533,17,9179,15],[8533,18,9179,16],[8534,10,9179,18,"reason"],[8534,16,9179,24],[8534,18,9179,26],[8535,8,9179,39],[8535,9,9179,40],[8535,10,9179,41],[8536,8,9181,6],[8536,14,9181,12,"client"],[8536,20,9181,18],[8536,23,9181,21],[8536,27,9181,21,"getClient"],[8536,42,9181,30],[8536,44,9181,31],[8536,45,9181,32],[8537,8,9183,6],[8537,12,9183,10,"client"],[8537,18,9183,16],[8537,20,9183,18],[8538,10,9184,8],[8538,16,9184,14,"dropReason"],[8538,26,9184,24],[8538,29,9184,27,"err"],[8538,32,9184,30],[8538,44,9184,42,"RateLimitError"],[8538,58,9184,56],[8538,61,9184,59],[8538,80,9184,78],[8538,83,9184,81],[8538,95,9184,93],[8539,10,9185,8,"client"],[8539,16,9185,14],[8539,17,9185,15,"recordDroppedEvent"],[8539,35,9185,33],[8539,36,9185,34,"dropReason"],[8539,46,9185,44],[8539,48,9185,46],[8539,56,9185,54],[8539,57,9185,55],[8540,8,9186,6],[8541,6,9187,4],[8542,4,9188,2],[8544,4,9190,2],[8545,0,9191,0],[8546,0,9192,0],[8547,0,9193,0],[8548,4,9194,3,"__init5"],[8548,11,9194,10,"__init5"],[8548,12,9194,10],[8548,14,9194,13],[8549,6,9194,14],[8549,10,9194,18],[8549,11,9194,19,"_flush"],[8549,17,9194,25],[8549,20,9194,28],[8549,27,9194,35],[8550,8,9195,4,"force"],[8550,13,9195,9],[8550,16,9195,12],[8551,6,9196,2],[8551,7,9196,3],[8551,10,9198,3],[8551,11,9198,4],[8551,12,9198,5],[8551,17,9198,10],[8552,8,9199,4],[8552,12,9199,8],[8552,13,9199,9],[8552,17,9199,13],[8552,18,9199,14,"_isEnabled"],[8552,28,9199,24],[8552,32,9199,28],[8552,33,9199,29,"force"],[8552,38,9199,34],[8552,40,9199,36],[8553,10,9200,6],[8554,10,9201,6],[8555,8,9202,4],[8556,8,9204,4],[8556,12,9204,8],[8556,13,9204,9],[8556,17,9204,13],[8556,18,9204,14,"checkAndHandleExpiredSession"],[8556,46,9204,42],[8556,47,9204,43],[8556,48,9204,44],[8556,50,9204,46],[8557,10,9205,6,"DEBUG_BUILD"],[8557,21,9205,17],[8557,25,9205,21,"logger"],[8557,31,9205,27],[8557,32,9205,28,"error"],[8557,37,9205,33],[8557,38,9205,34],[8557,96,9205,92],[8557,97,9205,93],[8558,10,9206,6],[8559,8,9207,4],[8560,8,9209,4],[8560,12,9209,8],[8560,13,9209,9],[8560,17,9209,13],[8560,18,9209,14,"session"],[8560,25,9209,21],[8560,27,9209,23],[8561,10,9210,6],[8562,10,9211,6],[8563,8,9212,4],[8564,8,9214,4],[8564,14,9214,10,"start"],[8564,19,9214,15],[8564,22,9214,18],[8564,26,9214,22],[8564,27,9214,23,"session"],[8564,34,9214,30],[8564,35,9214,31,"started"],[8564,42,9214,38],[8565,8,9215,4],[8565,14,9215,10,"now"],[8565,17,9215,13],[8565,20,9215,16,"Date"],[8565,24,9215,20],[8565,25,9215,21,"now"],[8565,28,9215,24],[8565,29,9215,25],[8565,30,9215,26],[8566,8,9216,4],[8566,14,9216,10,"duration"],[8566,22,9216,18],[8566,25,9216,21,"now"],[8566,28,9216,24],[8566,31,9216,27,"start"],[8566,36,9216,32],[8568,8,9218,4],[8569,8,9219,4],[8569,12,9219,8],[8569,13,9219,9,"_debouncedFlush"],[8569,28,9219,24],[8569,29,9219,25,"cancel"],[8569,35,9219,31],[8569,36,9219,32],[8569,37,9219,33],[8571,8,9221,4],[8572,8,9222,4],[8573,8,9223,4],[8573,14,9223,10,"tooShort"],[8573,22,9223,18],[8573,25,9223,21,"duration"],[8573,33,9223,29],[8573,36,9223,32],[8573,40,9223,36],[8573,41,9223,37,"_options"],[8573,49,9223,45],[8573,50,9223,46,"minReplayDuration"],[8573,67,9223,63],[8574,8,9224,4],[8574,14,9224,10,"tooLong"],[8574,21,9224,17],[8574,24,9224,20,"duration"],[8574,32,9224,28],[8574,35,9224,31],[8574,39,9224,35],[8574,40,9224,36,"_options"],[8574,48,9224,44],[8574,49,9224,45,"maxReplayDuration"],[8574,66,9224,62],[8574,69,9224,65],[8574,73,9224,69],[8575,8,9225,4],[8575,12,9225,8,"tooShort"],[8575,20,9225,16],[8575,24,9225,20,"tooLong"],[8575,31,9225,27],[8575,33,9225,29],[8576,10,9226,6,"DEBUG_BUILD"],[8576,21,9226,17],[8576,25,9227,8,"logger"],[8576,31,9227,14],[8576,32,9227,15,"info"],[8576,36,9227,19],[8576,37,9228,10],[8576,58,9228,31,"Math"],[8576,62,9228,35],[8576,63,9228,36,"floor"],[8576,68,9228,41],[8576,69,9228,42,"duration"],[8576,77,9228,50],[8576,80,9228,53],[8576,84,9228,57],[8576,85,9228,58],[8576,98,9229,12,"tooShort"],[8576,106,9229,20],[8576,109,9229,23],[8576,116,9229,30],[8576,119,9229,33],[8576,125,9229,39],[8576,148,9231,8],[8576,149,9231,9],[8577,10,9233,6],[8577,14,9233,10,"tooShort"],[8577,22,9233,18],[8577,24,9233,20],[8578,12,9234,8],[8578,16,9234,12],[8578,17,9234,13,"_debouncedFlush"],[8578,32,9234,28],[8578,33,9234,29],[8578,34,9234,30],[8579,10,9235,6],[8580,10,9236,6],[8581,8,9237,4],[8582,8,9239,4],[8582,14,9239,10,"eventBuffer"],[8582,25,9239,21],[8582,28,9239,24],[8582,32,9239,28],[8582,33,9239,29,"eventBuffer"],[8582,44,9239,40],[8583,8,9240,4],[8583,12,9240,8,"eventBuffer"],[8583,23,9240,19],[8583,27,9240,23],[8583,31,9240,27],[8583,32,9240,28,"session"],[8583,39,9240,35],[8583,40,9240,36,"segmentId"],[8583,49,9240,45],[8583,54,9240,50],[8583,55,9240,51],[8583,59,9240,55],[8583,60,9240,56,"eventBuffer"],[8583,71,9240,67],[8583,72,9240,68,"hasCheckout"],[8583,83,9240,79],[8583,85,9240,81],[8584,10,9241,6,"DEBUG_BUILD"],[8584,21,9241,17],[8584,25,9241,21,"logger"],[8584,31,9241,27],[8584,32,9241,28,"info"],[8584,36,9241,32],[8584,37,9241,33],[8584,81,9241,77],[8584,82,9241,78],[8585,10,9242,6],[8586,8,9243,4],[8587,8,9245,4],[8587,14,9245,10,"_flushInProgress"],[8587,30,9245,26],[8587,33,9245,29],[8587,34,9245,30],[8587,35,9245,31],[8587,39,9245,35],[8587,40,9245,36,"_flushLock"],[8587,50,9245,46],[8589,8,9247,4],[8590,8,9248,4],[8591,8,9249,4],[8591,12,9249,8],[8591,13,9249,9],[8591,17,9249,13],[8591,18,9249,14,"_flushLock"],[8591,28,9249,24],[8591,30,9249,26],[8592,10,9250,6],[8592,14,9250,10],[8592,15,9250,11,"_flushLock"],[8592,25,9250,21],[8592,28,9250,24],[8592,32,9250,28],[8592,33,9250,29,"_runFlush"],[8592,42,9250,38],[8592,43,9250,39],[8592,44,9250,40],[8593,8,9251,4],[8594,8,9253,4],[8594,12,9253,8],[8595,10,9254,6],[8595,16,9254,12],[8595,20,9254,16],[8595,21,9254,17,"_flushLock"],[8595,31,9254,27],[8596,8,9255,4],[8596,9,9255,5],[8596,10,9255,6],[8596,17,9255,13,"err"],[8596,20,9255,16],[8596,22,9255,18],[8597,10,9256,6],[8597,14,9256,10],[8597,15,9256,11,"handleException"],[8597,30,9256,26],[8597,31,9256,27,"err"],[8597,34,9256,30],[8597,35,9256,31],[8598,8,9257,4],[8598,9,9257,5],[8598,18,9257,14],[8599,10,9258,6],[8599,14,9258,10],[8599,15,9258,11,"_flushLock"],[8599,25,9258,21],[8599,28,9258,24,"undefined"],[8599,37,9258,33],[8600,10,9260,6],[8600,14,9260,10,"_flushInProgress"],[8600,30,9260,26],[8600,32,9260,28],[8601,12,9261,8],[8602,12,9262,8],[8603,12,9263,8],[8604,12,9264,8],[8605,12,9265,8],[8606,12,9266,8],[8606,16,9266,12],[8606,17,9266,13,"_debouncedFlush"],[8606,32,9266,28],[8606,33,9266,29],[8606,34,9266,30],[8607,10,9267,6],[8608,8,9268,4],[8609,6,9269,2],[8609,7,9269,3],[8610,4,9269,4],[8612,4,9271,2],[8613,4,9272,3,"_maybeSaveSession"],[8613,21,9272,20,"_maybeSaveSession"],[8613,22,9272,20],[8613,24,9272,23],[8614,6,9273,4],[8614,10,9273,8],[8614,14,9273,12],[8614,15,9273,13,"session"],[8614,22,9273,20],[8614,26,9273,24],[8614,30,9273,28],[8614,31,9273,29,"_options"],[8614,39,9273,37],[8614,40,9273,38,"stickySession"],[8614,53,9273,51],[8614,55,9273,53],[8615,8,9274,6,"saveSession"],[8615,19,9274,17],[8615,20,9274,18],[8615,24,9274,22],[8615,25,9274,23,"session"],[8615,32,9274,30],[8615,33,9274,31],[8616,6,9275,4],[8617,4,9276,2],[8619,4,9278,2],[8620,4,9279,3,"__init6"],[8620,11,9279,10,"__init6"],[8620,12,9279,10],[8620,14,9279,13],[8621,6,9279,14],[8621,10,9279,18],[8621,11,9279,19,"_onMutationHandler"],[8621,29,9279,37],[8621,32,9279,41,"mutations"],[8621,41,9279,50],[8621,45,9279,55],[8622,8,9280,4],[8622,14,9280,10,"count"],[8622,19,9280,15],[8622,22,9280,18,"mutations"],[8622,31,9280,27],[8622,32,9280,28,"length"],[8622,38,9280,34],[8623,8,9282,4],[8623,14,9282,10,"mutationLimit"],[8623,27,9282,23],[8623,30,9282,26],[8623,34,9282,30],[8623,35,9282,31,"_options"],[8623,43,9282,39],[8623,44,9282,40,"mutationLimit"],[8623,57,9282,53],[8624,8,9283,4],[8624,14,9283,10,"mutationBreadcrumbLimit"],[8624,37,9283,33],[8624,40,9283,36],[8624,44,9283,40],[8624,45,9283,41,"_options"],[8624,53,9283,49],[8624,54,9283,50,"mutationBreadcrumbLimit"],[8624,77,9283,73],[8625,8,9284,4],[8625,14,9284,10,"overMutationLimit"],[8625,31,9284,27],[8625,34,9284,30,"mutationLimit"],[8625,47,9284,43],[8625,51,9284,47,"count"],[8625,56,9284,52],[8625,59,9284,55,"mutationLimit"],[8625,72,9284,68],[8627,8,9286,4],[8628,8,9287,4],[8629,8,9288,4],[8629,12,9288,8,"count"],[8629,17,9288,13],[8629,20,9288,16,"mutationBreadcrumbLimit"],[8629,43,9288,39],[8629,47,9288,43,"overMutationLimit"],[8629,64,9288,60],[8629,66,9288,62],[8630,10,9289,6],[8630,16,9289,12,"breadcrumb"],[8630,26,9289,22],[8630,29,9289,25,"createBreadcrumb"],[8630,45,9289,41],[8630,46,9289,42],[8631,12,9290,8,"category"],[8631,20,9290,16],[8631,22,9290,18],[8631,40,9290,36],[8632,12,9291,8,"data"],[8632,16,9291,12],[8632,18,9291,14],[8633,14,9292,10,"count"],[8633,19,9292,15],[8634,14,9293,10,"limit"],[8634,19,9293,15],[8634,21,9293,17,"overMutationLimit"],[8635,12,9294,8],[8636,10,9295,6],[8636,11,9295,7],[8636,12,9295,8],[8637,10,9296,6],[8637,14,9296,10],[8637,15,9296,11,"_createCustomBreadcrumb"],[8637,38,9296,34],[8637,39,9296,35,"breadcrumb"],[8637,49,9296,45],[8637,50,9296,46],[8638,8,9297,4],[8640,8,9299,4],[8641,8,9300,4],[8641,12,9300,8,"overMutationLimit"],[8641,29,9300,25],[8641,31,9300,27],[8642,10,9301,6],[8643,10,9302,6],[8644,10,9303,6],[8644,14,9303,10],[8644,15,9303,11,"stop"],[8644,19,9303,15],[8644,20,9303,16],[8645,12,9303,18,"reason"],[8645,18,9303,24],[8645,20,9303,26],[8645,35,9303,41],[8646,12,9303,43,"forceFlush"],[8646,22,9303,53],[8646,24,9303,55],[8646,28,9303,59],[8646,29,9303,60,"recordingMode"],[8646,42,9303,73],[8646,47,9303,78],[8647,10,9303,88],[8647,11,9303,89],[8647,12,9303,90],[8648,10,9304,6],[8648,17,9304,13],[8648,22,9304,18],[8649,8,9305,4],[8651,8,9307,4],[8652,8,9308,4],[8652,15,9308,11],[8652,19,9308,15],[8653,6,9309,2],[8653,7,9309,3],[8654,4,9309,4],[8655,2,9310,0],[8656,2,9312,0],[8656,11,9312,9,"getOption"],[8656,20,9312,18,"getOption"],[8656,21,9312,19,"selectors"],[8656,30,9312,28],[8656,32,9312,30,"defaultSelectors"],[8656,48,9312,46],[8656,50,9312,48],[8657,4,9313,2],[8657,11,9313,9],[8657,12,9314,4],[8657,15,9314,7,"selectors"],[8657,24,9314,16],[8658,4,9315,4],[8659,4,9316,4],[8659,7,9316,7,"defaultSelectors"],[8659,23,9316,23],[8659,24,9317,3],[8659,25,9317,4,"join"],[8659,29,9317,8],[8659,30,9317,9],[8659,33,9317,12],[8659,34,9317,13],[8660,2,9318,0],[8662,2,9320,0],[8663,0,9321,0],[8664,0,9322,0],[8665,2,9323,0],[8665,11,9323,9,"getPrivacyOptions"],[8665,28,9323,26,"getPrivacyOptions"],[8665,29,9323,27],[8666,4,9323,29,"mask"],[8666,8,9323,33],[8667,4,9323,35,"unmask"],[8667,10,9323,41],[8668,4,9323,43,"block"],[8668,9,9323,48],[8669,4,9323,50,"unblock"],[8669,11,9323,57],[8670,4,9323,59,"ignore"],[8671,2,9323,66],[8671,3,9323,67],[8671,5,9323,69],[8672,4,9324,2],[8672,10,9324,8,"defaultBlockedElements"],[8672,32,9324,30],[8672,35,9324,33],[8672,36,9324,34],[8672,42,9324,40],[8672,44,9324,42],[8672,71,9324,69],[8672,72,9324,70],[8673,4,9326,2],[8673,10,9326,8,"maskSelector"],[8673,22,9326,20],[8673,25,9326,23,"getOption"],[8673,34,9326,32],[8673,35,9326,33,"mask"],[8673,39,9326,37],[8673,41,9326,39],[8673,42,9326,40],[8673,56,9326,54],[8673,58,9326,56],[8673,78,9326,76],[8673,79,9326,77],[8673,80,9326,78],[8674,4,9327,2],[8674,10,9327,8,"unmaskSelector"],[8674,24,9327,22],[8674,27,9327,25,"getOption"],[8674,36,9327,34],[8674,37,9327,35,"unmask"],[8674,43,9327,41],[8674,45,9327,43],[8674,47,9327,45],[8674,48,9327,46],[8675,4,9329,2],[8675,10,9329,8,"options"],[8675,17,9329,15],[8675,20,9329,18],[8676,6,9330,4],[8677,6,9331,4,"maskTextSelector"],[8677,22,9331,20],[8677,24,9331,22,"maskSelector"],[8677,36,9331,34],[8678,6,9332,4,"unmaskTextSelector"],[8678,24,9332,22],[8678,26,9332,24,"unmaskSelector"],[8678,40,9332,38],[8679,6,9334,4,"blockSelector"],[8679,19,9334,17],[8679,21,9334,19,"getOption"],[8679,30,9334,28],[8679,31,9334,29,"block"],[8679,36,9334,34],[8679,38,9334,36],[8679,39,9334,37],[8679,54,9334,52],[8679,56,9334,54],[8679,77,9334,75],[8679,79,9334,77],[8679,82,9334,80,"defaultBlockedElements"],[8679,104,9334,102],[8679,105,9334,103],[8679,106,9334,104],[8680,6,9335,4,"unblockSelector"],[8680,21,9335,19],[8680,23,9335,21,"getOption"],[8680,32,9335,30],[8680,33,9335,31,"unblock"],[8680,40,9335,38],[8680,42,9335,40],[8680,44,9335,42],[8680,45,9335,43],[8681,6,9336,4,"ignoreSelector"],[8681,20,9336,18],[8681,22,9336,20,"getOption"],[8681,31,9336,29],[8681,32,9336,30,"ignore"],[8681,38,9336,36],[8681,40,9336,38],[8681,41,9336,39],[8681,57,9336,55],[8681,59,9336,57],[8681,81,9336,79],[8681,83,9336,81],[8681,103,9336,101],[8681,104,9336,102],[8682,4,9337,2],[8682,5,9337,3],[8683,4,9339,2],[8683,11,9339,9,"options"],[8683,18,9339,16],[8684,2,9340,0],[8686,2,9342,0],[8687,0,9343,0],[8688,0,9344,0],[8689,2,9345,0],[8689,11,9345,9,"maskAttribute"],[8689,24,9345,22,"maskAttribute"],[8689,25,9345,23],[8690,4,9346,2,"el"],[8690,6,9346,4],[8691,4,9347,2,"key"],[8691,7,9347,5],[8692,4,9348,2,"maskAttributes"],[8692,18,9348,16],[8693,4,9349,2,"maskAllText"],[8693,15,9349,13],[8694,4,9350,2,"privacyOptions"],[8694,18,9350,16],[8695,4,9351,2,"value"],[8696,2,9352,0],[8696,3,9352,1],[8696,5,9352,3],[8697,4,9353,2],[8698,4,9354,2],[8698,8,9354,6],[8698,9,9354,7,"maskAllText"],[8698,20,9354,18],[8698,22,9354,20],[8699,6,9355,4],[8699,13,9355,11,"value"],[8699,18,9355,16],[8700,4,9356,2],[8702,4,9358,2],[8703,4,9359,2],[8703,8,9359,6,"privacyOptions"],[8703,22,9359,20],[8703,23,9359,21,"unmaskTextSelector"],[8703,41,9359,39],[8703,45,9359,43,"el"],[8703,47,9359,45],[8703,48,9359,46,"matches"],[8703,55,9359,53],[8703,56,9359,54,"privacyOptions"],[8703,70,9359,68],[8703,71,9359,69,"unmaskTextSelector"],[8703,89,9359,87],[8703,90,9359,88],[8703,92,9359,90],[8704,6,9360,4],[8704,13,9360,11,"value"],[8704,18,9360,16],[8705,4,9361,2],[8706,4,9363,2],[8706,8,9364,4,"maskAttributes"],[8706,22,9364,18],[8706,23,9364,19,"includes"],[8706,31,9364,27],[8706,32,9364,28,"key"],[8706,35,9364,31],[8706,36,9364,32],[8707,4,9365,4],[8708,4,9366,4],[8709,4,9367,5,"key"],[8709,7,9367,8],[8709,12,9367,13],[8709,19,9367,20],[8709,23,9367,24,"el"],[8709,25,9367,26],[8709,26,9367,27,"tagName"],[8709,33,9367,34],[8709,38,9367,39],[8709,45,9367,46],[8709,49,9367,50],[8709,50,9367,51],[8709,58,9367,59],[8709,60,9367,61],[8709,68,9367,69],[8709,69,9367,70],[8709,70,9367,71,"includes"],[8709,78,9367,79],[8709,79,9367,80,"el"],[8709,81,9367,82],[8709,82,9367,83,"getAttribute"],[8709,94,9367,95],[8709,95,9367,96],[8709,101,9367,102],[8709,102,9367,103],[8709,106,9367,107],[8709,108,9367,109],[8709,109,9367,111],[8709,111,9368,4],[8710,6,9369,4],[8710,13,9369,11,"value"],[8710,18,9369,16],[8710,19,9369,17,"replace"],[8710,26,9369,24],[8710,27,9369,25],[8710,34,9369,32],[8710,36,9369,34],[8710,39,9369,37],[8710,40,9369,38],[8711,4,9370,2],[8712,4,9372,2],[8712,11,9372,9,"value"],[8712,16,9372,14],[8713,2,9373,0],[8714,2,9375,0],[8714,8,9375,6,"MEDIA_SELECTORS"],[8714,23,9375,21],[8714,26,9376,2],[8714,124,9376,100],[8715,2,9378,0],[8715,8,9378,6,"DEFAULT_NETWORK_HEADERS"],[8715,31,9378,29],[8715,34,9378,32],[8715,35,9378,33],[8715,51,9378,49],[8715,53,9378,51],[8715,67,9378,65],[8715,69,9378,67],[8715,77,9378,75],[8715,78,9378,76],[8716,2,9380,0],[8716,6,9380,4,"_initialized"],[8716,18,9380,16],[8716,21,9380,19],[8716,26,9380,24],[8718,2,9382,0],[8719,0,9383,0],[8720,0,9384,0],[8721,0,9385,0],[8722,0,9386,0],[8723,0,9387,0],[8724,0,9388,0],[8725,0,9389,0],[8726,0,9390,0],[8727,0,9391,0],[8728,0,9392,0],[8729,0,9393,0],[8730,0,9394,0],[8731,0,9395,0],[8732,2,9396,0],[8732,8,9396,6,"replayIntegration"],[8732,25,9396,23],[8732,28,9396,28,"options"],[8732,35,9396,35],[8732,39,9396,40],[8733,4,9397,2],[8733,11,9397,9],[8733,15,9397,13,"Replay"],[8733,21,9397,19],[8733,22,9397,20,"options"],[8733,29,9397,27],[8733,30,9397,28],[8734,2,9398,0],[8734,3,9398,2],[8736,2,9400,0],[8737,0,9401,0],[8738,0,9402,0],[8739,0,9403,0],[8740,0,9404,0],[8741,0,9405,0],[8742,2,9400,0,"exports"],[8742,9,9400,0],[8742,10,9400,0,"replayIntegration"],[8742,27,9400,0],[8742,30,9400,0,"replayIntegration"],[8742,47,9400,0],[8743,2,9406,0],[8743,8,9406,6,"Replay"],[8743,14,9406,12],[8743,15,9406,14],[8744,4,9407,2],[8745,0,9408,0],[8746,0,9409,0],[8747,4,9410,3],[8747,11,9410,10,"__initStatic"],[8747,23,9410,22,"__initStatic"],[8747,24,9410,22],[8747,26,9410,25],[8748,6,9410,26],[8748,10,9410,30],[8748,11,9410,31,"id"],[8748,13,9410,33],[8748,16,9410,36],[8748,24,9410,44],[8749,4,9410,45],[8751,4,9412,2],[8752,0,9413,0],[8753,0,9414,0],[8755,4,9416,2],[8756,0,9417,0],[8757,0,9418,0],[8759,4,9420,2],[8760,0,9421,0],[8761,0,9422,0],[8762,0,9423,0],[8763,0,9424,0],[8764,0,9425,0],[8765,0,9426,0],[8767,4,9428,3,"constructor"],[8767,15,9428,14,"constructor"],[8767,16,9428,15],[8768,6,9429,4,"flushMinDelay"],[8768,19,9429,17],[8768,22,9429,20,"DEFAULT_FLUSH_MIN_DELAY"],[8768,45,9429,43],[8769,6,9430,4,"flushMaxDelay"],[8769,19,9430,17],[8769,22,9430,20,"DEFAULT_FLUSH_MAX_DELAY"],[8769,45,9430,43],[8770,6,9431,4,"minReplayDuration"],[8770,23,9431,21],[8770,26,9431,24,"MIN_REPLAY_DURATION"],[8770,45,9431,43],[8771,6,9432,4,"maxReplayDuration"],[8771,23,9432,21],[8771,26,9432,24,"MAX_REPLAY_DURATION"],[8771,45,9432,43],[8772,6,9433,4,"stickySession"],[8772,19,9433,17],[8772,22,9433,20],[8772,26,9433,24],[8773,6,9434,4,"useCompression"],[8773,20,9434,18],[8773,23,9434,21],[8773,27,9434,25],[8774,6,9435,4,"workerUrl"],[8774,15,9435,13],[8775,6,9436,4,"_experiments"],[8775,18,9436,16],[8775,21,9436,19],[8775,22,9436,20],[8775,23,9436,21],[8776,6,9437,4,"maskAllText"],[8776,17,9437,15],[8776,20,9437,18],[8776,24,9437,22],[8777,6,9438,4,"maskAllInputs"],[8777,19,9438,17],[8777,22,9438,20],[8777,26,9438,24],[8778,6,9439,4,"blockAllMedia"],[8778,19,9439,17],[8778,22,9439,20],[8778,26,9439,24],[8779,6,9441,4,"mutationBreadcrumbLimit"],[8779,29,9441,27],[8779,32,9441,30],[8779,35,9441,33],[8780,6,9442,4,"mutationLimit"],[8780,19,9442,17],[8780,22,9442,20],[8780,27,9442,25],[8781,6,9444,4,"slowClickTimeout"],[8781,22,9444,20],[8781,25,9444,23],[8781,29,9444,27],[8782,6,9445,4,"slowClickIgnoreSelectors"],[8782,30,9445,28],[8782,33,9445,31],[8782,35,9445,33],[8783,6,9447,4,"networkDetailAllowUrls"],[8783,28,9447,26],[8783,31,9447,29],[8783,33,9447,31],[8784,6,9448,4,"networkDetailDenyUrls"],[8784,27,9448,25],[8784,30,9448,28],[8784,32,9448,30],[8785,6,9449,4,"networkCaptureBodies"],[8785,26,9449,24],[8785,29,9449,27],[8785,33,9449,31],[8786,6,9450,4,"networkRequestHeaders"],[8786,27,9450,25],[8786,30,9450,28],[8786,32,9450,30],[8787,6,9451,4,"networkResponseHeaders"],[8787,28,9451,26],[8787,31,9451,29],[8787,33,9451,31],[8788,6,9453,4,"mask"],[8788,10,9453,8],[8788,13,9453,11],[8788,15,9453,13],[8789,6,9454,4,"maskAttributes"],[8789,20,9454,18],[8789,23,9454,21],[8789,24,9454,22],[8789,31,9454,29],[8789,33,9454,31],[8789,46,9454,44],[8789,47,9454,45],[8790,6,9455,4,"unmask"],[8790,12,9455,10],[8790,15,9455,13],[8790,17,9455,15],[8791,6,9456,4,"block"],[8791,11,9456,9],[8791,14,9456,12],[8791,16,9456,14],[8792,6,9457,4,"unblock"],[8792,13,9457,11],[8792,16,9457,14],[8792,18,9457,16],[8793,6,9458,4,"ignore"],[8793,12,9458,10],[8793,15,9458,13],[8793,17,9458,15],[8794,6,9459,4,"maskFn"],[8794,12,9459,10],[8795,6,9461,4,"beforeAddRecordingEvent"],[8795,29,9461,27],[8796,6,9462,4,"beforeErrorSampling"],[8796,25,9462,23],[8797,6,9463,4,"onError"],[8798,4,9464,2],[8798,5,9464,3],[8798,8,9464,6],[8798,9,9464,7],[8798,10,9464,8],[8798,12,9464,10],[8799,6,9465,4],[8799,10,9465,8],[8799,11,9465,9,"name"],[8799,15,9465,13],[8799,18,9465,16,"Replay"],[8799,24,9465,22],[8799,25,9465,23,"id"],[8799,27,9465,25],[8800,6,9467,4],[8800,12,9467,10,"privacyOptions"],[8800,26,9467,24],[8800,29,9467,27,"getPrivacyOptions"],[8800,46,9467,44],[8800,47,9467,45],[8801,8,9468,6,"mask"],[8801,12,9468,10],[8802,8,9469,6,"unmask"],[8802,14,9469,12],[8803,8,9470,6,"block"],[8803,13,9470,11],[8804,8,9471,6,"unblock"],[8804,15,9471,13],[8805,8,9472,6,"ignore"],[8806,6,9473,4],[8806,7,9473,5],[8806,8,9473,6],[8807,6,9475,4],[8807,10,9475,8],[8807,11,9475,9,"_recordingOptions"],[8807,28,9475,26],[8807,31,9475,29],[8808,8,9476,6,"maskAllInputs"],[8808,21,9476,19],[8809,8,9477,6,"maskAllText"],[8809,19,9477,17],[8810,8,9478,6,"maskInputOptions"],[8810,24,9478,22],[8810,26,9478,24],[8811,10,9478,26,"password"],[8811,18,9478,34],[8811,20,9478,36],[8812,8,9478,41],[8812,9,9478,42],[8813,8,9479,6,"maskTextFn"],[8813,18,9479,16],[8813,20,9479,18,"maskFn"],[8813,26,9479,24],[8814,8,9480,6,"maskInputFn"],[8814,19,9480,17],[8814,21,9480,19,"maskFn"],[8814,27,9480,25],[8815,8,9481,6,"maskAttributeFn"],[8815,23,9481,21],[8815,25,9481,23,"maskAttributeFn"],[8815,26,9481,24,"key"],[8815,29,9481,27],[8815,31,9481,29,"value"],[8815,36,9481,34],[8815,38,9481,36,"el"],[8815,40,9481,38],[8815,45,9482,8,"maskAttribute"],[8815,58,9482,21],[8815,59,9482,22],[8816,10,9483,10,"maskAttributes"],[8816,24,9483,24],[8817,10,9484,10,"maskAllText"],[8817,21,9484,21],[8818,10,9485,10,"privacyOptions"],[8818,24,9485,24],[8819,10,9486,10,"key"],[8819,13,9486,13],[8820,10,9487,10,"value"],[8820,15,9487,15],[8821,10,9488,10,"el"],[8822,8,9489,8],[8822,9,9489,9],[8822,10,9489,10],[8823,8,9491,6],[8823,11,9491,9,"privacyOptions"],[8823,25,9491,23],[8824,8,9493,6],[8825,8,9494,6,"slimDOMOptions"],[8825,22,9494,20],[8825,24,9494,22],[8825,29,9494,27],[8826,8,9495,6,"inlineStylesheet"],[8826,24,9495,22],[8826,26,9495,24],[8826,30,9495,28],[8827,8,9496,6],[8828,8,9497,6,"inlineImages"],[8828,20,9497,18],[8828,22,9497,20],[8828,27,9497,25],[8829,8,9498,6],[8830,8,9499,6],[8831,8,9500,6,"collectFonts"],[8831,20,9500,18],[8831,22,9500,20],[8831,26,9500,24],[8832,8,9501,6,"errorHandler"],[8832,20,9501,18],[8832,22,9501,21,"err"],[8832,25,9501,24],[8832,29,9501,29],[8833,10,9502,8],[8833,14,9502,12],[8834,12,9503,10,"err"],[8834,15,9503,13],[8834,16,9503,14,"__rrweb__"],[8834,25,9503,23],[8834,28,9503,26],[8834,32,9503,30],[8835,10,9504,8],[8835,11,9504,9],[8835,12,9504,10],[8835,19,9504,17,"error"],[8835,24,9504,22],[8835,26,9504,24],[8836,12,9505,10],[8837,12,9506,10],[8838,10,9506,10],[8839,8,9508,6],[8840,6,9509,4],[8840,7,9509,5],[8841,6,9511,4],[8841,10,9511,8],[8841,11,9511,9,"_initialOptions"],[8841,26,9511,24],[8841,29,9511,27],[8842,8,9512,6,"flushMinDelay"],[8842,21,9512,19],[8843,8,9513,6,"flushMaxDelay"],[8843,21,9513,19],[8844,8,9514,6,"minReplayDuration"],[8844,25,9514,23],[8844,27,9514,25,"Math"],[8844,31,9514,29],[8844,32,9514,30,"min"],[8844,35,9514,33],[8844,36,9514,34,"minReplayDuration"],[8844,53,9514,51],[8844,55,9514,53,"MIN_REPLAY_DURATION_LIMIT"],[8844,80,9514,78],[8844,81,9514,79],[8845,8,9515,6,"maxReplayDuration"],[8845,25,9515,23],[8845,27,9515,25,"Math"],[8845,31,9515,29],[8845,32,9515,30,"min"],[8845,35,9515,33],[8845,36,9515,34,"maxReplayDuration"],[8845,53,9515,51],[8845,55,9515,53,"MAX_REPLAY_DURATION"],[8845,74,9515,72],[8845,75,9515,73],[8846,8,9516,6,"stickySession"],[8846,21,9516,19],[8847,8,9517,6,"useCompression"],[8847,22,9517,20],[8848,8,9518,6,"workerUrl"],[8848,17,9518,15],[8849,8,9519,6,"blockAllMedia"],[8849,21,9519,19],[8850,8,9520,6,"maskAllInputs"],[8850,21,9520,19],[8851,8,9521,6,"maskAllText"],[8851,19,9521,17],[8852,8,9522,6,"mutationBreadcrumbLimit"],[8852,31,9522,29],[8853,8,9523,6,"mutationLimit"],[8853,21,9523,19],[8854,8,9524,6,"slowClickTimeout"],[8854,24,9524,22],[8855,8,9525,6,"slowClickIgnoreSelectors"],[8855,32,9525,30],[8856,8,9526,6,"networkDetailAllowUrls"],[8856,30,9526,28],[8857,8,9527,6,"networkDetailDenyUrls"],[8857,29,9527,27],[8858,8,9528,6,"networkCaptureBodies"],[8858,28,9528,26],[8859,8,9529,6,"networkRequestHeaders"],[8859,29,9529,27],[8859,31,9529,29,"_getMergedNetworkHeaders"],[8859,55,9529,53],[8859,56,9529,54,"networkRequestHeaders"],[8859,77,9529,75],[8859,78,9529,76],[8860,8,9530,6,"networkResponseHeaders"],[8860,30,9530,28],[8860,32,9530,30,"_getMergedNetworkHeaders"],[8860,56,9530,54],[8860,57,9530,55,"networkResponseHeaders"],[8860,79,9530,77],[8860,80,9530,78],[8861,8,9531,6,"beforeAddRecordingEvent"],[8861,31,9531,29],[8862,8,9532,6,"beforeErrorSampling"],[8862,27,9532,25],[8863,8,9533,6,"onError"],[8863,15,9533,13],[8864,8,9535,6,"_experiments"],[8865,6,9536,4],[8865,7,9536,5],[8866,6,9538,4],[8866,10,9538,8],[8866,14,9538,12],[8866,15,9538,13,"_initialOptions"],[8866,30,9538,28],[8866,31,9538,29,"blockAllMedia"],[8866,44,9538,42],[8866,46,9538,44],[8867,8,9539,6],[8868,8,9540,6],[8869,8,9541,6],[8869,12,9541,10],[8869,13,9541,11,"_recordingOptions"],[8869,30,9541,28],[8869,31,9541,29,"blockSelector"],[8869,44,9541,42],[8869,47,9541,45],[8869,48,9541,46],[8869,52,9541,50],[8869,53,9541,51,"_recordingOptions"],[8869,70,9541,68],[8869,71,9541,69,"blockSelector"],[8869,84,9541,82],[8869,87,9542,10,"MEDIA_SELECTORS"],[8869,102,9542,25],[8869,105,9543,10],[8869,108,9543,13],[8869,112,9543,17],[8869,113,9543,18,"_recordingOptions"],[8869,130,9543,35],[8869,131,9543,36,"blockSelector"],[8869,144,9543,49],[8869,148,9543,53,"MEDIA_SELECTORS"],[8869,163,9543,68],[8869,165,9543,70],[8870,6,9544,4],[8871,6,9546,4],[8871,10,9546,8],[8871,14,9546,12],[8871,15,9546,13,"_isInitialized"],[8871,29,9546,27],[8871,33,9546,31],[8871,37,9546,31,"isBrowser"],[8871,52,9546,40],[8871,54,9546,41],[8871,55,9546,42],[8871,57,9546,44],[8872,8,9547,6],[8872,14,9547,12],[8872,18,9547,16,"Error"],[8872,23,9547,21],[8872,24,9547,22],[8872,84,9547,82],[8872,85,9547,83],[8873,6,9548,4],[8874,6,9550,4],[8874,10,9550,8],[8874,11,9550,9,"_isInitialized"],[8874,25,9550,23],[8874,28,9550,26],[8874,32,9550,30],[8875,4,9551,2],[8877,4,9553,2],[8878,4,9554,3],[8878,8,9554,7,"_isInitialized"],[8878,22,9554,21,"_isInitialized"],[8878,23,9554,21],[8878,25,9554,24],[8879,6,9555,4],[8879,13,9555,11,"_initialized"],[8879,25,9555,23],[8880,4,9556,2],[8882,4,9558,2],[8883,4,9559,3],[8883,8,9559,7,"_isInitialized"],[8883,22,9559,21,"_isInitialized"],[8883,23,9559,22,"value"],[8883,28,9559,27],[8883,30,9559,29],[8884,6,9560,4,"_initialized"],[8884,18,9560,16],[8884,21,9560,19,"value"],[8884,26,9560,24],[8885,4,9561,2],[8887,4,9563,2],[8888,0,9564,0],[8889,0,9565,0],[8890,4,9566,3,"afterAllSetup"],[8890,17,9566,16,"afterAllSetup"],[8890,18,9566,17,"client"],[8890,24,9566,23],[8890,26,9566,25],[8891,6,9567,4],[8891,10,9567,8],[8891,11,9567,9],[8891,15,9567,9,"isBrowser"],[8891,30,9567,18],[8891,32,9567,19],[8891,33,9567,20],[8891,37,9567,24],[8891,41,9567,28],[8891,42,9567,29,"_replay"],[8891,49,9567,36],[8891,51,9567,38],[8892,8,9568,6],[8893,6,9569,4],[8894,6,9571,4],[8894,10,9571,8],[8894,11,9571,9,"_setup"],[8894,17,9571,15],[8894,18,9571,16,"client"],[8894,24,9571,22],[8894,25,9571,23],[8895,6,9572,4],[8895,10,9572,8],[8895,11,9572,9,"_initialize"],[8895,22,9572,20],[8895,23,9572,21,"client"],[8895,29,9572,27],[8895,30,9572,28],[8896,4,9573,2],[8898,4,9575,2],[8899,0,9576,0],[8900,0,9577,0],[8901,0,9578,0],[8902,0,9579,0],[8903,0,9580,0],[8904,0,9581,0],[8905,4,9582,3,"start"],[8905,9,9582,8,"start"],[8905,10,9582,8],[8905,12,9582,11],[8906,6,9583,4],[8906,10,9583,8],[8906,11,9583,9],[8906,15,9583,13],[8906,16,9583,14,"_replay"],[8906,23,9583,21],[8906,25,9583,23],[8907,8,9584,6],[8908,6,9585,4],[8909,6,9586,4],[8909,10,9586,8],[8909,11,9586,9,"_replay"],[8909,18,9586,16],[8909,19,9586,17,"start"],[8909,24,9586,22],[8909,25,9586,23],[8909,26,9586,24],[8910,4,9587,2],[8912,4,9589,2],[8913,0,9590,0],[8914,0,9591,0],[8915,0,9592,0],[8916,4,9593,3,"startBuffering"],[8916,18,9593,17,"startBuffering"],[8916,19,9593,17],[8916,21,9593,20],[8917,6,9594,4],[8917,10,9594,8],[8917,11,9594,9],[8917,15,9594,13],[8917,16,9594,14,"_replay"],[8917,23,9594,21],[8917,25,9594,23],[8918,8,9595,6],[8919,6,9596,4],[8920,6,9598,4],[8920,10,9598,8],[8920,11,9598,9,"_replay"],[8920,18,9598,16],[8920,19,9598,17,"startBuffering"],[8920,33,9598,31],[8920,34,9598,32],[8920,35,9598,33],[8921,4,9599,2],[8923,4,9601,2],[8924,0,9602,0],[8925,0,9603,0],[8926,0,9604,0],[8927,4,9605,3,"stop"],[8927,8,9605,7,"stop"],[8927,9,9605,7],[8927,11,9605,10],[8928,6,9606,4],[8928,10,9606,8],[8928,11,9606,9],[8928,15,9606,13],[8928,16,9606,14,"_replay"],[8928,23,9606,21],[8928,25,9606,23],[8929,8,9607,6],[8929,15,9607,13,"Promise"],[8929,22,9607,20],[8929,23,9607,21,"resolve"],[8929,30,9607,28],[8929,31,9607,29],[8929,32,9607,30],[8930,6,9608,4],[8931,6,9610,4],[8931,13,9610,11],[8931,17,9610,15],[8931,18,9610,16,"_replay"],[8931,25,9610,23],[8931,26,9610,24,"stop"],[8931,30,9610,28],[8931,31,9610,29],[8932,8,9610,31,"forceFlush"],[8932,18,9610,41],[8932,20,9610,43],[8932,24,9610,47],[8932,25,9610,48,"_replay"],[8932,32,9610,55],[8932,33,9610,56,"recordingMode"],[8932,46,9610,69],[8932,51,9610,74],[8933,6,9610,84],[8933,7,9610,85],[8933,8,9610,86],[8934,4,9611,2],[8936,4,9613,2],[8937,0,9614,0],[8938,0,9615,0],[8939,0,9616,0],[8940,0,9617,0],[8941,0,9618,0],[8942,0,9619,0],[8943,0,9620,0],[8944,4,9621,3,"flush"],[8944,9,9621,8,"flush"],[8944,10,9621,9,"options"],[8944,17,9621,16],[8944,19,9621,18],[8945,6,9622,4],[8945,10,9622,8],[8945,11,9622,9],[8945,15,9622,13],[8945,16,9622,14,"_replay"],[8945,23,9622,21],[8945,25,9622,23],[8946,8,9623,6],[8946,15,9623,13,"Promise"],[8946,22,9623,20],[8946,23,9623,21,"resolve"],[8946,30,9623,28],[8946,31,9623,29],[8946,32,9623,30],[8947,6,9624,4],[8949,6,9626,4],[8950,6,9627,4],[8950,10,9627,8],[8950,11,9627,9],[8950,15,9627,13],[8950,16,9627,14,"_replay"],[8950,23,9627,21],[8950,24,9627,22,"isEnabled"],[8950,33,9627,31],[8950,34,9627,32],[8950,35,9627,33],[8950,37,9627,35],[8951,8,9628,6],[8951,12,9628,10],[8951,13,9628,11,"_replay"],[8951,20,9628,18],[8951,21,9628,19,"start"],[8951,26,9628,24],[8951,27,9628,25],[8951,28,9628,26],[8952,8,9629,6],[8952,15,9629,13,"Promise"],[8952,22,9629,20],[8952,23,9629,21,"resolve"],[8952,30,9629,28],[8952,31,9629,29],[8952,32,9629,30],[8953,6,9630,4],[8954,6,9632,4],[8954,13,9632,11],[8954,17,9632,15],[8954,18,9632,16,"_replay"],[8954,25,9632,23],[8954,26,9632,24,"sendBufferedReplayOrFlush"],[8954,51,9632,49],[8954,52,9632,50,"options"],[8954,59,9632,57],[8954,60,9632,58],[8955,4,9633,2],[8957,4,9635,2],[8958,0,9636,0],[8959,0,9637,0],[8960,4,9638,3,"getReplayId"],[8960,15,9638,14,"getReplayId"],[8960,16,9638,14],[8960,18,9638,17],[8961,6,9639,4],[8961,10,9639,8],[8961,11,9639,9],[8961,15,9639,13],[8961,16,9639,14,"_replay"],[8961,23,9639,21],[8961,27,9639,25],[8961,28,9639,26],[8961,32,9639,30],[8961,33,9639,31,"_replay"],[8961,40,9639,38],[8961,41,9639,39,"isEnabled"],[8961,50,9639,48],[8961,51,9639,49],[8961,52,9639,50],[8961,54,9639,52],[8962,8,9640,6],[8963,6,9641,4],[8964,6,9643,4],[8964,13,9643,11],[8964,17,9643,15],[8964,18,9643,16,"_replay"],[8964,25,9643,23],[8964,26,9643,24,"getSessionId"],[8964,38,9643,36],[8964,39,9643,37],[8964,40,9643,38],[8965,4,9644,2],[8967,4,9646,2],[8968,0,9647,0],[8969,0,9648,0],[8970,0,9649,0],[8971,0,9650,0],[8972,0,9651,0],[8973,0,9652,0],[8974,0,9653,0],[8975,4,9654,3,"getRecordingMode"],[8975,20,9654,19,"getRecordingMode"],[8975,21,9654,19],[8975,23,9654,22],[8976,6,9655,4],[8976,10,9655,8],[8976,11,9655,9],[8976,15,9655,13],[8976,16,9655,14,"_replay"],[8976,23,9655,21],[8976,27,9655,25],[8976,28,9655,26],[8976,32,9655,30],[8976,33,9655,31,"_replay"],[8976,40,9655,38],[8976,41,9655,39,"isEnabled"],[8976,50,9655,48],[8976,51,9655,49],[8976,52,9655,50],[8976,54,9655,52],[8977,8,9656,6],[8978,6,9657,4],[8979,6,9659,4],[8979,13,9659,11],[8979,17,9659,15],[8979,18,9659,16,"_replay"],[8979,25,9659,23],[8979,26,9659,24,"recordingMode"],[8979,39,9659,37],[8980,4,9660,2],[8982,4,9662,2],[8983,0,9663,0],[8984,0,9664,0],[8985,4,9665,3,"_initialize"],[8985,15,9665,14,"_initialize"],[8985,16,9665,15,"client"],[8985,22,9665,21],[8985,24,9665,23],[8986,6,9666,4],[8986,10,9666,8],[8986,11,9666,9],[8986,15,9666,13],[8986,16,9666,14,"_replay"],[8986,23,9666,21],[8986,25,9666,23],[8987,8,9667,6],[8988,6,9668,4],[8989,6,9670,4],[8989,10,9670,8],[8989,11,9670,9,"_maybeLoadFromReplayCanvasIntegration"],[8989,48,9670,46],[8989,49,9670,47,"client"],[8989,55,9670,53],[8989,56,9670,54],[8990,6,9671,4],[8990,10,9671,8],[8990,11,9671,9,"_replay"],[8990,18,9671,16],[8990,19,9671,17,"initializeSampling"],[8990,37,9671,35],[8990,38,9671,36],[8990,39,9671,37],[8991,4,9672,2],[8993,4,9674,2],[8994,4,9675,3,"_setup"],[8994,10,9675,9,"_setup"],[8994,11,9675,10,"client"],[8994,17,9675,16],[8994,19,9675,18],[8995,6,9676,4],[8996,6,9677,4],[8996,12,9677,10,"finalOptions"],[8996,24,9677,22],[8996,27,9677,25,"loadReplayOptionsFromClient"],[8996,54,9677,52],[8996,55,9677,53],[8996,59,9677,57],[8996,60,9677,58,"_initialOptions"],[8996,75,9677,73],[8996,77,9677,75,"client"],[8996,83,9677,81],[8996,84,9677,82],[8997,6,9679,4],[8997,10,9679,8],[8997,11,9679,9,"_replay"],[8997,18,9679,16],[8997,21,9679,19],[8997,25,9679,23,"ReplayContainer"],[8997,40,9679,38],[8997,41,9679,39],[8998,8,9680,6,"options"],[8998,15,9680,13],[8998,17,9680,15,"finalOptions"],[8998,29,9680,27],[8999,8,9681,6,"recordingOptions"],[8999,24,9681,22],[8999,26,9681,24],[8999,30,9681,28],[8999,31,9681,29,"_recordingOptions"],[9000,6,9682,4],[9000,7,9682,5],[9000,8,9682,6],[9001,4,9683,2],[9003,4,9685,2],[9004,4,9686,3,"_maybeLoadFromReplayCanvasIntegration"],[9004,41,9686,40,"_maybeLoadFromReplayCanvasIntegration"],[9004,42,9686,41,"client"],[9004,48,9686,47],[9004,50,9686,49],[9005,6,9687,4],[9006,6,9688,4],[9007,6,9689,4],[9008,6,9690,4],[9008,10,9690,8],[9009,8,9691,6],[9009,14,9691,12,"canvasIntegration"],[9009,31,9691,29],[9009,34,9691,32,"client"],[9009,40,9691,38],[9009,41,9691,39,"getIntegrationByName"],[9009,61,9691,59],[9009,62,9691,60],[9009,76,9691,74],[9009,77,9691,75],[9010,8,9694,6],[9010,12,9694,10],[9010,13,9694,11,"canvasIntegration"],[9010,30,9694,28],[9010,32,9694,30],[9011,10,9695,8],[9012,8,9696,6],[9013,8,9698,6],[9013,12,9698,10],[9013,13,9698,11,"_replay"],[9013,20,9698,18],[9013,21,9698,19],[9013,30,9698,28],[9013,31,9698,29],[9013,34,9698,32,"canvasIntegration"],[9013,51,9698,49],[9013,52,9698,50,"getOptions"],[9013,62,9698,60],[9013,63,9698,61],[9013,64,9698,62],[9014,6,9699,4],[9014,7,9699,5],[9014,8,9699,6],[9014,15,9699,13,"e"],[9014,16,9699,14],[9014,18,9699,16],[9015,8,9700,6],[9016,6,9700,6],[9017,6,9702,4],[9018,4,9703,2],[9019,2,9704,0],[9020,2,9704,1,"Replay"],[9020,8,9704,7],[9020,9,9704,8,"__initStatic"],[9020,21,9704,20],[9020,22,9704,21],[9020,23,9704,22],[9022,2,9706,0],[9023,2,9707,0],[9023,11,9707,9,"loadReplayOptionsFromClient"],[9023,38,9707,36,"loadReplayOptionsFromClient"],[9023,39,9707,37,"initialOptions"],[9023,53,9707,51],[9023,55,9707,53,"client"],[9023,61,9707,59],[9023,63,9707,61],[9024,4,9708,2],[9024,10,9708,8,"opt"],[9024,13,9708,11],[9024,16,9708,14,"client"],[9024,22,9708,20],[9024,23,9708,21,"getOptions"],[9024,33,9708,31],[9024,34,9708,32],[9024,35,9708,33],[9025,4,9710,2],[9025,10,9710,8,"finalOptions"],[9025,22,9710,20],[9025,25,9710,23],[9026,6,9711,4,"sessionSampleRate"],[9026,23,9711,21],[9026,25,9711,23],[9026,26,9711,24],[9027,6,9712,4,"errorSampleRate"],[9027,21,9712,19],[9027,23,9712,21],[9027,24,9712,22],[9028,6,9713,4],[9028,9,9713,7],[9028,13,9713,7,"dropUndefinedKeys"],[9028,36,9713,24],[9028,38,9713,25,"initialOptions"],[9028,52,9713,39],[9029,4,9714,2],[9029,5,9714,3],[9030,4,9716,2],[9030,10,9716,8,"replaysSessionSampleRate"],[9030,34,9716,32],[9030,37,9716,35],[9030,41,9716,35,"parseSampleRate"],[9030,62,9716,50],[9030,64,9716,51,"opt"],[9030,67,9716,54],[9030,68,9716,55,"replaysSessionSampleRate"],[9030,92,9716,79],[9030,93,9716,80],[9031,4,9717,2],[9031,10,9717,8,"replaysOnErrorSampleRate"],[9031,34,9717,32],[9031,37,9717,35],[9031,41,9717,35,"parseSampleRate"],[9031,62,9717,50],[9031,64,9717,51,"opt"],[9031,67,9717,54],[9031,68,9717,55,"replaysOnErrorSampleRate"],[9031,92,9717,79],[9031,93,9717,80],[9032,4,9719,2],[9032,8,9719,6,"replaysSessionSampleRate"],[9032,32,9719,30],[9032,36,9719,34],[9032,40,9719,38],[9032,44,9719,42,"replaysOnErrorSampleRate"],[9032,68,9719,66],[9032,72,9719,70],[9032,76,9719,74],[9032,78,9719,76],[9033,6,9720,4],[9033,10,9720,4,"consoleSandbox"],[9033,30,9720,18],[9033,32,9720,19],[9033,38,9720,25],[9034,8,9721,6],[9035,8,9722,6,"console"],[9035,15,9722,13],[9035,16,9722,14,"warn"],[9035,20,9722,18],[9035,21,9723,8],[9035,124,9724,6],[9035,125,9724,7],[9036,6,9725,4],[9036,7,9725,5],[9036,8,9725,6],[9037,4,9726,2],[9038,4,9728,2],[9038,8,9728,6,"replaysSessionSampleRate"],[9038,32,9728,30],[9038,36,9728,34],[9038,40,9728,38],[9038,42,9728,40],[9039,6,9729,4,"finalOptions"],[9039,18,9729,16],[9039,19,9729,17,"sessionSampleRate"],[9039,36,9729,34],[9039,39,9729,37,"replaysSessionSampleRate"],[9039,63,9729,61],[9040,4,9730,2],[9041,4,9732,2],[9041,8,9732,6,"replaysOnErrorSampleRate"],[9041,32,9732,30],[9041,36,9732,34],[9041,40,9732,38],[9041,42,9732,40],[9042,6,9733,4,"finalOptions"],[9042,18,9733,16],[9042,19,9733,17,"errorSampleRate"],[9042,34,9733,32],[9042,37,9733,35,"replaysOnErrorSampleRate"],[9042,61,9733,59],[9043,4,9734,2],[9044,4,9736,2],[9044,11,9736,9,"finalOptions"],[9044,23,9736,21],[9045,2,9737,0],[9046,2,9739,0],[9046,11,9739,9,"_getMergedNetworkHeaders"],[9046,35,9739,33,"_getMergedNetworkHeaders"],[9046,36,9739,34,"headers"],[9046,43,9739,41],[9046,45,9739,43],[9047,4,9740,2],[9047,11,9740,9],[9047,12,9740,10],[9047,15,9740,13,"DEFAULT_NETWORK_HEADERS"],[9047,38,9740,36],[9047,40,9740,38],[9047,43,9740,41,"headers"],[9047,50,9740,48],[9047,51,9740,49,"map"],[9047,54,9740,52],[9047,55,9740,53,"header"],[9047,61,9740,59],[9047,65,9740,63,"header"],[9047,71,9740,69],[9047,72,9740,70,"toLowerCase"],[9047,83,9740,81],[9047,84,9740,82],[9047,85,9740,83],[9047,86,9740,84],[9047,87,9740,85],[9048,2,9741,0],[9050,2,9743,0],[9051,0,9744,0],[9052,0,9745,0],[9053,2,9746,0],[9053,11,9746,9,"getReplay"],[9053,20,9746,18,"getReplay"],[9053,21,9746,18],[9053,23,9746,21],[9054,4,9747,2],[9054,10,9747,8,"client"],[9054,16,9747,14],[9054,19,9747,17],[9054,23,9747,17,"getClient"],[9054,38,9747,26],[9054,40,9747,27],[9054,41,9747,28],[9055,4,9748,2],[9055,11,9748,9,"client"],[9055,17,9748,15],[9055,21,9748,19,"client"],[9055,27,9748,25],[9055,28,9748,26,"getIntegrationByName"],[9055,48,9748,46],[9055,49,9748,47],[9055,57,9748,55],[9055,58,9748,56],[9056,2,9749,0],[9057,0,9749,1],[9057,3]],"functionMap":{"names":["<global>","_nullishCoalesce$1","_optionalChain$5","fn$argument_0","<anonymous>","isElement$1","isShadowRoot","isNativeShadowDom","fixBrowserCompatibilityIssuesInCSS","escapeImportStatement","stringifyStylesheet","fixAllCssProperty","stringifyRule","fixSafariColons","isCSSImportRule","isCSSStyleRule","Mirror","Mirror#constructor","Mirror#getId","_nullishCoalesce$1$argument_1","Mirror#getNode","Mirror#getIds","Mirror#getMeta","Mirror#removeNodeFromMap","n.childNodes.forEach$argument_0","Mirror#has","Mirror#hasNode","Mirror#add","Mirror#replace","Mirror#reset","createMirror","shouldMaskInput","maskInputValue","toLowerCase","toUpperCase","is2DCanvasBlank","pixelBuffer.some$argument_0","getInputType","getInputValue","extractFileExtension","getImplementation$1","setTimeout$2","clearTimeout$2","getIframeContentDocument","genId","getValidTagName","extractOrigin","absoluteToStylesheet","replace$argument_1","getAbsoluteSrcsetString","collectCharacters","absoluteToDoc","isSVGElement","getHref","transformAttribute","ignoreAttribute","_isBlockedElement","elementClassMatchesRegex","distanceToMatch","createMatchPredicate","needMaskingText","onceIframeLoaded","setTimeout$2$argument_0","iframeEl.addEventListener$argument_1","onceStylesheetLoaded","link.addEventListener$argument_1","serializeNode","getRootId","serializeTextNode","serializeElementNode","Array.from.find$argument_0","recordInlineImage","lowerIfExists","slimDOMExcluded","serializeNodeWithId","onceIframeLoaded$argument_1","onceStylesheetLoaded$argument_1","snapshot","_optionalChain$4","on","_mirror.getId","_mirror.getNode","_mirror.removeNodeFromMap","_mirror.has","_mirror.reset","Proxy$argument_1.get","throttle$1","setTimeout$1$argument_0","hookSetter","set","patch","nowTimestamp","getWindowScroll","getWindowHeight","getWindowWidth","closestElementOfNode","isBlocked","isSerialized","isIgnored","isAncestorRemoved","legacy_isTouchEvent","polyfill","Node.prototype.contains","isSerializedIframe","isSerializedStylesheet","hasShadowRoot","StyleSheetMirror","StyleSheetMirror#constructor","StyleSheetMirror#getId","_nullishCoalesce$argument_1","StyleSheetMirror#has","StyleSheetMirror#add","StyleSheetMirror#getStyle","StyleSheetMirror#reset","StyleSheetMirror#generateId","getShadowHost","getRootShadowHost","shadowHostInDom","inDom","getImplementation","onRequestAnimationFrame","setTimeout$1","clearTimeout$1","getIFrameContentDocument","getIFrameContentWindow","_optionalChain$3","isNodeInLinkedList","DoubleLinkedList","DoubleLinkedList#constructor","DoubleLinkedList#get","DoubleLinkedList#addNode","DoubleLinkedList#removeNode","moveKey","MutationBuffer","MutationBuffer#constructor","processMutations","emit","getNextId","pushAdd","serializeNodeWithId$argument_1.onSerialize","serializeNodeWithId$argument_1.onIframeLoad","serializeNodeWithId$argument_1.onStylesheetLoad","texts.map$argument_0","texts.map.filter$argument_0","texts.map.filter.filter$argument_0","attributes.map$argument_0","attributes.map.filter$argument_0","attributes.map.filter.filter$argument_0","processMutation","m.addedNodes.forEach$argument_0","m.removedNodes.forEach$argument_0","genAdds","n.shadowRoot.childNodes.forEach$argument_0","MutationBuffer#init","forEach$argument_0","MutationBuffer#freeze","MutationBuffer#unfreeze","MutationBuffer#isFrozen","MutationBuffer#lock","MutationBuffer#unlock","MutationBuffer#reset","deepDelete","isParentRemoved","_isParentRemoved","removes.some$argument_0","isAncestorInSet","_isAncestorInSet","registerErrorHandler","unregisterErrorHandler","callbackWrapper","rrwebWrapped","_optionalChain$2","getEventTarget","initMutationObserver","callbackWrapper$argument_0","initMoveObserver","positions.map$argument_0","handlers.forEach$argument_0","initMouseInteractionObserver","getHandler","Object.keys.filter$argument_0","Object.keys.filter.forEach$argument_0","initScrollObserver","initViewportResizeObserver","initInputObserver","eventHandler","doc.querySelectorAll.forEach$argument_0","cbWithDedup","events.map$argument_0","hookProperties.map$argument_0","hookSetter$argument_2.set","getNestedCSSRulePositions","recurse","getIdAndStyleId","initStyleSheetObserver","Object.entries.forEach$argument_0","initAdoptedStyleSheetObserver","Object.defineProperty$argument_2.get","Object.defineProperty$argument_2.set","initStyleDeclarationObserver","initMediaInteractionObserver","initFontObserver","FontFace","patch$argument_2","handlers.push$argument_0","initSelectionObserver","initCustomElementObserver","initObservers","styleSheetObserver","adoptedStyleSheetObserver","styleDeclarationObserver","fontObserver","mutationBuffers.forEach$argument_0","pluginHandlers.forEach$argument_0","hasNestedCSSRule","canMonkeyPatchNestedCSSRule","CrossOriginIframeMirror","CrossOriginIframeMirror#constructor","CrossOriginIframeMirror#getId","CrossOriginIframeMirror#getIds","remoteId.map$argument_0","CrossOriginIframeMirror#getRemoteId","CrossOriginIframeMirror#getRemoteIds","ids.map$argument_0","CrossOriginIframeMirror#reset","CrossOriginIframeMirror#getIdToRemoteIdMap","CrossOriginIframeMirror#getRemoteIdToIdMap","_optionalChain$1","IframeManagerNoop","IframeManagerNoop#constructor","IframeManagerNoop#addIframe","IframeManagerNoop#addLoadListener","IframeManagerNoop#attachIframe","IframeManager","IframeManager#constructor","IframeManager#addIframe","IframeManager#addLoadListener","IframeManager#attachIframe","IframeManager#handleMessage","IframeManager#transformCrossOriginEvent","e.data.adds.forEach$argument_0","e.data.removes.forEach$argument_0","e.data.attributes.forEach$argument_0","e.data.texts.forEach$argument_0","e.data.positions.forEach$argument_0","e.data.ranges.forEach$argument_0","_6$argument_0","IframeManager#replace","IframeManager#replaceIds","IframeManager#replaceStyleIds","IframeManager#replaceIdOnNode","node.childNodes.forEach$argument_0","IframeManager#patchRootIdOnNode","ShadowDomManagerNoop","ShadowDomManagerNoop#init","ShadowDomManagerNoop#addShadowRoot","ShadowDomManagerNoop#observeAttachShadow","ShadowDomManagerNoop#reset","ShadowDomManager","ShadowDomManager#constructor","ShadowDomManager#init","ShadowDomManager#addShadowRoot","restoreHandlers.push$argument_0","ShadowDomManager#observeAttachShadow","ShadowDomManager#patchAttachShadow","ShadowDomManager#reset","restoreHandlers.forEach$argument_0","CanvasManagerNoop","CanvasManagerNoop#reset","CanvasManagerNoop#freeze","CanvasManagerNoop#unfreeze","CanvasManagerNoop#lock","CanvasManagerNoop#unlock","CanvasManagerNoop#snapshot","CanvasManagerNoop#addWindow","CanvasManagerNoop#addShadowRoot","CanvasManagerNoop#resetShadowRoots","StylesheetManager","StylesheetManager#constructor","StylesheetManager#attachLinkElement","StylesheetManager#trackLinkElement","StylesheetManager#adoptStyleSheets","Array.from$argument_1","StylesheetManager#reset","StylesheetManager#trackStylesheetInLinkElement","ProcessedNodeManager","ProcessedNodeManager#constructor","ProcessedNodeManager#inOtherBuffer","Array.from.some$argument_0","ProcessedNodeManager#add","onRequestAnimationFrame$argument_0","ProcessedNodeManager#destroy","record","eventProcessor","wrappedEmit","wrappedMutationEmit","wrappedScrollEmit","wrappedCanvasMutationEmit","wrappedAdoptedStyleSheetEmit","_getCanvasManager$argument_1.mutationCb","takeFullSnapshot","snapshot$argument_1.onSerialize","snapshot$argument_1.onIframeLoad","snapshot$argument_1.onStylesheetLoad","observe","callbackWrapper$argument_0.mousemoveCb","callbackWrapper$argument_0.mouseInteractionCb","callbackWrapper$argument_0.viewportResizeCb","callbackWrapper$argument_0.inputCb","callbackWrapper$argument_0.mediaInteractionCb","callbackWrapper$argument_0.styleSheetRuleCb","callbackWrapper$argument_0.styleDeclarationCb","callbackWrapper$argument_0.fontCb","callbackWrapper$argument_0.selectionCb","callbackWrapper$argument_0.customElementCb","_9$argument_0","_11$argument_0","callback","iframeManager.addLoadListener$argument_0","init","on$argument_1","_getCanvasManager","timestampToMs","timestampToS","addBreadcrumbEvent","replay.addUpdate$argument_0","getClosestInteractive","getClickTargetNode","getTargetNode","isEventWithTarget","onWindowOpen","monkeyPatchWindowOpen","fill$argument_2","handleClick","ClickDetector","ClickDetector#constructor","ClickDetector#addListeners","onWindowOpen$argument_0","_teardown","ClickDetector#removeListeners","ClickDetector#handleClick","_clicks.some$argument_0","ClickDetector#registerMutation","ClickDetector#registerScroll","ClickDetector#registerClick","ClickDetector#_handleMultiClick","_getClicks.forEach$argument_0","ClickDetector#_getClicks","_clicks.filter$argument_0","ClickDetector#_checkClicks","_clicks.forEach$argument_0","ClickDetector#_generateBreadcrumbs","ClickDetector#_scheduleCheckClicks","setTimeout$3$argument_0","ignoreElement","isClickBreadcrumb","nowInSeconds","updateClickDetectorForRecordingEvent","isIncrementalEvent","isIncrementalMouseInteraction","createBreadcrumb","getAttributesToRecord","handleDomListener","getBaseDomBreadcrumb","Array.from.map$argument_0","Array.from.map.filter.map$argument_0","handleDom","getDomTarget","isElement","handleKeyboardEvent","getKeyboardBreadcrumb","isInputElement","webVitalHandler","createPerformanceEntries","createPerformanceEntry","getAbsoluteTime","createPaintEntry","createNavigationEntry","createResourceEntry","getLargestContentfulPaint","isLayoutShift","getCumulativeLayoutShift","getFirstInputDelay","getInteractionToNextPaint","getWebVital","nodes.map$argument_0","setupPerformanceObserver","addPerformanceEntry","onEntries","clearCallbacks.forEach$argument_0","e","_addBreadcrumb","makeReplayLogger","_logger.exception","_logger.infoTick","_logger.setConfig","CONSOLE_LEVELS.forEach$argument_0","_logger.name","setTimeout$argument_0","EventBufferSizeExceededError","EventBufferSizeExceededError#constructor","EventBufferArray","EventBufferArray#constructor","EventBufferArray#get__hasEvents","EventBufferArray#get__type","EventBufferArray#destroy","EventBufferArray#addEvent","EventBufferArray#finish","Promise$argument_0","EventBufferArray#clear","EventBufferArray#getEarliestTimestamp","WorkerHandler","WorkerHandler#constructor","WorkerHandler#ensureReady","_worker.addEventListener$argument_1","WorkerHandler#destroy","WorkerHandler#postMessage","listener","WorkerHandler#_getAndIncrementId","EventBufferCompressionWorker","EventBufferCompressionWorker#constructor","EventBufferCompressionWorker#get__hasEvents","EventBufferCompressionWorker#get__type","EventBufferCompressionWorker#ensureReady","EventBufferCompressionWorker#destroy","EventBufferCompressionWorker#addEvent","EventBufferCompressionWorker#finish","EventBufferCompressionWorker#clear","_worker.postMessage.then$argument_1","EventBufferCompressionWorker#getEarliestTimestamp","EventBufferCompressionWorker#_sendEventToWorker","EventBufferCompressionWorker#_finishRequest","EventBufferProxy","EventBufferProxy#constructor","EventBufferProxy#get__waitForCheckout","EventBufferProxy#get__type","EventBufferProxy#get__hasEvents","EventBufferProxy#get__hasCheckout","EventBufferProxy#set__hasCheckout","EventBufferProxy#set__waitForCheckout","EventBufferProxy#destroy","EventBufferProxy#clear","EventBufferProxy#getEarliestTimestamp","EventBufferProxy#addEvent","EventBufferProxy#finish","EventBufferProxy#ensureWorkerIsLoaded","EventBufferProxy#_ensureWorkerIsLoaded","EventBufferProxy#_switchToCompressionWorker","createEventBuffer","_loadWorker","_getWorkerUrl","hasSessionStorage","clearSession","deleteSession","isSampled","makeSession","saveSession","getSessionSampleType","createSession","fetchSession","isExpired","isSessionExpired","shouldRefreshSession","loadOrCreateSession","isCustomEvent","addEventSync","addEvent","_addEvent","shouldAddEvent","maybeApplyCallback","isErrorEvent","isTransactionEvent","isReplayEvent","isFeedbackEvent","handleAfterSendEvent","handleTransactionEvent","handleErrorEvent","handleBeforeSendEvent","handleHydrationError","handleBreadcrumbs","client.on$argument_1","beforeAddBreadcrumb","normalizeBreadcrumb","normalizeConsoleBreadcrumb","args.map$argument_0","isBreadcrumbWithCategory","isRrwebError","resetReplayIdOnDynamicSamplingContext","addFeedbackBreadcrumb","shouldSampleForBufferEvent","handleGlobalEventListener","Object.assign$argument_0","createPerformanceSpans","entries.map$argument_0","handleHistory","handleHistorySpanListener","shouldFilterRequest","addNetworkBreadcrumb","getBodySize","parseContentLengthHeader","getBodyString","mergeWarning","makeNetworkReplayBreadcrumb","buildSkippedNetworkRequestOrResponse","buildNetworkRequestOrResponse","getAllowedHeaders","Object.entries.reduce$argument_0","_serializeFormData","normalizeNetworkBody","_strIsProbablyJson","urlMatches","getFullUrl","captureFetchBreadcrumbToReplay","enrichFetchBreadcrumb","_prepareFetchData","_getRequestInfo","_getResponseInfo","getResponseData","_parseFetchResponseBody","_getFetchRequestArgBody","getAllHeaders","allowedHeaders.forEach$argument_0","getRequestHeaders","getHeadersFromOptions","_tryCloneResponse","_tryGetResponseText","_getResponseText.then$argument_0","_getResponseText.then$argument_1","_getResponseText.then._finally$argument_0","_getResponseText","captureXhrBreadcrumbToReplay","enrichXhrBreadcrumb","_prepareXhrData","getResponseHeaders","headers.split.reduce$argument_0","_getXhrResponseBody","_parseXhrResponse","_getBodySize","handleNetworkBreadcrumbs","beforeAddNetworkBreadcrumb","_isXhrBreadcrumb","_isFetchBreadcrumb","_isXhrHint","_isFetchHint","addGlobalListeners","addMemoryEntry","createMemoryEntry","debounce","invokeFunc","cancelTimers","flush","debounced","getRecordingSamplingOptions","getHandleRecordingEmit","createOptionsEvent","addSettingsEvent","createReplayEnvelope","prepareRecordingData","prepareReplayEvent","sendReplayRequest","TransportStatusCodeError","TransportStatusCodeError#constructor","RateLimitError","RateLimitError#constructor","sendReplay","throttle","_cleanup","counter.forEach$argument_0","_getTotalCount","reduce$argument_0","ReplayContainer","ReplayContainer#constructor","debounce$argument_0","throttle$argument_0","ReplayContainer#getContext","ReplayContainer#isEnabled","ReplayContainer#isPaused","ReplayContainer#isRecordingCanvas","ReplayContainer#getOptions","ReplayContainer#handleException","ReplayContainer#initializeSampling","ReplayContainer#start","ReplayContainer#startBuffering","ReplayContainer#startRecording","ReplayContainer#stopRecording","ReplayContainer#stop","ReplayContainer#pause","ReplayContainer#resume","ReplayContainer#sendBufferedReplayOrFlush","ReplayContainer#addUpdate","ReplayContainer#triggerUserActivity","ReplayContainer#updateUserActivity","ReplayContainer#conditionalFlush","ReplayContainer#flush","ReplayContainer#flushImmediate","ReplayContainer#cancelFlush","ReplayContainer#getSessionId","ReplayContainer#checkAndHandleExpiredSession","ReplayContainer#setInitialState","ReplayContainer#throttledAddEvent","addUpdate$argument_0","ReplayContainer#getCurrentRoute","ReplayContainer#_initializeRecording","ReplayContainer#_initializeSessionForSampling","ReplayContainer#_checkSession","ReplayContainer#_refreshSession","ReplayContainer#_addListeners","ReplayContainer#_removeListeners","ReplayContainer#__init","_handleVisibilityChange","ReplayContainer#__init2","_handleWindowBlur","ReplayContainer#__init3","_handleWindowFocus","ReplayContainer#__init4","_handleKeyboardEvent","ReplayContainer#_doChangeToBackgroundTasks","ReplayContainer#_doChangeToForegroundTasks","ReplayContainer#_updateUserActivity","ReplayContainer#_updateSessionActivity","ReplayContainer#_createCustomBreadcrumb","ReplayContainer#_addPerformanceEntries","performanceEntries.filter$argument_0","ReplayContainer#_clearContext","ReplayContainer#_updateInitialTimestampFromEventBuffer","ReplayContainer#_popEventContext","ReplayContainer#_runFlush","sendReplay$argument_0.onError","ReplayContainer#__init5","_flush","ReplayContainer#_maybeSaveSession","ReplayContainer#__init6","_onMutationHandler","getOption","getPrivacyOptions","maskAttribute","replayIntegration","Replay","Replay.__initStatic","Replay#constructor","_recordingOptions.maskAttributeFn","_recordingOptions.errorHandler","Replay#get___isInitialized","Replay#set___isInitialized","Replay#afterAllSetup","Replay#start","Replay#startBuffering","Replay#stop","Replay#flush","Replay#getReplayId","Replay#getRecordingMode","Replay#_initialize","Replay#_setup","Replay#_maybeLoadFromReplayCanvasIntegration","loadReplayOptionsFromClient","consoleSandbox$argument_0","_getMergedNetworkHeaders","headers.map$argument_0","getReplay"],"mappings":"AAA;ACsD,qGC,qaC,+CD,iDF;CIC;CJO;AKE;CLE;AMC;wDFC,WE;6DFC,mBE;CNC;AOC;CPE;AQC;CRM;ASC;CTkB;AUC;CVU;AWC;CXS;AYC;CZ0B;AaC;CbG;AcC;CdE;AeC;CfE;AgBC;ICC;KDG;IEC;qDdG,gBc,Ud,Wc,oBd,Wc;sCCC,WD;KFC;IIC;KJE;IKC;KLE;IMC;KNE;IOC;iCCI,gDD;KPE;ISC;KTE;IUC;KVE;IWC;KXI;IYC;KZQ;IaC;KbG;ChBC;A8BC;C9BE;A+BC;C/BQ;AgCC;ChCS;AiCC;CjCE;AkCC;ClCE;AmCE;iCCY,sBD;CnCK;AqCC;CrCQ;AsCC;CtCK;AuCC;wDpBG,6BoB;yEnCO,WmC,IpB,aoB;CvCC;AwCE;CxCuB;AyCC;CzCE;A0CC;C1CE;A2CC;C3CM;A4CK;C5CE;A6CC;C7CS;A8CC;C9CU;A+CO;mDCC;KD8B;C/CC;AiDG;ICK;KDS;CjD2C;AmDE;CnDK;AoDC;CpDE;AqDC;CrDc;AsDC;CtD4B;AuDC;CvDE;AwDC;CxDyB;AyDC;CzDQ;A0DC;C1DU;A2DC;WvDC;KuDqB;C3DC;A4DC;C5DiD;A6DC;mCCc;SDK;0CEC;SFI;C7DW;AgEC;+BFW;KEK;kCCC;KDI;ChEC;AkEC;ClE4E;AmEC;CnEK;AoEC;oDhEW,mBgE,YhE,cgE,oBhE,iBgE;CpE0C;AqEC;4DCa;SDE;kCE8E;SF0B;CrEmD;AwEC;CxEO;AyEC;CzEsE;A0EC;6ctEC,WsE;4BCuH;SDoC;gCES;SFmC;C1EG;A6EC;0gBzEC,WyE;C7EqE;A8EE,qa3E,+C2E,iD9E;A+EC;W3EG,mD2E;C/EC;IgFQ;KhFG;IiFC;KjFG;IkFC;KlFE;ImFC;KnFG;IoFC;KpFE;QqFI;SrFK;AsFG;WlFG;mCmFgB;anFI;KkFE;CtFC;AwFC;YCK;6BFC;iBEE;aDI;WpFE,mDoF;CxFC;A0FC;mBtFG;asFC;etFc;SsFE;etFG;SsFC;C1FE;mB2FG,0B3F;A4FE;2DxFO,sBwF,YxF,mBwF;6DxFC,awF,oBxF,sBwF,oBxF,mBwF;6DxFC,awF,oBxF,mBwF;2DxFM,wBwF,YxF,kBwF;6DxFC,ewF,oBxF,wBwF,oBxF,oBwF;6DxFC,ewF,oBxF,oBwF;C5FG;A6FC;C7FI;A8FC;C9FI;A+FC;C/FQ;AgGC;ChGyB;AiGC;CjGE;AkGC;ClGE;AmGC;CnGgB;AoGC;CpGE;AqGC;kCCU;SDW;CrGE;AuGC;CvGE;AwGC;CxGM;AyGC;0DrGC,qBqG;CzGC;A0GC;ICC;KDI;IEC;iECC,WD;KFC;IIC;KJE;IKC;KLY;IMC;KNE;IOC;KPI;IQC;KRE;C1GC;AmHC;uC/GE,sB+G,kB/G,Y+G,oB/G,mB+G;CnHI;AoHC;CpHM;AqHC;CrHM;AsHC;CtHK;AuHE;CvHuB;AwHC;CxHE;AyHC;CzHE;A0HC;C1HE;iCIE;CJS;yCIC;CJmB;yCIC;CJa;oCIC;CJK;CIG;CJO;CIE;CJa;A2HE;C3HM;A4HC;C5HM;A6HE,qa1H,+C0H,iD7H;A8HC;C9HE;A+HC;ICC;KDI;IEC;mE7HM,W6H;KFG;IGC;KHsC;IIC;KJ2B;C/HC;gBoIC,qCpI;AqIC;ICC;gCCY;SDG;oBEC;8BCO;aDQ;4BEC;iCCiC;qBDW;kCEC;qBFS;sCGC;qBHE;aFU;yBM4E;kBNG;4BOC,gCP;4BQC,kCR;yBSE;iBTgB;4BUC,0CV;4BWC,4CX;SFmB;+BcC;yCCqH,gCD;2CEC;qBF8B;SdI;uBiBC;qC/HuB,gC+H;oDCE;qBDG;SjBG;KDC;IoBC;kBC4B;SDE;KpBC;IsBC;KtBG;IuBC;KvBI;IwBC;KxBE;IyBC;KzBG;I0BC;K1BI;I2BC;K3BG;CrIC;AiKC;yBzIE,uCyI;CjKC;AkKC;ClKI;AmKC;yBCI,wBD;CnKM;AqKC;CrKI;AsKC;CtKS;AuKG;CvKE;AwKC;CxKE;wByKC;0BCI;uBtKM;iBsKC;KDI;CzKE;A2KE,qaxK,+CwK,iD3K;A4KE;C5Ke;A6KC;0EzKM,WyK,oBzK,mByK,kBzK,4ByK;8DCK;KDK;C7KU;A+KC;e3KE;S2KC;iDDQ;kCEE;SFG;KCG;sEDC;KCmB;2BDQ;yBGC,UH;KCC;C/KC;AkLC;e9KE;S8KC;uBCQ;e/KC;S+K0D;KDC;gBEE;iCFE;iBGC;KHe;2BJC;yBGC,UH;KIC;ClLC;AsLC;sERC;KQsB;CtLE;AuLC;uETG;KSW;CvLE;AwLG;ICC;yBC0C;aDY;KDE;IGC;KHY;gCIE,gEJ;epLG;6B6KC,U7K;SoLC;4CKY;YCC;aDK;gCLC;2BVE;yBGC,UH;KUC;CxLC;A+LC;ICE;KDmB;C/LE;AiMC;CjMY;AkMC;e9LE;S8LC;+BpBI;SoBW;+BpBI;SoBW;mCpBM;aoBW;mCpBO;aoBW;wDCmB;mCrBM;aqBmB;mCrBG;aqBa;KDE;2BpBC;4DqBK;SrBG;KoBC;ClMC;AoMC;4ChMO,oBgM,oBhM,iBgM;4ChMC,sBgM,oBhM,oBgM,oBhM,mBgM;wFhMC,kBgM;2FhMC,oBgM;ehMM;SgMC;QCI;2EjMC,ciM,oBjM,eiM,UjM,gBiM;SDC;QEC;mFlMC,ckM,oBlM,ekM,UlM,wBkM;SFS;2BtBE;KsBO;CpMC;AuMC;+BzBG;yF1KK,qB0K,oB1K,2B0K;SyBc;+BzBI;yF1KK,qB0K,oB1K,2B0K;SyBY;2BzBE;KyBG;CvMC;AwMC;oC1BC;8B0Be;2B1BQ;yBGC,UH;K0BC;CxMC;AyMC;erMG;SqMC;mBCK;KDW;mDEC;evMC;yC0KC;a1KM;SuME;KFC;kBGC;KHE;2B3BE;yBGC,UH;K2BC;CzMC;A6MC;4C/BG;uF1KE,sB0K;K+BoB;C7MG;A8MC;e1MG,S0M;+DHC;evMC;SuMW;KGC;C9ME;A+MC;e3MG;S2MC;6BCc,SD;oCEC,SF;mCGC,SH;uBIC,SJ;2BjCiB;gCsCC,gBtC;8D1KC,qB0K,U1K,Y0K;+BuCa,UvC;KiCC;C/MC;AsNC;CtNE;AuNC;CvNK;AwNE;ICC;KDI;IEC;KFU;IGC;4BCG,gED;KHC;IKC;KLQ;IMC;uBCE,qDD;KNC;IQC;KRQ;ISC;KTO;IUC;KVO;CxNC;AmOE,qahO,+CgO,iDnO;AoOC;ICC;KDG;IEC;KFC;IGC;KHC;IIC;KJC;CpOC;AyOC;ICC;KDc;IEC;KFI;IGC;KHE;IIC;0CzOc,mByO,kBzO,kByO;KJM;IKC;KLc;IMC;4CC2C;yBDS;+CEC;yBFE;kDGC;yBHE;6CIC;yBJE;iDKM;yBLE;8CMwB;yBNE;uD3OM,a2O,Y3O,e2O,oB3O,gB2O,U3O,SkP;yBlPE,C2O;KNO;IcC;KdY;IeC;KfE;IgBC;KhBE;IiBC;oCCG;aDE;KjBE;ImBC;oCDI;aCE;KnBE;CzOC;A6PE;ICC;KDC;IEC;KFC;IGC;KHC;IIC;KJC;C7PC;AkQC;ICC;KDQ;IEC;KFG;IGC;kCCc,2BD;qB9KO;S8KQ;KHC;IKC;KLM;IMC;2E7DE;mBvMC;auMK;S6DC;KNC;IOC;qCCC;SDM;KPI;ClQC;A2QE;ICC;KDC;IEC;KFC;IGC;KHC;IIC;KJC;IKC;KLC;IMC;KNC;IOC;KPC;IQC;KRC;ISC;KTC;C3QC;AqRE;ICC;KDK;IEC;KFe;IGC;KHK;IIC;8DCc;sBDG;KJU;IMC;KNG;IOC;KPC;CrRC;A6RE;ICC;KDG;IEC;oDCE,iCD;KFC;IIC;oCCG;aDG;KJG;IMC;KNC;C7RC;wB0RK,Y1R;2DIG,oBJ,oBI,cJ,YI,aJ;AoSQ;uHhSG,WgS;ehSoB;SgSC;2BCgD;KDW;kBEC;uDlSG,WkS,oBlS,iBkS,UlS,UkS;oClFI,uBkF;kDlSG,uCkS;KF6B;gCGC;KHQ;8BIC;MJM;sCKC;MLM;yCMC;MNM;oBO0B;UPM;6BQ4C;gCxFc,mBwF;yBCoB;aDU;0BEC;aFM;8BGC;aHE;gCxFa,qBwF;KRG;wBYI;6BCI;kBDM;oCEC;kBFM;kCGE;kBHM;yBIC;kBJM;oCKC;kBLM;kCMC;kBNM;oCOC;kBPM;wBQE;kBRM;6BSC;iBTQ;iCUC;iBVQ;oB5SkC,e4S,U5S,SuT,iBvT,C4S;oB5SC,c4S,U5S,WwT;8BCG;sBDM;kBxTC,C4S;SZE;sC0BC;S1BO;qB2BC;S3BG;iD4BM;a5BO;qC4BC;a5BO;ehSE;6B6KC,U7K;SgSI;CpSK;A4SC;C5SK;AiUG;CjUU;AkUQ;ClUG;AmUK;CnUG;AoUK;mBCW;GDiB;CpUC;AsUK;CtUG;AuUQ;CvUQ;AwUG;CxUM;AyUE;CzUE;A0UQ;StUS;GsUK;C1UC;A2UE;uBCC;WxUC;2B6KG,oB7K;KwUO;GDC;C3UC;A6Uc;C7UE;A8UG;GCG;GDiB;GEG;2CCC;KDG;qBEE;KFM;GFC;GKG;GLQ;GMG;wBCe,2FD;GNW;GQG;GRE;GSG;GTE;GUG;GVG;GWG;kCCC;KDE;GXC;GaG;+BCC,4BD;GbC;GeG;yBCK;KDY;GfgB;GiBG;GjBsD;GkBG;2CCK,yBD;GlBC;C9UC;AkWK;ClWyB;AmWE;CnWE;AoWG;CpWE;AqWG;CrWkC;AsWE;CtWE;AuWE;CvWI;AwWK;CxWQ;CIG;CJO;AyWsB;CzWkB;0B0WE;StWG;GsWgC;C1WC;A2WG;mBCe,yDD;mBEE,sBF;C3WO;A8WM;C9WO;A+WE;C/We;AgXE;ChXE;AiXG;CjXiB;AkXG;ClXiC;AmXE;CnXE;AoXgB;ShXI,yEgX;CpXC;AqXK;CrXI;AsXE;CtXO;AuXE;CvXI;AwXE;CxXW;AyXE;CzX2C;A0XE;C1XgC;A2XK;C3XI;A4XE;C5XE;A6XK;C7XoB;A8XK;C9XI;A+XK;C/XI;AgYK;iCCoB,iCD;ChYI;AkYM;ECC;GDK;EEE;GFE;iDxOI;GwOE;S9XU;2BiYC,gCjY;G8XC;ClYC;AsYW,iEtY;AuYK;CvYY;AwYE;eCK,eD;cEC,eF;eGC;KHG;2BII;sBCC;ODK;KJC;wBCE;KDc;uBEE;mBIK,6BJ;KFE;2BIE;sBCC,eD;KJC;CxYI;A+YK;GCC;GDE;C/YC;AiZM;GCO;GDK;GEG;GFE;GGG;GHE;GIG;GJE;GKG;GLQ;GMG;uBCC;KDO;GNC;GQG;GRI;GSG;sC9NC,wB8N;GTO;CjZC;A2ZM;GCE;GDG;GEM;2CLM;QMG;SNM;QMM;SNE;KKG;GFG;GIK;GJG;GKK;uBRG;uBSC;OTwB;KQM;GLC;GOG;GPE;C3ZC;AmaM;GCK;GDM;GEG;GFE;GGG;GHE;GIM;GJE;GKK;GLE;GMO;GNc;GOK;GPE;GQG;iDCM;KDE;GRC;GUG;GVE;GWK;GXE;GYK;GZO;CnaC;AgbO;GCE;GDM;GEG;GFE;GGG;GHE;GIG;GJE;GKG;GLE;GME;GNE;GOI;GPE;GQG;GRG;GSG;GTE;GUG;GVE;GWO;GXE;GYG;GZK;GaG;GbE;GcG;GdY;GeG;GfwB;ChbC;AgcK;ChckB;AicE;Cjce;AkcE;ClcM;AmcG;CncO;AocK;CpcG;AqcK;CrcU;AscQ;CtcO;AucK;CvckB;AwcK;CxcU;AycK;CzcE;A0cO;C1ce;A2cK;C3cqB;A4cM;C5cgB;A6cK;C7ce;A8cG;C9ce;A+cM;C/cwB;AgdE;ChdE;AidU;CjdU;AkdQ;CldU;AmdE;CndsD;AodG;CpduB;AqdE;Crde;AsdG;CtdE;AudG;CvdE;AwdG;CxdE;AydG;CzdE;A0dK;StdC;GsdoB;C1dC;A2dE;C3dS;A4dE;e3HwB;G2HO;C5dC;A6dK;SzdC;GydM;C7dC;A8dE;C9d2B;A+dK;mCCO,qDD;C/dC;AieE;CjeS;AkeG;ClesB;AmeG;kCCY;GD4B;CneU;AqeE;CreE;AseK;CteW;AueK;Cvea;AweK;mBnKE;GmK0B;CxeC;AyeO;CzeiB;A0eK;ICE;KDyD;C1eG;A4eK;qBCI;GDkB;C5eC;A8eE;C9ec;A+eK;S3eC;qBiUe;KjUI;G2eC;C/eC;AgfM;ChfO;AifG;mB5KgB;G4KM;CjfC;AkfG;ClfmC;AmfG;CnfO;AofG;CpfyB;AqfG;CrfoB;AsfG;CtfwB;AufG;CvfQ;AwfG;CxfoC;AyfG;wCCC;GDO;CzfC;A2fE;C3fK;A4fE;C5f0C;A6fE;C7fM;A8fG;C9fI;A+fG;C/foB;AggBM;ChgBgB;AigBO;CjgBiB;AkgBE;ClgBiC;AmgBE;CngBqB;AogBG;CpgBiC;AqgBE;CrgB6B;AsgBE;CtgBmB;AugBE;CvgBO;AwgBE;yBCG;GDI;CxgBG;A0gBE;C1gBU;A2gBE;C3gBwB;A4gBE;C5gBQ;A6gBO;qBrHC;iCvDC,qEuD;QsHI,mBtH;QuHC,wBvH;ewHE,2BxH;GqHC;C7gBC;AihBE;CjhBI;AkhBM;ClhBc;AmhBO;CnhBqB;AohBE;CphBuD;AqhBE;sCCO;GDM;CrhBC;AuhBE;CvhBoB;AwhBa;CxhB4B;AyhBE;CzhBU;A0hBQ;uC1DsB,2E0D;C1hBK;A2hBG;C3hBkC;A4hBE;C5hBE;A6hBE;C7hBE;A8hBE;C9hBE;A+hBE;C/hBE;AgiBK;2BhEkB;KgEU;2BhEE;KgEE;yBhEI;KgEE;oChEG;KgEQ;ChiBE;AiiBM;CjiBa;AkiBE;CliBkB;AmiBoB;ECQ;GDI;EEE;GFI;EGE;GHK;EIE;GJW;CniBK;AwiBQ;CxiBgB;AyiBO;SriBG;qBiUkB;KjU0E;GqiBC;CziBC;A0iBK;C1iBuB;A2iBM;C3iBO;A4iBM;C5iBuB;A6iBK;C7iByB;A8iBK;C9iB+C;A+iBK;C/iBqH;AgjBK;GCC;GDE;ChjBC;AkjBK;GCE;GDG;CljBC;AojBK;uB5JkD;mBvDC;OuDO;K4JC;CpjBE;AqjBc;mBCO;oBCE;KDI;GDC;yBGE;wCCC,eD;GHC;SjjBI;GijBmB;CrjBC;A0jBO;GCqD;oCC8B,mBD;MEK,wDF;GD8B;GIG;GJE;GKG;GLE;GMG;GNE;GOK;GPE;GQG;GRE;GSG;GTK;GUM;GVoC;GWS;GXmC;GYM;GZwB;GaO;GbqC;GcQ;GdY;GeM;GfkC;GgBO;GhBS;GiBQ;GjBS;GkBS;GlBqC;GmBU;GnBmB;GoBO;GpBqB;GqBS;GrBG;GsBK;GtBM;GuBK;GvBE;GwBO;GxBI;GyBK;GzBE;G0BG;G1BE;G2BU;G3B2B;G4BO;G5Ba;G6BM;qBCa;ODW;G7BI;G+BM;G/BW;GgCM;GhCoB;GiCK;GjCmB;GkCM;GlCsB;GmCO;GnCM;GoCK;GpCsB;GqCK;GrCkB;GsCQ,yCC;GDM,EtC;GwCK,oCC;GDQ,ExC;G0CK,qCC;GDQ,E1C;G4CG,uCC;GDE,E5C;G8CK;G9CwB;G+CK;G/CkB;GgDK;GhDE;GiDK;GjDK;GkDK;mBpBC;KoBW;GlDC;GmDM;qDCc,iDD;GnDI;GqDK;GrDK;GsDG;GtDiB;GuDK;GvDY;GwDU;iBCwD,gCD;GxDmB;G0DM,yBC;GD2E,E1D;G4DG;G5DI;G6DG,qCC;GD8B,E7D;C1jBC;AynBE;CznBM;A0nBK;C1nBiB;A2nBK;C3nB4B;2B4nBuB;C5nBE;A6nBQ;GCI,2CD;GEkB;uBCqD;UDQ;oBEY;OFO;GF2C;GKG;GLE;GMG;GNE;GOK;GPO;GQS;GRK;GSM;GTM;GUM;GVM;GWU;GXY;GYK;GZM;GaU;GbM;GcK;GdO;GeG;GfQ;GgBG;GhBiB;C7nBC;A8oBG;mBCa;KDK;C9oBY;AgpBE;qDCC,8BD;ChpBC;AkpBK;ClpBG"}},"type":"js/module"}]}