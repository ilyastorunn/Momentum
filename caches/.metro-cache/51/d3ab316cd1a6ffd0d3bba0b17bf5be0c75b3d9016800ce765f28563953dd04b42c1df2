{"dependencies":[{"name":"../defaultScopes.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":87,"index":87}}],"key":"tAlRx+kqSuV0GNrYVk8shVRUqYA=","exportNames":["*"]}},{"name":"../scope.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":88},"end":{"line":2,"column":36,"index":124}}],"key":"bbqqZVE6uvJ/JsOu3l9LbJk8vzU=","exportNames":["*"]}},{"name":"../utils-hoist/is.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":50,"index":175}}],"key":"3x1kguMyd34OmCyltgMzanSUMqM=","exportNames":["*"]}},{"name":"../carrier.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":176},"end":{"line":4,"column":65,"index":241}}],"key":"/CHWq5A6N7GxVM0vQJS3tsMdXuE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.AsyncContextStack = void 0;\n  exports.getStackAsyncContextStrategy = getStackAsyncContextStrategy;\n  var _defaultScopes = require(_dependencyMap[0], \"../defaultScopes.js\");\n  var _scope = require(_dependencyMap[1], \"../scope.js\");\n  var _is = require(_dependencyMap[2], \"../utils-hoist/is.js\");\n  var _carrier = require(_dependencyMap[3], \"../carrier.js\");\n  /**\n   * This is an object that holds a stack of scopes.\n   */\n  class AsyncContextStack {\n    constructor(scope, isolationScope) {\n      let assignedScope;\n      if (!scope) {\n        assignedScope = new _scope.Scope();\n      } else {\n        assignedScope = scope;\n      }\n      let assignedIsolationScope;\n      if (!isolationScope) {\n        assignedIsolationScope = new _scope.Scope();\n      } else {\n        assignedIsolationScope = isolationScope;\n      }\n\n      // scope stack for domains or the process\n      this._stack = [{\n        scope: assignedScope\n      }];\n      this._isolationScope = assignedIsolationScope;\n    }\n\n    /**\n     * Fork a scope for the stack.\n     */\n    withScope(callback) {\n      const scope = this._pushScope();\n      let maybePromiseResult;\n      try {\n        maybePromiseResult = callback(scope);\n      } catch (e) {\n        this._popScope();\n        throw e;\n      }\n      if ((0, _is.isThenable)(maybePromiseResult)) {\n        // @ts-expect-error - isThenable returns the wrong type\n        return maybePromiseResult.then(res => {\n          this._popScope();\n          return res;\n        }, e => {\n          this._popScope();\n          throw e;\n        });\n      }\n      this._popScope();\n      return maybePromiseResult;\n    }\n\n    /**\n     * Get the client of the stack.\n     */\n    getClient() {\n      return this.getStackTop().client;\n    }\n\n    /**\n     * Returns the scope of the top stack.\n     */\n    getScope() {\n      return this.getStackTop().scope;\n    }\n\n    /**\n     * Get the isolation scope for the stack.\n     */\n    getIsolationScope() {\n      return this._isolationScope;\n    }\n\n    /**\n     * Returns the topmost scope layer in the order domain > local > process.\n     */\n    getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n\n    /**\n     * Push a scope to the stack.\n     */\n    _pushScope() {\n      // We want to clone the content of prev scope\n      const scope = this.getScope().clone();\n      this._stack.push({\n        client: this.getClient(),\n        scope\n      });\n      return scope;\n    }\n\n    /**\n     * Pop a scope from the stack.\n     */\n    _popScope() {\n      if (this._stack.length <= 1) return false;\n      return !!this._stack.pop();\n    }\n  }\n\n  /**\n   * Get the global async context stack.\n   * This will be removed during the v8 cycle and is only here to make migration easier.\n   */\n  exports.AsyncContextStack = AsyncContextStack;\n  function getAsyncContextStack() {\n    const registry = (0, _carrier.getMainCarrier)();\n    const sentry = (0, _carrier.getSentryCarrier)(registry);\n    return sentry.stack = sentry.stack || new AsyncContextStack((0, _defaultScopes.getDefaultCurrentScope)(), (0, _defaultScopes.getDefaultIsolationScope)());\n  }\n  function withScope(callback) {\n    return getAsyncContextStack().withScope(callback);\n  }\n  function withSetScope(scope, callback) {\n    const stack = getAsyncContextStack();\n    return stack.withScope(() => {\n      stack.getStackTop().scope = scope;\n      return callback(scope);\n    });\n  }\n  function withIsolationScope(callback) {\n    return getAsyncContextStack().withScope(() => {\n      return callback(getAsyncContextStack().getIsolationScope());\n    });\n  }\n\n  /**\n   * Get the stack-based async context strategy.\n   */\n  function getStackAsyncContextStrategy() {\n    return {\n      withIsolationScope,\n      withScope,\n      withSetScope,\n      withSetIsolationScope: (_isolationScope, callback) => {\n        return withIsolationScope(callback);\n      },\n      getCurrentScope: () => getAsyncContextStack().getScope(),\n      getIsolationScope: () => getAsyncContextStack().getIsolationScope()\n    };\n  }\n});","lineCount":153,"map":[[7,2,1,0],[7,6,1,0,"_defaultScopes"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_scope"],[8,12,2,0],[8,15,2,0,"require"],[8,22,2,0],[8,23,2,0,"_dependencyMap"],[8,37,2,0],[9,2,3,0],[9,6,3,0,"_is"],[9,9,3,0],[9,12,3,0,"require"],[9,19,3,0],[9,20,3,0,"_dependencyMap"],[9,34,3,0],[10,2,4,0],[10,6,4,0,"_carrier"],[10,14,4,0],[10,17,4,0,"require"],[10,24,4,0],[10,25,4,0,"_dependencyMap"],[10,39,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,2,9,0],[14,8,9,6,"AsyncContextStack"],[14,25,9,23],[14,26,9,24],[15,4,11,3,"constructor"],[15,15,11,14,"constructor"],[15,16,11,15,"scope"],[15,21,11,20],[15,23,11,22,"isolationScope"],[15,37,11,36],[15,39,11,38],[16,6,12,4],[16,10,12,8,"assignedScope"],[16,23,12,21],[17,6,13,4],[17,10,13,8],[17,11,13,9,"scope"],[17,16,13,14],[17,18,13,16],[18,8,14,6,"assignedScope"],[18,21,14,19],[18,24,14,22],[18,28,14,26,"Scope"],[18,40,14,31],[18,41,14,32],[18,42,14,33],[19,6,15,4],[19,7,15,5],[19,13,15,11],[20,8,16,6,"assignedScope"],[20,21,16,19],[20,24,16,22,"scope"],[20,29,16,27],[21,6,17,4],[22,6,19,4],[22,10,19,8,"assignedIsolationScope"],[22,32,19,30],[23,6,20,4],[23,10,20,8],[23,11,20,9,"isolationScope"],[23,25,20,23],[23,27,20,25],[24,8,21,6,"assignedIsolationScope"],[24,30,21,28],[24,33,21,31],[24,37,21,35,"Scope"],[24,49,21,40],[24,50,21,41],[24,51,21,42],[25,6,22,4],[25,7,22,5],[25,13,22,11],[26,8,23,6,"assignedIsolationScope"],[26,30,23,28],[26,33,23,31,"isolationScope"],[26,47,23,45],[27,6,24,4],[29,6,26,4],[30,6,27,4],[30,10,27,8],[30,11,27,9,"_stack"],[30,17,27,15],[30,20,27,18],[30,21,27,19],[31,8,27,21,"scope"],[31,13,27,26],[31,15,27,28,"assignedScope"],[32,6,27,42],[32,7,27,43],[32,8,27,44],[33,6,28,4],[33,10,28,8],[33,11,28,9,"_isolationScope"],[33,26,28,24],[33,29,28,27,"assignedIsolationScope"],[33,51,28,49],[34,4,29,2],[36,4,31,2],[37,0,32,0],[38,0,33,0],[39,4,34,3,"withScope"],[39,13,34,12,"withScope"],[39,14,34,13,"callback"],[39,22,34,21],[39,24,34,23],[40,6,35,4],[40,12,35,10,"scope"],[40,17,35,15],[40,20,35,18],[40,24,35,22],[40,25,35,23,"_pushScope"],[40,35,35,33],[40,36,35,34],[40,37,35,35],[41,6,37,4],[41,10,37,8,"maybePromiseResult"],[41,28,37,26],[42,6,38,4],[42,10,38,8],[43,8,39,6,"maybePromiseResult"],[43,26,39,24],[43,29,39,27,"callback"],[43,37,39,35],[43,38,39,36,"scope"],[43,43,39,41],[43,44,39,42],[44,6,40,4],[44,7,40,5],[44,8,40,6],[44,15,40,13,"e"],[44,16,40,14],[44,18,40,16],[45,8,41,6],[45,12,41,10],[45,13,41,11,"_popScope"],[45,22,41,20],[45,23,41,21],[45,24,41,22],[46,8,42,6],[46,14,42,12,"e"],[46,15,42,13],[47,6,43,4],[48,6,45,4],[48,10,45,8],[48,14,45,8,"isThenable"],[48,28,45,18],[48,30,45,19,"maybePromiseResult"],[48,48,45,37],[48,49,45,38],[48,51,45,40],[49,8,46,6],[50,8,47,6],[50,15,47,13,"maybePromiseResult"],[50,33,47,31],[50,34,47,32,"then"],[50,38,47,36],[50,39,48,8,"res"],[50,42,48,11],[50,46,48,15],[51,10,49,10],[51,14,49,14],[51,15,49,15,"_popScope"],[51,24,49,24],[51,25,49,25],[51,26,49,26],[52,10,50,10],[52,17,50,17,"res"],[52,20,50,20],[53,8,51,8],[53,9,51,9],[53,11,52,8,"e"],[53,12,52,9],[53,16,52,13],[54,10,53,10],[54,14,53,14],[54,15,53,15,"_popScope"],[54,24,53,24],[54,25,53,25],[54,26,53,26],[55,10,54,10],[55,16,54,16,"e"],[55,17,54,17],[56,8,55,8],[56,9,56,6],[56,10,56,7],[57,6,57,4],[58,6,59,4],[58,10,59,8],[58,11,59,9,"_popScope"],[58,20,59,18],[58,21,59,19],[58,22,59,20],[59,6,60,4],[59,13,60,11,"maybePromiseResult"],[59,31,60,29],[60,4,61,2],[62,4,63,2],[63,0,64,0],[64,0,65,0],[65,4,66,3,"getClient"],[65,13,66,12,"getClient"],[65,14,66,12],[65,16,66,15],[66,6,67,4],[66,13,67,11],[66,17,67,15],[66,18,67,16,"getStackTop"],[66,29,67,27],[66,30,67,28],[66,31,67,29],[66,32,67,30,"client"],[66,38,67,36],[67,4,68,2],[69,4,70,2],[70,0,71,0],[71,0,72,0],[72,4,73,3,"getScope"],[72,12,73,11,"getScope"],[72,13,73,11],[72,15,73,14],[73,6,74,4],[73,13,74,11],[73,17,74,15],[73,18,74,16,"getStackTop"],[73,29,74,27],[73,30,74,28],[73,31,74,29],[73,32,74,30,"scope"],[73,37,74,35],[74,4,75,2],[76,4,77,2],[77,0,78,0],[78,0,79,0],[79,4,80,3,"getIsolationScope"],[79,21,80,20,"getIsolationScope"],[79,22,80,20],[79,24,80,23],[80,6,81,4],[80,13,81,11],[80,17,81,15],[80,18,81,16,"_isolationScope"],[80,33,81,31],[81,4,82,2],[83,4,84,2],[84,0,85,0],[85,0,86,0],[86,4,87,3,"getStackTop"],[86,15,87,14,"getStackTop"],[86,16,87,14],[86,18,87,17],[87,6,88,4],[87,13,88,11],[87,17,88,15],[87,18,88,16,"_stack"],[87,24,88,22],[87,25,88,23],[87,29,88,27],[87,30,88,28,"_stack"],[87,36,88,34],[87,37,88,35,"length"],[87,43,88,41],[87,46,88,44],[87,47,88,45],[87,48,88,46],[88,4,89,2],[90,4,91,2],[91,0,92,0],[92,0,93,0],[93,4,94,3,"_pushScope"],[93,14,94,13,"_pushScope"],[93,15,94,13],[93,17,94,16],[94,6,95,4],[95,6,96,4],[95,12,96,10,"scope"],[95,17,96,15],[95,20,96,18],[95,24,96,22],[95,25,96,23,"getScope"],[95,33,96,31],[95,34,96,32],[95,35,96,33],[95,36,96,34,"clone"],[95,41,96,39],[95,42,96,40],[95,43,96,41],[96,6,97,4],[96,10,97,8],[96,11,97,9,"_stack"],[96,17,97,15],[96,18,97,16,"push"],[96,22,97,20],[96,23,97,21],[97,8,98,6,"client"],[97,14,98,12],[97,16,98,14],[97,20,98,18],[97,21,98,19,"getClient"],[97,30,98,28],[97,31,98,29],[97,32,98,30],[98,8,99,6,"scope"],[99,6,100,4],[99,7,100,5],[99,8,100,6],[100,6,101,4],[100,13,101,11,"scope"],[100,18,101,16],[101,4,102,2],[103,4,104,2],[104,0,105,0],[105,0,106,0],[106,4,107,3,"_popScope"],[106,13,107,12,"_popScope"],[106,14,107,12],[106,16,107,15],[107,6,108,4],[107,10,108,8],[107,14,108,12],[107,15,108,13,"_stack"],[107,21,108,19],[107,22,108,20,"length"],[107,28,108,26],[107,32,108,30],[107,33,108,31],[107,35,108,33],[107,42,108,40],[107,47,108,45],[108,6,109,4],[108,13,109,11],[108,14,109,12],[108,15,109,13],[108,19,109,17],[108,20,109,18,"_stack"],[108,26,109,24],[108,27,109,25,"pop"],[108,30,109,28],[108,31,109,29],[108,32,109,30],[109,4,110,2],[110,2,111,0],[112,2,113,0],[113,0,114,0],[114,0,115,0],[115,0,116,0],[116,2,113,0,"exports"],[116,9,113,0],[116,10,113,0,"AsyncContextStack"],[116,27,113,0],[116,30,113,0,"AsyncContextStack"],[116,47,113,0],[117,2,117,0],[117,11,117,9,"getAsyncContextStack"],[117,31,117,29,"getAsyncContextStack"],[117,32,117,29],[117,34,117,32],[118,4,118,2],[118,10,118,8,"registry"],[118,18,118,16],[118,21,118,19],[118,25,118,19,"getMainCarrier"],[118,48,118,33],[118,50,118,34],[118,51,118,35],[119,4,119,2],[119,10,119,8,"sentry"],[119,16,119,14],[119,19,119,17],[119,23,119,17,"getSentryCarrier"],[119,48,119,33],[119,50,119,34,"registry"],[119,58,119,42],[119,59,119,43],[120,4,121,2],[120,11,121,10,"sentry"],[120,17,121,16],[120,18,121,17,"stack"],[120,23,121,22],[120,26,121,25,"sentry"],[120,32,121,31],[120,33,121,32,"stack"],[120,38,121,37],[120,42,121,41],[120,46,121,45,"AsyncContextStack"],[120,63,121,62],[120,64,121,63],[120,68,121,63,"getDefaultCurrentScope"],[120,105,121,85],[120,107,121,86],[120,108,121,87],[120,110,121,89],[120,114,121,89,"getDefaultIsolationScope"],[120,153,121,113],[120,155,121,114],[120,156,121,115],[120,157,121,116],[121,2,122,0],[122,2,124,0],[122,11,124,9,"withScope"],[122,20,124,18,"withScope"],[122,21,124,19,"callback"],[122,29,124,27],[122,31,124,29],[123,4,125,2],[123,11,125,9,"getAsyncContextStack"],[123,31,125,29],[123,32,125,30],[123,33,125,31],[123,34,125,32,"withScope"],[123,43,125,41],[123,44,125,42,"callback"],[123,52,125,50],[123,53,125,51],[124,2,126,0],[125,2,128,0],[125,11,128,9,"withSetScope"],[125,23,128,21,"withSetScope"],[125,24,128,22,"scope"],[125,29,128,27],[125,31,128,29,"callback"],[125,39,128,37],[125,41,128,39],[126,4,129,2],[126,10,129,8,"stack"],[126,15,129,13],[126,18,129,16,"getAsyncContextStack"],[126,38,129,36],[126,39,129,37],[126,40,129,38],[127,4,130,2],[127,11,130,9,"stack"],[127,16,130,14],[127,17,130,15,"withScope"],[127,26,130,24],[127,27,130,25],[127,33,130,31],[128,6,131,4,"stack"],[128,11,131,9],[128,12,131,10,"getStackTop"],[128,23,131,21],[128,24,131,22],[128,25,131,23],[128,26,131,24,"scope"],[128,31,131,29],[128,34,131,32,"scope"],[128,39,131,37],[129,6,132,4],[129,13,132,11,"callback"],[129,21,132,19],[129,22,132,20,"scope"],[129,27,132,25],[129,28,132,26],[130,4,133,2],[130,5,133,3],[130,6,133,4],[131,2,134,0],[132,2,136,0],[132,11,136,9,"withIsolationScope"],[132,29,136,27,"withIsolationScope"],[132,30,136,28,"callback"],[132,38,136,36],[132,40,136,38],[133,4,137,2],[133,11,137,9,"getAsyncContextStack"],[133,31,137,29],[133,32,137,30],[133,33,137,31],[133,34,137,32,"withScope"],[133,43,137,41],[133,44,137,42],[133,50,137,48],[134,6,138,4],[134,13,138,11,"callback"],[134,21,138,19],[134,22,138,20,"getAsyncContextStack"],[134,42,138,40],[134,43,138,41],[134,44,138,42],[134,45,138,43,"getIsolationScope"],[134,62,138,60],[134,63,138,61],[134,64,138,62],[134,65,138,63],[135,4,139,2],[135,5,139,3],[135,6,139,4],[136,2,140,0],[138,2,142,0],[139,0,143,0],[140,0,144,0],[141,2,145,0],[141,11,145,9,"getStackAsyncContextStrategy"],[141,39,145,37,"getStackAsyncContextStrategy"],[141,40,145,37],[141,42,145,40],[142,4,146,2],[142,11,146,9],[143,6,147,4,"withIsolationScope"],[143,24,147,22],[144,6,148,4,"withScope"],[144,15,148,13],[145,6,149,4,"withSetScope"],[145,18,149,16],[146,6,150,4,"withSetIsolationScope"],[146,27,150,25],[146,29,150,27,"withSetIsolationScope"],[146,30,150,28,"_isolationScope"],[146,45,150,43],[146,47,150,45,"callback"],[146,55,150,53],[146,60,150,58],[147,8,151,6],[147,15,151,13,"withIsolationScope"],[147,33,151,31],[147,34,151,32,"callback"],[147,42,151,40],[147,43,151,41],[148,6,152,4],[148,7,152,5],[149,6,153,4,"getCurrentScope"],[149,21,153,19],[149,23,153,21,"getCurrentScope"],[149,24,153,21],[149,29,153,27,"getAsyncContextStack"],[149,49,153,47],[149,50,153,48],[149,51,153,49],[149,52,153,50,"getScope"],[149,60,153,58],[149,61,153,59],[149,62,153,60],[150,6,154,4,"getIsolationScope"],[150,23,154,21],[150,25,154,23,"getIsolationScope"],[150,26,154,23],[150,31,154,29,"getAsyncContextStack"],[150,51,154,49],[150,52,154,50],[150,53,154,51],[150,54,154,52,"getIsolationScope"],[150,71,154,69],[150,72,154,70],[151,4,155,2],[151,5,155,3],[152,2,156,0],[153,0,156,1],[153,3]],"functionMap":{"names":["<global>","AsyncContextStack","AsyncContextStack#constructor","AsyncContextStack#withScope","maybePromiseResult.then$argument_0","maybePromiseResult.then$argument_1","AsyncContextStack#getClient","AsyncContextStack#getScope","AsyncContextStack#getIsolationScope","AsyncContextStack#getStackTop","AsyncContextStack#_pushScope","AsyncContextStack#_popScope","getAsyncContextStack","withScope","withSetScope","stack.withScope$argument_0","withIsolationScope","getAsyncContextStack.withScope$argument_0","getStackAsyncContextStrategy","withSetIsolationScope","getCurrentScope","getIsolationScope"],"mappings":"AAA;ACQ;GCE;GDkB;GEK;QCc;SDG;QEC;SFG;GFM;GKK;GLE;GMK;GNE;GOK;GPE;GQK;GRE;GSK;GTQ;GUK;GVG;CDC;AYM;CZK;AaE;CbE;AcE;yBCE;GDG;CdC;AgBE;0CCC;GDE;ChBC;AkBK;2BCK;KDE;qBEC,uCF;uBGC,gDH;ClBE"}},"type":"js/module"}]}